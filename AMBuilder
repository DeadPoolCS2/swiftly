# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python: 
import os, fnmatch

# Here only one sdk should be available to generate only one executable in the end,
# as multi-sdk loading isn't supported out of the box by metamod, and would require specifying the full path in the vdf
# which in the end would ruin the multi-platform (unix, win etc) loading by metamod as it won't be able to append platform specific extension
# so just fall back to the single binary.
# Multi-sdk solutions should be manually loaded with a custom plugin loader (examples being sourcemod, stripper:source)
for sdk_target in MMSPlugin.sdk_targets:
  sdk = sdk_target.sdk
  cxx = sdk_target.cxx

  binary = MMSPlugin.HL2Library(builder, cxx, MMSPlugin.plugin_name, sdk)

  for root, dirs, files in os.walk(os.path.join(builder.sourcePath, "src")):
      for _file in files:
          if fnmatch.fnmatch(_file, '*.cpp'):
              binary.sources.append(os.path.join(root, _file).replace("\\", "/"))

  for root, dirs, files in os.walk(os.path.join(builder.sourcePath, 'vendor', 'luacpp', "src")):
      for _file in files:
          if fnmatch.fnmatch(_file, '*.cpp'):
              binary.sources.append(os.path.join(root, _file).replace("\\", "/"))

  for root, dirs, files in os.walk(os.path.join(builder.sourcePath, 'vendor', 'lua-rapidjson', "src")):
      for _file in files:
          if fnmatch.fnmatch(_file, '*.cpp'):
              binary.sources.append(os.path.join(root, _file).replace("\\", "/"))

  for root, dirs, files in os.walk(os.path.join(builder.sourcePath, 'vendor', 'lua')):
      for _file in files:
          if fnmatch.fnmatch(_file, '*.c') and not "testes" in root and not "onelua.c" in _file:
              binary.sources.append(os.path.join(root, _file).replace("\\", "/"))

  binary.compiler.cxxincludes += [
    os.path.join(builder.sourcePath, 'src', 'inc'),
    os.path.join(builder.sourcePath, 'src'),
    os.path.join(builder.sourcePath, 'vendor', 'rapidjson', 'include'),
    os.path.join(builder.sourcePath, 'vendor', 'funchook', 'include'),
    os.path.join(builder.sourcePath, 'vendor', 'cpp-httplib'),
    os.path.join(builder.sourcePath, 'vendor', 'luacpp', 'include'),
    os.path.join(builder.sourcePath, 'vendor', 'mysql', ('win64' if binary.compiler.target.platform == 'windows' else 'linuxsteamrt64'), 'include'),
    os.path.join(builder.sourcePath, 'vendor', 'lua'),
    os.path.join(builder.sourcePath, 'vendor', 'openssl', ('win64' if binary.compiler.target.platform == 'windows' else 'linuxsteamrt64'), 'include'),
    os.path.join(builder.sourcePath, 'vendor', 'curl', ('win64' if binary.compiler.target.platform == 'windows' else 'linuxsteamrt64'), 'include'),
    os.path.join(builder.sourcePath, 'hl2sdk'),
    os.path.join(builder.sourcePath, 'hl2sdk', 'public'),
    os.path.join(builder.sourcePath, 'hl2sdk', 'public', 'entity2'),
    os.path.join(builder.sourcePath, 'hl2sdk', 'game', 'server'),
    # os.path.join(builder.sourcePath, 'src', 'sdk'),
  ]

  if binary.compiler.target.platform == 'linux' or binary.compiler.target.platform == 'mac':
    binary.compiler.postlink += [
      os.path.join(builder.sourcePath, 'vendor', 'mysql', 'linuxsteamrt64', 'lib', 'libmysqlclient.a'),
      os.path.join(builder.sourcePath, 'vendor', 'curl', 'linuxsteamrt64', 'lib', 'libcurl.a'),
      os.path.join(builder.sourcePath, 'vendor', 'funchook', 'lib', 'libfunchook.a'),
      os.path.join(builder.sourcePath, 'vendor', 'funchook', 'lib', 'libdistorm.a'),
      '-lz',
      '-lpthread',
      '-lm',
      '-ldl',
      '-lreadline',
    ]

  if binary.compiler.family == 'msvc' and binary.compiler.version >= 1900:
    binary.compiler.linkflags += ['legacy_stdio_definitions.lib', 'legacy_stdio_wide_specifiers.lib']
    binary.compiler.defines += ['HAVE_STRUCT_TIMESPEC']

  if binary.compiler.target.platform == 'linux':
    binary.compiler.postlink += ['-lrt', '-lssl', '-lcrypto', '-fexceptions', '-lidn2', '-lpsl', '-lbrotlidec', '-lz']
    binary.compiler.defines += ["LUA_USE_LINUX", "LUA_USE_READLINE"]
  elif binary.compiler.target.platform == 'windows':
    binary.compiler.postlink += [
      os.path.join('psapi.lib'),
      'winmm.lib',
      os.path.join(builder.sourcePath, 'vendor', 'mysql', 'win64', 'lib', 'mysqlclient.lib'),
      os.path.join(builder.sourcePath, 'vendor', 'funchook', 'lib', 'funchook.lib'),
      os.path.join(builder.sourcePath, 'vendor', 'funchook', 'lib', 'distorm.lib'),
      os.path.join(builder.sourcePath, 'vendor', 'curl', 'win64', 'lib', 'libcurl_a.lib'),
      'ws2_32.lib',
      'wldap32.lib',
      'advapi32.lib',
      'kernel32.lib',
      'comdlg32.lib',
      'crypt32.lib',
      'normaliz.lib',
      'wsock32.lib'
    ]
  
  if sdk['name'] in ['dota', 'cs2']:
    binary.sources += [
      os.path.join(sdk['path'], 'entity2', 'entitysystem.cpp'),
      os.path.join(sdk['path'], 'entity2', 'entityidentity.cpp'),
    ]

  if sdk['name'] == 'cs2':
    binary.custom = [builder.tools.Protoc(protoc = sdk_target.protoc, sources = [
      os.path.join(sdk['path'], 'common', 'network_connection.proto'),
      os.path.join(sdk['path'], 'common', 'networkbasetypes.proto'),
    ])]

  if cxx.target.arch == 'x86':
    binary.sources += ['sourcehook/sourcehook_hookmangen.cpp']

  nodes = builder.Add(binary)
  MMSPlugin.binaries += [nodes]