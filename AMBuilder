# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python: 
import os, fnmatch

# Here only one sdk should be available to generate only one executable in the end,
# as multi-sdk loading isn't supported out of the box by metamod, and would require specifying the full path in the vdf
# which in the end would ruin the multi-platform (unix, win etc) loading by metamod as it won't be able to append platform specific extension
# so just fall back to the single binary.
# Multi-sdk solutions should be manually loaded with a custom plugin loader (examples being sourcemod, stripper:source)
for sdk_name in MMSPlugin.sdks:
  for cxx in MMSPlugin.all_targets:
    sdk = MMSPlugin.sdks[sdk_name]

    if not cxx.target.arch in sdk.platformSpec[cxx.target.platform]:
      continue

    binary = MMSPlugin.HL2Library(builder, cxx, MMSPlugin.plugin_name, sdk)

    for root, dirs, files in os.walk(os.path.join(sdk.path, "..", "src")):
        for _file in files:
            if fnmatch.fnmatch(_file, '*.cpp'):
                binary.sources.append(os.path.join(root, _file).replace("\\", "/"))

    binary.compiler.cxxincludes += [
      os.path.join(builder.sourcePath, 'vendor', 'rapidjson', 'include'),
      os.path.join(builder.sourcePath, 'vendor', 'mysql', ('win64' if binary.compiler.target.platform == 'windows' else 'linuxsteamrt64'), 'include'),
      os.path.join(builder.sourcePath, 'hl2sdk'),
      os.path.join(builder.sourcePath, 'hl2sdk', 'public'),
      os.path.join(builder.sourcePath, 'hl2sdk', 'game', 'server'),
      # os.path.join(builder.sourcePath, 'src', 'sdk'),
    ]

    if binary.compiler.target.platform == 'linux' or binary.compiler.target.platform == 'mac':
      binary.compiler.postlink += [
        os.path.join(builder.sourcePath, 'vendor', 'mysql', 'linuxsteamrt64', 'lib', 'libmysqlclient_r.a'),
        '-lz',
        '-lpthread',
        '-lm',
      ]

    if binary.compiler.target.platform == 'linux':
      binary.compiler.postlink += ['-lrt']
    elif binary.compiler.target.platform == 'windows':
      binary.compiler.postlink += [
        os.path.join(builder.sourcePath, 'vendor', 'mysql', 'win64', 'lib', 'mysqlclient.lib'),
        'wsock32.lib'
      ]

    if binary.compiler.family == 'msvc' and binary.compiler.version >= 1900:
      binary.compiler.linkflags += ['legacy_stdio_definitions.lib', 'legacy_stdio_wide_specifiers.lib']
      binary.compiler.defines += ['HAVE_STRUCT_TIMESPEC']
    
    if sdk_name in ['dota', 'cs2']:
      binary.sources += [
      os.path.join(sdk.path, 'tier1', 'convar.cpp'),
      os.path.join(sdk.path, 'public', 'tier0', 'memoverride.cpp'),
      os.path.join(sdk.path, 'entity2', 'entitysystem.cpp'),
    ]

    if cxx.target.arch == 'x86':
      binary.sources += ['sourcehook/sourcehook_hookmangen.cpp']

    print(binary.sources)

    nodes = builder.Add(binary)
    MMSPlugin.binaries += [nodes]
    
  break