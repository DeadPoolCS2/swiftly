#include "../../scripting_includes.h"
#include "enums.h"

class GCGlowProperty;
class GCEntityComponent;
class GCPlayerPawnComponent;
class Gfogparams_t;
class GCNetworkTransmitComponent;
class GCNetworkViewOffsetVector;
class GCNetworkVelocityVector;
class GCEntityInstance;
class GCBaseEntity;
class GCPropDataComponent;
class GCHitboxComponent;
class GVPhysicsCollisionAttribute_t;
class GCCollisionProperty;
class GCBaseModelEntity;
class GCServerOnlyEntity;
class GCBaseToggle;
class GCBaseTrigger;
class GCTriggerProximity;
class GCLogicalEntity;
class GCTriggerPush;
class GCTriggerMultiple;
class GCBasePlatTrain;
class GCTonemapTrigger;
class GCEconItemAttribute;
class GCIronSightController;
class GCFogTrigger;
class GCBaseFilter;
class GCCSPointScriptExtensions_weapon_cs_base;
class GCTriggerHostageReset;
class GCServerOnlyPointEntity;
class GCPointEntity;
class GCountdownTimer;
class GSceneEventId_t;
class GCBuoyancyHelper;
class GCMoverPathNode;
class GCBtNode;
class GCPlayer_ViewModelServices;
class GIEconItemInterface;
class GCEnvSoundscape;
class Gfogplayerparams_t;
class GCFogController;
class GCAttributeList;
class GCModelState;
class GCBaseAnimGraph;
class GCEnableMotionFixup;
class GCInButtonState;
class GCBtNodeDecorator;
class GCAttributeManager;
class GFilterHealth;
class GCPlayerPing;
class GCCSPointScriptEntity;
class GCNetworkOriginCellCoordQuantizedVector;
class GCInfoLandmark;
class GCBaseFlex;
class GCEconItemView;
class GCAnimGraphNetworkedVariables;
class GCBodyComponent;
class GCEnvFireSensor;
class GCCSGO_TeamPreviewCharacterPosition;
class GCEnvWindShared__WindAveEvent_t;
class GCBaseProp;
class GCPointGamestatsCounter;
class GCPhysicsShake;
class GCBreakable;
class GCPathKeyFrame;
class GCTriggerTripWire;
class GCEnvTilt;
class GCAttributeContainer;
class GCItemGenericTriggerHelper;
class GCLogicBranchList;
class Gaudioparams_t;
class GCEconEntity;
class GCModelPointEntity;
class GCMultiLightProxy;
class GCEffectData;
class GCEntityBlocker;
class GCLogicCase;
class GCItem;
class GCRuleEntity;
class GExtent;
class GCSoundEventEntity;
class GCCSPlayer_ViewModelServices;
class GCBasePlayerWeapon;
class GCInfoParticleTarget;
class GCEnvVolumetricFogController;
class GCPlayer_MovementServices;
class GCBreakableProp;
class GCEnvSoundscapeProxy;
class GCPhysConstraint;
class GCCSGameModeRules;
class GCItemAssaultSuit;
class GCInfoPlayerStart;
class GCSoundOpvarSetPointBase;
class Gragdoll_t;
class GCItemDogtags;
class GCLightEntity;
class GCPlayer_WaterServices;
class GCSkyboxReference;
class GCDynamicProp;
class GCRopeKeyframe;
class GCBarnLight;
class GSpawnPoint;
class GCEnvViewPunch;
class GCCSWeaponBase;
class GCPathCorner;
class GCPlayerControllerComponent;
class GCWeaponBaseItem;
class GCBaseCombatCharacter;
class GCMultiSource;
class GCLogicNavigation;
class GCEnvEntityMaker;
class GCProjectedDecal;
class GCLogicEventListener;
class GCFilterMultiple;
class GCPlayer_UseServices;
class GCScriptComponent;
class GCPhysicsWire;
class Glocksound_t;
class GCCSPointScriptExtensions_player_controller;
class GCBaseFire;
class GCBumpMine;
class GCLightGlow;
class GCSPerRoundStats_t;
class GCBasePropDoor;
class GCRagdollManager;
class GCTriggerFan;
class GCBaseCSGrenade;
class GCPathCornerCrash;
class GCHandleTest;
class GCSoundOpvarSetEntity;
class GWeaponPurchaseCount_t;
class GCNavSpaceInfo;
class GCLogicAchievement;
class GCPathSimple;
class GCBtActionParachutePositioning;
class GCPlayer_CameraServices;
class GCTouchExpansionComponent;
class GEntitySpottedState_t;
class GCBaseClientUIEntity;
class GCEnvDecal;
class GCCSPointScriptExtensions_entity;
class GCGameSceneNode;
class GCLogicAuto;
class GCSoundOpvarSetOBBWindEntity;
class GCLightDirectionalEntity;
class GCLogicNPCCounter;
class GCCSObserver_UseServices;
class GCFuncPlat;
class GCRuleBrushEntity;
class GCRulePointEntity;
class GCMessageEntity;
class GCSmokeGrenade;
class GCBaseViewModel;
class GCCSPlayer_PingServices;
class GCPlayer_FlashlightServices;
class GCServerOnlyModelEntity;
class GCBtActionCombatPositioning;
class GCFireSmoke;
class GCCSWeaponBaseGun;
class GCWeaponGlock;
class GCPredictedViewModel;
class GCTriggerActiveWeaponDetect;
class GCEnvMicrophone;
class GCInfoSpawnGroupLoadUnload;
class GCBasePlayerController;
class GCPointTemplateAPI;
class GCKnife;
class GCFuncTrackTrain;
class GCFogVolume;
class GCInfoPlayerCounterterrorist;
class GCFire;
class GISkeletonAnimationController;
class GCCSServerPointScriptEntity;
class GCWeaponBizon;
class GCFuncPlatRot;
class GCGenericConstraint;
class GCDecoyGrenade;
class GCWeaponG3SG1;
class GCItemDefuser;
class GCConstantForceController;
class GCDEagle;
class GCRagdollProp;
class GCItemSoda;
class GCEnvCubemap;
class GCBasePlayerControllerAPI;
class GCCSPointScriptExtensions_CCSWeaponBaseVData;
class GCEnvDetailController;
class GCTriggerOnce;
class GCInfoTeleportDestination;
class GCMathRemap;
class GCInstructorEventEntity;
class GCGradientFog;
class GCFootstepControl;
class GCTriggerVolume;
class GCInfoInstructorHintHostageRescueZone;
class GCEnvSoundscapeAlias_snd_soundscape;
class GCFishPool;
class GCPointClientCommand;
class GCFuncVPhysicsClip;
class GCCSPlayer_RadioServices;
class GCSceneEntity;
class GCEnvHudHint;
class GCParticleSystem;
class GAmmoIndex_t;
class Gsky3dparams_t;
class GCScriptItem;
class GIntervalTimer;
class GCWeaponSG556;
class Gdynpitchvol_base_t;
class GCDynamicLight;
class GCWeaponP90;
class GCTriggerToggleSave;
class GCPrecipitation;
class GCPointServerCommand;
class GCCSGO_TeamIntroCharacterPosition;
class GCLogicCollisionPair;
class GCSkeletonInstance;
class GCPhysicsProp;
class GCFuncWall;
class GCItemDefuserAlias_item_defuser;
class GCBaseGrenade;
class GCCSPlayerBase_CameraServices;
class GCCSGO_WingmanIntroCharacterPosition;
class GCSMatchStats_t;
class GCFuncLadder;
class GCTriggerSndSosOpvar;
class GCItemHeavyAssaultSuit;
class GCScriptedSequence;
class GCWeaponNegev;
class GCWeaponGalilAR;
class GCEnvProjectedTexture;
class GCDynamicPropAlias_prop_dynamic_override;
class GCSceneListManager;
class GCSplineConstraint;
class GCCSObserver_ViewModelServices;
class GCDynamicPropAlias_dynamic_prop;
class GModelConfigHandle_t;
class GCPhysicsPropMultiplayer;
class GCFuncTrackChange;
class GCMarkupVolume;
class GCInfoPlayerTerrorist;
class GVelocitySampler;
class GCTankTargetChange;
class GCLogicCompare;
class GCCSPlayer_BulletServices;
class GCLogicRelay;
class GCPlayer_ItemServices;
class GCKeepUpright;
class GCRevertSaved;
class GCFuncWater;
class GCFuncTimescale;
class GCBtActionMoveTo;
class GCTonemapController2;
class GCRopeKeyframeAlias_move_rope;
class GCEnvInstructorVRHint;
class GCWeaponXM1014;
class GCPlatTrigger;
class GCEnvWindShared;
class GCMolotovGrenade;
class GCPointHurt;
class GCPointValueRemapper;
class GCLogicNPCCounterAABB;
class GCLightOrthoEntity;
class GCEnvSoundscapeTriggerable;
class GCSoundOpvarSetPointEntity;
class GCBasePlayerPawn;
class GCGameMoney;
class GCLogicPlayerProxy;
class GCPlayer_ObserverServices;
class GCWeaponZoneRepulsor;
class GCPhysImpact;
class GCEnvCombinedLightProbeVolume;
class GCCSPlayer_WaterServices;
class GCWeaponM249;
class GCEnvParticleGlow;
class GCFuncVehicleClip;
class GCSoundAreaEntityBase;
class GCFuncBrush;
class GCEnvFunnel;
class GSequenceHistory_t;
class GCCSGameModeRules_Noop;
class GCPointAngularVelocitySensor;
class GCBaseCSGrenadeProjectile;
class GCHostageRescueZoneShim;
class GCEnvInstructorHint;
class GCEnvTracer;
class GCInfoGameEventProxy;
class GCPointCamera;
class GCBodyComponentSkeletonInstance;
class GCFuncLadderAlias_func_useableladder;
class GCBaseMoveBehavior;
class GCFuncInteractionLayerClip;
class GCWeaponMAC10;
class GCGameRules;
class GCWeaponRevolver;
class GCOrnamentProp;
class GCLogicGameEvent;
class GCEnvMuzzleFlash;
class GCPlayerSprayDecal;
class GCBombTarget;
class GCPhysicsSpring;
class GCEnvLightProbeVolume;
class GCCSGameModeRules_ArmsRace;
class GCScriptTriggerPush;
class GCEnvEntityIgniter;
class GCFuncWallToggle;
class GCDamageRecord;
class GCLogicAutosave;
class GCCSPlayerController_DamageServices;
class GCRenderComponent;
class GCSoundEventPathCornerEntity;
class GCEnvSoundscapeProxyAlias_snd_soundscape_proxy;
class GCLightComponent;
class GCSmokeGrenadeProjectile;
class GCScriptTriggerMultiple;
class GCSoundOpvarSetAutoRoomEntity;
class GCBodyComponentPoint;
class GFilterDamageType;
class GCBot;
class GCMotorController;
class GCSoundAreaEntitySphere;
class GCCSPlayer_UseServices;
class GCCSGO_WingmanIntroCounterTerroristPosition;
class GCItemKevlar;
class GCTriggerHurt;
class GCPhysBallSocket;
class GCMapVetoPickController;
class GCCSMinimapBoundary;
class GCSoundEnt;
class GCInfoSpawnGroupLandmark;
class GCPlayer_MovementServices_Humanoid;
class GCTriggerSave;
class GCPhysWheelConstraint;
class GCPhysFixed;
class GCSkillFloat;
class GCEnvSoundscapeTriggerableAlias_snd_soundscape_triggerable;
class GCCSPlayerController_InGameMoneyServices;
class GCSprite;
class GCSoundOpvarSetAABBEntity;
class GCWeaponM4A1;
class GCBeam;
class GCCommentaryViewPosition;
class GCTonemapController2Alias_env_tonemap_controller2;
class GCPhysPulley;
class GCGameRulesProxy;
class GCWeaponMP7;
class GCCSPlayerController_ActionTrackingServices;
class GCPrecipitationBlocker;
class GCBaseFlexAlias_funCBaseFlex;
class GCFish;
class GCEnvFireSource;
class GCInfoLadderDismount;
class GCTriggerGameEvent;
class GSimpleConstraintSoundProfile;
class GCDebugHistory;
class GCInfoData;
class GCHostageCarriableProp;
class GCLightSpotEntity;
class GCFuncRotating;
class GCDecoyProjectile;
class GCCSPlace;
class GCFuncTrainControls;
class GCEntityDissolve;
class GCPointAngleSensor;
class GCSoundEventOBBEntity;
class GCBtNodeCondition;
class GCSharedGapTypeQueryRegistration;
class GCEnvVolumetricFogVolume;
class GCEnvBeam;
class GCFuncIllusionary;
class GCPhysMagnet;
class GCSceneEntityAlias_logic_choreographed_scene;
class GCFuncNavBlocker;
class GCRagdollMagnet;
class GCFuncElectrifiedVolume;
class GCPointProximitySensor;
class GWeaponPurchaseTracker_t;
class GCFilterClass;
class GCMelee;
class GCMultiplayRules;
class GCFilterLOS;
class GEngineCountdownTimer;
class GCPhysBox;
class GCSensorGrenadeProjectile;
class GCTimerEntity;
class GCCSGO_TeamIntroCounterTerroristPosition;
class GCHEGrenadeProjectile;
class GCEnvWind;
class GCTimeline;
class GCFists;
class GCHandleDummy;
class GCRagdollConstraint;
class GCPhysExplosion;
class GCPointPush;
class GCCredits;
class GCCSPlayerResource;
class GCPlayer_WeaponServices;
class GCAttributeManager__cached_attribute_float_t;
class GCTeam;
class GCCSGameModeRules_Deathmatch;
class GCFuncNavObstruction;
class GCTriggerImpact;
class GCSun;
class GCTriggerDetectBulletFire;
class GCWorld;
class GCPointGiveAmmo;
class GCFuncMoveLinear;
class GCPathParticleRope;
class GCPlayerVisibility;
class GCPointTeleport;
class GCAK47;
class GCTriggerTeleport;
class GCCSObserver_CameraServices;
class GCCSGO_TeamIntroTerroristPosition;
class GCFuncMover;
class GCCSPlayer_CameraServices;
class GCHEGrenade;
class GCGameEnd;
class GCTriggerCallback;
class GCBubbling;
class GCTeamplayRules;
class GCPhysicsPropOverride;
class GCAI_ChangeHintGroup;
class GCColorCorrectionVolume;
class GCFilterEnemy;
class GCShower;
class GCEnvCubemapFog;
class GCBaseButton;
class GCEnvExplosion;
class GCSoundEventAABBEntity;
class GCTriggerLook;
class GCEntitySubclassVDataBase;
class GCLogicProximity;
class GCPointClientUIWorldPanel;
class GCFilterContext;
class GCPathParticleRopeAlias_path_particle_rope_clientside;
class GCTriggerBuoyancy;
class GCFilterAttributeInt;
class GCCSPlayer_ActionTrackingServices;
class GCAISound;
class GCPointEntityFinder;
class Gshard_model_desc_t;
class GCPhysicsPropRespawnable;
class GCEnvSky;
class GCPointVelocitySensor;
class GCFilterMassGreater;
class GFilterTeam;
class GCFuncTankTrain;
class GCNullEntity;
class GCCSPointScriptExtensions_observer;
class GCMarkupVolumeTagged;
class GCBuyZone;
class GCPointTemplate;
class GCTripWireFire;
class GCPhysForce;
class GCLogicDistanceAutosave;
class GCInfoDynamicShadowHint;
class GCSoundOpvarSetOBBEntity;
class GCEnvWindShared__WindVariationEvent_t;
class GCTakeDamageInfoAPI;
class GCScriptTriggerOnce;
class GCNavWalkable;
class GCFuncMonitor;
class GCFlashbangProjectile;
class GCPointClientUIWorldTextPanel;
class GCInfoInstructorHintTarget;
class GCCSPlayer_HostageServices;
class GCWeaponSSG08;
class GCBreachCharge;
class GCLogicBranch;
class GCWeaponUMP45;
class GCSpriteAlias_env_glow;
class GCPhysicalButton;
class GCPhysLength;
class GCLogicNPCCounterOBB;
class GCCSGOViewModel;
class GCWeaponShield;
class GCBlood;
class GCEnvFade;
class GCDynamicPropAlias_cable_dynamic;
class GCCSPlayer_BuyServices;
class GCHostageExpresserShim;
class GCInferno;
class GCEnvGlobal;
class GCFilterName;
class GCCSTeam;
class GCWeaponUSPSilencer;
class GCSpriteOriented;
class GCTriggerGravity;
class GCServerRagdollTrigger;
class GCInfoDynamicShadowHintBox;
class GCPathMover;
class GCFlashbang;
class GCWeaponAug;
class GCIncendiaryGrenade;
class GCChangeLevel;
class GCTriggerLerpObject;
class GCTriggerSoundscape;
class GCLogicScript;
class GCWeaponFiveSeven;
class GCTriggerBrush;
class GCPhysicsEntitySolver;
class GCNetworkedSequenceOperation;
class GCPointWorldText;
class GCSoundAreaEntityOrientedBox;
class GCTriggerPhysics;
class GEntityRenderAttribute_t;
class GCPointBroadcastClientCommand;
class GCFuncShatterglass;
class GCRotButton;
class GCSoundEventSphereEntity;
class GCWeaponHKP2000;
class GCPlantedC4;
class GCPointClientUIDialog;
class GCEnvSplash;
class GCSkyCamera;
class GCWeaponNOVA;
class GCPointCameraVFOV;
class GCWeaponTaser;
class GCWaterBullet;
class GCMarkupVolumeWithRef;
class GCMessage;
class GCLogicGameEventListener;
class GCPushable;
class GCTriggerRemove;
class GCInfoTarget;
class GCMomentaryRotButton;
class GCPropDoorRotating;
class Ghudtextparms_t;
class GCWeaponMP5SD;
class GCTextureBasedAnimatable;
class GCMarkupVolumeTagged_NavGame;
class GCPhysThruster;
class GCCSPointScriptExtensions_player;
class GCCitadelSoundOpvarSetOBB;
class GSellbackPurchaseEntry_t;
class GCWeaponFamas;
class GCShatterGlassShardPhysics;
class GCFilterModel;
class GCCSPlayerPawnBase;
class GCPathTrack;
class GCLogicDistanceCheck;
class GCOmniLight;
class GCInfoOffscreenPanoramaTexture;
class GCInfoVisibilityBox;
class GCGamePlayerEquip;
class GCInfoTargetServerOnly;
class GCSoundOpvarSetPathCornerEntity;
class GCCSPlayer_WeaponServices;
class GCEntityFlame;
class GCWeaponMP9;
class GCCSBot;
class GCEntityIdentity;
class GCGunTarget;
class GCSoundEventParameter;
class GCSimpleMarkupVolumeTagged;
class GCTestEffect;
class GCWeaponM4A1Silencer;
class GCScriptNavBlocker;
class GCConstraintAnchor;
class GCWeaponTec9;
class GCMarkupVolumeTagged_Nav;
class GCInstancedSceneEntity;
class GCLightEnvironmentEntity;
class GCLogicActiveAutosave;
class GCEnvBeverage;
class GCWeaponCZ75a;
class GCWeaponP250;
class GCHostage;
class GCScriptTriggerHurt;
class GCBasePlayerWeaponVData;
class GCMathColorBlend;
class GCEnvScreenOverlay;
class GCCSPlayerPawn;
class GCBumpMineProjectile;
class GCCSPlayerController;
class GCChicken;
class GCInfoInstructorHintBombTargetA;
class GCWeaponAWP;
class GCCSObserverPawn;
class GCPostProcessingVolume;
class GCSpotlightEnd;
class GCGamePlayerZone;
class GCSensorGrenade;
class GCCSGO_WingmanIntroTerroristPosition;
class GCTriggerDetectExplosion;
class GCSoundStackSave;
class GConstraintSoundInfo;
class GCSingleplayRules;
class GCFilterProximity;
class GCEconWearable;
class GCCSPlayer_ItemServices;
class GCFuncConveyor;
class GCWeaponMag7;
class GCMathCounter;
class GCInfoWorldLayer;
class GCRectLight;
class GCCSGO_TeamSelectCharacterPosition;
class GCBaseDoor;
class GCLogicLineToEntity;
class GCRetakeGameRules;
class GCCSGameRulesProxy;
class GCEnvCubemapBox;
class GCCSPlayer_DamageReactServices;
class GServerAuthoritativeWeaponSlot_t;
class GCCSGameRules;
class GCColorCorrection;
class GCWeaponElite;
class GCSoundEventEntityAlias_snd_event_point;
class GCBaseEntityAPI;
class GCC4;
class GCHostageRescueZone;
class GCPointPrefab;
class GCRotDoor;
class GCSkeletonAnimationController;
class GCTablet;
class GCTankTrainAI;
class GCGameGibManager;
class GCCSPointScript;
class GCRagdollPropAlias_physics_prop_ragdoll;
class GCCSSprite;
class GCFuncPropRespawnZone;
class GCInfoDeathmatchSpawn;
class GCWeaponSCAR20;
class GCTripWireFireProjectile;
class GCFuncTrackAuto;
class GCEnvSpark;
class GCCSObserver_ObserverServices;
class GCPlayer_AutoaimServices;
class GCFuncTrain;
class GCHostageAlias_info_hostage_spawn;
class GCNavLinkAreaEntity;
class GCFuncMoveLinearAlias_momentary_door;
class GCCommentaryAuto;
class GCMapInfo;
class GCTriggerBombReset;
class GCBaseDMStart;
class GCLogicMeasureMovement;
class GViewAngleServerChange_t;
class GPhysicsRagdollPose_t;
class GCBreachChargeProjectile;
class GCRangeFloat;
class GCAnimEventListenerBase;
class GRelationship_t;
class GCRemapFloat;
class GIGapHost_GameEntity;
class GCFootstepTableHandle;
class GCCSPlayerController_InventoryServices;
class GCResponseQueue;
class GCScriptUniformRandomStream;
class GParticleIndex_t;
class GCPhysHinge;
class GCSimpleSimTimer;
class GCSkillDamage;
class GCAnimEventQueueListener;
class GCEnvLaser;
class GCFiringModeFloat;
class GCRopeOverlapHit;
class GResponseContext_t;
class GCNavVolume;
class GCCSObserver_MovementServices;
class GCCSGOPlayerAnimGraphState;
class GCGameScriptedMoveData;
class GCBaseAnimGraphController;
class GCNavVolumeSphere;
class GCResponseCriteriaSet;
class GCAI_Expresser;
class GIChoreoServices;
class GCStopwatchBase;
class GResponseParams;
class GCItem_Healthshot;
class GCPhysHingeAlias_phys_hinge_local;
class GPointCameraSettings_t;
class GCSoundEnvelope;
class Gdynpitchvol_t;
class GCStopwatch;
class GCNavVolumeVector;
class GNavGravity_t;
class GCEnvShake;
class GCPhysSlideConstraint;
class GCSound;
class GCTakeDamageResult;
class GCMolotovProjectile;
class GCCommentarySystem;
class GResponseFollowup;
class GCRangeInt;
class GCNavLinkAnimgraphVar;
class GCCSGO_TeamSelectCounterTerroristPosition;
class GCNavLinkMovementVData;
class GCAnimGraphControllerBase;
class GRagdollCreationParams_t;
class GAmmoTypeInfo_t;
class GCRandStopwatch;
class GCGameChoreoServices;
class GCSimpleStopwatch;
class GCShatterGlassShard;
class GCommandToolCommand_t;
class Gragdollelement_t;
class GCBodyComponentBaseModelEntity;
class GCNetworkOriginQuantizedVector;
class Gmagnetted_objects_t;
class GCHintMessageQueue;
class GCSkillInt;
class Gthinkfunc_t;
class GCNavHullPresetVData;
class GCBasePlayerVData;
class GCSceneEventInfo;
class GCCopyRecipientFilter;
class GCPropDoorRotatingBreakable;
class GCBtActionAim;
class GCFiringModeInt;
class GCSoundPatch;
class GCSmoothFunc;
class GIHasAttributes;
class GCRagdollPropAttached;
class GHullFlags_t;
class GCBodyComponentBaseAnimGraph;
class GGameAmmoTypeInfo_t;
class GCPhysMotor;
class GCSimTimer;
class GCBaseIssue;
class GCTakeDamageInfo;
class GConceptHistory_t;
class GCPhysTorque;
class GSummaryTakeDamageInfo_t;
class GCRandSimTimer;
class GCBtNodeComposite;
class GCFireCrackerBlast;
class Gsndopvarlatchdata_t;
class GCCSGO_TeamSelectTerroristPosition;
class GCAI_ExpresserWithFollowup;
class GCNavVolumeMarkupVolume;
class GQuestProgress;
class Glerpdata_t;
class GCMultiplayer_Expresser;
class GCTakeDamageSummaryScopeGuard;
class GCWeaponSawedoff;
class GCCSPlayer_MovementServices;
class GCNavHullVData;
class GSoundOpvarTraceResult_t;
class GCAnimEventListener;
class GCNavVolumeCalculatedVector;
class GCCSWeaponBaseVData;
class GCBtNodeConditionInactive;
class GCSAdditionalPerRoundStats_t;
class GActiveModelConfig_t;
class GCPrecipitationVData;
class GCBreakableStageHelper;
class GCNavVolumeBreadthFirstSearch;
class GCAmbientGeneric;
class GCSAdditionalMatchStats_t;
class GIRagdoll;
class GCGameText;
class GCInfoInstructorHintBombTargetB;
class GCNavVolumeAll;
class GCNavVolumeSphericalShell;
class GRelationshipOverride_t;
class GParticleAttributeIndex_t;
class GCParticleInput;
class GCParticleFloatInput;
class GVoxelVisBlockOffset_t;
class GAggregateLODSetup_t;
class GCProductQuantizer;
class GCAnimUpdateNodeRef;
class GCNmGraphNode;
class GCParticleCollectionFloatInput;
class GCParticleFunction;
class GCParticleFunctionOperator;
class GPARTICLE_WORLD_HANDLE__;
class GVMixDynamicsCompressorDesc_t;
class GFootStepTrigger;
class GParticleControlPointDriver_t;
class GFeSphereRigid_t;
class GCMotionMetricEvaluator;
class GCDrawCullingData;
class GCAnimUserDifference;
class GCSeqMultiFetchFlag;
class GCNmEvent;
class GCAnimParamHandle;
class GCFuseSymbolTable;
class GGeneratedTextureHandle_t;
class GSceneViewId_t;
class GPhysFeModelDesc_t;
class GCCycleBase;
class GCPhysSurfacePropertiesSoundNames;
class GDynamicMeshDeformParams_t;
class GCDistanceRemainingMetricEvaluator;
class GVMixDynamicsBand_t;
class GRnCapsule_t;
class GCAnimInputDamping;
class GAnimTagID;
class GCParticleFunctionPreEmission;
class GCPerParticleFloatInput;
class GCSosGroupActionSchema;
class GCFutureFacingMetricEvaluator;
class GCSeqTransition;
class GCAnimNodePath;
class GCParamSpanUpdater;
class GAnimNodeID;
class GCParticleFunctionInitializer;
class GRnFace_t;
class GEngineLoopState_t;
class GCNmPoseNode;
class GCParticleFunctionConstraint;
class GCNmStateMachineNode__TransitionDefinition_t;
class GCAnimAttachment;
class GEventSimulate_t;
class GCParticleCollectionRendererFloatInput;
class GModelSkeletonData_t;
class GEventModInitialized_t;
class GCParticleTransformInput;
class GCParticleVisibilityInputs;
class GMaterialGroup_t;
class GCAnimUpdateNodeBase;
class GCParticleFunctionRenderer;
class GCParticleVecInput;
class GVPhysXConstraintParams_t;
class GCMorphRectData;
class GEventServerPollNetworking_t;
class GCDspPresetModifierList;
class GSkeletonDemoDb_t;
class GCRenderGroom;
class GCUnaryUpdateNode;
class GCBlendCurve;
class GChangeAccessorFieldPathIndex_t;
class GFeKelagerBend2_t;
class GCMorphSetData;
class GCBinaryUpdateNode;
class Gconstraint_axislimit_t;
class GFuseFunctionIndex_t;
class GCGeneralSpin;
class GCFeJiggleBone;
class GCGlowOverlay;
class GTextureControls_t;
class GCParticleModelInput;
class GCNmPassthroughNode;
class GCAnimDecoder;
class GNmPercent_t;
class GEventProfileStorageAvailable_t;
class GCVoiceContainerBase;
class GCPerParticleVecInput;
class GCBoneMaskUpdateNode;
class GConfigIndex;
class GFeSimdRodConstraint_t;
class GCSSDSMsg_EndFrame;
class GSkeletonBoneBounds_t;
class GCDSPMixgroupModifier;
class GCBoneConstraintBase;
class GEventAdvanceTick_t;
class GMotionIndex;
class GCAnimBoneDifference;
class GCFootDefinition;
class GCFootCycle;
class GCMotionDataSet;
class GCVPhysXSurfacePropertiesList;
class GCParticleFunctionEmitter;
class GVMixFilterDesc_t;
class GCBaseConstraint;
class GCParticleMassCalculationParameters;
class GAnimParamID;
class GCTransitionUpdateData;
class GManifestTestResource_t;
class GFootPinningPoseOpFixedData_t;
class GCFootPinningUpdateNode;
class GCLeafUpdateNode;
class GCAnimMotorUpdaterBase;
class GRnMesh_t;
class GCModelConfigElement;
class GVPhysXAggregateData_t;
class GCSequenceUpdateNode;
class GCModelConfigElement_Command;
class GCAnimParameterBase;
class GCompositeMaterialInputLooseVariable_t;
class GVecInputMaterialVariable_t;
class GCCachedPose;
class GCAnimGraphSettingsGroup;
class GCModelConfig;
class GFootLockPoseOpFixedSettings;
class GCFlexRule;
class GCSosGroupActionSetSoundeventParameterSchema;
class GCStepsRemainingMetricEvaluator;
class GNmCompressionSettings_t__QuantizationRange_t;
class GCAnimParameterManagerUpdater;
class GCModelConfigElement_RandomColor;
class GCMotionNode;
class GCAnimTagBase;
class GAnimComponentID;
class GCAnimLocalHierarchy;
class GRnShapeDesc_t;
class GCBoneConstraintPoseSpaceBone__Input_t;
class GCModelConfigElement_SetRenderColor;
class GPhysSoftbodyDesc_t;
class GVMapResourceData_t;
class GFeCtrlSoftOffset_t;
class GCMorphBundleData;
class GCNmBoneMask;
class GCAudioEmphasisSample;
class GCNmFrameSnapEvent;
class GCJumpHelperUpdateNode;
class GSolveIKChainPoseOpFixedSettings_t;
class GCMaterialAttributeAnimTag;
class GCAnimComponentUpdater;
class GCReplicationParameters;
class GVMixEnvelopeDesc_t;
class GCNmValueNode;
class GCFollowPathUpdateNode;
class GEventClientPostSimulate_t;
class GAABB_t;
class GFeNodeBase_t;
class GModelBoneFlexDriverControl_t;
class GPostProcessingVignetteParameters_t;
class GConstantInfo_t;
class GFuseVariableIndex_t;
class GIParticleEffect;
class GCStopAtGoalUpdateNode;
class GCSequenceGroupData;
class GParticleNamedValueConfiguration_t;
class GCAnimSkeleton;
class GCAnimationGraphVisualizerPrimitiveBase;
class GCBodyGroupAnimTag;
class GFeAxialEdgeBend_t;
class GParamSpanSample_t;
class GFunctionInfo_t;
class GFourQuaternions;
class GSkeletonAnimCapture_t__FrameStamp_t;
class GCSeqAutoLayerFlag;
class GParamSpan_t;
class GCNmBoolValueNode;
class GRenderInputLayoutField_t;
class GCCPPScriptComponentUpdater;
class GCDampedValueComponentUpdater;
class GCSeqPoseSetting;
class GRenderHairStrandInfo_t;
class GCExampleSchemaVData_Monomorphic;
class GCPlayerSprayDecalRenderHelper;
class GFeTaperedCapsuleRigid_t;
class GCChoiceUpdateNode;
class GIKSolverSettings_t;
class GCNmLayerBlendNode;
class GCRandomNumberGeneratorParameters;
class GAnimationDecodeDebugDumpElement_t;
class GCNmFloatValueNode;
class GCSSDSMsg_LayerBase;
class GCSosGroupActionSoundeventClusterSchema;
class GCAnimationGraphVisualizerAxis;
class GMaterialResourceData_t;
class GBlendItem_t;
class GCVoiceContainerAnalysisBase;
class GCSosGroupActionLimitSchema;
class GFeWeightedNode_t;
class GCLookComponentUpdater;
class GCCycleControlUpdateNode;
class GCNetworkVarChainer;
class GRnTriangle_t;
class GCNmVectorValueNode;
class GCSeqSeqDescFlag;
class GAimCameraOpFixedSettings_t;
class GCParticleRemapFloatInput;
class GBaseSceneObjectOverride_t;
class GCConcreteAnimParameter;
class GFeAnimStrayRadius_t;
class GModelReference_t;
class GRnCapsuleDesc_t;
class GCAnimGraphDebugReplay;
class GCVoiceContainerSwitch;
class GLookAtBone_t;
class GCNmBoneMaskValueNode;
class GCNmTransitionEvent;
class GCStringAnimTag;
class GSkeletonAnimCapture_t__Bone_t;
class GCStaticPoseCache;
class GParticlePreviewBodyGroup_t;
class GFeWorldCollisionParams_t;
class GCPlayerInputAnimMotorUpdater;
class GCParticleCollectionRendererVecInput;
class GFeBandBendLimit_t;
class GCAnimFoot;
class GEventClientAdvanceTick_t;
class GMaterialOverride_t;
class GCAnimDemoCaptureSettings;
class GCNmIDEvent;
class GCPathMetricEvaluator;
class GMaterialParam_t;
class GCSpeedScaleUpdateNode;
class GVMixEQ8Desc_t;
class GCModelConfigElement_SetMaterialGroupOnAttachedModels;
class GTwoBoneIKSettings_t;
class GCompositeMaterialInputContainer_t;
class GCStateNodeStateData;
class GFeTwistConstraint_t;
class GFootFixedData_t;
class GVMixDiffusorDesc_t;
class GFeProxyVertexMap_t;
class GCDirectPlaybackUpdateNode;
class GPostProcessingLocalContrastParameters_t;
class GCFootLockUpdateNode;
class GCParentConstraint;
class GSkeletonAnimCapture_t__Frame_t;
class GCPathParameters;
class GCSlowDownOnSlopesUpdateNode;
class GCAttachment;
class GCEmptyEntityInstance;
class GCCompositeMaterialEditorDoc;
class GCPhysSurfacePropertiesPhysics;
class GEventClientPostOutput_t;
class GFeNodeIntegrator_t;
class GRnMeshDesc_t;
class GCAnimGraphNetworkSettings;
class GCAimConstraint;
class GCAnimActionUpdater;
class GCParticleFunctionForce;
class GCSpinUpdateBase;
class GControlPointReference_t;
class GCVoiceContainerRandomSampler;
class GFeFollowNode_t;
class GCovMatrix3;
class GAnimStateID;
class GCVoiceContainerStaticAdditiveSynth;
class GRnSoftbodyCapsule_t;
class GCModelConfigElement_RandomPick;
class GNmSyncTrackTime_t;
class GCGeneralRandomRotation;
class GRnPlane_t;
class GFeNodeWindBase_t;
class GCQuaternionAnimParameter;
class GSkeletonAnimCapture_t__Camera_t;
class GCAnimEncodeDifference;
class GAggregateSceneObject_t;
class GIKDemoCaptureSettings_t;
class GCParticleCollectionBindingInstance;
class GCVoiceContainerDefault;
class GCSoundEventMetaData;
class GCMorphConstraint;
class GDop26_t;
class GCAnimGraphModelBinding;
class GFakeEntityDerivedA_tAPI;
class GCAnimParamHandleMap;
class GFeMorphLayerDepr_t;
class GFourCovMatrices3;
class GFeFitMatrix_t;
class GRnVertex_t;
class GTraceSettings_t;
class GCConstraintTarget;
class GCompMatPropertyMutator_t;
class GIKBoneNameAndIndex_t;
class GPermEntityLumpData_t;
class GVMixDelayDesc_t;
class GCBoneConstraintDotToMorph;
class GPostProcessingBloomParameters_t;
class GEntOutput_t;
class GFakeEntityDerivedB_tAPI;
class GCSlopeComponentUpdater;
class GRnNode_t;
class GCSeqCmdSeqDesc;
class GCPathAnimMotorUpdaterBase;
class GCVariantDefaultAllocator;
class GVMixOscDesc_t;
class GFeEdgeDesc_t;
class GCPathAnimMotorUpdater;
class GCWayPointHelperUpdateNode;
class GMaterialParamInt_t;
class GPermModelInfo_t;
class GAnimScriptHandle;
class GFeCtrlOffset_t;
class GFeTri_t;
class GCLeanMatrixUpdateNode;
class GCStanceScaleUpdateNode;
class GIKTargetSettings_t;
class GTestResource_t;
class GCBaseRendererSource2;
class GCSSDSMsg_ViewRender;
class GCZeroPoseUpdateNode;
class GFeFitWeight_t;
class GCFootCycleMetricEvaluator;
class GCFootPositionMetricEvaluator;
class GCFlexOp;
class GCPointConstraint;
class GMotionBlendItem;
class GCVectorQuantizer;
class GSignatureOutflow_Resume;
class GFeBoxRigid_t;
class GCIntAnimParameter;
class GCNmTargetValueNode;
class GEventSimpleLoopFrameUpdate_t;
class GEventServerAdvanceTick_t;
class GTimedEvent;
class GTextureGroup_t;
class GCSosGroupActionSoundeventPrioritySchema;
class GCBonePositionMetricEvaluator;
class GCPhysSurfacePropertiesAudio;
class GCNmIDValueNode;
class GFeSimdNodeBase_t;
class GPermModelExtPart_t;
class GCCurrentRotationVelocityMetricEvaluator;
class GCAnimEventDefinition;
class GCAnimEnum;
class GCAnimFrameBlockAnim;
class GCNmVirtualParameterIDNode;
class GCFlashlightEffect;
class GFeBuildSphereRigid_t;
class GCAnimEncodedFrames;
class GEventSetTime_t;
class GOldFeEdge_t;
class GCStanceOverrideUpdateNode;
class Gconstraint_breakableparams_t;
class GCStateNodeTransitionData;
class GCMotionMatchingUpdateNode;
class GCNmSyncTrack__Event_t;
class GEventSplitScreenStateChanged_t;
class GParticleNamedValueSource_t;
class GMaterialParamBuffer_t;
class GEventPostDataUpdate_t;
class GRenderProjectedMaterial_t;
class GCSSDSMsg_ViewTargetList;
class GFeSimdAnimStrayRadius_t;
class GCAnimUser;
class GFeSpringIntegrator_t;
class GCModelConfigElement_UserPick;
class GRenderSkeletonBone_t;
class GAnimationDecodeDebugDump_t;
class GPARTICLE_EHANDLE__;
class GFeCollisionPlane_t;
class GCAnimCycle;
class GCNmSyncTrack__EventMarker_t;
class GCAnimGraphSettingsManager;
class GCRagdollUpdateNode;
class GCEntityComponentHelper;
class GCompositeMaterial_t;
class GSignatureOutflow_Continue;
class GWeightList;
class GRnBodyDesc_t;
class GCFeMorphLayer;
class GAnimNodeOutputID;
class GEventClientSceneSystemThreadStateChange_t;
class GEventClientPreSimulate_t;
class GClutterSceneObject_t;
class GCPoseHandle;
class GCAnimScriptBase;
class GCVoiceContainerBlender;
class Gvphysics_save_cphysicsbody_t;
class GCRagdollAnimTag;
class GIClientAlphaProperty;
class GPermModelData_t;
class GFootFixedSettings;
class GCSolveIKTargetHandle_t;
class GCBlendUpdateNode;
class GCAnimationGraphVisualizerSphere;
class GMaterialParamFloat_t;
class GEventServerSimulate_t;
class GCVoiceContainerEnvelopeAnalyzer;
class GFollowAttachmentSettings_t;
class GJiggleBoneSettings_t;
class GCAnimStateMachineUpdater;
class GCNmControlParameterFloatNode;
class GCSeqCmdLayer;
class GCAnimScriptComponentUpdater;
class GFeRigidColliderIndices_t;
class GCSeqAutoLayer;
class GBakedLightingInfo_t;
class GCExampleSchemaVData_PolymorphicBase;
class GFourVectors2D;
class GCOrientConstraint;
class GSequenceWeightedList_t;
class GCSosGroupActionMemberCountEnvelopeSchema;
class GFeRodConstraint_t;
class GFollowTargetOpFixedSettings_t;
class GCRenderSkeleton;
class GVMixConvolutionDesc_t;
class GCSosGroupBranchPattern;
class GCNmGraphDefinition__ExternalGraphSlot_t;
class GCNmStateMachineNode__StateDefinition_t;
class GCModelConfigElement_SetBodygroupOnAttachedModels;
class GCNmFootEvent;
class GCHandshakeAnimTagBase;
class GCBlend2DUpdateNode;
class GAnimationSnapshotBase_t;
class GCTiltTwistConstraint;
class GMaterialParamTexture_t;
class GCGlobalLightBase;
class GCModelConfigElement_SetBodygroup;
class GCModelConfigElement_AttachedModel;
class GCFollowAttachmentUpdateNode;
class GParticleChildrenInfo_t;
class GCVoiceContainerNull;
class GMoodAnimation_t;
class GCClientAlphaProperty;
class GCTimeRemainingMetricEvaluator;
class GNmSyncTrackTimeRange_t;
class GCAnimActivity;
class GCNmGraphDefinition;
class GCSolveIKChainUpdateNode;
class GEventClientPollNetworking_t;
class GCMeshletDescriptor;
class GCNmLayerBlendNode__LayerDefinition_t;
class GCAnimSequenceParams;
class GCDemoSettingsComponentUpdater;
class GCompositeMaterialAssemblyProcedure_t;
class GCTaskHandshakeAnimTag;
class GEventClientPauseSimulate_t;
class GCFireOverlay;
class GFeBuildTaperedCapsuleRigid_t;
class GCStateUpdateData;
class GCPhysSurfaceProperties;
class GCMotionSearchNode;
class GVMixVocoderDesc_t;
class GCAnimScriptManager;
class GCAnimationGraphVisualizerLine;
class GCFootTrajectory;
class GVMixModDelayDesc_t;
class GCHitBox;
class GCTestDomainDerived_Cursor;
class GCAudioMorphData;
class GCSeqIKLock;
class GFeQuad_t;
class GCSosGroupMatchPattern;
class GCSSDSEndFrameViewInfo;
class GCNmExternalGraphNode;
class GCMoverUpdateNode;
class GRnHull_t;
class GCMoodVData;
class GEventClientFrameSimulate_t;
class GCRagdollComponentUpdater;
class GCMotionNodeBlend1D;
class GCNmControlParameterVectorNode;
class GCPathHelperUpdateNode;
class GCSeqPoseParamDesc;
class GVMixPitchShiftDesc_t;
class GCAudioSentence;
class GCRenderBufferBinding;
class GCParticleAnimTag;
class GCStaticPoseCacheBuilder;
class GCNmRootMotionData;
class GCAnimReplayFrame;
class GCNmVirtualParameterBoneMaskNode;
class GCBlockSelectionMetricEvaluator;
class GCMotionGraph;
class GCSosSoundEventGroupSchema;
class GCFootMotion;
class GCDampedValueUpdateItem;
class GRnHalfEdge_t;
class GCAnimDataChannelDesc;
class GEventClientProcessNetworking_t;
class GCModelConfigList;
class GCNmGraphVariation;
class GCSosGroupActionTimeBlockLimitSchema;
class GVMixDynamics3BandDesc_t;
class GCModelConfigElement_SetMaterialGroup;
class GCMovementHandshakeAnimTag;
class GCSeqScaleSet;
class GEventClientProcessGameInput_t;
class GVsInputSignatureElement_t;
class GCompositeMaterialMatchFilter_t;
class GVertexPositionColor_t;
class GCFootTrajectories;
class GSceneObject_t;
class GCSSDSMsg_ViewTarget;
class GVMixSubgraphSwitchDesc_t;
class GCNmTransitionNode;
class GMotionDBIndex;
class GCToggleComponentActionUpdater;
class GCNmControlParameterIDNode;
class GPostProcessingTonemapParameters_t;
class GVMixAutoFilterDesc_t;
class GCSeqMultiFetch;
class GCNmStateMachineNode;
class GCBoneConstraintPoseSpaceMorph;
class GCSSDSMsg_PreLayer;
class GCSelectorUpdateNode;
class GCAimCameraUpdateNode;
class GCFootStepTriggerUpdateNode;
class GRnSoftbodyParticle_t;
class GCSingleFrameUpdateNode;
class GCSeqSynthAnimDesc;
class GCDirectPlaybackTagData;
class GEventFrameBoundary_t;
class GWorldNode_t;
class GAggregateMeshInfo_t;
class GFeSimdRodConstraintAnim_t;
class GEventPostAdvanceTick_t;
class GFeBuildBoxRigid_t;
class GIPhysicsPlayerController;
class GEventServerPostAdvanceTick_t;
class GEventClientPreOutput_t;
class GRnSoftbodySpring_t;
class GFeNodeReverseOffset_t;
class GRnHullDesc_t;
class GCSymbolAnimParameter;
class GFeStiffHingeBuild_t;
class GExtraVertexStreamOverride_t;
class GEntityIOConnectionData_t;
class GSkeletonAnimCapture_t;
class GCStateActionUpdater;
class GCSeqS1SeqDesc;
class GAimMatrixOpFixedSettings_t;
class GParticlePreviewState_t;
class GFeCtrlOsOffset_t;
class GCMorphData;
class GCAimMatrixUpdateNode;
class GCDirectionalBlendUpdateNode;
class GVMixPannerDesc_t;
class GFeSimdSpringIntegrator_t;
class GModelBoneFlexDriver_t;
class GCBoolAnimParameter;
class GEventAppShutdown_t;
class GResourceId_t;
class GCVoiceContainerRealtimeFMSineWave;
class GCNmVirtualParameterBoolNode;
class GCNmSyncTrack;
class GTagSpan_t;
class GCNmStateNode__TimedEvent_t;
class GCNmControlParameterTargetNode;
class GCFootstepLandedAnimTag;
class GCEnumAnimParameter;
class GCAnimationGraphVisualizerPie;
class GAnimationSnapshot_t;
class GVPhysXCollisionAttributes_t;
class GCActionComponentUpdater;
class GCNmVirtualParameterVectorNode;
class GCAnimFrameSegment;
class GCClothSettingsAnimTag;
class GVariableInfo_t;
class GVMixShaperDesc_t;
class GCSoundInfoHeader;
class GCVoiceContainerDecayingSineWave;
class GCCycleControlClipUpdateNode;
class GCBaseTrailRenderer;
class GCBoneConstraintPoseSpaceBone;
class GEventServerPostSimulate_t;
class GCChoreoUpdateNode;
class GCNmSkeleton;
class GVMixBoxverbDesc_t;
class GFeTreeChildren_t;
class GCSceneObjectData;
class GStanceInfo_t;
class GCMotionNodeSequence;
class GCFootCycleDefinition;
class GCAnimDesc_Flag;
class GCBoneVelocityMetricEvaluator;
class GCFuseProgram;
class GCFeVertexMapBuildArray;
class GFeSoftParent_t;
class GCFootFallAnimTag;
class GEventClientOutput_t;
class GMaterialVariable_t;
class GCFeNamedJiggleBone;
class GEventClientProcessInput_t;
class GJiggleBoneSettingsList_t;
class GCSequenceFinishedAnimTag;
class GCAnimationGraphVisualizerText;
class GCDampedPathAnimMotorUpdater;
class GLookAtOpFixedSettings_t;
class GCEntityIOOutput;
class GCDSPPresetMixgroupModifierTable;
class GRnWing_t;
class GCNmChildGraphNode;
class GVMixPlateverbDesc_t;
class GCMotionSearchDB;
class GVPhysics2ShapeDef_t;
class GWorldBuilderParams_t;
class GCFootAdjustmentUpdateNode;
class GCNmClipNode;
class GCAnimMorphDifference;
class GIParticleCollection;
class GCNmGraphDefinition__ChildGraphSlot_t;
class GCFutureVelocityMetricEvaluator;
class GCParticleProperty;
class GVertexPositionNormal_t;
class GFeEffectDesc_t;
class GCLODComponentUpdater;
class GCNmLegacyEvent;
class GMaterialParamVector_t;
class GCMotionGraphGroup;
class GHitReactFixedSettings_t;
class GCRootUpdateNode;
class GCAnimMovement;
class GCConstraintSlave;
class GCSeqBoneMaskList;
class GPermModelDataAnimatedMaterialAttribute_t;
class GScriptInfo_t;
class GVPhysXRange_t;
class GCJiggleBoneUpdateNode;
class GCollisionGroupContext_t;
class GCAudioPhonemeTag;
class GCAnimData;
class GSosEditItemInfo_t;
class GFeFitInfluence_t;
class GCInputStreamUpdateNode;
class GEventClientPollInput_t;
class GFeSimdQuad_t;
class GCEmitTagActionUpdater;
class GCAddUpdateNode;
class GCAnimTagManagerUpdater;
class GSampleCode;
class GCExpressionActionUpdater;
class GEventClientPostAdvanceTick_t;
class GBoneDemoCaptureSettings_t;
class GVPhysXBodyPart_t;
class GCDecalInfo;
class GParticleControlPointConfiguration_t;
class GVMixUtilityDesc_t;
class GCMotionGraphConfig;
class GCMovementComponentUpdater;
class GPointDefinition_t;
class GVMixEffectChainDesc_t;
class GCHitReactUpdateNode;
class GEntInput_t;
class GCNmVirtualParameterFloatNode;
class GCParticleSystemDefinition;
class GCVoiceContainerSelector;
class GCRegionSVM;
class GCSetParameterActionUpdater;
class GCAnimUpdateSharedData;
class GEventClientSimulate_t;
class GCVoiceContainerAmpedDecayingSineWave;
class GClutterTile_t;
class GPointDefinitionWithTimeValues_t;
class GFeVertexMapBuild_t;
class GCAnimDesc;
class GCTwistConstraint;
class GCNewParticleEffect;
class GCFeIndexedJiggleBone;
class GCFloatAnimParameter;
class GRnBlendVertex_t;
class GCVirtualAnimParameter;
class GCHitBoxSetList;
class GMaterialParamString_t;
class GVsInputSignature_t;
class GInfoOverlayData_t;
class GCastSphereSATParams_t;
class GCBindPoseUpdateNode;
class GVMixFreeverbDesc_t;
class GCCurrentVelocityMetricEvaluator;
class GCVoxelVisibility;
class GSelectedEditItemInfo_t;
class GChainToSolveData_t;
class GCGlowSprite;
class GCSSDSMsg_PostLayer;
class GCAnimBone;
class GVPhysXConstraint2_t;
class GCEditableMotionGraph;
class GCAnimKeyData;
class GEventPreDataUpdate_t;
class GWorld_t;
class GCVectorAnimParameter;
class GCNmControlParameterBoolNode;
class GCStateMachineUpdateNode;
class GCHitBoxSet;
class GCExampleSchemaVData_PolymorphicDerivedB;
class GFeSimdTri_t;
class GPostProcessingResource_t;
class GCNmStateNode;
class GNodeData_t;
class GCTaskStatusAnimTag;
class GCMaterialDrawDescriptor;
class GEventServerProcessNetworking_t;
class GCInterpolatedValue;
class GCMotionGraphUpdateNode;
class GCLookAtUpdateNode;
class GCFlexController;
class GCExampleSchemaVData_PolymorphicDerivedA;
class GEntityKeyValueData_t;
class GCFootStride;
class GCAnimationGroup;
class GCSubtractUpdateNode;
class GFeTaperedCapsuleStretch_t;
class GWorldNodeOnDiskBufferData_t;
class GEntComponentInfo_t;
class GCClientGapTypeQueryRegistration;
class GCNmVirtualParameterTargetNode;
class GCAudioAnimTag;
class GCRenderMesh;
class Gconstraint_hingeparams_t;
class GNmCompressionSettings_t;
class GCTurnHelperUpdateNode;
class GCSosGroupActionTimeLimitSchema;
class GCFollowTargetUpdateNode;
class GEventClientAdvanceNonRenderedFrame_t;
class GCSosSoundEventGroupListSchema;
class GCNmClip;
class GCFlexDesc;
class GCStateMachineComponentUpdater;
class GCompMatMutatorCondition_t;
class GFakeEntity_tAPI;
class GCBoneConstraintPoseSpaceMorph__Input_t;
class GCTwoBoneIKUpdateNode;
class GVMixDynamicsDesc_t;
class GFeVertexMapDesc_t;
class GFeSourceEdge_t;
class GCompositeMaterialEditorPoint_t;
class GVPhysXJoint_t;
class GCBodyGroupSetting;
class GRnSphereDesc_t;
class GCNmTarget;

class GCGlowProperty
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCGlowProperty(std::string ptr, lua_State* state);
    GCGlowProperty(void *ptr);

    Vector GetGlowColor() const;
    void SetGlowColor(Vector value);
    int32_t GetGlowType() const;
    void SetGlowType(int32_t value);
    int32_t GetGlowTeam() const;
    void SetGlowTeam(int32_t value);
    int32_t GetGlowRange() const;
    void SetGlowRange(int32_t value);
    int32_t GetGlowRangeMin() const;
    void SetGlowRangeMin(int32_t value);
    Color GetGlowColorOverride() const;
    void SetGlowColorOverride(Color value);
    bool GetFlashing() const;
    void SetFlashing(bool value);
    float GetGlowTime() const;
    void SetGlowTime(float value);
    float GetGlowStartTime() const;
    void SetGlowStartTime(float value);
    bool GetEligibleForScreenHighlight() const;
    void SetEligibleForScreenHighlight(bool value);
    bool GetGlowing() const;
    void SetGlowing(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEntityComponent
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEntityComponent(std::string ptr, lua_State* state);
    GCEntityComponent(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPlayerPawnComponent
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPlayerPawnComponent(std::string ptr, lua_State* state);
    GCPlayerPawnComponent(void *ptr);

    GCNetworkVarChainer Get__pChainEntity() const;
    void Set__pChainEntity(GCNetworkVarChainer value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class Gfogparams_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    Gfogparams_t(std::string ptr, lua_State* state);
    Gfogparams_t(void *ptr);

    Vector GetDirPrimary() const;
    void SetDirPrimary(Vector value);
    Color GetColorPrimary() const;
    void SetColorPrimary(Color value);
    Color GetColorSecondary() const;
    void SetColorSecondary(Color value);
    Color GetColorPrimaryLerpTo() const;
    void SetColorPrimaryLerpTo(Color value);
    Color GetColorSecondaryLerpTo() const;
    void SetColorSecondaryLerpTo(Color value);
    float GetStart() const;
    void SetStart(float value);
    float GetEnd() const;
    void SetEnd(float value);
    float GetFarz() const;
    void SetFarz(float value);
    float GetMaxdensity() const;
    void SetMaxdensity(float value);
    float GetExponent() const;
    void SetExponent(float value);
    float GetHDRColorScale() const;
    void SetHDRColorScale(float value);
    float GetSkyboxFogFactor() const;
    void SetSkyboxFogFactor(float value);
    float GetSkyboxFogFactorLerpTo() const;
    void SetSkyboxFogFactorLerpTo(float value);
    float GetStartLerpTo() const;
    void SetStartLerpTo(float value);
    float GetEndLerpTo() const;
    void SetEndLerpTo(float value);
    float GetMaxdensityLerpTo() const;
    void SetMaxdensityLerpTo(float value);
    float GetLerptime() const;
    void SetLerptime(float value);
    float GetDuration() const;
    void SetDuration(float value);
    float GetBlendtobackground() const;
    void SetBlendtobackground(float value);
    float GetScattering() const;
    void SetScattering(float value);
    float GetLocallightscale() const;
    void SetLocallightscale(float value);
    bool GetEnable() const;
    void SetEnable(bool value);
    bool GetBlend() const;
    void SetBlend(bool value);
    bool GetNoReflectionFog() const;
    void SetNoReflectionFog(bool value);
    bool GetPadding() const;
    void SetPadding(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNetworkTransmitComponent
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNetworkTransmitComponent(std::string ptr, lua_State* state);
    GCNetworkTransmitComponent(void *ptr);

    uint32_t GetTransmitStateOwnedCounter() const;
    void SetTransmitStateOwnedCounter(uint32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNetworkViewOffsetVector
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNetworkViewOffsetVector(std::string ptr, lua_State* state);
    GCNetworkViewOffsetVector(void *ptr);

    float GetX() const;
    void SetX(float value);
    float GetY() const;
    void SetY(float value);
    float GetZ() const;
    void SetZ(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNetworkVelocityVector
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNetworkVelocityVector(std::string ptr, lua_State* state);
    GCNetworkVelocityVector(void *ptr);

    float GetX() const;
    void SetX(float value);
    float GetY() const;
    void SetY(float value);
    float GetZ() const;
    void SetZ(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEntityInstance
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEntityInstance(std::string ptr, lua_State* state);
    GCEntityInstance(void *ptr);

    std::string GetPrivateVScripts() const;
    void SetPrivateVScripts(std::string value);
    GCEntityIdentity GetEntity() const;
    void SetEntity(GCEntityIdentity value);
    GCScriptComponent GetCScriptComponent() const;
    void SetCScriptComponent(GCScriptComponent value);
    bool GetVisibleinPVS() const;
    void SetVisibleinPVS(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBaseEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBaseEntity(std::string ptr, lua_State* state);
    GCBaseEntity(void *ptr);

    void Spawn();
    void Despawn();
    void AcceptInput(std::string input, GCEntityInstance activator, GCEntityInstance caller, std::string value, int outputID);
    std::string GetClassname();
    GCEntitySubclassVDataBase GetVData();
    void Teleport(Vector value);
    void EmitSound(std::string sound_name, float pitch, float volume);
    GCBaseEntity EHandle();
    GCBodyComponent GetCBodyComponent() const;
    void SetCBodyComponent(GCBodyComponent value);
    GCNetworkTransmitComponent GetNetworkTransmitComponent() const;
    void SetNetworkTransmitComponent(GCNetworkTransmitComponent value);
    std::vector<Gthinkfunc_t> GetThinkFunctions() const;
    void SetThinkFunctions(std::vector<Gthinkfunc_t> value);
    int32_t GetCurrentThinkContext() const;
    void SetCurrentThinkContext(int32_t value);
    int32 GetLastThinkTick() const;
    void SetLastThinkTick(int32 value);
    bool GetDisabledContextThinks() const;
    void SetDisabledContextThinks(bool value);
    float GetLastNetworkChange() const;
    void SetLastNetworkChange(float value);
    std::vector<GResponseContext_t> GetResponseContexts() const;
    void SetResponseContexts(std::vector<GResponseContext_t> value);
    std::string GetResponseContext() const;
    void SetResponseContext(std::string value);
    int32_t GetHealth() const;
    void SetHealth(int32_t value);
    int32_t GetMaxHealth() const;
    void SetMaxHealth(int32_t value);
    uint32_t GetLifeState() const;
    void SetLifeState(uint32_t value);
    float GetDamageAccumulator() const;
    void SetDamageAccumulator(float value);
    bool GetTakesDamage() const;
    void SetTakesDamage(bool value);
    uint64_t GetTakeDamageFlags() const;
    void SetTakeDamageFlags(uint64_t value);
    bool GetIsPlatform() const;
    void SetIsPlatform(bool value);
    uint64_t GetMoveCollide() const;
    void SetMoveCollide(uint64_t value);
    uint64_t GetMoveType() const;
    void SetMoveType(uint64_t value);
    uint64_t GetActualMoveType() const;
    void SetActualMoveType(uint64_t value);
    uint32_t GetWaterTouch() const;
    void SetWaterTouch(uint32_t value);
    uint32_t GetSlimeTouch() const;
    void SetSlimeTouch(uint32_t value);
    bool GetRestoreInHierarchy() const;
    void SetRestoreInHierarchy(bool value);
    std::string GetTarget() const;
    void SetTarget(std::string value);
    GCBaseFilter GetDamageFilter() const;
    void SetDamageFilter(GCBaseFilter value);
    std::string GetDamageFilterName() const;
    void SetDamageFilterName(std::string value);
    float GetMoveDoneTime() const;
    void SetMoveDoneTime(float value);
    uint32_t GetSubclassID() const;
    void SetSubclassID(uint32_t value);
    float GetAnimTime() const;
    void SetAnimTime(float value);
    float GetSimulationTime() const;
    void SetSimulationTime(float value);
    float GetCreateTime() const;
    void SetCreateTime(float value);
    bool GetClientSideRagdoll() const;
    void SetClientSideRagdoll(bool value);
    uint32_t GetInterpolationFrame() const;
    void SetInterpolationFrame(uint32_t value);
    Vector GetPrevVPhysicsUpdatePos() const;
    void SetPrevVPhysicsUpdatePos(Vector value);
    uint32_t GetTeamNum() const;
    void SetTeamNum(uint32_t value);
    std::string GetGlobalname() const;
    void SetGlobalname(std::string value);
    int32_t GetSentToClients() const;
    void SetSentToClients(int32_t value);
    float GetSpeed() const;
    void SetSpeed(float value);
    std::string GetUniqueHammerID() const;
    void SetUniqueHammerID(std::string value);
    uint32_t GetSpawnflags() const;
    void SetSpawnflags(uint32_t value);
    int32 GetNextThinkTick() const;
    void SetNextThinkTick(int32 value);
    int32_t GetSimulationTick() const;
    void SetSimulationTick(int32_t value);
    GCEntityIOOutput GetOnKilled() const;
    void SetOnKilled(GCEntityIOOutput value);
    uint32_t GetFlags() const;
    void SetFlags(uint32_t value);
    Vector GetAbsVelocity() const;
    void SetAbsVelocity(Vector value);
    GCNetworkVelocityVector GetVelocity() const;
    void SetVelocity(GCNetworkVelocityVector value);
    Vector GetBaseVelocity() const;
    void SetBaseVelocity(Vector value);
    int32_t GetPushEnumCount() const;
    void SetPushEnumCount(int32_t value);
    GCCollisionProperty GetCollision() const;
    void SetCollision(GCCollisionProperty value);
    GCBaseEntity GetEffectEntity() const;
    void SetEffectEntity(GCBaseEntity value);
    GCBaseEntity GetOwnerEntity() const;
    void SetOwnerEntity(GCBaseEntity value);
    uint32_t GetEffects() const;
    void SetEffects(uint32_t value);
    GCBaseEntity GetGroundEntity() const;
    void SetGroundEntity(GCBaseEntity value);
    int32_t GetGroundBodyIndex() const;
    void SetGroundBodyIndex(int32_t value);
    float GetFriction() const;
    void SetFriction(float value);
    float GetElasticity() const;
    void SetElasticity(float value);
    float GetGravityScale() const;
    void SetGravityScale(float value);
    float GetTimeScale() const;
    void SetTimeScale(float value);
    float GetWaterLevel() const;
    void SetWaterLevel(float value);
    bool GetAnimatedEveryTick() const;
    void SetAnimatedEveryTick(bool value);
    bool GetDisableLowViolence() const;
    void SetDisableLowViolence(bool value);
    uint32_t GetWaterType() const;
    void SetWaterType(uint32_t value);
    int32_t GetEFlags() const;
    void SetEFlags(int32_t value);
    GCEntityIOOutput GetOnUser1() const;
    void SetOnUser1(GCEntityIOOutput value);
    GCEntityIOOutput GetOnUser2() const;
    void SetOnUser2(GCEntityIOOutput value);
    GCEntityIOOutput GetOnUser3() const;
    void SetOnUser3(GCEntityIOOutput value);
    GCEntityIOOutput GetOnUser4() const;
    void SetOnUser4(GCEntityIOOutput value);
    int32_t GetInitialTeamNum() const;
    void SetInitialTeamNum(int32_t value);
    float GetNavIgnoreUntilTime() const;
    void SetNavIgnoreUntilTime(float value);
    QAngle GetAngVelocity() const;
    void SetAngVelocity(QAngle value);
    bool GetNetworkQuantizeOriginAndAngles() const;
    void SetNetworkQuantizeOriginAndAngles(bool value);
    bool GetLagCompensate() const;
    void SetLagCompensate(bool value);
    float GetOverriddenFriction() const;
    void SetOverriddenFriction(float value);
    GCBaseEntity GetBlocker() const;
    void SetBlocker(GCBaseEntity value);
    float GetLocalTime() const;
    void SetLocalTime(float value);
    float GetVPhysicsUpdateLocalTime() const;
    void SetVPhysicsUpdateLocalTime(float value);
    uint64_t GetBloodType() const;
    void SetBloodType(uint64_t value);
    GCEntityInstance GetParent() const;
    void SetParent(GCEntityInstance value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPropDataComponent
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPropDataComponent(std::string ptr, lua_State* state);
    GCPropDataComponent(void *ptr);

    float GetDmgModBullet() const;
    void SetDmgModBullet(float value);
    float GetDmgModClub() const;
    void SetDmgModClub(float value);
    float GetDmgModExplosive() const;
    void SetDmgModExplosive(float value);
    float GetDmgModFire() const;
    void SetDmgModFire(float value);
    std::string GetPhysicsDamageTableName() const;
    void SetPhysicsDamageTableName(std::string value);
    std::string GetBasePropData() const;
    void SetBasePropData(std::string value);
    int32_t GetInteractions() const;
    void SetInteractions(int32_t value);
    bool GetSpawnMotionDisabled() const;
    void SetSpawnMotionDisabled(bool value);
    int32_t GetDisableTakePhysicsDamageSpawnFlag() const;
    void SetDisableTakePhysicsDamageSpawnFlag(int32_t value);
    int32_t GetMotionDisabledSpawnFlag() const;
    void SetMotionDisabledSpawnFlag(int32_t value);
    GCEntityComponent GetParent() const;
    void SetParent(GCEntityComponent value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCHitboxComponent
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCHitboxComponent(std::string ptr, lua_State* state);
    GCHitboxComponent(void *ptr);

    std::vector<uint32_t> GetDisabledHitGroups() const;
    void SetDisabledHitGroups(std::vector<uint32_t> value);
    GCEntityComponent GetParent() const;
    void SetParent(GCEntityComponent value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVPhysicsCollisionAttribute_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVPhysicsCollisionAttribute_t(std::string ptr, lua_State* state);
    GVPhysicsCollisionAttribute_t(void *ptr);

    uint64_t GetInteractsAs() const;
    void SetInteractsAs(uint64_t value);
    uint64_t GetInteractsWith() const;
    void SetInteractsWith(uint64_t value);
    uint64_t GetInteractsExclude() const;
    void SetInteractsExclude(uint64_t value);
    uint32_t GetEntityId() const;
    void SetEntityId(uint32_t value);
    uint32_t GetOwnerId() const;
    void SetOwnerId(uint32_t value);
    uint16_t GetHierarchyId() const;
    void SetHierarchyId(uint16_t value);
    uint32_t GetCollisionGroup() const;
    void SetCollisionGroup(uint32_t value);
    uint32_t GetCollisionFunctionMask() const;
    void SetCollisionFunctionMask(uint32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCollisionProperty
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCollisionProperty(std::string ptr, lua_State* state);
    GCCollisionProperty(void *ptr);

    GVPhysicsCollisionAttribute_t GetCollisionAttribute() const;
    void SetCollisionAttribute(GVPhysicsCollisionAttribute_t value);
    Vector GetMins() const;
    void SetMins(Vector value);
    Vector GetMaxs() const;
    void SetMaxs(Vector value);
    uint32_t GetSolidFlags() const;
    void SetSolidFlags(uint32_t value);
    uint64_t GetSolidType() const;
    void SetSolidType(uint64_t value);
    uint32_t GetTriggerBloat() const;
    void SetTriggerBloat(uint32_t value);
    uint64_t GetSurroundType() const;
    void SetSurroundType(uint64_t value);
    uint32_t GetCollisionGroup() const;
    void SetCollisionGroup(uint32_t value);
    uint32_t GetEnablePhysics() const;
    void SetEnablePhysics(uint32_t value);
    float GetBoundingRadius() const;
    void SetBoundingRadius(float value);
    Vector GetSpecifiedSurroundingMins() const;
    void SetSpecifiedSurroundingMins(Vector value);
    Vector GetSpecifiedSurroundingMaxs() const;
    void SetSpecifiedSurroundingMaxs(Vector value);
    Vector GetSurroundingMaxs() const;
    void SetSurroundingMaxs(Vector value);
    Vector GetSurroundingMins() const;
    void SetSurroundingMins(Vector value);
    Vector GetCapsuleCenter1() const;
    void SetCapsuleCenter1(Vector value);
    Vector GetCapsuleCenter2() const;
    void SetCapsuleCenter2(Vector value);
    float GetCapsuleRadius() const;
    void SetCapsuleRadius(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBaseModelEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBaseModelEntity(std::string ptr, lua_State* state);
    GCBaseModelEntity(void *ptr);

    void SetModel(std::string model);
    GCRenderComponent GetCRenderComponent() const;
    void SetCRenderComponent(GCRenderComponent value);
    GCHitboxComponent GetCHitboxComponent() const;
    void SetCHitboxComponent(GCHitboxComponent value);
    float GetDissolveStartTime() const;
    void SetDissolveStartTime(float value);
    GCEntityIOOutput GetOnIgnite() const;
    void SetOnIgnite(GCEntityIOOutput value);
    uint64_t GetRenderMode() const;
    void SetRenderMode(uint64_t value);
    uint64_t GetRenderFX() const;
    void SetRenderFX(uint64_t value);
    bool GetAllowFadeInView() const;
    void SetAllowFadeInView(bool value);
    Color GetRender() const;
    void SetRender(Color value);
    std::vector<GEntityRenderAttribute_t> GetRenderAttributes() const;
    void SetRenderAttributes(std::vector<GEntityRenderAttribute_t> value);
    bool GetRenderToCubemaps() const;
    void SetRenderToCubemaps(bool value);
    GCCollisionProperty GetCollision() const;
    void SetCollision(GCCollisionProperty value);
    GCGlowProperty GetGlow() const;
    void SetGlow(GCGlowProperty value);
    float GetGlowBackfaceMult() const;
    void SetGlowBackfaceMult(float value);
    float GetFadeMinDist() const;
    void SetFadeMinDist(float value);
    float GetFadeMaxDist() const;
    void SetFadeMaxDist(float value);
    float GetFadeScale() const;
    void SetFadeScale(float value);
    float GetShadowStrength() const;
    void SetShadowStrength(float value);
    uint32_t GetObjectCulling() const;
    void SetObjectCulling(uint32_t value);
    int32_t GetAddDecal() const;
    void SetAddDecal(int32_t value);
    Vector GetDecalPosition() const;
    void SetDecalPosition(Vector value);
    Vector GetDecalForwardAxis() const;
    void SetDecalForwardAxis(Vector value);
    float GetDecalHealBloodRate() const;
    void SetDecalHealBloodRate(float value);
    float GetDecalHealHeightRate() const;
    void SetDecalHealHeightRate(float value);
    std::vector<GCBaseModelEntity> GetConfigEntitiesToPropagateMaterialDecalsTo() const;
    void SetConfigEntitiesToPropagateMaterialDecalsTo(std::vector<GCBaseModelEntity> value);
    GCNetworkViewOffsetVector GetViewOffset() const;
    void SetViewOffset(GCNetworkViewOffsetVector value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCServerOnlyEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCServerOnlyEntity(std::string ptr, lua_State* state);
    GCServerOnlyEntity(void *ptr);

    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBaseToggle
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBaseToggle(std::string ptr, lua_State* state);
    GCBaseToggle(void *ptr);

    uint64_t GetToggle_state() const;
    void SetToggle_state(uint64_t value);
    float GetMoveDistance() const;
    void SetMoveDistance(float value);
    float GetWait() const;
    void SetWait(float value);
    float GetLip() const;
    void SetLip(float value);
    bool GetAlwaysFireBlockedOutputs() const;
    void SetAlwaysFireBlockedOutputs(bool value);
    Vector GetPosition1() const;
    void SetPosition1(Vector value);
    Vector GetPosition2() const;
    void SetPosition2(Vector value);
    QAngle GetMoveAng() const;
    void SetMoveAng(QAngle value);
    QAngle GetAngle1() const;
    void SetAngle1(QAngle value);
    QAngle GetAngle2() const;
    void SetAngle2(QAngle value);
    float GetHeight() const;
    void SetHeight(float value);
    GCBaseEntity GetActivator() const;
    void SetActivator(GCBaseEntity value);
    Vector GetFinalDest() const;
    void SetFinalDest(Vector value);
    QAngle GetFinalAngle() const;
    void SetFinalAngle(QAngle value);
    int32_t GetMovementType() const;
    void SetMovementType(int32_t value);
    std::string GetMaster() const;
    void SetMaster(std::string value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBaseTrigger
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBaseTrigger(std::string ptr, lua_State* state);
    GCBaseTrigger(void *ptr);

    bool GetDisabled() const;
    void SetDisabled(bool value);
    std::string GetFilterName() const;
    void SetFilterName(std::string value);
    GCBaseFilter GetFilter() const;
    void SetFilter(GCBaseFilter value);
    GCEntityIOOutput GetOnStartTouch() const;
    void SetOnStartTouch(GCEntityIOOutput value);
    GCEntityIOOutput GetOnStartTouchAll() const;
    void SetOnStartTouchAll(GCEntityIOOutput value);
    GCEntityIOOutput GetOnEndTouch() const;
    void SetOnEndTouch(GCEntityIOOutput value);
    GCEntityIOOutput GetOnEndTouchAll() const;
    void SetOnEndTouchAll(GCEntityIOOutput value);
    GCEntityIOOutput GetOnTouching() const;
    void SetOnTouching(GCEntityIOOutput value);
    GCEntityIOOutput GetOnTouchingEachEntity() const;
    void SetOnTouchingEachEntity(GCEntityIOOutput value);
    GCEntityIOOutput GetOnNotTouching() const;
    void SetOnNotTouching(GCEntityIOOutput value);
    bool GetClientSidePredicted() const;
    void SetClientSidePredicted(bool value);
    GCBaseToggle GetParent() const;
    void SetParent(GCBaseToggle value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTriggerProximity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTriggerProximity(std::string ptr, lua_State* state);
    GCTriggerProximity(void *ptr);

    GCBaseEntity GetMeasureTarget() const;
    void SetMeasureTarget(GCBaseEntity value);
    std::string GetMeasureTarget1() const;
    void SetMeasureTarget1(std::string value);
    float GetRadius() const;
    void SetRadius(float value);
    int32_t GetTouchers() const;
    void SetTouchers(int32_t value);
    GCBaseTrigger GetParent() const;
    void SetParent(GCBaseTrigger value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCLogicalEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCLogicalEntity(std::string ptr, lua_State* state);
    GCLogicalEntity(void *ptr);

    GCServerOnlyEntity GetParent() const;
    void SetParent(GCServerOnlyEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTriggerPush
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTriggerPush(std::string ptr, lua_State* state);
    GCTriggerPush(void *ptr);

    QAngle GetPushEntitySpace() const;
    void SetPushEntitySpace(QAngle value);
    Vector GetPushDirEntitySpace() const;
    void SetPushDirEntitySpace(Vector value);
    bool GetTriggerOnStartTouch() const;
    void SetTriggerOnStartTouch(bool value);
    bool GetUsePathSimple() const;
    void SetUsePathSimple(bool value);
    std::string GetPathSimpleName() const;
    void SetPathSimpleName(std::string value);
    GCPathSimple GetPathSimple() const;
    void SetPathSimple(GCPathSimple value);
    uint32_t GetSplinePushType() const;
    void SetSplinePushType(uint32_t value);
    GCBaseTrigger GetParent() const;
    void SetParent(GCBaseTrigger value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTriggerMultiple
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTriggerMultiple(std::string ptr, lua_State* state);
    GCTriggerMultiple(void *ptr);

    GCEntityIOOutput GetOnTrigger() const;
    void SetOnTrigger(GCEntityIOOutput value);
    GCBaseTrigger GetParent() const;
    void SetParent(GCBaseTrigger value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBasePlatTrain
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBasePlatTrain(std::string ptr, lua_State* state);
    GCBasePlatTrain(void *ptr);

    std::string GetNoiseMoving() const;
    void SetNoiseMoving(std::string value);
    std::string GetNoiseArrived() const;
    void SetNoiseArrived(std::string value);
    float GetVolume() const;
    void SetVolume(float value);
    float GetTWidth() const;
    void SetTWidth(float value);
    float GetTLength() const;
    void SetTLength(float value);
    GCBaseToggle GetParent() const;
    void SetParent(GCBaseToggle value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTonemapTrigger
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTonemapTrigger(std::string ptr, lua_State* state);
    GCTonemapTrigger(void *ptr);

    std::string GetTonemapControllerName() const;
    void SetTonemapControllerName(std::string value);
    GCEntityInstance GetTonemapController() const;
    void SetTonemapController(GCEntityInstance value);
    GCBaseTrigger GetParent() const;
    void SetParent(GCBaseTrigger value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEconItemAttribute
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEconItemAttribute(std::string ptr, lua_State* state);
    GCEconItemAttribute(void *ptr);

    uint16_t GetAttributeDefinitionIndex() const;
    void SetAttributeDefinitionIndex(uint16_t value);
    float GetValue() const;
    void SetValue(float value);
    float GetInitialValue() const;
    void SetInitialValue(float value);
    int32_t GetRefundableCurrency() const;
    void SetRefundableCurrency(int32_t value);
    bool GetSetBonus() const;
    void SetSetBonus(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCIronSightController
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCIronSightController(std::string ptr, lua_State* state);
    GCIronSightController(void *ptr);

    bool GetIronSightAvailable() const;
    void SetIronSightAvailable(bool value);
    float GetIronSightAmount() const;
    void SetIronSightAmount(float value);
    float GetIronSightAmountGained() const;
    void SetIronSightAmountGained(float value);
    float GetIronSightAmountBiased() const;
    void SetIronSightAmountBiased(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFogTrigger
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFogTrigger(std::string ptr, lua_State* state);
    GCFogTrigger(void *ptr);

    Gfogparams_t GetFog() const;
    void SetFog(Gfogparams_t value);
    GCBaseTrigger GetParent() const;
    void SetParent(GCBaseTrigger value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBaseFilter
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBaseFilter(std::string ptr, lua_State* state);
    GCBaseFilter(void *ptr);

    bool GetNegated() const;
    void SetNegated(bool value);
    GCEntityIOOutput GetOnPass() const;
    void SetOnPass(GCEntityIOOutput value);
    GCEntityIOOutput GetOnFail() const;
    void SetOnFail(GCEntityIOOutput value);
    GCLogicalEntity GetParent() const;
    void SetParent(GCLogicalEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSPointScriptExtensions_weapon_cs_base
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSPointScriptExtensions_weapon_cs_base(std::string ptr, lua_State* state);
    GCCSPointScriptExtensions_weapon_cs_base(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTriggerHostageReset
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTriggerHostageReset(std::string ptr, lua_State* state);
    GCTriggerHostageReset(void *ptr);

    GCBaseTrigger GetParent() const;
    void SetParent(GCBaseTrigger value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCServerOnlyPointEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCServerOnlyPointEntity(std::string ptr, lua_State* state);
    GCServerOnlyPointEntity(void *ptr);

    GCServerOnlyEntity GetParent() const;
    void SetParent(GCServerOnlyEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPointEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPointEntity(std::string ptr, lua_State* state);
    GCPointEntity(void *ptr);

    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCountdownTimer
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCountdownTimer(std::string ptr, lua_State* state);
    GCountdownTimer(void *ptr);

    float GetDuration() const;
    void SetDuration(float value);
    float GetTimestamp() const;
    void SetTimestamp(float value);
    float GetTimescale() const;
    void SetTimescale(float value);
    uint32_t GetWorldGroupId() const;
    void SetWorldGroupId(uint32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GSceneEventId_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GSceneEventId_t(std::string ptr, lua_State* state);
    GSceneEventId_t(void *ptr);

    uint32_t GetValue() const;
    void SetValue(uint32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBuoyancyHelper
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBuoyancyHelper(std::string ptr, lua_State* state);
    GCBuoyancyHelper(void *ptr);

    float GetFluidDensity() const;
    void SetFluidDensity(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMoverPathNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMoverPathNode(std::string ptr, lua_State* state);
    GCMoverPathNode(void *ptr);

    Vector GetInTangentLocal() const;
    void SetInTangentLocal(Vector value);
    Vector GetOutTangentLocal() const;
    void SetOutTangentLocal(Vector value);
    std::string GetParentPathUniqueID() const;
    void SetParentPathUniqueID(std::string value);
    GCEntityIOOutput GetOnPassThrough() const;
    void SetOnPassThrough(GCEntityIOOutput value);
    GCPathMover GetMover() const;
    void SetMover(GCPathMover value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBtNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBtNode(std::string ptr, lua_State* state);
    GCBtNode(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPlayer_ViewModelServices
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPlayer_ViewModelServices(std::string ptr, lua_State* state);
    GCPlayer_ViewModelServices(void *ptr);

    GCPlayerPawnComponent GetParent() const;
    void SetParent(GCPlayerPawnComponent value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GIEconItemInterface
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GIEconItemInterface(std::string ptr, lua_State* state);
    GIEconItemInterface(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvSoundscape
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvSoundscape(std::string ptr, lua_State* state);
    GCEnvSoundscape(void *ptr);

    GCEntityIOOutput GetOnPlay() const;
    void SetOnPlay(GCEntityIOOutput value);
    float GetRadius() const;
    void SetRadius(float value);
    std::string GetSoundscapeName() const;
    void SetSoundscapeName(std::string value);
    std::string GetSoundEventName() const;
    void SetSoundEventName(std::string value);
    bool GetOverrideWithEvent() const;
    void SetOverrideWithEvent(bool value);
    int32_t GetSoundscapeIndex() const;
    void SetSoundscapeIndex(int32_t value);
    int32_t GetSoundscapeEntityListId() const;
    void SetSoundscapeEntityListId(int32_t value);
    uint32_t GetSoundEventHash() const;
    void SetSoundEventHash(uint32_t value);
    std::vector<CUtlSymbolLarge> GetPositionNames() const;
    void SetPositionNames(std::vector<CUtlSymbolLarge> value);
    GCEnvSoundscape GetProxySoundscape() const;
    void SetProxySoundscape(GCEnvSoundscape value);
    bool GetDisabled() const;
    void SetDisabled(bool value);
    GCServerOnlyEntity GetParent() const;
    void SetParent(GCServerOnlyEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class Gfogplayerparams_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    Gfogplayerparams_t(std::string ptr, lua_State* state);
    Gfogplayerparams_t(void *ptr);

    GCFogController GetCtrl() const;
    void SetCtrl(GCFogController value);
    float GetTransitionTime() const;
    void SetTransitionTime(float value);
    Color GetOldColor() const;
    void SetOldColor(Color value);
    float GetOldStart() const;
    void SetOldStart(float value);
    float GetOldEnd() const;
    void SetOldEnd(float value);
    float GetOldMaxDensity() const;
    void SetOldMaxDensity(float value);
    float GetOldHDRColorScale() const;
    void SetOldHDRColorScale(float value);
    float GetOldFarZ() const;
    void SetOldFarZ(float value);
    Color GetNewColor() const;
    void SetNewColor(Color value);
    float GetNewStart() const;
    void SetNewStart(float value);
    float GetNewEnd() const;
    void SetNewEnd(float value);
    float GetNewMaxDensity() const;
    void SetNewMaxDensity(float value);
    float GetNewHDRColorScale() const;
    void SetNewHDRColorScale(float value);
    float GetNewFarZ() const;
    void SetNewFarZ(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFogController
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFogController(std::string ptr, lua_State* state);
    GCFogController(void *ptr);

    Gfogparams_t GetFog() const;
    void SetFog(Gfogparams_t value);
    bool GetUseAngles() const;
    void SetUseAngles(bool value);
    int32_t GetChangedVariables() const;
    void SetChangedVariables(int32_t value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAttributeList
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAttributeList(std::string ptr, lua_State* state);
    GCAttributeList(void *ptr);

    std::vector<GCEconItemAttribute> GetAttributes() const;
    void SetAttributes(std::vector<GCEconItemAttribute> value);
    GCAttributeManager GetManager() const;
    void SetManager(GCAttributeManager value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCModelState
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCModelState(std::string ptr, lua_State* state);
    GCModelState(void *ptr);

    std::string GetModelName() const;
    void SetModelName(std::string value);
    bool GetClientClothCreationSuppressed() const;
    void SetClientClothCreationSuppressed(bool value);
    uint64_t GetMeshGroupMask() const;
    void SetMeshGroupMask(uint64_t value);
    int32_t GetIdealMotionType() const;
    void SetIdealMotionType(int32_t value);
    int32_t GetForceLOD() const;
    void SetForceLOD(int32_t value);
    int32_t GetClothUpdateFlags() const;
    void SetClothUpdateFlags(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBaseAnimGraph
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBaseAnimGraph(std::string ptr, lua_State* state);
    GCBaseAnimGraph(void *ptr);

    bool GetInitiallyPopulateInterpHistory() const;
    void SetInitiallyPopulateInterpHistory(bool value);
    GIChoreoServices GetChoreoServices() const;
    void SetChoreoServices(GIChoreoServices value);
    bool GetAnimGraphUpdateEnabled() const;
    void SetAnimGraphUpdateEnabled(bool value);
    float GetMaxSlopeDistance() const;
    void SetMaxSlopeDistance(float value);
    Vector GetLastSlopeCheckPos() const;
    void SetLastSlopeCheckPos(Vector value);
    bool GetAnimationUpdateScheduled() const;
    void SetAnimationUpdateScheduled(bool value);
    Vector GetForce() const;
    void SetForce(Vector value);
    int32_t GetForceBone() const;
    void SetForceBone(int32_t value);
    GPhysicsRagdollPose_t GetRagdollPose() const;
    void SetRagdollPose(GPhysicsRagdollPose_t value);
    bool GetRagdollClientSide() const;
    void SetRagdollClientSide(bool value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnableMotionFixup
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnableMotionFixup(std::string ptr, lua_State* state);
    GCEnableMotionFixup(void *ptr);

    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCInButtonState
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCInButtonState(std::string ptr, lua_State* state);
    GCInButtonState(void *ptr);

    std::vector<uint64_t> GetButtonStates() const;
    void SetButtonStates(std::vector<uint64_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBtNodeDecorator
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBtNodeDecorator(std::string ptr, lua_State* state);
    GCBtNodeDecorator(void *ptr);

    GCBtNode GetParent() const;
    void SetParent(GCBtNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAttributeManager
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAttributeManager(std::string ptr, lua_State* state);
    GCAttributeManager(void *ptr);

    int32_t GetReapplyProvisionParity() const;
    void SetReapplyProvisionParity(int32_t value);
    GCBaseEntity GetOuter() const;
    void SetOuter(GCBaseEntity value);
    bool GetPreventLoopback() const;
    void SetPreventLoopback(bool value);
    uint64_t GetProviderType() const;
    void SetProviderType(uint64_t value);
    std::vector<GCAttributeManager> GetCachedResults() const;
    void SetCachedResults(std::vector<GCAttributeManager> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFilterHealth
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFilterHealth(std::string ptr, lua_State* state);
    GFilterHealth(void *ptr);

    bool GetAdrenalineActive() const;
    void SetAdrenalineActive(bool value);
    int32_t GetHealthMin() const;
    void SetHealthMin(int32_t value);
    int32_t GetHealthMax() const;
    void SetHealthMax(int32_t value);
    GCBaseFilter GetParent() const;
    void SetParent(GCBaseFilter value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPlayerPing
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPlayerPing(std::string ptr, lua_State* state);
    GCPlayerPing(void *ptr);

    GCCSPlayerPawn GetPlayer() const;
    void SetPlayer(GCCSPlayerPawn value);
    GCBaseEntity GetPingedEntity() const;
    void SetPingedEntity(GCBaseEntity value);
    int32_t GetType() const;
    void SetType(int32_t value);
    bool GetUrgent() const;
    void SetUrgent(bool value);
    std::string GetPlaceName() const;
    void SetPlaceName(std::string value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSPointScriptEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSPointScriptEntity(std::string ptr, lua_State* state);
    GCCSPointScriptEntity(void *ptr);

    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNetworkOriginCellCoordQuantizedVector
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNetworkOriginCellCoordQuantizedVector(std::string ptr, lua_State* state);
    GCNetworkOriginCellCoordQuantizedVector(void *ptr);

    uint16_t GetCellX() const;
    void SetCellX(uint16_t value);
    uint16_t GetCellY() const;
    void SetCellY(uint16_t value);
    uint16_t GetCellZ() const;
    void SetCellZ(uint16_t value);
    uint16_t GetOutsideWorld() const;
    void SetOutsideWorld(uint16_t value);
    float GetX() const;
    void SetX(float value);
    float GetY() const;
    void SetY(float value);
    float GetZ() const;
    void SetZ(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCInfoLandmark
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCInfoLandmark(std::string ptr, lua_State* state);
    GCInfoLandmark(void *ptr);

    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBaseFlex
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBaseFlex(std::string ptr, lua_State* state);
    GCBaseFlex(void *ptr);

    std::vector<float32> GetFlexWeight() const;
    void SetFlexWeight(std::vector<float32> value);
    Vector GetLookTargetPosition() const;
    void SetLookTargetPosition(Vector value);
    bool GetBlinktoggle() const;
    void SetBlinktoggle(bool value);
    float GetAllowResponsesEndTime() const;
    void SetAllowResponsesEndTime(float value);
    float GetLastFlexAnimationTime() const;
    void SetLastFlexAnimationTime(float value);
    GSceneEventId_t GetNextSceneEventId() const;
    void SetNextSceneEventId(GSceneEventId_t value);
    bool GetUpdateLayerPriorities() const;
    void SetUpdateLayerPriorities(bool value);
    GCBaseAnimGraph GetParent() const;
    void SetParent(GCBaseAnimGraph value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEconItemView
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEconItemView(std::string ptr, lua_State* state);
    GCEconItemView(void *ptr);

    uint16_t GetItemDefinitionIndex() const;
    void SetItemDefinitionIndex(uint16_t value);
    int32_t GetEntityQuality() const;
    void SetEntityQuality(int32_t value);
    uint32_t GetEntityLevel() const;
    void SetEntityLevel(uint32_t value);
    uint64_t GetItemID() const;
    void SetItemID(uint64_t value);
    uint32_t GetItemIDHigh() const;
    void SetItemIDHigh(uint32_t value);
    uint32_t GetItemIDLow() const;
    void SetItemIDLow(uint32_t value);
    uint32_t GetAccountID() const;
    void SetAccountID(uint32_t value);
    uint32_t GetInventoryPosition() const;
    void SetInventoryPosition(uint32_t value);
    bool GetInitialized() const;
    void SetInitialized(bool value);
    GCAttributeList GetAttributeList() const;
    void SetAttributeList(GCAttributeList value);
    GCAttributeList GetNetworkedDynamicAttributes() const;
    void SetNetworkedDynamicAttributes(GCAttributeList value);
    std::string GetCustomName() const;
    void SetCustomName(std::string value);
    std::string GetCustomNameOverride() const;
    void SetCustomNameOverride(std::string value);
    GIEconItemInterface GetParent() const;
    void SetParent(GIEconItemInterface value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimGraphNetworkedVariables
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimGraphNetworkedVariables(std::string ptr, lua_State* state);
    GCAnimGraphNetworkedVariables(void *ptr);

    std::vector<uint32> GetPredNetBoolVariables() const;
    void SetPredNetBoolVariables(std::vector<uint32> value);
    std::vector<uint8> GetPredNetByteVariables() const;
    void SetPredNetByteVariables(std::vector<uint8> value);
    std::vector<uint16> GetPredNetUInt16Variables() const;
    void SetPredNetUInt16Variables(std::vector<uint16> value);
    std::vector<int32> GetPredNetIntVariables() const;
    void SetPredNetIntVariables(std::vector<int32> value);
    std::vector<uint32> GetPredNetUInt32Variables() const;
    void SetPredNetUInt32Variables(std::vector<uint32> value);
    std::vector<uint64> GetPredNetUInt64Variables() const;
    void SetPredNetUInt64Variables(std::vector<uint64> value);
    std::vector<float32> GetPredNetFloatVariables() const;
    void SetPredNetFloatVariables(std::vector<float32> value);
    std::vector<Vector> GetPredNetVectorVariables() const;
    void SetPredNetVectorVariables(std::vector<Vector> value);
    std::vector<uint32> GetOwnerOnlyPredNetBoolVariables() const;
    void SetOwnerOnlyPredNetBoolVariables(std::vector<uint32> value);
    std::vector<uint8> GetOwnerOnlyPredNetByteVariables() const;
    void SetOwnerOnlyPredNetByteVariables(std::vector<uint8> value);
    std::vector<uint16> GetOwnerOnlyPredNetUInt16Variables() const;
    void SetOwnerOnlyPredNetUInt16Variables(std::vector<uint16> value);
    std::vector<int32> GetOwnerOnlyPredNetIntVariables() const;
    void SetOwnerOnlyPredNetIntVariables(std::vector<int32> value);
    std::vector<uint32> GetOwnerOnlyPredNetUInt32Variables() const;
    void SetOwnerOnlyPredNetUInt32Variables(std::vector<uint32> value);
    std::vector<uint64> GetOwnerOnlyPredNetUInt64Variables() const;
    void SetOwnerOnlyPredNetUInt64Variables(std::vector<uint64> value);
    std::vector<float32> GetOwnerOnlyPredNetFloatVariables() const;
    void SetOwnerOnlyPredNetFloatVariables(std::vector<float32> value);
    std::vector<Vector> GetOwnerOnlyPredNetVectorVariables() const;
    void SetOwnerOnlyPredNetVectorVariables(std::vector<Vector> value);
    int32_t GetBoolVariablesCount() const;
    void SetBoolVariablesCount(int32_t value);
    int32_t GetOwnerOnlyBoolVariablesCount() const;
    void SetOwnerOnlyBoolVariablesCount(int32_t value);
    int32_t GetRandomSeedOffset() const;
    void SetRandomSeedOffset(int32_t value);
    float GetLastTeleportTime() const;
    void SetLastTeleportTime(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBodyComponent
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBodyComponent(std::string ptr, lua_State* state);
    GCBodyComponent(void *ptr);

    GCGameSceneNode GetSceneNode() const;
    void SetSceneNode(GCGameSceneNode value);
    GCNetworkVarChainer Get__pChainEntity() const;
    void Set__pChainEntity(GCNetworkVarChainer value);
    GCEntityComponent GetParent() const;
    void SetParent(GCEntityComponent value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvFireSensor
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvFireSensor(std::string ptr, lua_State* state);
    GCEnvFireSensor(void *ptr);

    bool GetEnabled() const;
    void SetEnabled(bool value);
    bool GetHeatAtLevel() const;
    void SetHeatAtLevel(bool value);
    float GetRadius() const;
    void SetRadius(float value);
    float GetTargetLevel() const;
    void SetTargetLevel(float value);
    float GetTargetTime() const;
    void SetTargetTime(float value);
    float GetLevelTime() const;
    void SetLevelTime(float value);
    GCEntityIOOutput GetOnHeatLevelStart() const;
    void SetOnHeatLevelStart(GCEntityIOOutput value);
    GCEntityIOOutput GetOnHeatLevelEnd() const;
    void SetOnHeatLevelEnd(GCEntityIOOutput value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSGO_TeamPreviewCharacterPosition
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSGO_TeamPreviewCharacterPosition(std::string ptr, lua_State* state);
    GCCSGO_TeamPreviewCharacterPosition(void *ptr);

    int32_t GetVariant() const;
    void SetVariant(int32_t value);
    int32_t GetRandom() const;
    void SetRandom(int32_t value);
    int32_t GetOrdinal() const;
    void SetOrdinal(int32_t value);
    std::string GetWeaponName() const;
    void SetWeaponName(std::string value);
    uint64_t GetXuid() const;
    void SetXuid(uint64_t value);
    GCEconItemView GetAgentItem() const;
    void SetAgentItem(GCEconItemView value);
    GCEconItemView GetGlovesItem() const;
    void SetGlovesItem(GCEconItemView value);
    GCEconItemView GetWeaponItem() const;
    void SetWeaponItem(GCEconItemView value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvWindShared__WindAveEvent_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvWindShared__WindAveEvent_t(std::string ptr, lua_State* state);
    GCEnvWindShared__WindAveEvent_t(void *ptr);

    float GetStartWindSpeed() const;
    void SetStartWindSpeed(float value);
    float GetAveWindSpeed() const;
    void SetAveWindSpeed(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBaseProp
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBaseProp(std::string ptr, lua_State* state);
    GCBaseProp(void *ptr);

    bool GetModelOverrodeBlockLOS() const;
    void SetModelOverrodeBlockLOS(bool value);
    int32_t GetShapeType() const;
    void SetShapeType(int32_t value);
    bool GetConformToCollisionBounds() const;
    void SetConformToCollisionBounds(bool value);
    GCBaseAnimGraph GetParent() const;
    void SetParent(GCBaseAnimGraph value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPointGamestatsCounter
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPointGamestatsCounter(std::string ptr, lua_State* state);
    GCPointGamestatsCounter(void *ptr);

    std::string GetStrStatisticName() const;
    void SetStrStatisticName(std::string value);
    bool GetDisabled() const;
    void SetDisabled(bool value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPhysicsShake
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPhysicsShake(std::string ptr, lua_State* state);
    GCPhysicsShake(void *ptr);

    Vector GetForce() const;
    void SetForce(Vector value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBreakable
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBreakable(std::string ptr, lua_State* state);
    GCBreakable(void *ptr);

    GCPropDataComponent GetCPropDataComponent() const;
    void SetCPropDataComponent(GCPropDataComponent value);
    uint64_t GetMaterial() const;
    void SetMaterial(uint64_t value);
    GCBaseEntity GetBreaker() const;
    void SetBreaker(GCBaseEntity value);
    uint64_t GetExplosion() const;
    void SetExplosion(uint64_t value);
    std::string GetSpawnObject() const;
    void SetSpawnObject(std::string value);
    float GetPressureDelay() const;
    void SetPressureDelay(float value);
    int32_t GetMinHealthDmg() const;
    void SetMinHealthDmg(int32_t value);
    std::string GetPropData() const;
    void SetPropData(std::string value);
    float GetImpactEnergyScale() const;
    void SetImpactEnergyScale(float value);
    uint64_t GetOverrideBlockLOS() const;
    void SetOverrideBlockLOS(uint64_t value);
    GCEntityIOOutput GetOnBreak() const;
    void SetOnBreak(GCEntityIOOutput value);
    uint64_t GetPerformanceMode() const;
    void SetPerformanceMode(uint64_t value);
    GCBasePlayerPawn GetPhysicsAttacker() const;
    void SetPhysicsAttacker(GCBasePlayerPawn value);
    float GetLastPhysicsInfluenceTime() const;
    void SetLastPhysicsInfluenceTime(float value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPathKeyFrame
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPathKeyFrame(std::string ptr, lua_State* state);
    GCPathKeyFrame(void *ptr);

    Vector GetOrigin() const;
    void SetOrigin(Vector value);
    QAngle GetAngles() const;
    void SetAngles(QAngle value);
    std::string GetNextKey() const;
    void SetNextKey(std::string value);
    float GetNextTime() const;
    void SetNextTime(float value);
    GCPathKeyFrame GetNextKey1() const;
    void SetNextKey1(GCPathKeyFrame value);
    GCPathKeyFrame GetPrevKey() const;
    void SetPrevKey(GCPathKeyFrame value);
    float GetMoveSpeed() const;
    void SetMoveSpeed(float value);
    GCLogicalEntity GetParent() const;
    void SetParent(GCLogicalEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTriggerTripWire
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTriggerTripWire(std::string ptr, lua_State* state);
    GCTriggerTripWire(void *ptr);

    GCBaseTrigger GetParent() const;
    void SetParent(GCBaseTrigger value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvTilt
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvTilt(std::string ptr, lua_State* state);
    GCEnvTilt(void *ptr);

    float GetDuration() const;
    void SetDuration(float value);
    float GetRadius() const;
    void SetRadius(float value);
    float GetTiltTime() const;
    void SetTiltTime(float value);
    float GetStopTime() const;
    void SetStopTime(float value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAttributeContainer
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAttributeContainer(std::string ptr, lua_State* state);
    GCAttributeContainer(void *ptr);

    GCEconItemView GetItem() const;
    void SetItem(GCEconItemView value);
    GCAttributeManager GetParent() const;
    void SetParent(GCAttributeManager value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCItemGenericTriggerHelper
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCItemGenericTriggerHelper(std::string ptr, lua_State* state);
    GCItemGenericTriggerHelper(void *ptr);

    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCLogicBranchList
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCLogicBranchList(std::string ptr, lua_State* state);
    GCLogicBranchList(void *ptr);

    std::vector<CUtlSymbolLarge> GetLogicBranchNames() const;
    void SetLogicBranchNames(std::vector<CUtlSymbolLarge> value);
    GCLogicBranchList GetLastState() const;
    void SetLastState(GCLogicBranchList value);
    GCEntityIOOutput GetOnAllTrue() const;
    void SetOnAllTrue(GCEntityIOOutput value);
    GCEntityIOOutput GetOnAllFalse() const;
    void SetOnAllFalse(GCEntityIOOutput value);
    GCEntityIOOutput GetOnMixed() const;
    void SetOnMixed(GCEntityIOOutput value);
    GCLogicalEntity GetParent() const;
    void SetParent(GCLogicalEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class Gaudioparams_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    Gaudioparams_t(std::string ptr, lua_State* state);
    Gaudioparams_t(void *ptr);

    std::vector<Vector> GetLocalSound() const;
    void SetLocalSound(std::vector<Vector> value);
    int32_t GetSoundscapeIndex() const;
    void SetSoundscapeIndex(int32_t value);
    uint32_t GetLocalBits() const;
    void SetLocalBits(uint32_t value);
    int32_t GetSoundscapeEntityListIndex() const;
    void SetSoundscapeEntityListIndex(int32_t value);
    uint32_t GetSoundEventHash() const;
    void SetSoundEventHash(uint32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEconEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEconEntity(std::string ptr, lua_State* state);
    GCEconEntity(void *ptr);

    GCAttributeContainer GetAttributeManager() const;
    void SetAttributeManager(GCAttributeContainer value);
    uint32_t GetOriginalOwnerXuidLow() const;
    void SetOriginalOwnerXuidLow(uint32_t value);
    uint32_t GetOriginalOwnerXuidHigh() const;
    void SetOriginalOwnerXuidHigh(uint32_t value);
    int32_t GetFallbackPaintKit() const;
    void SetFallbackPaintKit(int32_t value);
    int32_t GetFallbackSeed() const;
    void SetFallbackSeed(int32_t value);
    float GetFallbackWear() const;
    void SetFallbackWear(float value);
    int32_t GetFallbackStatTrak() const;
    void SetFallbackStatTrak(int32_t value);
    GCBaseEntity GetOldProvidee() const;
    void SetOldProvidee(GCBaseEntity value);
    int32_t GetOldOwnerClass() const;
    void SetOldOwnerClass(int32_t value);
    GCBaseFlex GetParent() const;
    void SetParent(GCBaseFlex value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCModelPointEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCModelPointEntity(std::string ptr, lua_State* state);
    GCModelPointEntity(void *ptr);

    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMultiLightProxy
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMultiLightProxy(std::string ptr, lua_State* state);
    GCMultiLightProxy(void *ptr);

    std::string GetLightNameFilter() const;
    void SetLightNameFilter(std::string value);
    std::string GetLightClassFilter() const;
    void SetLightClassFilter(std::string value);
    float GetLightRadiusFilter() const;
    void SetLightRadiusFilter(float value);
    float GetBrightnessDelta() const;
    void SetBrightnessDelta(float value);
    bool GetPerformScreenFade() const;
    void SetPerformScreenFade(bool value);
    float GetTargetBrightnessMultiplier() const;
    void SetTargetBrightnessMultiplier(float value);
    float GetCurrentBrightnessMultiplier() const;
    void SetCurrentBrightnessMultiplier(float value);
    GCLogicalEntity GetParent() const;
    void SetParent(GCLogicalEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEffectData
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEffectData(std::string ptr, lua_State* state);
    GCEffectData(void *ptr);

    Vector GetOrigin() const;
    void SetOrigin(Vector value);
    Vector GetStart() const;
    void SetStart(Vector value);
    Vector GetNormal() const;
    void SetNormal(Vector value);
    QAngle GetAngles() const;
    void SetAngles(QAngle value);
    GCEntityInstance GetEntity() const;
    void SetEntity(GCEntityInstance value);
    GCEntityInstance GetOtherEntity() const;
    void SetOtherEntity(GCEntityInstance value);
    float GetScale() const;
    void SetScale(float value);
    float GetMagnitude() const;
    void SetMagnitude(float value);
    float GetRadius() const;
    void SetRadius(float value);
    uint32_t GetSurfaceProp() const;
    void SetSurfaceProp(uint32_t value);
    uint32_t GetDamageType() const;
    void SetDamageType(uint32_t value);
    uint32_t GetPenetrate() const;
    void SetPenetrate(uint32_t value);
    uint16_t GetMaterial() const;
    void SetMaterial(uint16_t value);
    uint16_t GetHitBox() const;
    void SetHitBox(uint16_t value);
    uint32_t GetColor() const;
    void SetColor(uint32_t value);
    uint32_t GetFlags() const;
    void SetFlags(uint32_t value);
    uint32_t GetAttachmentName() const;
    void SetAttachmentName(uint32_t value);
    uint16_t GetEffectName() const;
    void SetEffectName(uint16_t value);
    uint32_t GetExplosionType() const;
    void SetExplosionType(uint32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEntityBlocker
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEntityBlocker(std::string ptr, lua_State* state);
    GCEntityBlocker(void *ptr);

    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCLogicCase
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCLogicCase(std::string ptr, lua_State* state);
    GCLogicCase(void *ptr);

    std::vector<CUtlSymbolLarge> GetCase() const;
    void SetCase(std::vector<CUtlSymbolLarge> value);
    int32_t GetShuffleCases() const;
    void SetShuffleCases(int32_t value);
    int32_t GetLastShuffleCase() const;
    void SetLastShuffleCase(int32_t value);
    std::vector<uint32_t> GetUchShuffleCaseMap() const;
    void SetUchShuffleCaseMap(std::vector<uint32_t> value);
    std::vector<GCEntityIOOutput> GetOnCase() const;
    void SetOnCase(std::vector<GCEntityIOOutput> value);
    GCLogicalEntity GetParent() const;
    void SetParent(GCLogicalEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCItem
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCItem(std::string ptr, lua_State* state);
    GCItem(void *ptr);

    GCEntityIOOutput GetOnPlayerTouch() const;
    void SetOnPlayerTouch(GCEntityIOOutput value);
    GCEntityIOOutput GetOnPlayerPickup() const;
    void SetOnPlayerPickup(GCEntityIOOutput value);
    bool GetActivateWhenAtRest() const;
    void SetActivateWhenAtRest(bool value);
    GCEntityIOOutput GetOnCacheInteraction() const;
    void SetOnCacheInteraction(GCEntityIOOutput value);
    GCEntityIOOutput GetOnGlovePulled() const;
    void SetOnGlovePulled(GCEntityIOOutput value);
    Vector GetOriginalSpawnOrigin() const;
    void SetOriginalSpawnOrigin(Vector value);
    QAngle GetOriginalSpawnAngles() const;
    void SetOriginalSpawnAngles(QAngle value);
    bool GetPhysStartAsleep() const;
    void SetPhysStartAsleep(bool value);
    GCBaseAnimGraph GetParent() const;
    void SetParent(GCBaseAnimGraph value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCRuleEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCRuleEntity(std::string ptr, lua_State* state);
    GCRuleEntity(void *ptr);

    std::string GetMaster() const;
    void SetMaster(std::string value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GExtent
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GExtent(std::string ptr, lua_State* state);
    GExtent(void *ptr);

    Vector GetLo() const;
    void SetLo(Vector value);
    Vector GetHi() const;
    void SetHi(Vector value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSoundEventEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSoundEventEntity(std::string ptr, lua_State* state);
    GCSoundEventEntity(void *ptr);

    bool GetStartOnSpawn() const;
    void SetStartOnSpawn(bool value);
    bool GetToLocalPlayer() const;
    void SetToLocalPlayer(bool value);
    bool GetStopOnNew() const;
    void SetStopOnNew(bool value);
    bool GetSaveRestore() const;
    void SetSaveRestore(bool value);
    bool GetSavedIsPlaying() const;
    void SetSavedIsPlaying(bool value);
    float GetSavedElapsedTime() const;
    void SetSavedElapsedTime(float value);
    std::string GetSourceEntityName() const;
    void SetSourceEntityName(std::string value);
    std::string GetAttachmentName() const;
    void SetAttachmentName(std::string value);
    GCEntityIOOutput GetOnSoundFinished() const;
    void SetOnSoundFinished(GCEntityIOOutput value);
    std::string GetSoundName() const;
    void SetSoundName(std::string value);
    GCEntityInstance GetSource() const;
    void SetSource(GCEntityInstance value);
    int32_t GetEntityIndexSelection() const;
    void SetEntityIndexSelection(int32_t value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSPlayer_ViewModelServices
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSPlayer_ViewModelServices(std::string ptr, lua_State* state);
    GCCSPlayer_ViewModelServices(void *ptr);

    std::vector<GCBaseViewModel> GetViewModel() const;
    void SetViewModel(std::vector<GCBaseViewModel> value);
    GCPlayer_ViewModelServices GetParent() const;
    void SetParent(GCPlayer_ViewModelServices value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBasePlayerWeapon
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBasePlayerWeapon(std::string ptr, lua_State* state);
    GCBasePlayerWeapon(void *ptr);

    int32 GetNextPrimaryAttackTick() const;
    void SetNextPrimaryAttackTick(int32 value);
    float GetNextPrimaryAttackTickRatio() const;
    void SetNextPrimaryAttackTickRatio(float value);
    int32 GetNextSecondaryAttackTick() const;
    void SetNextSecondaryAttackTick(int32 value);
    float GetNextSecondaryAttackTickRatio() const;
    void SetNextSecondaryAttackTickRatio(float value);
    int32_t GetClip1() const;
    void SetClip1(int32_t value);
    int32_t GetClip2() const;
    void SetClip2(int32_t value);
    std::vector<int32_t> GetReserveAmmo() const;
    void SetReserveAmmo(std::vector<int32_t> value);
    GCEntityIOOutput GetOnPlayerUse() const;
    void SetOnPlayerUse(GCEntityIOOutput value);
    GCEconEntity GetParent() const;
    void SetParent(GCEconEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCInfoParticleTarget
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCInfoParticleTarget(std::string ptr, lua_State* state);
    GCInfoParticleTarget(void *ptr);

    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvVolumetricFogController
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvVolumetricFogController(std::string ptr, lua_State* state);
    GCEnvVolumetricFogController(void *ptr);

    float GetScattering() const;
    void SetScattering(float value);
    float GetAnisotropy() const;
    void SetAnisotropy(float value);
    float GetFadeSpeed() const;
    void SetFadeSpeed(float value);
    float GetDrawDistance() const;
    void SetDrawDistance(float value);
    float GetFadeInStart() const;
    void SetFadeInStart(float value);
    float GetFadeInEnd() const;
    void SetFadeInEnd(float value);
    float GetIndirectStrength() const;
    void SetIndirectStrength(float value);
    int32_t GetIndirectTextureDimX() const;
    void SetIndirectTextureDimX(int32_t value);
    int32_t GetIndirectTextureDimY() const;
    void SetIndirectTextureDimY(int32_t value);
    int32_t GetIndirectTextureDimZ() const;
    void SetIndirectTextureDimZ(int32_t value);
    Vector GetBoxMins() const;
    void SetBoxMins(Vector value);
    Vector GetBoxMaxs() const;
    void SetBoxMaxs(Vector value);
    bool GetActive() const;
    void SetActive(bool value);
    float GetStartAnisoTime() const;
    void SetStartAnisoTime(float value);
    float GetStartScatterTime() const;
    void SetStartScatterTime(float value);
    float GetStartDrawDistanceTime() const;
    void SetStartDrawDistanceTime(float value);
    float GetStartAnisotropy() const;
    void SetStartAnisotropy(float value);
    float GetStartScattering() const;
    void SetStartScattering(float value);
    float GetStartDrawDistance() const;
    void SetStartDrawDistance(float value);
    float GetDefaultAnisotropy() const;
    void SetDefaultAnisotropy(float value);
    float GetDefaultScattering() const;
    void SetDefaultScattering(float value);
    float GetDefaultDrawDistance() const;
    void SetDefaultDrawDistance(float value);
    bool GetStartDisabled() const;
    void SetStartDisabled(bool value);
    bool GetEnableIndirect() const;
    void SetEnableIndirect(bool value);
    bool GetIndirectUseLPVs() const;
    void SetIndirectUseLPVs(bool value);
    bool GetIsMaster() const;
    void SetIsMaster(bool value);
    int32_t GetForceRefreshCount() const;
    void SetForceRefreshCount(int32_t value);
    float GetNoiseSpeed() const;
    void SetNoiseSpeed(float value);
    float GetNoiseStrength() const;
    void SetNoiseStrength(float value);
    Vector GetNoiseScale() const;
    void SetNoiseScale(Vector value);
    bool GetFirstTime() const;
    void SetFirstTime(bool value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPlayer_MovementServices
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPlayer_MovementServices(std::string ptr, lua_State* state);
    GCPlayer_MovementServices(void *ptr);

    int32_t GetImpulse() const;
    void SetImpulse(int32_t value);
    GCInButtonState GetButtons() const;
    void SetButtons(GCInButtonState value);
    uint64_t GetQueuedButtonDownMask() const;
    void SetQueuedButtonDownMask(uint64_t value);
    uint64_t GetQueuedButtonChangeMask() const;
    void SetQueuedButtonChangeMask(uint64_t value);
    uint64_t GetButtonDoublePressed() const;
    void SetButtonDoublePressed(uint64_t value);
    std::vector<uint32_t> GetButtonPressedCmdNumber() const;
    void SetButtonPressedCmdNumber(std::vector<uint32_t> value);
    uint32_t GetLastCommandNumberProcessed() const;
    void SetLastCommandNumberProcessed(uint32_t value);
    uint64_t GetToggleButtonDownMask() const;
    void SetToggleButtonDownMask(uint64_t value);
    float GetMaxspeed() const;
    void SetMaxspeed(float value);
    std::vector<float> GetForceSubtickMoveWhen() const;
    void SetForceSubtickMoveWhen(std::vector<float> value);
    float GetForwardMove() const;
    void SetForwardMove(float value);
    float GetLeftMove() const;
    void SetLeftMove(float value);
    float GetUpMove() const;
    void SetUpMove(float value);
    Vector GetLastMovementImpulses() const;
    void SetLastMovementImpulses(Vector value);
    QAngle GetOldViewAngles() const;
    void SetOldViewAngles(QAngle value);
    GCPlayerPawnComponent GetParent() const;
    void SetParent(GCPlayerPawnComponent value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBreakableProp
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBreakableProp(std::string ptr, lua_State* state);
    GCBreakableProp(void *ptr);

    GCPropDataComponent GetCPropDataComponent() const;
    void SetCPropDataComponent(GCPropDataComponent value);
    GCEntityIOOutput GetOnBreak() const;
    void SetOnBreak(GCEntityIOOutput value);
    GCEntityIOOutput GetOnTakeDamage() const;
    void SetOnTakeDamage(GCEntityIOOutput value);
    float GetImpactEnergyScale() const;
    void SetImpactEnergyScale(float value);
    int32_t GetMinHealthDmg() const;
    void SetMinHealthDmg(int32_t value);
    QAngle GetPreferredCarryAngles() const;
    void SetPreferredCarryAngles(QAngle value);
    float GetPressureDelay() const;
    void SetPressureDelay(float value);
    float GetDefBurstScale() const;
    void SetDefBurstScale(float value);
    Vector GetDefBurstOffset() const;
    void SetDefBurstOffset(Vector value);
    GCBaseEntity GetBreaker() const;
    void SetBreaker(GCBaseEntity value);
    uint64_t GetPerformanceMode() const;
    void SetPerformanceMode(uint64_t value);
    float GetPreventDamageBeforeTime() const;
    void SetPreventDamageBeforeTime(float value);
    bool GetHasBreakPiecesOrCommands() const;
    void SetHasBreakPiecesOrCommands(bool value);
    float GetExplodeDamage() const;
    void SetExplodeDamage(float value);
    float GetExplodeRadius() const;
    void SetExplodeRadius(float value);
    float GetExplosionDelay() const;
    void SetExplosionDelay(float value);
    std::string GetExplosionBuildupSound() const;
    void SetExplosionBuildupSound(std::string value);
    std::string GetExplosionCustomEffect() const;
    void SetExplosionCustomEffect(std::string value);
    std::string GetExplosionCustomSound() const;
    void SetExplosionCustomSound(std::string value);
    std::string GetExplosionModifier() const;
    void SetExplosionModifier(std::string value);
    GCBasePlayerPawn GetPhysicsAttacker() const;
    void SetPhysicsAttacker(GCBasePlayerPawn value);
    float GetLastPhysicsInfluenceTime() const;
    void SetLastPhysicsInfluenceTime(float value);
    bool GetOriginalBlockLOS() const;
    void SetOriginalBlockLOS(bool value);
    float GetDefaultFadeScale() const;
    void SetDefaultFadeScale(float value);
    GCBaseEntity GetLastAttacker() const;
    void SetLastAttacker(GCBaseEntity value);
    GCBaseEntity GetFlareEnt() const;
    void SetFlareEnt(GCBaseEntity value);
    bool GetUsePuntSound() const;
    void SetUsePuntSound(bool value);
    std::string GetPuntSound() const;
    void SetPuntSound(std::string value);
    bool GetNoGhostCollision() const;
    void SetNoGhostCollision(bool value);
    GCBaseProp GetParent() const;
    void SetParent(GCBaseProp value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvSoundscapeProxy
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvSoundscapeProxy(std::string ptr, lua_State* state);
    GCEnvSoundscapeProxy(void *ptr);

    std::string GetMainSoundscapeName() const;
    void SetMainSoundscapeName(std::string value);
    GCEnvSoundscape GetParent() const;
    void SetParent(GCEnvSoundscape value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPhysConstraint
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPhysConstraint(std::string ptr, lua_State* state);
    GCPhysConstraint(void *ptr);

    std::string GetNameAttach1() const;
    void SetNameAttach1(std::string value);
    std::string GetNameAttach2() const;
    void SetNameAttach2(std::string value);
    GCBaseEntity GetAttach1() const;
    void SetAttach1(GCBaseEntity value);
    GCBaseEntity GetAttach2() const;
    void SetAttach2(GCBaseEntity value);
    std::string GetNameAttachment1() const;
    void SetNameAttachment1(std::string value);
    std::string GetNameAttachment2() const;
    void SetNameAttachment2(std::string value);
    std::string GetBreakSound() const;
    void SetBreakSound(std::string value);
    float GetForceLimit() const;
    void SetForceLimit(float value);
    float GetTorqueLimit() const;
    void SetTorqueLimit(float value);
    uint32_t GetTeleportTick() const;
    void SetTeleportTick(uint32_t value);
    float GetMinTeleportDistance() const;
    void SetMinTeleportDistance(float value);
    bool GetSnapObjectPositions() const;
    void SetSnapObjectPositions(bool value);
    GCEntityIOOutput GetOnBreak() const;
    void SetOnBreak(GCEntityIOOutput value);
    GCLogicalEntity GetParent() const;
    void SetParent(GCLogicalEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSGameModeRules
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSGameModeRules(std::string ptr, lua_State* state);
    GCCSGameModeRules(void *ptr);

    GCNetworkVarChainer Get__pChainEntity() const;
    void Set__pChainEntity(GCNetworkVarChainer value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCItemAssaultSuit
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCItemAssaultSuit(std::string ptr, lua_State* state);
    GCItemAssaultSuit(void *ptr);

    GCItem GetParent() const;
    void SetParent(GCItem value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCInfoPlayerStart
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCInfoPlayerStart(std::string ptr, lua_State* state);
    GCInfoPlayerStart(void *ptr);

    bool GetDisabled() const;
    void SetDisabled(bool value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSoundOpvarSetPointBase
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSoundOpvarSetPointBase(std::string ptr, lua_State* state);
    GCSoundOpvarSetPointBase(void *ptr);

    bool GetDisabled() const;
    void SetDisabled(bool value);
    GCEntityInstance GetSource() const;
    void SetSource(GCEntityInstance value);
    std::string GetSourceEntityName() const;
    void SetSourceEntityName(std::string value);
    Vector GetLastPosition() const;
    void SetLastPosition(Vector value);
    std::string GetStackName() const;
    void SetStackName(std::string value);
    std::string GetOperatorName() const;
    void SetOperatorName(std::string value);
    std::string GetOpvarName() const;
    void SetOpvarName(std::string value);
    int32_t GetOpvarIndex() const;
    void SetOpvarIndex(int32_t value);
    bool GetUseAutoCompare() const;
    void SetUseAutoCompare(bool value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class Gragdoll_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    Gragdoll_t(std::string ptr, lua_State* state);
    Gragdoll_t(void *ptr);

    std::vector<Gragdollelement_t> GetList() const;
    void SetList(std::vector<Gragdollelement_t> value);
    std::vector<int32> GetBoneIndex() const;
    void SetBoneIndex(std::vector<int32> value);
    bool GetAllowStretch() const;
    void SetAllowStretch(bool value);
    bool GetUnused() const;
    void SetUnused(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCItemDogtags
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCItemDogtags(std::string ptr, lua_State* state);
    GCItemDogtags(void *ptr);

    GCCSPlayerPawn GetOwningPlayer() const;
    void SetOwningPlayer(GCCSPlayerPawn value);
    GCCSPlayerPawn GetKillingPlayer() const;
    void SetKillingPlayer(GCCSPlayerPawn value);
    GCItem GetParent() const;
    void SetParent(GCItem value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCLightEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCLightEntity(std::string ptr, lua_State* state);
    GCLightEntity(void *ptr);

    GCLightComponent GetCLightComponent() const;
    void SetCLightComponent(GCLightComponent value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPlayer_WaterServices
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPlayer_WaterServices(std::string ptr, lua_State* state);
    GCPlayer_WaterServices(void *ptr);

    GCPlayerPawnComponent GetParent() const;
    void SetParent(GCPlayerPawnComponent value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSkyboxReference
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSkyboxReference(std::string ptr, lua_State* state);
    GCSkyboxReference(void *ptr);

    uint32_t GetWorldGroupId() const;
    void SetWorldGroupId(uint32_t value);
    GCSkyCamera GetSkyCamera() const;
    void SetSkyCamera(GCSkyCamera value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCDynamicProp
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCDynamicProp(std::string ptr, lua_State* state);
    GCDynamicProp(void *ptr);

    bool GetCreateNavObstacle() const;
    void SetCreateNavObstacle(bool value);
    bool GetUseHitboxesForRenderBox() const;
    void SetUseHitboxesForRenderBox(bool value);
    bool GetUseAnimGraph() const;
    void SetUseAnimGraph(bool value);
    GCEntityIOOutput GetOutputAnimBegun() const;
    void SetOutputAnimBegun(GCEntityIOOutput value);
    GCEntityIOOutput GetOutputAnimOver() const;
    void SetOutputAnimOver(GCEntityIOOutput value);
    GCEntityIOOutput GetOutputAnimLoopCycleOver() const;
    void SetOutputAnimLoopCycleOver(GCEntityIOOutput value);
    GCEntityIOOutput GetOnAnimReachedStart() const;
    void SetOnAnimReachedStart(GCEntityIOOutput value);
    GCEntityIOOutput GetOnAnimReachedEnd() const;
    void SetOnAnimReachedEnd(GCEntityIOOutput value);
    std::string GetIdleAnim() const;
    void SetIdleAnim(std::string value);
    uint64_t GetIdleAnimLoopMode() const;
    void SetIdleAnimLoopMode(uint64_t value);
    bool GetRandomizeCycle() const;
    void SetRandomizeCycle(bool value);
    bool GetStartDisabled() const;
    void SetStartDisabled(bool value);
    bool GetFiredStartEndOutput() const;
    void SetFiredStartEndOutput(bool value);
    bool GetForceNpcExclude() const;
    void SetForceNpcExclude(bool value);
    bool GetCreateNonSolid() const;
    void SetCreateNonSolid(bool value);
    bool GetIsOverrideProp() const;
    void SetIsOverrideProp(bool value);
    int32_t GetInitialGlowState() const;
    void SetInitialGlowState(int32_t value);
    int32_t GetGlowRange() const;
    void SetGlowRange(int32_t value);
    int32_t GetGlowRangeMin() const;
    void SetGlowRangeMin(int32_t value);
    Color GetGlowColor() const;
    void SetGlowColor(Color value);
    int32_t GetGlowTeam() const;
    void SetGlowTeam(int32_t value);
    GCBreakableProp GetParent() const;
    void SetParent(GCBreakableProp value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCRopeKeyframe
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCRopeKeyframe(std::string ptr, lua_State* state);
    GCRopeKeyframe(void *ptr);

    uint16_t GetRopeFlags() const;
    void SetRopeFlags(uint16_t value);
    std::string GetNextLinkName() const;
    void SetNextLinkName(std::string value);
    int16_t GetSlack() const;
    void SetSlack(int16_t value);
    float GetWidth() const;
    void SetWidth(float value);
    float GetTextureScale() const;
    void SetTextureScale(float value);
    uint32_t GetSegments() const;
    void SetSegments(uint32_t value);
    bool GetConstrainBetweenEndpoints() const;
    void SetConstrainBetweenEndpoints(bool value);
    std::string GetStrRopeMaterialModel() const;
    void SetStrRopeMaterialModel(std::string value);
    uint32_t GetSubdiv() const;
    void SetSubdiv(uint32_t value);
    uint32_t GetChangeCount() const;
    void SetChangeCount(uint32_t value);
    int16_t GetRopeLength() const;
    void SetRopeLength(int16_t value);
    uint32_t GetLockedPoints() const;
    void SetLockedPoints(uint32_t value);
    bool GetCreatedFromMapFile() const;
    void SetCreatedFromMapFile(bool value);
    float GetScrollSpeed() const;
    void SetScrollSpeed(float value);
    bool GetStartPointValid() const;
    void SetStartPointValid(bool value);
    bool GetEndPointValid() const;
    void SetEndPointValid(bool value);
    GCBaseEntity GetStartPoint() const;
    void SetStartPoint(GCBaseEntity value);
    GCBaseEntity GetEndPoint() const;
    void SetEndPoint(GCBaseEntity value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBarnLight
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBarnLight(std::string ptr, lua_State* state);
    GCBarnLight(void *ptr);

    bool GetEnabled() const;
    void SetEnabled(bool value);
    int32_t GetColorMode() const;
    void SetColorMode(int32_t value);
    Color GetColor() const;
    void SetColor(Color value);
    float GetColorTemperature() const;
    void SetColorTemperature(float value);
    float GetBrightness() const;
    void SetBrightness(float value);
    float GetBrightnessScale() const;
    void SetBrightnessScale(float value);
    int32_t GetDirectLight() const;
    void SetDirectLight(int32_t value);
    int32_t GetBakedShadowIndex() const;
    void SetBakedShadowIndex(int32_t value);
    int32_t GetLuminaireShape() const;
    void SetLuminaireShape(int32_t value);
    float GetLuminaireSize() const;
    void SetLuminaireSize(float value);
    float GetLuminaireAnisotropy() const;
    void SetLuminaireAnisotropy(float value);
    std::string GetLightStyleString() const;
    void SetLightStyleString(std::string value);
    float GetLightStyleStartTime() const;
    void SetLightStyleStartTime(float value);
    std::vector<CUtlString> GetQueuedLightStyleStrings() const;
    void SetQueuedLightStyleStrings(std::vector<CUtlString> value);
    std::vector<CUtlString> GetLightStyleEvents() const;
    void SetLightStyleEvents(std::vector<CUtlString> value);
    std::vector<GCBaseModelEntity> GetLightStyleTargets() const;
    void SetLightStyleTargets(std::vector<GCBaseModelEntity> value);
    std::vector<GCEntityIOOutput> GetStyleEvent() const;
    void SetStyleEvent(std::vector<GCEntityIOOutput> value);
    float GetShape() const;
    void SetShape(float value);
    float GetSoftX() const;
    void SetSoftX(float value);
    float GetSoftY() const;
    void SetSoftY(float value);
    float GetSkirt() const;
    void SetSkirt(float value);
    float GetSkirtNear() const;
    void SetSkirtNear(float value);
    Vector GetSizeParams() const;
    void SetSizeParams(Vector value);
    float GetRange() const;
    void SetRange(float value);
    Vector GetShear() const;
    void SetShear(Vector value);
    int32_t GetBakeSpecularToCubemaps() const;
    void SetBakeSpecularToCubemaps(int32_t value);
    Vector GetBakeSpecularToCubemapsSize() const;
    void SetBakeSpecularToCubemapsSize(Vector value);
    int32_t GetCastShadows() const;
    void SetCastShadows(int32_t value);
    int32_t GetShadowMapSize() const;
    void SetShadowMapSize(int32_t value);
    int32_t GetShadowPriority() const;
    void SetShadowPriority(int32_t value);
    bool GetContactShadow() const;
    void SetContactShadow(bool value);
    int32_t GetBounceLight() const;
    void SetBounceLight(int32_t value);
    float GetBounceScale() const;
    void SetBounceScale(float value);
    float GetMinRoughness() const;
    void SetMinRoughness(float value);
    Vector GetAlternateColor() const;
    void SetAlternateColor(Vector value);
    float GetAlternateColorBrightness() const;
    void SetAlternateColorBrightness(float value);
    int32_t GetFog() const;
    void SetFog(int32_t value);
    float GetFogStrength() const;
    void SetFogStrength(float value);
    int32_t GetFogShadows() const;
    void SetFogShadows(int32_t value);
    float GetFogScale() const;
    void SetFogScale(float value);
    float GetFadeSizeStart() const;
    void SetFadeSizeStart(float value);
    float GetFadeSizeEnd() const;
    void SetFadeSizeEnd(float value);
    float GetShadowFadeSizeStart() const;
    void SetShadowFadeSizeStart(float value);
    float GetShadowFadeSizeEnd() const;
    void SetShadowFadeSizeEnd(float value);
    bool GetPrecomputedFieldsValid() const;
    void SetPrecomputedFieldsValid(bool value);
    Vector GetPrecomputedBoundsMins() const;
    void SetPrecomputedBoundsMins(Vector value);
    Vector GetPrecomputedBoundsMaxs() const;
    void SetPrecomputedBoundsMaxs(Vector value);
    Vector GetPrecomputedOBBOrigin() const;
    void SetPrecomputedOBBOrigin(Vector value);
    QAngle GetPrecomputedOBBAngles() const;
    void SetPrecomputedOBBAngles(QAngle value);
    Vector GetPrecomputedOBBExtent() const;
    void SetPrecomputedOBBExtent(Vector value);
    bool GetPvsModifyEntity() const;
    void SetPvsModifyEntity(bool value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GSpawnPoint
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GSpawnPoint(std::string ptr, lua_State* state);
    GSpawnPoint(void *ptr);

    int32_t GetPriority() const;
    void SetPriority(int32_t value);
    bool GetEnabled() const;
    void SetEnabled(bool value);
    int32_t GetType() const;
    void SetType(int32_t value);
    GCServerOnlyPointEntity GetParent() const;
    void SetParent(GCServerOnlyPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvViewPunch
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvViewPunch(std::string ptr, lua_State* state);
    GCEnvViewPunch(void *ptr);

    float GetRadius() const;
    void SetRadius(float value);
    QAngle GetViewPunch() const;
    void SetViewPunch(QAngle value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSWeaponBase
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSWeaponBase(std::string ptr, lua_State* state);
    GCCSWeaponBase(void *ptr);

    bool GetRemoveable() const;
    void SetRemoveable(bool value);
    float GetFireSequenceStartTime() const;
    void SetFireSequenceStartTime(float value);
    int32_t GetFireSequenceStartTimeChange() const;
    void SetFireSequenceStartTimeChange(int32_t value);
    int32_t GetFireSequenceStartTimeAck() const;
    void SetFireSequenceStartTimeAck(int32_t value);
    uint64_t GetPlayerFireEvent() const;
    void SetPlayerFireEvent(uint64_t value);
    uint64_t GetPlayerFireEventAttackType() const;
    void SetPlayerFireEventAttackType(uint64_t value);
    int32_t GetSilencerBoneIndex() const;
    void SetSilencerBoneIndex(int32_t value);
    bool GetPlayerAmmoStockOnPickup() const;
    void SetPlayerAmmoStockOnPickup(bool value);
    bool GetRequireUseToTouch() const;
    void SetRequireUseToTouch(bool value);
    uint64_t GetState() const;
    void SetState(uint64_t value);
    float GetLastTimeInAir() const;
    void SetLastTimeInAir(float value);
    float GetLastDeployTime() const;
    void SetLastDeployTime(float value);
    int32_t GetLastEmptySoundCmdNum() const;
    void SetLastEmptySoundCmdNum(int32_t value);
    uint32_t GetViewModelIndex() const;
    void SetViewModelIndex(uint32_t value);
    bool GetReloadsWithClips() const;
    void SetReloadsWithClips(bool value);
    float GetTimeWeaponIdle() const;
    void SetTimeWeaponIdle(float value);
    bool GetFireOnEmpty() const;
    void SetFireOnEmpty(bool value);
    GCEntityIOOutput GetOnPlayerPickup() const;
    void SetOnPlayerPickup(GCEntityIOOutput value);
    uint64_t GetWeaponMode() const;
    void SetWeaponMode(uint64_t value);
    float GetTurningInaccuracyDelta() const;
    void SetTurningInaccuracyDelta(float value);
    Vector GetTurningInaccuracyEyeDirLast() const;
    void SetTurningInaccuracyEyeDirLast(Vector value);
    float GetTurningInaccuracy() const;
    void SetTurningInaccuracy(float value);
    float GetAccuracyPenalty() const;
    void SetAccuracyPenalty(float value);
    float GetLastAccuracyUpdateTime() const;
    void SetLastAccuracyUpdateTime(float value);
    float GetAccuracySmoothedForZoom() const;
    void SetAccuracySmoothedForZoom(float value);
    float GetScopeZoomEndTime() const;
    void SetScopeZoomEndTime(float value);
    int32_t GetRecoilIndex() const;
    void SetRecoilIndex(int32_t value);
    float GetRecoilIndex1() const;
    void SetRecoilIndex1(float value);
    bool GetBurstMode() const;
    void SetBurstMode(bool value);
    int32 GetPostponeFireReadyTicks() const;
    void SetPostponeFireReadyTicks(int32 value);
    float GetPostponeFireReadyFrac() const;
    void SetPostponeFireReadyFrac(float value);
    bool GetInReload() const;
    void SetInReload(bool value);
    bool GetReloadVisuallyComplete() const;
    void SetReloadVisuallyComplete(bool value);
    float GetDroppedAtTime() const;
    void SetDroppedAtTime(float value);
    bool GetIsHauledBack() const;
    void SetIsHauledBack(bool value);
    bool GetSilencerOn() const;
    void SetSilencerOn(bool value);
    float GetTimeSilencerSwitchComplete() const;
    void SetTimeSilencerSwitchComplete(float value);
    int32_t GetOriginalTeamNumber() const;
    void SetOriginalTeamNumber(int32_t value);
    int32_t GetMostRecentTeamNumber() const;
    void SetMostRecentTeamNumber(int32_t value);
    bool GetDroppedNearBuyZone() const;
    void SetDroppedNearBuyZone(bool value);
    float GetNextAttackRenderTimeOffset() const;
    void SetNextAttackRenderTimeOffset(float value);
    bool GetCanBePickedUp() const;
    void SetCanBePickedUp(bool value);
    bool GetUseCanOverrideNextOwnerTouchTime() const;
    void SetUseCanOverrideNextOwnerTouchTime(bool value);
    float GetNextOwnerTouchTime() const;
    void SetNextOwnerTouchTime(float value);
    float GetNextPrevOwnerTouchTime() const;
    void SetNextPrevOwnerTouchTime(float value);
    GCCSPlayerPawn GetPrevOwner() const;
    void SetPrevOwner(GCCSPlayerPawn value);
    int32 GetDropTick() const;
    void SetDropTick(int32 value);
    bool GetDonated() const;
    void SetDonated(bool value);
    float GetLastShotTime() const;
    void SetLastShotTime(float value);
    bool GetWasOwnedByCT() const;
    void SetWasOwnedByCT(bool value);
    bool GetWasOwnedByTerrorist() const;
    void SetWasOwnedByTerrorist(bool value);
    bool GetFiredOutOfAmmoEvent() const;
    void SetFiredOutOfAmmoEvent(bool value);
    int32_t GetNumRemoveUnownedWeaponThink() const;
    void SetNumRemoveUnownedWeaponThink(int32_t value);
    GCIronSightController GetIronSightController() const;
    void SetIronSightController(GCIronSightController value);
    int32_t GetIronSightMode() const;
    void SetIronSightMode(int32_t value);
    float GetLastLOSTraceFailureTime() const;
    void SetLastLOSTraceFailureTime(float value);
    int32_t GetNumEmptyAttacks() const;
    void SetNumEmptyAttacks(int32_t value);
    float GetWatTickOffset() const;
    void SetWatTickOffset(float value);
    GCBasePlayerWeapon GetParent() const;
    void SetParent(GCBasePlayerWeapon value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPathCorner
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPathCorner(std::string ptr, lua_State* state);
    GCPathCorner(void *ptr);

    float GetWait() const;
    void SetWait(float value);
    float GetRadius() const;
    void SetRadius(float value);
    GCEntityIOOutput GetOnPass() const;
    void SetOnPass(GCEntityIOOutput value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPlayerControllerComponent
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPlayerControllerComponent(std::string ptr, lua_State* state);
    GCPlayerControllerComponent(void *ptr);

    GCNetworkVarChainer Get__pChainEntity() const;
    void Set__pChainEntity(GCNetworkVarChainer value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWeaponBaseItem
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWeaponBaseItem(std::string ptr, lua_State* state);
    GCWeaponBaseItem(void *ptr);

    GCountdownTimer GetSequenceCompleteTimer() const;
    void SetSequenceCompleteTimer(GCountdownTimer value);
    bool GetRedraw() const;
    void SetRedraw(bool value);
    GCCSWeaponBase GetParent() const;
    void SetParent(GCCSWeaponBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBaseCombatCharacter
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBaseCombatCharacter(std::string ptr, lua_State* state);
    GCBaseCombatCharacter(void *ptr);

    bool GetForceServerRagdoll() const;
    void SetForceServerRagdoll(bool value);
    std::vector<GCEconWearable> GetMyWearables() const;
    void SetMyWearables(std::vector<GCEconWearable> value);
    float GetFieldOfView() const;
    void SetFieldOfView(float value);
    float GetImpactEnergyScale() const;
    void SetImpactEnergyScale(float value);
    uint64_t GetLastHitGroup() const;
    void SetLastHitGroup(uint64_t value);
    bool GetApplyStressDamage() const;
    void SetApplyStressDamage(bool value);
    int32_t GetDamageCount() const;
    void SetDamageCount(int32_t value);
    std::string GetStrRelationships() const;
    void SetStrRelationships(std::string value);
    uint64_t GetHull() const;
    void SetHull(uint64_t value);
    uint32_t GetNavHullIdx() const;
    void SetNavHullIdx(uint32_t value);
    GCBaseFlex GetParent() const;
    void SetParent(GCBaseFlex value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMultiSource
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMultiSource(std::string ptr, lua_State* state);
    GCMultiSource(void *ptr);

    std::vector<GCBaseEntity> GetRgEntities() const;
    void SetRgEntities(std::vector<GCBaseEntity> value);
    std::vector<int32_t> GetRgTriggered() const;
    void SetRgTriggered(std::vector<int32_t> value);
    GCEntityIOOutput GetOnTrigger() const;
    void SetOnTrigger(GCEntityIOOutput value);
    int32_t GetTotal() const;
    void SetTotal(int32_t value);
    std::string GetGlobalstate() const;
    void SetGlobalstate(std::string value);
    GCLogicalEntity GetParent() const;
    void SetParent(GCLogicalEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCLogicNavigation
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCLogicNavigation(std::string ptr, lua_State* state);
    GCLogicNavigation(void *ptr);

    bool GetIsOn() const;
    void SetIsOn(bool value);
    uint64_t GetNavProperty() const;
    void SetNavProperty(uint64_t value);
    GCLogicalEntity GetParent() const;
    void SetParent(GCLogicalEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvEntityMaker
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvEntityMaker(std::string ptr, lua_State* state);
    GCEnvEntityMaker(void *ptr);

    Vector GetEntityMins() const;
    void SetEntityMins(Vector value);
    Vector GetEntityMaxs() const;
    void SetEntityMaxs(Vector value);
    GCBaseEntity GetCurrentInstance() const;
    void SetCurrentInstance(GCBaseEntity value);
    GCBaseEntity GetCurrentBlocker() const;
    void SetCurrentBlocker(GCBaseEntity value);
    Vector GetBlockerOrigin() const;
    void SetBlockerOrigin(Vector value);
    QAngle GetPostSpawnDirection() const;
    void SetPostSpawnDirection(QAngle value);
    float GetPostSpawnDirectionVariance() const;
    void SetPostSpawnDirectionVariance(float value);
    float GetPostSpawnSpeed() const;
    void SetPostSpawnSpeed(float value);
    bool GetPostSpawnUseAngles() const;
    void SetPostSpawnUseAngles(bool value);
    std::string GetTemplate() const;
    void SetTemplate(std::string value);
    GCEntityIOOutput GetOutputOnSpawned() const;
    void SetOutputOnSpawned(GCEntityIOOutput value);
    GCEntityIOOutput GetOutputOnFailedSpawn() const;
    void SetOutputOnFailedSpawn(GCEntityIOOutput value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCProjectedDecal
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCProjectedDecal(std::string ptr, lua_State* state);
    GCProjectedDecal(void *ptr);

    int32_t GetTexture() const;
    void SetTexture(int32_t value);
    float GetDistance() const;
    void SetDistance(float value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCLogicEventListener
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCLogicEventListener(std::string ptr, lua_State* state);
    GCLogicEventListener(void *ptr);

    std::string GetStrEventName() const;
    void SetStrEventName(std::string value);
    bool GetIsEnabled() const;
    void SetIsEnabled(bool value);
    int32_t GetTeam() const;
    void SetTeam(int32_t value);
    GCEntityIOOutput GetOnEventFired() const;
    void SetOnEventFired(GCEntityIOOutput value);
    GCLogicalEntity GetParent() const;
    void SetParent(GCLogicalEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFilterMultiple
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFilterMultiple(std::string ptr, lua_State* state);
    GCFilterMultiple(void *ptr);

    uint64_t GetFilterType() const;
    void SetFilterType(uint64_t value);
    std::vector<CUtlSymbolLarge> GetFilterName() const;
    void SetFilterName(std::vector<CUtlSymbolLarge> value);
    std::vector<GCBaseEntity> GetFilter() const;
    void SetFilter(std::vector<GCBaseEntity> value);
    int32_t GetFilterCount() const;
    void SetFilterCount(int32_t value);
    GCBaseFilter GetParent() const;
    void SetParent(GCBaseFilter value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPlayer_UseServices
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPlayer_UseServices(std::string ptr, lua_State* state);
    GCPlayer_UseServices(void *ptr);

    GCPlayerPawnComponent GetParent() const;
    void SetParent(GCPlayerPawnComponent value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCScriptComponent
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCScriptComponent(std::string ptr, lua_State* state);
    GCScriptComponent(void *ptr);

    std::string GetScriptClassName() const;
    void SetScriptClassName(std::string value);
    GCEntityComponent GetParent() const;
    void SetParent(GCEntityComponent value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPhysicsWire
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPhysicsWire(std::string ptr, lua_State* state);
    GCPhysicsWire(void *ptr);

    int32_t GetDensity() const;
    void SetDensity(int32_t value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class Glocksound_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    Glocksound_t(std::string ptr, lua_State* state);
    Glocksound_t(void *ptr);

    std::string GetLockedSound() const;
    void SetLockedSound(std::string value);
    std::string GetUnlockedSound() const;
    void SetUnlockedSound(std::string value);
    float GetFlwaitSound() const;
    void SetFlwaitSound(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSPointScriptExtensions_player_controller
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSPointScriptExtensions_player_controller(std::string ptr, lua_State* state);
    GCCSPointScriptExtensions_player_controller(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBaseFire
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBaseFire(std::string ptr, lua_State* state);
    GCBaseFire(void *ptr);

    float GetScale() const;
    void SetScale(float value);
    float GetStartScale() const;
    void SetStartScale(float value);
    float GetScaleTime() const;
    void SetScaleTime(float value);
    uint32_t GetFlags() const;
    void SetFlags(uint32_t value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBumpMine
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBumpMine(std::string ptr, lua_State* state);
    GCBumpMine(void *ptr);

    GCCSWeaponBase GetParent() const;
    void SetParent(GCCSWeaponBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCLightGlow
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCLightGlow(std::string ptr, lua_State* state);
    GCLightGlow(void *ptr);

    uint32_t GetHorizontalSize() const;
    void SetHorizontalSize(uint32_t value);
    uint32_t GetVerticalSize() const;
    void SetVerticalSize(uint32_t value);
    uint32_t GetMinDist() const;
    void SetMinDist(uint32_t value);
    uint32_t GetMaxDist() const;
    void SetMaxDist(uint32_t value);
    uint32_t GetOuterMaxDist() const;
    void SetOuterMaxDist(uint32_t value);
    float GetGlowProxySize() const;
    void SetGlowProxySize(float value);
    float GetHDRColorScale() const;
    void SetHDRColorScale(float value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSPerRoundStats_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSPerRoundStats_t(std::string ptr, lua_State* state);
    GCSPerRoundStats_t(void *ptr);

    int32_t GetKills() const;
    void SetKills(int32_t value);
    int32_t GetDeaths() const;
    void SetDeaths(int32_t value);
    int32_t GetAssists() const;
    void SetAssists(int32_t value);
    int32_t GetDamage() const;
    void SetDamage(int32_t value);
    int32_t GetEquipmentValue() const;
    void SetEquipmentValue(int32_t value);
    int32_t GetMoneySaved() const;
    void SetMoneySaved(int32_t value);
    int32_t GetKillReward() const;
    void SetKillReward(int32_t value);
    int32_t GetLiveTime() const;
    void SetLiveTime(int32_t value);
    int32_t GetHeadShotKills() const;
    void SetHeadShotKills(int32_t value);
    int32_t GetObjective() const;
    void SetObjective(int32_t value);
    int32_t GetCashEarned() const;
    void SetCashEarned(int32_t value);
    int32_t GetUtilityDamage() const;
    void SetUtilityDamage(int32_t value);
    int32_t GetEnemiesFlashed() const;
    void SetEnemiesFlashed(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBasePropDoor
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBasePropDoor(std::string ptr, lua_State* state);
    GCBasePropDoor(void *ptr);

    float GetAutoReturnDelay() const;
    void SetAutoReturnDelay(float value);
    int32_t GetHardwareType() const;
    void SetHardwareType(int32_t value);
    bool GetNeedsHardware() const;
    void SetNeedsHardware(bool value);
    uint64_t GetDoorState() const;
    void SetDoorState(uint64_t value);
    bool GetLocked() const;
    void SetLocked(bool value);
    Vector GetClosedPosition() const;
    void SetClosedPosition(Vector value);
    QAngle GetClosedAngles() const;
    void SetClosedAngles(QAngle value);
    GCBaseEntity GetBlocker() const;
    void SetBlocker(GCBaseEntity value);
    bool GetFirstBlocked() const;
    void SetFirstBlocked(bool value);
    Glocksound_t GetLs() const;
    void SetLs(Glocksound_t value);
    bool GetForceClosed() const;
    void SetForceClosed(bool value);
    Vector GetLatchWorldPosition() const;
    void SetLatchWorldPosition(Vector value);
    GCBaseEntity GetActivator() const;
    void SetActivator(GCBaseEntity value);
    std::string GetSoundMoving() const;
    void SetSoundMoving(std::string value);
    std::string GetSoundOpen() const;
    void SetSoundOpen(std::string value);
    std::string GetSoundClose() const;
    void SetSoundClose(std::string value);
    std::string GetSoundLock() const;
    void SetSoundLock(std::string value);
    std::string GetSoundUnlock() const;
    void SetSoundUnlock(std::string value);
    std::string GetSoundLatch() const;
    void SetSoundLatch(std::string value);
    std::string GetSoundPound() const;
    void SetSoundPound(std::string value);
    std::string GetSoundJiggle() const;
    void SetSoundJiggle(std::string value);
    std::string GetSoundLockedAnim() const;
    void SetSoundLockedAnim(std::string value);
    int32_t GetNumCloseAttempts() const;
    void SetNumCloseAttempts(int32_t value);
    uint32_t GetPhysicsMaterial() const;
    void SetPhysicsMaterial(uint32_t value);
    std::string GetSlaveName() const;
    void SetSlaveName(std::string value);
    GCBasePropDoor GetMaster() const;
    void SetMaster(GCBasePropDoor value);
    GCEntityIOOutput GetOnBlockedClosing() const;
    void SetOnBlockedClosing(GCEntityIOOutput value);
    GCEntityIOOutput GetOnBlockedOpening() const;
    void SetOnBlockedOpening(GCEntityIOOutput value);
    GCEntityIOOutput GetOnUnblockedClosing() const;
    void SetOnUnblockedClosing(GCEntityIOOutput value);
    GCEntityIOOutput GetOnUnblockedOpening() const;
    void SetOnUnblockedOpening(GCEntityIOOutput value);
    GCEntityIOOutput GetOnFullyClosed() const;
    void SetOnFullyClosed(GCEntityIOOutput value);
    GCEntityIOOutput GetOnFullyOpen() const;
    void SetOnFullyOpen(GCEntityIOOutput value);
    GCEntityIOOutput GetOnClose() const;
    void SetOnClose(GCEntityIOOutput value);
    GCEntityIOOutput GetOnOpen() const;
    void SetOnOpen(GCEntityIOOutput value);
    GCEntityIOOutput GetOnLockedUse() const;
    void SetOnLockedUse(GCEntityIOOutput value);
    GCEntityIOOutput GetOnAjarOpen() const;
    void SetOnAjarOpen(GCEntityIOOutput value);
    GCDynamicProp GetParent() const;
    void SetParent(GCDynamicProp value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCRagdollManager
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCRagdollManager(std::string ptr, lua_State* state);
    GCRagdollManager(void *ptr);

    int32_t GetCurrentMaxRagdollCount() const;
    void SetCurrentMaxRagdollCount(int32_t value);
    int32_t GetMaxRagdollCount() const;
    void SetMaxRagdollCount(int32_t value);
    bool GetSaveImportant() const;
    void SetSaveImportant(bool value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTriggerFan
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTriggerFan(std::string ptr, lua_State* state);
    GCTriggerFan(void *ptr);

    Vector GetFanOrigin() const;
    void SetFanOrigin(Vector value);
    Vector GetFanEnd() const;
    void SetFanEnd(Vector value);
    Vector GetNoise() const;
    void SetNoise(Vector value);
    float GetForce() const;
    void SetForce(float value);
    float GetRopeForceScale() const;
    void SetRopeForceScale(float value);
    float GetPlayerForce() const;
    void SetPlayerForce(float value);
    float GetRampTime() const;
    void SetRampTime(float value);
    bool GetFalloff() const;
    void SetFalloff(bool value);
    bool GetPushPlayer() const;
    void SetPushPlayer(bool value);
    bool GetRampDown() const;
    void SetRampDown(bool value);
    bool GetAddNoise() const;
    void SetAddNoise(bool value);
    GCountdownTimer GetRampTimer() const;
    void SetRampTimer(GCountdownTimer value);
    GCBaseTrigger GetParent() const;
    void SetParent(GCBaseTrigger value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBaseCSGrenade
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBaseCSGrenade(std::string ptr, lua_State* state);
    GCBaseCSGrenade(void *ptr);

    bool GetRedraw() const;
    void SetRedraw(bool value);
    bool GetIsHeldByPlayer() const;
    void SetIsHeldByPlayer(bool value);
    bool GetPinPulled() const;
    void SetPinPulled(bool value);
    bool GetJumpThrow() const;
    void SetJumpThrow(bool value);
    bool GetThrowAnimating() const;
    void SetThrowAnimating(bool value);
    float GetThrowTime() const;
    void SetThrowTime(float value);
    float GetThrowStrength() const;
    void SetThrowStrength(float value);
    float GetThrowStrengthApproach() const;
    void SetThrowStrengthApproach(float value);
    float GetDropTime() const;
    void SetDropTime(float value);
    float GetPinPullTime() const;
    void SetPinPullTime(float value);
    bool GetJustPulledPin() const;
    void SetJustPulledPin(bool value);
    int32 GetNextHoldTick() const;
    void SetNextHoldTick(int32 value);
    float GetNextHoldFrac() const;
    void SetNextHoldFrac(float value);
    GCCSWeaponBase GetSwitchToWeaponAfterThrow() const;
    void SetSwitchToWeaponAfterThrow(GCCSWeaponBase value);
    GCCSWeaponBase GetParent() const;
    void SetParent(GCCSWeaponBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPathCornerCrash
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPathCornerCrash(std::string ptr, lua_State* state);
    GCPathCornerCrash(void *ptr);

    GCPathCorner GetParent() const;
    void SetParent(GCPathCorner value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCHandleTest
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCHandleTest(std::string ptr, lua_State* state);
    GCHandleTest(void *ptr);

    GCBaseEntity GetHandle() const;
    void SetHandle(GCBaseEntity value);
    bool GetSendHandle() const;
    void SetSendHandle(bool value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSoundOpvarSetEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSoundOpvarSetEntity(std::string ptr, lua_State* state);
    GCSoundOpvarSetEntity(void *ptr);

    std::string GetStackName() const;
    void SetStackName(std::string value);
    std::string GetOperatorName() const;
    void SetOperatorName(std::string value);
    std::string GetOpvarName() const;
    void SetOpvarName(std::string value);
    int32_t GetOpvarType() const;
    void SetOpvarType(int32_t value);
    int32_t GetOpvarIndex() const;
    void SetOpvarIndex(int32_t value);
    float GetOpvarValue() const;
    void SetOpvarValue(float value);
    std::string GetOpvarValueString() const;
    void SetOpvarValueString(std::string value);
    bool GetSetOnSpawn() const;
    void SetSetOnSpawn(bool value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GWeaponPurchaseCount_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GWeaponPurchaseCount_t(std::string ptr, lua_State* state);
    GWeaponPurchaseCount_t(void *ptr);

    uint16_t GetItemDefIndex() const;
    void SetItemDefIndex(uint16_t value);
    uint16_t GetCount() const;
    void SetCount(uint16_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNavSpaceInfo
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNavSpaceInfo(std::string ptr, lua_State* state);
    GCNavSpaceInfo(void *ptr);

    bool GetCreateFlightSpace() const;
    void SetCreateFlightSpace(bool value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCLogicAchievement
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCLogicAchievement(std::string ptr, lua_State* state);
    GCLogicAchievement(void *ptr);

    bool GetDisabled() const;
    void SetDisabled(bool value);
    std::string GetAchievementEventID() const;
    void SetAchievementEventID(std::string value);
    GCEntityIOOutput GetOnFired() const;
    void SetOnFired(GCEntityIOOutput value);
    GCLogicalEntity GetParent() const;
    void SetParent(GCLogicalEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPathSimple
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPathSimple(std::string ptr, lua_State* state);
    GCPathSimple(void *ptr);

    std::string GetPathString() const;
    void SetPathString(std::string value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBtActionParachutePositioning
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBtActionParachutePositioning(std::string ptr, lua_State* state);
    GCBtActionParachutePositioning(void *ptr);

    GCountdownTimer GetActionTimer() const;
    void SetActionTimer(GCountdownTimer value);
    GCBtNode GetParent() const;
    void SetParent(GCBtNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPlayer_CameraServices
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPlayer_CameraServices(std::string ptr, lua_State* state);
    GCPlayer_CameraServices(void *ptr);

    QAngle GetCsViewPunchAngle() const;
    void SetCsViewPunchAngle(QAngle value);
    int32 GetCsViewPunchAngleTick() const;
    void SetCsViewPunchAngleTick(int32 value);
    float GetCsViewPunchAngleTickRatio() const;
    void SetCsViewPunchAngleTickRatio(float value);
    Gfogplayerparams_t GetPlayerFog() const;
    void SetPlayerFog(Gfogplayerparams_t value);
    GCColorCorrection GetColorCorrectionCtrl() const;
    void SetColorCorrectionCtrl(GCColorCorrection value);
    GCBaseEntity GetViewEntity() const;
    void SetViewEntity(GCBaseEntity value);
    GCTonemapController2 GetTonemapController() const;
    void SetTonemapController(GCTonemapController2 value);
    Gaudioparams_t GetAudio() const;
    void SetAudio(Gaudioparams_t value);
    std::vector<GCPostProcessingVolume> GetPostProcessingVolumes() const;
    void SetPostProcessingVolumes(std::vector<GCPostProcessingVolume> value);
    float GetOldPlayerZ() const;
    void SetOldPlayerZ(float value);
    float GetOldPlayerViewOffsetZ() const;
    void SetOldPlayerViewOffsetZ(float value);
    GCPlayerPawnComponent GetParent() const;
    void SetParent(GCPlayerPawnComponent value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTouchExpansionComponent
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTouchExpansionComponent(std::string ptr, lua_State* state);
    GCTouchExpansionComponent(void *ptr);

    GCEntityComponent GetParent() const;
    void SetParent(GCEntityComponent value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEntitySpottedState_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEntitySpottedState_t(std::string ptr, lua_State* state);
    GEntitySpottedState_t(void *ptr);

    bool GetSpotted() const;
    void SetSpotted(bool value);
    std::vector<uint32_t> GetSpottedByMask() const;
    void SetSpottedByMask(std::vector<uint32_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBaseClientUIEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBaseClientUIEntity(std::string ptr, lua_State* state);
    GCBaseClientUIEntity(void *ptr);

    bool GetEnabled() const;
    void SetEnabled(bool value);
    std::string GetDialogXMLName() const;
    void SetDialogXMLName(std::string value);
    std::string GetPanelClassName() const;
    void SetPanelClassName(std::string value);
    std::string GetPanelID() const;
    void SetPanelID(std::string value);
    GCEntityIOOutput GetCustomOutput0() const;
    void SetCustomOutput0(GCEntityIOOutput value);
    GCEntityIOOutput GetCustomOutput1() const;
    void SetCustomOutput1(GCEntityIOOutput value);
    GCEntityIOOutput GetCustomOutput2() const;
    void SetCustomOutput2(GCEntityIOOutput value);
    GCEntityIOOutput GetCustomOutput3() const;
    void SetCustomOutput3(GCEntityIOOutput value);
    GCEntityIOOutput GetCustomOutput4() const;
    void SetCustomOutput4(GCEntityIOOutput value);
    GCEntityIOOutput GetCustomOutput5() const;
    void SetCustomOutput5(GCEntityIOOutput value);
    GCEntityIOOutput GetCustomOutput6() const;
    void SetCustomOutput6(GCEntityIOOutput value);
    GCEntityIOOutput GetCustomOutput7() const;
    void SetCustomOutput7(GCEntityIOOutput value);
    GCEntityIOOutput GetCustomOutput8() const;
    void SetCustomOutput8(GCEntityIOOutput value);
    GCEntityIOOutput GetCustomOutput9() const;
    void SetCustomOutput9(GCEntityIOOutput value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvDecal
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvDecal(std::string ptr, lua_State* state);
    GCEnvDecal(void *ptr);

    float GetWidth() const;
    void SetWidth(float value);
    float GetHeight() const;
    void SetHeight(float value);
    float GetDepth() const;
    void SetDepth(float value);
    uint32_t GetRenderOrder() const;
    void SetRenderOrder(uint32_t value);
    bool GetProjectOnWorld() const;
    void SetProjectOnWorld(bool value);
    bool GetProjectOnCharacters() const;
    void SetProjectOnCharacters(bool value);
    bool GetProjectOnWater() const;
    void SetProjectOnWater(bool value);
    float GetDepthSortBias() const;
    void SetDepthSortBias(float value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSPointScriptExtensions_entity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSPointScriptExtensions_entity(std::string ptr, lua_State* state);
    GCCSPointScriptExtensions_entity(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCGameSceneNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCGameSceneNode(std::string ptr, lua_State* state);
    GCGameSceneNode(void *ptr);

    GCEntityInstance GetOwner() const;
    void SetOwner(GCEntityInstance value);
    GCGameSceneNode GetParent() const;
    void SetParent(GCGameSceneNode value);
    GCGameSceneNode GetChild() const;
    void SetChild(GCGameSceneNode value);
    GCGameSceneNode GetNextSibling() const;
    void SetNextSibling(GCGameSceneNode value);
    GCNetworkOriginCellCoordQuantizedVector GetOrigin() const;
    void SetOrigin(GCNetworkOriginCellCoordQuantizedVector value);
    QAngle GetRotation() const;
    void SetRotation(QAngle value);
    float GetScale() const;
    void SetScale(float value);
    Vector GetAbsOrigin() const;
    void SetAbsOrigin(Vector value);
    QAngle GetAbsRotation() const;
    void SetAbsRotation(QAngle value);
    float GetAbsScale() const;
    void SetAbsScale(float value);
    int16_t GetParentAttachmentOrBone() const;
    void SetParentAttachmentOrBone(int16_t value);
    bool GetDebugAbsOriginChanges() const;
    void SetDebugAbsOriginChanges(bool value);
    bool GetDormant() const;
    void SetDormant(bool value);
    bool GetForceParentToBeNetworked() const;
    void SetForceParentToBeNetworked(bool value);
    uint32_t GetHierarchicalDepth() const;
    void SetHierarchicalDepth(uint32_t value);
    uint32_t GetHierarchyType() const;
    void SetHierarchyType(uint32_t value);
    uint32_t GetDoNotSetAnimTimeInInvalidatePhysicsCount() const;
    void SetDoNotSetAnimTimeInInvalidatePhysicsCount(uint32_t value);
    uint32_t GetName() const;
    void SetName(uint32_t value);
    uint32_t GetHierarchyAttachName() const;
    void SetHierarchyAttachName(uint32_t value);
    float GetZOffset() const;
    void SetZOffset(float value);
    float GetClientLocalScale() const;
    void SetClientLocalScale(float value);
    Vector GetRenderOrigin() const;
    void SetRenderOrigin(Vector value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCLogicAuto
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCLogicAuto(std::string ptr, lua_State* state);
    GCLogicAuto(void *ptr);

    GCEntityIOOutput GetOnMapSpawn() const;
    void SetOnMapSpawn(GCEntityIOOutput value);
    GCEntityIOOutput GetOnDemoMapSpawn() const;
    void SetOnDemoMapSpawn(GCEntityIOOutput value);
    GCEntityIOOutput GetOnNewGame() const;
    void SetOnNewGame(GCEntityIOOutput value);
    GCEntityIOOutput GetOnLoadGame() const;
    void SetOnLoadGame(GCEntityIOOutput value);
    GCEntityIOOutput GetOnMapTransition() const;
    void SetOnMapTransition(GCEntityIOOutput value);
    GCEntityIOOutput GetOnBackgroundMap() const;
    void SetOnBackgroundMap(GCEntityIOOutput value);
    GCEntityIOOutput GetOnMultiNewMap() const;
    void SetOnMultiNewMap(GCEntityIOOutput value);
    GCEntityIOOutput GetOnMultiNewRound() const;
    void SetOnMultiNewRound(GCEntityIOOutput value);
    GCEntityIOOutput GetOnVREnabled() const;
    void SetOnVREnabled(GCEntityIOOutput value);
    GCEntityIOOutput GetOnVRNotEnabled() const;
    void SetOnVRNotEnabled(GCEntityIOOutput value);
    std::string GetGlobalstate() const;
    void SetGlobalstate(std::string value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSoundOpvarSetOBBWindEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSoundOpvarSetOBBWindEntity(std::string ptr, lua_State* state);
    GCSoundOpvarSetOBBWindEntity(void *ptr);

    Vector GetMins() const;
    void SetMins(Vector value);
    Vector GetMaxs() const;
    void SetMaxs(Vector value);
    Vector GetDistanceMins() const;
    void SetDistanceMins(Vector value);
    Vector GetDistanceMaxs() const;
    void SetDistanceMaxs(Vector value);
    float GetWindMin() const;
    void SetWindMin(float value);
    float GetWindMax() const;
    void SetWindMax(float value);
    float GetWindMapMin() const;
    void SetWindMapMin(float value);
    float GetWindMapMax() const;
    void SetWindMapMax(float value);
    GCSoundOpvarSetPointBase GetParent() const;
    void SetParent(GCSoundOpvarSetPointBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCLightDirectionalEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCLightDirectionalEntity(std::string ptr, lua_State* state);
    GCLightDirectionalEntity(void *ptr);

    GCLightEntity GetParent() const;
    void SetParent(GCLightEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCLogicNPCCounter
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCLogicNPCCounter(std::string ptr, lua_State* state);
    GCLogicNPCCounter(void *ptr);

    GCEntityIOOutput GetOnMinCountAll() const;
    void SetOnMinCountAll(GCEntityIOOutput value);
    GCEntityIOOutput GetOnMaxCountAll() const;
    void SetOnMaxCountAll(GCEntityIOOutput value);
    GCEntityIOOutput GetOnMinCount_1() const;
    void SetOnMinCount_1(GCEntityIOOutput value);
    GCEntityIOOutput GetOnMaxCount_1() const;
    void SetOnMaxCount_1(GCEntityIOOutput value);
    GCEntityIOOutput GetOnMinCount_2() const;
    void SetOnMinCount_2(GCEntityIOOutput value);
    GCEntityIOOutput GetOnMaxCount_2() const;
    void SetOnMaxCount_2(GCEntityIOOutput value);
    GCEntityIOOutput GetOnMinCount_3() const;
    void SetOnMinCount_3(GCEntityIOOutput value);
    GCEntityIOOutput GetOnMaxCount_3() const;
    void SetOnMaxCount_3(GCEntityIOOutput value);
    GCEntityInstance GetSource() const;
    void SetSource(GCEntityInstance value);
    std::string GetSourceEntityName() const;
    void SetSourceEntityName(std::string value);
    float GetDistanceMax() const;
    void SetDistanceMax(float value);
    bool GetDisabled() const;
    void SetDisabled(bool value);
    int32_t GetMinCountAll() const;
    void SetMinCountAll(int32_t value);
    int32_t GetMaxCountAll() const;
    void SetMaxCountAll(int32_t value);
    int32_t GetMinFactorAll() const;
    void SetMinFactorAll(int32_t value);
    int32_t GetMaxFactorAll() const;
    void SetMaxFactorAll(int32_t value);
    std::string GetNPCClassname_1() const;
    void SetNPCClassname_1(std::string value);
    int32_t GetNPCState_1() const;
    void SetNPCState_1(int32_t value);
    bool GetInvertState_1() const;
    void SetInvertState_1(bool value);
    int32_t GetMinCount_1() const;
    void SetMinCount_1(int32_t value);
    int32_t GetMaxCount_1() const;
    void SetMaxCount_1(int32_t value);
    int32_t GetMinFactor_1() const;
    void SetMinFactor_1(int32_t value);
    int32_t GetMaxFactor_1() const;
    void SetMaxFactor_1(int32_t value);
    float GetDefaultDist_1() const;
    void SetDefaultDist_1(float value);
    std::string GetNPCClassname_2() const;
    void SetNPCClassname_2(std::string value);
    int32_t GetNPCState_2() const;
    void SetNPCState_2(int32_t value);
    bool GetInvertState_2() const;
    void SetInvertState_2(bool value);
    int32_t GetMinCount_2() const;
    void SetMinCount_2(int32_t value);
    int32_t GetMaxCount_2() const;
    void SetMaxCount_2(int32_t value);
    int32_t GetMinFactor_2() const;
    void SetMinFactor_2(int32_t value);
    int32_t GetMaxFactor_2() const;
    void SetMaxFactor_2(int32_t value);
    float GetDefaultDist_2() const;
    void SetDefaultDist_2(float value);
    std::string GetNPCClassname_3() const;
    void SetNPCClassname_3(std::string value);
    int32_t GetNPCState_3() const;
    void SetNPCState_3(int32_t value);
    bool GetInvertState_3() const;
    void SetInvertState_3(bool value);
    int32_t GetMinCount_3() const;
    void SetMinCount_3(int32_t value);
    int32_t GetMaxCount_3() const;
    void SetMaxCount_3(int32_t value);
    int32_t GetMinFactor_3() const;
    void SetMinFactor_3(int32_t value);
    int32_t GetMaxFactor_3() const;
    void SetMaxFactor_3(int32_t value);
    float GetDefaultDist_3() const;
    void SetDefaultDist_3(float value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSObserver_UseServices
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSObserver_UseServices(std::string ptr, lua_State* state);
    GCCSObserver_UseServices(void *ptr);

    GCPlayer_UseServices GetParent() const;
    void SetParent(GCPlayer_UseServices value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFuncPlat
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFuncPlat(std::string ptr, lua_State* state);
    GCFuncPlat(void *ptr);

    std::string GetNoise() const;
    void SetNoise(std::string value);
    GCBasePlatTrain GetParent() const;
    void SetParent(GCBasePlatTrain value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCRuleBrushEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCRuleBrushEntity(std::string ptr, lua_State* state);
    GCRuleBrushEntity(void *ptr);

    GCRuleEntity GetParent() const;
    void SetParent(GCRuleEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCRulePointEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCRulePointEntity(std::string ptr, lua_State* state);
    GCRulePointEntity(void *ptr);

    int32_t GetScore() const;
    void SetScore(int32_t value);
    GCRuleEntity GetParent() const;
    void SetParent(GCRuleEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMessageEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMessageEntity(std::string ptr, lua_State* state);
    GCMessageEntity(void *ptr);

    int32_t GetRadius() const;
    void SetRadius(int32_t value);
    std::string GetMessageText() const;
    void SetMessageText(std::string value);
    bool GetDrawText() const;
    void SetDrawText(bool value);
    bool GetDeveloperOnly() const;
    void SetDeveloperOnly(bool value);
    bool GetEnabled() const;
    void SetEnabled(bool value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSmokeGrenade
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSmokeGrenade(std::string ptr, lua_State* state);
    GCSmokeGrenade(void *ptr);

    GCBaseCSGrenade GetParent() const;
    void SetParent(GCBaseCSGrenade value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBaseViewModel
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBaseViewModel(std::string ptr, lua_State* state);
    GCBaseViewModel(void *ptr);

    Vector GetLastFacing() const;
    void SetLastFacing(Vector value);
    uint32_t GetViewModelIndex() const;
    void SetViewModelIndex(uint32_t value);
    uint32_t GetAnimationParity() const;
    void SetAnimationParity(uint32_t value);
    float GetAnimationStartTime() const;
    void SetAnimationStartTime(float value);
    GCBasePlayerWeapon GetWeapon() const;
    void SetWeapon(GCBasePlayerWeapon value);
    std::string GetVMName() const;
    void SetVMName(std::string value);
    std::string GetAnimationPrefix() const;
    void SetAnimationPrefix(std::string value);
    int32_t GetOldLayer() const;
    void SetOldLayer(int32_t value);
    float GetOldLayerStartTime() const;
    void SetOldLayerStartTime(float value);
    GCBaseEntity GetControlPanel() const;
    void SetControlPanel(GCBaseEntity value);
    GCBaseAnimGraph GetParent() const;
    void SetParent(GCBaseAnimGraph value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSPlayer_PingServices
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSPlayer_PingServices(std::string ptr, lua_State* state);
    GCCSPlayer_PingServices(void *ptr);

    std::vector<float> GetPlayerPingTokens() const;
    void SetPlayerPingTokens(std::vector<float> value);
    GCBaseEntity GetPlayerPing() const;
    void SetPlayerPing(GCBaseEntity value);
    GCPlayerPawnComponent GetParent() const;
    void SetParent(GCPlayerPawnComponent value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPlayer_FlashlightServices
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPlayer_FlashlightServices(std::string ptr, lua_State* state);
    GCPlayer_FlashlightServices(void *ptr);

    GCPlayerPawnComponent GetParent() const;
    void SetParent(GCPlayerPawnComponent value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCServerOnlyModelEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCServerOnlyModelEntity(std::string ptr, lua_State* state);
    GCServerOnlyModelEntity(void *ptr);

    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBtActionCombatPositioning
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBtActionCombatPositioning(std::string ptr, lua_State* state);
    GCBtActionCombatPositioning(void *ptr);

    std::string GetSensorInputKey() const;
    void SetSensorInputKey(std::string value);
    std::string GetIsAttackingKey() const;
    void SetIsAttackingKey(std::string value);
    GCountdownTimer GetActionTimer() const;
    void SetActionTimer(GCountdownTimer value);
    bool GetCrouching() const;
    void SetCrouching(bool value);
    GCBtNode GetParent() const;
    void SetParent(GCBtNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFireSmoke
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFireSmoke(std::string ptr, lua_State* state);
    GCFireSmoke(void *ptr);

    int32_t GetFlameModelIndex() const;
    void SetFlameModelIndex(int32_t value);
    int32_t GetFlameFromAboveModelIndex() const;
    void SetFlameFromAboveModelIndex(int32_t value);
    GCBaseFire GetParent() const;
    void SetParent(GCBaseFire value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSWeaponBaseGun
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSWeaponBaseGun(std::string ptr, lua_State* state);
    GCCSWeaponBaseGun(void *ptr);

    int32_t GetZoomLevel() const;
    void SetZoomLevel(int32_t value);
    int32_t GetBurstShotsRemaining() const;
    void SetBurstShotsRemaining(int32_t value);
    int32_t GetSilencedModelIndex() const;
    void SetSilencedModelIndex(int32_t value);
    bool GetInPrecache() const;
    void SetInPrecache(bool value);
    bool GetNeedsBoltAction() const;
    void SetNeedsBoltAction(bool value);
    bool GetSkillReloadAvailable() const;
    void SetSkillReloadAvailable(bool value);
    bool GetSkillReloadLiftedReloadKey() const;
    void SetSkillReloadLiftedReloadKey(bool value);
    bool GetSkillBoltInterruptAvailable() const;
    void SetSkillBoltInterruptAvailable(bool value);
    bool GetSkillBoltLiftedFireKey() const;
    void SetSkillBoltLiftedFireKey(bool value);
    GCCSWeaponBase GetParent() const;
    void SetParent(GCCSWeaponBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWeaponGlock
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWeaponGlock(std::string ptr, lua_State* state);
    GCWeaponGlock(void *ptr);

    GCCSWeaponBaseGun GetParent() const;
    void SetParent(GCCSWeaponBaseGun value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPredictedViewModel
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPredictedViewModel(std::string ptr, lua_State* state);
    GCPredictedViewModel(void *ptr);

    GCBaseViewModel GetParent() const;
    void SetParent(GCBaseViewModel value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTriggerActiveWeaponDetect
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTriggerActiveWeaponDetect(std::string ptr, lua_State* state);
    GCTriggerActiveWeaponDetect(void *ptr);

    GCEntityIOOutput GetOnTouchedActiveWeapon() const;
    void SetOnTouchedActiveWeapon(GCEntityIOOutput value);
    std::string GetWeaponClassName() const;
    void SetWeaponClassName(std::string value);
    GCBaseTrigger GetParent() const;
    void SetParent(GCBaseTrigger value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvMicrophone
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvMicrophone(std::string ptr, lua_State* state);
    GCEnvMicrophone(void *ptr);

    bool GetDisabled() const;
    void SetDisabled(bool value);
    GCBaseEntity GetMeasureTarget() const;
    void SetMeasureTarget(GCBaseEntity value);
    uint64_t GetSoundType() const;
    void SetSoundType(uint64_t value);
    uint64_t GetSoundFlags() const;
    void SetSoundFlags(uint64_t value);
    float GetSensitivity() const;
    void SetSensitivity(float value);
    float GetSmoothFactor() const;
    void SetSmoothFactor(float value);
    float GetMaxRange() const;
    void SetMaxRange(float value);
    std::string GetSpeakerName() const;
    void SetSpeakerName(std::string value);
    GCBaseEntity GetSpeaker() const;
    void SetSpeaker(GCBaseEntity value);
    bool GetAvoidFeedback() const;
    void SetAvoidFeedback(bool value);
    int32_t GetSpeakerDSPPreset() const;
    void SetSpeakerDSPPreset(int32_t value);
    std::string GetListenFilter() const;
    void SetListenFilter(std::string value);
    GCBaseFilter GetListenFilter1() const;
    void SetListenFilter1(GCBaseFilter value);
    GCEntityIOOutput GetOnRoutedSound() const;
    void SetOnRoutedSound(GCEntityIOOutput value);
    GCEntityIOOutput GetOnHeardSound() const;
    void SetOnHeardSound(GCEntityIOOutput value);
    std::string GetLastSound() const;
    void SetLastSound(std::string value);
    int32_t GetLastRoutedFrame() const;
    void SetLastRoutedFrame(int32_t value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCInfoSpawnGroupLoadUnload
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCInfoSpawnGroupLoadUnload(std::string ptr, lua_State* state);
    GCInfoSpawnGroupLoadUnload(void *ptr);

    GCEntityIOOutput GetOnSpawnGroupLoadStarted() const;
    void SetOnSpawnGroupLoadStarted(GCEntityIOOutput value);
    GCEntityIOOutput GetOnSpawnGroupLoadFinished() const;
    void SetOnSpawnGroupLoadFinished(GCEntityIOOutput value);
    GCEntityIOOutput GetOnSpawnGroupUnloadStarted() const;
    void SetOnSpawnGroupUnloadStarted(GCEntityIOOutput value);
    GCEntityIOOutput GetOnSpawnGroupUnloadFinished() const;
    void SetOnSpawnGroupUnloadFinished(GCEntityIOOutput value);
    std::string GetSpawnGroupName() const;
    void SetSpawnGroupName(std::string value);
    std::string GetSpawnGroupFilterName() const;
    void SetSpawnGroupFilterName(std::string value);
    std::string GetLandmarkName() const;
    void SetLandmarkName(std::string value);
    std::string GetFixedSpawnGroupName() const;
    void SetFixedSpawnGroupName(std::string value);
    float GetTimeoutInterval() const;
    void SetTimeoutInterval(float value);
    bool GetStreamingStarted() const;
    void SetStreamingStarted(bool value);
    bool GetUnloadingStarted() const;
    void SetUnloadingStarted(bool value);
    GCLogicalEntity GetParent() const;
    void SetParent(GCLogicalEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBasePlayerController
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBasePlayerController(std::string ptr, lua_State* state);
    GCBasePlayerController(void *ptr);

    int EntityIndex();
    uint64_t GetInButtonsWhichAreToggles() const;
    void SetInButtonsWhichAreToggles(uint64_t value);
    uint32_t GetTickBase() const;
    void SetTickBase(uint32_t value);
    GCBasePlayerPawn GetPawn() const;
    void SetPawn(GCBasePlayerPawn value);
    bool GetKnownTeamMismatch() const;
    void SetKnownTeamMismatch(bool value);
    int32_t GetSplitScreenSlot() const;
    void SetSplitScreenSlot(int32_t value);
    GCBasePlayerController GetSplitOwner() const;
    void SetSplitOwner(GCBasePlayerController value);
    bool GetIsHLTV() const;
    void SetIsHLTV(bool value);
    uint64_t GetConnected() const;
    void SetConnected(uint64_t value);
    std::string GetPlayerName() const;
    void SetPlayerName(std::string value);
    std::string GetNetworkIDString() const;
    void SetNetworkIDString(std::string value);
    float GetLerpTime() const;
    void SetLerpTime(float value);
    bool GetLagCompensation() const;
    void SetLagCompensation(bool value);
    bool GetPredict() const;
    void SetPredict(bool value);
    bool GetAutoKickDisabled() const;
    void SetAutoKickDisabled(bool value);
    bool GetIsLowViolence() const;
    void SetIsLowViolence(bool value);
    bool GetGamePaused() const;
    void SetGamePaused(bool value);
    int32_t GetLastRealCommandNumberExecuted() const;
    void SetLastRealCommandNumberExecuted(int32_t value);
    int32_t GetLastLateCommandExecuted() const;
    void SetLastLateCommandExecuted(int32_t value);
    uint64_t GetIgnoreGlobalChat() const;
    void SetIgnoreGlobalChat(uint64_t value);
    float GetLastPlayerTalkTime() const;
    void SetLastPlayerTalkTime(float value);
    float GetLastEntitySteadyState() const;
    void SetLastEntitySteadyState(float value);
    int32_t GetAvailableEntitySteadyState() const;
    void SetAvailableEntitySteadyState(int32_t value);
    bool GetHasAnySteadyStateEnts() const;
    void SetHasAnySteadyStateEnts(bool value);
    uint64_t GetSteamID() const;
    void SetSteamID(uint64_t value);
    uint32_t GetDesiredFOV() const;
    void SetDesiredFOV(uint32_t value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPointTemplateAPI
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPointTemplateAPI(std::string ptr, lua_State* state);
    GCPointTemplateAPI(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCKnife
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCKnife(std::string ptr, lua_State* state);
    GCKnife(void *ptr);

    bool GetFirstAttack() const;
    void SetFirstAttack(bool value);
    GCCSWeaponBase GetParent() const;
    void SetParent(GCCSWeaponBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFuncTrackTrain
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFuncTrackTrain(std::string ptr, lua_State* state);
    GCFuncTrackTrain(void *ptr);

    GCPathTrack GetPpath() const;
    void SetPpath(GCPathTrack value);
    float GetLength() const;
    void SetLength(float value);
    Vector GetPosPrev() const;
    void SetPosPrev(Vector value);
    QAngle GetPrev() const;
    void SetPrev(QAngle value);
    Vector GetControlMins() const;
    void SetControlMins(Vector value);
    Vector GetControlMaxs() const;
    void SetControlMaxs(Vector value);
    Vector GetLastBlockPos() const;
    void SetLastBlockPos(Vector value);
    int32_t GetLastBlockTick() const;
    void SetLastBlockTick(int32_t value);
    float GetVolume() const;
    void SetVolume(float value);
    float GetBank() const;
    void SetBank(float value);
    float GetOldSpeed() const;
    void SetOldSpeed(float value);
    float GetBlockDamage() const;
    void SetBlockDamage(float value);
    float GetHeight() const;
    void SetHeight(float value);
    float GetMaxSpeed() const;
    void SetMaxSpeed(float value);
    float GetDir() const;
    void SetDir(float value);
    std::string GetSoundMove() const;
    void SetSoundMove(std::string value);
    std::string GetSoundMovePing() const;
    void SetSoundMovePing(std::string value);
    std::string GetSoundStart() const;
    void SetSoundStart(std::string value);
    std::string GetSoundStop() const;
    void SetSoundStop(std::string value);
    std::string GetStrPathTarget() const;
    void SetStrPathTarget(std::string value);
    float GetMoveSoundMinDuration() const;
    void SetMoveSoundMinDuration(float value);
    float GetMoveSoundMaxDuration() const;
    void SetMoveSoundMaxDuration(float value);
    float GetNextMoveSoundTime() const;
    void SetNextMoveSoundTime(float value);
    float GetMoveSoundMinPitch() const;
    void SetMoveSoundMinPitch(float value);
    float GetMoveSoundMaxPitch() const;
    void SetMoveSoundMaxPitch(float value);
    uint64_t GetOrientationType() const;
    void SetOrientationType(uint64_t value);
    uint64_t GetVelocityType() const;
    void SetVelocityType(uint64_t value);
    GCEntityIOOutput GetOnStart() const;
    void SetOnStart(GCEntityIOOutput value);
    GCEntityIOOutput GetOnNext() const;
    void SetOnNext(GCEntityIOOutput value);
    GCEntityIOOutput GetOnArrivedAtDestinationNode() const;
    void SetOnArrivedAtDestinationNode(GCEntityIOOutput value);
    bool GetManualSpeedChanges() const;
    void SetManualSpeedChanges(bool value);
    float GetDesiredSpeed() const;
    void SetDesiredSpeed(float value);
    float GetSpeedChangeTime() const;
    void SetSpeedChangeTime(float value);
    float GetAccelSpeed() const;
    void SetAccelSpeed(float value);
    float GetDecelSpeed() const;
    void SetDecelSpeed(float value);
    bool GetAccelToSpeed() const;
    void SetAccelToSpeed(bool value);
    float GetNextMPSoundTime() const;
    void SetNextMPSoundTime(float value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFogVolume
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFogVolume(std::string ptr, lua_State* state);
    GCFogVolume(void *ptr);

    std::string GetFogName() const;
    void SetFogName(std::string value);
    std::string GetPostProcessName() const;
    void SetPostProcessName(std::string value);
    std::string GetColorCorrectionName() const;
    void SetColorCorrectionName(std::string value);
    bool GetDisabled() const;
    void SetDisabled(bool value);
    bool GetInFogVolumesList() const;
    void SetInFogVolumesList(bool value);
    GCServerOnlyModelEntity GetParent() const;
    void SetParent(GCServerOnlyModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCInfoPlayerCounterterrorist
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCInfoPlayerCounterterrorist(std::string ptr, lua_State* state);
    GCInfoPlayerCounterterrorist(void *ptr);

    GSpawnPoint GetParent() const;
    void SetParent(GSpawnPoint value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFire
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFire(std::string ptr, lua_State* state);
    GCFire(void *ptr);

    GCBaseFire GetEffect() const;
    void SetEffect(GCBaseFire value);
    GCBaseEntity GetOwner() const;
    void SetOwner(GCBaseEntity value);
    int32_t GetFireType() const;
    void SetFireType(int32_t value);
    float GetFuel() const;
    void SetFuel(float value);
    float GetDamageTime() const;
    void SetDamageTime(float value);
    float GetLastDamage() const;
    void SetLastDamage(float value);
    float GetFireSize() const;
    void SetFireSize(float value);
    float GetLastNavUpdateTime() const;
    void SetLastNavUpdateTime(float value);
    float GetHeatLevel() const;
    void SetHeatLevel(float value);
    float GetHeatAbsorb() const;
    void SetHeatAbsorb(float value);
    float GetDamageScale() const;
    void SetDamageScale(float value);
    float GetMaxHeat() const;
    void SetMaxHeat(float value);
    float GetLastHeatLevel() const;
    void SetLastHeatLevel(float value);
    float GetAttackTime() const;
    void SetAttackTime(float value);
    bool GetEnabled() const;
    void SetEnabled(bool value);
    bool GetStartDisabled() const;
    void SetStartDisabled(bool value);
    bool GetDidActivate() const;
    void SetDidActivate(bool value);
    GCEntityIOOutput GetOnIgnited() const;
    void SetOnIgnited(GCEntityIOOutput value);
    GCEntityIOOutput GetOnExtinguished() const;
    void SetOnExtinguished(GCEntityIOOutput value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GISkeletonAnimationController
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GISkeletonAnimationController(std::string ptr, lua_State* state);
    GISkeletonAnimationController(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSServerPointScriptEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSServerPointScriptEntity(std::string ptr, lua_State* state);
    GCCSServerPointScriptEntity(void *ptr);

    GCCSPointScriptEntity GetParent() const;
    void SetParent(GCCSPointScriptEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWeaponBizon
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWeaponBizon(std::string ptr, lua_State* state);
    GCWeaponBizon(void *ptr);

    GCCSWeaponBaseGun GetParent() const;
    void SetParent(GCCSWeaponBaseGun value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFuncPlatRot
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFuncPlatRot(std::string ptr, lua_State* state);
    GCFuncPlatRot(void *ptr);

    QAngle GetEnd() const;
    void SetEnd(QAngle value);
    QAngle GetStart() const;
    void SetStart(QAngle value);
    GCFuncPlat GetParent() const;
    void SetParent(GCFuncPlat value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCGenericConstraint
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCGenericConstraint(std::string ptr, lua_State* state);
    GCGenericConstraint(void *ptr);

    uint64_t GetLinearMotionX() const;
    void SetLinearMotionX(uint64_t value);
    uint64_t GetLinearMotionY() const;
    void SetLinearMotionY(uint64_t value);
    uint64_t GetLinearMotionZ() const;
    void SetLinearMotionZ(uint64_t value);
    float GetLinearFrequencyX() const;
    void SetLinearFrequencyX(float value);
    float GetLinearFrequencyY() const;
    void SetLinearFrequencyY(float value);
    float GetLinearFrequencyZ() const;
    void SetLinearFrequencyZ(float value);
    float GetLinearDampingRatioX() const;
    void SetLinearDampingRatioX(float value);
    float GetLinearDampingRatioY() const;
    void SetLinearDampingRatioY(float value);
    float GetLinearDampingRatioZ() const;
    void SetLinearDampingRatioZ(float value);
    float GetMaxLinearImpulseX() const;
    void SetMaxLinearImpulseX(float value);
    float GetMaxLinearImpulseY() const;
    void SetMaxLinearImpulseY(float value);
    float GetMaxLinearImpulseZ() const;
    void SetMaxLinearImpulseZ(float value);
    float GetBreakAfterTimeX() const;
    void SetBreakAfterTimeX(float value);
    float GetBreakAfterTimeY() const;
    void SetBreakAfterTimeY(float value);
    float GetBreakAfterTimeZ() const;
    void SetBreakAfterTimeZ(float value);
    float GetBreakAfterTimeStartTimeX() const;
    void SetBreakAfterTimeStartTimeX(float value);
    float GetBreakAfterTimeStartTimeY() const;
    void SetBreakAfterTimeStartTimeY(float value);
    float GetBreakAfterTimeStartTimeZ() const;
    void SetBreakAfterTimeStartTimeZ(float value);
    float GetBreakAfterTimeThresholdX() const;
    void SetBreakAfterTimeThresholdX(float value);
    float GetBreakAfterTimeThresholdY() const;
    void SetBreakAfterTimeThresholdY(float value);
    float GetBreakAfterTimeThresholdZ() const;
    void SetBreakAfterTimeThresholdZ(float value);
    float GetNotifyForceX() const;
    void SetNotifyForceX(float value);
    float GetNotifyForceY() const;
    void SetNotifyForceY(float value);
    float GetNotifyForceZ() const;
    void SetNotifyForceZ(float value);
    float GetNotifyForceMinTimeX() const;
    void SetNotifyForceMinTimeX(float value);
    float GetNotifyForceMinTimeY() const;
    void SetNotifyForceMinTimeY(float value);
    float GetNotifyForceMinTimeZ() const;
    void SetNotifyForceMinTimeZ(float value);
    float GetNotifyForceLastTimeX() const;
    void SetNotifyForceLastTimeX(float value);
    float GetNotifyForceLastTimeY() const;
    void SetNotifyForceLastTimeY(float value);
    float GetNotifyForceLastTimeZ() const;
    void SetNotifyForceLastTimeZ(float value);
    bool GetAxisNotifiedX() const;
    void SetAxisNotifiedX(bool value);
    bool GetAxisNotifiedY() const;
    void SetAxisNotifiedY(bool value);
    bool GetAxisNotifiedZ() const;
    void SetAxisNotifiedZ(bool value);
    uint64_t GetAngularMotionX() const;
    void SetAngularMotionX(uint64_t value);
    uint64_t GetAngularMotionY() const;
    void SetAngularMotionY(uint64_t value);
    uint64_t GetAngularMotionZ() const;
    void SetAngularMotionZ(uint64_t value);
    float GetAngularFrequencyX() const;
    void SetAngularFrequencyX(float value);
    float GetAngularFrequencyY() const;
    void SetAngularFrequencyY(float value);
    float GetAngularFrequencyZ() const;
    void SetAngularFrequencyZ(float value);
    float GetAngularDampingRatioX() const;
    void SetAngularDampingRatioX(float value);
    float GetAngularDampingRatioY() const;
    void SetAngularDampingRatioY(float value);
    float GetAngularDampingRatioZ() const;
    void SetAngularDampingRatioZ(float value);
    float GetMaxAngularImpulseX() const;
    void SetMaxAngularImpulseX(float value);
    float GetMaxAngularImpulseY() const;
    void SetMaxAngularImpulseY(float value);
    float GetMaxAngularImpulseZ() const;
    void SetMaxAngularImpulseZ(float value);
    GCEntityIOOutput GetNotifyForceReachedX() const;
    void SetNotifyForceReachedX(GCEntityIOOutput value);
    GCEntityIOOutput GetNotifyForceReachedY() const;
    void SetNotifyForceReachedY(GCEntityIOOutput value);
    GCEntityIOOutput GetNotifyForceReachedZ() const;
    void SetNotifyForceReachedZ(GCEntityIOOutput value);
    GCPhysConstraint GetParent() const;
    void SetParent(GCPhysConstraint value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCDecoyGrenade
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCDecoyGrenade(std::string ptr, lua_State* state);
    GCDecoyGrenade(void *ptr);

    GCBaseCSGrenade GetParent() const;
    void SetParent(GCBaseCSGrenade value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWeaponG3SG1
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWeaponG3SG1(std::string ptr, lua_State* state);
    GCWeaponG3SG1(void *ptr);

    GCCSWeaponBaseGun GetParent() const;
    void SetParent(GCCSWeaponBaseGun value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCItemDefuser
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCItemDefuser(std::string ptr, lua_State* state);
    GCItemDefuser(void *ptr);

    GEntitySpottedState_t GetEntitySpottedState() const;
    void SetEntitySpottedState(GEntitySpottedState_t value);
    int32_t GetSpotRules() const;
    void SetSpotRules(int32_t value);
    GCItem GetParent() const;
    void SetParent(GCItem value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCConstantForceController
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCConstantForceController(std::string ptr, lua_State* state);
    GCConstantForceController(void *ptr);

    Vector GetLinear() const;
    void SetLinear(Vector value);
    Vector GetAngular() const;
    void SetAngular(Vector value);
    Vector GetLinearSave() const;
    void SetLinearSave(Vector value);
    Vector GetAngularSave() const;
    void SetAngularSave(Vector value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCDEagle
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCDEagle(std::string ptr, lua_State* state);
    GCDEagle(void *ptr);

    GCCSWeaponBaseGun GetParent() const;
    void SetParent(GCCSWeaponBaseGun value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCRagdollProp
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCRagdollProp(std::string ptr, lua_State* state);
    GCRagdollProp(void *ptr);

    Gragdoll_t GetRagdoll() const;
    void SetRagdoll(Gragdoll_t value);
    bool GetStartDisabled() const;
    void SetStartDisabled(bool value);
    std::vector<Vector> GetRagPos() const;
    void SetRagPos(std::vector<Vector> value);
    std::vector<QAngle> GetRagAngles() const;
    void SetRagAngles(std::vector<QAngle> value);
    GCBaseEntity GetRagdollSource() const;
    void SetRagdollSource(GCBaseEntity value);
    uint32_t GetLastUpdateTickCount() const;
    void SetLastUpdateTickCount(uint32_t value);
    bool GetAllAsleep() const;
    void SetAllAsleep(bool value);
    bool GetFirstCollisionAfterLaunch() const;
    void SetFirstCollisionAfterLaunch(bool value);
    GCBaseEntity GetDamageEntity() const;
    void SetDamageEntity(GCBaseEntity value);
    GCBaseEntity GetKiller() const;
    void SetKiller(GCBaseEntity value);
    GCBasePlayerPawn GetPhysicsAttacker() const;
    void SetPhysicsAttacker(GCBasePlayerPawn value);
    float GetLastPhysicsInfluenceTime() const;
    void SetLastPhysicsInfluenceTime(float value);
    float GetFadeOutStartTime() const;
    void SetFadeOutStartTime(float value);
    float GetFadeTime() const;
    void SetFadeTime(float value);
    Vector GetLastOrigin() const;
    void SetLastOrigin(Vector value);
    float GetAwakeTime() const;
    void SetAwakeTime(float value);
    float GetLastOriginChangeTime() const;
    void SetLastOriginChangeTime(float value);
    std::string GetStrOriginClassName() const;
    void SetStrOriginClassName(std::string value);
    std::string GetStrSourceClassName() const;
    void SetStrSourceClassName(std::string value);
    bool GetHasBeenPhysgunned() const;
    void SetHasBeenPhysgunned(bool value);
    bool GetShouldTeleportPhysics() const;
    void SetShouldTeleportPhysics(bool value);
    float GetBlendWeight() const;
    void SetBlendWeight(float value);
    float GetDefaultFadeScale() const;
    void SetDefaultFadeScale(float value);
    std::vector<Vector> GetRagdollMins() const;
    void SetRagdollMins(std::vector<Vector> value);
    std::vector<Vector> GetRagdollMaxs() const;
    void SetRagdollMaxs(std::vector<Vector> value);
    bool GetShouldDeleteActivationRecord() const;
    void SetShouldDeleteActivationRecord(bool value);
    bool GetValidatePoweredRagdollPose() const;
    void SetValidatePoweredRagdollPose(bool value);
    GCBaseAnimGraph GetParent() const;
    void SetParent(GCBaseAnimGraph value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCItemSoda
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCItemSoda(std::string ptr, lua_State* state);
    GCItemSoda(void *ptr);

    GCBaseAnimGraph GetParent() const;
    void SetParent(GCBaseAnimGraph value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvCubemap
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvCubemap(std::string ptr, lua_State* state);
    GCEnvCubemap(void *ptr);

    bool GetEntity_bCustomCubemapTexture() const;
    void SetEntity_bCustomCubemapTexture(bool value);
    float GetEntity_flInfluenceRadius() const;
    void SetEntity_flInfluenceRadius(float value);
    Vector GetEntity_vBoxProjectMins() const;
    void SetEntity_vBoxProjectMins(Vector value);
    Vector GetEntity_vBoxProjectMaxs() const;
    void SetEntity_vBoxProjectMaxs(Vector value);
    bool GetEntity_bMoveable() const;
    void SetEntity_bMoveable(bool value);
    int32_t GetEntity_nHandshake() const;
    void SetEntity_nHandshake(int32_t value);
    int32_t GetEntity_nEnvCubeMapArrayIndex() const;
    void SetEntity_nEnvCubeMapArrayIndex(int32_t value);
    int32_t GetEntity_nPriority() const;
    void SetEntity_nPriority(int32_t value);
    float GetEntity_flEdgeFadeDist() const;
    void SetEntity_flEdgeFadeDist(float value);
    Vector GetEntity_vEdgeFadeDists() const;
    void SetEntity_vEdgeFadeDists(Vector value);
    float GetEntity_flDiffuseScale() const;
    void SetEntity_flDiffuseScale(float value);
    bool GetEntity_bStartDisabled() const;
    void SetEntity_bStartDisabled(bool value);
    bool GetEntity_bDefaultEnvMap() const;
    void SetEntity_bDefaultEnvMap(bool value);
    bool GetEntity_bDefaultSpecEnvMap() const;
    void SetEntity_bDefaultSpecEnvMap(bool value);
    bool GetEntity_bIndoorCubeMap() const;
    void SetEntity_bIndoorCubeMap(bool value);
    bool GetEntity_bCopyDiffuseFromDefaultCubemap() const;
    void SetEntity_bCopyDiffuseFromDefaultCubemap(bool value);
    bool GetEntity_bEnabled() const;
    void SetEntity_bEnabled(bool value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBasePlayerControllerAPI
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBasePlayerControllerAPI(std::string ptr, lua_State* state);
    GCBasePlayerControllerAPI(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSPointScriptExtensions_CCSWeaponBaseVData
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSPointScriptExtensions_CCSWeaponBaseVData(std::string ptr, lua_State* state);
    GCCSPointScriptExtensions_CCSWeaponBaseVData(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvDetailController
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvDetailController(std::string ptr, lua_State* state);
    GCEnvDetailController(void *ptr);

    float GetFadeStartDist() const;
    void SetFadeStartDist(float value);
    float GetFadeEndDist() const;
    void SetFadeEndDist(float value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTriggerOnce
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTriggerOnce(std::string ptr, lua_State* state);
    GCTriggerOnce(void *ptr);

    GCTriggerMultiple GetParent() const;
    void SetParent(GCTriggerMultiple value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCInfoTeleportDestination
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCInfoTeleportDestination(std::string ptr, lua_State* state);
    GCInfoTeleportDestination(void *ptr);

    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMathRemap
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMathRemap(std::string ptr, lua_State* state);
    GCMathRemap(void *ptr);

    float GetInMin() const;
    void SetInMin(float value);
    float GetInMax() const;
    void SetInMax(float value);
    float GetOut1() const;
    void SetOut1(float value);
    float GetOut2() const;
    void SetOut2(float value);
    float GetOldInValue() const;
    void SetOldInValue(float value);
    bool GetEnabled() const;
    void SetEnabled(bool value);
    GCEntityIOOutput GetOnRoseAboveMin() const;
    void SetOnRoseAboveMin(GCEntityIOOutput value);
    GCEntityIOOutput GetOnRoseAboveMax() const;
    void SetOnRoseAboveMax(GCEntityIOOutput value);
    GCEntityIOOutput GetOnFellBelowMin() const;
    void SetOnFellBelowMin(GCEntityIOOutput value);
    GCEntityIOOutput GetOnFellBelowMax() const;
    void SetOnFellBelowMax(GCEntityIOOutput value);
    GCLogicalEntity GetParent() const;
    void SetParent(GCLogicalEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCInstructorEventEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCInstructorEventEntity(std::string ptr, lua_State* state);
    GCInstructorEventEntity(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    std::string GetHintTargetEntity() const;
    void SetHintTargetEntity(std::string value);
    GCBasePlayerPawn GetTargetPlayer() const;
    void SetTargetPlayer(GCBasePlayerPawn value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCGradientFog
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCGradientFog(std::string ptr, lua_State* state);
    GCGradientFog(void *ptr);

    float GetFogStartDistance() const;
    void SetFogStartDistance(float value);
    float GetFogEndDistance() const;
    void SetFogEndDistance(float value);
    bool GetHeightFogEnabled() const;
    void SetHeightFogEnabled(bool value);
    float GetFogStartHeight() const;
    void SetFogStartHeight(float value);
    float GetFogEndHeight() const;
    void SetFogEndHeight(float value);
    float GetFarZ() const;
    void SetFarZ(float value);
    float GetFogMaxOpacity() const;
    void SetFogMaxOpacity(float value);
    float GetFogFalloffExponent() const;
    void SetFogFalloffExponent(float value);
    float GetFogVerticalExponent() const;
    void SetFogVerticalExponent(float value);
    Color GetFogColor() const;
    void SetFogColor(Color value);
    float GetFogStrength() const;
    void SetFogStrength(float value);
    float GetFadeTime() const;
    void SetFadeTime(float value);
    bool GetStartDisabled() const;
    void SetStartDisabled(bool value);
    bool GetIsEnabled() const;
    void SetIsEnabled(bool value);
    bool GetGradientFogNeedsTextures() const;
    void SetGradientFogNeedsTextures(bool value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFootstepControl
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFootstepControl(std::string ptr, lua_State* state);
    GCFootstepControl(void *ptr);

    std::string GetSource() const;
    void SetSource(std::string value);
    std::string GetDestination() const;
    void SetDestination(std::string value);
    GCBaseTrigger GetParent() const;
    void SetParent(GCBaseTrigger value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTriggerVolume
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTriggerVolume(std::string ptr, lua_State* state);
    GCTriggerVolume(void *ptr);

    std::string GetFilterName() const;
    void SetFilterName(std::string value);
    GCBaseFilter GetFilter() const;
    void SetFilter(GCBaseFilter value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCInfoInstructorHintHostageRescueZone
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCInfoInstructorHintHostageRescueZone(std::string ptr, lua_State* state);
    GCInfoInstructorHintHostageRescueZone(void *ptr);

    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvSoundscapeAlias_snd_soundscape
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvSoundscapeAlias_snd_soundscape(std::string ptr, lua_State* state);
    GCEnvSoundscapeAlias_snd_soundscape(void *ptr);

    GCEnvSoundscape GetParent() const;
    void SetParent(GCEnvSoundscape value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFishPool
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFishPool(std::string ptr, lua_State* state);
    GCFishPool(void *ptr);

    int32_t GetFishCount() const;
    void SetFishCount(int32_t value);
    float GetMaxRange() const;
    void SetMaxRange(float value);
    float GetSwimDepth() const;
    void SetSwimDepth(float value);
    float GetWaterLevel() const;
    void SetWaterLevel(float value);
    bool GetIsDormant() const;
    void SetIsDormant(bool value);
    GCountdownTimer GetVisTimer() const;
    void SetVisTimer(GCountdownTimer value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPointClientCommand
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPointClientCommand(std::string ptr, lua_State* state);
    GCPointClientCommand(void *ptr);

    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFuncVPhysicsClip
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFuncVPhysicsClip(std::string ptr, lua_State* state);
    GCFuncVPhysicsClip(void *ptr);

    bool GetDisabled() const;
    void SetDisabled(bool value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSPlayer_RadioServices
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSPlayer_RadioServices(std::string ptr, lua_State* state);
    GCCSPlayer_RadioServices(void *ptr);

    float GetGotHostageTalkTimer() const;
    void SetGotHostageTalkTimer(float value);
    float GetDefusingTalkTimer() const;
    void SetDefusingTalkTimer(float value);
    float GetC4PlantTalkTimer() const;
    void SetC4PlantTalkTimer(float value);
    std::vector<float> GetRadioTokenSlots() const;
    void SetRadioTokenSlots(std::vector<float> value);
    bool GetIgnoreRadio() const;
    void SetIgnoreRadio(bool value);
    GCPlayerPawnComponent GetParent() const;
    void SetParent(GCPlayerPawnComponent value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSceneEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSceneEntity(std::string ptr, lua_State* state);
    GCSceneEntity(void *ptr);

    std::string GetSceneFile() const;
    void SetSceneFile(std::string value);
    std::string GetResumeSceneFile() const;
    void SetResumeSceneFile(std::string value);
    std::string GetTarget1() const;
    void SetTarget1(std::string value);
    std::string GetTarget2() const;
    void SetTarget2(std::string value);
    std::string GetTarget3() const;
    void SetTarget3(std::string value);
    std::string GetTarget4() const;
    void SetTarget4(std::string value);
    std::string GetTarget5() const;
    void SetTarget5(std::string value);
    std::string GetTarget6() const;
    void SetTarget6(std::string value);
    std::string GetTarget7() const;
    void SetTarget7(std::string value);
    std::string GetTarget8() const;
    void SetTarget8(std::string value);
    GCBaseEntity GetTarget11() const;
    void SetTarget11(GCBaseEntity value);
    GCBaseEntity GetTarget21() const;
    void SetTarget21(GCBaseEntity value);
    GCBaseEntity GetTarget31() const;
    void SetTarget31(GCBaseEntity value);
    GCBaseEntity GetTarget41() const;
    void SetTarget41(GCBaseEntity value);
    GCBaseEntity GetTarget51() const;
    void SetTarget51(GCBaseEntity value);
    GCBaseEntity GetTarget61() const;
    void SetTarget61(GCBaseEntity value);
    GCBaseEntity GetTarget71() const;
    void SetTarget71(GCBaseEntity value);
    GCBaseEntity GetTarget81() const;
    void SetTarget81(GCBaseEntity value);
    std::string GetTargetAttachment() const;
    void SetTargetAttachment(std::string value);
    bool GetIsPlayingBack() const;
    void SetIsPlayingBack(bool value);
    bool GetPaused() const;
    void SetPaused(bool value);
    bool GetMultiplayer() const;
    void SetMultiplayer(bool value);
    bool GetAutogenerated() const;
    void SetAutogenerated(bool value);
    float GetForceClientTime() const;
    void SetForceClientTime(float value);
    float GetCurrentTime() const;
    void SetCurrentTime(float value);
    float GetFrameTime() const;
    void SetFrameTime(float value);
    bool GetCancelAtNextInterrupt() const;
    void SetCancelAtNextInterrupt(bool value);
    float GetPitch() const;
    void SetPitch(float value);
    bool GetAutomated() const;
    void SetAutomated(bool value);
    int32_t GetAutomatedAction() const;
    void SetAutomatedAction(int32_t value);
    float GetAutomationDelay() const;
    void SetAutomationDelay(float value);
    float GetAutomationTime() const;
    void SetAutomationTime(float value);
    GCBaseEntity GetWaitingForThisResumeScene() const;
    void SetWaitingForThisResumeScene(GCBaseEntity value);
    bool GetWaitingForResumeScene() const;
    void SetWaitingForResumeScene(bool value);
    bool GetPausedViaInput() const;
    void SetPausedViaInput(bool value);
    bool GetPauseAtNextInterrupt() const;
    void SetPauseAtNextInterrupt(bool value);
    bool GetWaitingForActor() const;
    void SetWaitingForActor(bool value);
    bool GetWaitingForInterrupt() const;
    void SetWaitingForInterrupt(bool value);
    bool GetInterruptedActorsScenes() const;
    void SetInterruptedActorsScenes(bool value);
    bool GetBreakOnNonIdle() const;
    void SetBreakOnNonIdle(bool value);
    bool GetSceneFinished() const;
    void SetSceneFinished(bool value);
    std::vector<GCBaseFlex> GetActorList() const;
    void SetActorList(std::vector<GCBaseFlex> value);
    int32_t GetSceneFlushCounter() const;
    void SetSceneFlushCounter(int32_t value);
    uint16_t GetSceneStringIndex() const;
    void SetSceneStringIndex(uint16_t value);
    GCEntityIOOutput GetOnStart() const;
    void SetOnStart(GCEntityIOOutput value);
    GCEntityIOOutput GetOnCompletion() const;
    void SetOnCompletion(GCEntityIOOutput value);
    GCEntityIOOutput GetOnCanceled() const;
    void SetOnCanceled(GCEntityIOOutput value);
    GCEntityIOOutput GetOnPaused() const;
    void SetOnPaused(GCEntityIOOutput value);
    GCEntityIOOutput GetOnResumed() const;
    void SetOnResumed(GCEntityIOOutput value);
    std::vector<GCEntityIOOutput> GetOnTrigger() const;
    void SetOnTrigger(std::vector<GCEntityIOOutput> value);
    GCSceneEntity GetInterruptScene() const;
    void SetInterruptScene(GCSceneEntity value);
    int32_t GetInterruptCount() const;
    void SetInterruptCount(int32_t value);
    bool GetSceneMissing() const;
    void SetSceneMissing(bool value);
    bool GetInterrupted() const;
    void SetInterrupted(bool value);
    bool GetCompletedEarly() const;
    void SetCompletedEarly(bool value);
    bool GetInterruptSceneFinished() const;
    void SetInterruptSceneFinished(bool value);
    bool GetRestoring() const;
    void SetRestoring(bool value);
    std::string GetSoundName() const;
    void SetSoundName(std::string value);
    std::string GetSequenceName() const;
    void SetSequenceName(std::string value);
    GCBaseFlex GetActor() const;
    void SetActor(GCBaseFlex value);
    GCBaseEntity GetActivator() const;
    void SetActivator(GCBaseEntity value);
    int32_t GetBusyActor() const;
    void SetBusyActor(int32_t value);
    uint64_t GetPlayerDeathBehavior() const;
    void SetPlayerDeathBehavior(uint64_t value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvHudHint
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvHudHint(std::string ptr, lua_State* state);
    GCEnvHudHint(void *ptr);

    std::string GetMessage() const;
    void SetMessage(std::string value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCParticleSystem
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCParticleSystem(std::string ptr, lua_State* state);
    GCParticleSystem(void *ptr);

    std::string GetSnapshotFileName() const;
    void SetSnapshotFileName(std::string value);
    bool GetActive() const;
    void SetActive(bool value);
    bool GetFrozen() const;
    void SetFrozen(bool value);
    float GetFreezeTransitionDuration() const;
    void SetFreezeTransitionDuration(float value);
    int32_t GetStopType() const;
    void SetStopType(int32_t value);
    bool GetAnimateDuringGameplayPause() const;
    void SetAnimateDuringGameplayPause(bool value);
    float GetStartTime() const;
    void SetStartTime(float value);
    float GetPreSimTime() const;
    void SetPreSimTime(float value);
    std::vector<Vector> GetServerControlPoints() const;
    void SetServerControlPoints(std::vector<Vector> value);
    std::vector<uint32_t> GetServerControlPointAssignments() const;
    void SetServerControlPointAssignments(std::vector<uint32_t> value);
    std::vector<GCBaseEntity> GetControlPointEnts() const;
    void SetControlPointEnts(std::vector<GCBaseEntity> value);
    bool GetNoSave() const;
    void SetNoSave(bool value);
    bool GetNoFreeze() const;
    void SetNoFreeze(bool value);
    bool GetNoRamp() const;
    void SetNoRamp(bool value);
    bool GetStartActive() const;
    void SetStartActive(bool value);
    std::string GetEffectName() const;
    void SetEffectName(std::string value);
    std::vector<CUtlSymbolLarge> GetControlPointNames() const;
    void SetControlPointNames(std::vector<CUtlSymbolLarge> value);
    int32_t GetDataCP() const;
    void SetDataCP(int32_t value);
    Vector GetDataCPValue() const;
    void SetDataCPValue(Vector value);
    int32_t GetTintCP() const;
    void SetTintCP(int32_t value);
    Color GetTint() const;
    void SetTint(Color value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GAmmoIndex_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GAmmoIndex_t(std::string ptr, lua_State* state);
    GAmmoIndex_t(void *ptr);

    int32_t GetValue() const;
    void SetValue(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class Gsky3dparams_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    Gsky3dparams_t(std::string ptr, lua_State* state);
    Gsky3dparams_t(void *ptr);

    int16_t GetScale() const;
    void SetScale(int16_t value);
    Vector GetOrigin() const;
    void SetOrigin(Vector value);
    bool GetClip3DSkyBoxNearToWorldFar() const;
    void SetClip3DSkyBoxNearToWorldFar(bool value);
    float GetClip3DSkyBoxNearToWorldFarOffset() const;
    void SetClip3DSkyBoxNearToWorldFarOffset(float value);
    Gfogparams_t GetFog() const;
    void SetFog(Gfogparams_t value);
    uint32_t GetWorldGroupID() const;
    void SetWorldGroupID(uint32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCScriptItem
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCScriptItem(std::string ptr, lua_State* state);
    GCScriptItem(void *ptr);

    uint64_t GetMoveTypeOverride() const;
    void SetMoveTypeOverride(uint64_t value);
    GCItem GetParent() const;
    void SetParent(GCItem value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GIntervalTimer
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GIntervalTimer(std::string ptr, lua_State* state);
    GIntervalTimer(void *ptr);

    float GetTimestamp() const;
    void SetTimestamp(float value);
    uint32_t GetWorldGroupId() const;
    void SetWorldGroupId(uint32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWeaponSG556
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWeaponSG556(std::string ptr, lua_State* state);
    GCWeaponSG556(void *ptr);

    GCCSWeaponBaseGun GetParent() const;
    void SetParent(GCCSWeaponBaseGun value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class Gdynpitchvol_base_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    Gdynpitchvol_base_t(std::string ptr, lua_State* state);
    Gdynpitchvol_base_t(void *ptr);

    int32_t GetPreset() const;
    void SetPreset(int32_t value);
    int32_t GetPitchrun() const;
    void SetPitchrun(int32_t value);
    int32_t GetPitchstart() const;
    void SetPitchstart(int32_t value);
    int32_t GetSpinup() const;
    void SetSpinup(int32_t value);
    int32_t GetSpindown() const;
    void SetSpindown(int32_t value);
    int32_t GetVolrun() const;
    void SetVolrun(int32_t value);
    int32_t GetVolstart() const;
    void SetVolstart(int32_t value);
    int32_t GetFadein() const;
    void SetFadein(int32_t value);
    int32_t GetFadeout() const;
    void SetFadeout(int32_t value);
    int32_t GetLfotype() const;
    void SetLfotype(int32_t value);
    int32_t GetLforate() const;
    void SetLforate(int32_t value);
    int32_t GetLfomodpitch() const;
    void SetLfomodpitch(int32_t value);
    int32_t GetLfomodvol() const;
    void SetLfomodvol(int32_t value);
    int32_t GetCspinup() const;
    void SetCspinup(int32_t value);
    int32_t GetCspincount() const;
    void SetCspincount(int32_t value);
    int32_t GetPitch() const;
    void SetPitch(int32_t value);
    int32_t GetSpinupsav() const;
    void SetSpinupsav(int32_t value);
    int32_t GetSpindownsav() const;
    void SetSpindownsav(int32_t value);
    int32_t GetPitchfrac() const;
    void SetPitchfrac(int32_t value);
    int32_t GetVol() const;
    void SetVol(int32_t value);
    int32_t GetFadeinsav() const;
    void SetFadeinsav(int32_t value);
    int32_t GetFadeoutsav() const;
    void SetFadeoutsav(int32_t value);
    int32_t GetVolfrac() const;
    void SetVolfrac(int32_t value);
    int32_t GetLfofrac() const;
    void SetLfofrac(int32_t value);
    int32_t GetLfomult() const;
    void SetLfomult(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCDynamicLight
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCDynamicLight(std::string ptr, lua_State* state);
    GCDynamicLight(void *ptr);

    uint32_t GetActualFlags() const;
    void SetActualFlags(uint32_t value);
    uint32_t GetFlags() const;
    void SetFlags(uint32_t value);
    uint32_t GetLightStyle() const;
    void SetLightStyle(uint32_t value);
    bool GetOn() const;
    void SetOn(bool value);
    float GetRadius() const;
    void SetRadius(float value);
    int32_t GetExponent() const;
    void SetExponent(int32_t value);
    float GetInnerAngle() const;
    void SetInnerAngle(float value);
    float GetOuterAngle() const;
    void SetOuterAngle(float value);
    float GetSpotRadius() const;
    void SetSpotRadius(float value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWeaponP90
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWeaponP90(std::string ptr, lua_State* state);
    GCWeaponP90(void *ptr);

    GCCSWeaponBaseGun GetParent() const;
    void SetParent(GCCSWeaponBaseGun value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTriggerToggleSave
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTriggerToggleSave(std::string ptr, lua_State* state);
    GCTriggerToggleSave(void *ptr);

    GCBaseTrigger GetParent() const;
    void SetParent(GCBaseTrigger value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPrecipitation
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPrecipitation(std::string ptr, lua_State* state);
    GCPrecipitation(void *ptr);

    GCBaseTrigger GetParent() const;
    void SetParent(GCBaseTrigger value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPointServerCommand
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPointServerCommand(std::string ptr, lua_State* state);
    GCPointServerCommand(void *ptr);

    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSGO_TeamIntroCharacterPosition
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSGO_TeamIntroCharacterPosition(std::string ptr, lua_State* state);
    GCCSGO_TeamIntroCharacterPosition(void *ptr);

    GCCSGO_TeamPreviewCharacterPosition GetParent() const;
    void SetParent(GCCSGO_TeamPreviewCharacterPosition value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCLogicCollisionPair
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCLogicCollisionPair(std::string ptr, lua_State* state);
    GCLogicCollisionPair(void *ptr);

    std::string GetNameAttach1() const;
    void SetNameAttach1(std::string value);
    std::string GetNameAttach2() const;
    void SetNameAttach2(std::string value);
    bool GetSupportMultipleEntitiesWithSameName() const;
    void SetSupportMultipleEntitiesWithSameName(bool value);
    bool GetDisabled() const;
    void SetDisabled(bool value);
    bool GetSucceeded() const;
    void SetSucceeded(bool value);
    GCLogicalEntity GetParent() const;
    void SetParent(GCLogicalEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSkeletonInstance
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSkeletonInstance(std::string ptr, lua_State* state);
    GCSkeletonInstance(void *ptr);

    GCModelState GetModelState() const;
    void SetModelState(GCModelState value);
    bool GetIsAnimationEnabled() const;
    void SetIsAnimationEnabled(bool value);
    bool GetUseParentRenderBounds() const;
    void SetUseParentRenderBounds(bool value);
    bool GetDisableSolidCollisionsForHierarchy() const;
    void SetDisableSolidCollisionsForHierarchy(bool value);
    uint32_t GetMaterialGroup() const;
    void SetMaterialGroup(uint32_t value);
    uint32_t GetHitboxSet() const;
    void SetHitboxSet(uint32_t value);
    GCGameSceneNode GetParent() const;
    void SetParent(GCGameSceneNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPhysicsProp
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPhysicsProp(std::string ptr, lua_State* state);
    GCPhysicsProp(void *ptr);

    GCEntityIOOutput GetMotionEnabled() const;
    void SetMotionEnabled(GCEntityIOOutput value);
    GCEntityIOOutput GetOnAwakened() const;
    void SetOnAwakened(GCEntityIOOutput value);
    GCEntityIOOutput GetOnAwake() const;
    void SetOnAwake(GCEntityIOOutput value);
    GCEntityIOOutput GetOnAsleep() const;
    void SetOnAsleep(GCEntityIOOutput value);
    GCEntityIOOutput GetOnPlayerUse() const;
    void SetOnPlayerUse(GCEntityIOOutput value);
    GCEntityIOOutput GetOnOutOfWorld() const;
    void SetOnOutOfWorld(GCEntityIOOutput value);
    GCEntityIOOutput GetOnPlayerPickup() const;
    void SetOnPlayerPickup(GCEntityIOOutput value);
    bool GetForceNavIgnore() const;
    void SetForceNavIgnore(bool value);
    bool GetNoNavmeshBlocker() const;
    void SetNoNavmeshBlocker(bool value);
    bool GetForceNpcExclude() const;
    void SetForceNpcExclude(bool value);
    float GetMassScale() const;
    void SetMassScale(float value);
    float GetInertiaScale() const;
    void SetInertiaScale(float value);
    float GetBuoyancyScale() const;
    void SetBuoyancyScale(float value);
    int32_t GetDamageType() const;
    void SetDamageType(int32_t value);
    int32_t GetDamageToEnableMotion() const;
    void SetDamageToEnableMotion(int32_t value);
    float GetForceToEnableMotion() const;
    void SetForceToEnableMotion(float value);
    bool GetThrownByPlayer() const;
    void SetThrownByPlayer(bool value);
    bool GetDroppedByPlayer() const;
    void SetDroppedByPlayer(bool value);
    bool GetTouchedByPlayer() const;
    void SetTouchedByPlayer(bool value);
    bool GetFirstCollisionAfterLaunch() const;
    void SetFirstCollisionAfterLaunch(bool value);
    int32_t GetExploitableByPlayer() const;
    void SetExploitableByPlayer(int32_t value);
    bool GetHasBeenAwakened() const;
    void SetHasBeenAwakened(bool value);
    bool GetIsOverrideProp() const;
    void SetIsOverrideProp(bool value);
    float GetNextCheckDisableMotionContactsTime() const;
    void SetNextCheckDisableMotionContactsTime(float value);
    int32_t GetInitialGlowState() const;
    void SetInitialGlowState(int32_t value);
    int32_t GetGlowRange() const;
    void SetGlowRange(int32_t value);
    int32_t GetGlowRangeMin() const;
    void SetGlowRangeMin(int32_t value);
    Color GetGlowColor() const;
    void SetGlowColor(Color value);
    bool GetShouldAutoConvertBackFromDebris() const;
    void SetShouldAutoConvertBackFromDebris(bool value);
    bool GetMuteImpactEffects() const;
    void SetMuteImpactEffects(bool value);
    bool GetAcceptDamageFromHeldObjects() const;
    void SetAcceptDamageFromHeldObjects(bool value);
    bool GetEnableUseOutput() const;
    void SetEnableUseOutput(bool value);
    bool GetAwake() const;
    void SetAwake(bool value);
    GCBreakableProp GetParent() const;
    void SetParent(GCBreakableProp value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFuncWall
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFuncWall(std::string ptr, lua_State* state);
    GCFuncWall(void *ptr);

    int32_t GetState() const;
    void SetState(int32_t value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCItemDefuserAlias_item_defuser
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCItemDefuserAlias_item_defuser(std::string ptr, lua_State* state);
    GCItemDefuserAlias_item_defuser(void *ptr);

    GCItemDefuser GetParent() const;
    void SetParent(GCItemDefuser value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBaseGrenade
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBaseGrenade(std::string ptr, lua_State* state);
    GCBaseGrenade(void *ptr);

    GCEntityIOOutput GetOnPlayerPickup() const;
    void SetOnPlayerPickup(GCEntityIOOutput value);
    GCEntityIOOutput GetOnExplode() const;
    void SetOnExplode(GCEntityIOOutput value);
    bool GetHasWarnedAI() const;
    void SetHasWarnedAI(bool value);
    bool GetIsSmokeGrenade() const;
    void SetIsSmokeGrenade(bool value);
    bool GetIsLive() const;
    void SetIsLive(bool value);
    float GetDmgRadius() const;
    void SetDmgRadius(float value);
    float GetDetonateTime() const;
    void SetDetonateTime(float value);
    float GetWarnAITime() const;
    void SetWarnAITime(float value);
    float GetDamage() const;
    void SetDamage(float value);
    std::string GetBounceSound() const;
    void SetBounceSound(std::string value);
    std::string GetExplosionSound() const;
    void SetExplosionSound(std::string value);
    GCCSPlayerPawn GetThrower() const;
    void SetThrower(GCCSPlayerPawn value);
    float GetNextAttack() const;
    void SetNextAttack(float value);
    GCCSPlayerPawn GetOriginalThrower() const;
    void SetOriginalThrower(GCCSPlayerPawn value);
    GCBaseFlex GetParent() const;
    void SetParent(GCBaseFlex value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSPlayerBase_CameraServices
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSPlayerBase_CameraServices(std::string ptr, lua_State* state);
    GCCSPlayerBase_CameraServices(void *ptr);

    uint32_t GetFOV() const;
    void SetFOV(uint32_t value);
    uint32_t GetFOVStart() const;
    void SetFOVStart(uint32_t value);
    float GetFOVTime() const;
    void SetFOVTime(float value);
    float GetFOVRate() const;
    void SetFOVRate(float value);
    GCBaseEntity GetZoomOwner() const;
    void SetZoomOwner(GCBaseEntity value);
    GCBaseEntity GetLastFogTrigger() const;
    void SetLastFogTrigger(GCBaseEntity value);
    GCPlayer_CameraServices GetParent() const;
    void SetParent(GCPlayer_CameraServices value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSGO_WingmanIntroCharacterPosition
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSGO_WingmanIntroCharacterPosition(std::string ptr, lua_State* state);
    GCCSGO_WingmanIntroCharacterPosition(void *ptr);

    GCCSGO_TeamIntroCharacterPosition GetParent() const;
    void SetParent(GCCSGO_TeamIntroCharacterPosition value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSMatchStats_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSMatchStats_t(std::string ptr, lua_State* state);
    GCSMatchStats_t(void *ptr);

    int32_t GetEnemy5Ks() const;
    void SetEnemy5Ks(int32_t value);
    int32_t GetEnemy4Ks() const;
    void SetEnemy4Ks(int32_t value);
    int32_t GetEnemy3Ks() const;
    void SetEnemy3Ks(int32_t value);
    int32_t GetEnemyKnifeKills() const;
    void SetEnemyKnifeKills(int32_t value);
    int32_t GetEnemyTaserKills() const;
    void SetEnemyTaserKills(int32_t value);
    int32_t GetEnemy2Ks() const;
    void SetEnemy2Ks(int32_t value);
    int32_t GetUtility_Count() const;
    void SetUtility_Count(int32_t value);
    int32_t GetUtility_Successes() const;
    void SetUtility_Successes(int32_t value);
    int32_t GetUtility_Enemies() const;
    void SetUtility_Enemies(int32_t value);
    int32_t GetFlash_Count() const;
    void SetFlash_Count(int32_t value);
    int32_t GetFlash_Successes() const;
    void SetFlash_Successes(int32_t value);
    int32_t GetHealthPointsRemovedTotal() const;
    void SetHealthPointsRemovedTotal(int32_t value);
    int32_t GetHealthPointsDealtTotal() const;
    void SetHealthPointsDealtTotal(int32_t value);
    int32_t GetShotsFiredTotal() const;
    void SetShotsFiredTotal(int32_t value);
    int32_t GetShotsOnTargetTotal() const;
    void SetShotsOnTargetTotal(int32_t value);
    int32_t Get1v1Count() const;
    void Set1v1Count(int32_t value);
    int32_t Get1v1Wins() const;
    void Set1v1Wins(int32_t value);
    int32_t Get1v2Count() const;
    void Set1v2Count(int32_t value);
    int32_t Get1v2Wins() const;
    void Set1v2Wins(int32_t value);
    int32_t GetEntryCount() const;
    void SetEntryCount(int32_t value);
    int32_t GetEntryWins() const;
    void SetEntryWins(int32_t value);
    GCSPerRoundStats_t GetParent() const;
    void SetParent(GCSPerRoundStats_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFuncLadder
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFuncLadder(std::string ptr, lua_State* state);
    GCFuncLadder(void *ptr);

    Vector GetLadderDir() const;
    void SetLadderDir(Vector value);
    Vector GetLocalTop() const;
    void SetLocalTop(Vector value);
    Vector GetPlayerMountPositionTop() const;
    void SetPlayerMountPositionTop(Vector value);
    Vector GetPlayerMountPositionBottom() const;
    void SetPlayerMountPositionBottom(Vector value);
    float GetAutoRideSpeed() const;
    void SetAutoRideSpeed(float value);
    bool GetDisabled() const;
    void SetDisabled(bool value);
    bool GetFakeLadder() const;
    void SetFakeLadder(bool value);
    bool GetHasSlack() const;
    void SetHasSlack(bool value);
    std::string GetSurfacePropName() const;
    void SetSurfacePropName(std::string value);
    GCEntityIOOutput GetOnPlayerGotOnLadder() const;
    void SetOnPlayerGotOnLadder(GCEntityIOOutput value);
    GCEntityIOOutput GetOnPlayerGotOffLadder() const;
    void SetOnPlayerGotOffLadder(GCEntityIOOutput value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTriggerSndSosOpvar
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTriggerSndSosOpvar(std::string ptr, lua_State* state);
    GCTriggerSndSosOpvar(void *ptr);

    Vector GetPosition() const;
    void SetPosition(Vector value);
    float GetCenterSize() const;
    void SetCenterSize(float value);
    float GetMinVal() const;
    void SetMinVal(float value);
    float GetMaxVal() const;
    void SetMaxVal(float value);
    std::string GetOpvarName() const;
    void SetOpvarName(std::string value);
    std::string GetStackName() const;
    void SetStackName(std::string value);
    std::string GetOperatorName() const;
    void SetOperatorName(std::string value);
    bool GetVolIs2D() const;
    void SetVolIs2D(bool value);
    std::string GetOpvarNameChar() const;
    void SetOpvarNameChar(std::string value);
    std::string GetStackNameChar() const;
    void SetStackNameChar(std::string value);
    std::string GetOperatorNameChar() const;
    void SetOperatorNameChar(std::string value);
    Vector GetVecNormPos() const;
    void SetVecNormPos(Vector value);
    float GetNormCenterSize() const;
    void SetNormCenterSize(float value);
    GCBaseTrigger GetParent() const;
    void SetParent(GCBaseTrigger value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCItemHeavyAssaultSuit
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCItemHeavyAssaultSuit(std::string ptr, lua_State* state);
    GCItemHeavyAssaultSuit(void *ptr);

    GCItemAssaultSuit GetParent() const;
    void SetParent(GCItemAssaultSuit value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCScriptedSequence
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCScriptedSequence(std::string ptr, lua_State* state);
    GCScriptedSequence(void *ptr);

    std::string GetEntry() const;
    void SetEntry(std::string value);
    std::string GetPreIdle() const;
    void SetPreIdle(std::string value);
    std::string GetPlay() const;
    void SetPlay(std::string value);
    std::string GetPostIdle() const;
    void SetPostIdle(std::string value);
    std::string GetModifierToAddOnPlay() const;
    void SetModifierToAddOnPlay(std::string value);
    std::string GetNextScript() const;
    void SetNextScript(std::string value);
    std::string GetEntity() const;
    void SetEntity(std::string value);
    std::string GetSyncGroup() const;
    void SetSyncGroup(std::string value);
    uint64_t GetMoveTo() const;
    void SetMoveTo(uint64_t value);
    uint64_t GetMoveToGait() const;
    void SetMoveToGait(uint64_t value);
    bool GetIsPlayingPreIdle() const;
    void SetIsPlayingPreIdle(bool value);
    bool GetIsPlayingEntry() const;
    void SetIsPlayingEntry(bool value);
    bool GetIsPlayingAction() const;
    void SetIsPlayingAction(bool value);
    bool GetIsPlayingPostIdle() const;
    void SetIsPlayingPostIdle(bool value);
    bool GetDontRotateOther() const;
    void SetDontRotateOther(bool value);
    bool GetIsRepeatable() const;
    void SetIsRepeatable(bool value);
    bool GetShouldLeaveCorpse() const;
    void SetShouldLeaveCorpse(bool value);
    bool GetStartOnSpawn() const;
    void SetStartOnSpawn(bool value);
    bool GetDisallowInterrupts() const;
    void SetDisallowInterrupts(bool value);
    bool GetCanOverrideNPCState() const;
    void SetCanOverrideNPCState(bool value);
    bool GetDontTeleportAtEnd() const;
    void SetDontTeleportAtEnd(bool value);
    bool GetHighPriority() const;
    void SetHighPriority(bool value);
    bool GetHideDebugComplaints() const;
    void SetHideDebugComplaints(bool value);
    bool GetContinueOnDeath() const;
    void SetContinueOnDeath(bool value);
    bool GetLoopPreIdleSequence() const;
    void SetLoopPreIdleSequence(bool value);
    bool GetLoopActionSequence() const;
    void SetLoopActionSequence(bool value);
    bool GetLoopPostIdleSequence() const;
    void SetLoopPostIdleSequence(bool value);
    bool GetSynchPostIdles() const;
    void SetSynchPostIdles(bool value);
    bool GetIgnoreLookAt() const;
    void SetIgnoreLookAt(bool value);
    bool GetIgnoreGravity() const;
    void SetIgnoreGravity(bool value);
    bool GetDisableNPCCollisions() const;
    void SetDisableNPCCollisions(bool value);
    bool GetKeepAnimgraphLockedPost() const;
    void SetKeepAnimgraphLockedPost(bool value);
    bool GetDontAddModifiers() const;
    void SetDontAddModifiers(bool value);
    float GetRadius() const;
    void SetRadius(float value);
    float GetRepeat() const;
    void SetRepeat(float value);
    float GetPlayAnimFadeInTime() const;
    void SetPlayAnimFadeInTime(float value);
    float GetMoveInterpTime() const;
    void SetMoveInterpTime(float value);
    float GetAngRate() const;
    void SetAngRate(float value);
    int32_t GetNotReadySequenceCount() const;
    void SetNotReadySequenceCount(int32_t value);
    float GetStartTime() const;
    void SetStartTime(float value);
    bool GetWaitForBeginSequence() const;
    void SetWaitForBeginSequence(bool value);
    int32_t GetSaved_effects() const;
    void SetSaved_effects(int32_t value);
    int32_t GetSavedFlags() const;
    void SetSavedFlags(int32_t value);
    int32_t GetSavedCollisionGroup() const;
    void SetSavedCollisionGroup(int32_t value);
    bool GetInterruptable() const;
    void SetInterruptable(bool value);
    bool GetSequenceStarted() const;
    void SetSequenceStarted(bool value);
    bool GetPositionRelativeToOtherEntity() const;
    void SetPositionRelativeToOtherEntity(bool value);
    GCBaseEntity GetTargetEnt() const;
    void SetTargetEnt(GCBaseEntity value);
    GCScriptedSequence GetNextCine() const;
    void SetNextCine(GCScriptedSequence value);
    bool GetThinking() const;
    void SetThinking(bool value);
    bool GetInitiatedSelfDelete() const;
    void SetInitiatedSelfDelete(bool value);
    bool GetIsTeleportingDueToMoveTo() const;
    void SetIsTeleportingDueToMoveTo(bool value);
    bool GetAllowCustomInterruptConditions() const;
    void SetAllowCustomInterruptConditions(bool value);
    GCBaseAnimGraph GetForcedTarget() const;
    void SetForcedTarget(GCBaseAnimGraph value);
    bool GetDontCancelOtherSequences() const;
    void SetDontCancelOtherSequences(bool value);
    bool GetForceSynch() const;
    void SetForceSynch(bool value);
    bool GetPreventUpdateYawOnFinish() const;
    void SetPreventUpdateYawOnFinish(bool value);
    bool GetEnsureOnNavmeshOnFinish() const;
    void SetEnsureOnNavmeshOnFinish(bool value);
    uint64_t GetOnDeathBehavior() const;
    void SetOnDeathBehavior(uint64_t value);
    uint64_t GetConflictResponse() const;
    void SetConflictResponse(uint64_t value);
    GCEntityIOOutput GetOnBeginSequence() const;
    void SetOnBeginSequence(GCEntityIOOutput value);
    GCEntityIOOutput GetOnActionStartOrLoop() const;
    void SetOnActionStartOrLoop(GCEntityIOOutput value);
    GCEntityIOOutput GetOnEndSequence() const;
    void SetOnEndSequence(GCEntityIOOutput value);
    GCEntityIOOutput GetOnPostIdleEndSequence() const;
    void SetOnPostIdleEndSequence(GCEntityIOOutput value);
    GCEntityIOOutput GetOnCancelSequence() const;
    void SetOnCancelSequence(GCEntityIOOutput value);
    GCEntityIOOutput GetOnCancelFailedSequence() const;
    void SetOnCancelFailedSequence(GCEntityIOOutput value);
    std::vector<GCEntityIOOutput> GetOnScriptEvent() const;
    void SetOnScriptEvent(std::vector<GCEntityIOOutput> value);
    GCBaseEntity GetInteractionMainEntity() const;
    void SetInteractionMainEntity(GCBaseEntity value);
    int32_t GetPlayerDeathBehavior() const;
    void SetPlayerDeathBehavior(int32_t value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWeaponNegev
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWeaponNegev(std::string ptr, lua_State* state);
    GCWeaponNegev(void *ptr);

    GCCSWeaponBaseGun GetParent() const;
    void SetParent(GCCSWeaponBaseGun value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWeaponGalilAR
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWeaponGalilAR(std::string ptr, lua_State* state);
    GCWeaponGalilAR(void *ptr);

    GCCSWeaponBaseGun GetParent() const;
    void SetParent(GCCSWeaponBaseGun value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvProjectedTexture
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvProjectedTexture(std::string ptr, lua_State* state);
    GCEnvProjectedTexture(void *ptr);

    GCBaseEntity GetTargetEntity() const;
    void SetTargetEntity(GCBaseEntity value);
    bool GetState() const;
    void SetState(bool value);
    bool GetAlwaysUpdate() const;
    void SetAlwaysUpdate(bool value);
    float GetLightFOV() const;
    void SetLightFOV(float value);
    bool GetEnableShadows() const;
    void SetEnableShadows(bool value);
    bool GetSimpleProjection() const;
    void SetSimpleProjection(bool value);
    bool GetLightOnlyTarget() const;
    void SetLightOnlyTarget(bool value);
    bool GetLightWorld() const;
    void SetLightWorld(bool value);
    bool GetCameraSpace() const;
    void SetCameraSpace(bool value);
    float GetBrightnessScale() const;
    void SetBrightnessScale(float value);
    Color GetLightColor() const;
    void SetLightColor(Color value);
    float GetIntensity() const;
    void SetIntensity(float value);
    float GetLinearAttenuation() const;
    void SetLinearAttenuation(float value);
    float GetQuadraticAttenuation() const;
    void SetQuadraticAttenuation(float value);
    bool GetVolumetric() const;
    void SetVolumetric(bool value);
    float GetNoiseStrength() const;
    void SetNoiseStrength(float value);
    float GetFlashlightTime() const;
    void SetFlashlightTime(float value);
    uint32_t GetNumPlanes() const;
    void SetNumPlanes(uint32_t value);
    float GetPlaneOffset() const;
    void SetPlaneOffset(float value);
    float GetVolumetricIntensity() const;
    void SetVolumetricIntensity(float value);
    float GetColorTransitionTime() const;
    void SetColorTransitionTime(float value);
    float GetAmbient() const;
    void SetAmbient(float value);
    std::string GetSpotlightTextureName() const;
    void SetSpotlightTextureName(std::string value);
    int32_t GetSpotlightTextureFrame() const;
    void SetSpotlightTextureFrame(int32_t value);
    uint32_t GetShadowQuality() const;
    void SetShadowQuality(uint32_t value);
    float GetNearZ() const;
    void SetNearZ(float value);
    float GetFarZ() const;
    void SetFarZ(float value);
    float GetProjectionSize() const;
    void SetProjectionSize(float value);
    float GetRotation() const;
    void SetRotation(float value);
    bool GetFlipHorizontal() const;
    void SetFlipHorizontal(bool value);
    GCModelPointEntity GetParent() const;
    void SetParent(GCModelPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCDynamicPropAlias_prop_dynamic_override
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCDynamicPropAlias_prop_dynamic_override(std::string ptr, lua_State* state);
    GCDynamicPropAlias_prop_dynamic_override(void *ptr);

    GCDynamicProp GetParent() const;
    void SetParent(GCDynamicProp value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSceneListManager
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSceneListManager(std::string ptr, lua_State* state);
    GCSceneListManager(void *ptr);

    std::vector<CUtlSymbolLarge> GetScenes() const;
    void SetScenes(std::vector<CUtlSymbolLarge> value);
    std::vector<GCBaseEntity> GetScenes1() const;
    void SetScenes1(std::vector<GCBaseEntity> value);
    GCLogicalEntity GetParent() const;
    void SetParent(GCLogicalEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSplineConstraint
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSplineConstraint(std::string ptr, lua_State* state);
    GCSplineConstraint(void *ptr);

    Vector GetAnchorOffsetRestore() const;
    void SetAnchorOffsetRestore(Vector value);
    GCPhysConstraint GetParent() const;
    void SetParent(GCPhysConstraint value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSObserver_ViewModelServices
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSObserver_ViewModelServices(std::string ptr, lua_State* state);
    GCCSObserver_ViewModelServices(void *ptr);

    GCPlayer_ViewModelServices GetParent() const;
    void SetParent(GCPlayer_ViewModelServices value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCDynamicPropAlias_dynamic_prop
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCDynamicPropAlias_dynamic_prop(std::string ptr, lua_State* state);
    GCDynamicPropAlias_dynamic_prop(void *ptr);

    GCDynamicProp GetParent() const;
    void SetParent(GCDynamicProp value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GModelConfigHandle_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GModelConfigHandle_t(std::string ptr, lua_State* state);
    GModelConfigHandle_t(void *ptr);

    uint32_t GetValue() const;
    void SetValue(uint32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPhysicsPropMultiplayer
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPhysicsPropMultiplayer(std::string ptr, lua_State* state);
    GCPhysicsPropMultiplayer(void *ptr);

    GCPhysicsProp GetParent() const;
    void SetParent(GCPhysicsProp value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFuncTrackChange
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFuncTrackChange(std::string ptr, lua_State* state);
    GCFuncTrackChange(void *ptr);

    GCPathTrack GetTrackTop() const;
    void SetTrackTop(GCPathTrack value);
    GCPathTrack GetTrackBottom() const;
    void SetTrackBottom(GCPathTrack value);
    GCFuncTrackTrain GetTrain() const;
    void SetTrain(GCFuncTrackTrain value);
    std::string GetTrackTopName() const;
    void SetTrackTopName(std::string value);
    std::string GetTrackBottomName() const;
    void SetTrackBottomName(std::string value);
    std::string GetTrainName() const;
    void SetTrainName(std::string value);
    uint64_t GetCode() const;
    void SetCode(uint64_t value);
    int32_t GetTargetState() const;
    void SetTargetState(int32_t value);
    int32_t GetUse() const;
    void SetUse(int32_t value);
    GCFuncPlatRot GetParent() const;
    void SetParent(GCFuncPlatRot value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMarkupVolume
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMarkupVolume(std::string ptr, lua_State* state);
    GCMarkupVolume(void *ptr);

    bool GetDisabled() const;
    void SetDisabled(bool value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCInfoPlayerTerrorist
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCInfoPlayerTerrorist(std::string ptr, lua_State* state);
    GCInfoPlayerTerrorist(void *ptr);

    GSpawnPoint GetParent() const;
    void SetParent(GSpawnPoint value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVelocitySampler
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVelocitySampler(std::string ptr, lua_State* state);
    GVelocitySampler(void *ptr);

    Vector GetPrevSample() const;
    void SetPrevSample(Vector value);
    float GetPrevSampleTime() const;
    void SetPrevSampleTime(float value);
    float GetIdealSampleRate() const;
    void SetIdealSampleRate(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTankTargetChange
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTankTargetChange(std::string ptr, lua_State* state);
    GCTankTargetChange(void *ptr);

    std::string GetNewTargetName() const;
    void SetNewTargetName(std::string value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCLogicCompare
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCLogicCompare(std::string ptr, lua_State* state);
    GCLogicCompare(void *ptr);

    float GetInValue() const;
    void SetInValue(float value);
    float GetCompareValue() const;
    void SetCompareValue(float value);
    GCLogicalEntity GetParent() const;
    void SetParent(GCLogicalEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSPlayer_BulletServices
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSPlayer_BulletServices(std::string ptr, lua_State* state);
    GCCSPlayer_BulletServices(void *ptr);

    int32_t GetTotalHitsOnServer() const;
    void SetTotalHitsOnServer(int32_t value);
    GCPlayerPawnComponent GetParent() const;
    void SetParent(GCPlayerPawnComponent value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCLogicRelay
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCLogicRelay(std::string ptr, lua_State* state);
    GCLogicRelay(void *ptr);

    GCEntityIOOutput GetOnTrigger() const;
    void SetOnTrigger(GCEntityIOOutput value);
    GCEntityIOOutput GetOnSpawn() const;
    void SetOnSpawn(GCEntityIOOutput value);
    bool GetDisabled() const;
    void SetDisabled(bool value);
    bool GetWaitForRefire() const;
    void SetWaitForRefire(bool value);
    bool GetTriggerOnce() const;
    void SetTriggerOnce(bool value);
    bool GetFastRetrigger() const;
    void SetFastRetrigger(bool value);
    bool GetPassthoughCaller() const;
    void SetPassthoughCaller(bool value);
    GCLogicalEntity GetParent() const;
    void SetParent(GCLogicalEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPlayer_ItemServices
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPlayer_ItemServices(std::string ptr, lua_State* state);
    GCPlayer_ItemServices(void *ptr);

    GCPlayerPawnComponent GetParent() const;
    void SetParent(GCPlayerPawnComponent value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCKeepUpright
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCKeepUpright(std::string ptr, lua_State* state);
    GCKeepUpright(void *ptr);

    Vector GetWorldGoalAxis() const;
    void SetWorldGoalAxis(Vector value);
    Vector GetLocalTestAxis() const;
    void SetLocalTestAxis(Vector value);
    std::string GetNameAttach() const;
    void SetNameAttach(std::string value);
    GCBaseEntity GetAttachedObject() const;
    void SetAttachedObject(GCBaseEntity value);
    float GetAngularLimit() const;
    void SetAngularLimit(float value);
    bool GetActive() const;
    void SetActive(bool value);
    bool GetDampAllRotation() const;
    void SetDampAllRotation(bool value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCRevertSaved
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCRevertSaved(std::string ptr, lua_State* state);
    GCRevertSaved(void *ptr);

    float GetLoadTime() const;
    void SetLoadTime(float value);
    float GetDuration() const;
    void SetDuration(float value);
    float GetHoldTime() const;
    void SetHoldTime(float value);
    GCModelPointEntity GetParent() const;
    void SetParent(GCModelPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFuncWater
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFuncWater(std::string ptr, lua_State* state);
    GCFuncWater(void *ptr);

    GCBuoyancyHelper GetBuoyancyHelper() const;
    void SetBuoyancyHelper(GCBuoyancyHelper value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFuncTimescale
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFuncTimescale(std::string ptr, lua_State* state);
    GCFuncTimescale(void *ptr);

    float GetDesiredTimescale() const;
    void SetDesiredTimescale(float value);
    float GetAcceleration() const;
    void SetAcceleration(float value);
    float GetMinBlendRate() const;
    void SetMinBlendRate(float value);
    float GetBlendDeltaMultiplier() const;
    void SetBlendDeltaMultiplier(float value);
    bool GetIsStarted() const;
    void SetIsStarted(bool value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBtActionMoveTo
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBtActionMoveTo(std::string ptr, lua_State* state);
    GCBtActionMoveTo(void *ptr);

    std::string GetDestinationInputKey() const;
    void SetDestinationInputKey(std::string value);
    std::string GetHidingSpotInputKey() const;
    void SetHidingSpotInputKey(std::string value);
    std::string GetThreatInputKey() const;
    void SetThreatInputKey(std::string value);
    Vector GetDestination() const;
    void SetDestination(Vector value);
    bool GetAutoLookAdjust() const;
    void SetAutoLookAdjust(bool value);
    bool GetComputePath() const;
    void SetComputePath(bool value);
    float GetDamagingAreasPenaltyCost() const;
    void SetDamagingAreasPenaltyCost(float value);
    GCountdownTimer GetCheckApproximateCornersTimer() const;
    void SetCheckApproximateCornersTimer(GCountdownTimer value);
    GCountdownTimer GetCheckHighPriorityItem() const;
    void SetCheckHighPriorityItem(GCountdownTimer value);
    GCountdownTimer GetRepathTimer() const;
    void SetRepathTimer(GCountdownTimer value);
    float GetArrivalEpsilon() const;
    void SetArrivalEpsilon(float value);
    float GetAdditionalArrivalEpsilon2D() const;
    void SetAdditionalArrivalEpsilon2D(float value);
    float GetHidingSpotCheckDistanceThreshold() const;
    void SetHidingSpotCheckDistanceThreshold(float value);
    float GetNearestAreaDistanceThreshold() const;
    void SetNearestAreaDistanceThreshold(float value);
    GCBtNode GetParent() const;
    void SetParent(GCBtNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTonemapController2
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTonemapController2(std::string ptr, lua_State* state);
    GCTonemapController2(void *ptr);

    float GetAutoExposureMin() const;
    void SetAutoExposureMin(float value);
    float GetAutoExposureMax() const;
    void SetAutoExposureMax(float value);
    float GetTonemapPercentTarget() const;
    void SetTonemapPercentTarget(float value);
    float GetTonemapPercentBrightPixels() const;
    void SetTonemapPercentBrightPixels(float value);
    float GetTonemapMinAvgLum() const;
    void SetTonemapMinAvgLum(float value);
    float GetExposureAdaptationSpeedUp() const;
    void SetExposureAdaptationSpeedUp(float value);
    float GetExposureAdaptationSpeedDown() const;
    void SetExposureAdaptationSpeedDown(float value);
    float GetTonemapEVSmoothingRange() const;
    void SetTonemapEVSmoothingRange(float value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCRopeKeyframeAlias_move_rope
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCRopeKeyframeAlias_move_rope(std::string ptr, lua_State* state);
    GCRopeKeyframeAlias_move_rope(void *ptr);

    GCRopeKeyframe GetParent() const;
    void SetParent(GCRopeKeyframe value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvInstructorVRHint
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvInstructorVRHint(std::string ptr, lua_State* state);
    GCEnvInstructorVRHint(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    std::string GetHintTargetEntity() const;
    void SetHintTargetEntity(std::string value);
    int32_t GetTimeout() const;
    void SetTimeout(int32_t value);
    std::string GetCaption() const;
    void SetCaption(std::string value);
    std::string GetStartSound() const;
    void SetStartSound(std::string value);
    int32_t GetLayoutFileType() const;
    void SetLayoutFileType(int32_t value);
    std::string GetCustomLayoutFile() const;
    void SetCustomLayoutFile(std::string value);
    int32_t GetAttachType() const;
    void SetAttachType(int32_t value);
    float GetHeightOffset() const;
    void SetHeightOffset(float value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWeaponXM1014
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWeaponXM1014(std::string ptr, lua_State* state);
    GCWeaponXM1014(void *ptr);

    GCCSWeaponBase GetParent() const;
    void SetParent(GCCSWeaponBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPlatTrigger
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPlatTrigger(std::string ptr, lua_State* state);
    GCPlatTrigger(void *ptr);

    GCFuncPlat GetPlatform() const;
    void SetPlatform(GCFuncPlat value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvWindShared
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvWindShared(std::string ptr, lua_State* state);
    GCEnvWindShared(void *ptr);

    float GetStartTime() const;
    void SetStartTime(float value);
    uint32_t GetWindSeed() const;
    void SetWindSeed(uint32_t value);
    uint16_t GetMinWind() const;
    void SetMinWind(uint16_t value);
    uint16_t GetMaxWind() const;
    void SetMaxWind(uint16_t value);
    int32_t GetWindRadius() const;
    void SetWindRadius(int32_t value);
    uint16_t GetMinGust() const;
    void SetMinGust(uint16_t value);
    uint16_t GetMaxGust() const;
    void SetMaxGust(uint16_t value);
    float GetMinGustDelay() const;
    void SetMinGustDelay(float value);
    float GetMaxGustDelay() const;
    void SetMaxGustDelay(float value);
    float GetGustDuration() const;
    void SetGustDuration(float value);
    uint16_t GetGustDirChange() const;
    void SetGustDirChange(uint16_t value);
    Vector GetLocation() const;
    void SetLocation(Vector value);
    int32_t GetGustSound() const;
    void SetGustSound(int32_t value);
    int32_t GetWindDir() const;
    void SetWindDir(int32_t value);
    float GetWindSpeed() const;
    void SetWindSpeed(float value);
    Vector GetCurrentWindVector() const;
    void SetCurrentWindVector(Vector value);
    Vector GetCurrentSwayVector() const;
    void SetCurrentSwayVector(Vector value);
    Vector GetPrevSwayVector() const;
    void SetPrevSwayVector(Vector value);
    uint16_t GetInitialWindDir() const;
    void SetInitialWindDir(uint16_t value);
    float GetInitialWindSpeed() const;
    void SetInitialWindSpeed(float value);
    GCEntityIOOutput GetOnGustStart() const;
    void SetOnGustStart(GCEntityIOOutput value);
    GCEntityIOOutput GetOnGustEnd() const;
    void SetOnGustEnd(GCEntityIOOutput value);
    float GetVariationTime() const;
    void SetVariationTime(float value);
    float GetSwayTime() const;
    void SetSwayTime(float value);
    float GetSimTime() const;
    void SetSimTime(float value);
    float GetSwitchTime() const;
    void SetSwitchTime(float value);
    float GetAveWindSpeed() const;
    void SetAveWindSpeed(float value);
    bool GetGusting() const;
    void SetGusting(bool value);
    float GetWindAngleVariation() const;
    void SetWindAngleVariation(float value);
    float GetWindSpeedVariation() const;
    void SetWindSpeedVariation(float value);
    int GetEntIndex() const;
    void SetEntIndex(int value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMolotovGrenade
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMolotovGrenade(std::string ptr, lua_State* state);
    GCMolotovGrenade(void *ptr);

    GCBaseCSGrenade GetParent() const;
    void SetParent(GCBaseCSGrenade value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPointHurt
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPointHurt(std::string ptr, lua_State* state);
    GCPointHurt(void *ptr);

    int32_t GetDamage() const;
    void SetDamage(int32_t value);
    int32_t GetBitsDamageType() const;
    void SetBitsDamageType(int32_t value);
    float GetRadius() const;
    void SetRadius(float value);
    float GetDelay() const;
    void SetDelay(float value);
    std::string GetStrTarget() const;
    void SetStrTarget(std::string value);
    GCBaseEntity GetActivator() const;
    void SetActivator(GCBaseEntity value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPointValueRemapper
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPointValueRemapper(std::string ptr, lua_State* state);
    GCPointValueRemapper(void *ptr);

    bool GetDisabled() const;
    void SetDisabled(bool value);
    bool GetUpdateOnClient() const;
    void SetUpdateOnClient(bool value);
    uint64_t GetInputType() const;
    void SetInputType(uint64_t value);
    std::string GetRemapLineStartName() const;
    void SetRemapLineStartName(std::string value);
    std::string GetRemapLineEndName() const;
    void SetRemapLineEndName(std::string value);
    GCBaseEntity GetRemapLineStart() const;
    void SetRemapLineStart(GCBaseEntity value);
    GCBaseEntity GetRemapLineEnd() const;
    void SetRemapLineEnd(GCBaseEntity value);
    float GetMaximumChangePerSecond() const;
    void SetMaximumChangePerSecond(float value);
    float GetDisengageDistance() const;
    void SetDisengageDistance(float value);
    float GetEngageDistance() const;
    void SetEngageDistance(float value);
    bool GetRequiresUseKey() const;
    void SetRequiresUseKey(bool value);
    uint64_t GetOutputType() const;
    void SetOutputType(uint64_t value);
    std::string GetOutputEntityName() const;
    void SetOutputEntityName(std::string value);
    std::string GetOutputEntity2Name() const;
    void SetOutputEntity2Name(std::string value);
    std::string GetOutputEntity3Name() const;
    void SetOutputEntity3Name(std::string value);
    std::string GetOutputEntity4Name() const;
    void SetOutputEntity4Name(std::string value);
    std::vector<GCBaseEntity> GetOutputEntities() const;
    void SetOutputEntities(std::vector<GCBaseEntity> value);
    uint64_t GetHapticsType() const;
    void SetHapticsType(uint64_t value);
    uint64_t GetMomentumType() const;
    void SetMomentumType(uint64_t value);
    float GetMomentumModifier() const;
    void SetMomentumModifier(float value);
    float GetSnapValue() const;
    void SetSnapValue(float value);
    float GetCurrentMomentum() const;
    void SetCurrentMomentum(float value);
    uint64_t GetRatchetType() const;
    void SetRatchetType(uint64_t value);
    float GetRatchetOffset() const;
    void SetRatchetOffset(float value);
    float GetInputOffset() const;
    void SetInputOffset(float value);
    bool GetEngaged() const;
    void SetEngaged(bool value);
    bool GetFirstUpdate() const;
    void SetFirstUpdate(bool value);
    float GetPreviousValue() const;
    void SetPreviousValue(float value);
    float GetPreviousUpdateTickTime() const;
    void SetPreviousUpdateTickTime(float value);
    Vector GetPreviousTestPoint() const;
    void SetPreviousTestPoint(Vector value);
    GCBasePlayerPawn GetUsingPlayer() const;
    void SetUsingPlayer(GCBasePlayerPawn value);
    float GetCustomOutputValue() const;
    void SetCustomOutputValue(float value);
    std::string GetSoundEngage() const;
    void SetSoundEngage(std::string value);
    std::string GetSoundDisengage() const;
    void SetSoundDisengage(std::string value);
    std::string GetSoundReachedValueZero() const;
    void SetSoundReachedValueZero(std::string value);
    std::string GetSoundReachedValueOne() const;
    void SetSoundReachedValueOne(std::string value);
    std::string GetSoundMovingLoop() const;
    void SetSoundMovingLoop(std::string value);
    GCEntityIOOutput GetOnReachedValueZero() const;
    void SetOnReachedValueZero(GCEntityIOOutput value);
    GCEntityIOOutput GetOnReachedValueOne() const;
    void SetOnReachedValueOne(GCEntityIOOutput value);
    GCEntityIOOutput GetOnReachedValueCustom() const;
    void SetOnReachedValueCustom(GCEntityIOOutput value);
    GCEntityIOOutput GetOnEngage() const;
    void SetOnEngage(GCEntityIOOutput value);
    GCEntityIOOutput GetOnDisengage() const;
    void SetOnDisengage(GCEntityIOOutput value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCLogicNPCCounterAABB
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCLogicNPCCounterAABB(std::string ptr, lua_State* state);
    GCLogicNPCCounterAABB(void *ptr);

    Vector GetDistanceOuterMins() const;
    void SetDistanceOuterMins(Vector value);
    Vector GetDistanceOuterMaxs() const;
    void SetDistanceOuterMaxs(Vector value);
    Vector GetOuterMins() const;
    void SetOuterMins(Vector value);
    Vector GetOuterMaxs() const;
    void SetOuterMaxs(Vector value);
    GCLogicNPCCounter GetParent() const;
    void SetParent(GCLogicNPCCounter value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCLightOrthoEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCLightOrthoEntity(std::string ptr, lua_State* state);
    GCLightOrthoEntity(void *ptr);

    GCLightEntity GetParent() const;
    void SetParent(GCLightEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvSoundscapeTriggerable
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvSoundscapeTriggerable(std::string ptr, lua_State* state);
    GCEnvSoundscapeTriggerable(void *ptr);

    GCEnvSoundscape GetParent() const;
    void SetParent(GCEnvSoundscape value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSoundOpvarSetPointEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSoundOpvarSetPointEntity(std::string ptr, lua_State* state);
    GCSoundOpvarSetPointEntity(void *ptr);

    GCEntityIOOutput GetOnEnter() const;
    void SetOnEnter(GCEntityIOOutput value);
    GCEntityIOOutput GetOnExit() const;
    void SetOnExit(GCEntityIOOutput value);
    bool GetAutoDisable() const;
    void SetAutoDisable(bool value);
    float GetDistanceMin() const;
    void SetDistanceMin(float value);
    float GetDistanceMax() const;
    void SetDistanceMax(float value);
    float GetDistanceMapMin() const;
    void SetDistanceMapMin(float value);
    float GetDistanceMapMax() const;
    void SetDistanceMapMax(float value);
    float GetOcclusionRadius() const;
    void SetOcclusionRadius(float value);
    float GetOcclusionMin() const;
    void SetOcclusionMin(float value);
    float GetOcclusionMax() const;
    void SetOcclusionMax(float value);
    float GetValSetOnDisable() const;
    void SetValSetOnDisable(float value);
    bool GetSetValueOnDisable() const;
    void SetSetValueOnDisable(bool value);
    int32_t GetSimulationMode() const;
    void SetSimulationMode(int32_t value);
    int32_t GetVisibilitySamples() const;
    void SetVisibilitySamples(int32_t value);
    Vector GetDynamicProxyPoint() const;
    void SetDynamicProxyPoint(Vector value);
    float GetDynamicMaximumOcclusion() const;
    void SetDynamicMaximumOcclusion(float value);
    GCEntityInstance GetDynamicEntity() const;
    void SetDynamicEntity(GCEntityInstance value);
    std::string GetDynamicEntityName() const;
    void SetDynamicEntityName(std::string value);
    float GetPathingDistanceNormFactor() const;
    void SetPathingDistanceNormFactor(float value);
    Vector GetPathingSourcePos() const;
    void SetPathingSourcePos(Vector value);
    Vector GetPathingListenerPos() const;
    void SetPathingListenerPos(Vector value);
    Vector GetPathingDirection() const;
    void SetPathingDirection(Vector value);
    int32_t GetPathingSourceIndex() const;
    void SetPathingSourceIndex(int32_t value);
    GCSoundOpvarSetPointBase GetParent() const;
    void SetParent(GCSoundOpvarSetPointBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBasePlayerPawn
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBasePlayerPawn(std::string ptr, lua_State* state);
    GCBasePlayerPawn(void *ptr);

    GCPlayer_WeaponServices GetWeaponServices() const;
    void SetWeaponServices(GCPlayer_WeaponServices value);
    GCPlayer_ItemServices GetItemServices() const;
    void SetItemServices(GCPlayer_ItemServices value);
    GCPlayer_AutoaimServices GetAutoaimServices() const;
    void SetAutoaimServices(GCPlayer_AutoaimServices value);
    GCPlayer_ObserverServices GetObserverServices() const;
    void SetObserverServices(GCPlayer_ObserverServices value);
    GCPlayer_WaterServices GetWaterServices() const;
    void SetWaterServices(GCPlayer_WaterServices value);
    GCPlayer_UseServices GetUseServices() const;
    void SetUseServices(GCPlayer_UseServices value);
    GCPlayer_FlashlightServices GetFlashlightServices() const;
    void SetFlashlightServices(GCPlayer_FlashlightServices value);
    GCPlayer_CameraServices GetCameraServices() const;
    void SetCameraServices(GCPlayer_CameraServices value);
    GCPlayer_MovementServices GetMovementServices() const;
    void SetMovementServices(GCPlayer_MovementServices value);
    std::vector<GViewAngleServerChange_t> GetServerViewAngleChanges() const;
    void SetServerViewAngleChanges(std::vector<GViewAngleServerChange_t> value);
    uint32_t GetHighestGeneratedServerViewAngleChangeIndex() const;
    void SetHighestGeneratedServerViewAngleChangeIndex(uint32_t value);
    QAngle Get_angle() const;
    void Set_angle(QAngle value);
    QAngle Get_anglePrevious() const;
    void Set_anglePrevious(QAngle value);
    uint32_t GetHideHUD() const;
    void SetHideHUD(uint32_t value);
    Gsky3dparams_t GetSkybox3d() const;
    void SetSkybox3d(Gsky3dparams_t value);
    float GetTimeLastHurt() const;
    void SetTimeLastHurt(float value);
    float GetDeathTime() const;
    void SetDeathTime(float value);
    float GetNextSuicideTime() const;
    void SetNextSuicideTime(float value);
    bool GetInitHUD() const;
    void SetInitHUD(bool value);
    GCAI_Expresser GetExpresser() const;
    void SetExpresser(GCAI_Expresser value);
    GCBasePlayerController GetController() const;
    void SetController(GCBasePlayerController value);
    float GetHltvReplayDelay() const;
    void SetHltvReplayDelay(float value);
    float GetHltvReplayEnd() const;
    void SetHltvReplayEnd(float value);
    int GetHltvReplayEntity() const;
    void SetHltvReplayEntity(int value);
    std::vector<Gsndopvarlatchdata_t> GetSndOpvarLatchData() const;
    void SetSndOpvarLatchData(std::vector<Gsndopvarlatchdata_t> value);
    GCBaseCombatCharacter GetParent() const;
    void SetParent(GCBaseCombatCharacter value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCGameMoney
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCGameMoney(std::string ptr, lua_State* state);
    GCGameMoney(void *ptr);

    GCEntityIOOutput GetOnMoneySpent() const;
    void SetOnMoneySpent(GCEntityIOOutput value);
    GCEntityIOOutput GetOnMoneySpentFail() const;
    void SetOnMoneySpentFail(GCEntityIOOutput value);
    int32_t GetMoney() const;
    void SetMoney(int32_t value);
    std::string GetStrAwardText() const;
    void SetStrAwardText(std::string value);
    GCRulePointEntity GetParent() const;
    void SetParent(GCRulePointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCLogicPlayerProxy
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCLogicPlayerProxy(std::string ptr, lua_State* state);
    GCLogicPlayerProxy(void *ptr);

    GCBaseEntity GetPlayer() const;
    void SetPlayer(GCBaseEntity value);
    GCEntityIOOutput GetPlayerHasAmmo() const;
    void SetPlayerHasAmmo(GCEntityIOOutput value);
    GCEntityIOOutput GetPlayerHasNoAmmo() const;
    void SetPlayerHasNoAmmo(GCEntityIOOutput value);
    GCEntityIOOutput GetPlayerDied() const;
    void SetPlayerDied(GCEntityIOOutput value);
    GCLogicalEntity GetParent() const;
    void SetParent(GCLogicalEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPlayer_ObserverServices
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPlayer_ObserverServices(std::string ptr, lua_State* state);
    GCPlayer_ObserverServices(void *ptr);

    uint32_t GetObserverMode() const;
    void SetObserverMode(uint32_t value);
    GCBaseEntity GetObserverTarget() const;
    void SetObserverTarget(GCBaseEntity value);
    uint64_t GetObserverLastMode() const;
    void SetObserverLastMode(uint64_t value);
    bool GetForcedObserverMode() const;
    void SetForcedObserverMode(bool value);
    GCPlayerPawnComponent GetParent() const;
    void SetParent(GCPlayerPawnComponent value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWeaponZoneRepulsor
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWeaponZoneRepulsor(std::string ptr, lua_State* state);
    GCWeaponZoneRepulsor(void *ptr);

    GCCSWeaponBaseGun GetParent() const;
    void SetParent(GCCSWeaponBaseGun value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPhysImpact
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPhysImpact(std::string ptr, lua_State* state);
    GCPhysImpact(void *ptr);

    float GetDamage() const;
    void SetDamage(float value);
    float GetDistance() const;
    void SetDistance(float value);
    std::string GetDirectionEntityName() const;
    void SetDirectionEntityName(std::string value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvCombinedLightProbeVolume
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvCombinedLightProbeVolume(std::string ptr, lua_State* state);
    GCEnvCombinedLightProbeVolume(void *ptr);

    Color GetEntity_Color() const;
    void SetEntity_Color(Color value);
    float GetEntity_flBrightness() const;
    void SetEntity_flBrightness(float value);
    bool GetEntity_bCustomCubemapTexture() const;
    void SetEntity_bCustomCubemapTexture(bool value);
    Vector GetEntity_vBoxMins() const;
    void SetEntity_vBoxMins(Vector value);
    Vector GetEntity_vBoxMaxs() const;
    void SetEntity_vBoxMaxs(Vector value);
    bool GetEntity_bMoveable() const;
    void SetEntity_bMoveable(bool value);
    int32_t GetEntity_nHandshake() const;
    void SetEntity_nHandshake(int32_t value);
    int32_t GetEntity_nEnvCubeMapArrayIndex() const;
    void SetEntity_nEnvCubeMapArrayIndex(int32_t value);
    int32_t GetEntity_nPriority() const;
    void SetEntity_nPriority(int32_t value);
    bool GetEntity_bStartDisabled() const;
    void SetEntity_bStartDisabled(bool value);
    float GetEntity_flEdgeFadeDist() const;
    void SetEntity_flEdgeFadeDist(float value);
    Vector GetEntity_vEdgeFadeDists() const;
    void SetEntity_vEdgeFadeDists(Vector value);
    int32_t GetEntity_nLightProbeSizeX() const;
    void SetEntity_nLightProbeSizeX(int32_t value);
    int32_t GetEntity_nLightProbeSizeY() const;
    void SetEntity_nLightProbeSizeY(int32_t value);
    int32_t GetEntity_nLightProbeSizeZ() const;
    void SetEntity_nLightProbeSizeZ(int32_t value);
    int32_t GetEntity_nLightProbeAtlasX() const;
    void SetEntity_nLightProbeAtlasX(int32_t value);
    int32_t GetEntity_nLightProbeAtlasY() const;
    void SetEntity_nLightProbeAtlasY(int32_t value);
    int32_t GetEntity_nLightProbeAtlasZ() const;
    void SetEntity_nLightProbeAtlasZ(int32_t value);
    bool GetEntity_bEnabled() const;
    void SetEntity_bEnabled(bool value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSPlayer_WaterServices
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSPlayer_WaterServices(std::string ptr, lua_State* state);
    GCCSPlayer_WaterServices(void *ptr);

    float GetNextDrownDamageTime() const;
    void SetNextDrownDamageTime(float value);
    int32_t GetDrownDmgRate() const;
    void SetDrownDmgRate(int32_t value);
    float GetAirFinishedTime() const;
    void SetAirFinishedTime(float value);
    float GetWaterJumpTime() const;
    void SetWaterJumpTime(float value);
    Vector GetWaterJumpVel() const;
    void SetWaterJumpVel(Vector value);
    float GetSwimSoundTime() const;
    void SetSwimSoundTime(float value);
    GCPlayer_WaterServices GetParent() const;
    void SetParent(GCPlayer_WaterServices value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWeaponM249
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWeaponM249(std::string ptr, lua_State* state);
    GCWeaponM249(void *ptr);

    GCCSWeaponBaseGun GetParent() const;
    void SetParent(GCCSWeaponBaseGun value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvParticleGlow
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvParticleGlow(std::string ptr, lua_State* state);
    GCEnvParticleGlow(void *ptr);

    float GetAlphaScale() const;
    void SetAlphaScale(float value);
    float GetRadiusScale() const;
    void SetRadiusScale(float value);
    float GetSelfIllumScale() const;
    void SetSelfIllumScale(float value);
    Color GetColorTint() const;
    void SetColorTint(Color value);
    GCParticleSystem GetParent() const;
    void SetParent(GCParticleSystem value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFuncVehicleClip
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFuncVehicleClip(std::string ptr, lua_State* state);
    GCFuncVehicleClip(void *ptr);

    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSoundAreaEntityBase
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSoundAreaEntityBase(std::string ptr, lua_State* state);
    GCSoundAreaEntityBase(void *ptr);

    bool GetDisabled() const;
    void SetDisabled(bool value);
    std::string GetSoundAreaType() const;
    void SetSoundAreaType(std::string value);
    Vector GetPos() const;
    void SetPos(Vector value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFuncBrush
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFuncBrush(std::string ptr, lua_State* state);
    GCFuncBrush(void *ptr);

    uint64_t GetSolidity() const;
    void SetSolidity(uint64_t value);
    int32_t GetDisabled() const;
    void SetDisabled(int32_t value);
    bool GetSolidBsp() const;
    void SetSolidBsp(bool value);
    std::string GetExcludedClass() const;
    void SetExcludedClass(std::string value);
    bool GetInvertExclusion() const;
    void SetInvertExclusion(bool value);
    bool GetScriptedMovement() const;
    void SetScriptedMovement(bool value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvFunnel
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvFunnel(std::string ptr, lua_State* state);
    GCEnvFunnel(void *ptr);

    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GSequenceHistory_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GSequenceHistory_t(std::string ptr, lua_State* state);
    GSequenceHistory_t(void *ptr);

    float GetSeqStartTime() const;
    void SetSeqStartTime(float value);
    float GetSeqFixedCycle() const;
    void SetSeqFixedCycle(float value);
    uint64_t GetSeqLoopMode() const;
    void SetSeqLoopMode(uint64_t value);
    float GetPlaybackRate() const;
    void SetPlaybackRate(float value);
    float GetCyclesPerSecond() const;
    void SetCyclesPerSecond(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSGameModeRules_Noop
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSGameModeRules_Noop(std::string ptr, lua_State* state);
    GCCSGameModeRules_Noop(void *ptr);

    GCCSGameModeRules GetParent() const;
    void SetParent(GCCSGameModeRules value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPointAngularVelocitySensor
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPointAngularVelocitySensor(std::string ptr, lua_State* state);
    GCPointAngularVelocitySensor(void *ptr);

    GCBaseEntity GetTargetEntity() const;
    void SetTargetEntity(GCBaseEntity value);
    float GetThreshold() const;
    void SetThreshold(float value);
    int32_t GetLastCompareResult() const;
    void SetLastCompareResult(int32_t value);
    int32_t GetLastFireResult() const;
    void SetLastFireResult(int32_t value);
    float GetFireTime() const;
    void SetFireTime(float value);
    float GetFireInterval() const;
    void SetFireInterval(float value);
    float GetLastAngVelocity() const;
    void SetLastAngVelocity(float value);
    QAngle GetLastOrientation() const;
    void SetLastOrientation(QAngle value);
    Vector GetAxis() const;
    void SetAxis(Vector value);
    bool GetUseHelper() const;
    void SetUseHelper(bool value);
    GCEntityIOOutput GetOnLessThan() const;
    void SetOnLessThan(GCEntityIOOutput value);
    GCEntityIOOutput GetOnLessThanOrEqualTo() const;
    void SetOnLessThanOrEqualTo(GCEntityIOOutput value);
    GCEntityIOOutput GetOnGreaterThan() const;
    void SetOnGreaterThan(GCEntityIOOutput value);
    GCEntityIOOutput GetOnGreaterThanOrEqualTo() const;
    void SetOnGreaterThanOrEqualTo(GCEntityIOOutput value);
    GCEntityIOOutput GetOnEqualTo() const;
    void SetOnEqualTo(GCEntityIOOutput value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBaseCSGrenadeProjectile
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBaseCSGrenadeProjectile(std::string ptr, lua_State* state);
    GCBaseCSGrenadeProjectile(void *ptr);

    Vector GetInitialPosition() const;
    void SetInitialPosition(Vector value);
    Vector GetInitialVelocity() const;
    void SetInitialVelocity(Vector value);
    int32_t GetBounces() const;
    void SetBounces(int32_t value);
    int32_t GetExplodeEffectTickBegin() const;
    void SetExplodeEffectTickBegin(int32_t value);
    Vector GetExplodeEffectOrigin() const;
    void SetExplodeEffectOrigin(Vector value);
    float GetSpawnTime() const;
    void SetSpawnTime(float value);
    uint32_t GetOGSExtraFlags() const;
    void SetOGSExtraFlags(uint32_t value);
    bool GetDetonationRecorded() const;
    void SetDetonationRecorded(bool value);
    uint16_t GetItemIndex() const;
    void SetItemIndex(uint16_t value);
    Vector GetOriginalSpawnLocation() const;
    void SetOriginalSpawnLocation(Vector value);
    float GetLastBounceSoundTime() const;
    void SetLastBounceSoundTime(float value);
    Vector GetGrenadeSpin() const;
    void SetGrenadeSpin(Vector value);
    Vector GetLastHitSurfaceNormal() const;
    void SetLastHitSurfaceNormal(Vector value);
    int32_t GetTicksAtZeroVelocity() const;
    void SetTicksAtZeroVelocity(int32_t value);
    bool GetHasEverHitPlayer() const;
    void SetHasEverHitPlayer(bool value);
    bool GetClearFromPlayers() const;
    void SetClearFromPlayers(bool value);
    GCBaseGrenade GetParent() const;
    void SetParent(GCBaseGrenade value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCHostageRescueZoneShim
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCHostageRescueZoneShim(std::string ptr, lua_State* state);
    GCHostageRescueZoneShim(void *ptr);

    GCBaseTrigger GetParent() const;
    void SetParent(GCBaseTrigger value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvInstructorHint
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvInstructorHint(std::string ptr, lua_State* state);
    GCEnvInstructorHint(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    std::string GetReplace_Key() const;
    void SetReplace_Key(std::string value);
    std::string GetHintTargetEntity() const;
    void SetHintTargetEntity(std::string value);
    int32_t GetTimeout() const;
    void SetTimeout(int32_t value);
    int32_t GetDisplayLimit() const;
    void SetDisplayLimit(int32_t value);
    std::string GetIcon_Onscreen() const;
    void SetIcon_Onscreen(std::string value);
    std::string GetIcon_Offscreen() const;
    void SetIcon_Offscreen(std::string value);
    std::string GetCaption() const;
    void SetCaption(std::string value);
    std::string GetActivatorCaption() const;
    void SetActivatorCaption(std::string value);
    Color GetColor() const;
    void SetColor(Color value);
    float GetIconOffset() const;
    void SetIconOffset(float value);
    float GetRange() const;
    void SetRange(float value);
    uint32_t GetPulseOption() const;
    void SetPulseOption(uint32_t value);
    uint32_t GetAlphaOption() const;
    void SetAlphaOption(uint32_t value);
    uint32_t GetShakeOption() const;
    void SetShakeOption(uint32_t value);
    bool GetStatic() const;
    void SetStatic(bool value);
    bool GetNoOffscreen() const;
    void SetNoOffscreen(bool value);
    bool GetForceCaption() const;
    void SetForceCaption(bool value);
    int32_t GetInstanceType() const;
    void SetInstanceType(int32_t value);
    bool GetSuppressRest() const;
    void SetSuppressRest(bool value);
    std::string GetBinding() const;
    void SetBinding(std::string value);
    bool GetAllowNoDrawTarget() const;
    void SetAllowNoDrawTarget(bool value);
    bool GetAutoStart() const;
    void SetAutoStart(bool value);
    bool GetLocalPlayerOnly() const;
    void SetLocalPlayerOnly(bool value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvTracer
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvTracer(std::string ptr, lua_State* state);
    GCEnvTracer(void *ptr);

    Vector GetEnd() const;
    void SetEnd(Vector value);
    float GetDelay() const;
    void SetDelay(float value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCInfoGameEventProxy
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCInfoGameEventProxy(std::string ptr, lua_State* state);
    GCInfoGameEventProxy(void *ptr);

    std::string GetEventName() const;
    void SetEventName(std::string value);
    float GetRange() const;
    void SetRange(float value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPointCamera
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPointCamera(std::string ptr, lua_State* state);
    GCPointCamera(void *ptr);

    float GetFOV() const;
    void SetFOV(float value);
    float GetResolution() const;
    void SetResolution(float value);
    bool GetFogEnable() const;
    void SetFogEnable(bool value);
    Color GetFogColor() const;
    void SetFogColor(Color value);
    float GetFogStart() const;
    void SetFogStart(float value);
    float GetFogEnd() const;
    void SetFogEnd(float value);
    float GetFogMaxDensity() const;
    void SetFogMaxDensity(float value);
    bool GetActive() const;
    void SetActive(bool value);
    bool GetUseScreenAspectRatio() const;
    void SetUseScreenAspectRatio(bool value);
    float GetAspectRatio() const;
    void SetAspectRatio(float value);
    bool GetNoSky() const;
    void SetNoSky(bool value);
    float GetBrightness() const;
    void SetBrightness(float value);
    float GetZFar() const;
    void SetZFar(float value);
    float GetZNear() const;
    void SetZNear(float value);
    bool GetCanHLTVUse() const;
    void SetCanHLTVUse(bool value);
    bool GetDofEnabled() const;
    void SetDofEnabled(bool value);
    float GetDofNearBlurry() const;
    void SetDofNearBlurry(float value);
    float GetDofNearCrisp() const;
    void SetDofNearCrisp(float value);
    float GetDofFarCrisp() const;
    void SetDofFarCrisp(float value);
    float GetDofFarBlurry() const;
    void SetDofFarBlurry(float value);
    float GetDofTiltToGround() const;
    void SetDofTiltToGround(float value);
    float GetTargetFOV() const;
    void SetTargetFOV(float value);
    float GetDegreesPerSecond() const;
    void SetDegreesPerSecond(float value);
    bool GetIsOn() const;
    void SetIsOn(bool value);
    GCPointCamera GetNext() const;
    void SetNext(GCPointCamera value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBodyComponentSkeletonInstance
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBodyComponentSkeletonInstance(std::string ptr, lua_State* state);
    GCBodyComponentSkeletonInstance(void *ptr);

    GCSkeletonInstance GetSkeletonInstance() const;
    void SetSkeletonInstance(GCSkeletonInstance value);
    GCBodyComponent GetParent() const;
    void SetParent(GCBodyComponent value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFuncLadderAlias_func_useableladder
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFuncLadderAlias_func_useableladder(std::string ptr, lua_State* state);
    GCFuncLadderAlias_func_useableladder(void *ptr);

    GCFuncLadder GetParent() const;
    void SetParent(GCFuncLadder value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBaseMoveBehavior
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBaseMoveBehavior(std::string ptr, lua_State* state);
    GCBaseMoveBehavior(void *ptr);

    int32_t GetPositionInterpolator() const;
    void SetPositionInterpolator(int32_t value);
    int32_t GetRotationInterpolator() const;
    void SetRotationInterpolator(int32_t value);
    float GetAnimStartTime() const;
    void SetAnimStartTime(float value);
    float GetAnimEndTime() const;
    void SetAnimEndTime(float value);
    float GetAverageSpeedAcrossFrame() const;
    void SetAverageSpeedAcrossFrame(float value);
    GCPathKeyFrame GetCurrentKeyFrame() const;
    void SetCurrentKeyFrame(GCPathKeyFrame value);
    GCPathKeyFrame GetTargetKeyFrame() const;
    void SetTargetKeyFrame(GCPathKeyFrame value);
    GCPathKeyFrame GetPreKeyFrame() const;
    void SetPreKeyFrame(GCPathKeyFrame value);
    GCPathKeyFrame GetPostKeyFrame() const;
    void SetPostKeyFrame(GCPathKeyFrame value);
    float GetTimeIntoFrame() const;
    void SetTimeIntoFrame(float value);
    int32_t GetDirection() const;
    void SetDirection(int32_t value);
    GCPathKeyFrame GetParent() const;
    void SetParent(GCPathKeyFrame value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFuncInteractionLayerClip
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFuncInteractionLayerClip(std::string ptr, lua_State* state);
    GCFuncInteractionLayerClip(void *ptr);

    bool GetDisabled() const;
    void SetDisabled(bool value);
    std::string GetInteractsAs() const;
    void SetInteractsAs(std::string value);
    std::string GetInteractsWith() const;
    void SetInteractsWith(std::string value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWeaponMAC10
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWeaponMAC10(std::string ptr, lua_State* state);
    GCWeaponMAC10(void *ptr);

    GCCSWeaponBaseGun GetParent() const;
    void SetParent(GCCSWeaponBaseGun value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCGameRules
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCGameRules(std::string ptr, lua_State* state);
    GCGameRules(void *ptr);

    GCNetworkVarChainer Get__pChainEntity() const;
    void Set__pChainEntity(GCNetworkVarChainer value);
    std::string GetQuestName() const;
    void SetQuestName(std::string value);
    int32_t GetQuestPhase() const;
    void SetQuestPhase(int32_t value);
    int32_t GetTotalPausedTicks() const;
    void SetTotalPausedTicks(int32_t value);
    int32_t GetPauseStartTick() const;
    void SetPauseStartTick(int32_t value);
    bool GetGamePaused() const;
    void SetGamePaused(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWeaponRevolver
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWeaponRevolver(std::string ptr, lua_State* state);
    GCWeaponRevolver(void *ptr);

    GCCSWeaponBaseGun GetParent() const;
    void SetParent(GCCSWeaponBaseGun value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCOrnamentProp
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCOrnamentProp(std::string ptr, lua_State* state);
    GCOrnamentProp(void *ptr);

    std::string GetInitialOwner() const;
    void SetInitialOwner(std::string value);
    GCDynamicProp GetParent() const;
    void SetParent(GCDynamicProp value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCLogicGameEvent
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCLogicGameEvent(std::string ptr, lua_State* state);
    GCLogicGameEvent(void *ptr);

    std::string GetEventName() const;
    void SetEventName(std::string value);
    GCLogicalEntity GetParent() const;
    void SetParent(GCLogicalEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvMuzzleFlash
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvMuzzleFlash(std::string ptr, lua_State* state);
    GCEnvMuzzleFlash(void *ptr);

    float GetScale() const;
    void SetScale(float value);
    std::string GetParentAttachment() const;
    void SetParentAttachment(std::string value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPlayerSprayDecal
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPlayerSprayDecal(std::string ptr, lua_State* state);
    GCPlayerSprayDecal(void *ptr);

    int32_t GetUniqueID() const;
    void SetUniqueID(int32_t value);
    uint32_t GetAccountID() const;
    void SetAccountID(uint32_t value);
    uint32_t GetTraceID() const;
    void SetTraceID(uint32_t value);
    uint32_t GetRtGcTime() const;
    void SetRtGcTime(uint32_t value);
    Vector GetEndPos() const;
    void SetEndPos(Vector value);
    Vector GetStart() const;
    void SetStart(Vector value);
    Vector GetLeft() const;
    void SetLeft(Vector value);
    Vector GetNormal() const;
    void SetNormal(Vector value);
    int32_t GetPlayer() const;
    void SetPlayer(int32_t value);
    int32_t GetEntity() const;
    void SetEntity(int32_t value);
    int32_t GetHitbox() const;
    void SetHitbox(int32_t value);
    float GetCreationTime() const;
    void SetCreationTime(float value);
    int32_t GetTintID() const;
    void SetTintID(int32_t value);
    uint32_t GetVersion() const;
    void SetVersion(uint32_t value);
    std::vector<uint32_t> GetSignature() const;
    void SetSignature(std::vector<uint32_t> value);
    GCModelPointEntity GetParent() const;
    void SetParent(GCModelPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBombTarget
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBombTarget(std::string ptr, lua_State* state);
    GCBombTarget(void *ptr);

    GCEntityIOOutput GetOnBombExplode() const;
    void SetOnBombExplode(GCEntityIOOutput value);
    GCEntityIOOutput GetOnBombPlanted() const;
    void SetOnBombPlanted(GCEntityIOOutput value);
    GCEntityIOOutput GetOnBombDefused() const;
    void SetOnBombDefused(GCEntityIOOutput value);
    bool GetIsBombSiteB() const;
    void SetIsBombSiteB(bool value);
    bool GetIsHeistBombTarget() const;
    void SetIsHeistBombTarget(bool value);
    bool GetBombPlantedHere() const;
    void SetBombPlantedHere(bool value);
    std::string GetMountTarget() const;
    void SetMountTarget(std::string value);
    GCBaseEntity GetInstructorHint() const;
    void SetInstructorHint(GCBaseEntity value);
    int32_t GetBombSiteDesignation() const;
    void SetBombSiteDesignation(int32_t value);
    GCBaseTrigger GetParent() const;
    void SetParent(GCBaseTrigger value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPhysicsSpring
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPhysicsSpring(std::string ptr, lua_State* state);
    GCPhysicsSpring(void *ptr);

    float GetFrequency() const;
    void SetFrequency(float value);
    float GetDampingRatio() const;
    void SetDampingRatio(float value);
    float GetRestLength() const;
    void SetRestLength(float value);
    std::string GetNameAttachStart() const;
    void SetNameAttachStart(std::string value);
    std::string GetNameAttachEnd() const;
    void SetNameAttachEnd(std::string value);
    Vector GetStart() const;
    void SetStart(Vector value);
    Vector GetEnd() const;
    void SetEnd(Vector value);
    uint32_t GetTeleportTick() const;
    void SetTeleportTick(uint32_t value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvLightProbeVolume
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvLightProbeVolume(std::string ptr, lua_State* state);
    GCEnvLightProbeVolume(void *ptr);

    Vector GetEntity_vBoxMins() const;
    void SetEntity_vBoxMins(Vector value);
    Vector GetEntity_vBoxMaxs() const;
    void SetEntity_vBoxMaxs(Vector value);
    bool GetEntity_bMoveable() const;
    void SetEntity_bMoveable(bool value);
    int32_t GetEntity_nHandshake() const;
    void SetEntity_nHandshake(int32_t value);
    int32_t GetEntity_nPriority() const;
    void SetEntity_nPriority(int32_t value);
    bool GetEntity_bStartDisabled() const;
    void SetEntity_bStartDisabled(bool value);
    int32_t GetEntity_nLightProbeSizeX() const;
    void SetEntity_nLightProbeSizeX(int32_t value);
    int32_t GetEntity_nLightProbeSizeY() const;
    void SetEntity_nLightProbeSizeY(int32_t value);
    int32_t GetEntity_nLightProbeSizeZ() const;
    void SetEntity_nLightProbeSizeZ(int32_t value);
    int32_t GetEntity_nLightProbeAtlasX() const;
    void SetEntity_nLightProbeAtlasX(int32_t value);
    int32_t GetEntity_nLightProbeAtlasY() const;
    void SetEntity_nLightProbeAtlasY(int32_t value);
    int32_t GetEntity_nLightProbeAtlasZ() const;
    void SetEntity_nLightProbeAtlasZ(int32_t value);
    bool GetEntity_bEnabled() const;
    void SetEntity_bEnabled(bool value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSGameModeRules_ArmsRace
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSGameModeRules_ArmsRace(std::string ptr, lua_State* state);
    GCCSGameModeRules_ArmsRace(void *ptr);

    std::vector<CUtlString> GetWeaponSequence() const;
    void SetWeaponSequence(std::vector<CUtlString> value);
    GCCSGameModeRules GetParent() const;
    void SetParent(GCCSGameModeRules value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCScriptTriggerPush
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCScriptTriggerPush(std::string ptr, lua_State* state);
    GCScriptTriggerPush(void *ptr);

    Vector GetExtent() const;
    void SetExtent(Vector value);
    GCTriggerPush GetParent() const;
    void SetParent(GCTriggerPush value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvEntityIgniter
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvEntityIgniter(std::string ptr, lua_State* state);
    GCEnvEntityIgniter(void *ptr);

    float GetLifetime() const;
    void SetLifetime(float value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFuncWallToggle
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFuncWallToggle(std::string ptr, lua_State* state);
    GCFuncWallToggle(void *ptr);

    GCFuncWall GetParent() const;
    void SetParent(GCFuncWall value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCDamageRecord
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCDamageRecord(std::string ptr, lua_State* state);
    GCDamageRecord(void *ptr);

    GCCSPlayerPawn GetPlayerDamager() const;
    void SetPlayerDamager(GCCSPlayerPawn value);
    GCCSPlayerPawn GetPlayerRecipient() const;
    void SetPlayerRecipient(GCCSPlayerPawn value);
    GCCSPlayerController GetPlayerControllerDamager() const;
    void SetPlayerControllerDamager(GCCSPlayerController value);
    GCCSPlayerController GetPlayerControllerRecipient() const;
    void SetPlayerControllerRecipient(GCCSPlayerController value);
    std::string GetPlayerDamagerName() const;
    void SetPlayerDamagerName(std::string value);
    std::string GetPlayerRecipientName() const;
    void SetPlayerRecipientName(std::string value);
    uint64_t GetDamagerXuid() const;
    void SetDamagerXuid(uint64_t value);
    uint64_t GetRecipientXuid() const;
    void SetRecipientXuid(uint64_t value);
    int32_t GetDamage() const;
    void SetDamage(int32_t value);
    int32_t GetActualHealthRemoved() const;
    void SetActualHealthRemoved(int32_t value);
    int32_t GetNumHits() const;
    void SetNumHits(int32_t value);
    int32_t GetLastBulletUpdate() const;
    void SetLastBulletUpdate(int32_t value);
    bool GetIsOtherEnemy() const;
    void SetIsOtherEnemy(bool value);
    uint64_t GetKillType() const;
    void SetKillType(uint64_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCLogicAutosave
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCLogicAutosave(std::string ptr, lua_State* state);
    GCLogicAutosave(void *ptr);

    bool GetForceNewLevelUnit() const;
    void SetForceNewLevelUnit(bool value);
    int32_t GetMinHitPoints() const;
    void SetMinHitPoints(int32_t value);
    int32_t GetMinHitPointsToCommit() const;
    void SetMinHitPointsToCommit(int32_t value);
    GCLogicalEntity GetParent() const;
    void SetParent(GCLogicalEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSPlayerController_DamageServices
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSPlayerController_DamageServices(std::string ptr, lua_State* state);
    GCCSPlayerController_DamageServices(void *ptr);

    int32_t GetSendUpdate() const;
    void SetSendUpdate(int32_t value);
    std::vector<GCDamageRecord> GetDamageList() const;
    void SetDamageList(std::vector<GCDamageRecord> value);
    GCPlayerControllerComponent GetParent() const;
    void SetParent(GCPlayerControllerComponent value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCRenderComponent
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCRenderComponent(std::string ptr, lua_State* state);
    GCRenderComponent(void *ptr);

    GCNetworkVarChainer Get__pChainEntity() const;
    void Set__pChainEntity(GCNetworkVarChainer value);
    bool GetIsRenderingWithViewModels() const;
    void SetIsRenderingWithViewModels(bool value);
    uint32_t GetSplitscreenFlags() const;
    void SetSplitscreenFlags(uint32_t value);
    bool GetEnableRendering() const;
    void SetEnableRendering(bool value);
    bool GetInterpolationReadyToDraw() const;
    void SetInterpolationReadyToDraw(bool value);
    GCEntityComponent GetParent() const;
    void SetParent(GCEntityComponent value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSoundEventPathCornerEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSoundEventPathCornerEntity(std::string ptr, lua_State* state);
    GCSoundEventPathCornerEntity(void *ptr);

    std::string GetPathCorner() const;
    void SetPathCorner(std::string value);
    int32_t GetCountMax() const;
    void SetCountMax(int32_t value);
    float GetDistanceMax() const;
    void SetDistanceMax(float value);
    float GetDistMaxSqr() const;
    void SetDistMaxSqr(float value);
    float GetDotProductMax() const;
    void SetDotProductMax(float value);
    bool GetPlaying() const;
    void SetPlaying(bool value);
    GCSoundEventEntity GetParent() const;
    void SetParent(GCSoundEventEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvSoundscapeProxyAlias_snd_soundscape_proxy
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvSoundscapeProxyAlias_snd_soundscape_proxy(std::string ptr, lua_State* state);
    GCEnvSoundscapeProxyAlias_snd_soundscape_proxy(void *ptr);

    GCEnvSoundscapeProxy GetParent() const;
    void SetParent(GCEnvSoundscapeProxy value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCLightComponent
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCLightComponent(std::string ptr, lua_State* state);
    GCLightComponent(void *ptr);

    GCNetworkVarChainer Get__pChainEntity() const;
    void Set__pChainEntity(GCNetworkVarChainer value);
    Color GetColor() const;
    void SetColor(Color value);
    Color GetSecondaryColor() const;
    void SetSecondaryColor(Color value);
    float GetBrightness() const;
    void SetBrightness(float value);
    float GetBrightnessScale() const;
    void SetBrightnessScale(float value);
    float GetBrightnessMult() const;
    void SetBrightnessMult(float value);
    float GetRange() const;
    void SetRange(float value);
    float GetFalloff() const;
    void SetFalloff(float value);
    float GetAttenuation0() const;
    void SetAttenuation0(float value);
    float GetAttenuation1() const;
    void SetAttenuation1(float value);
    float GetAttenuation2() const;
    void SetAttenuation2(float value);
    float GetTheta() const;
    void SetTheta(float value);
    float GetPhi() const;
    void SetPhi(float value);
    int32_t GetCascades() const;
    void SetCascades(int32_t value);
    int32_t GetCastShadows() const;
    void SetCastShadows(int32_t value);
    int32_t GetShadowWidth() const;
    void SetShadowWidth(int32_t value);
    int32_t GetShadowHeight() const;
    void SetShadowHeight(int32_t value);
    bool GetRenderDiffuse() const;
    void SetRenderDiffuse(bool value);
    int32_t GetRenderSpecular() const;
    void SetRenderSpecular(int32_t value);
    bool GetRenderTransmissive() const;
    void SetRenderTransmissive(bool value);
    float GetOrthoLightWidth() const;
    void SetOrthoLightWidth(float value);
    float GetOrthoLightHeight() const;
    void SetOrthoLightHeight(float value);
    int32_t GetStyle() const;
    void SetStyle(int32_t value);
    std::string GetPattern() const;
    void SetPattern(std::string value);
    int32_t GetCascadeRenderStaticObjects() const;
    void SetCascadeRenderStaticObjects(int32_t value);
    float GetShadowCascadeCrossFade() const;
    void SetShadowCascadeCrossFade(float value);
    float GetShadowCascadeDistanceFade() const;
    void SetShadowCascadeDistanceFade(float value);
    float GetShadowCascadeDistance0() const;
    void SetShadowCascadeDistance0(float value);
    float GetShadowCascadeDistance1() const;
    void SetShadowCascadeDistance1(float value);
    float GetShadowCascadeDistance2() const;
    void SetShadowCascadeDistance2(float value);
    float GetShadowCascadeDistance3() const;
    void SetShadowCascadeDistance3(float value);
    int32_t GetShadowCascadeResolution0() const;
    void SetShadowCascadeResolution0(int32_t value);
    int32_t GetShadowCascadeResolution1() const;
    void SetShadowCascadeResolution1(int32_t value);
    int32_t GetShadowCascadeResolution2() const;
    void SetShadowCascadeResolution2(int32_t value);
    int32_t GetShadowCascadeResolution3() const;
    void SetShadowCascadeResolution3(int32_t value);
    bool GetUsesBakedShadowing() const;
    void SetUsesBakedShadowing(bool value);
    int32_t GetShadowPriority() const;
    void SetShadowPriority(int32_t value);
    int32_t GetBakedShadowIndex() const;
    void SetBakedShadowIndex(int32_t value);
    bool GetRenderToCubemaps() const;
    void SetRenderToCubemaps(bool value);
    int32_t GetDirectLight() const;
    void SetDirectLight(int32_t value);
    int32_t GetIndirectLight() const;
    void SetIndirectLight(int32_t value);
    float GetFadeMinDist() const;
    void SetFadeMinDist(float value);
    float GetFadeMaxDist() const;
    void SetFadeMaxDist(float value);
    float GetShadowFadeMinDist() const;
    void SetShadowFadeMinDist(float value);
    float GetShadowFadeMaxDist() const;
    void SetShadowFadeMaxDist(float value);
    bool GetEnabled() const;
    void SetEnabled(bool value);
    bool GetFlicker() const;
    void SetFlicker(bool value);
    bool GetPrecomputedFieldsValid() const;
    void SetPrecomputedFieldsValid(bool value);
    Vector GetPrecomputedBoundsMins() const;
    void SetPrecomputedBoundsMins(Vector value);
    Vector GetPrecomputedBoundsMaxs() const;
    void SetPrecomputedBoundsMaxs(Vector value);
    Vector GetPrecomputedOBBOrigin() const;
    void SetPrecomputedOBBOrigin(Vector value);
    QAngle GetPrecomputedOBBAngles() const;
    void SetPrecomputedOBBAngles(QAngle value);
    Vector GetPrecomputedOBBExtent() const;
    void SetPrecomputedOBBExtent(Vector value);
    float GetPrecomputedMaxRange() const;
    void SetPrecomputedMaxRange(float value);
    int32_t GetFogLightingMode() const;
    void SetFogLightingMode(int32_t value);
    float GetFogContributionStength() const;
    void SetFogContributionStength(float value);
    float GetNearClipPlane() const;
    void SetNearClipPlane(float value);
    Color GetSkyColor() const;
    void SetSkyColor(Color value);
    float GetSkyIntensity() const;
    void SetSkyIntensity(float value);
    Color GetSkyAmbientBounce() const;
    void SetSkyAmbientBounce(Color value);
    bool GetUseSecondaryColor() const;
    void SetUseSecondaryColor(bool value);
    bool GetMixedShadows() const;
    void SetMixedShadows(bool value);
    float GetLightStyleStartTime() const;
    void SetLightStyleStartTime(float value);
    float GetCapsuleLength() const;
    void SetCapsuleLength(float value);
    float GetMinRoughness() const;
    void SetMinRoughness(float value);
    bool GetPvsModifyEntity() const;
    void SetPvsModifyEntity(bool value);
    GCEntityComponent GetParent() const;
    void SetParent(GCEntityComponent value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSmokeGrenadeProjectile
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSmokeGrenadeProjectile(std::string ptr, lua_State* state);
    GCSmokeGrenadeProjectile(void *ptr);

    int32_t GetSmokeEffectTickBegin() const;
    void SetSmokeEffectTickBegin(int32_t value);
    bool GetDidSmokeEffect() const;
    void SetDidSmokeEffect(bool value);
    int32_t GetRandomSeed() const;
    void SetRandomSeed(int32_t value);
    Vector GetSmokeColor() const;
    void SetSmokeColor(Vector value);
    Vector GetSmokeDetonationPos() const;
    void SetSmokeDetonationPos(Vector value);
    std::vector<uint8> GetVoxelFrameData() const;
    void SetVoxelFrameData(std::vector<uint8> value);
    float GetLastBounce() const;
    void SetLastBounce(float value);
    float GetFllastSimulationTime() const;
    void SetFllastSimulationTime(float value);
    GCBaseCSGrenadeProjectile GetParent() const;
    void SetParent(GCBaseCSGrenadeProjectile value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCScriptTriggerMultiple
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCScriptTriggerMultiple(std::string ptr, lua_State* state);
    GCScriptTriggerMultiple(void *ptr);

    Vector GetExtent() const;
    void SetExtent(Vector value);
    GCTriggerMultiple GetParent() const;
    void SetParent(GCTriggerMultiple value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSoundOpvarSetAutoRoomEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSoundOpvarSetAutoRoomEntity(std::string ptr, lua_State* state);
    GCSoundOpvarSetAutoRoomEntity(void *ptr);

    std::vector<GSoundOpvarTraceResult_t> GetTraceResults() const;
    void SetTraceResults(std::vector<GSoundOpvarTraceResult_t> value);
    float GetSize() const;
    void SetSize(float value);
    float GetHeightTolerance() const;
    void SetHeightTolerance(float value);
    float GetSizeSqr() const;
    void SetSizeSqr(float value);
    GCSoundOpvarSetPointEntity GetParent() const;
    void SetParent(GCSoundOpvarSetPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBodyComponentPoint
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBodyComponentPoint(std::string ptr, lua_State* state);
    GCBodyComponentPoint(void *ptr);

    GCGameSceneNode GetSceneNode() const;
    void SetSceneNode(GCGameSceneNode value);
    GCBodyComponent GetParent() const;
    void SetParent(GCBodyComponent value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFilterDamageType
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFilterDamageType(std::string ptr, lua_State* state);
    GFilterDamageType(void *ptr);

    int32_t GetDamageType() const;
    void SetDamageType(int32_t value);
    GCBaseFilter GetParent() const;
    void SetParent(GCBaseFilter value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBot
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBot(std::string ptr, lua_State* state);
    GCBot(void *ptr);

    GCCSPlayerController GetController() const;
    void SetController(GCCSPlayerController value);
    GCCSPlayerPawn GetPlayer() const;
    void SetPlayer(GCCSPlayerPawn value);
    bool GetHasSpawned() const;
    void SetHasSpawned(bool value);
    uint32_t GetId() const;
    void SetId(uint32_t value);
    bool GetIsRunning() const;
    void SetIsRunning(bool value);
    bool GetIsCrouching() const;
    void SetIsCrouching(bool value);
    float GetForwardSpeed() const;
    void SetForwardSpeed(float value);
    float GetLeftSpeed() const;
    void SetLeftSpeed(float value);
    float GetVerticalSpeed() const;
    void SetVerticalSpeed(float value);
    uint64_t GetButtonFlags() const;
    void SetButtonFlags(uint64_t value);
    float GetJumpTimestamp() const;
    void SetJumpTimestamp(float value);
    Vector GetViewForward() const;
    void SetViewForward(Vector value);
    int32_t GetPostureStackIndex() const;
    void SetPostureStackIndex(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMotorController
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMotorController(std::string ptr, lua_State* state);
    GCMotorController(void *ptr);

    float GetSpeed() const;
    void SetSpeed(float value);
    float GetMaxTorque() const;
    void SetMaxTorque(float value);
    Vector GetAxis() const;
    void SetAxis(Vector value);
    float GetInertiaFactor() const;
    void SetInertiaFactor(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSoundAreaEntitySphere
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSoundAreaEntitySphere(std::string ptr, lua_State* state);
    GCSoundAreaEntitySphere(void *ptr);

    float GetRadius() const;
    void SetRadius(float value);
    GCSoundAreaEntityBase GetParent() const;
    void SetParent(GCSoundAreaEntityBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSPlayer_UseServices
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSPlayer_UseServices(std::string ptr, lua_State* state);
    GCCSPlayer_UseServices(void *ptr);

    GCBaseEntity GetLastKnownUseEntity() const;
    void SetLastKnownUseEntity(GCBaseEntity value);
    float GetLastUseTimeStamp() const;
    void SetLastUseTimeStamp(float value);
    float GetTimeLastUsedWindow() const;
    void SetTimeLastUsedWindow(float value);
    GCPlayer_UseServices GetParent() const;
    void SetParent(GCPlayer_UseServices value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSGO_WingmanIntroCounterTerroristPosition
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSGO_WingmanIntroCounterTerroristPosition(std::string ptr, lua_State* state);
    GCCSGO_WingmanIntroCounterTerroristPosition(void *ptr);

    GCCSGO_WingmanIntroCharacterPosition GetParent() const;
    void SetParent(GCCSGO_WingmanIntroCharacterPosition value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCItemKevlar
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCItemKevlar(std::string ptr, lua_State* state);
    GCItemKevlar(void *ptr);

    GCItem GetParent() const;
    void SetParent(GCItem value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTriggerHurt
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTriggerHurt(std::string ptr, lua_State* state);
    GCTriggerHurt(void *ptr);

    float GetOriginalDamage() const;
    void SetOriginalDamage(float value);
    float GetDamage() const;
    void SetDamage(float value);
    float GetDamageCap() const;
    void SetDamageCap(float value);
    float GetLastDmgTime() const;
    void SetLastDmgTime(float value);
    float GetForgivenessDelay() const;
    void SetForgivenessDelay(float value);
    int32_t GetBitsDamageInflict() const;
    void SetBitsDamageInflict(int32_t value);
    int32_t GetDamageModel() const;
    void SetDamageModel(int32_t value);
    bool GetNoDmgForce() const;
    void SetNoDmgForce(bool value);
    Vector GetDamageForce() const;
    void SetDamageForce(Vector value);
    bool GetThinkAlways() const;
    void SetThinkAlways(bool value);
    float GetHurtThinkPeriod() const;
    void SetHurtThinkPeriod(float value);
    GCEntityIOOutput GetOnHurt() const;
    void SetOnHurt(GCEntityIOOutput value);
    GCEntityIOOutput GetOnHurtPlayer() const;
    void SetOnHurtPlayer(GCEntityIOOutput value);
    GCBaseTrigger GetParent() const;
    void SetParent(GCBaseTrigger value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPhysBallSocket
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPhysBallSocket(std::string ptr, lua_State* state);
    GCPhysBallSocket(void *ptr);

    float GetJointFriction() const;
    void SetJointFriction(float value);
    bool GetEnableSwingLimit() const;
    void SetEnableSwingLimit(bool value);
    float GetSwingLimit() const;
    void SetSwingLimit(float value);
    bool GetEnableTwistLimit() const;
    void SetEnableTwistLimit(bool value);
    float GetMinTwistAngle() const;
    void SetMinTwistAngle(float value);
    float GetMaxTwistAngle() const;
    void SetMaxTwistAngle(float value);
    GCPhysConstraint GetParent() const;
    void SetParent(GCPhysConstraint value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMapVetoPickController
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMapVetoPickController(std::string ptr, lua_State* state);
    GCMapVetoPickController(void *ptr);

    bool GetPlayedIntroVcd() const;
    void SetPlayedIntroVcd(bool value);
    bool GetNeedToPlayFiveSecondsRemaining() const;
    void SetNeedToPlayFiveSecondsRemaining(bool value);
    double GetDblPreMatchDraftSequenceTime() const;
    void SetDblPreMatchDraftSequenceTime(double value);
    bool GetPreMatchDraftStateChanged() const;
    void SetPreMatchDraftStateChanged(bool value);
    int32_t GetDraftType() const;
    void SetDraftType(int32_t value);
    int32_t GetTeamWinningCoinToss() const;
    void SetTeamWinningCoinToss(int32_t value);
    std::vector<int32_t> GetTeamWithFirstChoice() const;
    void SetTeamWithFirstChoice(std::vector<int32_t> value);
    std::vector<int32_t> GetVoteMapIdsList() const;
    void SetVoteMapIdsList(std::vector<int32_t> value);
    std::vector<int32_t> GetAccountIDs() const;
    void SetAccountIDs(std::vector<int32_t> value);
    std::vector<int32_t> GetMapId0() const;
    void SetMapId0(std::vector<int32_t> value);
    std::vector<int32_t> GetMapId1() const;
    void SetMapId1(std::vector<int32_t> value);
    std::vector<int32_t> GetMapId2() const;
    void SetMapId2(std::vector<int32_t> value);
    std::vector<int32_t> GetMapId3() const;
    void SetMapId3(std::vector<int32_t> value);
    std::vector<int32_t> GetMapId4() const;
    void SetMapId4(std::vector<int32_t> value);
    std::vector<int32_t> GetMapId5() const;
    void SetMapId5(std::vector<int32_t> value);
    std::vector<int32_t> GetStartingSide0() const;
    void SetStartingSide0(std::vector<int32_t> value);
    int32_t GetCurrentPhase() const;
    void SetCurrentPhase(int32_t value);
    int32_t GetPhaseStartTick() const;
    void SetPhaseStartTick(int32_t value);
    int32_t GetPhaseDurationTicks() const;
    void SetPhaseDurationTicks(int32_t value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSMinimapBoundary
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSMinimapBoundary(std::string ptr, lua_State* state);
    GCCSMinimapBoundary(void *ptr);

    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSoundEnt
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSoundEnt(std::string ptr, lua_State* state);
    GCSoundEnt(void *ptr);

    int32_t GetFreeSound() const;
    void SetFreeSound(int32_t value);
    int32_t GetActiveSound() const;
    void SetActiveSound(int32_t value);
    int32_t GetCLastActiveSounds() const;
    void SetCLastActiveSounds(int32_t value);
    std::vector<GCSound> GetSoundPool() const;
    void SetSoundPool(std::vector<GCSound> value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCInfoSpawnGroupLandmark
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCInfoSpawnGroupLandmark(std::string ptr, lua_State* state);
    GCInfoSpawnGroupLandmark(void *ptr);

    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPlayer_MovementServices_Humanoid
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPlayer_MovementServices_Humanoid(std::string ptr, lua_State* state);
    GCPlayer_MovementServices_Humanoid(void *ptr);

    float GetStepSoundTime() const;
    void SetStepSoundTime(float value);
    float GetFallVelocity() const;
    void SetFallVelocity(float value);
    bool GetInCrouch() const;
    void SetInCrouch(bool value);
    uint32_t GetCrouchState() const;
    void SetCrouchState(uint32_t value);
    float GetCrouchTransitionStartTime() const;
    void SetCrouchTransitionStartTime(float value);
    bool GetDucked() const;
    void SetDucked(bool value);
    bool GetDucking() const;
    void SetDucking(bool value);
    bool GetInDuckJump() const;
    void SetInDuckJump(bool value);
    Vector GetGroundNormal() const;
    void SetGroundNormal(Vector value);
    float GetSurfaceFriction() const;
    void SetSurfaceFriction(float value);
    uint32_t GetSurfaceProps() const;
    void SetSurfaceProps(uint32_t value);
    int32_t GetStepside() const;
    void SetStepside(int32_t value);
    int32_t GetTargetVolume() const;
    void SetTargetVolume(int32_t value);
    Vector GetSmoothedVelocity() const;
    void SetSmoothedVelocity(Vector value);
    GCPlayer_MovementServices GetParent() const;
    void SetParent(GCPlayer_MovementServices value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTriggerSave
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTriggerSave(std::string ptr, lua_State* state);
    GCTriggerSave(void *ptr);

    bool GetForceNewLevelUnit() const;
    void SetForceNewLevelUnit(bool value);
    float GetDangerousTimer() const;
    void SetDangerousTimer(float value);
    int32_t GetMinHitPoints() const;
    void SetMinHitPoints(int32_t value);
    GCBaseTrigger GetParent() const;
    void SetParent(GCBaseTrigger value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPhysWheelConstraint
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPhysWheelConstraint(std::string ptr, lua_State* state);
    GCPhysWheelConstraint(void *ptr);

    float GetSuspensionFrequency() const;
    void SetSuspensionFrequency(float value);
    float GetSuspensionDampingRatio() const;
    void SetSuspensionDampingRatio(float value);
    float GetSuspensionHeightOffset() const;
    void SetSuspensionHeightOffset(float value);
    bool GetEnableSuspensionLimit() const;
    void SetEnableSuspensionLimit(bool value);
    float GetMinSuspensionOffset() const;
    void SetMinSuspensionOffset(float value);
    float GetMaxSuspensionOffset() const;
    void SetMaxSuspensionOffset(float value);
    bool GetEnableSteeringLimit() const;
    void SetEnableSteeringLimit(bool value);
    float GetMinSteeringAngle() const;
    void SetMinSteeringAngle(float value);
    float GetMaxSteeringAngle() const;
    void SetMaxSteeringAngle(float value);
    float GetSteeringAxisFriction() const;
    void SetSteeringAxisFriction(float value);
    float GetSpinAxisFriction() const;
    void SetSpinAxisFriction(float value);
    GCPhysConstraint GetParent() const;
    void SetParent(GCPhysConstraint value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPhysFixed
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPhysFixed(std::string ptr, lua_State* state);
    GCPhysFixed(void *ptr);

    float GetLinearFrequency() const;
    void SetLinearFrequency(float value);
    float GetLinearDampingRatio() const;
    void SetLinearDampingRatio(float value);
    float GetAngularFrequency() const;
    void SetAngularFrequency(float value);
    float GetAngularDampingRatio() const;
    void SetAngularDampingRatio(float value);
    bool GetEnableLinearConstraint() const;
    void SetEnableLinearConstraint(bool value);
    bool GetEnableAngularConstraint() const;
    void SetEnableAngularConstraint(bool value);
    GCPhysConstraint GetParent() const;
    void SetParent(GCPhysConstraint value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSkillFloat
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSkillFloat(std::string ptr, lua_State* state);
    GCSkillFloat(void *ptr);

    std::vector<float> GetValue() const;
    void SetValue(std::vector<float> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvSoundscapeTriggerableAlias_snd_soundscape_triggerable
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvSoundscapeTriggerableAlias_snd_soundscape_triggerable(std::string ptr, lua_State* state);
    GCEnvSoundscapeTriggerableAlias_snd_soundscape_triggerable(void *ptr);

    GCEnvSoundscapeTriggerable GetParent() const;
    void SetParent(GCEnvSoundscapeTriggerable value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSPlayerController_InGameMoneyServices
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSPlayerController_InGameMoneyServices(std::string ptr, lua_State* state);
    GCCSPlayerController_InGameMoneyServices(void *ptr);

    bool GetReceivesMoneyNextRound() const;
    void SetReceivesMoneyNextRound(bool value);
    int32_t GetMoneyEarnedForNextRound() const;
    void SetMoneyEarnedForNextRound(int32_t value);
    int32_t GetAccount() const;
    void SetAccount(int32_t value);
    int32_t GetStartAccount() const;
    void SetStartAccount(int32_t value);
    int32_t GetTotalCashSpent() const;
    void SetTotalCashSpent(int32_t value);
    int32_t GetCashSpentThisRound() const;
    void SetCashSpentThisRound(int32_t value);
    GCPlayerControllerComponent GetParent() const;
    void SetParent(GCPlayerControllerComponent value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSprite
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSprite(std::string ptr, lua_State* state);
    GCSprite(void *ptr);

    GCBaseEntity GetAttachedToEntity() const;
    void SetAttachedToEntity(GCBaseEntity value);
    float GetSpriteFramerate() const;
    void SetSpriteFramerate(float value);
    float GetFrame() const;
    void SetFrame(float value);
    float GetDieTime() const;
    void SetDieTime(float value);
    uint32_t GetBrightness() const;
    void SetBrightness(uint32_t value);
    float GetBrightnessDuration() const;
    void SetBrightnessDuration(float value);
    float GetSpriteScale() const;
    void SetSpriteScale(float value);
    float GetScaleDuration() const;
    void SetScaleDuration(float value);
    bool GetWorldSpaceScale() const;
    void SetWorldSpaceScale(bool value);
    float GetGlowProxySize() const;
    void SetGlowProxySize(float value);
    float GetHDRColorScale() const;
    void SetHDRColorScale(float value);
    float GetLastTime() const;
    void SetLastTime(float value);
    float GetMaxFrame() const;
    void SetMaxFrame(float value);
    float GetStartScale() const;
    void SetStartScale(float value);
    float GetDestScale() const;
    void SetDestScale(float value);
    float GetScaleTimeStart() const;
    void SetScaleTimeStart(float value);
    int32_t GetStartBrightness() const;
    void SetStartBrightness(int32_t value);
    int32_t GetDestBrightness() const;
    void SetDestBrightness(int32_t value);
    float GetBrightnessTimeStart() const;
    void SetBrightnessTimeStart(float value);
    int32_t GetSpriteWidth() const;
    void SetSpriteWidth(int32_t value);
    int32_t GetSpriteHeight() const;
    void SetSpriteHeight(int32_t value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSoundOpvarSetAABBEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSoundOpvarSetAABBEntity(std::string ptr, lua_State* state);
    GCSoundOpvarSetAABBEntity(void *ptr);

    Vector GetDistanceInnerMins() const;
    void SetDistanceInnerMins(Vector value);
    Vector GetDistanceInnerMaxs() const;
    void SetDistanceInnerMaxs(Vector value);
    Vector GetDistanceOuterMins() const;
    void SetDistanceOuterMins(Vector value);
    Vector GetDistanceOuterMaxs() const;
    void SetDistanceOuterMaxs(Vector value);
    int32_t GetAABBDirection() const;
    void SetAABBDirection(int32_t value);
    Vector GetInnerMins() const;
    void SetInnerMins(Vector value);
    Vector GetInnerMaxs() const;
    void SetInnerMaxs(Vector value);
    Vector GetOuterMins() const;
    void SetOuterMins(Vector value);
    Vector GetOuterMaxs() const;
    void SetOuterMaxs(Vector value);
    GCSoundOpvarSetPointEntity GetParent() const;
    void SetParent(GCSoundOpvarSetPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWeaponM4A1
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWeaponM4A1(std::string ptr, lua_State* state);
    GCWeaponM4A1(void *ptr);

    GCCSWeaponBaseGun GetParent() const;
    void SetParent(GCCSWeaponBaseGun value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBeam
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBeam(std::string ptr, lua_State* state);
    GCBeam(void *ptr);

    float GetFrameRate() const;
    void SetFrameRate(float value);
    float GetHDRColorScale() const;
    void SetHDRColorScale(float value);
    float GetFireTime() const;
    void SetFireTime(float value);
    float GetDamage() const;
    void SetDamage(float value);
    uint32_t GetNumBeamEnts() const;
    void SetNumBeamEnts(uint32_t value);
    uint64_t GetBeamType() const;
    void SetBeamType(uint64_t value);
    uint32_t GetBeamFlags() const;
    void SetBeamFlags(uint32_t value);
    std::vector<GCBaseEntity> GetAttachEntity() const;
    void SetAttachEntity(std::vector<GCBaseEntity> value);
    float GetWidth() const;
    void SetWidth(float value);
    float GetEndWidth() const;
    void SetEndWidth(float value);
    float GetFadeLength() const;
    void SetFadeLength(float value);
    float GetHaloScale() const;
    void SetHaloScale(float value);
    float GetAmplitude() const;
    void SetAmplitude(float value);
    float GetStartFrame() const;
    void SetStartFrame(float value);
    float GetSpeed() const;
    void SetSpeed(float value);
    float GetFrame() const;
    void SetFrame(float value);
    uint64_t GetClipStyle() const;
    void SetClipStyle(uint64_t value);
    bool GetTurnedOff() const;
    void SetTurnedOff(bool value);
    Vector GetEndPos() const;
    void SetEndPos(Vector value);
    GCBaseEntity GetEndEntity() const;
    void SetEndEntity(GCBaseEntity value);
    int32_t GetDissolveType() const;
    void SetDissolveType(int32_t value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCommentaryViewPosition
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCommentaryViewPosition(std::string ptr, lua_State* state);
    GCCommentaryViewPosition(void *ptr);

    GCSprite GetParent() const;
    void SetParent(GCSprite value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTonemapController2Alias_env_tonemap_controller2
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTonemapController2Alias_env_tonemap_controller2(std::string ptr, lua_State* state);
    GCTonemapController2Alias_env_tonemap_controller2(void *ptr);

    GCTonemapController2 GetParent() const;
    void SetParent(GCTonemapController2 value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPhysPulley
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPhysPulley(std::string ptr, lua_State* state);
    GCPhysPulley(void *ptr);

    Vector GetPosition2() const;
    void SetPosition2(Vector value);
    std::vector<Vector> GetOffset() const;
    void SetOffset(std::vector<Vector> value);
    float GetAddLength() const;
    void SetAddLength(float value);
    float GetGearRatio() const;
    void SetGearRatio(float value);
    GCPhysConstraint GetParent() const;
    void SetParent(GCPhysConstraint value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCGameRulesProxy
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCGameRulesProxy(std::string ptr, lua_State* state);
    GCGameRulesProxy(void *ptr);

    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWeaponMP7
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWeaponMP7(std::string ptr, lua_State* state);
    GCWeaponMP7(void *ptr);

    GCCSWeaponBaseGun GetParent() const;
    void SetParent(GCCSWeaponBaseGun value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSPlayerController_ActionTrackingServices
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSPlayerController_ActionTrackingServices(std::string ptr, lua_State* state);
    GCCSPlayerController_ActionTrackingServices(void *ptr);

    std::vector<GCSPerRoundStats_t> GetPerRoundStats() const;
    void SetPerRoundStats(std::vector<GCSPerRoundStats_t> value);
    GCSMatchStats_t GetMatchStats() const;
    void SetMatchStats(GCSMatchStats_t value);
    int32_t GetNumRoundKills() const;
    void SetNumRoundKills(int32_t value);
    int32_t GetNumRoundKillsHeadshots() const;
    void SetNumRoundKillsHeadshots(int32_t value);
    uint32_t GetTotalRoundDamageDealt() const;
    void SetTotalRoundDamageDealt(uint32_t value);
    GCPlayerControllerComponent GetParent() const;
    void SetParent(GCPlayerControllerComponent value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPrecipitationBlocker
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPrecipitationBlocker(std::string ptr, lua_State* state);
    GCPrecipitationBlocker(void *ptr);

    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBaseFlexAlias_funCBaseFlex
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBaseFlexAlias_funCBaseFlex(std::string ptr, lua_State* state);
    GCBaseFlexAlias_funCBaseFlex(void *ptr);

    GCBaseFlex GetParent() const;
    void SetParent(GCBaseFlex value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFish
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFish(std::string ptr, lua_State* state);
    GCFish(void *ptr);

    GCFishPool GetPool() const;
    void SetPool(GCFishPool value);
    uint32_t GetId() const;
    void SetId(uint32_t value);
    float GetX() const;
    void SetX(float value);
    float GetY() const;
    void SetY(float value);
    float GetZ() const;
    void SetZ(float value);
    float GetAngle() const;
    void SetAngle(float value);
    float GetAngleChange() const;
    void SetAngleChange(float value);
    Vector GetForward() const;
    void SetForward(Vector value);
    Vector GetPerp() const;
    void SetPerp(Vector value);
    Vector GetPoolOrigin() const;
    void SetPoolOrigin(Vector value);
    float GetWaterLevel() const;
    void SetWaterLevel(float value);
    float GetSpeed() const;
    void SetSpeed(float value);
    float GetDesiredSpeed() const;
    void SetDesiredSpeed(float value);
    float GetCalmSpeed() const;
    void SetCalmSpeed(float value);
    float GetPanicSpeed() const;
    void SetPanicSpeed(float value);
    float GetAvoidRange() const;
    void SetAvoidRange(float value);
    GCountdownTimer GetTurnTimer() const;
    void SetTurnTimer(GCountdownTimer value);
    bool GetTurnClockwise() const;
    void SetTurnClockwise(bool value);
    GCountdownTimer GetGoTimer() const;
    void SetGoTimer(GCountdownTimer value);
    GCountdownTimer GetMoveTimer() const;
    void SetMoveTimer(GCountdownTimer value);
    GCountdownTimer GetPanicTimer() const;
    void SetPanicTimer(GCountdownTimer value);
    GCountdownTimer GetDisperseTimer() const;
    void SetDisperseTimer(GCountdownTimer value);
    GCountdownTimer GetProximityTimer() const;
    void SetProximityTimer(GCountdownTimer value);
    std::vector<GCFish*> GetVisible() const;
    void SetVisible(std::vector<GCFish*> value);
    GCBaseAnimGraph GetParent() const;
    void SetParent(GCBaseAnimGraph value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvFireSource
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvFireSource(std::string ptr, lua_State* state);
    GCEnvFireSource(void *ptr);

    bool GetEnabled() const;
    void SetEnabled(bool value);
    float GetRadius() const;
    void SetRadius(float value);
    float GetDamage() const;
    void SetDamage(float value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCInfoLadderDismount
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCInfoLadderDismount(std::string ptr, lua_State* state);
    GCInfoLadderDismount(void *ptr);

    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTriggerGameEvent
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTriggerGameEvent(std::string ptr, lua_State* state);
    GCTriggerGameEvent(void *ptr);

    std::string GetStrStartTouchEventName() const;
    void SetStrStartTouchEventName(std::string value);
    std::string GetStrEndTouchEventName() const;
    void SetStrEndTouchEventName(std::string value);
    std::string GetStrTriggerID() const;
    void SetStrTriggerID(std::string value);
    GCBaseTrigger GetParent() const;
    void SetParent(GCBaseTrigger value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GSimpleConstraintSoundProfile
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GSimpleConstraintSoundProfile(std::string ptr, lua_State* state);
    GSimpleConstraintSoundProfile(void *ptr);

    GSimpleConstraintSoundProfile GetKeypoints() const;
    void SetKeypoints(GSimpleConstraintSoundProfile value);
    std::vector<float> GetKeyPoints() const;
    void SetKeyPoints(std::vector<float> value);
    std::vector<float> GetReversalSoundThresholds() const;
    void SetReversalSoundThresholds(std::vector<float> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCDebugHistory
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCDebugHistory(std::string ptr, lua_State* state);
    GCDebugHistory(void *ptr);

    int32_t GetNpcEvents() const;
    void SetNpcEvents(int32_t value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCInfoData
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCInfoData(std::string ptr, lua_State* state);
    GCInfoData(void *ptr);

    GCServerOnlyEntity GetParent() const;
    void SetParent(GCServerOnlyEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCHostageCarriableProp
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCHostageCarriableProp(std::string ptr, lua_State* state);
    GCHostageCarriableProp(void *ptr);

    GCBaseAnimGraph GetParent() const;
    void SetParent(GCBaseAnimGraph value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCLightSpotEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCLightSpotEntity(std::string ptr, lua_State* state);
    GCLightSpotEntity(void *ptr);

    GCLightEntity GetParent() const;
    void SetParent(GCLightEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFuncRotating
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFuncRotating(std::string ptr, lua_State* state);
    GCFuncRotating(void *ptr);

    GCEntityIOOutput GetOnStopped() const;
    void SetOnStopped(GCEntityIOOutput value);
    GCEntityIOOutput GetOnStarted() const;
    void SetOnStarted(GCEntityIOOutput value);
    GCEntityIOOutput GetOnReachedStart() const;
    void SetOnReachedStart(GCEntityIOOutput value);
    Vector GetLocalRotationVector() const;
    void SetLocalRotationVector(Vector value);
    float GetFanFriction() const;
    void SetFanFriction(float value);
    float GetAttenuation() const;
    void SetAttenuation(float value);
    float GetVolume() const;
    void SetVolume(float value);
    float GetTargetSpeed() const;
    void SetTargetSpeed(float value);
    float GetMaxSpeed() const;
    void SetMaxSpeed(float value);
    float GetBlockDamage() const;
    void SetBlockDamage(float value);
    std::string GetNoiseRunning() const;
    void SetNoiseRunning(std::string value);
    bool GetReversed() const;
    void SetReversed(bool value);
    bool GetAccelDecel() const;
    void SetAccelDecel(bool value);
    QAngle GetPrevLocalAngles() const;
    void SetPrevLocalAngles(QAngle value);
    QAngle GetStart() const;
    void SetStart(QAngle value);
    bool GetStopAtStartPos() const;
    void SetStopAtStartPos(bool value);
    Vector GetClientOrigin() const;
    void SetClientOrigin(Vector value);
    QAngle GetClientAngles() const;
    void SetClientAngles(QAngle value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCDecoyProjectile
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCDecoyProjectile(std::string ptr, lua_State* state);
    GCDecoyProjectile(void *ptr);

    int32_t GetDecoyShotTick() const;
    void SetDecoyShotTick(int32_t value);
    int32_t GetShotsRemaining() const;
    void SetShotsRemaining(int32_t value);
    float GetExpireTime() const;
    void SetExpireTime(float value);
    uint16_t GetDecoyWeaponDefIndex() const;
    void SetDecoyWeaponDefIndex(uint16_t value);
    GCBaseCSGrenadeProjectile GetParent() const;
    void SetParent(GCBaseCSGrenadeProjectile value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSPlace
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSPlace(std::string ptr, lua_State* state);
    GCCSPlace(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    GCServerOnlyModelEntity GetParent() const;
    void SetParent(GCServerOnlyModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFuncTrainControls
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFuncTrainControls(std::string ptr, lua_State* state);
    GCFuncTrainControls(void *ptr);

    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEntityDissolve
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEntityDissolve(std::string ptr, lua_State* state);
    GCEntityDissolve(void *ptr);

    float GetFadeInStart() const;
    void SetFadeInStart(float value);
    float GetFadeInLength() const;
    void SetFadeInLength(float value);
    float GetFadeOutModelStart() const;
    void SetFadeOutModelStart(float value);
    float GetFadeOutModelLength() const;
    void SetFadeOutModelLength(float value);
    float GetFadeOutStart() const;
    void SetFadeOutStart(float value);
    float GetFadeOutLength() const;
    void SetFadeOutLength(float value);
    float GetStartTime() const;
    void SetStartTime(float value);
    uint64_t GetDissolveType() const;
    void SetDissolveType(uint64_t value);
    Vector GetDissolverOrigin() const;
    void SetDissolverOrigin(Vector value);
    uint32_t GetMagnitude() const;
    void SetMagnitude(uint32_t value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPointAngleSensor
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPointAngleSensor(std::string ptr, lua_State* state);
    GCPointAngleSensor(void *ptr);

    bool GetDisabled() const;
    void SetDisabled(bool value);
    std::string GetLookAtName() const;
    void SetLookAtName(std::string value);
    GCBaseEntity GetTargetEntity() const;
    void SetTargetEntity(GCBaseEntity value);
    GCBaseEntity GetLookAtEntity() const;
    void SetLookAtEntity(GCBaseEntity value);
    float GetDuration() const;
    void SetDuration(float value);
    float GetDotTolerance() const;
    void SetDotTolerance(float value);
    float GetFacingTime() const;
    void SetFacingTime(float value);
    bool GetFired() const;
    void SetFired(bool value);
    GCEntityIOOutput GetOnFacingLookat() const;
    void SetOnFacingLookat(GCEntityIOOutput value);
    GCEntityIOOutput GetOnNotFacingLookat() const;
    void SetOnNotFacingLookat(GCEntityIOOutput value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSoundEventOBBEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSoundEventOBBEntity(std::string ptr, lua_State* state);
    GCSoundEventOBBEntity(void *ptr);

    Vector GetMins() const;
    void SetMins(Vector value);
    Vector GetMaxs() const;
    void SetMaxs(Vector value);
    GCSoundEventEntity GetParent() const;
    void SetParent(GCSoundEventEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBtNodeCondition
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBtNodeCondition(std::string ptr, lua_State* state);
    GCBtNodeCondition(void *ptr);

    bool GetNegated() const;
    void SetNegated(bool value);
    GCBtNodeDecorator GetParent() const;
    void SetParent(GCBtNodeDecorator value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSharedGapTypeQueryRegistration
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSharedGapTypeQueryRegistration(std::string ptr, lua_State* state);
    GCSharedGapTypeQueryRegistration(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvVolumetricFogVolume
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvVolumetricFogVolume(std::string ptr, lua_State* state);
    GCEnvVolumetricFogVolume(void *ptr);

    bool GetActive() const;
    void SetActive(bool value);
    Vector GetBoxMins() const;
    void SetBoxMins(Vector value);
    Vector GetBoxMaxs() const;
    void SetBoxMaxs(Vector value);
    bool GetStartDisabled() const;
    void SetStartDisabled(bool value);
    float GetStrength() const;
    void SetStrength(float value);
    int32_t GetFalloffShape() const;
    void SetFalloffShape(int32_t value);
    float GetFalloffExponent() const;
    void SetFalloffExponent(float value);
    float GetHeightFogDepth() const;
    void SetHeightFogDepth(float value);
    float GetHeightFogEdgeWidth() const;
    void SetHeightFogEdgeWidth(float value);
    float GetIndirectLightStrength() const;
    void SetIndirectLightStrength(float value);
    float GetSunLightStrength() const;
    void SetSunLightStrength(float value);
    float GetNoiseStrength() const;
    void SetNoiseStrength(float value);
    bool GetOverrideIndirectLightStrength() const;
    void SetOverrideIndirectLightStrength(bool value);
    bool GetOverrideSunLightStrength() const;
    void SetOverrideSunLightStrength(bool value);
    bool GetOverrideNoiseStrength() const;
    void SetOverrideNoiseStrength(bool value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvBeam
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvBeam(std::string ptr, lua_State* state);
    GCEnvBeam(void *ptr);

    int32_t GetActive() const;
    void SetActive(int32_t value);
    std::string GetStartEntity() const;
    void SetStartEntity(std::string value);
    std::string GetEndEntity() const;
    void SetEndEntity(std::string value);
    float GetLife() const;
    void SetLife(float value);
    float GetBoltWidth() const;
    void SetBoltWidth(float value);
    float GetNoiseAmplitude() const;
    void SetNoiseAmplitude(float value);
    int32_t GetSpeed() const;
    void SetSpeed(int32_t value);
    float GetRestrike() const;
    void SetRestrike(float value);
    std::string GetSpriteName() const;
    void SetSpriteName(std::string value);
    int32_t GetFrameStart() const;
    void SetFrameStart(int32_t value);
    Vector GetEndPointWorld() const;
    void SetEndPointWorld(Vector value);
    Vector GetEndPointRelative() const;
    void SetEndPointRelative(Vector value);
    float GetRadius() const;
    void SetRadius(float value);
    uint64_t GetTouchType() const;
    void SetTouchType(uint64_t value);
    std::string GetFilterName() const;
    void SetFilterName(std::string value);
    GCBaseEntity GetFilter() const;
    void SetFilter(GCBaseEntity value);
    std::string GetDecal() const;
    void SetDecal(std::string value);
    GCEntityIOOutput GetOnTouchedByEntity() const;
    void SetOnTouchedByEntity(GCEntityIOOutput value);
    GCBeam GetParent() const;
    void SetParent(GCBeam value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFuncIllusionary
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFuncIllusionary(std::string ptr, lua_State* state);
    GCFuncIllusionary(void *ptr);

    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPhysMagnet
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPhysMagnet(std::string ptr, lua_State* state);
    GCPhysMagnet(void *ptr);

    GCEntityIOOutput GetOnMagnetAttach() const;
    void SetOnMagnetAttach(GCEntityIOOutput value);
    GCEntityIOOutput GetOnMagnetDetach() const;
    void SetOnMagnetDetach(GCEntityIOOutput value);
    float GetMassScale() const;
    void SetMassScale(float value);
    float GetForceLimit() const;
    void SetForceLimit(float value);
    float GetTorqueLimit() const;
    void SetTorqueLimit(float value);
    std::vector<Gmagnetted_objects_t> GetMagnettedEntities() const;
    void SetMagnettedEntities(std::vector<Gmagnetted_objects_t> value);
    bool GetActive() const;
    void SetActive(bool value);
    bool GetHasHitSomething() const;
    void SetHasHitSomething(bool value);
    float GetTotalMass() const;
    void SetTotalMass(float value);
    float GetRadius() const;
    void SetRadius(float value);
    float GetNextSuckTime() const;
    void SetNextSuckTime(float value);
    int32_t GetMaxObjectsAttached() const;
    void SetMaxObjectsAttached(int32_t value);
    GCBaseAnimGraph GetParent() const;
    void SetParent(GCBaseAnimGraph value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSceneEntityAlias_logic_choreographed_scene
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSceneEntityAlias_logic_choreographed_scene(std::string ptr, lua_State* state);
    GCSceneEntityAlias_logic_choreographed_scene(void *ptr);

    GCSceneEntity GetParent() const;
    void SetParent(GCSceneEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFuncNavBlocker
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFuncNavBlocker(std::string ptr, lua_State* state);
    GCFuncNavBlocker(void *ptr);

    bool GetDisabled() const;
    void SetDisabled(bool value);
    int32_t GetBlockedTeamNumber() const;
    void SetBlockedTeamNumber(int32_t value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCRagdollMagnet
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCRagdollMagnet(std::string ptr, lua_State* state);
    GCRagdollMagnet(void *ptr);

    bool GetDisabled() const;
    void SetDisabled(bool value);
    float GetRadius() const;
    void SetRadius(float value);
    float GetForce() const;
    void SetForce(float value);
    Vector GetAxis() const;
    void SetAxis(Vector value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFuncElectrifiedVolume
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFuncElectrifiedVolume(std::string ptr, lua_State* state);
    GCFuncElectrifiedVolume(void *ptr);

    std::string GetEffectName() const;
    void SetEffectName(std::string value);
    std::string GetEffectInterpenetrateName() const;
    void SetEffectInterpenetrateName(std::string value);
    std::string GetEffectZapName() const;
    void SetEffectZapName(std::string value);
    std::string GetEffectSource() const;
    void SetEffectSource(std::string value);
    GCFuncBrush GetParent() const;
    void SetParent(GCFuncBrush value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPointProximitySensor
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPointProximitySensor(std::string ptr, lua_State* state);
    GCPointProximitySensor(void *ptr);

    bool GetDisabled() const;
    void SetDisabled(bool value);
    GCBaseEntity GetTargetEntity() const;
    void SetTargetEntity(GCBaseEntity value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GWeaponPurchaseTracker_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GWeaponPurchaseTracker_t(std::string ptr, lua_State* state);
    GWeaponPurchaseTracker_t(void *ptr);

    std::vector<GWeaponPurchaseCount_t> GetWeaponPurchases() const;
    void SetWeaponPurchases(std::vector<GWeaponPurchaseCount_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFilterClass
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFilterClass(std::string ptr, lua_State* state);
    GCFilterClass(void *ptr);

    std::string GetFilterClass() const;
    void SetFilterClass(std::string value);
    GCBaseFilter GetParent() const;
    void SetParent(GCBaseFilter value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMelee
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMelee(std::string ptr, lua_State* state);
    GCMelee(void *ptr);

    GCCSWeaponBase GetParent() const;
    void SetParent(GCCSWeaponBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMultiplayRules
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMultiplayRules(std::string ptr, lua_State* state);
    GCMultiplayRules(void *ptr);

    GCGameRules GetParent() const;
    void SetParent(GCGameRules value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFilterLOS
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFilterLOS(std::string ptr, lua_State* state);
    GCFilterLOS(void *ptr);

    GCBaseFilter GetParent() const;
    void SetParent(GCBaseFilter value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEngineCountdownTimer
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEngineCountdownTimer(std::string ptr, lua_State* state);
    GEngineCountdownTimer(void *ptr);

    float GetDuration() const;
    void SetDuration(float value);
    float GetTimestamp() const;
    void SetTimestamp(float value);
    float GetTimescale() const;
    void SetTimescale(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPhysBox
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPhysBox(std::string ptr, lua_State* state);
    GCPhysBox(void *ptr);

    int32_t GetDamageType() const;
    void SetDamageType(int32_t value);
    float GetMassScale() const;
    void SetMassScale(float value);
    int32_t GetDamageToEnableMotion() const;
    void SetDamageToEnableMotion(int32_t value);
    float GetForceToEnableMotion() const;
    void SetForceToEnableMotion(float value);
    QAngle GetPreferredCarryAngles() const;
    void SetPreferredCarryAngles(QAngle value);
    bool GetNotSolidToWorld() const;
    void SetNotSolidToWorld(bool value);
    bool GetEnableUseOutput() const;
    void SetEnableUseOutput(bool value);
    int32_t GetExploitableByPlayer() const;
    void SetExploitableByPlayer(int32_t value);
    float GetTouchOutputPerEntityDelay() const;
    void SetTouchOutputPerEntityDelay(float value);
    GCEntityIOOutput GetOnDamaged() const;
    void SetOnDamaged(GCEntityIOOutput value);
    GCEntityIOOutput GetOnAwakened() const;
    void SetOnAwakened(GCEntityIOOutput value);
    GCEntityIOOutput GetOnMotionEnabled() const;
    void SetOnMotionEnabled(GCEntityIOOutput value);
    GCEntityIOOutput GetOnPlayerUse() const;
    void SetOnPlayerUse(GCEntityIOOutput value);
    GCEntityIOOutput GetOnStartTouch() const;
    void SetOnStartTouch(GCEntityIOOutput value);
    GCBasePlayerPawn GetCarryingPlayer() const;
    void SetCarryingPlayer(GCBasePlayerPawn value);
    GCBreakable GetParent() const;
    void SetParent(GCBreakable value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSensorGrenadeProjectile
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSensorGrenadeProjectile(std::string ptr, lua_State* state);
    GCSensorGrenadeProjectile(void *ptr);

    float GetExpireTime() const;
    void SetExpireTime(float value);
    float GetNextDetectPlayerSound() const;
    void SetNextDetectPlayerSound(float value);
    GCBaseEntity GetDisplayGrenade() const;
    void SetDisplayGrenade(GCBaseEntity value);
    GCBaseCSGrenadeProjectile GetParent() const;
    void SetParent(GCBaseCSGrenadeProjectile value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTimerEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTimerEntity(std::string ptr, lua_State* state);
    GCTimerEntity(void *ptr);

    GCEntityIOOutput GetOnTimer() const;
    void SetOnTimer(GCEntityIOOutput value);
    GCEntityIOOutput GetOnTimerHigh() const;
    void SetOnTimerHigh(GCEntityIOOutput value);
    GCEntityIOOutput GetOnTimerLow() const;
    void SetOnTimerLow(GCEntityIOOutput value);
    int32_t GetDisabled() const;
    void SetDisabled(int32_t value);
    float GetInitialDelay() const;
    void SetInitialDelay(float value);
    float GetRefireTime() const;
    void SetRefireTime(float value);
    bool GetUpDownState() const;
    void SetUpDownState(bool value);
    int32_t GetUseRandomTime() const;
    void SetUseRandomTime(int32_t value);
    bool GetPauseAfterFiring() const;
    void SetPauseAfterFiring(bool value);
    float GetLowerRandomBound() const;
    void SetLowerRandomBound(float value);
    float GetUpperRandomBound() const;
    void SetUpperRandomBound(float value);
    float GetRemainingTime() const;
    void SetRemainingTime(float value);
    bool GetPaused() const;
    void SetPaused(bool value);
    GCLogicalEntity GetParent() const;
    void SetParent(GCLogicalEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSGO_TeamIntroCounterTerroristPosition
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSGO_TeamIntroCounterTerroristPosition(std::string ptr, lua_State* state);
    GCCSGO_TeamIntroCounterTerroristPosition(void *ptr);

    GCCSGO_TeamIntroCharacterPosition GetParent() const;
    void SetParent(GCCSGO_TeamIntroCharacterPosition value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCHEGrenadeProjectile
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCHEGrenadeProjectile(std::string ptr, lua_State* state);
    GCHEGrenadeProjectile(void *ptr);

    GCBaseCSGrenadeProjectile GetParent() const;
    void SetParent(GCBaseCSGrenadeProjectile value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvWind
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvWind(std::string ptr, lua_State* state);
    GCEnvWind(void *ptr);

    GCEnvWindShared GetEnvWindShared() const;
    void SetEnvWindShared(GCEnvWindShared value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTimeline
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTimeline(std::string ptr, lua_State* state);
    GCTimeline(void *ptr);

    std::vector<float> GetValues() const;
    void SetValues(std::vector<float> value);
    std::vector<int32_t> GetValueCounts() const;
    void SetValueCounts(std::vector<int32_t> value);
    int32_t GetBucketCount() const;
    void SetBucketCount(int32_t value);
    float GetInterval() const;
    void SetInterval(float value);
    float GetFinalValue() const;
    void SetFinalValue(float value);
    uint64_t GetCompressionType() const;
    void SetCompressionType(uint64_t value);
    bool GetStopped() const;
    void SetStopped(bool value);
    GIntervalTimer GetParent() const;
    void SetParent(GIntervalTimer value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFists
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFists(std::string ptr, lua_State* state);
    GCFists(void *ptr);

    bool GetPlayingUninterruptableAct() const;
    void SetPlayingUninterruptableAct(bool value);
    uint64_t GetUninterruptableActivity() const;
    void SetUninterruptableActivity(uint64_t value);
    bool GetRestorePrevWep() const;
    void SetRestorePrevWep(bool value);
    GCBasePlayerWeapon GetWeaponBeforePrevious() const;
    void SetWeaponBeforePrevious(GCBasePlayerWeapon value);
    GCBasePlayerWeapon GetWeaponPrevious() const;
    void SetWeaponPrevious(GCBasePlayerWeapon value);
    bool GetDelayedHardPunchIncoming() const;
    void SetDelayedHardPunchIncoming(bool value);
    bool GetDestroyAfterTaunt() const;
    void SetDestroyAfterTaunt(bool value);
    GCCSWeaponBase GetParent() const;
    void SetParent(GCCSWeaponBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCHandleDummy
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCHandleDummy(std::string ptr, lua_State* state);
    GCHandleDummy(void *ptr);

    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCRagdollConstraint
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCRagdollConstraint(std::string ptr, lua_State* state);
    GCRagdollConstraint(void *ptr);

    float GetXmin() const;
    void SetXmin(float value);
    float GetXmax() const;
    void SetXmax(float value);
    float GetYmin() const;
    void SetYmin(float value);
    float GetYmax() const;
    void SetYmax(float value);
    float GetZmin() const;
    void SetZmin(float value);
    float GetZmax() const;
    void SetZmax(float value);
    float GetXfriction() const;
    void SetXfriction(float value);
    float GetYfriction() const;
    void SetYfriction(float value);
    float GetZfriction() const;
    void SetZfriction(float value);
    GCPhysConstraint GetParent() const;
    void SetParent(GCPhysConstraint value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPhysExplosion
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPhysExplosion(std::string ptr, lua_State* state);
    GCPhysExplosion(void *ptr);

    bool GetExplodeOnSpawn() const;
    void SetExplodeOnSpawn(bool value);
    float GetMagnitude() const;
    void SetMagnitude(float value);
    float GetDamage() const;
    void SetDamage(float value);
    float GetRadius() const;
    void SetRadius(float value);
    std::string GetTargetEntityName() const;
    void SetTargetEntityName(std::string value);
    float GetInnerRadius() const;
    void SetInnerRadius(float value);
    float GetPushScale() const;
    void SetPushScale(float value);
    bool GetConvertToDebrisWhenPossible() const;
    void SetConvertToDebrisWhenPossible(bool value);
    GCEntityIOOutput GetOnPushedPlayer() const;
    void SetOnPushedPlayer(GCEntityIOOutput value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPointPush
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPointPush(std::string ptr, lua_State* state);
    GCPointPush(void *ptr);

    bool GetEnabled() const;
    void SetEnabled(bool value);
    float GetMagnitude() const;
    void SetMagnitude(float value);
    float GetRadius() const;
    void SetRadius(float value);
    float GetInnerRadius() const;
    void SetInnerRadius(float value);
    float GetConeOfInfluence() const;
    void SetConeOfInfluence(float value);
    std::string GetFilterName() const;
    void SetFilterName(std::string value);
    GCBaseFilter GetFilter() const;
    void SetFilter(GCBaseFilter value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCredits
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCredits(std::string ptr, lua_State* state);
    GCCredits(void *ptr);

    GCEntityIOOutput GetOnCreditsDone() const;
    void SetOnCreditsDone(GCEntityIOOutput value);
    bool GetRolledOutroCredits() const;
    void SetRolledOutroCredits(bool value);
    float GetLogoLength() const;
    void SetLogoLength(float value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSPlayerResource
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSPlayerResource(std::string ptr, lua_State* state);
    GCCSPlayerResource(void *ptr);

    std::vector<bool> GetHostageAlive() const;
    void SetHostageAlive(std::vector<bool> value);
    std::vector<bool> GetIsHostageFollowingSomeone() const;
    void SetIsHostageFollowingSomeone(std::vector<bool> value);
    std::vector<int> GetHostageEntityIDs() const;
    void SetHostageEntityIDs(std::vector<int> value);
    Vector GetBombsiteCenterA() const;
    void SetBombsiteCenterA(Vector value);
    Vector GetBombsiteCenterB() const;
    void SetBombsiteCenterB(Vector value);
    std::vector<int32_t> GetHostageRescueX() const;
    void SetHostageRescueX(std::vector<int32_t> value);
    std::vector<int32_t> GetHostageRescueY() const;
    void SetHostageRescueY(std::vector<int32_t> value);
    std::vector<int32_t> GetHostageRescueZ() const;
    void SetHostageRescueZ(std::vector<int32_t> value);
    bool GetEndMatchNextMapAllVoted() const;
    void SetEndMatchNextMapAllVoted(bool value);
    bool GetFoundGoalPositions() const;
    void SetFoundGoalPositions(bool value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPlayer_WeaponServices
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPlayer_WeaponServices(std::string ptr, lua_State* state);
    GCPlayer_WeaponServices(void *ptr);

    std::vector<GCBasePlayerWeapon> GetMyWeapons() const;
    void SetMyWeapons(std::vector<GCBasePlayerWeapon> value);
    GCBasePlayerWeapon GetActiveWeapon() const;
    void SetActiveWeapon(GCBasePlayerWeapon value);
    GCBasePlayerWeapon GetLastWeapon() const;
    void SetLastWeapon(GCBasePlayerWeapon value);
    std::vector<uint16_t> GetAmmo() const;
    void SetAmmo(std::vector<uint16_t> value);
    bool GetPreventWeaponPickup() const;
    void SetPreventWeaponPickup(bool value);
    GCPlayerPawnComponent GetParent() const;
    void SetParent(GCPlayerPawnComponent value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAttributeManager__cached_attribute_float_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAttributeManager__cached_attribute_float_t(std::string ptr, lua_State* state);
    GCAttributeManager__cached_attribute_float_t(void *ptr);

    float GetIn() const;
    void SetIn(float value);
    std::string GetAttribHook() const;
    void SetAttribHook(std::string value);
    float GetOut() const;
    void SetOut(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTeam
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTeam(std::string ptr, lua_State* state);
    GCTeam(void *ptr);

    std::vector<GCBasePlayerController> GetPlayerControllers() const;
    void SetPlayerControllers(std::vector<GCBasePlayerController> value);
    std::vector<GCBasePlayerPawn> GetPlayers() const;
    void SetPlayers(std::vector<GCBasePlayerPawn> value);
    int32_t GetScore() const;
    void SetScore(int32_t value);
    std::string GetTeamname() const;
    void SetTeamname(std::string value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSGameModeRules_Deathmatch
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSGameModeRules_Deathmatch(std::string ptr, lua_State* state);
    GCCSGameModeRules_Deathmatch(void *ptr);

    float GetDMBonusStartTime() const;
    void SetDMBonusStartTime(float value);
    float GetDMBonusTimeLength() const;
    void SetDMBonusTimeLength(float value);
    std::string GetDMBonusWeapon() const;
    void SetDMBonusWeapon(std::string value);
    GCCSGameModeRules GetParent() const;
    void SetParent(GCCSGameModeRules value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFuncNavObstruction
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFuncNavObstruction(std::string ptr, lua_State* state);
    GCFuncNavObstruction(void *ptr);

    bool GetDisabled() const;
    void SetDisabled(bool value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTriggerImpact
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTriggerImpact(std::string ptr, lua_State* state);
    GCTriggerImpact(void *ptr);

    float GetMagnitude() const;
    void SetMagnitude(float value);
    float GetNoise() const;
    void SetNoise(float value);
    float GetViewkick() const;
    void SetViewkick(float value);
    GCTriggerMultiple GetParent() const;
    void SetParent(GCTriggerMultiple value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSun
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSun(std::string ptr, lua_State* state);
    GCSun(void *ptr);

    Vector GetDirection() const;
    void SetDirection(Vector value);
    Color GetOverlay() const;
    void SetOverlay(Color value);
    std::string GetEffectName() const;
    void SetEffectName(std::string value);
    std::string GetSSEffectName() const;
    void SetSSEffectName(std::string value);
    bool GetOn() const;
    void SetOn(bool value);
    bool GetBmaxColor() const;
    void SetBmaxColor(bool value);
    float GetSize() const;
    void SetSize(float value);
    float GetRotation() const;
    void SetRotation(float value);
    float GetHazeScale() const;
    void SetHazeScale(float value);
    float GetAlphaHaze() const;
    void SetAlphaHaze(float value);
    float GetAlphaHdr() const;
    void SetAlphaHdr(float value);
    float GetAlphaScale() const;
    void SetAlphaScale(float value);
    float GetHDRColorScale() const;
    void SetHDRColorScale(float value);
    float GetFarZScale() const;
    void SetFarZScale(float value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTriggerDetectBulletFire
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTriggerDetectBulletFire(std::string ptr, lua_State* state);
    GCTriggerDetectBulletFire(void *ptr);

    bool GetPlayerFireOnly() const;
    void SetPlayerFireOnly(bool value);
    GCEntityIOOutput GetOnDetectedBulletFire() const;
    void SetOnDetectedBulletFire(GCEntityIOOutput value);
    GCBaseTrigger GetParent() const;
    void SetParent(GCBaseTrigger value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWorld
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWorld(std::string ptr, lua_State* state);
    GCWorld(void *ptr);

    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPointGiveAmmo
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPointGiveAmmo(std::string ptr, lua_State* state);
    GCPointGiveAmmo(void *ptr);

    GCBaseEntity GetActivator() const;
    void SetActivator(GCBaseEntity value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFuncMoveLinear
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFuncMoveLinear(std::string ptr, lua_State* state);
    GCFuncMoveLinear(void *ptr);

    uint64_t GetAuthoredPosition() const;
    void SetAuthoredPosition(uint64_t value);
    QAngle GetMoveEntitySpace() const;
    void SetMoveEntitySpace(QAngle value);
    Vector GetMoveDirParentSpace() const;
    void SetMoveDirParentSpace(Vector value);
    std::string GetSoundStart() const;
    void SetSoundStart(std::string value);
    std::string GetSoundStop() const;
    void SetSoundStop(std::string value);
    std::string GetCurrentSound() const;
    void SetCurrentSound(std::string value);
    float GetBlockDamage() const;
    void SetBlockDamage(float value);
    float GetStartPosition() const;
    void SetStartPosition(float value);
    GCEntityIOOutput GetOnFullyOpen() const;
    void SetOnFullyOpen(GCEntityIOOutput value);
    GCEntityIOOutput GetOnFullyClosed() const;
    void SetOnFullyClosed(GCEntityIOOutput value);
    bool GetCreateMovableNavMesh() const;
    void SetCreateMovableNavMesh(bool value);
    bool GetCreateNavObstacle() const;
    void SetCreateNavObstacle(bool value);
    GCBaseToggle GetParent() const;
    void SetParent(GCBaseToggle value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPathParticleRope
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPathParticleRope(std::string ptr, lua_State* state);
    GCPathParticleRope(void *ptr);

    bool GetStartActive() const;
    void SetStartActive(bool value);
    float GetMaxSimulationTime() const;
    void SetMaxSimulationTime(float value);
    std::string GetEffectName() const;
    void SetEffectName(std::string value);
    std::vector<CUtlSymbolLarge> GetPathNodes_Name() const;
    void SetPathNodes_Name(std::vector<CUtlSymbolLarge> value);
    float GetParticleSpacing() const;
    void SetParticleSpacing(float value);
    float GetSlack() const;
    void SetSlack(float value);
    float GetRadius() const;
    void SetRadius(float value);
    Color GetColorTint() const;
    void SetColorTint(Color value);
    int32_t GetEffectState() const;
    void SetEffectState(int32_t value);
    std::vector<Vector> GetPathNodes_Position() const;
    void SetPathNodes_Position(std::vector<Vector> value);
    std::vector<Vector> GetPathNodes_TangentIn() const;
    void SetPathNodes_TangentIn(std::vector<Vector> value);
    std::vector<Vector> GetPathNodes_TangentOut() const;
    void SetPathNodes_TangentOut(std::vector<Vector> value);
    std::vector<Vector> GetPathNodes_Color() const;
    void SetPathNodes_Color(std::vector<Vector> value);
    std::vector<bool> GetPathNodes_PinEnabled() const;
    void SetPathNodes_PinEnabled(std::vector<bool> value);
    std::vector<float32> GetPathNodes_RadiusScale() const;
    void SetPathNodes_RadiusScale(std::vector<float32> value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPlayerVisibility
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPlayerVisibility(std::string ptr, lua_State* state);
    GCPlayerVisibility(void *ptr);

    float GetVisibilityStrength() const;
    void SetVisibilityStrength(float value);
    float GetFogDistanceMultiplier() const;
    void SetFogDistanceMultiplier(float value);
    float GetFogMaxDensityMultiplier() const;
    void SetFogMaxDensityMultiplier(float value);
    float GetFadeTime() const;
    void SetFadeTime(float value);
    bool GetStartDisabled() const;
    void SetStartDisabled(bool value);
    bool GetIsEnabled() const;
    void SetIsEnabled(bool value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPointTeleport
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPointTeleport(std::string ptr, lua_State* state);
    GCPointTeleport(void *ptr);

    Vector GetSaveOrigin() const;
    void SetSaveOrigin(Vector value);
    QAngle GetSaveAngles() const;
    void SetSaveAngles(QAngle value);
    bool GetTeleportParentedEntities() const;
    void SetTeleportParentedEntities(bool value);
    bool GetTeleportUseCurrentAngle() const;
    void SetTeleportUseCurrentAngle(bool value);
    GCServerOnlyPointEntity GetParent() const;
    void SetParent(GCServerOnlyPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAK47
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAK47(std::string ptr, lua_State* state);
    GCAK47(void *ptr);

    GCCSWeaponBaseGun GetParent() const;
    void SetParent(GCCSWeaponBaseGun value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTriggerTeleport
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTriggerTeleport(std::string ptr, lua_State* state);
    GCTriggerTeleport(void *ptr);

    std::string GetLandmark() const;
    void SetLandmark(std::string value);
    bool GetUseLandmarkAngles() const;
    void SetUseLandmarkAngles(bool value);
    bool GetMirrorPlayer() const;
    void SetMirrorPlayer(bool value);
    GCBaseTrigger GetParent() const;
    void SetParent(GCBaseTrigger value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSObserver_CameraServices
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSObserver_CameraServices(std::string ptr, lua_State* state);
    GCCSObserver_CameraServices(void *ptr);

    GCCSPlayerBase_CameraServices GetParent() const;
    void SetParent(GCCSPlayerBase_CameraServices value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSGO_TeamIntroTerroristPosition
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSGO_TeamIntroTerroristPosition(std::string ptr, lua_State* state);
    GCCSGO_TeamIntroTerroristPosition(void *ptr);

    GCCSGO_TeamIntroCharacterPosition GetParent() const;
    void SetParent(GCCSGO_TeamIntroCharacterPosition value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFuncMover
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFuncMover(std::string ptr, lua_State* state);
    GCFuncMover(void *ptr);

    std::string GetPathName() const;
    void SetPathName(std::string value);
    GCPathMover GetPathMover() const;
    void SetPathMover(GCPathMover value);
    std::string GetPathNodeStart() const;
    void SetPathNodeStart(std::string value);
    GCFuncMover GetMoveType() const;
    void SetMoveType(GCFuncMover value);
    bool GetIsReversing() const;
    void SetIsReversing(bool value);
    Vector GetTarget() const;
    void SetTarget(Vector value);
    float GetStartSpeed() const;
    void SetStartSpeed(float value);
    float GetPathLocation() const;
    void SetPathLocation(float value);
    float GetT() const;
    void SetT(float value);
    int32_t GetCurrentNodeIndex() const;
    void SetCurrentNodeIndex(int32_t value);
    int32_t GetPreviousNodeIndex() const;
    void SetPreviousNodeIndex(int32_t value);
    bool GetFixedOrientation() const;
    void SetFixedOrientation(bool value);
    bool GetFixedPitch() const;
    void SetFixedPitch(bool value);
    uint64_t GetSolidType() const;
    void SetSolidType(uint64_t value);
    bool GetIsMoving() const;
    void SetIsMoving(bool value);
    float GetTimeToReachMaxSpeed() const;
    void SetTimeToReachMaxSpeed(float value);
    float GetTimeToReachZeroSpeed() const;
    void SetTimeToReachZeroSpeed(float value);
    float GetTimeMovementStart() const;
    void SetTimeMovementStart(float value);
    float GetTimeMovementStop() const;
    void SetTimeMovementStop(float value);
    GCMoverPathNode GetStopAtNode() const;
    void SetStopAtNode(GCMoverPathNode value);
    float GetPathLocationToBeginStop() const;
    void SetPathLocationToBeginStop(float value);
    bool GetMatchPathNodeUp() const;
    void SetMatchPathNodeUp(bool value);
    bool GetFacePlayer() const;
    void SetFacePlayer(bool value);
    float GetTimeStartRoll() const;
    void SetTimeStartRoll(float value);
    Vector GetOriginalUp() const;
    void SetOriginalUp(Vector value);
    float GetTimeToRollToNewUp() const;
    void SetTimeToRollToNewUp(float value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSPlayer_CameraServices
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSPlayer_CameraServices(std::string ptr, lua_State* state);
    GCCSPlayer_CameraServices(void *ptr);

    GCCSPlayerBase_CameraServices GetParent() const;
    void SetParent(GCCSPlayerBase_CameraServices value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCHEGrenade
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCHEGrenade(std::string ptr, lua_State* state);
    GCHEGrenade(void *ptr);

    GCBaseCSGrenade GetParent() const;
    void SetParent(GCBaseCSGrenade value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCGameEnd
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCGameEnd(std::string ptr, lua_State* state);
    GCGameEnd(void *ptr);

    GCRulePointEntity GetParent() const;
    void SetParent(GCRulePointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTriggerCallback
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTriggerCallback(std::string ptr, lua_State* state);
    GCTriggerCallback(void *ptr);

    GCBaseTrigger GetParent() const;
    void SetParent(GCBaseTrigger value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBubbling
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBubbling(std::string ptr, lua_State* state);
    GCBubbling(void *ptr);

    int32_t GetDensity() const;
    void SetDensity(int32_t value);
    int32_t GetFrequency() const;
    void SetFrequency(int32_t value);
    int32_t GetState() const;
    void SetState(int32_t value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTeamplayRules
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTeamplayRules(std::string ptr, lua_State* state);
    GCTeamplayRules(void *ptr);

    GCMultiplayRules GetParent() const;
    void SetParent(GCMultiplayRules value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPhysicsPropOverride
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPhysicsPropOverride(std::string ptr, lua_State* state);
    GCPhysicsPropOverride(void *ptr);

    GCPhysicsProp GetParent() const;
    void SetParent(GCPhysicsProp value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAI_ChangeHintGroup
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAI_ChangeHintGroup(std::string ptr, lua_State* state);
    GCAI_ChangeHintGroup(void *ptr);

    int32_t GetSearchType() const;
    void SetSearchType(int32_t value);
    std::string GetStrSearchName() const;
    void SetStrSearchName(std::string value);
    std::string GetStrNewHintGroup() const;
    void SetStrNewHintGroup(std::string value);
    float GetRadius() const;
    void SetRadius(float value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCColorCorrectionVolume
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCColorCorrectionVolume(std::string ptr, lua_State* state);
    GCColorCorrectionVolume(void *ptr);

    bool GetEnabled() const;
    void SetEnabled(bool value);
    float GetMaxWeight() const;
    void SetMaxWeight(float value);
    float GetFadeDuration() const;
    void SetFadeDuration(float value);
    bool GetStartDisabled() const;
    void SetStartDisabled(bool value);
    float GetWeight() const;
    void SetWeight(float value);
    std::string GetLookupFilename() const;
    void SetLookupFilename(std::string value);
    float GetLastEnterWeight() const;
    void SetLastEnterWeight(float value);
    float GetLastEnterTime() const;
    void SetLastEnterTime(float value);
    float GetLastExitWeight() const;
    void SetLastExitWeight(float value);
    float GetLastExitTime() const;
    void SetLastExitTime(float value);
    GCBaseTrigger GetParent() const;
    void SetParent(GCBaseTrigger value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFilterEnemy
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFilterEnemy(std::string ptr, lua_State* state);
    GCFilterEnemy(void *ptr);

    std::string GetEnemyName() const;
    void SetEnemyName(std::string value);
    float GetRadius() const;
    void SetRadius(float value);
    float GetOuterRadius() const;
    void SetOuterRadius(float value);
    int32_t GetMaxSquadmatesPerEnemy() const;
    void SetMaxSquadmatesPerEnemy(int32_t value);
    std::string GetPlayerName() const;
    void SetPlayerName(std::string value);
    GCBaseFilter GetParent() const;
    void SetParent(GCBaseFilter value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCShower
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCShower(std::string ptr, lua_State* state);
    GCShower(void *ptr);

    GCModelPointEntity GetParent() const;
    void SetParent(GCModelPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvCubemapFog
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvCubemapFog(std::string ptr, lua_State* state);
    GCEnvCubemapFog(void *ptr);

    float GetEndDistance() const;
    void SetEndDistance(float value);
    float GetStartDistance() const;
    void SetStartDistance(float value);
    float GetFogFalloffExponent() const;
    void SetFogFalloffExponent(float value);
    bool GetHeightFogEnabled() const;
    void SetHeightFogEnabled(bool value);
    float GetFogHeightWidth() const;
    void SetFogHeightWidth(float value);
    float GetFogHeightEnd() const;
    void SetFogHeightEnd(float value);
    float GetFogHeightStart() const;
    void SetFogHeightStart(float value);
    float GetFogHeightExponent() const;
    void SetFogHeightExponent(float value);
    float GetLODBias() const;
    void SetLODBias(float value);
    bool GetActive() const;
    void SetActive(bool value);
    bool GetStartDisabled() const;
    void SetStartDisabled(bool value);
    float GetFogMaxOpacity() const;
    void SetFogMaxOpacity(float value);
    int32_t GetCubemapSourceType() const;
    void SetCubemapSourceType(int32_t value);
    std::string GetSkyEntity() const;
    void SetSkyEntity(std::string value);
    bool GetHasHeightFogEnd() const;
    void SetHasHeightFogEnd(bool value);
    bool GetFirstTime() const;
    void SetFirstTime(bool value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBaseButton
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBaseButton(std::string ptr, lua_State* state);
    GCBaseButton(void *ptr);

    QAngle GetMoveEntitySpace() const;
    void SetMoveEntitySpace(QAngle value);
    bool GetStayPushed() const;
    void SetStayPushed(bool value);
    bool GetRotating() const;
    void SetRotating(bool value);
    Glocksound_t GetLs() const;
    void SetLs(Glocksound_t value);
    std::string GetUseSound() const;
    void SetUseSound(std::string value);
    std::string GetLockedSound() const;
    void SetLockedSound(std::string value);
    std::string GetUnlockedSound() const;
    void SetUnlockedSound(std::string value);
    std::string GetOverrideAnticipationName() const;
    void SetOverrideAnticipationName(std::string value);
    bool GetLocked() const;
    void SetLocked(bool value);
    bool GetDisabled() const;
    void SetDisabled(bool value);
    float GetUseLockedTime() const;
    void SetUseLockedTime(float value);
    bool GetSolidBsp() const;
    void SetSolidBsp(bool value);
    GCEntityIOOutput GetOnDamaged() const;
    void SetOnDamaged(GCEntityIOOutput value);
    GCEntityIOOutput GetOnPressed() const;
    void SetOnPressed(GCEntityIOOutput value);
    GCEntityIOOutput GetOnUseLocked() const;
    void SetOnUseLocked(GCEntityIOOutput value);
    GCEntityIOOutput GetOnIn() const;
    void SetOnIn(GCEntityIOOutput value);
    GCEntityIOOutput GetOnOut() const;
    void SetOnOut(GCEntityIOOutput value);
    int32_t GetState() const;
    void SetState(int32_t value);
    GCEntityInstance GetConstraint() const;
    void SetConstraint(GCEntityInstance value);
    GCEntityInstance GetConstraintParent() const;
    void SetConstraintParent(GCEntityInstance value);
    bool GetForceNpcExclude() const;
    void SetForceNpcExclude(bool value);
    std::string GetGlowEntity() const;
    void SetGlowEntity(std::string value);
    GCBaseModelEntity GetGlowEntity1() const;
    void SetGlowEntity1(GCBaseModelEntity value);
    bool GetUsable() const;
    void SetUsable(bool value);
    std::string GetDisplayText() const;
    void SetDisplayText(std::string value);
    GCBaseToggle GetParent() const;
    void SetParent(GCBaseToggle value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvExplosion
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvExplosion(std::string ptr, lua_State* state);
    GCEnvExplosion(void *ptr);

    int32_t GetMagnitude() const;
    void SetMagnitude(int32_t value);
    float GetPlayerDamage() const;
    void SetPlayerDamage(float value);
    int32_t GetRadiusOverride() const;
    void SetRadiusOverride(int32_t value);
    float GetInnerRadius() const;
    void SetInnerRadius(float value);
    int32_t GetSpriteScale() const;
    void SetSpriteScale(int32_t value);
    float GetDamageForce() const;
    void SetDamageForce(float value);
    GCBaseEntity GetInflictor() const;
    void SetInflictor(GCBaseEntity value);
    int32_t GetCustomDamageType() const;
    void SetCustomDamageType(int32_t value);
    std::string GetExplosionType() const;
    void SetExplosionType(std::string value);
    std::string GetCustomEffectName() const;
    void SetCustomEffectName(std::string value);
    std::string GetCustomSoundName() const;
    void SetCustomSoundName(std::string value);
    uint64_t GetClassIgnore() const;
    void SetClassIgnore(uint64_t value);
    uint64_t GetClassIgnore2() const;
    void SetClassIgnore2(uint64_t value);
    std::string GetEntityIgnoreName() const;
    void SetEntityIgnoreName(std::string value);
    GCBaseEntity GetEntityIgnore() const;
    void SetEntityIgnore(GCBaseEntity value);
    GCModelPointEntity GetParent() const;
    void SetParent(GCModelPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSoundEventAABBEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSoundEventAABBEntity(std::string ptr, lua_State* state);
    GCSoundEventAABBEntity(void *ptr);

    Vector GetMins() const;
    void SetMins(Vector value);
    Vector GetMaxs() const;
    void SetMaxs(Vector value);
    GCSoundEventEntity GetParent() const;
    void SetParent(GCSoundEventEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTriggerLook
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTriggerLook(std::string ptr, lua_State* state);
    GCTriggerLook(void *ptr);

    GCBaseEntity GetLookTarget() const;
    void SetLookTarget(GCBaseEntity value);
    float GetFieldOfView() const;
    void SetFieldOfView(float value);
    float GetLookTime() const;
    void SetLookTime(float value);
    float GetLookTimeTotal() const;
    void SetLookTimeTotal(float value);
    float GetLookTimeLast() const;
    void SetLookTimeLast(float value);
    float GetTimeoutDuration() const;
    void SetTimeoutDuration(float value);
    bool GetTimeoutFired() const;
    void SetTimeoutFired(bool value);
    bool GetIsLooking() const;
    void SetIsLooking(bool value);
    bool Get2DFOV() const;
    void Set2DFOV(bool value);
    bool GetUseVelocity() const;
    void SetUseVelocity(bool value);
    bool GetTestOcclusion() const;
    void SetTestOcclusion(bool value);
    GCEntityIOOutput GetOnTimeout() const;
    void SetOnTimeout(GCEntityIOOutput value);
    GCEntityIOOutput GetOnStartLook() const;
    void SetOnStartLook(GCEntityIOOutput value);
    GCEntityIOOutput GetOnEndLook() const;
    void SetOnEndLook(GCEntityIOOutput value);
    GCTriggerOnce GetParent() const;
    void SetParent(GCTriggerOnce value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEntitySubclassVDataBase
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEntitySubclassVDataBase(std::string ptr, lua_State* state);
    GCEntitySubclassVDataBase(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCLogicProximity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCLogicProximity(std::string ptr, lua_State* state);
    GCLogicProximity(void *ptr);

    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPointClientUIWorldPanel
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPointClientUIWorldPanel(std::string ptr, lua_State* state);
    GCPointClientUIWorldPanel(void *ptr);

    bool GetIgnoreInput() const;
    void SetIgnoreInput(bool value);
    bool GetLit() const;
    void SetLit(bool value);
    bool GetFollowPlayerAcrossTeleport() const;
    void SetFollowPlayerAcrossTeleport(bool value);
    float GetWidth() const;
    void SetWidth(float value);
    float GetHeight() const;
    void SetHeight(float value);
    float GetDPI() const;
    void SetDPI(float value);
    float GetInteractDistance() const;
    void SetInteractDistance(float value);
    float GetDepthOffset() const;
    void SetDepthOffset(float value);
    uint32_t GetOwnerContext() const;
    void SetOwnerContext(uint32_t value);
    uint32_t GetHorizontalAlign() const;
    void SetHorizontalAlign(uint32_t value);
    uint32_t GetVerticalAlign() const;
    void SetVerticalAlign(uint32_t value);
    uint32_t GetOrientation() const;
    void SetOrientation(uint32_t value);
    bool GetAllowInteractionFromAllSceneWorlds() const;
    void SetAllowInteractionFromAllSceneWorlds(bool value);
    std::vector<CUtlSymbolLarge> GetCSSClasses() const;
    void SetCSSClasses(std::vector<CUtlSymbolLarge> value);
    bool GetOpaque() const;
    void SetOpaque(bool value);
    bool GetNoDepth() const;
    void SetNoDepth(bool value);
    bool GetRenderBackface() const;
    void SetRenderBackface(bool value);
    bool GetUseOffScreenIndicator() const;
    void SetUseOffScreenIndicator(bool value);
    bool GetExcludeFromSaveGames() const;
    void SetExcludeFromSaveGames(bool value);
    bool GetGrabbable() const;
    void SetGrabbable(bool value);
    bool GetOnlyRenderToTexture() const;
    void SetOnlyRenderToTexture(bool value);
    bool GetDisableMipGen() const;
    void SetDisableMipGen(bool value);
    int32_t GetExplicitImageLayout() const;
    void SetExplicitImageLayout(int32_t value);
    GCBaseClientUIEntity GetParent() const;
    void SetParent(GCBaseClientUIEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFilterContext
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFilterContext(std::string ptr, lua_State* state);
    GCFilterContext(void *ptr);

    std::string GetFilterContext() const;
    void SetFilterContext(std::string value);
    GCBaseFilter GetParent() const;
    void SetParent(GCBaseFilter value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPathParticleRopeAlias_path_particle_rope_clientside
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPathParticleRopeAlias_path_particle_rope_clientside(std::string ptr, lua_State* state);
    GCPathParticleRopeAlias_path_particle_rope_clientside(void *ptr);

    GCPathParticleRope GetParent() const;
    void SetParent(GCPathParticleRope value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTriggerBuoyancy
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTriggerBuoyancy(std::string ptr, lua_State* state);
    GCTriggerBuoyancy(void *ptr);

    GCBuoyancyHelper GetBuoyancyHelper() const;
    void SetBuoyancyHelper(GCBuoyancyHelper value);
    float GetFluidDensity() const;
    void SetFluidDensity(float value);
    GCBaseTrigger GetParent() const;
    void SetParent(GCBaseTrigger value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFilterAttributeInt
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFilterAttributeInt(std::string ptr, lua_State* state);
    GCFilterAttributeInt(void *ptr);

    uint32_t GetAttributeName() const;
    void SetAttributeName(uint32_t value);
    GCBaseFilter GetParent() const;
    void SetParent(GCBaseFilter value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSPlayer_ActionTrackingServices
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSPlayer_ActionTrackingServices(std::string ptr, lua_State* state);
    GCCSPlayer_ActionTrackingServices(void *ptr);

    GCBasePlayerWeapon GetLastWeaponBeforeC4AutoSwitch() const;
    void SetLastWeaponBeforeC4AutoSwitch(GCBasePlayerWeapon value);
    bool GetIsRescuing() const;
    void SetIsRescuing(bool value);
    GWeaponPurchaseTracker_t GetWeaponPurchasesThisMatch() const;
    void SetWeaponPurchasesThisMatch(GWeaponPurchaseTracker_t value);
    GWeaponPurchaseTracker_t GetWeaponPurchasesThisRound() const;
    void SetWeaponPurchasesThisRound(GWeaponPurchaseTracker_t value);
    GCPlayerPawnComponent GetParent() const;
    void SetParent(GCPlayerPawnComponent value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAISound
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAISound(std::string ptr, lua_State* state);
    GCAISound(void *ptr);

    uint64_t GetSoundType() const;
    void SetSoundType(uint64_t value);
    uint64_t GetSoundFlags() const;
    void SetSoundFlags(uint64_t value);
    int32_t GetVolume() const;
    void SetVolume(int32_t value);
    int32_t GetSoundIndex() const;
    void SetSoundIndex(int32_t value);
    float GetDuration() const;
    void SetDuration(float value);
    std::string GetProxyEntityName() const;
    void SetProxyEntityName(std::string value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPointEntityFinder
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPointEntityFinder(std::string ptr, lua_State* state);
    GCPointEntityFinder(void *ptr);

    GCBaseEntity GetEntity() const;
    void SetEntity(GCBaseEntity value);
    std::string GetFilterName() const;
    void SetFilterName(std::string value);
    GCBaseFilter GetFilter() const;
    void SetFilter(GCBaseFilter value);
    std::string GetRefName() const;
    void SetRefName(std::string value);
    GCBaseEntity GetReference() const;
    void SetReference(GCBaseEntity value);
    uint64_t GetFindMethod() const;
    void SetFindMethod(uint64_t value);
    GCEntityIOOutput GetOnFoundEntity() const;
    void SetOnFoundEntity(GCEntityIOOutput value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class Gshard_model_desc_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    Gshard_model_desc_t(std::string ptr, lua_State* state);
    Gshard_model_desc_t(void *ptr);

    int32_t GetModelID() const;
    void SetModelID(int32_t value);
    uint64_t GetSolid() const;
    void SetSolid(uint64_t value);
    uint64_t GetShatterPanelMode() const;
    void SetShatterPanelMode(uint64_t value);
    Vector2D GetPanelSize() const;
    void SetPanelSize(Vector2D value);
    Vector2D GetStressPositionA() const;
    void SetStressPositionA(Vector2D value);
    Vector2D GetStressPositionB() const;
    void SetStressPositionB(Vector2D value);
    std::vector<Vector2D> GetPanelVertices() const;
    void SetPanelVertices(std::vector<Vector2D> value);
    float GetGlassHalfThickness() const;
    void SetGlassHalfThickness(float value);
    bool GetHasParent() const;
    void SetHasParent(bool value);
    bool GetParentFrozen() const;
    void SetParentFrozen(bool value);
    uint32_t GetSurfacePropStringToken() const;
    void SetSurfacePropStringToken(uint32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPhysicsPropRespawnable
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPhysicsPropRespawnable(std::string ptr, lua_State* state);
    GCPhysicsPropRespawnable(void *ptr);

    Vector GetOriginalSpawnOrigin() const;
    void SetOriginalSpawnOrigin(Vector value);
    QAngle GetOriginalSpawnAngles() const;
    void SetOriginalSpawnAngles(QAngle value);
    Vector GetOriginalMins() const;
    void SetOriginalMins(Vector value);
    Vector GetOriginalMaxs() const;
    void SetOriginalMaxs(Vector value);
    float GetRespawnDuration() const;
    void SetRespawnDuration(float value);
    GCPhysicsProp GetParent() const;
    void SetParent(GCPhysicsProp value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvSky
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvSky(std::string ptr, lua_State* state);
    GCEnvSky(void *ptr);

    bool GetStartDisabled() const;
    void SetStartDisabled(bool value);
    Color GetTintColor() const;
    void SetTintColor(Color value);
    Color GetTintColorLightingOnly() const;
    void SetTintColorLightingOnly(Color value);
    float GetBrightnessScale() const;
    void SetBrightnessScale(float value);
    int32_t GetFogType() const;
    void SetFogType(int32_t value);
    float GetFogMinStart() const;
    void SetFogMinStart(float value);
    float GetFogMinEnd() const;
    void SetFogMinEnd(float value);
    float GetFogMaxStart() const;
    void SetFogMaxStart(float value);
    float GetFogMaxEnd() const;
    void SetFogMaxEnd(float value);
    bool GetEnabled() const;
    void SetEnabled(bool value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPointVelocitySensor
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPointVelocitySensor(std::string ptr, lua_State* state);
    GCPointVelocitySensor(void *ptr);

    GCBaseEntity GetTargetEntity() const;
    void SetTargetEntity(GCBaseEntity value);
    Vector GetAxis() const;
    void SetAxis(Vector value);
    bool GetEnabled() const;
    void SetEnabled(bool value);
    float GetPrevVelocity() const;
    void SetPrevVelocity(float value);
    float GetAvgInterval() const;
    void SetAvgInterval(float value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFilterMassGreater
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFilterMassGreater(std::string ptr, lua_State* state);
    GCFilterMassGreater(void *ptr);

    float GetFilterMass() const;
    void SetFilterMass(float value);
    GCBaseFilter GetParent() const;
    void SetParent(GCBaseFilter value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFilterTeam
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFilterTeam(std::string ptr, lua_State* state);
    GFilterTeam(void *ptr);

    int32_t GetFilterTeam() const;
    void SetFilterTeam(int32_t value);
    GCBaseFilter GetParent() const;
    void SetParent(GCBaseFilter value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFuncTankTrain
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFuncTankTrain(std::string ptr, lua_State* state);
    GCFuncTankTrain(void *ptr);

    GCEntityIOOutput GetOnDeath() const;
    void SetOnDeath(GCEntityIOOutput value);
    GCFuncTrackTrain GetParent() const;
    void SetParent(GCFuncTrackTrain value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNullEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNullEntity(std::string ptr, lua_State* state);
    GCNullEntity(void *ptr);

    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSPointScriptExtensions_observer
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSPointScriptExtensions_observer(std::string ptr, lua_State* state);
    GCCSPointScriptExtensions_observer(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMarkupVolumeTagged
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMarkupVolumeTagged(std::string ptr, lua_State* state);
    GCMarkupVolumeTagged(void *ptr);

    bool GetIsGroup() const;
    void SetIsGroup(bool value);
    bool GetGroupByPrefab() const;
    void SetGroupByPrefab(bool value);
    bool GetGroupByVolume() const;
    void SetGroupByVolume(bool value);
    bool GetGroupOtherGroups() const;
    void SetGroupOtherGroups(bool value);
    bool GetIsInGroup() const;
    void SetIsInGroup(bool value);
    GCMarkupVolume GetParent() const;
    void SetParent(GCMarkupVolume value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBuyZone
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBuyZone(std::string ptr, lua_State* state);
    GCBuyZone(void *ptr);

    int32_t GetLegacyTeamNum() const;
    void SetLegacyTeamNum(int32_t value);
    GCBaseTrigger GetParent() const;
    void SetParent(GCBaseTrigger value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPointTemplate
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPointTemplate(std::string ptr, lua_State* state);
    GCPointTemplate(void *ptr);

    std::string GetWorldName() const;
    void SetWorldName(std::string value);
    std::string GetSource2EntityLumpName() const;
    void SetSource2EntityLumpName(std::string value);
    std::string GetEntityFilterName() const;
    void SetEntityFilterName(std::string value);
    float GetTimeoutInterval() const;
    void SetTimeoutInterval(float value);
    bool GetAsynchronouslySpawnEntities() const;
    void SetAsynchronouslySpawnEntities(bool value);
    GCEntityIOOutput GetOutputOnSpawned() const;
    void SetOutputOnSpawned(GCEntityIOOutput value);
    uint64_t GetClientOnlyEntityBehavior() const;
    void SetClientOnlyEntityBehavior(uint64_t value);
    uint64_t GetOwnerSpawnGroupType() const;
    void SetOwnerSpawnGroupType(uint64_t value);
    std::vector<uint32> GetCreatedSpawnGroupHandles() const;
    void SetCreatedSpawnGroupHandles(std::vector<uint32> value);
    std::vector<GCEntityInstance> GetSpawnedEntityHandles() const;
    void SetSpawnedEntityHandles(std::vector<GCEntityInstance> value);
    GCLogicalEntity GetParent() const;
    void SetParent(GCLogicalEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTripWireFire
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTripWireFire(std::string ptr, lua_State* state);
    GCTripWireFire(void *ptr);

    GCBaseCSGrenade GetParent() const;
    void SetParent(GCBaseCSGrenade value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPhysForce
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPhysForce(std::string ptr, lua_State* state);
    GCPhysForce(void *ptr);

    std::string GetNameAttach() const;
    void SetNameAttach(std::string value);
    float GetForce() const;
    void SetForce(float value);
    float GetForceTime() const;
    void SetForceTime(float value);
    GCBaseEntity GetAttachedObject() const;
    void SetAttachedObject(GCBaseEntity value);
    bool GetWasRestored() const;
    void SetWasRestored(bool value);
    GCConstantForceController GetIntegrator() const;
    void SetIntegrator(GCConstantForceController value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCLogicDistanceAutosave
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCLogicDistanceAutosave(std::string ptr, lua_State* state);
    GCLogicDistanceAutosave(void *ptr);

    std::string GetTargetEntity() const;
    void SetTargetEntity(std::string value);
    float GetDistanceToPlayer() const;
    void SetDistanceToPlayer(float value);
    bool GetForceNewLevelUnit() const;
    void SetForceNewLevelUnit(bool value);
    bool GetCheckCough() const;
    void SetCheckCough(bool value);
    bool GetThinkDangerous() const;
    void SetThinkDangerous(bool value);
    float GetDangerousTime() const;
    void SetDangerousTime(float value);
    GCLogicalEntity GetParent() const;
    void SetParent(GCLogicalEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCInfoDynamicShadowHint
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCInfoDynamicShadowHint(std::string ptr, lua_State* state);
    GCInfoDynamicShadowHint(void *ptr);

    bool GetDisabled() const;
    void SetDisabled(bool value);
    float GetRange() const;
    void SetRange(float value);
    int32_t GetImportance() const;
    void SetImportance(int32_t value);
    int32_t GetLightChoice() const;
    void SetLightChoice(int32_t value);
    GCBaseEntity GetLight() const;
    void SetLight(GCBaseEntity value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSoundOpvarSetOBBEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSoundOpvarSetOBBEntity(std::string ptr, lua_State* state);
    GCSoundOpvarSetOBBEntity(void *ptr);

    GCSoundOpvarSetAABBEntity GetParent() const;
    void SetParent(GCSoundOpvarSetAABBEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvWindShared__WindVariationEvent_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvWindShared__WindVariationEvent_t(std::string ptr, lua_State* state);
    GCEnvWindShared__WindVariationEvent_t(void *ptr);

    float GetWindAngleVariation() const;
    void SetWindAngleVariation(float value);
    float GetWindSpeedVariation() const;
    void SetWindSpeedVariation(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTakeDamageInfoAPI
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTakeDamageInfoAPI(std::string ptr, lua_State* state);
    GCTakeDamageInfoAPI(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCScriptTriggerOnce
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCScriptTriggerOnce(std::string ptr, lua_State* state);
    GCScriptTriggerOnce(void *ptr);

    Vector GetExtent() const;
    void SetExtent(Vector value);
    GCTriggerOnce GetParent() const;
    void SetParent(GCTriggerOnce value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNavWalkable
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNavWalkable(std::string ptr, lua_State* state);
    GCNavWalkable(void *ptr);

    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFuncMonitor
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFuncMonitor(std::string ptr, lua_State* state);
    GCFuncMonitor(void *ptr);

    std::string GetTargetCamera() const;
    void SetTargetCamera(std::string value);
    int32_t GetResolutionEnum() const;
    void SetResolutionEnum(int32_t value);
    bool GetRenderShadows() const;
    void SetRenderShadows(bool value);
    bool GetUseUniqueColorTarget() const;
    void SetUseUniqueColorTarget(bool value);
    std::string GetBrushModelName() const;
    void SetBrushModelName(std::string value);
    GCBaseEntity GetTargetCamera1() const;
    void SetTargetCamera1(GCBaseEntity value);
    bool GetEnabled() const;
    void SetEnabled(bool value);
    bool GetDraw3DSkybox() const;
    void SetDraw3DSkybox(bool value);
    bool GetStartEnabled() const;
    void SetStartEnabled(bool value);
    GCFuncBrush GetParent() const;
    void SetParent(GCFuncBrush value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFlashbangProjectile
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFlashbangProjectile(std::string ptr, lua_State* state);
    GCFlashbangProjectile(void *ptr);

    float GetTimeToDetonate() const;
    void SetTimeToDetonate(float value);
    uint32_t GetNumOpponentsHit() const;
    void SetNumOpponentsHit(uint32_t value);
    uint32_t GetNumTeammatesHit() const;
    void SetNumTeammatesHit(uint32_t value);
    GCBaseCSGrenadeProjectile GetParent() const;
    void SetParent(GCBaseCSGrenadeProjectile value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPointClientUIWorldTextPanel
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPointClientUIWorldTextPanel(std::string ptr, lua_State* state);
    GCPointClientUIWorldTextPanel(void *ptr);

    std::string GetMessageText() const;
    void SetMessageText(std::string value);
    GCPointClientUIWorldPanel GetParent() const;
    void SetParent(GCPointClientUIWorldPanel value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCInfoInstructorHintTarget
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCInfoInstructorHintTarget(std::string ptr, lua_State* state);
    GCInfoInstructorHintTarget(void *ptr);

    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSPlayer_HostageServices
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSPlayer_HostageServices(std::string ptr, lua_State* state);
    GCCSPlayer_HostageServices(void *ptr);

    GCBaseEntity GetCarriedHostage() const;
    void SetCarriedHostage(GCBaseEntity value);
    GCBaseEntity GetCarriedHostageProp() const;
    void SetCarriedHostageProp(GCBaseEntity value);
    GCPlayerPawnComponent GetParent() const;
    void SetParent(GCPlayerPawnComponent value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWeaponSSG08
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWeaponSSG08(std::string ptr, lua_State* state);
    GCWeaponSSG08(void *ptr);

    GCCSWeaponBaseGun GetParent() const;
    void SetParent(GCCSWeaponBaseGun value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBreachCharge
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBreachCharge(std::string ptr, lua_State* state);
    GCBreachCharge(void *ptr);

    GCCSWeaponBase GetParent() const;
    void SetParent(GCCSWeaponBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCLogicBranch
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCLogicBranch(std::string ptr, lua_State* state);
    GCLogicBranch(void *ptr);

    bool GetInValue() const;
    void SetInValue(bool value);
    GCEntityIOOutput GetOnTrue() const;
    void SetOnTrue(GCEntityIOOutput value);
    GCEntityIOOutput GetOnFalse() const;
    void SetOnFalse(GCEntityIOOutput value);
    GCLogicalEntity GetParent() const;
    void SetParent(GCLogicalEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWeaponUMP45
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWeaponUMP45(std::string ptr, lua_State* state);
    GCWeaponUMP45(void *ptr);

    GCCSWeaponBaseGun GetParent() const;
    void SetParent(GCCSWeaponBaseGun value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSpriteAlias_env_glow
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSpriteAlias_env_glow(std::string ptr, lua_State* state);
    GCSpriteAlias_env_glow(void *ptr);

    GCSprite GetParent() const;
    void SetParent(GCSprite value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPhysicalButton
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPhysicalButton(std::string ptr, lua_State* state);
    GCPhysicalButton(void *ptr);

    GCBaseButton GetParent() const;
    void SetParent(GCBaseButton value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPhysLength
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPhysLength(std::string ptr, lua_State* state);
    GCPhysLength(void *ptr);

    std::vector<Vector> GetOffset() const;
    void SetOffset(std::vector<Vector> value);
    Vector GetAttach() const;
    void SetAttach(Vector value);
    float GetAddLength() const;
    void SetAddLength(float value);
    float GetMinLength() const;
    void SetMinLength(float value);
    float GetTotalLength() const;
    void SetTotalLength(float value);
    bool GetEnableCollision() const;
    void SetEnableCollision(bool value);
    GCPhysConstraint GetParent() const;
    void SetParent(GCPhysConstraint value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCLogicNPCCounterOBB
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCLogicNPCCounterOBB(std::string ptr, lua_State* state);
    GCLogicNPCCounterOBB(void *ptr);

    GCLogicNPCCounterAABB GetParent() const;
    void SetParent(GCLogicNPCCounterAABB value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSGOViewModel
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSGOViewModel(std::string ptr, lua_State* state);
    GCCSGOViewModel(void *ptr);

    bool GetShouldIgnoreOffsetAndAccuracy() const;
    void SetShouldIgnoreOffsetAndAccuracy(bool value);
    uint32_t GetWeaponParity() const;
    void SetWeaponParity(uint32_t value);
    uint32_t GetOldWeaponParity() const;
    void SetOldWeaponParity(uint32_t value);
    GCPredictedViewModel GetParent() const;
    void SetParent(GCPredictedViewModel value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWeaponShield
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWeaponShield(std::string ptr, lua_State* state);
    GCWeaponShield(void *ptr);

    float GetBulletDamageAbsorbed() const;
    void SetBulletDamageAbsorbed(float value);
    float GetLastBulletHitSoundTime() const;
    void SetLastBulletHitSoundTime(float value);
    float GetDisplayHealth() const;
    void SetDisplayHealth(float value);
    GCCSWeaponBaseGun GetParent() const;
    void SetParent(GCCSWeaponBaseGun value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBlood
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBlood(std::string ptr, lua_State* state);
    GCBlood(void *ptr);

    QAngle GetSprayAngles() const;
    void SetSprayAngles(QAngle value);
    Vector GetSprayDir() const;
    void SetSprayDir(Vector value);
    float GetAmount() const;
    void SetAmount(float value);
    uint64_t GetColor() const;
    void SetColor(uint64_t value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvFade
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvFade(std::string ptr, lua_State* state);
    GCEnvFade(void *ptr);

    Color GetFadeColor() const;
    void SetFadeColor(Color value);
    float GetDuration() const;
    void SetDuration(float value);
    float GetHoldDuration() const;
    void SetHoldDuration(float value);
    GCEntityIOOutput GetOnBeginFade() const;
    void SetOnBeginFade(GCEntityIOOutput value);
    GCLogicalEntity GetParent() const;
    void SetParent(GCLogicalEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCDynamicPropAlias_cable_dynamic
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCDynamicPropAlias_cable_dynamic(std::string ptr, lua_State* state);
    GCDynamicPropAlias_cable_dynamic(void *ptr);

    GCDynamicProp GetParent() const;
    void SetParent(GCDynamicProp value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSPlayer_BuyServices
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSPlayer_BuyServices(std::string ptr, lua_State* state);
    GCCSPlayer_BuyServices(void *ptr);

    std::vector<GSellbackPurchaseEntry_t> GetSellbackPurchaseEntries() const;
    void SetSellbackPurchaseEntries(std::vector<GSellbackPurchaseEntry_t> value);
    GCPlayerPawnComponent GetParent() const;
    void SetParent(GCPlayerPawnComponent value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCHostageExpresserShim
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCHostageExpresserShim(std::string ptr, lua_State* state);
    GCHostageExpresserShim(void *ptr);

    GCAI_Expresser GetExpresser() const;
    void SetExpresser(GCAI_Expresser value);
    GCBaseCombatCharacter GetParent() const;
    void SetParent(GCBaseCombatCharacter value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCInferno
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCInferno(std::string ptr, lua_State* state);
    GCInferno(void *ptr);

    std::vector<Vector> GetFirePositions() const;
    void SetFirePositions(std::vector<Vector> value);
    std::vector<Vector> GetFireParentPositions() const;
    void SetFireParentPositions(std::vector<Vector> value);
    std::vector<bool> GetFireIsBurning() const;
    void SetFireIsBurning(std::vector<bool> value);
    std::vector<Vector> GetBurnNormal() const;
    void SetBurnNormal(std::vector<Vector> value);
    int32_t GetFireCount() const;
    void SetFireCount(int32_t value);
    int32_t GetInfernoType() const;
    void SetInfernoType(int32_t value);
    int32_t GetFireEffectTickBegin() const;
    void SetFireEffectTickBegin(int32_t value);
    float GetFireLifetime() const;
    void SetFireLifetime(float value);
    bool GetInPostEffectTime() const;
    void SetInPostEffectTime(bool value);
    int32_t GetFiresExtinguishCount() const;
    void SetFiresExtinguishCount(int32_t value);
    bool GetWasCreatedInSmoke() const;
    void SetWasCreatedInSmoke(bool value);
    GExtent GetExtent() const;
    void SetExtent(GExtent value);
    GCountdownTimer GetDamageTimer() const;
    void SetDamageTimer(GCountdownTimer value);
    GCountdownTimer GetDamageRampTimer() const;
    void SetDamageRampTimer(GCountdownTimer value);
    Vector GetSplashVelocity() const;
    void SetSplashVelocity(Vector value);
    Vector GetInitialSplashVelocity() const;
    void SetInitialSplashVelocity(Vector value);
    Vector GetStartPos() const;
    void SetStartPos(Vector value);
    Vector GetOriginalSpawnLocation() const;
    void SetOriginalSpawnLocation(Vector value);
    GIntervalTimer GetActiveTimer() const;
    void SetActiveTimer(GIntervalTimer value);
    int32_t GetFireSpawnOffset() const;
    void SetFireSpawnOffset(int32_t value);
    int32_t GetMaxFlames() const;
    void SetMaxFlames(int32_t value);
    int32_t GetSpreadCount() const;
    void SetSpreadCount(int32_t value);
    GCountdownTimer GetBookkeepingTimer() const;
    void SetBookkeepingTimer(GCountdownTimer value);
    GCountdownTimer GetNextSpreadTimer() const;
    void SetNextSpreadTimer(GCountdownTimer value);
    uint16_t GetSourceItemDefIndex() const;
    void SetSourceItemDefIndex(uint16_t value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvGlobal
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvGlobal(std::string ptr, lua_State* state);
    GCEnvGlobal(void *ptr);

    std::string GetGlobalstate() const;
    void SetGlobalstate(std::string value);
    int32_t GetTriggermode() const;
    void SetTriggermode(int32_t value);
    int32_t GetInitialstate() const;
    void SetInitialstate(int32_t value);
    int32_t GetCounter() const;
    void SetCounter(int32_t value);
    GCLogicalEntity GetParent() const;
    void SetParent(GCLogicalEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFilterName
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFilterName(std::string ptr, lua_State* state);
    GCFilterName(void *ptr);

    std::string GetFilterName() const;
    void SetFilterName(std::string value);
    GCBaseFilter GetParent() const;
    void SetParent(GCBaseFilter value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSTeam
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSTeam(std::string ptr, lua_State* state);
    GCCSTeam(void *ptr);

    int32_t GetLastRecievedShorthandedRoundBonus() const;
    void SetLastRecievedShorthandedRoundBonus(int32_t value);
    int32_t GetShorthandedRoundBonusStartRound() const;
    void SetShorthandedRoundBonusStartRound(int32_t value);
    bool GetSurrendered() const;
    void SetSurrendered(bool value);
    std::string GetTeamMatchStat() const;
    void SetTeamMatchStat(std::string value);
    int32_t GetNumMapVictories() const;
    void SetNumMapVictories(int32_t value);
    int32_t GetScoreFirstHalf() const;
    void SetScoreFirstHalf(int32_t value);
    int32_t GetScoreSecondHalf() const;
    void SetScoreSecondHalf(int32_t value);
    int32_t GetScoreOvertime() const;
    void SetScoreOvertime(int32_t value);
    std::string GetClanTeamname() const;
    void SetClanTeamname(std::string value);
    uint32_t GetClanID() const;
    void SetClanID(uint32_t value);
    std::string GetTeamFlagImage() const;
    void SetTeamFlagImage(std::string value);
    std::string GetTeamLogoImage() const;
    void SetTeamLogoImage(std::string value);
    float GetNextResourceTime() const;
    void SetNextResourceTime(float value);
    int32_t GetLastUpdateSentAt() const;
    void SetLastUpdateSentAt(int32_t value);
    GCTeam GetParent() const;
    void SetParent(GCTeam value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWeaponUSPSilencer
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWeaponUSPSilencer(std::string ptr, lua_State* state);
    GCWeaponUSPSilencer(void *ptr);

    GCCSWeaponBaseGun GetParent() const;
    void SetParent(GCCSWeaponBaseGun value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSpriteOriented
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSpriteOriented(std::string ptr, lua_State* state);
    GCSpriteOriented(void *ptr);

    GCSprite GetParent() const;
    void SetParent(GCSprite value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTriggerGravity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTriggerGravity(std::string ptr, lua_State* state);
    GCTriggerGravity(void *ptr);

    GCBaseTrigger GetParent() const;
    void SetParent(GCBaseTrigger value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCServerRagdollTrigger
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCServerRagdollTrigger(std::string ptr, lua_State* state);
    GCServerRagdollTrigger(void *ptr);

    GCBaseTrigger GetParent() const;
    void SetParent(GCBaseTrigger value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCInfoDynamicShadowHintBox
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCInfoDynamicShadowHintBox(std::string ptr, lua_State* state);
    GCInfoDynamicShadowHintBox(void *ptr);

    Vector GetBoxMins() const;
    void SetBoxMins(Vector value);
    Vector GetBoxMaxs() const;
    void SetBoxMaxs(Vector value);
    GCInfoDynamicShadowHint GetParent() const;
    void SetParent(GCInfoDynamicShadowHint value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPathMover
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPathMover(std::string ptr, lua_State* state);
    GCPathMover(void *ptr);

    float GetPathLength() const;
    void SetPathLength(float value);
    bool GetClosedLoop() const;
    void SetClosedLoop(bool value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFlashbang
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFlashbang(std::string ptr, lua_State* state);
    GCFlashbang(void *ptr);

    GCBaseCSGrenade GetParent() const;
    void SetParent(GCBaseCSGrenade value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWeaponAug
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWeaponAug(std::string ptr, lua_State* state);
    GCWeaponAug(void *ptr);

    GCCSWeaponBaseGun GetParent() const;
    void SetParent(GCCSWeaponBaseGun value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCIncendiaryGrenade
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCIncendiaryGrenade(std::string ptr, lua_State* state);
    GCIncendiaryGrenade(void *ptr);

    GCMolotovGrenade GetParent() const;
    void SetParent(GCMolotovGrenade value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCChangeLevel
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCChangeLevel(std::string ptr, lua_State* state);
    GCChangeLevel(void *ptr);

    std::string GetMapName() const;
    void SetMapName(std::string value);
    std::string GetLandmarkName() const;
    void SetLandmarkName(std::string value);
    GCEntityIOOutput GetOnChangeLevel() const;
    void SetOnChangeLevel(GCEntityIOOutput value);
    bool GetTouched() const;
    void SetTouched(bool value);
    bool GetNoTouch() const;
    void SetNoTouch(bool value);
    bool GetNewChapter() const;
    void SetNewChapter(bool value);
    bool GetOnChangeLevelFired() const;
    void SetOnChangeLevelFired(bool value);
    GCBaseTrigger GetParent() const;
    void SetParent(GCBaseTrigger value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTriggerLerpObject
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTriggerLerpObject(std::string ptr, lua_State* state);
    GCTriggerLerpObject(void *ptr);

    std::string GetLerpTarget() const;
    void SetLerpTarget(std::string value);
    GCBaseEntity GetLerpTarget1() const;
    void SetLerpTarget1(GCBaseEntity value);
    std::string GetLerpTargetAttachment() const;
    void SetLerpTargetAttachment(std::string value);
    float GetLerpDuration() const;
    void SetLerpDuration(float value);
    bool GetLerpRestoreMoveType() const;
    void SetLerpRestoreMoveType(bool value);
    bool GetSingleLerpObject() const;
    void SetSingleLerpObject(bool value);
    std::vector<Glerpdata_t> GetLerpingObjects() const;
    void SetLerpingObjects(std::vector<Glerpdata_t> value);
    std::string GetLerpEffect() const;
    void SetLerpEffect(std::string value);
    std::string GetLerpSound() const;
    void SetLerpSound(std::string value);
    bool GetAttachTouchingObject() const;
    void SetAttachTouchingObject(bool value);
    GCBaseEntity GetEntityToWaitForDisconnect() const;
    void SetEntityToWaitForDisconnect(GCBaseEntity value);
    GCEntityIOOutput GetOnLerpStarted() const;
    void SetOnLerpStarted(GCEntityIOOutput value);
    GCEntityIOOutput GetOnLerpFinished() const;
    void SetOnLerpFinished(GCEntityIOOutput value);
    GCBaseTrigger GetParent() const;
    void SetParent(GCBaseTrigger value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTriggerSoundscape
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTriggerSoundscape(std::string ptr, lua_State* state);
    GCTriggerSoundscape(void *ptr);

    GCEnvSoundscapeTriggerable GetSoundscape() const;
    void SetSoundscape(GCEnvSoundscapeTriggerable value);
    std::string GetSoundscapeName() const;
    void SetSoundscapeName(std::string value);
    GCBaseTrigger GetParent() const;
    void SetParent(GCBaseTrigger value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCLogicScript
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCLogicScript(std::string ptr, lua_State* state);
    GCLogicScript(void *ptr);

    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWeaponFiveSeven
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWeaponFiveSeven(std::string ptr, lua_State* state);
    GCWeaponFiveSeven(void *ptr);

    GCCSWeaponBaseGun GetParent() const;
    void SetParent(GCCSWeaponBaseGun value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTriggerBrush
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTriggerBrush(std::string ptr, lua_State* state);
    GCTriggerBrush(void *ptr);

    GCEntityIOOutput GetOnStartTouch() const;
    void SetOnStartTouch(GCEntityIOOutput value);
    GCEntityIOOutput GetOnEndTouch() const;
    void SetOnEndTouch(GCEntityIOOutput value);
    GCEntityIOOutput GetOnUse() const;
    void SetOnUse(GCEntityIOOutput value);
    int32_t GetInputFilter() const;
    void SetInputFilter(int32_t value);
    int32_t GetDontMessageParent() const;
    void SetDontMessageParent(int32_t value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPhysicsEntitySolver
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPhysicsEntitySolver(std::string ptr, lua_State* state);
    GCPhysicsEntitySolver(void *ptr);

    GCBaseEntity GetMovingEntity() const;
    void SetMovingEntity(GCBaseEntity value);
    GCBaseEntity GetPhysicsBlocker() const;
    void SetPhysicsBlocker(GCBaseEntity value);
    float GetSeparationDuration() const;
    void SetSeparationDuration(float value);
    float GetCancelTime() const;
    void SetCancelTime(float value);
    GCLogicalEntity GetParent() const;
    void SetParent(GCLogicalEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNetworkedSequenceOperation
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNetworkedSequenceOperation(std::string ptr, lua_State* state);
    GCNetworkedSequenceOperation(void *ptr);

    float GetPrevCycle() const;
    void SetPrevCycle(float value);
    float GetCycle() const;
    void SetCycle(float value);
    float GetWeight() const;
    void SetWeight(float value);
    bool GetSequenceChangeNetworked() const;
    void SetSequenceChangeNetworked(bool value);
    bool GetDiscontinuity() const;
    void SetDiscontinuity(bool value);
    float GetPrevCycleFromDiscontinuity() const;
    void SetPrevCycleFromDiscontinuity(float value);
    float GetPrevCycleForAnimEventDetection() const;
    void SetPrevCycleForAnimEventDetection(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPointWorldText
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPointWorldText(std::string ptr, lua_State* state);
    GCPointWorldText(void *ptr);

    std::string GetMessageText() const;
    void SetMessageText(std::string value);
    std::string GetFontName() const;
    void SetFontName(std::string value);
    bool GetEnabled() const;
    void SetEnabled(bool value);
    bool GetFullbright() const;
    void SetFullbright(bool value);
    float GetWorldUnitsPerPx() const;
    void SetWorldUnitsPerPx(float value);
    float GetFontSize() const;
    void SetFontSize(float value);
    float GetDepthOffset() const;
    void SetDepthOffset(float value);
    Color GetColor() const;
    void SetColor(Color value);
    uint64_t GetJustifyHorizontal() const;
    void SetJustifyHorizontal(uint64_t value);
    uint64_t GetJustifyVertical() const;
    void SetJustifyVertical(uint64_t value);
    uint64_t GetReorientMode() const;
    void SetReorientMode(uint64_t value);
    GCModelPointEntity GetParent() const;
    void SetParent(GCModelPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSoundAreaEntityOrientedBox
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSoundAreaEntityOrientedBox(std::string ptr, lua_State* state);
    GCSoundAreaEntityOrientedBox(void *ptr);

    Vector GetMin() const;
    void SetMin(Vector value);
    Vector GetMax() const;
    void SetMax(Vector value);
    GCSoundAreaEntityBase GetParent() const;
    void SetParent(GCSoundAreaEntityBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTriggerPhysics
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTriggerPhysics(std::string ptr, lua_State* state);
    GCTriggerPhysics(void *ptr);

    float GetGravityScale() const;
    void SetGravityScale(float value);
    float GetLinearLimit() const;
    void SetLinearLimit(float value);
    float GetLinearDamping() const;
    void SetLinearDamping(float value);
    float GetAngularLimit() const;
    void SetAngularLimit(float value);
    float GetAngularDamping() const;
    void SetAngularDamping(float value);
    float GetLinearForce() const;
    void SetLinearForce(float value);
    float GetFrequency() const;
    void SetFrequency(float value);
    float GetDampingRatio() const;
    void SetDampingRatio(float value);
    Vector GetLinearForcePointAt() const;
    void SetLinearForcePointAt(Vector value);
    bool GetCollapseToForcePoint() const;
    void SetCollapseToForcePoint(bool value);
    Vector GetLinearForcePointAtWorld() const;
    void SetLinearForcePointAtWorld(Vector value);
    Vector GetLinearForceDirection() const;
    void SetLinearForceDirection(Vector value);
    bool GetConvertToDebrisWhenPossible() const;
    void SetConvertToDebrisWhenPossible(bool value);
    GCBaseTrigger GetParent() const;
    void SetParent(GCBaseTrigger value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEntityRenderAttribute_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEntityRenderAttribute_t(std::string ptr, lua_State* state);
    GEntityRenderAttribute_t(void *ptr);

    uint32_t GetID() const;
    void SetID(uint32_t value);
    Vector4D GetValues() const;
    void SetValues(Vector4D value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPointBroadcastClientCommand
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPointBroadcastClientCommand(std::string ptr, lua_State* state);
    GCPointBroadcastClientCommand(void *ptr);

    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFuncShatterglass
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFuncShatterglass(std::string ptr, lua_State* state);
    GCFuncShatterglass(void *ptr);

    std::vector<uint32> GetShatterGlassShards() const;
    void SetShatterGlassShards(std::vector<uint32> value);
    Vector2D GetPanelSize() const;
    void SetPanelSize(Vector2D value);
    Vector GetPanelNormalWs() const;
    void SetPanelNormalWs(Vector value);
    int32_t GetNumShardsEverCreated() const;
    void SetNumShardsEverCreated(int32_t value);
    float GetLastShatterSoundEmitTime() const;
    void SetLastShatterSoundEmitTime(float value);
    float GetLastCleanupTime() const;
    void SetLastCleanupTime(float value);
    float GetInitAtTime() const;
    void SetInitAtTime(float value);
    float GetGlassThickness() const;
    void SetGlassThickness(float value);
    float GetSpawnInvulnerability() const;
    void SetSpawnInvulnerability(float value);
    bool GetBreakSilent() const;
    void SetBreakSilent(bool value);
    bool GetBreakShardless() const;
    void SetBreakShardless(bool value);
    bool GetBroken() const;
    void SetBroken(bool value);
    bool GetHasRateLimitedShards() const;
    void SetHasRateLimitedShards(bool value);
    bool GetGlassNavIgnore() const;
    void SetGlassNavIgnore(bool value);
    bool GetGlassInFrame() const;
    void SetGlassInFrame(bool value);
    bool GetStartBroken() const;
    void SetStartBroken(bool value);
    uint32_t GetInitialDamageType() const;
    void SetInitialDamageType(uint32_t value);
    std::string GetDamagePositioningEntityName01() const;
    void SetDamagePositioningEntityName01(std::string value);
    std::string GetDamagePositioningEntityName02() const;
    void SetDamagePositioningEntityName02(std::string value);
    std::string GetDamagePositioningEntityName03() const;
    void SetDamagePositioningEntityName03(std::string value);
    std::string GetDamagePositioningEntityName04() const;
    void SetDamagePositioningEntityName04(std::string value);
    std::vector<Vector> GetInitialDamagePositions() const;
    void SetInitialDamagePositions(std::vector<Vector> value);
    std::vector<Vector> GetExtraDamagePositions() const;
    void SetExtraDamagePositions(std::vector<Vector> value);
    GCEntityIOOutput GetOnBroken() const;
    void SetOnBroken(GCEntityIOOutput value);
    uint32_t GetSurfaceType() const;
    void SetSurfaceType(uint32_t value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCRotButton
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCRotButton(std::string ptr, lua_State* state);
    GCRotButton(void *ptr);

    GCBaseButton GetParent() const;
    void SetParent(GCBaseButton value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSoundEventSphereEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSoundEventSphereEntity(std::string ptr, lua_State* state);
    GCSoundEventSphereEntity(void *ptr);

    float GetRadius() const;
    void SetRadius(float value);
    GCSoundEventEntity GetParent() const;
    void SetParent(GCSoundEventEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWeaponHKP2000
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWeaponHKP2000(std::string ptr, lua_State* state);
    GCWeaponHKP2000(void *ptr);

    GCCSWeaponBaseGun GetParent() const;
    void SetParent(GCCSWeaponBaseGun value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPlantedC4
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPlantedC4(std::string ptr, lua_State* state);
    GCPlantedC4(void *ptr);

    bool GetBombTicking() const;
    void SetBombTicking(bool value);
    float GetC4Blow() const;
    void SetC4Blow(float value);
    int32_t GetBombSite() const;
    void SetBombSite(int32_t value);
    int32_t GetSourceSoundscapeHash() const;
    void SetSourceSoundscapeHash(int32_t value);
    GCEntityIOOutput GetOnBombDefused() const;
    void SetOnBombDefused(GCEntityIOOutput value);
    GCEntityIOOutput GetOnBombBeginDefuse() const;
    void SetOnBombBeginDefuse(GCEntityIOOutput value);
    GCEntityIOOutput GetOnBombDefuseAborted() const;
    void SetOnBombDefuseAborted(GCEntityIOOutput value);
    bool GetCannotBeDefused() const;
    void SetCannotBeDefused(bool value);
    GEntitySpottedState_t GetEntitySpottedState() const;
    void SetEntitySpottedState(GEntitySpottedState_t value);
    int32_t GetSpotRules() const;
    void SetSpotRules(int32_t value);
    bool GetTrainingPlacedByPlayer() const;
    void SetTrainingPlacedByPlayer(bool value);
    bool GetHasExploded() const;
    void SetHasExploded(bool value);
    float GetTimerLength() const;
    void SetTimerLength(float value);
    bool GetBeingDefused() const;
    void SetBeingDefused(bool value);
    float GetLastDefuseTime() const;
    void SetLastDefuseTime(float value);
    float GetDefuseLength() const;
    void SetDefuseLength(float value);
    float GetDefuseCountDown() const;
    void SetDefuseCountDown(float value);
    bool GetBombDefused() const;
    void SetBombDefused(bool value);
    GCCSPlayerPawn GetBombDefuser() const;
    void SetBombDefuser(GCCSPlayerPawn value);
    GCBaseEntity GetControlPanel() const;
    void SetControlPanel(GCBaseEntity value);
    int32_t GetProgressBarTime() const;
    void SetProgressBarTime(int32_t value);
    bool GetVoiceAlertFired() const;
    void SetVoiceAlertFired(bool value);
    std::vector<bool> GetVoiceAlertPlayed() const;
    void SetVoiceAlertPlayed(std::vector<bool> value);
    float GetNextBotBeepTime() const;
    void SetNextBotBeepTime(float value);
    QAngle GetCatchUpToPlayerEye() const;
    void SetCatchUpToPlayerEye(QAngle value);
    float GetLastSpinDetectionTime() const;
    void SetLastSpinDetectionTime(float value);
    GCBaseAnimGraph GetParent() const;
    void SetParent(GCBaseAnimGraph value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPointClientUIDialog
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPointClientUIDialog(std::string ptr, lua_State* state);
    GCPointClientUIDialog(void *ptr);

    GCBaseEntity GetActivator() const;
    void SetActivator(GCBaseEntity value);
    bool GetStartEnabled() const;
    void SetStartEnabled(bool value);
    GCBaseClientUIEntity GetParent() const;
    void SetParent(GCBaseClientUIEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvSplash
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvSplash(std::string ptr, lua_State* state);
    GCEnvSplash(void *ptr);

    float GetScale() const;
    void SetScale(float value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSkyCamera
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSkyCamera(std::string ptr, lua_State* state);
    GCSkyCamera(void *ptr);

    Gsky3dparams_t GetSkyboxData() const;
    void SetSkyboxData(Gsky3dparams_t value);
    uint32_t GetSkyboxSlotToken() const;
    void SetSkyboxSlotToken(uint32_t value);
    bool GetUseAngles() const;
    void SetUseAngles(bool value);
    GCSkyCamera GetNext() const;
    void SetNext(GCSkyCamera value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWeaponNOVA
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWeaponNOVA(std::string ptr, lua_State* state);
    GCWeaponNOVA(void *ptr);

    GCCSWeaponBase GetParent() const;
    void SetParent(GCCSWeaponBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPointCameraVFOV
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPointCameraVFOV(std::string ptr, lua_State* state);
    GCPointCameraVFOV(void *ptr);

    float GetVerticalFOV() const;
    void SetVerticalFOV(float value);
    GCPointCamera GetParent() const;
    void SetParent(GCPointCamera value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWeaponTaser
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWeaponTaser(std::string ptr, lua_State* state);
    GCWeaponTaser(void *ptr);

    float GetFireTime() const;
    void SetFireTime(float value);
    int32_t GetLastAttackTick() const;
    void SetLastAttackTick(int32_t value);
    GCCSWeaponBaseGun GetParent() const;
    void SetParent(GCCSWeaponBaseGun value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWaterBullet
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWaterBullet(std::string ptr, lua_State* state);
    GCWaterBullet(void *ptr);

    GCBaseAnimGraph GetParent() const;
    void SetParent(GCBaseAnimGraph value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMarkupVolumeWithRef
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMarkupVolumeWithRef(std::string ptr, lua_State* state);
    GCMarkupVolumeWithRef(void *ptr);

    bool GetUseRef() const;
    void SetUseRef(bool value);
    Vector GetRefPos() const;
    void SetRefPos(Vector value);
    float GetRefDot() const;
    void SetRefDot(float value);
    GCMarkupVolumeTagged GetParent() const;
    void SetParent(GCMarkupVolumeTagged value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMessage
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMessage(std::string ptr, lua_State* state);
    GCMessage(void *ptr);

    std::string GetMessage() const;
    void SetMessage(std::string value);
    float GetMessageVolume() const;
    void SetMessageVolume(float value);
    int32_t GetMessageAttenuation() const;
    void SetMessageAttenuation(int32_t value);
    float GetRadius() const;
    void SetRadius(float value);
    std::string GetNoise() const;
    void SetNoise(std::string value);
    GCEntityIOOutput GetOnShowMessage() const;
    void SetOnShowMessage(GCEntityIOOutput value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCLogicGameEventListener
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCLogicGameEventListener(std::string ptr, lua_State* state);
    GCLogicGameEventListener(void *ptr);

    GCEntityIOOutput GetOnEventFired() const;
    void SetOnEventFired(GCEntityIOOutput value);
    std::string GetGameEventName() const;
    void SetGameEventName(std::string value);
    std::string GetGameEventItem() const;
    void SetGameEventItem(std::string value);
    bool GetEnabled() const;
    void SetEnabled(bool value);
    bool GetStartDisabled() const;
    void SetStartDisabled(bool value);
    GCLogicalEntity GetParent() const;
    void SetParent(GCLogicalEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPushable
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPushable(std::string ptr, lua_State* state);
    GCPushable(void *ptr);

    GCBreakable GetParent() const;
    void SetParent(GCBreakable value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTriggerRemove
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTriggerRemove(std::string ptr, lua_State* state);
    GCTriggerRemove(void *ptr);

    GCEntityIOOutput GetOnRemove() const;
    void SetOnRemove(GCEntityIOOutput value);
    GCBaseTrigger GetParent() const;
    void SetParent(GCBaseTrigger value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCInfoTarget
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCInfoTarget(std::string ptr, lua_State* state);
    GCInfoTarget(void *ptr);

    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMomentaryRotButton
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMomentaryRotButton(std::string ptr, lua_State* state);
    GCMomentaryRotButton(void *ptr);

    GCEntityIOOutput GetOnUnpressed() const;
    void SetOnUnpressed(GCEntityIOOutput value);
    GCEntityIOOutput GetOnFullyOpen() const;
    void SetOnFullyOpen(GCEntityIOOutput value);
    GCEntityIOOutput GetOnFullyClosed() const;
    void SetOnFullyClosed(GCEntityIOOutput value);
    GCEntityIOOutput GetOnReachedPosition() const;
    void SetOnReachedPosition(GCEntityIOOutput value);
    int32_t GetLastUsed() const;
    void SetLastUsed(int32_t value);
    QAngle GetStart() const;
    void SetStart(QAngle value);
    QAngle GetEnd() const;
    void SetEnd(QAngle value);
    float GetIdealYaw() const;
    void SetIdealYaw(float value);
    std::string GetNoise() const;
    void SetNoise(std::string value);
    bool GetUpdateTarget() const;
    void SetUpdateTarget(bool value);
    int32_t GetDirection() const;
    void SetDirection(int32_t value);
    float GetReturnSpeed() const;
    void SetReturnSpeed(float value);
    float GetStartPosition() const;
    void SetStartPosition(float value);
    GCRotButton GetParent() const;
    void SetParent(GCRotButton value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPropDoorRotating
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPropDoorRotating(std::string ptr, lua_State* state);
    GCPropDoorRotating(void *ptr);

    Vector GetAxis() const;
    void SetAxis(Vector value);
    float GetDistance() const;
    void SetDistance(float value);
    uint64_t GetSpawnPosition() const;
    void SetSpawnPosition(uint64_t value);
    uint64_t GetOpenDirection() const;
    void SetOpenDirection(uint64_t value);
    uint64_t GetCurrentOpenDirection() const;
    void SetCurrentOpenDirection(uint64_t value);
    float GetAjarAngle() const;
    void SetAjarAngle(float value);
    QAngle GetRotationAjarDeprecated() const;
    void SetRotationAjarDeprecated(QAngle value);
    QAngle GetRotationClosed() const;
    void SetRotationClosed(QAngle value);
    QAngle GetRotationOpenForward() const;
    void SetRotationOpenForward(QAngle value);
    QAngle GetRotationOpenBack() const;
    void SetRotationOpenBack(QAngle value);
    QAngle GetGoal() const;
    void SetGoal(QAngle value);
    Vector GetForwardBoundsMin() const;
    void SetForwardBoundsMin(Vector value);
    Vector GetForwardBoundsMax() const;
    void SetForwardBoundsMax(Vector value);
    Vector GetBackBoundsMin() const;
    void SetBackBoundsMin(Vector value);
    Vector GetBackBoundsMax() const;
    void SetBackBoundsMax(Vector value);
    bool GetAjarDoorShouldntAlwaysOpen() const;
    void SetAjarDoorShouldntAlwaysOpen(bool value);
    GCEntityBlocker GetEntityBlocker() const;
    void SetEntityBlocker(GCEntityBlocker value);
    GCBasePropDoor GetParent() const;
    void SetParent(GCBasePropDoor value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class Ghudtextparms_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    Ghudtextparms_t(std::string ptr, lua_State* state);
    Ghudtextparms_t(void *ptr);

    Color GetColor1() const;
    void SetColor1(Color value);
    Color GetColor2() const;
    void SetColor2(Color value);
    uint32_t GetEffect() const;
    void SetEffect(uint32_t value);
    uint32_t GetChannel() const;
    void SetChannel(uint32_t value);
    float GetX() const;
    void SetX(float value);
    float GetY() const;
    void SetY(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWeaponMP5SD
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWeaponMP5SD(std::string ptr, lua_State* state);
    GCWeaponMP5SD(void *ptr);

    GCCSWeaponBaseGun GetParent() const;
    void SetParent(GCCSWeaponBaseGun value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTextureBasedAnimatable
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTextureBasedAnimatable(std::string ptr, lua_State* state);
    GCTextureBasedAnimatable(void *ptr);

    bool GetLoop() const;
    void SetLoop(bool value);
    float GetFPS() const;
    void SetFPS(float value);
    Vector GetAnimationBoundsMin() const;
    void SetAnimationBoundsMin(Vector value);
    Vector GetAnimationBoundsMax() const;
    void SetAnimationBoundsMax(Vector value);
    float GetStartTime() const;
    void SetStartTime(float value);
    float GetStartFrame() const;
    void SetStartFrame(float value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMarkupVolumeTagged_NavGame
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMarkupVolumeTagged_NavGame(std::string ptr, lua_State* state);
    GCMarkupVolumeTagged_NavGame(void *ptr);

    bool GetFloodFillAttribute() const;
    void SetFloodFillAttribute(bool value);
    GCMarkupVolumeWithRef GetParent() const;
    void SetParent(GCMarkupVolumeWithRef value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPhysThruster
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPhysThruster(std::string ptr, lua_State* state);
    GCPhysThruster(void *ptr);

    Vector GetLocalOrigin() const;
    void SetLocalOrigin(Vector value);
    GCPhysForce GetParent() const;
    void SetParent(GCPhysForce value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSPointScriptExtensions_player
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSPointScriptExtensions_player(std::string ptr, lua_State* state);
    GCCSPointScriptExtensions_player(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCitadelSoundOpvarSetOBB
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCitadelSoundOpvarSetOBB(std::string ptr, lua_State* state);
    GCCitadelSoundOpvarSetOBB(void *ptr);

    std::string GetStackName() const;
    void SetStackName(std::string value);
    std::string GetOperatorName() const;
    void SetOperatorName(std::string value);
    std::string GetOpvarName() const;
    void SetOpvarName(std::string value);
    Vector GetDistanceInnerMins() const;
    void SetDistanceInnerMins(Vector value);
    Vector GetDistanceInnerMaxs() const;
    void SetDistanceInnerMaxs(Vector value);
    Vector GetDistanceOuterMins() const;
    void SetDistanceOuterMins(Vector value);
    Vector GetDistanceOuterMaxs() const;
    void SetDistanceOuterMaxs(Vector value);
    int32_t GetAABBDirection() const;
    void SetAABBDirection(int32_t value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GSellbackPurchaseEntry_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GSellbackPurchaseEntry_t(std::string ptr, lua_State* state);
    GSellbackPurchaseEntry_t(void *ptr);

    uint16_t GetDefIdx() const;
    void SetDefIdx(uint16_t value);
    int32_t GetCost() const;
    void SetCost(int32_t value);
    int32_t GetPrevArmor() const;
    void SetPrevArmor(int32_t value);
    bool GetPrevHelmet() const;
    void SetPrevHelmet(bool value);
    GCEntityInstance GetItem() const;
    void SetItem(GCEntityInstance value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWeaponFamas
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWeaponFamas(std::string ptr, lua_State* state);
    GCWeaponFamas(void *ptr);

    GCCSWeaponBaseGun GetParent() const;
    void SetParent(GCCSWeaponBaseGun value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCShatterGlassShardPhysics
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCShatterGlassShardPhysics(std::string ptr, lua_State* state);
    GCShatterGlassShardPhysics(void *ptr);

    bool GetDebris() const;
    void SetDebris(bool value);
    uint32_t GetParentShard() const;
    void SetParentShard(uint32_t value);
    Gshard_model_desc_t GetShardDesc() const;
    void SetShardDesc(Gshard_model_desc_t value);
    GCPhysicsProp GetParent() const;
    void SetParent(GCPhysicsProp value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFilterModel
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFilterModel(std::string ptr, lua_State* state);
    GCFilterModel(void *ptr);

    std::string GetFilterModel() const;
    void SetFilterModel(std::string value);
    GCBaseFilter GetParent() const;
    void SetParent(GCBaseFilter value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSPlayerPawnBase
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSPlayerPawnBase(std::string ptr, lua_State* state);
    GCCSPlayerPawnBase(void *ptr);

    GCTouchExpansionComponent GetCTouchExpansionComponent() const;
    void SetCTouchExpansionComponent(GCTouchExpansionComponent value);
    GCCSPlayer_PingServices GetPingServices() const;
    void SetPingServices(GCCSPlayer_PingServices value);
    GCPlayer_ViewModelServices GetViewModelServices() const;
    void SetViewModelServices(GCPlayer_ViewModelServices value);
    float GetBlindUntilTime() const;
    void SetBlindUntilTime(float value);
    float GetBlindStartTime() const;
    void SetBlindStartTime(float value);
    uint64_t GetPlayerState() const;
    void SetPlayerState(uint64_t value);
    bool GetRespawning() const;
    void SetRespawning(bool value);
    float GetImmuneToGunGameDamageTime() const;
    void SetImmuneToGunGameDamageTime(float value);
    bool GetGunGameImmunity() const;
    void SetGunGameImmunity(bool value);
    float GetMolotovDamageTime() const;
    void SetMolotovDamageTime(float value);
    bool GetHasMovedSinceSpawn() const;
    void SetHasMovedSinceSpawn(bool value);
    int32_t GetNumSpawns() const;
    void SetNumSpawns(int32_t value);
    float GetIdleTimeSinceLastAction() const;
    void SetIdleTimeSinceLastAction(float value);
    float GetNextRadarUpdateTime() const;
    void SetNextRadarUpdateTime(float value);
    float GetFlashDuration() const;
    void SetFlashDuration(float value);
    float GetFlashMaxAlpha() const;
    void SetFlashMaxAlpha(float value);
    float GetProgressBarStartTime() const;
    void SetProgressBarStartTime(float value);
    int32_t GetProgressBarDuration() const;
    void SetProgressBarDuration(int32_t value);
    QAngle GetEyeAngles() const;
    void SetEyeAngles(QAngle value);
    int32_t GetNumEnemiesAtRoundStart() const;
    void SetNumEnemiesAtRoundStart(int32_t value);
    bool GetWasNotKilledNaturally() const;
    void SetWasNotKilledNaturally(bool value);
    bool GetCommittingSuicideOnTeamChange() const;
    void SetCommittingSuicideOnTeamChange(bool value);
    GCCSPlayerController GetOriginalController() const;
    void SetOriginalController(GCCSPlayerController value);
    GCBasePlayerPawn GetParent() const;
    void SetParent(GCBasePlayerPawn value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPathTrack
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPathTrack(std::string ptr, lua_State* state);
    GCPathTrack(void *ptr);

    GCPathTrack GetPnext() const;
    void SetPnext(GCPathTrack value);
    GCPathTrack GetPprevious() const;
    void SetPprevious(GCPathTrack value);
    GCPathTrack GetPaltpath() const;
    void SetPaltpath(GCPathTrack value);
    float GetRadius() const;
    void SetRadius(float value);
    float GetLength() const;
    void SetLength(float value);
    std::string GetAltName() const;
    void SetAltName(std::string value);
    int32_t GetIterVal() const;
    void SetIterVal(int32_t value);
    uint64_t GetOrientationType() const;
    void SetOrientationType(uint64_t value);
    GCEntityIOOutput GetOnPass() const;
    void SetOnPass(GCEntityIOOutput value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCLogicDistanceCheck
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCLogicDistanceCheck(std::string ptr, lua_State* state);
    GCLogicDistanceCheck(void *ptr);

    std::string GetEntityA() const;
    void SetEntityA(std::string value);
    std::string GetEntityB() const;
    void SetEntityB(std::string value);
    float GetZone1Distance() const;
    void SetZone1Distance(float value);
    float GetZone2Distance() const;
    void SetZone2Distance(float value);
    GCEntityIOOutput GetInZone1() const;
    void SetInZone1(GCEntityIOOutput value);
    GCEntityIOOutput GetInZone2() const;
    void SetInZone2(GCEntityIOOutput value);
    GCEntityIOOutput GetInZone3() const;
    void SetInZone3(GCEntityIOOutput value);
    GCLogicalEntity GetParent() const;
    void SetParent(GCLogicalEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCOmniLight
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCOmniLight(std::string ptr, lua_State* state);
    GCOmniLight(void *ptr);

    float GetInnerAngle() const;
    void SetInnerAngle(float value);
    float GetOuterAngle() const;
    void SetOuterAngle(float value);
    bool GetShowLight() const;
    void SetShowLight(bool value);
    GCBarnLight GetParent() const;
    void SetParent(GCBarnLight value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCInfoOffscreenPanoramaTexture
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCInfoOffscreenPanoramaTexture(std::string ptr, lua_State* state);
    GCInfoOffscreenPanoramaTexture(void *ptr);

    bool GetDisabled() const;
    void SetDisabled(bool value);
    int32_t GetResolutionX() const;
    void SetResolutionX(int32_t value);
    int32_t GetResolutionY() const;
    void SetResolutionY(int32_t value);
    std::string GetLayoutFileName() const;
    void SetLayoutFileName(std::string value);
    std::string GetRenderAttrName() const;
    void SetRenderAttrName(std::string value);
    std::vector<GCBaseModelEntity> GetTargetEntities() const;
    void SetTargetEntities(std::vector<GCBaseModelEntity> value);
    int32_t GetTargetChangeCount() const;
    void SetTargetChangeCount(int32_t value);
    std::vector<CUtlSymbolLarge> GetCSSClasses() const;
    void SetCSSClasses(std::vector<CUtlSymbolLarge> value);
    std::string GetTargetsName() const;
    void SetTargetsName(std::string value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCInfoVisibilityBox
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCInfoVisibilityBox(std::string ptr, lua_State* state);
    GCInfoVisibilityBox(void *ptr);

    int32_t GetMode() const;
    void SetMode(int32_t value);
    Vector GetBoxSize() const;
    void SetBoxSize(Vector value);
    bool GetEnabled() const;
    void SetEnabled(bool value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCGamePlayerEquip
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCGamePlayerEquip(std::string ptr, lua_State* state);
    GCGamePlayerEquip(void *ptr);

    GCRulePointEntity GetParent() const;
    void SetParent(GCRulePointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCInfoTargetServerOnly
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCInfoTargetServerOnly(std::string ptr, lua_State* state);
    GCInfoTargetServerOnly(void *ptr);

    GCServerOnlyPointEntity GetParent() const;
    void SetParent(GCServerOnlyPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSoundOpvarSetPathCornerEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSoundOpvarSetPathCornerEntity(std::string ptr, lua_State* state);
    GCSoundOpvarSetPathCornerEntity(void *ptr);

    float GetDistMinSqr() const;
    void SetDistMinSqr(float value);
    float GetDistMaxSqr() const;
    void SetDistMaxSqr(float value);
    std::string GetPathCornerEntityName() const;
    void SetPathCornerEntityName(std::string value);
    GCSoundOpvarSetPointEntity GetParent() const;
    void SetParent(GCSoundOpvarSetPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSPlayer_WeaponServices
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSPlayer_WeaponServices(std::string ptr, lua_State* state);
    GCCSPlayer_WeaponServices(void *ptr);

    float GetNextAttack() const;
    void SetNextAttack(float value);
    bool GetIsLookingAtWeapon() const;
    void SetIsLookingAtWeapon(bool value);
    bool GetIsHoldingLookAtWeapon() const;
    void SetIsHoldingLookAtWeapon(bool value);
    GCBasePlayerWeapon GetSavedWeapon() const;
    void SetSavedWeapon(GCBasePlayerWeapon value);
    int32_t GetTimeToMelee() const;
    void SetTimeToMelee(int32_t value);
    int32_t GetTimeToSecondary() const;
    void SetTimeToSecondary(int32_t value);
    int32_t GetTimeToPrimary() const;
    void SetTimeToPrimary(int32_t value);
    int32_t GetTimeToSniperRifle() const;
    void SetTimeToSniperRifle(int32_t value);
    bool GetIsBeingGivenItem() const;
    void SetIsBeingGivenItem(bool value);
    bool GetIsPickingUpItemWithUse() const;
    void SetIsPickingUpItemWithUse(bool value);
    bool GetPickedUpWeapon() const;
    void SetPickedUpWeapon(bool value);
    bool GetDisableAutoDeploy() const;
    void SetDisableAutoDeploy(bool value);
    bool GetIsPickingUpGroundWeapon() const;
    void SetIsPickingUpGroundWeapon(bool value);
    uint32_t GetOldShootPositionHistoryCount() const;
    void SetOldShootPositionHistoryCount(uint32_t value);
    uint32_t GetOldInputHistoryCount() const;
    void SetOldInputHistoryCount(uint32_t value);
    GCPlayer_WeaponServices GetParent() const;
    void SetParent(GCPlayer_WeaponServices value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEntityFlame
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEntityFlame(std::string ptr, lua_State* state);
    GCEntityFlame(void *ptr);

    GCBaseEntity GetEntAttached() const;
    void SetEntAttached(GCBaseEntity value);
    bool GetCheapEffect() const;
    void SetCheapEffect(bool value);
    float GetSize() const;
    void SetSize(float value);
    bool GetUseHitboxes() const;
    void SetUseHitboxes(bool value);
    int32_t GetNumHitboxFires() const;
    void SetNumHitboxFires(int32_t value);
    float GetHitboxFireScale() const;
    void SetHitboxFireScale(float value);
    float GetLifetime() const;
    void SetLifetime(float value);
    GCBaseEntity GetAttacker() const;
    void SetAttacker(GCBaseEntity value);
    int32_t GetDangerSound() const;
    void SetDangerSound(int32_t value);
    float GetDirectDamagePerSecond() const;
    void SetDirectDamagePerSecond(float value);
    int32_t GetCustomDamageType() const;
    void SetCustomDamageType(int32_t value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWeaponMP9
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWeaponMP9(std::string ptr, lua_State* state);
    GCWeaponMP9(void *ptr);

    GCCSWeaponBaseGun GetParent() const;
    void SetParent(GCCSWeaponBaseGun value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSBot
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSBot(std::string ptr, lua_State* state);
    GCCSBot(void *ptr);

    Vector GetEyePosition() const;
    void SetEyePosition(Vector value);
    std::string GetName() const;
    void SetName(std::string value);
    float GetCombatRange() const;
    void SetCombatRange(float value);
    bool GetIsRogue() const;
    void SetIsRogue(bool value);
    GCountdownTimer GetRogueTimer() const;
    void SetRogueTimer(GCountdownTimer value);
    bool GetDiedLastRound() const;
    void SetDiedLastRound(bool value);
    float GetSafeTime() const;
    void SetSafeTime(float value);
    bool GetWasSafe() const;
    void SetWasSafe(bool value);
    bool GetBlindFire() const;
    void SetBlindFire(bool value);
    GCountdownTimer GetSurpriseTimer() const;
    void SetSurpriseTimer(GCountdownTimer value);
    bool GetAllowActive() const;
    void SetAllowActive(bool value);
    bool GetIsFollowing() const;
    void SetIsFollowing(bool value);
    GCCSPlayerPawn GetLeader() const;
    void SetLeader(GCCSPlayerPawn value);
    float GetFollowTimestamp() const;
    void SetFollowTimestamp(float value);
    float GetAllowAutoFollowTime() const;
    void SetAllowAutoFollowTime(float value);
    GCountdownTimer GetHurryTimer() const;
    void SetHurryTimer(GCountdownTimer value);
    GCountdownTimer GetAlertTimer() const;
    void SetAlertTimer(GCountdownTimer value);
    GCountdownTimer GetSneakTimer() const;
    void SetSneakTimer(GCountdownTimer value);
    GCountdownTimer GetPanicTimer() const;
    void SetPanicTimer(GCountdownTimer value);
    float GetStateTimestamp() const;
    void SetStateTimestamp(float value);
    bool GetIsAttacking() const;
    void SetIsAttacking(bool value);
    bool GetIsOpeningDoor() const;
    void SetIsOpeningDoor(bool value);
    GCBaseEntity GetTaskEntity() const;
    void SetTaskEntity(GCBaseEntity value);
    Vector GetGoalPosition() const;
    void SetGoalPosition(Vector value);
    GCBaseEntity GetGoalEntity() const;
    void SetGoalEntity(GCBaseEntity value);
    GCBaseEntity GetAvoid() const;
    void SetAvoid(GCBaseEntity value);
    float GetAvoidTimestamp() const;
    void SetAvoidTimestamp(float value);
    bool GetIsStopping() const;
    void SetIsStopping(bool value);
    bool GetHasVisitedEnemySpawn() const;
    void SetHasVisitedEnemySpawn(bool value);
    GIntervalTimer GetStillTimer() const;
    void SetStillTimer(GIntervalTimer value);
    bool GetEyeAnglesUnderPathFinderControl() const;
    void SetEyeAnglesUnderPathFinderControl(bool value);
    int32_t GetPathIndex() const;
    void SetPathIndex(int32_t value);
    float GetAreaEnteredTimestamp() const;
    void SetAreaEnteredTimestamp(float value);
    GCountdownTimer GetRepathTimer() const;
    void SetRepathTimer(GCountdownTimer value);
    GCountdownTimer GetAvoidFriendTimer() const;
    void SetAvoidFriendTimer(GCountdownTimer value);
    bool GetIsFriendInTheWay() const;
    void SetIsFriendInTheWay(bool value);
    GCountdownTimer GetPoliteTimer() const;
    void SetPoliteTimer(GCountdownTimer value);
    bool GetIsWaitingBehindFriend() const;
    void SetIsWaitingBehindFriend(bool value);
    float GetPathLadderEnd() const;
    void SetPathLadderEnd(float value);
    GCountdownTimer GetMustRunTimer() const;
    void SetMustRunTimer(GCountdownTimer value);
    GCountdownTimer GetWaitTimer() const;
    void SetWaitTimer(GCountdownTimer value);
    GCountdownTimer GetUpdateTravelDistanceTimer() const;
    void SetUpdateTravelDistanceTimer(GCountdownTimer value);
    std::vector<float> GetPlayerTravelDistance() const;
    void SetPlayerTravelDistance(std::vector<float> value);
    uint32_t GetTravelDistancePhase() const;
    void SetTravelDistancePhase(uint32_t value);
    uint32_t GetHostageEscortCount() const;
    void SetHostageEscortCount(uint32_t value);
    float GetHostageEscortCountTimestamp() const;
    void SetHostageEscortCountTimestamp(float value);
    int32_t GetDesiredTeam() const;
    void SetDesiredTeam(int32_t value);
    bool GetHasJoined() const;
    void SetHasJoined(bool value);
    bool GetIsWaitingForHostage() const;
    void SetIsWaitingForHostage(bool value);
    GCountdownTimer GetInhibitWaitingForHostageTimer() const;
    void SetInhibitWaitingForHostageTimer(GCountdownTimer value);
    GCountdownTimer GetWaitForHostageTimer() const;
    void SetWaitForHostageTimer(GCountdownTimer value);
    Vector GetNoisePosition() const;
    void SetNoisePosition(Vector value);
    float GetNoiseTravelDistance() const;
    void SetNoiseTravelDistance(float value);
    float GetNoiseTimestamp() const;
    void SetNoiseTimestamp(float value);
    GCCSPlayerPawn GetNoiseSource() const;
    void SetNoiseSource(GCCSPlayerPawn value);
    GCountdownTimer GetNoiseBendTimer() const;
    void SetNoiseBendTimer(GCountdownTimer value);
    Vector GetBentNoisePosition() const;
    void SetBentNoisePosition(Vector value);
    bool GetBendNoisePositionValid() const;
    void SetBendNoisePositionValid(bool value);
    float GetLookAroundStateTimestamp() const;
    void SetLookAroundStateTimestamp(float value);
    float GetLookAheadAngle() const;
    void SetLookAheadAngle(float value);
    float GetForwardAngle() const;
    void SetForwardAngle(float value);
    float GetInhibitLookAroundTimestamp() const;
    void SetInhibitLookAroundTimestamp(float value);
    Vector GetLookAtSpot() const;
    void SetLookAtSpot(Vector value);
    float GetLookAtSpotDuration() const;
    void SetLookAtSpotDuration(float value);
    float GetLookAtSpotTimestamp() const;
    void SetLookAtSpotTimestamp(float value);
    float GetLookAtSpotAngleTolerance() const;
    void SetLookAtSpotAngleTolerance(float value);
    bool GetLookAtSpotClearIfClose() const;
    void SetLookAtSpotClearIfClose(bool value);
    bool GetLookAtSpotAttack() const;
    void SetLookAtSpotAttack(bool value);
    std::string GetLookAtDesc() const;
    void SetLookAtDesc(std::string value);
    float GetPeripheralTimestamp() const;
    void SetPeripheralTimestamp(float value);
    uint32_t GetApproachPointCount() const;
    void SetApproachPointCount(uint32_t value);
    Vector GetApproachPointViewPosition() const;
    void SetApproachPointViewPosition(Vector value);
    GIntervalTimer GetViewSteadyTimer() const;
    void SetViewSteadyTimer(GIntervalTimer value);
    GCountdownTimer GetTossGrenadeTimer() const;
    void SetTossGrenadeTimer(GCountdownTimer value);
    GCountdownTimer GetIsAvoidingGrenade() const;
    void SetIsAvoidingGrenade(GCountdownTimer value);
    float GetSpotCheckTimestamp() const;
    void SetSpotCheckTimestamp(float value);
    int32_t GetCheckedHidingSpotCount() const;
    void SetCheckedHidingSpotCount(int32_t value);
    float GetLookPitch() const;
    void SetLookPitch(float value);
    float GetLookPitchVel() const;
    void SetLookPitchVel(float value);
    float GetLookYaw() const;
    void SetLookYaw(float value);
    float GetLookYawVel() const;
    void SetLookYawVel(float value);
    Vector GetTargetSpot() const;
    void SetTargetSpot(Vector value);
    Vector GetTargetSpotVelocity() const;
    void SetTargetSpotVelocity(Vector value);
    Vector GetTargetSpotPredicted() const;
    void SetTargetSpotPredicted(Vector value);
    QAngle GetAimError() const;
    void SetAimError(QAngle value);
    QAngle GetAimGoal() const;
    void SetAimGoal(QAngle value);
    float GetTargetSpotTime() const;
    void SetTargetSpotTime(float value);
    float GetAimFocus() const;
    void SetAimFocus(float value);
    float GetAimFocusInterval() const;
    void SetAimFocusInterval(float value);
    float GetAimFocusNextUpdate() const;
    void SetAimFocusNextUpdate(float value);
    GCountdownTimer GetIgnoreEnemiesTimer() const;
    void SetIgnoreEnemiesTimer(GCountdownTimer value);
    GCCSPlayerPawn GetEnemy() const;
    void SetEnemy(GCCSPlayerPawn value);
    bool GetIsEnemyVisible() const;
    void SetIsEnemyVisible(bool value);
    uint32_t GetVisibleEnemyParts() const;
    void SetVisibleEnemyParts(uint32_t value);
    Vector GetLastEnemyPosition() const;
    void SetLastEnemyPosition(Vector value);
    float GetLastSawEnemyTimestamp() const;
    void SetLastSawEnemyTimestamp(float value);
    float GetFirstSawEnemyTimestamp() const;
    void SetFirstSawEnemyTimestamp(float value);
    float GetCurrentEnemyAcquireTimestamp() const;
    void SetCurrentEnemyAcquireTimestamp(float value);
    float GetEnemyDeathTimestamp() const;
    void SetEnemyDeathTimestamp(float value);
    float GetFriendDeathTimestamp() const;
    void SetFriendDeathTimestamp(float value);
    bool GetIsLastEnemyDead() const;
    void SetIsLastEnemyDead(bool value);
    int32_t GetNearbyEnemyCount() const;
    void SetNearbyEnemyCount(int32_t value);
    GCCSPlayerPawn GetBomber() const;
    void SetBomber(GCCSPlayerPawn value);
    int32_t GetNearbyFriendCount() const;
    void SetNearbyFriendCount(int32_t value);
    GCCSPlayerPawn GetClosestVisibleFriend() const;
    void SetClosestVisibleFriend(GCCSPlayerPawn value);
    GCCSPlayerPawn GetClosestVisibleHumanFriend() const;
    void SetClosestVisibleHumanFriend(GCCSPlayerPawn value);
    GIntervalTimer GetAttentionInterval() const;
    void SetAttentionInterval(GIntervalTimer value);
    GCCSPlayerPawn GetAttacker() const;
    void SetAttacker(GCCSPlayerPawn value);
    float GetAttackedTimestamp() const;
    void SetAttackedTimestamp(float value);
    GIntervalTimer GetBurnedByFlamesTimer() const;
    void SetBurnedByFlamesTimer(GIntervalTimer value);
    int32_t GetLastVictimID() const;
    void SetLastVictimID(int32_t value);
    bool GetIsAimingAtEnemy() const;
    void SetIsAimingAtEnemy(bool value);
    bool GetIsRapidFiring() const;
    void SetIsRapidFiring(bool value);
    GIntervalTimer GetEquipTimer() const;
    void SetEquipTimer(GIntervalTimer value);
    GCountdownTimer GetZoomTimer() const;
    void SetZoomTimer(GCountdownTimer value);
    float GetFireWeaponTimestamp() const;
    void SetFireWeaponTimestamp(float value);
    GCountdownTimer GetLookForWeaponsOnGroundTimer() const;
    void SetLookForWeaponsOnGroundTimer(GCountdownTimer value);
    bool GetIsSleeping() const;
    void SetIsSleeping(bool value);
    bool GetIsEnemySniperVisible() const;
    void SetIsEnemySniperVisible(bool value);
    GCountdownTimer GetSawEnemySniperTimer() const;
    void SetSawEnemySniperTimer(GCountdownTimer value);
    uint32_t GetEnemyQueueIndex() const;
    void SetEnemyQueueIndex(uint32_t value);
    uint32_t GetEnemyQueueCount() const;
    void SetEnemyQueueCount(uint32_t value);
    uint32_t GetEnemyQueueAttendIndex() const;
    void SetEnemyQueueAttendIndex(uint32_t value);
    bool GetIsStuck() const;
    void SetIsStuck(bool value);
    float GetStuckTimestamp() const;
    void SetStuckTimestamp(float value);
    Vector GetStuckSpot() const;
    void SetStuckSpot(Vector value);
    GCountdownTimer GetWiggleTimer() const;
    void SetWiggleTimer(GCountdownTimer value);
    GCountdownTimer GetStuckJumpTimer() const;
    void SetStuckJumpTimer(GCountdownTimer value);
    float GetNextCleanupCheckTimestamp() const;
    void SetNextCleanupCheckTimestamp(float value);
    std::vector<float> GetAvgVel() const;
    void SetAvgVel(std::vector<float> value);
    int32_t GetAvgVelIndex() const;
    void SetAvgVelIndex(int32_t value);
    int32_t GetAvgVelCount() const;
    void SetAvgVelCount(int32_t value);
    Vector GetLastOrigin() const;
    void SetLastOrigin(Vector value);
    float GetLastRadioRecievedTimestamp() const;
    void SetLastRadioRecievedTimestamp(float value);
    float GetLastRadioSentTimestamp() const;
    void SetLastRadioSentTimestamp(float value);
    GCCSPlayerPawn GetRadioSubject() const;
    void SetRadioSubject(GCCSPlayerPawn value);
    Vector GetRadioPosition() const;
    void SetRadioPosition(Vector value);
    float GetVoiceEndTimestamp() const;
    void SetVoiceEndTimestamp(float value);
    int32_t GetLastValidReactionQueueFrame() const;
    void SetLastValidReactionQueueFrame(int32_t value);
    GCBot GetParent() const;
    void SetParent(GCBot value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEntityIdentity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEntityIdentity(std::string ptr, lua_State* state);
    GCEntityIdentity(void *ptr);

    int32_t GetNameStringableIndex() const;
    void SetNameStringableIndex(int32_t value);
    std::string GetName() const;
    void SetName(std::string value);
    std::string GetDesignerName() const;
    void SetDesignerName(std::string value);
    uint32_t GetFlags() const;
    void SetFlags(uint32_t value);
    uint32_t GetWorldGroupId() const;
    void SetWorldGroupId(uint32_t value);
    uint32_t GetDataObjectTypes() const;
    void SetDataObjectTypes(uint32_t value);
    GChangeAccessorFieldPathIndex_t GetPathIndex() const;
    void SetPathIndex(GChangeAccessorFieldPathIndex_t value);
    GCEntityIdentity GetPrev() const;
    void SetPrev(GCEntityIdentity value);
    GCEntityIdentity GetNext() const;
    void SetNext(GCEntityIdentity value);
    GCEntityIdentity GetPrevByClass() const;
    void SetPrevByClass(GCEntityIdentity value);
    GCEntityIdentity GetNextByClass() const;
    void SetNextByClass(GCEntityIdentity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCGunTarget
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCGunTarget(std::string ptr, lua_State* state);
    GCGunTarget(void *ptr);

    bool GetOn() const;
    void SetOn(bool value);
    GCBaseEntity GetTargetEnt() const;
    void SetTargetEnt(GCBaseEntity value);
    GCEntityIOOutput GetOnDeath() const;
    void SetOnDeath(GCEntityIOOutput value);
    GCBaseToggle GetParent() const;
    void SetParent(GCBaseToggle value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSoundEventParameter
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSoundEventParameter(std::string ptr, lua_State* state);
    GCSoundEventParameter(void *ptr);

    std::string GetParamName() const;
    void SetParamName(std::string value);
    float GetFloatValue() const;
    void SetFloatValue(float value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSimpleMarkupVolumeTagged
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSimpleMarkupVolumeTagged(std::string ptr, lua_State* state);
    GCSimpleMarkupVolumeTagged(void *ptr);

    GCMarkupVolumeTagged GetParent() const;
    void SetParent(GCMarkupVolumeTagged value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTestEffect
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTestEffect(std::string ptr, lua_State* state);
    GCTestEffect(void *ptr);

    int32_t GetLoop() const;
    void SetLoop(int32_t value);
    int32_t GetBeam() const;
    void SetBeam(int32_t value);
    std::vector<GCBeam*> GetBeam1() const;
    void SetBeam1(std::vector<GCBeam*> value);
    std::vector<float> GetBeamTime() const;
    void SetBeamTime(std::vector<float> value);
    float GetStartTime() const;
    void SetStartTime(float value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWeaponM4A1Silencer
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWeaponM4A1Silencer(std::string ptr, lua_State* state);
    GCWeaponM4A1Silencer(void *ptr);

    GCCSWeaponBaseGun GetParent() const;
    void SetParent(GCCSWeaponBaseGun value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCScriptNavBlocker
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCScriptNavBlocker(std::string ptr, lua_State* state);
    GCScriptNavBlocker(void *ptr);

    Vector GetExtent() const;
    void SetExtent(Vector value);
    GCFuncNavBlocker GetParent() const;
    void SetParent(GCFuncNavBlocker value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCConstraintAnchor
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCConstraintAnchor(std::string ptr, lua_State* state);
    GCConstraintAnchor(void *ptr);

    float GetMassScale() const;
    void SetMassScale(float value);
    GCBaseAnimGraph GetParent() const;
    void SetParent(GCBaseAnimGraph value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWeaponTec9
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWeaponTec9(std::string ptr, lua_State* state);
    GCWeaponTec9(void *ptr);

    GCCSWeaponBaseGun GetParent() const;
    void SetParent(GCCSWeaponBaseGun value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMarkupVolumeTagged_Nav
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMarkupVolumeTagged_Nav(std::string ptr, lua_State* state);
    GCMarkupVolumeTagged_Nav(void *ptr);

    GCMarkupVolumeTagged GetParent() const;
    void SetParent(GCMarkupVolumeTagged value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCInstancedSceneEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCInstancedSceneEntity(std::string ptr, lua_State* state);
    GCInstancedSceneEntity(void *ptr);

    GCBaseEntity GetOwner() const;
    void SetOwner(GCBaseEntity value);
    bool GetHadOwner() const;
    void SetHadOwner(bool value);
    float GetPostSpeakDelay() const;
    void SetPostSpeakDelay(float value);
    float GetPreDelay() const;
    void SetPreDelay(float value);
    bool GetIsBackground() const;
    void SetIsBackground(bool value);
    bool GetRemoveOnCompletion() const;
    void SetRemoveOnCompletion(bool value);
    GCBaseEntity GetTarget() const;
    void SetTarget(GCBaseEntity value);
    GCSceneEntity GetParent() const;
    void SetParent(GCSceneEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCLightEnvironmentEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCLightEnvironmentEntity(std::string ptr, lua_State* state);
    GCLightEnvironmentEntity(void *ptr);

    GCLightDirectionalEntity GetParent() const;
    void SetParent(GCLightDirectionalEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCLogicActiveAutosave
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCLogicActiveAutosave(std::string ptr, lua_State* state);
    GCLogicActiveAutosave(void *ptr);

    int32_t GetTriggerHitPoints() const;
    void SetTriggerHitPoints(int32_t value);
    float GetTimeToTrigger() const;
    void SetTimeToTrigger(float value);
    float GetStartTime() const;
    void SetStartTime(float value);
    float GetDangerousTime() const;
    void SetDangerousTime(float value);
    GCLogicAutosave GetParent() const;
    void SetParent(GCLogicAutosave value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvBeverage
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvBeverage(std::string ptr, lua_State* state);
    GCEnvBeverage(void *ptr);

    bool GetCanInDispenser() const;
    void SetCanInDispenser(bool value);
    int32_t GetBeverageType() const;
    void SetBeverageType(int32_t value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWeaponCZ75a
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWeaponCZ75a(std::string ptr, lua_State* state);
    GCWeaponCZ75a(void *ptr);

    GCCSWeaponBaseGun GetParent() const;
    void SetParent(GCCSWeaponBaseGun value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWeaponP250
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWeaponP250(std::string ptr, lua_State* state);
    GCWeaponP250(void *ptr);

    GCCSWeaponBaseGun GetParent() const;
    void SetParent(GCCSWeaponBaseGun value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCHostage
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCHostage(std::string ptr, lua_State* state);
    GCHostage(void *ptr);

    GCEntityIOOutput GetOnHostageBeginGrab() const;
    void SetOnHostageBeginGrab(GCEntityIOOutput value);
    GCEntityIOOutput GetOnFirstPickedUp() const;
    void SetOnFirstPickedUp(GCEntityIOOutput value);
    GCEntityIOOutput GetOnDroppedNotRescued() const;
    void SetOnDroppedNotRescued(GCEntityIOOutput value);
    GCEntityIOOutput GetOnRescued() const;
    void SetOnRescued(GCEntityIOOutput value);
    GEntitySpottedState_t GetEntitySpottedState() const;
    void SetEntitySpottedState(GEntitySpottedState_t value);
    int32_t GetSpotRules() const;
    void SetSpotRules(int32_t value);
    uint32_t GetUiHostageSpawnExclusionGroupMask() const;
    void SetUiHostageSpawnExclusionGroupMask(uint32_t value);
    uint32_t GetHostageSpawnRandomFactor() const;
    void SetHostageSpawnRandomFactor(uint32_t value);
    bool GetRemove() const;
    void SetRemove(bool value);
    Vector GetVel() const;
    void SetVel(Vector value);
    bool GetIsRescued() const;
    void SetIsRescued(bool value);
    bool GetJumpedThisFrame() const;
    void SetJumpedThisFrame(bool value);
    int32_t GetHostageState() const;
    void SetHostageState(int32_t value);
    GCBaseEntity GetLeader() const;
    void SetLeader(GCBaseEntity value);
    GCCSPlayerPawnBase GetLastLeader() const;
    void SetLastLeader(GCCSPlayerPawnBase value);
    GCountdownTimer GetReuseTimer() const;
    void SetReuseTimer(GCountdownTimer value);
    bool GetHasBeenUsed() const;
    void SetHasBeenUsed(bool value);
    Vector GetAccel() const;
    void SetAccel(Vector value);
    bool GetIsRunning() const;
    void SetIsRunning(bool value);
    bool GetIsCrouching() const;
    void SetIsCrouching(bool value);
    GCountdownTimer GetJumpTimer() const;
    void SetJumpTimer(GCountdownTimer value);
    bool GetIsWaitingForLeader() const;
    void SetIsWaitingForLeader(bool value);
    GCountdownTimer GetRepathTimer() const;
    void SetRepathTimer(GCountdownTimer value);
    GCountdownTimer GetInhibitDoorTimer() const;
    void SetInhibitDoorTimer(GCountdownTimer value);
    GCountdownTimer GetInhibitObstacleAvoidanceTimer() const;
    void SetInhibitObstacleAvoidanceTimer(GCountdownTimer value);
    GCountdownTimer GetWiggleTimer() const;
    void SetWiggleTimer(GCountdownTimer value);
    bool GetIsAdjusted() const;
    void SetIsAdjusted(bool value);
    bool GetHandsHaveBeenCut() const;
    void SetHandsHaveBeenCut(bool value);
    GCCSPlayerPawn GetHostageGrabber() const;
    void SetHostageGrabber(GCCSPlayerPawn value);
    float GetLastGrabTime() const;
    void SetLastGrabTime(float value);
    Vector GetPositionWhenStartedDroppingToGround() const;
    void SetPositionWhenStartedDroppingToGround(Vector value);
    Vector GetGrabbedPos() const;
    void SetGrabbedPos(Vector value);
    float GetRescueStartTime() const;
    void SetRescueStartTime(float value);
    float GetGrabSuccessTime() const;
    void SetGrabSuccessTime(float value);
    float GetDropStartTime() const;
    void SetDropStartTime(float value);
    int32_t GetApproachRewardPayouts() const;
    void SetApproachRewardPayouts(int32_t value);
    int32_t GetPickupEventCount() const;
    void SetPickupEventCount(int32_t value);
    Vector GetSpawnGroundPos() const;
    void SetSpawnGroundPos(Vector value);
    Vector GetHostageResetPosition() const;
    void SetHostageResetPosition(Vector value);
    GCHostageExpresserShim GetParent() const;
    void SetParent(GCHostageExpresserShim value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCScriptTriggerHurt
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCScriptTriggerHurt(std::string ptr, lua_State* state);
    GCScriptTriggerHurt(void *ptr);

    Vector GetExtent() const;
    void SetExtent(Vector value);
    GCTriggerHurt GetParent() const;
    void SetParent(GCTriggerHurt value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBasePlayerWeaponVData
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBasePlayerWeaponVData(std::string ptr, lua_State* state);
    GCBasePlayerWeaponVData(void *ptr);

    bool GetBuiltRightHanded() const;
    void SetBuiltRightHanded(bool value);
    bool GetAllowFlipping() const;
    void SetAllowFlipping(bool value);
    std::string GetMuzzleAttachment() const;
    void SetMuzzleAttachment(std::string value);
    uint64_t GetFlags() const;
    void SetFlags(uint64_t value);
    uint32_t GetPrimaryAmmoType() const;
    void SetPrimaryAmmoType(uint32_t value);
    uint32_t GetSecondaryAmmoType() const;
    void SetSecondaryAmmoType(uint32_t value);
    int32_t GetMaxClip1() const;
    void SetMaxClip1(int32_t value);
    int32_t GetMaxClip2() const;
    void SetMaxClip2(int32_t value);
    int32_t GetDefaultClip1() const;
    void SetDefaultClip1(int32_t value);
    int32_t GetDefaultClip2() const;
    void SetDefaultClip2(int32_t value);
    int32_t GetWeight() const;
    void SetWeight(int32_t value);
    bool GetAutoSwitchTo() const;
    void SetAutoSwitchTo(bool value);
    bool GetAutoSwitchFrom() const;
    void SetAutoSwitchFrom(bool value);
    uint64_t GetRumbleEffect() const;
    void SetRumbleEffect(uint64_t value);
    bool GetLinkedCooldowns() const;
    void SetLinkedCooldowns(bool value);
    int32_t GetSlot() const;
    void SetSlot(int32_t value);
    int32_t GetPosition() const;
    void SetPosition(int32_t value);
    GCEntitySubclassVDataBase GetParent() const;
    void SetParent(GCEntitySubclassVDataBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMathColorBlend
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMathColorBlend(std::string ptr, lua_State* state);
    GCMathColorBlend(void *ptr);

    float GetInMin() const;
    void SetInMin(float value);
    float GetInMax() const;
    void SetInMax(float value);
    Color GetOutColor1() const;
    void SetOutColor1(Color value);
    Color GetOutColor2() const;
    void SetOutColor2(Color value);
    GCLogicalEntity GetParent() const;
    void SetParent(GCLogicalEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvScreenOverlay
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvScreenOverlay(std::string ptr, lua_State* state);
    GCEnvScreenOverlay(void *ptr);

    std::vector<CUtlSymbolLarge> GetOverlayNames() const;
    void SetOverlayNames(std::vector<CUtlSymbolLarge> value);
    std::vector<float> GetOverlayTimes() const;
    void SetOverlayTimes(std::vector<float> value);
    float GetStartTime() const;
    void SetStartTime(float value);
    int32_t GetDesiredOverlay() const;
    void SetDesiredOverlay(int32_t value);
    bool GetIsActive() const;
    void SetIsActive(bool value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSPlayerPawn
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSPlayerPawn(std::string ptr, lua_State* state);
    GCCSPlayerPawn(void *ptr);

    GCCSPlayer_BulletServices GetBulletServices() const;
    void SetBulletServices(GCCSPlayer_BulletServices value);
    GCCSPlayer_HostageServices GetHostageServices() const;
    void SetHostageServices(GCCSPlayer_HostageServices value);
    GCCSPlayer_BuyServices GetBuyServices() const;
    void SetBuyServices(GCCSPlayer_BuyServices value);
    GCCSPlayer_ActionTrackingServices GetActionTrackingServices() const;
    void SetActionTrackingServices(GCCSPlayer_ActionTrackingServices value);
    GCCSPlayer_RadioServices GetRadioServices() const;
    void SetRadioServices(GCCSPlayer_RadioServices value);
    GCCSPlayer_DamageReactServices GetDamageReactServices() const;
    void SetDamageReactServices(GCCSPlayer_DamageReactServices value);
    uint16_t GetCharacterDefIndex() const;
    void SetCharacterDefIndex(uint16_t value);
    bool GetHasFemaleVoice() const;
    void SetHasFemaleVoice(bool value);
    std::string GetStrVOPrefix() const;
    void SetStrVOPrefix(std::string value);
    std::string GetLastPlaceName() const;
    void SetLastPlaceName(std::string value);
    bool GetInHostageResetZone() const;
    void SetInHostageResetZone(bool value);
    bool GetInBuyZone() const;
    void SetInBuyZone(bool value);
    bool GetWasInBuyZone() const;
    void SetWasInBuyZone(bool value);
    bool GetInHostageRescueZone() const;
    void SetInHostageRescueZone(bool value);
    bool GetInBombZone() const;
    void SetInBombZone(bool value);
    bool GetWasInHostageRescueZone() const;
    void SetWasInHostageRescueZone(bool value);
    int32_t GetRetakesOffering() const;
    void SetRetakesOffering(int32_t value);
    int32_t GetRetakesOfferingCard() const;
    void SetRetakesOfferingCard(int32_t value);
    bool GetRetakesHasDefuseKit() const;
    void SetRetakesHasDefuseKit(bool value);
    bool GetRetakesMVPLastRound() const;
    void SetRetakesMVPLastRound(bool value);
    int32_t GetRetakesMVPBoostItem() const;
    void SetRetakesMVPBoostItem(int32_t value);
    uint64_t GetRetakesMVPBoostExtraUtility() const;
    void SetRetakesMVPBoostExtraUtility(uint64_t value);
    float GetHealthShotBoostExpirationTime() const;
    void SetHealthShotBoostExpirationTime(float value);
    float GetLandingTimeSeconds() const;
    void SetLandingTimeSeconds(float value);
    QAngle GetAimPunchAngle() const;
    void SetAimPunchAngle(QAngle value);
    QAngle GetAimPunchAngleVel() const;
    void SetAimPunchAngleVel(QAngle value);
    int32_t GetAimPunchTickBase() const;
    void SetAimPunchTickBase(int32_t value);
    float GetAimPunchTickFraction() const;
    void SetAimPunchTickFraction(float value);
    std::vector<QAngle> GetAimPunchCache() const;
    void SetAimPunchCache(std::vector<QAngle> value);
    bool GetIsBuyMenuOpen() const;
    void SetIsBuyMenuOpen(bool value);
    bool GetLastHeadBoneTransformIsValid() const;
    void SetLastHeadBoneTransformIsValid(bool value);
    float GetLastLandTime() const;
    void SetLastLandTime(float value);
    bool GetOnGroundLastTick() const;
    void SetOnGroundLastTick(bool value);
    int32_t GetPlayerLocked() const;
    void SetPlayerLocked(int32_t value);
    float GetTimeOfLastInjury() const;
    void SetTimeOfLastInjury(float value);
    float GetNextSprayDecalTime() const;
    void SetNextSprayDecalTime(float value);
    bool GetNextSprayDecalTimeExpedited() const;
    void SetNextSprayDecalTimeExpedited(bool value);
    int32_t GetRagdollDamageBone() const;
    void SetRagdollDamageBone(int32_t value);
    Vector GetRagdollDamageForce() const;
    void SetRagdollDamageForce(Vector value);
    Vector GetRagdollDamagePosition() const;
    void SetRagdollDamagePosition(Vector value);
    std::string GetRagdollDamageWeaponName() const;
    void SetRagdollDamageWeaponName(std::string value);
    bool GetRagdollDamageHeadshot() const;
    void SetRagdollDamageHeadshot(bool value);
    Vector GetRagdollServerOrigin() const;
    void SetRagdollServerOrigin(Vector value);
    GCEconItemView GetEconGloves() const;
    void SetEconGloves(GCEconItemView value);
    uint32_t GetEconGlovesChanged() const;
    void SetEconGlovesChanged(uint32_t value);
    QAngle GetDeathEyeAngles() const;
    void SetDeathEyeAngles(QAngle value);
    bool GetSkipOneHeadConstraintUpdate() const;
    void SetSkipOneHeadConstraintUpdate(bool value);
    bool GetLeftHanded() const;
    void SetLeftHanded(bool value);
    float GetSwitchedHandednessTime() const;
    void SetSwitchedHandednessTime(float value);
    float GetViewmodelOffsetX() const;
    void SetViewmodelOffsetX(float value);
    float GetViewmodelOffsetY() const;
    void SetViewmodelOffsetY(float value);
    float GetViewmodelOffsetZ() const;
    void SetViewmodelOffsetZ(float value);
    float GetViewmodelFOV() const;
    void SetViewmodelFOV(float value);
    bool GetIsWalking() const;
    void SetIsWalking(bool value);
    float GetLastGivenDefuserTime() const;
    void SetLastGivenDefuserTime(float value);
    float GetLastGivenBombTime() const;
    void SetLastGivenBombTime(float value);
    float GetDealtDamageToEnemyMostRecentTimestamp() const;
    void SetDealtDamageToEnemyMostRecentTimestamp(float value);
    uint32_t GetDisplayHistoryBits() const;
    void SetDisplayHistoryBits(uint32_t value);
    float GetLastAttackedTeammate() const;
    void SetLastAttackedTeammate(float value);
    float GetAllowAutoFollowTime() const;
    void SetAllowAutoFollowTime(float value);
    bool GetResetArmorNextSpawn() const;
    void SetResetArmorNextSpawn(bool value);
    int GetLastKillerIndex() const;
    void SetLastKillerIndex(int value);
    GEntitySpottedState_t GetEntitySpottedState() const;
    void SetEntitySpottedState(GEntitySpottedState_t value);
    int32_t GetSpotRules() const;
    void SetSpotRules(int32_t value);
    bool GetIsScoped() const;
    void SetIsScoped(bool value);
    bool GetResumeZoom() const;
    void SetResumeZoom(bool value);
    bool GetIsDefusing() const;
    void SetIsDefusing(bool value);
    bool GetIsGrabbingHostage() const;
    void SetIsGrabbingHostage(bool value);
    uint64_t GetBlockingUseActionInProgress() const;
    void SetBlockingUseActionInProgress(uint64_t value);
    float GetEmitSoundTime() const;
    void SetEmitSoundTime(float value);
    bool GetInNoDefuseArea() const;
    void SetInNoDefuseArea(bool value);
    int GetBombSiteIndex() const;
    void SetBombSiteIndex(int value);
    int32_t GetWhichBombZone() const;
    void SetWhichBombZone(int32_t value);
    bool GetInBombZoneTrigger() const;
    void SetInBombZoneTrigger(bool value);
    bool GetWasInBombZoneTrigger() const;
    void SetWasInBombZoneTrigger(bool value);
    int32_t GetShotsFired() const;
    void SetShotsFired(int32_t value);
    float GetFlinchStack() const;
    void SetFlinchStack(float value);
    float GetVelocityModifier() const;
    void SetVelocityModifier(float value);
    float GetHitHeading() const;
    void SetHitHeading(float value);
    int32_t GetHitBodyPart() const;
    void SetHitBodyPart(int32_t value);
    Vector GetTotalBulletForce() const;
    void SetTotalBulletForce(Vector value);
    bool GetWaitForNoAttack() const;
    void SetWaitForNoAttack(bool value);
    float GetIgnoreLadderJumpTime() const;
    void SetIgnoreLadderJumpTime(float value);
    bool GetKilledByHeadshot() const;
    void SetKilledByHeadshot(bool value);
    int32_t GetLastHitBox() const;
    void SetLastHitBox(int32_t value);
    int32_t GetLastHealth() const;
    void SetLastHealth(int32_t value);
    GCCSBot GetBot() const;
    void SetBot(GCCSBot value);
    bool GetBotAllowActive() const;
    void SetBotAllowActive(bool value);
    QAngle GetThirdPersonHeading() const;
    void SetThirdPersonHeading(QAngle value);
    float GetSlopeDropOffset() const;
    void SetSlopeDropOffset(float value);
    float GetSlopeDropHeight() const;
    void SetSlopeDropHeight(float value);
    Vector GetHeadConstraintOffset() const;
    void SetHeadConstraintOffset(Vector value);
    int32_t GetLastPickupPriority() const;
    void SetLastPickupPriority(int32_t value);
    float GetLastPickupPriorityTime() const;
    void SetLastPickupPriorityTime(float value);
    int32_t GetArmorValue() const;
    void SetArmorValue(int32_t value);
    uint16_t GetCurrentEquipmentValue() const;
    void SetCurrentEquipmentValue(uint16_t value);
    uint16_t GetRoundStartEquipmentValue() const;
    void SetRoundStartEquipmentValue(uint16_t value);
    uint16_t GetFreezetimeEndEquipmentValue() const;
    void SetFreezetimeEndEquipmentValue(uint16_t value);
    int32_t GetLastWeaponFireUsercmd() const;
    void SetLastWeaponFireUsercmd(int32_t value);
    float GetLastFriendlyFireDamageReductionRatio() const;
    void SetLastFriendlyFireDamageReductionRatio(float value);
    bool GetIsSpawning() const;
    void SetIsSpawning(bool value);
    int32_t GetDeathFlags() const;
    void SetDeathFlags(int32_t value);
    bool GetHasDeathInfo() const;
    void SetHasDeathInfo(bool value);
    float GetDeathInfoTime() const;
    void SetDeathInfoTime(float value);
    Vector GetDeathInfoOrigin() const;
    void SetDeathInfoOrigin(Vector value);
    std::vector<uint32_t> GetPlayerPatchEconIndices() const;
    void SetPlayerPatchEconIndices(std::vector<uint32_t> value);
    Color GetGunGameImmunityColor() const;
    void SetGunGameImmunityColor(Color value);
    float GetGrenadeParameterStashTime() const;
    void SetGrenadeParameterStashTime(float value);
    bool GetGrenadeParametersStashed() const;
    void SetGrenadeParametersStashed(bool value);
    QAngle GetStashedShootAngles() const;
    void SetStashedShootAngles(QAngle value);
    Vector GetStashedGrenadeThrowPosition() const;
    void SetStashedGrenadeThrowPosition(Vector value);
    Vector GetStashedVelocity() const;
    void SetStashedVelocity(Vector value);
    std::vector<QAngle> GetShootAngleHistory() const;
    void SetShootAngleHistory(std::vector<QAngle> value);
    std::vector<Vector> GetThrowPositionHistory() const;
    void SetThrowPositionHistory(std::vector<Vector> value);
    std::vector<Vector> GetVelocityHistory() const;
    void SetVelocityHistory(std::vector<Vector> value);
    GCCSPlayerPawnBase GetParent() const;
    void SetParent(GCCSPlayerPawnBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBumpMineProjectile
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBumpMineProjectile(std::string ptr, lua_State* state);
    GCBumpMineProjectile(void *ptr);

    GCBaseGrenade GetParent() const;
    void SetParent(GCBaseGrenade value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSPlayerController
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSPlayerController(std::string ptr, lua_State* state);
    GCCSPlayerController(void *ptr);

    GCCSPlayerController_InGameMoneyServices GetInGameMoneyServices() const;
    void SetInGameMoneyServices(GCCSPlayerController_InGameMoneyServices value);
    GCCSPlayerController_InventoryServices GetInventoryServices() const;
    void SetInventoryServices(GCCSPlayerController_InventoryServices value);
    GCCSPlayerController_ActionTrackingServices GetActionTrackingServices() const;
    void SetActionTrackingServices(GCCSPlayerController_ActionTrackingServices value);
    GCCSPlayerController_DamageServices GetDamageServices() const;
    void SetDamageServices(GCCSPlayerController_DamageServices value);
    uint32_t GetPing() const;
    void SetPing(uint32_t value);
    bool GetHasCommunicationAbuseMute() const;
    void SetHasCommunicationAbuseMute(bool value);
    std::string GetCrosshairCodes() const;
    void SetCrosshairCodes(std::string value);
    uint32_t GetPendingTeamNum() const;
    void SetPendingTeamNum(uint32_t value);
    float GetForceTeamTime() const;
    void SetForceTeamTime(float value);
    int32_t GetCompTeammateColor() const;
    void SetCompTeammateColor(int32_t value);
    bool GetEverPlayedOnTeam() const;
    void SetEverPlayedOnTeam(bool value);
    bool GetAttemptedToGetColor() const;
    void SetAttemptedToGetColor(bool value);
    int32_t GetTeammatePreferredColor() const;
    void SetTeammatePreferredColor(int32_t value);
    bool GetTeamChanged() const;
    void SetTeamChanged(bool value);
    bool GetInSwitchTeam() const;
    void SetInSwitchTeam(bool value);
    bool GetHasSeenJoinGame() const;
    void SetHasSeenJoinGame(bool value);
    bool GetJustBecameSpectator() const;
    void SetJustBecameSpectator(bool value);
    bool GetSwitchTeamsOnNextRoundReset() const;
    void SetSwitchTeamsOnNextRoundReset(bool value);
    bool GetRemoveAllItemsOnNextRoundReset() const;
    void SetRemoveAllItemsOnNextRoundReset(bool value);
    std::string GetClan() const;
    void SetClan(std::string value);
    std::string GetClanName() const;
    void SetClanName(std::string value);
    int32_t GetCoachingTeam() const;
    void SetCoachingTeam(int32_t value);
    uint64_t GetPlayerDominated() const;
    void SetPlayerDominated(uint64_t value);
    uint64_t GetPlayerDominatingMe() const;
    void SetPlayerDominatingMe(uint64_t value);
    int32_t GetCompetitiveRanking() const;
    void SetCompetitiveRanking(int32_t value);
    int32_t GetCompetitiveWins() const;
    void SetCompetitiveWins(int32_t value);
    int32_t GetCompetitiveRankType() const;
    void SetCompetitiveRankType(int32_t value);
    int32_t GetCompetitiveRankingPredicted_Win() const;
    void SetCompetitiveRankingPredicted_Win(int32_t value);
    int32_t GetCompetitiveRankingPredicted_Loss() const;
    void SetCompetitiveRankingPredicted_Loss(int32_t value);
    int32_t GetCompetitiveRankingPredicted_Tie() const;
    void SetCompetitiveRankingPredicted_Tie(int32_t value);
    int32_t GetEndMatchNextMapVote() const;
    void SetEndMatchNextMapVote(int32_t value);
    uint16_t GetActiveQuestId() const;
    void SetActiveQuestId(uint16_t value);
    GQuestProgress GetQuestProgressReason() const;
    void SetQuestProgressReason(GQuestProgress value);
    uint32_t GetPlayerTvControlFlags() const;
    void SetPlayerTvControlFlags(uint32_t value);
    int32_t GetDraftIndex() const;
    void SetDraftIndex(int32_t value);
    uint32_t GetMsQueuedModeDisconnectionTimestamp() const;
    void SetMsQueuedModeDisconnectionTimestamp(uint32_t value);
    uint32_t GetUiAbandonRecordedReason() const;
    void SetUiAbandonRecordedReason(uint32_t value);
    bool GetCannotBeKicked() const;
    void SetCannotBeKicked(bool value);
    bool GetEverFullyConnected() const;
    void SetEverFullyConnected(bool value);
    bool GetAbandonAllowsSurrender() const;
    void SetAbandonAllowsSurrender(bool value);
    bool GetAbandonOffersInstantSurrender() const;
    void SetAbandonOffersInstantSurrender(bool value);
    bool GetDisconnection1MinWarningPrinted() const;
    void SetDisconnection1MinWarningPrinted(bool value);
    bool GetScoreReported() const;
    void SetScoreReported(bool value);
    int32_t GetDisconnectionTick() const;
    void SetDisconnectionTick(int32_t value);
    bool GetControllingBot() const;
    void SetControllingBot(bool value);
    bool GetHasControlledBotThisRound() const;
    void SetHasControlledBotThisRound(bool value);
    bool GetHasBeenControlledByPlayerThisRound() const;
    void SetHasBeenControlledByPlayerThisRound(bool value);
    int32_t GetBotsControlledThisRound() const;
    void SetBotsControlledThisRound(int32_t value);
    bool GetCanControlObservedBot() const;
    void SetCanControlObservedBot(bool value);
    GCCSPlayerPawn GetPlayerPawn() const;
    void SetPlayerPawn(GCCSPlayerPawn value);
    GCCSObserverPawn GetObserverPawn() const;
    void SetObserverPawn(GCCSObserverPawn value);
    int32_t GetDesiredObserverMode() const;
    void SetDesiredObserverMode(int32_t value);
    GCEntityInstance GetDesiredObserverTarget() const;
    void SetDesiredObserverTarget(GCEntityInstance value);
    bool GetPawnIsAlive() const;
    void SetPawnIsAlive(bool value);
    uint32_t GetPawnHealth() const;
    void SetPawnHealth(uint32_t value);
    int32_t GetPawnArmor() const;
    void SetPawnArmor(int32_t value);
    bool GetPawnHasDefuser() const;
    void SetPawnHasDefuser(bool value);
    bool GetPawnHasHelmet() const;
    void SetPawnHasHelmet(bool value);
    uint16_t GetPawnCharacterDefIndex() const;
    void SetPawnCharacterDefIndex(uint16_t value);
    int32_t GetPawnLifetimeStart() const;
    void SetPawnLifetimeStart(int32_t value);
    int32_t GetPawnLifetimeEnd() const;
    void SetPawnLifetimeEnd(int32_t value);
    int32_t GetPawnBotDifficulty() const;
    void SetPawnBotDifficulty(int32_t value);
    GCCSPlayerController GetOriginalControllerOfCurrentPawn() const;
    void SetOriginalControllerOfCurrentPawn(GCCSPlayerController value);
    int32_t GetScore() const;
    void SetScore(int32_t value);
    int32_t GetRoundScore() const;
    void SetRoundScore(int32_t value);
    int32_t GetRoundsWon() const;
    void SetRoundsWon(int32_t value);
    std::vector<EKillTypes_t> GetKills() const;
    void SetKills(std::vector<EKillTypes_t> value);
    bool GetMvpNoMusic() const;
    void SetMvpNoMusic(bool value);
    int32_t GetMvpReason() const;
    void SetMvpReason(int32_t value);
    int32_t GetMusicKitID() const;
    void SetMusicKitID(int32_t value);
    int32_t GetMusicKitMVPs() const;
    void SetMusicKitMVPs(int32_t value);
    int32_t GetMVPs() const;
    void SetMVPs(int32_t value);
    int32_t GetUpdateCounter() const;
    void SetUpdateCounter(int32_t value);
    float GetSmoothedPing() const;
    void SetSmoothedPing(float value);
    GIntervalTimer GetLastHeldVoteTimer() const;
    void SetLastHeldVoteTimer(GIntervalTimer value);
    bool GetShowHints() const;
    void SetShowHints(bool value);
    int32_t GetNextTimeCheck() const;
    void SetNextTimeCheck(int32_t value);
    bool GetJustDidTeamKill() const;
    void SetJustDidTeamKill(bool value);
    bool GetPunishForTeamKill() const;
    void SetPunishForTeamKill(bool value);
    bool GetGaveTeamDamageWarning() const;
    void SetGaveTeamDamageWarning(bool value);
    bool GetGaveTeamDamageWarningThisRound() const;
    void SetGaveTeamDamageWarningThisRound(bool value);
    double GetDblLastReceivedPacketPlatFloatTime() const;
    void SetDblLastReceivedPacketPlatFloatTime(double value);
    float GetLastTeamDamageWarningTime() const;
    void SetLastTeamDamageWarningTime(float value);
    float GetLastTimePlayerWasDisconnectedForPawnsRemove() const;
    void SetLastTimePlayerWasDisconnectedForPawnsRemove(float value);
    uint32_t GetSuspiciousHitCount() const;
    void SetSuspiciousHitCount(uint32_t value);
    uint32_t GetNonSuspiciousHitStreak() const;
    void SetNonSuspiciousHitStreak(uint32_t value);
    GCBasePlayerController GetParent() const;
    void SetParent(GCBasePlayerController value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCChicken
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCChicken(std::string ptr, lua_State* state);
    GCChicken(void *ptr);

    GCAttributeContainer GetAttributeManager() const;
    void SetAttributeManager(GCAttributeContainer value);
    uint32_t GetActivityFinishedTag() const;
    void SetActivityFinishedTag(uint32_t value);
    GCountdownTimer GetUpdateTimer() const;
    void SetUpdateTimer(GCountdownTimer value);
    Vector GetStuckAnchor() const;
    void SetStuckAnchor(Vector value);
    GCountdownTimer GetStuckTimer() const;
    void SetStuckTimer(GCountdownTimer value);
    GCountdownTimer GetCollisionStuckTimer() const;
    void SetCollisionStuckTimer(GCountdownTimer value);
    bool GetIsOnGround() const;
    void SetIsOnGround(bool value);
    Vector GetFallVelocity() const;
    void SetFallVelocity(Vector value);
    uint64_t GetDesiredActivity() const;
    void SetDesiredActivity(uint64_t value);
    uint64_t GetCurrentActivity() const;
    void SetCurrentActivity(uint64_t value);
    GCountdownTimer GetActivityTimer() const;
    void SetActivityTimer(GCountdownTimer value);
    float GetTurnRate() const;
    void SetTurnRate(float value);
    GCBaseEntity GetFleeFrom() const;
    void SetFleeFrom(GCBaseEntity value);
    GCountdownTimer GetMoveRateThrottleTimer() const;
    void SetMoveRateThrottleTimer(GCountdownTimer value);
    GCountdownTimer GetStartleTimer() const;
    void SetStartleTimer(GCountdownTimer value);
    GCountdownTimer GetVocalizeTimer() const;
    void SetVocalizeTimer(GCountdownTimer value);
    float GetWhenZombified() const;
    void SetWhenZombified(float value);
    bool GetJumpedThisFrame() const;
    void SetJumpedThisFrame(bool value);
    GCCSPlayerPawn GetLeader() const;
    void SetLeader(GCCSPlayerPawn value);
    GCountdownTimer GetReuseTimer() const;
    void SetReuseTimer(GCountdownTimer value);
    bool GetHasBeenUsed() const;
    void SetHasBeenUsed(bool value);
    GCountdownTimer GetJumpTimer() const;
    void SetJumpTimer(GCountdownTimer value);
    float GetLastJumpTime() const;
    void SetLastJumpTime(float value);
    bool GetInJump() const;
    void SetInJump(bool value);
    bool GetIsWaitingForLeader() const;
    void SetIsWaitingForLeader(bool value);
    GCountdownTimer GetRepathTimer() const;
    void SetRepathTimer(GCountdownTimer value);
    GCountdownTimer GetInhibitDoorTimer() const;
    void SetInhibitDoorTimer(GCountdownTimer value);
    GCountdownTimer GetInhibitObstacleAvoidanceTimer() const;
    void SetInhibitObstacleAvoidanceTimer(GCountdownTimer value);
    Vector GetPathGoal() const;
    void SetPathGoal(Vector value);
    float GetActiveFollowStartTime() const;
    void SetActiveFollowStartTime(float value);
    GCountdownTimer GetFollowMinuteTimer() const;
    void SetFollowMinuteTimer(GCountdownTimer value);
    Vector GetLastEggPoopPosition() const;
    void SetLastEggPoopPosition(Vector value);
    GCountdownTimer GetBlockDirectionTimer() const;
    void SetBlockDirectionTimer(GCountdownTimer value);
    GCDynamicProp GetParent() const;
    void SetParent(GCDynamicProp value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCInfoInstructorHintBombTargetA
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCInfoInstructorHintBombTargetA(std::string ptr, lua_State* state);
    GCInfoInstructorHintBombTargetA(void *ptr);

    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWeaponAWP
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWeaponAWP(std::string ptr, lua_State* state);
    GCWeaponAWP(void *ptr);

    GCCSWeaponBaseGun GetParent() const;
    void SetParent(GCCSWeaponBaseGun value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSObserverPawn
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSObserverPawn(std::string ptr, lua_State* state);
    GCCSObserverPawn(void *ptr);

    GCCSPlayerPawnBase GetParent() const;
    void SetParent(GCCSPlayerPawnBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPostProcessingVolume
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPostProcessingVolume(std::string ptr, lua_State* state);
    GCPostProcessingVolume(void *ptr);

    float GetFadeDuration() const;
    void SetFadeDuration(float value);
    float GetMinLogExposure() const;
    void SetMinLogExposure(float value);
    float GetMaxLogExposure() const;
    void SetMaxLogExposure(float value);
    float GetMinExposure() const;
    void SetMinExposure(float value);
    float GetMaxExposure() const;
    void SetMaxExposure(float value);
    float GetExposureCompensation() const;
    void SetExposureCompensation(float value);
    float GetExposureFadeSpeedUp() const;
    void SetExposureFadeSpeedUp(float value);
    float GetExposureFadeSpeedDown() const;
    void SetExposureFadeSpeedDown(float value);
    float GetTonemapEVSmoothingRange() const;
    void SetTonemapEVSmoothingRange(float value);
    bool GetMaster() const;
    void SetMaster(bool value);
    bool GetExposureControl() const;
    void SetExposureControl(bool value);
    float GetRate() const;
    void SetRate(float value);
    float GetTonemapPercentTarget() const;
    void SetTonemapPercentTarget(float value);
    float GetTonemapPercentBrightPixels() const;
    void SetTonemapPercentBrightPixels(float value);
    float GetTonemapMinAvgLum() const;
    void SetTonemapMinAvgLum(float value);
    GCBaseTrigger GetParent() const;
    void SetParent(GCBaseTrigger value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSpotlightEnd
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSpotlightEnd(std::string ptr, lua_State* state);
    GCSpotlightEnd(void *ptr);

    float GetLightScale() const;
    void SetLightScale(float value);
    float GetRadius() const;
    void SetRadius(float value);
    Vector GetSpotlightDir() const;
    void SetSpotlightDir(Vector value);
    Vector GetSpotlightOrg() const;
    void SetSpotlightOrg(Vector value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCGamePlayerZone
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCGamePlayerZone(std::string ptr, lua_State* state);
    GCGamePlayerZone(void *ptr);

    GCEntityIOOutput GetOnPlayerInZone() const;
    void SetOnPlayerInZone(GCEntityIOOutput value);
    GCEntityIOOutput GetOnPlayerOutZone() const;
    void SetOnPlayerOutZone(GCEntityIOOutput value);
    GCRuleBrushEntity GetParent() const;
    void SetParent(GCRuleBrushEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSensorGrenade
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSensorGrenade(std::string ptr, lua_State* state);
    GCSensorGrenade(void *ptr);

    GCBaseCSGrenade GetParent() const;
    void SetParent(GCBaseCSGrenade value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSGO_WingmanIntroTerroristPosition
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSGO_WingmanIntroTerroristPosition(std::string ptr, lua_State* state);
    GCCSGO_WingmanIntroTerroristPosition(void *ptr);

    GCCSGO_WingmanIntroCharacterPosition GetParent() const;
    void SetParent(GCCSGO_WingmanIntroCharacterPosition value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTriggerDetectExplosion
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTriggerDetectExplosion(std::string ptr, lua_State* state);
    GCTriggerDetectExplosion(void *ptr);

    GCEntityIOOutput GetOnDetectedExplosion() const;
    void SetOnDetectedExplosion(GCEntityIOOutput value);
    GCBaseTrigger GetParent() const;
    void SetParent(GCBaseTrigger value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSoundStackSave
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSoundStackSave(std::string ptr, lua_State* state);
    GCSoundStackSave(void *ptr);

    std::string GetStackName() const;
    void SetStackName(std::string value);
    GCLogicalEntity GetParent() const;
    void SetParent(GCLogicalEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GConstraintSoundInfo
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GConstraintSoundInfo(std::string ptr, lua_State* state);
    GConstraintSoundInfo(void *ptr);

    GVelocitySampler GetSampler() const;
    void SetSampler(GVelocitySampler value);
    GSimpleConstraintSoundProfile GetSoundProfile() const;
    void SetSoundProfile(GSimpleConstraintSoundProfile value);
    Vector GetForwardAxis() const;
    void SetForwardAxis(Vector value);
    std::string GetTravelSoundFwd() const;
    void SetTravelSoundFwd(std::string value);
    std::string GetTravelSoundBack() const;
    void SetTravelSoundBack(std::string value);
    std::vector<CUtlSymbolLarge> GetReversalSounds() const;
    void SetReversalSounds(std::vector<CUtlSymbolLarge> value);
    bool GetPlayTravelSound() const;
    void SetPlayTravelSound(bool value);
    bool GetPlayReversalSound() const;
    void SetPlayReversalSound(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSingleplayRules
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSingleplayRules(std::string ptr, lua_State* state);
    GCSingleplayRules(void *ptr);

    bool GetSinglePlayerGameEnding() const;
    void SetSinglePlayerGameEnding(bool value);
    GCGameRules GetParent() const;
    void SetParent(GCGameRules value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFilterProximity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFilterProximity(std::string ptr, lua_State* state);
    GCFilterProximity(void *ptr);

    float GetRadius() const;
    void SetRadius(float value);
    GCBaseFilter GetParent() const;
    void SetParent(GCBaseFilter value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEconWearable
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEconWearable(std::string ptr, lua_State* state);
    GCEconWearable(void *ptr);

    int32_t GetForceSkin() const;
    void SetForceSkin(int32_t value);
    bool GetAlwaysAllow() const;
    void SetAlwaysAllow(bool value);
    GCEconEntity GetParent() const;
    void SetParent(GCEconEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSPlayer_ItemServices
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSPlayer_ItemServices(std::string ptr, lua_State* state);
    GCCSPlayer_ItemServices(void *ptr);

    bool GetHasDefuser() const;
    void SetHasDefuser(bool value);
    bool GetHasHelmet() const;
    void SetHasHelmet(bool value);
    bool GetHasHeavyArmor() const;
    void SetHasHeavyArmor(bool value);
    GCPlayer_ItemServices GetParent() const;
    void SetParent(GCPlayer_ItemServices value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFuncConveyor
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFuncConveyor(std::string ptr, lua_State* state);
    GCFuncConveyor(void *ptr);

    std::string GetConveyorModels() const;
    void SetConveyorModels(std::string value);
    float GetTransitionDurationSeconds() const;
    void SetTransitionDurationSeconds(float value);
    QAngle GetMoveEntitySpace() const;
    void SetMoveEntitySpace(QAngle value);
    Vector GetMoveDirEntitySpace() const;
    void SetMoveDirEntitySpace(Vector value);
    float GetTargetSpeed() const;
    void SetTargetSpeed(float value);
    int32 GetTransitionStartTick() const;
    void SetTransitionStartTick(int32 value);
    int32_t GetTransitionDurationTicks() const;
    void SetTransitionDurationTicks(int32_t value);
    float GetTransitionStartSpeed() const;
    void SetTransitionStartSpeed(float value);
    std::vector<GCBaseEntity> GetConveyorModels1() const;
    void SetConveyorModels1(std::vector<GCBaseEntity> value);
    GCBaseModelEntity GetParent() const;
    void SetParent(GCBaseModelEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWeaponMag7
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWeaponMag7(std::string ptr, lua_State* state);
    GCWeaponMag7(void *ptr);

    GCCSWeaponBaseGun GetParent() const;
    void SetParent(GCCSWeaponBaseGun value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMathCounter
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMathCounter(std::string ptr, lua_State* state);
    GCMathCounter(void *ptr);

    float GetMin() const;
    void SetMin(float value);
    float GetMax() const;
    void SetMax(float value);
    bool GetHitMin() const;
    void SetHitMin(bool value);
    bool GetHitMax() const;
    void SetHitMax(bool value);
    bool GetDisabled() const;
    void SetDisabled(bool value);
    GCEntityIOOutput GetOnHitMin() const;
    void SetOnHitMin(GCEntityIOOutput value);
    GCEntityIOOutput GetOnHitMax() const;
    void SetOnHitMax(GCEntityIOOutput value);
    GCEntityIOOutput GetOnChangedFromMin() const;
    void SetOnChangedFromMin(GCEntityIOOutput value);
    GCEntityIOOutput GetOnChangedFromMax() const;
    void SetOnChangedFromMax(GCEntityIOOutput value);
    GCLogicalEntity GetParent() const;
    void SetParent(GCLogicalEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCInfoWorldLayer
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCInfoWorldLayer(std::string ptr, lua_State* state);
    GCInfoWorldLayer(void *ptr);

    GCEntityIOOutput GetOutputOnEntitiesSpawned() const;
    void SetOutputOnEntitiesSpawned(GCEntityIOOutput value);
    std::string GetWorldName() const;
    void SetWorldName(std::string value);
    std::string GetLayerName() const;
    void SetLayerName(std::string value);
    bool GetWorldLayerVisible() const;
    void SetWorldLayerVisible(bool value);
    bool GetEntitiesSpawned() const;
    void SetEntitiesSpawned(bool value);
    bool GetCreateAsChildSpawnGroup() const;
    void SetCreateAsChildSpawnGroup(bool value);
    uint32_t GetLayerSpawnGroup() const;
    void SetLayerSpawnGroup(uint32_t value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCRectLight
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCRectLight(std::string ptr, lua_State* state);
    GCRectLight(void *ptr);

    bool GetShowLight() const;
    void SetShowLight(bool value);
    GCBarnLight GetParent() const;
    void SetParent(GCBarnLight value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSGO_TeamSelectCharacterPosition
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSGO_TeamSelectCharacterPosition(std::string ptr, lua_State* state);
    GCCSGO_TeamSelectCharacterPosition(void *ptr);

    GCCSGO_TeamPreviewCharacterPosition GetParent() const;
    void SetParent(GCCSGO_TeamPreviewCharacterPosition value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBaseDoor
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBaseDoor(std::string ptr, lua_State* state);
    GCBaseDoor(void *ptr);

    QAngle GetMoveEntitySpace() const;
    void SetMoveEntitySpace(QAngle value);
    Vector GetMoveDirParentSpace() const;
    void SetMoveDirParentSpace(Vector value);
    Glocksound_t GetLs() const;
    void SetLs(Glocksound_t value);
    bool GetForceClosed() const;
    void SetForceClosed(bool value);
    bool GetDoorGroup() const;
    void SetDoorGroup(bool value);
    bool GetLocked() const;
    void SetLocked(bool value);
    bool GetIgnoreDebris() const;
    void SetIgnoreDebris(bool value);
    uint64_t GetSpawnPosition() const;
    void SetSpawnPosition(uint64_t value);
    float GetBlockDamage() const;
    void SetBlockDamage(float value);
    std::string GetNoiseMoving() const;
    void SetNoiseMoving(std::string value);
    std::string GetNoiseArrived() const;
    void SetNoiseArrived(std::string value);
    std::string GetNoiseMovingClosed() const;
    void SetNoiseMovingClosed(std::string value);
    std::string GetNoiseArrivedClosed() const;
    void SetNoiseArrivedClosed(std::string value);
    std::string GetChainTarget() const;
    void SetChainTarget(std::string value);
    GCEntityIOOutput GetOnBlockedClosing() const;
    void SetOnBlockedClosing(GCEntityIOOutput value);
    GCEntityIOOutput GetOnBlockedOpening() const;
    void SetOnBlockedOpening(GCEntityIOOutput value);
    GCEntityIOOutput GetOnUnblockedClosing() const;
    void SetOnUnblockedClosing(GCEntityIOOutput value);
    GCEntityIOOutput GetOnUnblockedOpening() const;
    void SetOnUnblockedOpening(GCEntityIOOutput value);
    GCEntityIOOutput GetOnFullyClosed() const;
    void SetOnFullyClosed(GCEntityIOOutput value);
    GCEntityIOOutput GetOnFullyOpen() const;
    void SetOnFullyOpen(GCEntityIOOutput value);
    GCEntityIOOutput GetOnClose() const;
    void SetOnClose(GCEntityIOOutput value);
    GCEntityIOOutput GetOnOpen() const;
    void SetOnOpen(GCEntityIOOutput value);
    GCEntityIOOutput GetOnLockedUse() const;
    void SetOnLockedUse(GCEntityIOOutput value);
    bool GetLoopMoveSound() const;
    void SetLoopMoveSound(bool value);
    bool GetCreateNavObstacle() const;
    void SetCreateNavObstacle(bool value);
    bool GetIsChaining() const;
    void SetIsChaining(bool value);
    bool GetIsUsable() const;
    void SetIsUsable(bool value);
    GCBaseToggle GetParent() const;
    void SetParent(GCBaseToggle value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCLogicLineToEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCLogicLineToEntity(std::string ptr, lua_State* state);
    GCLogicLineToEntity(void *ptr);

    std::string GetSourceName() const;
    void SetSourceName(std::string value);
    GCBaseEntity GetStartEntity() const;
    void SetStartEntity(GCBaseEntity value);
    GCBaseEntity GetEndEntity() const;
    void SetEndEntity(GCBaseEntity value);
    GCLogicalEntity GetParent() const;
    void SetParent(GCLogicalEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCRetakeGameRules
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCRetakeGameRules(std::string ptr, lua_State* state);
    GCRetakeGameRules(void *ptr);

    int32_t GetMatchSeed() const;
    void SetMatchSeed(int32_t value);
    bool GetBlockersPresent() const;
    void SetBlockersPresent(bool value);
    bool GetRoundInProgress() const;
    void SetRoundInProgress(bool value);
    int32_t GetFirstSecondHalfRound() const;
    void SetFirstSecondHalfRound(int32_t value);
    int32_t GetBombSite() const;
    void SetBombSite(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSGameRulesProxy
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSGameRulesProxy(std::string ptr, lua_State* state);
    GCCSGameRulesProxy(void *ptr);

    GCCSGameRules GetGameRules() const;
    void SetGameRules(GCCSGameRules value);
    GCGameRulesProxy GetParent() const;
    void SetParent(GCGameRulesProxy value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvCubemapBox
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvCubemapBox(std::string ptr, lua_State* state);
    GCEnvCubemapBox(void *ptr);

    GCEnvCubemap GetParent() const;
    void SetParent(GCEnvCubemap value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSPlayer_DamageReactServices
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSPlayer_DamageReactServices(std::string ptr, lua_State* state);
    GCCSPlayer_DamageReactServices(void *ptr);

    GCPlayerPawnComponent GetParent() const;
    void SetParent(GCPlayerPawnComponent value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GServerAuthoritativeWeaponSlot_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GServerAuthoritativeWeaponSlot_t(std::string ptr, lua_State* state);
    GServerAuthoritativeWeaponSlot_t(void *ptr);

    uint16_t GetClass() const;
    void SetClass(uint16_t value);
    uint16_t GetSlot() const;
    void SetSlot(uint16_t value);
    uint16_t GetItemDefIdx() const;
    void SetItemDefIdx(uint16_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSGameRules
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSGameRules(std::string ptr, lua_State* state);
    GCCSGameRules(void *ptr);

    bool GetFreezePeriod() const;
    void SetFreezePeriod(bool value);
    bool GetWarmupPeriod() const;
    void SetWarmupPeriod(bool value);
    float GetWarmupPeriodEnd() const;
    void SetWarmupPeriodEnd(float value);
    float GetWarmupPeriodStart() const;
    void SetWarmupPeriodStart(float value);
    bool GetServerPaused() const;
    void SetServerPaused(bool value);
    bool GetTerroristTimeOutActive() const;
    void SetTerroristTimeOutActive(bool value);
    bool GetCTTimeOutActive() const;
    void SetCTTimeOutActive(bool value);
    float GetTerroristTimeOutRemaining() const;
    void SetTerroristTimeOutRemaining(float value);
    float GetCTTimeOutRemaining() const;
    void SetCTTimeOutRemaining(float value);
    int32_t GetTerroristTimeOuts() const;
    void SetTerroristTimeOuts(int32_t value);
    int32_t GetCTTimeOuts() const;
    void SetCTTimeOuts(int32_t value);
    bool GetTechnicalTimeOut() const;
    void SetTechnicalTimeOut(bool value);
    bool GetMatchWaitingForResume() const;
    void SetMatchWaitingForResume(bool value);
    int32_t GetRoundTime() const;
    void SetRoundTime(int32_t value);
    float GetMatchStartTime() const;
    void SetMatchStartTime(float value);
    float GetRoundStartTime() const;
    void SetRoundStartTime(float value);
    float GetRestartRoundTime() const;
    void SetRestartRoundTime(float value);
    bool GetGameRestart() const;
    void SetGameRestart(bool value);
    float GetGameStartTime() const;
    void SetGameStartTime(float value);
    float GetTimeUntilNextPhaseStarts() const;
    void SetTimeUntilNextPhaseStarts(float value);
    int32_t GetGamePhase() const;
    void SetGamePhase(int32_t value);
    int32_t GetTotalRoundsPlayed() const;
    void SetTotalRoundsPlayed(int32_t value);
    int32_t GetRoundsPlayedThisPhase() const;
    void SetRoundsPlayedThisPhase(int32_t value);
    int32_t GetOvertimePlaying() const;
    void SetOvertimePlaying(int32_t value);
    int32_t GetHostagesRemaining() const;
    void SetHostagesRemaining(int32_t value);
    bool GetAnyHostageReached() const;
    void SetAnyHostageReached(bool value);
    bool GetMapHasBombTarget() const;
    void SetMapHasBombTarget(bool value);
    bool GetMapHasRescueZone() const;
    void SetMapHasRescueZone(bool value);
    bool GetMapHasBuyZone() const;
    void SetMapHasBuyZone(bool value);
    bool GetIsQueuedMatchmaking() const;
    void SetIsQueuedMatchmaking(bool value);
    int32_t GetQueuedMatchmakingMode() const;
    void SetQueuedMatchmakingMode(int32_t value);
    bool GetIsValveDS() const;
    void SetIsValveDS(bool value);
    bool GetLogoMap() const;
    void SetLogoMap(bool value);
    bool GetPlayAllStepSoundsOnServer() const;
    void SetPlayAllStepSoundsOnServer(bool value);
    int32_t GetSpectatorSlotCount() const;
    void SetSpectatorSlotCount(int32_t value);
    int32_t GetMatchDevice() const;
    void SetMatchDevice(int32_t value);
    bool GetHasMatchStarted() const;
    void SetHasMatchStarted(bool value);
    int32_t GetNextMapInMapgroup() const;
    void SetNextMapInMapgroup(int32_t value);
    std::string GetTournamentEventName() const;
    void SetTournamentEventName(std::string value);
    std::string GetTournamentEventStage() const;
    void SetTournamentEventStage(std::string value);
    std::string GetMatchStatTxt() const;
    void SetMatchStatTxt(std::string value);
    std::string GetTournamentPredictionsTxt() const;
    void SetTournamentPredictionsTxt(std::string value);
    int32_t GetTournamentPredictionsPct() const;
    void SetTournamentPredictionsPct(int32_t value);
    float GetCMMItemDropRevealStartTime() const;
    void SetCMMItemDropRevealStartTime(float value);
    float GetCMMItemDropRevealEndTime() const;
    void SetCMMItemDropRevealEndTime(float value);
    bool GetIsDroppingItems() const;
    void SetIsDroppingItems(bool value);
    bool GetIsQuestEligible() const;
    void SetIsQuestEligible(bool value);
    bool GetIsHltvActive() const;
    void SetIsHltvActive(bool value);
    std::vector<uint16_t> GetProhibitedItemIndices() const;
    void SetProhibitedItemIndices(std::vector<uint16_t> value);
    std::vector<uint32_t> GetTournamentActiveCasterAccounts() const;
    void SetTournamentActiveCasterAccounts(std::vector<uint32_t> value);
    int32_t GetNumBestOfMaps() const;
    void SetNumBestOfMaps(int32_t value);
    int32_t GetHalloweenMaskListSeed() const;
    void SetHalloweenMaskListSeed(int32_t value);
    bool GetBombDropped() const;
    void SetBombDropped(bool value);
    bool GetBombPlanted() const;
    void SetBombPlanted(bool value);
    int32_t GetRoundWinStatus() const;
    void SetRoundWinStatus(int32_t value);
    int32_t GetRoundWinReason() const;
    void SetRoundWinReason(int32_t value);
    bool GetTCantBuy() const;
    void SetTCantBuy(bool value);
    bool GetCTCantBuy() const;
    void SetCTCantBuy(bool value);
    std::vector<int32_t> GetMatchStats_RoundResults() const;
    void SetMatchStats_RoundResults(std::vector<int32_t> value);
    std::vector<int32_t> GetMatchStats_PlayersAlive_CT() const;
    void SetMatchStats_PlayersAlive_CT(std::vector<int32_t> value);
    std::vector<int32_t> GetMatchStats_PlayersAlive_T() const;
    void SetMatchStats_PlayersAlive_T(std::vector<int32_t> value);
    std::vector<float> GetTeamRespawnWaveTimes() const;
    void SetTeamRespawnWaveTimes(std::vector<float> value);
    std::vector<float> GetNextRespawnWave() const;
    void SetNextRespawnWave(std::vector<float> value);
    int32_t GetServerQuestID() const;
    void SetServerQuestID(int32_t value);
    Vector GetMinimapMins() const;
    void SetMinimapMins(Vector value);
    Vector GetMinimapMaxs() const;
    void SetMinimapMaxs(Vector value);
    std::vector<float> GetMinimapVerticalSectionHeights() const;
    void SetMinimapVerticalSectionHeights(std::vector<float> value);
    bool GetSpawnedTerrorHuntHeavy() const;
    void SetSpawnedTerrorHuntHeavy(bool value);
    std::vector<int32_t> GetEndMatchMapGroupVoteTypes() const;
    void SetEndMatchMapGroupVoteTypes(std::vector<int32_t> value);
    std::vector<int32_t> GetEndMatchMapGroupVoteOptions() const;
    void SetEndMatchMapGroupVoteOptions(std::vector<int32_t> value);
    int32_t GetEndMatchMapVoteWinner() const;
    void SetEndMatchMapVoteWinner(int32_t value);
    int32_t GetNumConsecutiveCTLoses() const;
    void SetNumConsecutiveCTLoses(int32_t value);
    int32_t GetNumConsecutiveTerroristLoses() const;
    void SetNumConsecutiveTerroristLoses(int32_t value);
    bool GetHasHostageBeenTouched() const;
    void SetHasHostageBeenTouched(bool value);
    float GetIntermissionStartTime() const;
    void SetIntermissionStartTime(float value);
    float GetIntermissionEndTime() const;
    void SetIntermissionEndTime(float value);
    bool GetLevelInitialized() const;
    void SetLevelInitialized(bool value);
    int32_t GetTotalRoundsPlayed1() const;
    void SetTotalRoundsPlayed1(int32_t value);
    int32_t GetUnBalancedRounds() const;
    void SetUnBalancedRounds(int32_t value);
    bool GetEndMatchOnRoundReset() const;
    void SetEndMatchOnRoundReset(bool value);
    bool GetEndMatchOnThink() const;
    void SetEndMatchOnThink(bool value);
    int32_t GetFreezeTime() const;
    void SetFreezeTime(int32_t value);
    int32_t GetNumTerrorist() const;
    void SetNumTerrorist(int32_t value);
    int32_t GetNumCT() const;
    void SetNumCT(int32_t value);
    int32_t GetNumSpawnableTerrorist() const;
    void SetNumSpawnableTerrorist(int32_t value);
    int32_t GetNumSpawnableCT() const;
    void SetNumSpawnableCT(int32_t value);
    std::vector<int32> GetSelectedHostageSpawnIndices() const;
    void SetSelectedHostageSpawnIndices(std::vector<int32> value);
    int32_t GetSpawnPointsRandomSeed() const;
    void SetSpawnPointsRandomSeed(int32_t value);
    bool GetFirstConnected() const;
    void SetFirstConnected(bool value);
    bool GetCompleteReset() const;
    void SetCompleteReset(bool value);
    bool GetPickNewTeamsOnReset() const;
    void SetPickNewTeamsOnReset(bool value);
    bool GetScrambleTeamsOnRestart() const;
    void SetScrambleTeamsOnRestart(bool value);
    bool GetSwapTeamsOnRestart() const;
    void SetSwapTeamsOnRestart(bool value);
    std::vector<int32> GetEndMatchTiedVotes() const;
    void SetEndMatchTiedVotes(std::vector<int32> value);
    bool GetNeedToAskPlayersForContinueVote() const;
    void SetNeedToAskPlayersForContinueVote(bool value);
    uint32_t GetNumQueuedMatchmakingAccounts() const;
    void SetNumQueuedMatchmakingAccounts(uint32_t value);
    float GetAvgPlayerRank() const;
    void SetAvgPlayerRank(float value);
    std::string GetQueuedMatchmakingReservationString() const;
    void SetQueuedMatchmakingReservationString(std::string value);
    uint32_t GetNumTotalTournamentDrops() const;
    void SetNumTotalTournamentDrops(uint32_t value);
    uint32_t GetNumSpectatorsCountMax() const;
    void SetNumSpectatorsCountMax(uint32_t value);
    uint32_t GetNumSpectatorsCountMaxTV() const;
    void SetNumSpectatorsCountMaxTV(uint32_t value);
    uint32_t GetNumSpectatorsCountMaxLnk() const;
    void SetNumSpectatorsCountMaxLnk(uint32_t value);
    bool GetForceTeamChangeSilent() const;
    void SetForceTeamChangeSilent(bool value);
    bool GetLoadingRoundBackupData() const;
    void SetLoadingRoundBackupData(bool value);
    int32_t GetMatchInfoShowType() const;
    void SetMatchInfoShowType(int32_t value);
    float GetMatchInfoDecidedTime() const;
    void SetMatchInfoDecidedTime(float value);
    int32_t GetMTeamDMLastWinningTeamNumber() const;
    void SetMTeamDMLastWinningTeamNumber(int32_t value);
    float GetMTeamDMLastThinkTime() const;
    void SetMTeamDMLastThinkTime(float value);
    float GetTeamDMLastAnnouncementTime() const;
    void SetTeamDMLastAnnouncementTime(float value);
    int32_t GetAccountTerrorist() const;
    void SetAccountTerrorist(int32_t value);
    int32_t GetAccountCT() const;
    void SetAccountCT(int32_t value);
    int32_t GetSpawnPointCount_Terrorist() const;
    void SetSpawnPointCount_Terrorist(int32_t value);
    int32_t GetSpawnPointCount_CT() const;
    void SetSpawnPointCount_CT(int32_t value);
    int32_t GetMaxNumTerrorists() const;
    void SetMaxNumTerrorists(int32_t value);
    int32_t GetMaxNumCTs() const;
    void SetMaxNumCTs(int32_t value);
    int32_t GetLoserBonusMostRecentTeam() const;
    void SetLoserBonusMostRecentTeam(int32_t value);
    float GetTmNextPeriodicThink() const;
    void SetTmNextPeriodicThink(float value);
    bool GetVoiceWonMatchBragFired() const;
    void SetVoiceWonMatchBragFired(bool value);
    float GetWarmupNextChatNoticeTime() const;
    void SetWarmupNextChatNoticeTime(float value);
    int32_t GetHostagesRescued() const;
    void SetHostagesRescued(int32_t value);
    int32_t GetHostagesTouched() const;
    void SetHostagesTouched(int32_t value);
    float GetNextHostageAnnouncement() const;
    void SetNextHostageAnnouncement(float value);
    bool GetNoTerroristsKilled() const;
    void SetNoTerroristsKilled(bool value);
    bool GetNoCTsKilled() const;
    void SetNoCTsKilled(bool value);
    bool GetNoEnemiesKilled() const;
    void SetNoEnemiesKilled(bool value);
    bool GetCanDonateWeapons() const;
    void SetCanDonateWeapons(bool value);
    float GetFirstKillTime() const;
    void SetFirstKillTime(float value);
    float GetFirstBloodTime() const;
    void SetFirstBloodTime(float value);
    bool GetHostageWasInjured() const;
    void SetHostageWasInjured(bool value);
    bool GetHostageWasKilled() const;
    void SetHostageWasKilled(bool value);
    bool GetVoteCalled() const;
    void SetVoteCalled(bool value);
    bool GetServerVoteOnReset() const;
    void SetServerVoteOnReset(bool value);
    float GetVoteCheckThrottle() const;
    void SetVoteCheckThrottle(float value);
    bool GetBuyTimeEnded() const;
    void SetBuyTimeEnded(bool value);
    int32_t GetLastFreezeEndBeep() const;
    void SetLastFreezeEndBeep(int32_t value);
    bool GetTargetBombed() const;
    void SetTargetBombed(bool value);
    bool GetBombDefused() const;
    void SetBombDefused(bool value);
    bool GetMapHasBombZone() const;
    void SetMapHasBombZone(bool value);
    Vector GetMainCTSpawnPos() const;
    void SetMainCTSpawnPos(Vector value);
    std::vector<GSpawnPoint*> GetCTSpawnPointsMasterList() const;
    void SetCTSpawnPointsMasterList(std::vector<GSpawnPoint*> value);
    std::vector<GSpawnPoint*> GetTerroristSpawnPointsMasterList() const;
    void SetTerroristSpawnPointsMasterList(std::vector<GSpawnPoint*> value);
    bool GetRespawningAllRespawnablePlayers() const;
    void SetRespawningAllRespawnablePlayers(bool value);
    int32_t GetNextCTSpawnPoint() const;
    void SetNextCTSpawnPoint(int32_t value);
    float GetCTSpawnPointUsedTime() const;
    void SetCTSpawnPointUsedTime(float value);
    int32_t GetNextTerroristSpawnPoint() const;
    void SetNextTerroristSpawnPoint(int32_t value);
    float GetTerroristSpawnPointUsedTime() const;
    void SetTerroristSpawnPointUsedTime(float value);
    std::vector<GSpawnPoint*> GetCTSpawnPoints() const;
    void SetCTSpawnPoints(std::vector<GSpawnPoint*> value);
    std::vector<GSpawnPoint*> GetTerroristSpawnPoints() const;
    void SetTerroristSpawnPoints(std::vector<GSpawnPoint*> value);
    bool GetIsUnreservedGameServer() const;
    void SetIsUnreservedGameServer(bool value);
    float GetAutobalanceDisplayTime() const;
    void SetAutobalanceDisplayTime(float value);
    bool GetAllowWeaponSwitch() const;
    void SetAllowWeaponSwitch(bool value);
    bool GetRoundTimeWarningTriggered() const;
    void SetRoundTimeWarningTriggered(bool value);
    float GetPhaseChangeAnnouncementTime() const;
    void SetPhaseChangeAnnouncementTime(float value);
    float GetNextUpdateTeamClanNamesTime() const;
    void SetNextUpdateTeamClanNamesTime(float value);
    float GetLastThinkTime() const;
    void SetLastThinkTime(float value);
    float GetAccumulatedRoundOffDamage() const;
    void SetAccumulatedRoundOffDamage(float value);
    int32_t GetShorthandedBonusLastEvalRound() const;
    void SetShorthandedBonusLastEvalRound(int32_t value);
    int32_t GetMatchAbortedEarlyReason() const;
    void SetMatchAbortedEarlyReason(int32_t value);
    bool GetHasTriggeredRoundStartMusic() const;
    void SetHasTriggeredRoundStartMusic(bool value);
    bool GetSwitchingTeamsAtRoundReset() const;
    void SetSwitchingTeamsAtRoundReset(bool value);
    GCCSGameModeRules GetGameModeRules() const;
    void SetGameModeRules(GCCSGameModeRules value);
    GCBaseEntity GetPlayerResource() const;
    void SetPlayerResource(GCBaseEntity value);
    GCRetakeGameRules GetRetakeRules() const;
    void SetRetakeRules(GCRetakeGameRules value);
    std::vector<bool> GetTeamLastKillUsedUniqueWeaponMatch() const;
    void SetTeamLastKillUsedUniqueWeaponMatch(std::vector<bool> value);
    uint32_t GetMatchEndCount() const;
    void SetMatchEndCount(uint32_t value);
    int32_t GetTTeamIntroVariant() const;
    void SetTTeamIntroVariant(int32_t value);
    int32_t GetCTTeamIntroVariant() const;
    void SetCTTeamIntroVariant(int32_t value);
    bool GetTeamIntroPeriod() const;
    void SetTeamIntroPeriod(bool value);
    float GetTeamIntroPeriodEnd() const;
    void SetTeamIntroPeriodEnd(float value);
    bool GetPlayedTeamIntroVO() const;
    void SetPlayedTeamIntroVO(bool value);
    int32_t GetRoundEndWinnerTeam() const;
    void SetRoundEndWinnerTeam(int32_t value);
    int32_t GetRoundEndReason() const;
    void SetRoundEndReason(int32_t value);
    bool GetRoundEndShowTimerDefend() const;
    void SetRoundEndShowTimerDefend(bool value);
    int32_t GetRoundEndTimerTime() const;
    void SetRoundEndTimerTime(int32_t value);
    std::string GetRoundEndFunFactToken() const;
    void SetRoundEndFunFactToken(std::string value);
    int32_t GetRoundEndFunFactPlayerSlot() const;
    void SetRoundEndFunFactPlayerSlot(int32_t value);
    int32_t GetRoundEndFunFactData1() const;
    void SetRoundEndFunFactData1(int32_t value);
    int32_t GetRoundEndFunFactData2() const;
    void SetRoundEndFunFactData2(int32_t value);
    int32_t GetRoundEndFunFactData3() const;
    void SetRoundEndFunFactData3(int32_t value);
    std::string GetRoundEndMessage() const;
    void SetRoundEndMessage(std::string value);
    int32_t GetRoundEndPlayerCount() const;
    void SetRoundEndPlayerCount(int32_t value);
    bool GetRoundEndNoMusic() const;
    void SetRoundEndNoMusic(bool value);
    int32_t GetRoundEndLegacy() const;
    void SetRoundEndLegacy(int32_t value);
    uint32_t GetRoundEndCount() const;
    void SetRoundEndCount(uint32_t value);
    int32_t GetRoundStartRoundNumber() const;
    void SetRoundStartRoundNumber(int32_t value);
    uint32_t GetRoundStartCount() const;
    void SetRoundStartCount(uint32_t value);
    double GetLastPerfSampleTime() const;
    void SetLastPerfSampleTime(double value);
    GCTeamplayRules GetParent() const;
    void SetParent(GCTeamplayRules value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCColorCorrection
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCColorCorrection(std::string ptr, lua_State* state);
    GCColorCorrection(void *ptr);

    float GetFadeInDuration() const;
    void SetFadeInDuration(float value);
    float GetFadeOutDuration() const;
    void SetFadeOutDuration(float value);
    float GetStartFadeInWeight() const;
    void SetStartFadeInWeight(float value);
    float GetStartFadeOutWeight() const;
    void SetStartFadeOutWeight(float value);
    float GetTimeStartFadeIn() const;
    void SetTimeStartFadeIn(float value);
    float GetTimeStartFadeOut() const;
    void SetTimeStartFadeOut(float value);
    float GetMaxWeight() const;
    void SetMaxWeight(float value);
    bool GetStartDisabled() const;
    void SetStartDisabled(bool value);
    bool GetEnabled() const;
    void SetEnabled(bool value);
    bool GetMaster() const;
    void SetMaster(bool value);
    bool GetClientSide() const;
    void SetClientSide(bool value);
    bool GetExclusive() const;
    void SetExclusive(bool value);
    float GetMinFalloff() const;
    void SetMinFalloff(float value);
    float GetMaxFalloff() const;
    void SetMaxFalloff(float value);
    float GetCurWeight() const;
    void SetCurWeight(float value);
    std::string GetNetlookupFilename() const;
    void SetNetlookupFilename(std::string value);
    std::string GetLookupFilename() const;
    void SetLookupFilename(std::string value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWeaponElite
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWeaponElite(std::string ptr, lua_State* state);
    GCWeaponElite(void *ptr);

    GCCSWeaponBaseGun GetParent() const;
    void SetParent(GCCSWeaponBaseGun value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSoundEventEntityAlias_snd_event_point
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSoundEventEntityAlias_snd_event_point(std::string ptr, lua_State* state);
    GCSoundEventEntityAlias_snd_event_point(void *ptr);

    GCSoundEventEntity GetParent() const;
    void SetParent(GCSoundEventEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBaseEntityAPI
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBaseEntityAPI(std::string ptr, lua_State* state);
    GCBaseEntityAPI(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCC4
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCC4(std::string ptr, lua_State* state);
    GCC4(void *ptr);

    Vector GetLastValidPlayerHeldPosition() const;
    void SetLastValidPlayerHeldPosition(Vector value);
    Vector GetLastValidDroppedPosition() const;
    void SetLastValidDroppedPosition(Vector value);
    bool GetDoValidDroppedPositionCheck() const;
    void SetDoValidDroppedPositionCheck(bool value);
    bool GetStartedArming() const;
    void SetStartedArming(bool value);
    float GetArmedTime() const;
    void SetArmedTime(float value);
    bool GetBombPlacedAnimation() const;
    void SetBombPlacedAnimation(bool value);
    bool GetIsPlantingViaUse() const;
    void SetIsPlantingViaUse(bool value);
    GEntitySpottedState_t GetEntitySpottedState() const;
    void SetEntitySpottedState(GEntitySpottedState_t value);
    int32_t GetSpotRules() const;
    void SetSpotRules(int32_t value);
    std::vector<bool> GetPlayedArmingBeeps() const;
    void SetPlayedArmingBeeps(std::vector<bool> value);
    bool GetBombPlanted() const;
    void SetBombPlanted(bool value);
    GCCSWeaponBase GetParent() const;
    void SetParent(GCCSWeaponBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCHostageRescueZone
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCHostageRescueZone(std::string ptr, lua_State* state);
    GCHostageRescueZone(void *ptr);

    GCHostageRescueZoneShim GetParent() const;
    void SetParent(GCHostageRescueZoneShim value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPointPrefab
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPointPrefab(std::string ptr, lua_State* state);
    GCPointPrefab(void *ptr);

    std::string GetTargetMapName() const;
    void SetTargetMapName(std::string value);
    std::string GetForceWorldGroupID() const;
    void SetForceWorldGroupID(std::string value);
    std::string GetAssociatedRelayTargetName() const;
    void SetAssociatedRelayTargetName(std::string value);
    bool GetFixupNames() const;
    void SetFixupNames(bool value);
    bool GetLoadDynamic() const;
    void SetLoadDynamic(bool value);
    GCPointPrefab GetAssociatedRelayEntity() const;
    void SetAssociatedRelayEntity(GCPointPrefab value);
    GCServerOnlyPointEntity GetParent() const;
    void SetParent(GCServerOnlyPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCRotDoor
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCRotDoor(std::string ptr, lua_State* state);
    GCRotDoor(void *ptr);

    bool GetSolidBsp() const;
    void SetSolidBsp(bool value);
    GCBaseDoor GetParent() const;
    void SetParent(GCBaseDoor value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSkeletonAnimationController
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSkeletonAnimationController(std::string ptr, lua_State* state);
    GCSkeletonAnimationController(void *ptr);

    GCSkeletonInstance GetSkeletonInstance() const;
    void SetSkeletonInstance(GCSkeletonInstance value);
    GISkeletonAnimationController GetParent() const;
    void SetParent(GISkeletonAnimationController value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTablet
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTablet(std::string ptr, lua_State* state);
    GCTablet(void *ptr);

    GCCSWeaponBase GetParent() const;
    void SetParent(GCCSWeaponBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTankTrainAI
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTankTrainAI(std::string ptr, lua_State* state);
    GCTankTrainAI(void *ptr);

    GCFuncTrackTrain GetTrain() const;
    void SetTrain(GCFuncTrackTrain value);
    GCBaseEntity GetTargetEntity() const;
    void SetTargetEntity(GCBaseEntity value);
    int32_t GetSoundPlaying() const;
    void SetSoundPlaying(int32_t value);
    std::string GetStartSoundName() const;
    void SetStartSoundName(std::string value);
    std::string GetEngineSoundName() const;
    void SetEngineSoundName(std::string value);
    std::string GetMovementSoundName() const;
    void SetMovementSoundName(std::string value);
    std::string GetTargetEntityName() const;
    void SetTargetEntityName(std::string value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCGameGibManager
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCGameGibManager(std::string ptr, lua_State* state);
    GCGameGibManager(void *ptr);

    bool GetAllowNewGibs() const;
    void SetAllowNewGibs(bool value);
    int32_t GetCurrentMaxPieces() const;
    void SetCurrentMaxPieces(int32_t value);
    int32_t GetMaxPieces() const;
    void SetMaxPieces(int32_t value);
    int32_t GetLastFrame() const;
    void SetLastFrame(int32_t value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSPointScript
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSPointScript(std::string ptr, lua_State* state);
    GCCSPointScript(void *ptr);

    GCCSPointScriptEntity GetParent() const;
    void SetParent(GCCSPointScriptEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCRagdollPropAlias_physics_prop_ragdoll
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCRagdollPropAlias_physics_prop_ragdoll(std::string ptr, lua_State* state);
    GCRagdollPropAlias_physics_prop_ragdoll(void *ptr);

    GCRagdollProp GetParent() const;
    void SetParent(GCRagdollProp value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSSprite
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSSprite(std::string ptr, lua_State* state);
    GCCSSprite(void *ptr);

    GCSprite GetParent() const;
    void SetParent(GCSprite value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFuncPropRespawnZone
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFuncPropRespawnZone(std::string ptr, lua_State* state);
    GCFuncPropRespawnZone(void *ptr);

    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCInfoDeathmatchSpawn
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCInfoDeathmatchSpawn(std::string ptr, lua_State* state);
    GCInfoDeathmatchSpawn(void *ptr);

    GSpawnPoint GetParent() const;
    void SetParent(GSpawnPoint value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWeaponSCAR20
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWeaponSCAR20(std::string ptr, lua_State* state);
    GCWeaponSCAR20(void *ptr);

    GCCSWeaponBaseGun GetParent() const;
    void SetParent(GCCSWeaponBaseGun value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTripWireFireProjectile
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTripWireFireProjectile(std::string ptr, lua_State* state);
    GCTripWireFireProjectile(void *ptr);

    GCBaseGrenade GetParent() const;
    void SetParent(GCBaseGrenade value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFuncTrackAuto
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFuncTrackAuto(std::string ptr, lua_State* state);
    GCFuncTrackAuto(void *ptr);

    GCFuncTrackChange GetParent() const;
    void SetParent(GCFuncTrackChange value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvSpark
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvSpark(std::string ptr, lua_State* state);
    GCEnvSpark(void *ptr);

    float GetDelay() const;
    void SetDelay(float value);
    int32_t GetMagnitude() const;
    void SetMagnitude(int32_t value);
    int32_t GetTrailLength() const;
    void SetTrailLength(int32_t value);
    int32_t GetType() const;
    void SetType(int32_t value);
    GCEntityIOOutput GetOnSpark() const;
    void SetOnSpark(GCEntityIOOutput value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSObserver_ObserverServices
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSObserver_ObserverServices(std::string ptr, lua_State* state);
    GCCSObserver_ObserverServices(void *ptr);

    GCPlayer_ObserverServices GetParent() const;
    void SetParent(GCPlayer_ObserverServices value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPlayer_AutoaimServices
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPlayer_AutoaimServices(std::string ptr, lua_State* state);
    GCPlayer_AutoaimServices(void *ptr);

    GCPlayerPawnComponent GetParent() const;
    void SetParent(GCPlayerPawnComponent value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFuncTrain
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFuncTrain(std::string ptr, lua_State* state);
    GCFuncTrain(void *ptr);

    GCBaseEntity GetCurrentTarget() const;
    void SetCurrentTarget(GCBaseEntity value);
    bool GetActivated() const;
    void SetActivated(bool value);
    GCBaseEntity GetEnemy() const;
    void SetEnemy(GCBaseEntity value);
    float GetBlockDamage() const;
    void SetBlockDamage(float value);
    float GetNextBlockTime() const;
    void SetNextBlockTime(float value);
    std::string GetLastTarget() const;
    void SetLastTarget(std::string value);
    GCBasePlatTrain GetParent() const;
    void SetParent(GCBasePlatTrain value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCHostageAlias_info_hostage_spawn
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCHostageAlias_info_hostage_spawn(std::string ptr, lua_State* state);
    GCHostageAlias_info_hostage_spawn(void *ptr);

    GCHostage GetParent() const;
    void SetParent(GCHostage value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNavLinkAreaEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNavLinkAreaEntity(std::string ptr, lua_State* state);
    GCNavLinkAreaEntity(void *ptr);

    float GetWidth() const;
    void SetWidth(float value);
    Vector GetLocatorOffset() const;
    void SetLocatorOffset(Vector value);
    QAngle GetLocatorAnglesOffset() const;
    void SetLocatorAnglesOffset(QAngle value);
    std::string GetStrMovementForward() const;
    void SetStrMovementForward(std::string value);
    std::string GetStrMovementReverse() const;
    void SetStrMovementReverse(std::string value);
    int32_t GetNavLinkIdForward() const;
    void SetNavLinkIdForward(int32_t value);
    int32_t GetNavLinkIdReverse() const;
    void SetNavLinkIdReverse(int32_t value);
    bool GetEnabled() const;
    void SetEnabled(bool value);
    std::string GetStrFilterName() const;
    void SetStrFilterName(std::string value);
    GCBaseFilter GetFilter() const;
    void SetFilter(GCBaseFilter value);
    GCEntityIOOutput GetOnNavLinkStart() const;
    void SetOnNavLinkStart(GCEntityIOOutput value);
    GCEntityIOOutput GetOnNavLinkFinish() const;
    void SetOnNavLinkFinish(GCEntityIOOutput value);
    bool GetIsTerminus() const;
    void SetIsTerminus(bool value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFuncMoveLinearAlias_momentary_door
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFuncMoveLinearAlias_momentary_door(std::string ptr, lua_State* state);
    GCFuncMoveLinearAlias_momentary_door(void *ptr);

    GCFuncMoveLinear GetParent() const;
    void SetParent(GCFuncMoveLinear value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCommentaryAuto
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCommentaryAuto(std::string ptr, lua_State* state);
    GCCommentaryAuto(void *ptr);

    GCEntityIOOutput GetOnCommentaryNewGame() const;
    void SetOnCommentaryNewGame(GCEntityIOOutput value);
    GCEntityIOOutput GetOnCommentaryMidGame() const;
    void SetOnCommentaryMidGame(GCEntityIOOutput value);
    GCEntityIOOutput GetOnCommentaryMultiplayerSpawn() const;
    void SetOnCommentaryMultiplayerSpawn(GCEntityIOOutput value);
    GCBaseEntity GetParent() const;
    void SetParent(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMapInfo
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMapInfo(std::string ptr, lua_State* state);
    GCMapInfo(void *ptr);

    int32_t GetBuyingStatus() const;
    void SetBuyingStatus(int32_t value);
    float GetBombRadius() const;
    void SetBombRadius(float value);
    int32_t GetPetPopulation() const;
    void SetPetPopulation(int32_t value);
    bool GetUseNormalSpawnsForDM() const;
    void SetUseNormalSpawnsForDM(bool value);
    bool GetDisableAutoGeneratedDMSpawns() const;
    void SetDisableAutoGeneratedDMSpawns(bool value);
    float GetBotMaxVisionDistance() const;
    void SetBotMaxVisionDistance(float value);
    int32_t GetHostageCount() const;
    void SetHostageCount(int32_t value);
    bool GetFadePlayerVisibilityFarZ() const;
    void SetFadePlayerVisibilityFarZ(bool value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTriggerBombReset
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTriggerBombReset(std::string ptr, lua_State* state);
    GCTriggerBombReset(void *ptr);

    GCBaseTrigger GetParent() const;
    void SetParent(GCBaseTrigger value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBaseDMStart
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBaseDMStart(std::string ptr, lua_State* state);
    GCBaseDMStart(void *ptr);

    std::string GetMaster() const;
    void SetMaster(std::string value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCLogicMeasureMovement
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCLogicMeasureMovement(std::string ptr, lua_State* state);
    GCLogicMeasureMovement(void *ptr);

    std::string GetStrMeasureTarget() const;
    void SetStrMeasureTarget(std::string value);
    std::string GetStrMeasureReference() const;
    void SetStrMeasureReference(std::string value);
    std::string GetStrTargetReference() const;
    void SetStrTargetReference(std::string value);
    GCBaseEntity GetMeasureTarget() const;
    void SetMeasureTarget(GCBaseEntity value);
    GCBaseEntity GetMeasureReference() const;
    void SetMeasureReference(GCBaseEntity value);
    GCBaseEntity GetTarget() const;
    void SetTarget(GCBaseEntity value);
    GCBaseEntity GetTargetReference() const;
    void SetTargetReference(GCBaseEntity value);
    float GetScale() const;
    void SetScale(float value);
    int32_t GetMeasureType() const;
    void SetMeasureType(int32_t value);
    GCLogicalEntity GetParent() const;
    void SetParent(GCLogicalEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GViewAngleServerChange_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GViewAngleServerChange_t(std::string ptr, lua_State* state);
    GViewAngleServerChange_t(void *ptr);

    uint64_t GetType() const;
    void SetType(uint64_t value);
    QAngle GetAngle() const;
    void SetAngle(QAngle value);
    uint32_t GetIndex() const;
    void SetIndex(uint32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GPhysicsRagdollPose_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GPhysicsRagdollPose_t(std::string ptr, lua_State* state);
    GPhysicsRagdollPose_t(void *ptr);

    GCNetworkVarChainer Get__pChainEntity() const;
    void Set__pChainEntity(GCNetworkVarChainer value);
    GCBaseEntity GetOwner() const;
    void SetOwner(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBreachChargeProjectile
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBreachChargeProjectile(std::string ptr, lua_State* state);
    GCBreachChargeProjectile(void *ptr);

    GCBaseGrenade GetParent() const;
    void SetParent(GCBaseGrenade value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCRangeFloat
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCRangeFloat(std::string ptr, lua_State* state);
    GCRangeFloat(void *ptr);

    std::vector<float> GetValue() const;
    void SetValue(std::vector<float> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimEventListenerBase
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimEventListenerBase(std::string ptr, lua_State* state);
    GCAnimEventListenerBase(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GRelationship_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GRelationship_t(std::string ptr, lua_State* state);
    GRelationship_t(void *ptr);

    uint64_t GetDisposition() const;
    void SetDisposition(uint64_t value);
    int32_t GetPriority() const;
    void SetPriority(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCRemapFloat
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCRemapFloat(std::string ptr, lua_State* state);
    GCRemapFloat(void *ptr);

    std::vector<float> GetValue() const;
    void SetValue(std::vector<float> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GIGapHost_GameEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GIGapHost_GameEntity(std::string ptr, lua_State* state);
    GIGapHost_GameEntity(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFootstepTableHandle
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFootstepTableHandle(std::string ptr, lua_State* state);
    GCFootstepTableHandle(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSPlayerController_InventoryServices
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSPlayerController_InventoryServices(std::string ptr, lua_State* state);
    GCCSPlayerController_InventoryServices(void *ptr);

    uint16_t GetMusicID() const;
    void SetMusicID(uint16_t value);
    std::vector<uint64_t> GetRank() const;
    void SetRank(std::vector<uint64_t> value);
    int32_t GetPersonaDataPublicLevel() const;
    void SetPersonaDataPublicLevel(int32_t value);
    int32_t GetPersonaDataPublicCommendsLeader() const;
    void SetPersonaDataPublicCommendsLeader(int32_t value);
    int32_t GetPersonaDataPublicCommendsTeacher() const;
    void SetPersonaDataPublicCommendsTeacher(int32_t value);
    int32_t GetPersonaDataPublicCommendsFriendly() const;
    void SetPersonaDataPublicCommendsFriendly(int32_t value);
    int32_t GetPersonaDataXpTrailLevel() const;
    void SetPersonaDataXpTrailLevel(int32_t value);
    std::vector<uint32_t> GetEquippedPlayerSprayIDs() const;
    void SetEquippedPlayerSprayIDs(std::vector<uint32_t> value);
    std::vector<GServerAuthoritativeWeaponSlot_t> GetServerAuthoritativeWeaponSlots() const;
    void SetServerAuthoritativeWeaponSlots(std::vector<GServerAuthoritativeWeaponSlot_t> value);
    GCPlayerControllerComponent GetParent() const;
    void SetParent(GCPlayerControllerComponent value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCResponseQueue
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCResponseQueue(std::string ptr, lua_State* state);
    GCResponseQueue(void *ptr);

    std::vector<GCAI_Expresser*> GetExpresserTargets() const;
    void SetExpresserTargets(std::vector<GCAI_Expresser*> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCScriptUniformRandomStream
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCScriptUniformRandomStream(std::string ptr, lua_State* state);
    GCScriptUniformRandomStream(void *ptr);

    int32_t GetInitialSeed() const;
    void SetInitialSeed(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GParticleIndex_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GParticleIndex_t(std::string ptr, lua_State* state);
    GParticleIndex_t(void *ptr);

    int32_t GetValue() const;
    void SetValue(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPhysHinge
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPhysHinge(std::string ptr, lua_State* state);
    GCPhysHinge(void *ptr);

    GConstraintSoundInfo GetSoundInfo() const;
    void SetSoundInfo(GConstraintSoundInfo value);
    GCEntityIOOutput GetNotifyMinLimitReached() const;
    void SetNotifyMinLimitReached(GCEntityIOOutput value);
    GCEntityIOOutput GetNotifyMaxLimitReached() const;
    void SetNotifyMaxLimitReached(GCEntityIOOutput value);
    bool GetAtMinLimit() const;
    void SetAtMinLimit(bool value);
    bool GetAtMaxLimit() const;
    void SetAtMaxLimit(bool value);
    Gconstraint_hingeparams_t GetHinge() const;
    void SetHinge(Gconstraint_hingeparams_t value);
    float GetHingeFriction() const;
    void SetHingeFriction(float value);
    float GetSystemLoadScale() const;
    void SetSystemLoadScale(float value);
    bool GetIsAxisLocal() const;
    void SetIsAxisLocal(bool value);
    float GetMinRotation() const;
    void SetMinRotation(float value);
    float GetMaxRotation() const;
    void SetMaxRotation(float value);
    float GetInitialRotation() const;
    void SetInitialRotation(float value);
    float GetMotorFrequency() const;
    void SetMotorFrequency(float value);
    float GetMotorDampingRatio() const;
    void SetMotorDampingRatio(float value);
    float GetAngleSpeed() const;
    void SetAngleSpeed(float value);
    float GetAngleSpeedThreshold() const;
    void SetAngleSpeedThreshold(float value);
    GCEntityIOOutput GetOnStartMoving() const;
    void SetOnStartMoving(GCEntityIOOutput value);
    GCEntityIOOutput GetOnStopMoving() const;
    void SetOnStopMoving(GCEntityIOOutput value);
    GCPhysConstraint GetParent() const;
    void SetParent(GCPhysConstraint value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSimpleSimTimer
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSimpleSimTimer(std::string ptr, lua_State* state);
    GCSimpleSimTimer(void *ptr);

    float GetNext() const;
    void SetNext(float value);
    uint32_t GetWorldGroupId() const;
    void SetWorldGroupId(uint32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSkillDamage
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSkillDamage(std::string ptr, lua_State* state);
    GCSkillDamage(void *ptr);

    GCSkillFloat GetDamage() const;
    void SetDamage(GCSkillFloat value);
    float GetNPCDamageScalarVsNPC() const;
    void SetNPCDamageScalarVsNPC(float value);
    float GetPhysicsForceDamage() const;
    void SetPhysicsForceDamage(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimEventQueueListener
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimEventQueueListener(std::string ptr, lua_State* state);
    GCAnimEventQueueListener(void *ptr);

    GCAnimEventListenerBase GetParent() const;
    void SetParent(GCAnimEventListenerBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvLaser
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvLaser(std::string ptr, lua_State* state);
    GCEnvLaser(void *ptr);

    std::string GetLaserTarget() const;
    void SetLaserTarget(std::string value);
    GCSprite GetSprite() const;
    void SetSprite(GCSprite value);
    std::string GetSpriteName() const;
    void SetSpriteName(std::string value);
    Vector GetFirePosition() const;
    void SetFirePosition(Vector value);
    float GetStartFrame() const;
    void SetStartFrame(float value);
    GCBeam GetParent() const;
    void SetParent(GCBeam value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFiringModeFloat
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFiringModeFloat(std::string ptr, lua_State* state);
    GCFiringModeFloat(void *ptr);

    std::vector<float> GetValues() const;
    void SetValues(std::vector<float> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCRopeOverlapHit
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCRopeOverlapHit(std::string ptr, lua_State* state);
    GCRopeOverlapHit(void *ptr);

    GCBaseEntity GetEntity() const;
    void SetEntity(GCBaseEntity value);
    std::vector<int32> GetOverlappingLinks() const;
    void SetOverlappingLinks(std::vector<int32> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GResponseContext_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GResponseContext_t(std::string ptr, lua_State* state);
    GResponseContext_t(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    std::string GetValue() const;
    void SetValue(std::string value);
    float GetExpirationTime() const;
    void SetExpirationTime(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNavVolume
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNavVolume(std::string ptr, lua_State* state);
    GCNavVolume(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSObserver_MovementServices
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSObserver_MovementServices(std::string ptr, lua_State* state);
    GCCSObserver_MovementServices(void *ptr);

    GCPlayer_MovementServices GetParent() const;
    void SetParent(GCPlayer_MovementServices value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSGOPlayerAnimGraphState
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSGOPlayerAnimGraphState(std::string ptr, lua_State* state);
    GCCSGOPlayerAnimGraphState(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCGameScriptedMoveData
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCGameScriptedMoveData(std::string ptr, lua_State* state);
    GCGameScriptedMoveData(void *ptr);

    Vector GetAccumulatedRootMotion() const;
    void SetAccumulatedRootMotion(Vector value);
    Vector GetDest() const;
    void SetDest(Vector value);
    Vector GetSrc() const;
    void SetSrc(Vector value);
    QAngle GetSrc1() const;
    void SetSrc1(QAngle value);
    QAngle GetDst() const;
    void SetDst(QAngle value);
    QAngle GetCurrent() const;
    void SetCurrent(QAngle value);
    float GetAngRate() const;
    void SetAngRate(float value);
    float GetDuration() const;
    void SetDuration(float value);
    float GetStartTime() const;
    void SetStartTime(float value);
    bool GetActive() const;
    void SetActive(bool value);
    bool GetTeleportOnEnd() const;
    void SetTeleportOnEnd(bool value);
    bool GetIgnoreRotation() const;
    void SetIgnoreRotation(bool value);
    uint64_t GetType() const;
    void SetType(uint64_t value);
    bool GetSuccess() const;
    void SetSuccess(bool value);
    uint64_t GetForcedCrouchState() const;
    void SetForcedCrouchState(uint64_t value);
    bool GetIgnoreCollisions() const;
    void SetIgnoreCollisions(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBaseAnimGraphController
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBaseAnimGraphController(std::string ptr, lua_State* state);
    GCBaseAnimGraphController(void *ptr);

    GCAnimGraphNetworkedVariables GetAnimGraphNetworkedVars() const;
    void SetAnimGraphNetworkedVars(GCAnimGraphNetworkedVariables value);
    bool GetSequenceFinished() const;
    void SetSequenceFinished(bool value);
    float GetSoundSyncTime() const;
    void SetSoundSyncTime(float value);
    uint32_t GetActiveIKChainMask() const;
    void SetActiveIKChainMask(uint32_t value);
    float GetSeqStartTime() const;
    void SetSeqStartTime(float value);
    float GetSeqFixedCycle() const;
    void SetSeqFixedCycle(float value);
    uint64_t GetAnimLoopMode() const;
    void SetAnimLoopMode(uint64_t value);
    float GetPlaybackRate() const;
    void SetPlaybackRate(float value);
    uint64_t GetNotifyState() const;
    void SetNotifyState(uint64_t value);
    bool GetNetworkedAnimationInputsChanged() const;
    void SetNetworkedAnimationInputsChanged(bool value);
    bool GetNetworkedSequenceChanged() const;
    void SetNetworkedSequenceChanged(bool value);
    bool GetLastUpdateSkipped() const;
    void SetLastUpdateSkipped(bool value);
    float GetPrevAnimUpdateTime() const;
    void SetPrevAnimUpdateTime(float value);
    GCSkeletonAnimationController GetParent() const;
    void SetParent(GCSkeletonAnimationController value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNavVolumeSphere
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNavVolumeSphere(std::string ptr, lua_State* state);
    GCNavVolumeSphere(void *ptr);

    Vector GetCenter() const;
    void SetCenter(Vector value);
    float GetRadius() const;
    void SetRadius(float value);
    GCNavVolume GetParent() const;
    void SetParent(GCNavVolume value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCResponseCriteriaSet
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCResponseCriteriaSet(std::string ptr, lua_State* state);
    GCResponseCriteriaSet(void *ptr);

    int32_t GetNumPrefixedContexts() const;
    void SetNumPrefixedContexts(int32_t value);
    bool GetOverrideOnAppend() const;
    void SetOverrideOnAppend(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAI_Expresser
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAI_Expresser(std::string ptr, lua_State* state);
    GCAI_Expresser(void *ptr);

    float GetStopTalkTime() const;
    void SetStopTalkTime(float value);
    float GetStopTalkTimeWithoutDelay() const;
    void SetStopTalkTimeWithoutDelay(float value);
    float GetBlockedTalkTime() const;
    void SetBlockedTalkTime(float value);
    int32_t GetVoicePitch() const;
    void SetVoicePitch(int32_t value);
    float GetLastTimeAcceptedSpeak() const;
    void SetLastTimeAcceptedSpeak(float value);
    bool GetAllowSpeakingInterrupts() const;
    void SetAllowSpeakingInterrupts(bool value);
    bool GetConsiderSceneInvolvementAsSpeech() const;
    void SetConsiderSceneInvolvementAsSpeech(bool value);
    bool GetSceneEntityDisabled() const;
    void SetSceneEntityDisabled(bool value);
    int32_t GetLastSpokenPriority() const;
    void SetLastSpokenPriority(int32_t value);
    GCBaseFlex GetOuter() const;
    void SetOuter(GCBaseFlex value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GIChoreoServices
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GIChoreoServices(std::string ptr, lua_State* state);
    GIChoreoServices(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCStopwatchBase
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCStopwatchBase(std::string ptr, lua_State* state);
    GCStopwatchBase(void *ptr);

    bool GetIsRunning() const;
    void SetIsRunning(bool value);
    GCSimpleSimTimer GetParent() const;
    void SetParent(GCSimpleSimTimer value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GResponseParams
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GResponseParams(std::string ptr, lua_State* state);
    GResponseParams(void *ptr);

    int16_t GetOdds() const;
    void SetOdds(int16_t value);
    int16_t GetFlags() const;
    void SetFlags(int16_t value);
    GResponseFollowup GetFollowup() const;
    void SetFollowup(GResponseFollowup value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCItem_Healthshot
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCItem_Healthshot(std::string ptr, lua_State* state);
    GCItem_Healthshot(void *ptr);

    GCWeaponBaseItem GetParent() const;
    void SetParent(GCWeaponBaseItem value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPhysHingeAlias_phys_hinge_local
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPhysHingeAlias_phys_hinge_local(std::string ptr, lua_State* state);
    GCPhysHingeAlias_phys_hinge_local(void *ptr);

    GCPhysHinge GetParent() const;
    void SetParent(GCPhysHinge value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GPointCameraSettings_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GPointCameraSettings_t(std::string ptr, lua_State* state);
    GPointCameraSettings_t(void *ptr);

    float GetNearBlurryDistance() const;
    void SetNearBlurryDistance(float value);
    float GetNearCrispDistance() const;
    void SetNearCrispDistance(float value);
    float GetFarCrispDistance() const;
    void SetFarCrispDistance(float value);
    float GetFarBlurryDistance() const;
    void SetFarBlurryDistance(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSoundEnvelope
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSoundEnvelope(std::string ptr, lua_State* state);
    GCSoundEnvelope(void *ptr);

    float GetCurrent() const;
    void SetCurrent(float value);
    float GetTarget() const;
    void SetTarget(float value);
    float GetRate() const;
    void SetRate(float value);
    bool GetForceupdate() const;
    void SetForceupdate(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class Gdynpitchvol_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    Gdynpitchvol_t(std::string ptr, lua_State* state);
    Gdynpitchvol_t(void *ptr);

    Gdynpitchvol_base_t GetParent() const;
    void SetParent(Gdynpitchvol_base_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCStopwatch
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCStopwatch(std::string ptr, lua_State* state);
    GCStopwatch(void *ptr);

    float GetInterval() const;
    void SetInterval(float value);
    GCStopwatchBase GetParent() const;
    void SetParent(GCStopwatchBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNavVolumeVector
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNavVolumeVector(std::string ptr, lua_State* state);
    GCNavVolumeVector(void *ptr);

    bool GetHasBeenPreFiltered() const;
    void SetHasBeenPreFiltered(bool value);
    GCNavVolume GetParent() const;
    void SetParent(GCNavVolume value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GNavGravity_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GNavGravity_t(std::string ptr, lua_State* state);
    GNavGravity_t(void *ptr);

    Vector GetGravity() const;
    void SetGravity(Vector value);
    bool GetDefault() const;
    void SetDefault(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnvShake
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnvShake(std::string ptr, lua_State* state);
    GCEnvShake(void *ptr);

    std::string GetLimitToEntity() const;
    void SetLimitToEntity(std::string value);
    float GetAmplitude() const;
    void SetAmplitude(float value);
    float GetFrequency() const;
    void SetFrequency(float value);
    float GetDuration() const;
    void SetDuration(float value);
    float GetRadius() const;
    void SetRadius(float value);
    float GetStopTime() const;
    void SetStopTime(float value);
    float GetNextShake() const;
    void SetNextShake(float value);
    float GetCurrentAmp() const;
    void SetCurrentAmp(float value);
    Vector GetMaxForce() const;
    void SetMaxForce(Vector value);
    GCPhysicsShake GetShakeCallback() const;
    void SetShakeCallback(GCPhysicsShake value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPhysSlideConstraint
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPhysSlideConstraint(std::string ptr, lua_State* state);
    GCPhysSlideConstraint(void *ptr);

    Vector GetAxisEnd() const;
    void SetAxisEnd(Vector value);
    float GetSlideFriction() const;
    void SetSlideFriction(float value);
    float GetSystemLoadScale() const;
    void SetSystemLoadScale(float value);
    float GetInitialOffset() const;
    void SetInitialOffset(float value);
    bool GetEnableLinearConstraint() const;
    void SetEnableLinearConstraint(bool value);
    bool GetEnableAngularConstraint() const;
    void SetEnableAngularConstraint(bool value);
    float GetMotorFrequency() const;
    void SetMotorFrequency(float value);
    float GetMotorDampingRatio() const;
    void SetMotorDampingRatio(float value);
    bool GetUseEntityPivot() const;
    void SetUseEntityPivot(bool value);
    GConstraintSoundInfo GetSoundInfo() const;
    void SetSoundInfo(GConstraintSoundInfo value);
    GCPhysConstraint GetParent() const;
    void SetParent(GCPhysConstraint value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSound
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSound(std::string ptr, lua_State* state);
    GCSound(void *ptr);

    GCBaseEntity GetOwner() const;
    void SetOwner(GCBaseEntity value);
    GCBaseEntity GetTarget() const;
    void SetTarget(GCBaseEntity value);
    int32_t GetVolume() const;
    void SetVolume(int32_t value);
    float GetOcclusionScale() const;
    void SetOcclusionScale(float value);
    int32_t GetNextAudible() const;
    void SetNextAudible(int32_t value);
    float GetExpireTime() const;
    void SetExpireTime(float value);
    int16_t GetNext() const;
    void SetNext(int16_t value);
    bool GetNoExpirationTime() const;
    void SetNoExpirationTime(bool value);
    int32_t GetOwnerChannelIndex() const;
    void SetOwnerChannelIndex(int32_t value);
    Vector GetOrigin() const;
    void SetOrigin(Vector value);
    bool GetHasOwner() const;
    void SetHasOwner(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTakeDamageResult
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTakeDamageResult(std::string ptr, lua_State* state);
    GCTakeDamageResult(void *ptr);

    GCTakeDamageInfo GetOriginatingInfo() const;
    void SetOriginatingInfo(GCTakeDamageInfo value);
    int32_t GetHealthLost() const;
    void SetHealthLost(int32_t value);
    int32_t GetDamageTaken() const;
    void SetDamageTaken(int32_t value);
    int32_t GetTotalledHealthLost() const;
    void SetTotalledHealthLost(int32_t value);
    int32_t GetTotalledDamageTaken() const;
    void SetTotalledDamageTaken(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMolotovProjectile
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMolotovProjectile(std::string ptr, lua_State* state);
    GCMolotovProjectile(void *ptr);

    bool GetIsIncGrenade() const;
    void SetIsIncGrenade(bool value);
    bool GetDetonated() const;
    void SetDetonated(bool value);
    GIntervalTimer GetStillTimer() const;
    void SetStillTimer(GIntervalTimer value);
    bool GetHasBouncedOffPlayer() const;
    void SetHasBouncedOffPlayer(bool value);
    GCBaseCSGrenadeProjectile GetParent() const;
    void SetParent(GCBaseCSGrenadeProjectile value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCommentarySystem
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCommentarySystem(std::string ptr, lua_State* state);
    GCCommentarySystem(void *ptr);

    bool GetCommentaryConvarsChanging() const;
    void SetCommentaryConvarsChanging(bool value);
    bool GetCommentaryEnabledMidGame() const;
    void SetCommentaryEnabledMidGame(bool value);
    float GetNextTeleportTime() const;
    void SetNextTeleportTime(float value);
    int32_t GetTeleportStage() const;
    void SetTeleportStage(int32_t value);
    bool GetCheatState() const;
    void SetCheatState(bool value);
    bool GetIsFirstSpawnGroupToLoad() const;
    void SetIsFirstSpawnGroupToLoad(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GResponseFollowup
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GResponseFollowup(std::string ptr, lua_State* state);
    GResponseFollowup(void *ptr);

    std::string GetFollowup_concept() const;
    void SetFollowup_concept(std::string value);
    std::string GetFollowup_contexts() const;
    void SetFollowup_contexts(std::string value);
    float GetFollowup_delay() const;
    void SetFollowup_delay(float value);
    std::string GetFollowup_target() const;
    void SetFollowup_target(std::string value);
    std::string GetFollowup_entityiotarget() const;
    void SetFollowup_entityiotarget(std::string value);
    std::string GetFollowup_entityioinput() const;
    void SetFollowup_entityioinput(std::string value);
    float GetFollowup_entityiodelay() const;
    void SetFollowup_entityiodelay(float value);
    bool GetFired() const;
    void SetFired(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCRangeInt
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCRangeInt(std::string ptr, lua_State* state);
    GCRangeInt(void *ptr);

    std::vector<int32_t> GetValue() const;
    void SetValue(std::vector<int32_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNavLinkAnimgraphVar
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNavLinkAnimgraphVar(std::string ptr, lua_State* state);
    GCNavLinkAnimgraphVar(void *ptr);

    uint32_t GetAlignmentDegrees() const;
    void SetAlignmentDegrees(uint32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSGO_TeamSelectCounterTerroristPosition
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSGO_TeamSelectCounterTerroristPosition(std::string ptr, lua_State* state);
    GCCSGO_TeamSelectCounterTerroristPosition(void *ptr);

    GCCSGO_TeamSelectCharacterPosition GetParent() const;
    void SetParent(GCCSGO_TeamSelectCharacterPosition value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNavLinkMovementVData
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNavLinkMovementVData(std::string ptr, lua_State* state);
    GCNavLinkMovementVData(void *ptr);

    bool GetIsInterpolated() const;
    void SetIsInterpolated(bool value);
    uint32_t GetRecommendedDistance() const;
    void SetRecommendedDistance(uint32_t value);
    std::vector<GCNavLinkAnimgraphVar> GetAnimgraphVars() const;
    void SetAnimgraphVars(std::vector<GCNavLinkAnimgraphVar> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimGraphControllerBase
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimGraphControllerBase(std::string ptr, lua_State* state);
    GCAnimGraphControllerBase(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GRagdollCreationParams_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GRagdollCreationParams_t(std::string ptr, lua_State* state);
    GRagdollCreationParams_t(void *ptr);

    Vector GetForce() const;
    void SetForce(Vector value);
    int32_t GetForceBone() const;
    void SetForceBone(int32_t value);
    bool GetForceCurrentWorldTransform() const;
    void SetForceCurrentWorldTransform(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GAmmoTypeInfo_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GAmmoTypeInfo_t(std::string ptr, lua_State* state);
    GAmmoTypeInfo_t(void *ptr);

    int32_t GetMaxCarry() const;
    void SetMaxCarry(int32_t value);
    GCRangeInt GetSplashSize() const;
    void SetSplashSize(GCRangeInt value);
    uint64_t GetFlags() const;
    void SetFlags(uint64_t value);
    float GetMass() const;
    void SetMass(float value);
    GCRangeFloat GetSpeed() const;
    void SetSpeed(GCRangeFloat value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCRandStopwatch
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCRandStopwatch(std::string ptr, lua_State* state);
    GCRandStopwatch(void *ptr);

    float GetMinInterval() const;
    void SetMinInterval(float value);
    float GetMaxInterval() const;
    void SetMaxInterval(float value);
    GCStopwatchBase GetParent() const;
    void SetParent(GCStopwatchBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCGameChoreoServices
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCGameChoreoServices(std::string ptr, lua_State* state);
    GCGameChoreoServices(void *ptr);

    GCBaseAnimGraph GetOwner() const;
    void SetOwner(GCBaseAnimGraph value);
    GCScriptedSequence GetScriptedSequence() const;
    void SetScriptedSequence(GCScriptedSequence value);
    GIChoreoServices GetScriptState() const;
    void SetScriptState(GIChoreoServices value);
    GIChoreoServices GetChoreoState() const;
    void SetChoreoState(GIChoreoServices value);
    float GetTimeStartedState() const;
    void SetTimeStartedState(float value);
    GIChoreoServices GetParent() const;
    void SetParent(GIChoreoServices value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSimpleStopwatch
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSimpleStopwatch(std::string ptr, lua_State* state);
    GCSimpleStopwatch(void *ptr);

    GCStopwatchBase GetParent() const;
    void SetParent(GCStopwatchBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCShatterGlassShard
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCShatterGlassShard(std::string ptr, lua_State* state);
    GCShatterGlassShard(void *ptr);

    uint32_t GetShardHandle() const;
    void SetShardHandle(uint32_t value);
    std::vector<Vector2D> GetPanelVertices() const;
    void SetPanelVertices(std::vector<Vector2D> value);
    Vector2D GetLocalPanelSpaceOrigin() const;
    void SetLocalPanelSpaceOrigin(Vector2D value);
    GCShatterGlassShardPhysics GetPhysicsEntity() const;
    void SetPhysicsEntity(GCShatterGlassShardPhysics value);
    GCFuncShatterglass GetParentPanel() const;
    void SetParentPanel(GCFuncShatterglass value);
    uint32_t GetParentShard() const;
    void SetParentShard(uint32_t value);
    uint64_t GetShatterStressType() const;
    void SetShatterStressType(uint64_t value);
    Vector GetStressVelocity() const;
    void SetStressVelocity(Vector value);
    bool GetCreatedModel() const;
    void SetCreatedModel(bool value);
    float GetLongestEdge() const;
    void SetLongestEdge(float value);
    float GetShortestEdge() const;
    void SetShortestEdge(float value);
    float GetLongestAcross() const;
    void SetLongestAcross(float value);
    float GetShortestAcross() const;
    void SetShortestAcross(float value);
    float GetSumOfAllEdges() const;
    void SetSumOfAllEdges(float value);
    float GetArea() const;
    void SetArea(float value);
    uint64_t GetOnFrameEdge() const;
    void SetOnFrameEdge(uint64_t value);
    int32_t GetParentPanelsNthShard() const;
    void SetParentPanelsNthShard(int32_t value);
    int32_t GetSubShardGeneration() const;
    void SetSubShardGeneration(int32_t value);
    Vector2D GetAverageVertPosition() const;
    void SetAverageVertPosition(Vector2D value);
    bool GetAverageVertPositionIsValid() const;
    void SetAverageVertPositionIsValid(bool value);
    Vector2D GetPanelSpaceStressPositionA() const;
    void SetPanelSpaceStressPositionA(Vector2D value);
    Vector2D GetPanelSpaceStressPositionB() const;
    void SetPanelSpaceStressPositionB(Vector2D value);
    bool GetStressPositionAIsValid() const;
    void SetStressPositionAIsValid(bool value);
    bool GetStressPositionBIsValid() const;
    void SetStressPositionBIsValid(bool value);
    bool GetFlaggedForRemoval() const;
    void SetFlaggedForRemoval(bool value);
    float GetPhysicsEntitySpawnedAtTime() const;
    void SetPhysicsEntitySpawnedAtTime(float value);
    bool GetShatterRateLimited() const;
    void SetShatterRateLimited(bool value);
    GCBaseEntity GetEntityHittingMe() const;
    void SetEntityHittingMe(GCBaseEntity value);
    std::vector<uint32> GetNeighbors() const;
    void SetNeighbors(std::vector<uint32> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCommandToolCommand_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCommandToolCommand_t(std::string ptr, lua_State* state);
    GCommandToolCommand_t(void *ptr);

    bool GetEnabled() const;
    void SetEnabled(bool value);
    bool GetOpened() const;
    void SetOpened(bool value);
    uint32_t GetInternalId() const;
    void SetInternalId(uint32_t value);
    std::string GetShortName() const;
    void SetShortName(std::string value);
    uint64_t GetExecMode() const;
    void SetExecMode(uint64_t value);
    std::string GetSpawnGroup() const;
    void SetSpawnGroup(std::string value);
    float GetPeriodicExecDelay() const;
    void SetPeriodicExecDelay(float value);
    uint64_t GetSpecType() const;
    void SetSpecType(uint64_t value);
    std::string GetEntitySpec() const;
    void SetEntitySpec(std::string value);
    std::string GetCommands() const;
    void SetCommands(std::string value);
    uint64_t GetSetDebugBits() const;
    void SetSetDebugBits(uint64_t value);
    uint64_t GetClearDebugBits() const;
    void SetClearDebugBits(uint64_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class Gragdollelement_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    Gragdollelement_t(std::string ptr, lua_State* state);
    Gragdollelement_t(void *ptr);

    Vector GetOriginParentSpace() const;
    void SetOriginParentSpace(Vector value);
    int32_t GetParentIndex() const;
    void SetParentIndex(int32_t value);
    float GetRadius() const;
    void SetRadius(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBodyComponentBaseModelEntity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBodyComponentBaseModelEntity(std::string ptr, lua_State* state);
    GCBodyComponentBaseModelEntity(void *ptr);

    GCBodyComponentSkeletonInstance GetParent() const;
    void SetParent(GCBodyComponentSkeletonInstance value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNetworkOriginQuantizedVector
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNetworkOriginQuantizedVector(std::string ptr, lua_State* state);
    GCNetworkOriginQuantizedVector(void *ptr);

    float GetX() const;
    void SetX(float value);
    float GetY() const;
    void SetY(float value);
    float GetZ() const;
    void SetZ(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class Gmagnetted_objects_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    Gmagnetted_objects_t(std::string ptr, lua_State* state);
    Gmagnetted_objects_t(void *ptr);

    GCBaseEntity GetEntity() const;
    void SetEntity(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCHintMessageQueue
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCHintMessageQueue(std::string ptr, lua_State* state);
    GCHintMessageQueue(void *ptr);

    float GetTmMessageEnd() const;
    void SetTmMessageEnd(float value);
    GCBasePlayerController GetPlayerController() const;
    void SetPlayerController(GCBasePlayerController value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSkillInt
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSkillInt(std::string ptr, lua_State* state);
    GCSkillInt(void *ptr);

    std::vector<int32_t> GetValue() const;
    void SetValue(std::vector<int32_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class Gthinkfunc_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    Gthinkfunc_t(std::string ptr, lua_State* state);
    Gthinkfunc_t(void *ptr);

    uint32_t GetContext() const;
    void SetContext(uint32_t value);
    int32 GetNextThinkTick() const;
    void SetNextThinkTick(int32 value);
    int32 GetLastThinkTick() const;
    void SetLastThinkTick(int32 value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNavHullPresetVData
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNavHullPresetVData(std::string ptr, lua_State* state);
    GCNavHullPresetVData(void *ptr);

    std::vector<CUtlString> GetNavHulls() const;
    void SetNavHulls(std::vector<CUtlString> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBasePlayerVData
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBasePlayerVData(std::string ptr, lua_State* state);
    GCBasePlayerVData(void *ptr);

    GCSkillFloat GetHeadDamageMultiplier() const;
    void SetHeadDamageMultiplier(GCSkillFloat value);
    GCSkillFloat GetChestDamageMultiplier() const;
    void SetChestDamageMultiplier(GCSkillFloat value);
    GCSkillFloat GetStomachDamageMultiplier() const;
    void SetStomachDamageMultiplier(GCSkillFloat value);
    GCSkillFloat GetArmDamageMultiplier() const;
    void SetArmDamageMultiplier(GCSkillFloat value);
    GCSkillFloat GetLegDamageMultiplier() const;
    void SetLegDamageMultiplier(GCSkillFloat value);
    float GetHoldBreathTime() const;
    void SetHoldBreathTime(float value);
    float GetDrowningDamageInterval() const;
    void SetDrowningDamageInterval(float value);
    int32_t GetDrowningDamageInitial() const;
    void SetDrowningDamageInitial(int32_t value);
    int32_t GetDrowningDamageMax() const;
    void SetDrowningDamageMax(int32_t value);
    int32_t GetWaterSpeed() const;
    void SetWaterSpeed(int32_t value);
    float GetUseRange() const;
    void SetUseRange(float value);
    float GetUseAngleTolerance() const;
    void SetUseAngleTolerance(float value);
    float GetCrouchTime() const;
    void SetCrouchTime(float value);
    GCEntitySubclassVDataBase GetParent() const;
    void SetParent(GCEntitySubclassVDataBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSceneEventInfo
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSceneEventInfo(std::string ptr, lua_State* state);
    GCSceneEventInfo(void *ptr);

    int32_t GetLayer() const;
    void SetLayer(int32_t value);
    int32_t GetPriority() const;
    void SetPriority(int32_t value);
    float GetWeight() const;
    void SetWeight(float value);
    bool GetHasArrived() const;
    void SetHasArrived(bool value);
    int32_t GetType() const;
    void SetType(int32_t value);
    float GetNext() const;
    void SetNext(float value);
    bool GetIsGesture() const;
    void SetIsGesture(bool value);
    bool GetShouldRemove() const;
    void SetShouldRemove(bool value);
    GCBaseEntity GetTarget() const;
    void SetTarget(GCBaseEntity value);
    GSceneEventId_t GetSceneEventId() const;
    void SetSceneEventId(GSceneEventId_t value);
    bool GetClientSide() const;
    void SetClientSide(bool value);
    bool GetStarted() const;
    void SetStarted(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCopyRecipientFilter
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCopyRecipientFilter(std::string ptr, lua_State* state);
    GCCopyRecipientFilter(void *ptr);

    int32_t GetFlags() const;
    void SetFlags(int32_t value);
    std::vector<int32_t> GetRecipients() const;
    void SetRecipients(std::vector<int32_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPropDoorRotatingBreakable
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPropDoorRotatingBreakable(std::string ptr, lua_State* state);
    GCPropDoorRotatingBreakable(void *ptr);

    bool GetBreakable() const;
    void SetBreakable(bool value);
    bool GetIsAbleToCloseAreaPortals() const;
    void SetIsAbleToCloseAreaPortals(bool value);
    int32_t GetCurrentDamageState() const;
    void SetCurrentDamageState(int32_t value);
    std::vector<CUtlSymbolLarge> GetDamageStates() const;
    void SetDamageStates(std::vector<CUtlSymbolLarge> value);
    GCPropDoorRotating GetParent() const;
    void SetParent(GCPropDoorRotating value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBtActionAim
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBtActionAim(std::string ptr, lua_State* state);
    GCBtActionAim(void *ptr);

    std::string GetSensorInputKey() const;
    void SetSensorInputKey(std::string value);
    std::string GetAimReadyKey() const;
    void SetAimReadyKey(std::string value);
    float GetZoomCooldownTimestamp() const;
    void SetZoomCooldownTimestamp(float value);
    bool GetDoneAiming() const;
    void SetDoneAiming(bool value);
    float GetLerpStartTime() const;
    void SetLerpStartTime(float value);
    float GetNextLookTargetLerpTime() const;
    void SetNextLookTargetLerpTime(float value);
    float GetPenaltyReductionRatio() const;
    void SetPenaltyReductionRatio(float value);
    QAngle GetNextLookTarget() const;
    void SetNextLookTarget(QAngle value);
    GCountdownTimer GetAimTimer() const;
    void SetAimTimer(GCountdownTimer value);
    GCountdownTimer GetSniperHoldTimer() const;
    void SetSniperHoldTimer(GCountdownTimer value);
    GCountdownTimer GetFocusIntervalTimer() const;
    void SetFocusIntervalTimer(GCountdownTimer value);
    bool GetAcquired() const;
    void SetAcquired(bool value);
    GCBtNode GetParent() const;
    void SetParent(GCBtNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFiringModeInt
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFiringModeInt(std::string ptr, lua_State* state);
    GCFiringModeInt(void *ptr);

    std::vector<int32_t> GetValues() const;
    void SetValues(std::vector<int32_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSoundPatch
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSoundPatch(std::string ptr, lua_State* state);
    GCSoundPatch(void *ptr);

    GCSoundEnvelope GetPitch() const;
    void SetPitch(GCSoundEnvelope value);
    GCSoundEnvelope GetVolume() const;
    void SetVolume(GCSoundEnvelope value);
    float GetShutdownTime() const;
    void SetShutdownTime(float value);
    float GetLastTime() const;
    void SetLastTime(float value);
    std::string GetSoundScriptName() const;
    void SetSoundScriptName(std::string value);
    GCBaseEntity GetEnt() const;
    void SetEnt(GCBaseEntity value);
    int GetSoundEntityIndex() const;
    void SetSoundEntityIndex(int value);
    Vector GetSoundOrigin() const;
    void SetSoundOrigin(Vector value);
    int32_t GetIsPlaying() const;
    void SetIsPlaying(int32_t value);
    GCCopyRecipientFilter GetFilter() const;
    void SetFilter(GCCopyRecipientFilter value);
    float GetCloseCaptionDuration() const;
    void SetCloseCaptionDuration(float value);
    bool GetUpdatedSoundOrigin() const;
    void SetUpdatedSoundOrigin(bool value);
    std::string GetClassName() const;
    void SetClassName(std::string value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSmoothFunc
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSmoothFunc(std::string ptr, lua_State* state);
    GCSmoothFunc(void *ptr);

    float GetSmoothAmplitude() const;
    void SetSmoothAmplitude(float value);
    float GetSmoothBias() const;
    void SetSmoothBias(float value);
    float GetSmoothDuration() const;
    void SetSmoothDuration(float value);
    float GetSmoothRemainingTime() const;
    void SetSmoothRemainingTime(float value);
    int32_t GetSmoothDir() const;
    void SetSmoothDir(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GIHasAttributes
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GIHasAttributes(std::string ptr, lua_State* state);
    GIHasAttributes(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCRagdollPropAttached
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCRagdollPropAttached(std::string ptr, lua_State* state);
    GCRagdollPropAttached(void *ptr);

    uint32_t GetBoneIndexAttached() const;
    void SetBoneIndexAttached(uint32_t value);
    uint32_t GetRagdollAttachedObjectIndex() const;
    void SetRagdollAttachedObjectIndex(uint32_t value);
    Vector GetAttachmentPointBoneSpace() const;
    void SetAttachmentPointBoneSpace(Vector value);
    Vector GetAttachmentPointRagdollSpace() const;
    void SetAttachmentPointRagdollSpace(Vector value);
    bool GetShouldDetach() const;
    void SetShouldDetach(bool value);
    bool GetShouldDeleteAttachedActivationRecord() const;
    void SetShouldDeleteAttachedActivationRecord(bool value);
    GCRagdollProp GetParent() const;
    void SetParent(GCRagdollProp value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GHullFlags_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GHullFlags_t(std::string ptr, lua_State* state);
    GHullFlags_t(void *ptr);

    bool GetHull_Human() const;
    void SetHull_Human(bool value);
    bool GetHull_SmallCentered() const;
    void SetHull_SmallCentered(bool value);
    bool GetHull_WideHuman() const;
    void SetHull_WideHuman(bool value);
    bool GetHull_Tiny() const;
    void SetHull_Tiny(bool value);
    bool GetHull_Medium() const;
    void SetHull_Medium(bool value);
    bool GetHull_TinyCentered() const;
    void SetHull_TinyCentered(bool value);
    bool GetHull_Large() const;
    void SetHull_Large(bool value);
    bool GetHull_LargeCentered() const;
    void SetHull_LargeCentered(bool value);
    bool GetHull_MediumTall() const;
    void SetHull_MediumTall(bool value);
    bool GetHull_Small() const;
    void SetHull_Small(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBodyComponentBaseAnimGraph
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBodyComponentBaseAnimGraph(std::string ptr, lua_State* state);
    GCBodyComponentBaseAnimGraph(void *ptr);

    GCBaseAnimGraphController GetAnimationController() const;
    void SetAnimationController(GCBaseAnimGraphController value);
    GCBodyComponentSkeletonInstance GetParent() const;
    void SetParent(GCBodyComponentSkeletonInstance value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GGameAmmoTypeInfo_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GGameAmmoTypeInfo_t(std::string ptr, lua_State* state);
    GGameAmmoTypeInfo_t(void *ptr);

    int32_t GetBuySize() const;
    void SetBuySize(int32_t value);
    int32_t GetCost() const;
    void SetCost(int32_t value);
    GAmmoTypeInfo_t GetParent() const;
    void SetParent(GAmmoTypeInfo_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPhysMotor
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPhysMotor(std::string ptr, lua_State* state);
    GCPhysMotor(void *ptr);

    std::string GetNameAttach() const;
    void SetNameAttach(std::string value);
    GCBaseEntity GetAttachedObject() const;
    void SetAttachedObject(GCBaseEntity value);
    float GetSpinUp() const;
    void SetSpinUp(float value);
    float GetAdditionalAcceleration() const;
    void SetAdditionalAcceleration(float value);
    float GetAngularAcceleration() const;
    void SetAngularAcceleration(float value);
    float GetLastTime() const;
    void SetLastTime(float value);
    GCMotorController GetMotor() const;
    void SetMotor(GCMotorController value);
    GCLogicalEntity GetParent() const;
    void SetParent(GCLogicalEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSimTimer
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSimTimer(std::string ptr, lua_State* state);
    GCSimTimer(void *ptr);

    float GetInterval() const;
    void SetInterval(float value);
    GCSimpleSimTimer GetParent() const;
    void SetParent(GCSimpleSimTimer value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBaseIssue
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBaseIssue(std::string ptr, lua_State* state);
    GCBaseIssue(void *ptr);

    std::string GetTypeString() const;
    void SetTypeString(std::string value);
    std::string GetDetailsString() const;
    void SetDetailsString(std::string value);
    int32_t GetNumYesVotes() const;
    void SetNumYesVotes(int32_t value);
    int32_t GetNumNoVotes() const;
    void SetNumNoVotes(int32_t value);
    int32_t GetNumPotentialVotes() const;
    void SetNumPotentialVotes(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTakeDamageInfo
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTakeDamageInfo(std::string ptr, lua_State* state);
    GCTakeDamageInfo(void *ptr);

    Vector GetDamageForce() const;
    void SetDamageForce(Vector value);
    Vector GetDamagePosition() const;
    void SetDamagePosition(Vector value);
    Vector GetReportedPosition() const;
    void SetReportedPosition(Vector value);
    Vector GetDamageDirection() const;
    void SetDamageDirection(Vector value);
    GCBaseEntity GetInflictor() const;
    void SetInflictor(GCBaseEntity value);
    GCBaseEntity GetAttacker() const;
    void SetAttacker(GCBaseEntity value);
    GCBaseEntity GetAbility() const;
    void SetAbility(GCBaseEntity value);
    float GetDamage() const;
    void SetDamage(float value);
    float GetTotalledDamage() const;
    void SetTotalledDamage(float value);
    int32_t GetBitsDamageType() const;
    void SetBitsDamageType(int32_t value);
    int32_t GetDamageCustom() const;
    void SetDamageCustom(int32_t value);
    uint32_t GetAmmoType() const;
    void SetAmmoType(uint32_t value);
    float GetOriginalDamage() const;
    void SetOriginalDamage(float value);
    bool GetShouldBleed() const;
    void SetShouldBleed(bool value);
    bool GetShouldSpark() const;
    void SetShouldSpark(bool value);
    uint64_t GetDamageFlags() const;
    void SetDamageFlags(uint64_t value);
    int32_t GetNumObjectsPenetrated() const;
    void SetNumObjectsPenetrated(int32_t value);
    bool GetInTakeDamageFlow() const;
    void SetInTakeDamageFlow(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GConceptHistory_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GConceptHistory_t(std::string ptr, lua_State* state);
    GConceptHistory_t(void *ptr);

    float GetTimeSpoken() const;
    void SetTimeSpoken(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPhysTorque
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPhysTorque(std::string ptr, lua_State* state);
    GCPhysTorque(void *ptr);

    Vector GetAxis() const;
    void SetAxis(Vector value);
    GCPhysForce GetParent() const;
    void SetParent(GCPhysForce value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GSummaryTakeDamageInfo_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GSummaryTakeDamageInfo_t(std::string ptr, lua_State* state);
    GSummaryTakeDamageInfo_t(void *ptr);

    int32_t GetSummarisedCount() const;
    void SetSummarisedCount(int32_t value);
    GCTakeDamageInfo GetInfo() const;
    void SetInfo(GCTakeDamageInfo value);
    GCTakeDamageResult GetResult() const;
    void SetResult(GCTakeDamageResult value);
    GCBaseEntity GetTarget() const;
    void SetTarget(GCBaseEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCRandSimTimer
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCRandSimTimer(std::string ptr, lua_State* state);
    GCRandSimTimer(void *ptr);

    float GetMinInterval() const;
    void SetMinInterval(float value);
    float GetMaxInterval() const;
    void SetMaxInterval(float value);
    GCSimpleSimTimer GetParent() const;
    void SetParent(GCSimpleSimTimer value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBtNodeComposite
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBtNodeComposite(std::string ptr, lua_State* state);
    GCBtNodeComposite(void *ptr);

    GCBtNode GetParent() const;
    void SetParent(GCBtNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFireCrackerBlast
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFireCrackerBlast(std::string ptr, lua_State* state);
    GCFireCrackerBlast(void *ptr);

    GCInferno GetParent() const;
    void SetParent(GCInferno value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class Gsndopvarlatchdata_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    Gsndopvarlatchdata_t(std::string ptr, lua_State* state);
    Gsndopvarlatchdata_t(void *ptr);

    std::string GetStack() const;
    void SetStack(std::string value);
    std::string GetOperator() const;
    void SetOperator(std::string value);
    std::string GetOpvar() const;
    void SetOpvar(std::string value);
    float GetVal() const;
    void SetVal(float value);
    Vector GetPos() const;
    void SetPos(Vector value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSGO_TeamSelectTerroristPosition
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSGO_TeamSelectTerroristPosition(std::string ptr, lua_State* state);
    GCCSGO_TeamSelectTerroristPosition(void *ptr);

    GCCSGO_TeamSelectCharacterPosition GetParent() const;
    void SetParent(GCCSGO_TeamSelectCharacterPosition value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAI_ExpresserWithFollowup
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAI_ExpresserWithFollowup(std::string ptr, lua_State* state);
    GCAI_ExpresserWithFollowup(void *ptr);

    GResponseFollowup GetPostponedFollowup() const;
    void SetPostponedFollowup(GResponseFollowup value);
    GCAI_Expresser GetParent() const;
    void SetParent(GCAI_Expresser value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNavVolumeMarkupVolume
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNavVolumeMarkupVolume(std::string ptr, lua_State* state);
    GCNavVolumeMarkupVolume(void *ptr);

    GCNavVolume GetParent() const;
    void SetParent(GCNavVolume value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GQuestProgress
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GQuestProgress(std::string ptr, lua_State* state);
    GQuestProgress(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class Glerpdata_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    Glerpdata_t(std::string ptr, lua_State* state);
    Glerpdata_t(void *ptr);

    GCBaseEntity GetEnt() const;
    void SetEnt(GCBaseEntity value);
    uint64_t GetMoveType() const;
    void SetMoveType(uint64_t value);
    float GetStartTime() const;
    void SetStartTime(float value);
    Vector GetStartOrigin() const;
    void SetStartOrigin(Vector value);
    GParticleIndex_t GetFXIndex() const;
    void SetFXIndex(GParticleIndex_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMultiplayer_Expresser
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMultiplayer_Expresser(std::string ptr, lua_State* state);
    GCMultiplayer_Expresser(void *ptr);

    bool GetAllowMultipleScenes() const;
    void SetAllowMultipleScenes(bool value);
    GCAI_ExpresserWithFollowup GetParent() const;
    void SetParent(GCAI_ExpresserWithFollowup value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTakeDamageSummaryScopeGuard
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTakeDamageSummaryScopeGuard(std::string ptr, lua_State* state);
    GCTakeDamageSummaryScopeGuard(void *ptr);

    std::vector<GSummaryTakeDamageInfo_t*> GetSummaries() const;
    void SetSummaries(std::vector<GSummaryTakeDamageInfo_t*> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWeaponSawedoff
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWeaponSawedoff(std::string ptr, lua_State* state);
    GCWeaponSawedoff(void *ptr);

    GCCSWeaponBase GetParent() const;
    void SetParent(GCCSWeaponBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSPlayer_MovementServices
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSPlayer_MovementServices(std::string ptr, lua_State* state);
    GCCSPlayer_MovementServices(void *ptr);

    float GetMaxFallVelocity() const;
    void SetMaxFallVelocity(float value);
    Vector GetLadderNormal() const;
    void SetLadderNormal(Vector value);
    int32_t GetLadderSurfacePropIndex() const;
    void SetLadderSurfacePropIndex(int32_t value);
    float GetDuckAmount() const;
    void SetDuckAmount(float value);
    float GetDuckSpeed() const;
    void SetDuckSpeed(float value);
    bool GetDuckOverride() const;
    void SetDuckOverride(bool value);
    bool GetDesiresDuck() const;
    void SetDesiresDuck(bool value);
    float GetDuckOffset() const;
    void SetDuckOffset(float value);
    uint32_t GetDuckTimeMsecs() const;
    void SetDuckTimeMsecs(uint32_t value);
    uint32_t GetDuckJumpTimeMsecs() const;
    void SetDuckJumpTimeMsecs(uint32_t value);
    uint32_t GetJumpTimeMsecs() const;
    void SetJumpTimeMsecs(uint32_t value);
    float GetLastDuckTime() const;
    void SetLastDuckTime(float value);
    Vector2D GetLastPositionAtFullCrouchSpeed() const;
    void SetLastPositionAtFullCrouchSpeed(Vector2D value);
    bool GetDuckUntilOnGround() const;
    void SetDuckUntilOnGround(bool value);
    bool GetHasWalkMovedSinceLastJump() const;
    void SetHasWalkMovedSinceLastJump(bool value);
    bool GetInStuckTest() const;
    void SetInStuckTest(bool value);
    int32_t GetTraceCount() const;
    void SetTraceCount(int32_t value);
    int32_t GetStuckLast() const;
    void SetStuckLast(int32_t value);
    bool GetSpeedCropped() const;
    void SetSpeedCropped(bool value);
    int32_t GetOldWaterLevel() const;
    void SetOldWaterLevel(int32_t value);
    float GetWaterEntryTime() const;
    void SetWaterEntryTime(float value);
    Vector GetForward() const;
    void SetForward(Vector value);
    Vector GetLeft() const;
    void SetLeft(Vector value);
    Vector GetUp() const;
    void SetUp(Vector value);
    int32_t GetGameCodeHasMovedPlayerAfterCommand() const;
    void SetGameCodeHasMovedPlayerAfterCommand(int32_t value);
    bool GetMadeFootstepNoise() const;
    void SetMadeFootstepNoise(bool value);
    int32_t GetFootsteps() const;
    void SetFootsteps(int32_t value);
    bool GetOldJumpPressed() const;
    void SetOldJumpPressed(bool value);
    float GetJumpPressedTime() const;
    void SetJumpPressedTime(float value);
    float GetJumpUntil() const;
    void SetJumpUntil(float value);
    float GetJumpVel() const;
    void SetJumpVel(float value);
    float GetStashGrenadeParameterWhen() const;
    void SetStashGrenadeParameterWhen(float value);
    uint64_t GetButtonDownMaskPrev() const;
    void SetButtonDownMaskPrev(uint64_t value);
    float GetOffsetTickCompleteTime() const;
    void SetOffsetTickCompleteTime(float value);
    float GetOffsetTickStashedSpeed() const;
    void SetOffsetTickStashedSpeed(float value);
    float GetStamina() const;
    void SetStamina(float value);
    float GetHeightAtJumpStart() const;
    void SetHeightAtJumpStart(float value);
    float GetMaxJumpHeightThisJump() const;
    void SetMaxJumpHeightThisJump(float value);
    GCPlayer_MovementServices_Humanoid GetParent() const;
    void SetParent(GCPlayer_MovementServices_Humanoid value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNavHullVData
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNavHullVData(std::string ptr, lua_State* state);
    GCNavHullVData(void *ptr);

    bool GetAgentEnabled() const;
    void SetAgentEnabled(bool value);
    float GetAgentRadius() const;
    void SetAgentRadius(float value);
    float GetAgentHeight() const;
    void SetAgentHeight(float value);
    bool GetAgentShortHeightEnabled() const;
    void SetAgentShortHeightEnabled(bool value);
    float GetAgentShortHeight() const;
    void SetAgentShortHeight(float value);
    float GetAgentMaxClimb() const;
    void SetAgentMaxClimb(float value);
    int32_t GetAgentMaxSlope() const;
    void SetAgentMaxSlope(int32_t value);
    float GetAgentMaxJumpDownDist() const;
    void SetAgentMaxJumpDownDist(float value);
    float GetAgentMaxJumpHorizDistBase() const;
    void SetAgentMaxJumpHorizDistBase(float value);
    float GetAgentMaxJumpUpDist() const;
    void SetAgentMaxJumpUpDist(float value);
    int32_t GetAgentBorderErosion() const;
    void SetAgentBorderErosion(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GSoundOpvarTraceResult_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GSoundOpvarTraceResult_t(std::string ptr, lua_State* state);
    GSoundOpvarTraceResult_t(void *ptr);

    Vector GetPos() const;
    void SetPos(Vector value);
    bool GetDidHit() const;
    void SetDidHit(bool value);
    float GetDistSqrToCenter() const;
    void SetDistSqrToCenter(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimEventListener
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimEventListener(std::string ptr, lua_State* state);
    GCAnimEventListener(void *ptr);

    GCAnimEventListenerBase GetParent() const;
    void SetParent(GCAnimEventListenerBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNavVolumeCalculatedVector
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNavVolumeCalculatedVector(std::string ptr, lua_State* state);
    GCNavVolumeCalculatedVector(void *ptr);

    GCNavVolume GetParent() const;
    void SetParent(GCNavVolume value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCSWeaponBaseVData
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCSWeaponBaseVData(std::string ptr, lua_State* state);
    GCCSWeaponBaseVData(void *ptr);

    uint64_t GetWeaponType() const;
    void SetWeaponType(uint64_t value);
    uint64_t GetWeaponCategory() const;
    void SetWeaponCategory(uint64_t value);
    uint64_t GetGearSlot() const;
    void SetGearSlot(uint64_t value);
    int32_t GetGearSlotPosition() const;
    void SetGearSlotPosition(int32_t value);
    uint64_t GetDefaultLoadoutSlot() const;
    void SetDefaultLoadoutSlot(uint64_t value);
    std::string GetWrongTeamMsg() const;
    void SetWrongTeamMsg(std::string value);
    int32_t GetPrice() const;
    void SetPrice(int32_t value);
    int32_t GetKillAward() const;
    void SetKillAward(int32_t value);
    int32_t GetPrimaryReserveAmmoMax() const;
    void SetPrimaryReserveAmmoMax(int32_t value);
    int32_t GetSecondaryReserveAmmoMax() const;
    void SetSecondaryReserveAmmoMax(int32_t value);
    bool GetMeleeWeapon() const;
    void SetMeleeWeapon(bool value);
    bool GetHasBurstMode() const;
    void SetHasBurstMode(bool value);
    bool GetIsRevolver() const;
    void SetIsRevolver(bool value);
    bool GetCannotShootUnderwater() const;
    void SetCannotShootUnderwater(bool value);
    std::string GetAnimExtension() const;
    void SetAnimExtension(std::string value);
    uint64_t GetSilencerType() const;
    void SetSilencerType(uint64_t value);
    int32_t GetCrosshairMinDistance() const;
    void SetCrosshairMinDistance(int32_t value);
    int32_t GetCrosshairDeltaDistance() const;
    void SetCrosshairDeltaDistance(int32_t value);
    bool GetIsFullAuto() const;
    void SetIsFullAuto(bool value);
    int32_t GetNumBullets() const;
    void SetNumBullets(int32_t value);
    GCFiringModeFloat GetCycleTime() const;
    void SetCycleTime(GCFiringModeFloat value);
    GCFiringModeFloat GetMaxSpeed() const;
    void SetMaxSpeed(GCFiringModeFloat value);
    GCFiringModeFloat GetSpread() const;
    void SetSpread(GCFiringModeFloat value);
    GCFiringModeFloat GetInaccuracyCrouch() const;
    void SetInaccuracyCrouch(GCFiringModeFloat value);
    GCFiringModeFloat GetInaccuracyStand() const;
    void SetInaccuracyStand(GCFiringModeFloat value);
    GCFiringModeFloat GetInaccuracyJump() const;
    void SetInaccuracyJump(GCFiringModeFloat value);
    GCFiringModeFloat GetInaccuracyLand() const;
    void SetInaccuracyLand(GCFiringModeFloat value);
    GCFiringModeFloat GetInaccuracyLadder() const;
    void SetInaccuracyLadder(GCFiringModeFloat value);
    GCFiringModeFloat GetInaccuracyFire() const;
    void SetInaccuracyFire(GCFiringModeFloat value);
    GCFiringModeFloat GetInaccuracyMove() const;
    void SetInaccuracyMove(GCFiringModeFloat value);
    GCFiringModeFloat GetRecoilAngle() const;
    void SetRecoilAngle(GCFiringModeFloat value);
    GCFiringModeFloat GetRecoilAngleVariance() const;
    void SetRecoilAngleVariance(GCFiringModeFloat value);
    GCFiringModeFloat GetRecoilMagnitude() const;
    void SetRecoilMagnitude(GCFiringModeFloat value);
    GCFiringModeFloat GetRecoilMagnitudeVariance() const;
    void SetRecoilMagnitudeVariance(GCFiringModeFloat value);
    GCFiringModeInt GetTracerFrequency() const;
    void SetTracerFrequency(GCFiringModeInt value);
    float GetInaccuracyJumpInitial() const;
    void SetInaccuracyJumpInitial(float value);
    float GetInaccuracyJumpApex() const;
    void SetInaccuracyJumpApex(float value);
    float GetInaccuracyReload() const;
    void SetInaccuracyReload(float value);
    int32_t GetRecoilSeed() const;
    void SetRecoilSeed(int32_t value);
    int32_t GetSpreadSeed() const;
    void SetSpreadSeed(int32_t value);
    float GetTimeToIdleAfterFire() const;
    void SetTimeToIdleAfterFire(float value);
    float GetIdleInterval() const;
    void SetIdleInterval(float value);
    float GetAttackMovespeedFactor() const;
    void SetAttackMovespeedFactor(float value);
    float GetHeatPerShot() const;
    void SetHeatPerShot(float value);
    float GetInaccuracyPitchShift() const;
    void SetInaccuracyPitchShift(float value);
    float GetInaccuracyAltSoundThreshold() const;
    void SetInaccuracyAltSoundThreshold(float value);
    float GetBotAudibleRange() const;
    void SetBotAudibleRange(float value);
    std::string GetUseRadioSubtitle() const;
    void SetUseRadioSubtitle(std::string value);
    bool GetUnzoomsAfterShot() const;
    void SetUnzoomsAfterShot(bool value);
    bool GetHideViewModelWhenZoomed() const;
    void SetHideViewModelWhenZoomed(bool value);
    int32_t GetZoomLevels() const;
    void SetZoomLevels(int32_t value);
    int32_t GetZoomFOV1() const;
    void SetZoomFOV1(int32_t value);
    int32_t GetZoomFOV2() const;
    void SetZoomFOV2(int32_t value);
    float GetZoomTime0() const;
    void SetZoomTime0(float value);
    float GetZoomTime1() const;
    void SetZoomTime1(float value);
    float GetZoomTime2() const;
    void SetZoomTime2(float value);
    float GetIronSightPullUpSpeed() const;
    void SetIronSightPullUpSpeed(float value);
    float GetIronSightPutDownSpeed() const;
    void SetIronSightPutDownSpeed(float value);
    float GetIronSightFOV() const;
    void SetIronSightFOV(float value);
    float GetIronSightPivotForward() const;
    void SetIronSightPivotForward(float value);
    float GetIronSightLooseness() const;
    void SetIronSightLooseness(float value);
    QAngle GetPivotAngle() const;
    void SetPivotAngle(QAngle value);
    Vector GetIronSightEyePos() const;
    void SetIronSightEyePos(Vector value);
    int32_t GetDamage() const;
    void SetDamage(int32_t value);
    float GetHeadshotMultiplier() const;
    void SetHeadshotMultiplier(float value);
    float GetArmorRatio() const;
    void SetArmorRatio(float value);
    float GetPenetration() const;
    void SetPenetration(float value);
    float GetRange() const;
    void SetRange(float value);
    float GetRangeModifier() const;
    void SetRangeModifier(float value);
    float GetFlinchVelocityModifierLarge() const;
    void SetFlinchVelocityModifierLarge(float value);
    float GetFlinchVelocityModifierSmall() const;
    void SetFlinchVelocityModifierSmall(float value);
    float GetRecoveryTimeCrouch() const;
    void SetRecoveryTimeCrouch(float value);
    float GetRecoveryTimeStand() const;
    void SetRecoveryTimeStand(float value);
    float GetRecoveryTimeCrouchFinal() const;
    void SetRecoveryTimeCrouchFinal(float value);
    float GetRecoveryTimeStandFinal() const;
    void SetRecoveryTimeStandFinal(float value);
    int32_t GetRecoveryTransitionStartBullet() const;
    void SetRecoveryTransitionStartBullet(int32_t value);
    int32_t GetRecoveryTransitionEndBullet() const;
    void SetRecoveryTransitionEndBullet(int32_t value);
    float GetThrowVelocity() const;
    void SetThrowVelocity(float value);
    Vector GetSmokeColor() const;
    void SetSmokeColor(Vector value);
    GCBasePlayerWeaponVData GetParent() const;
    void SetParent(GCBasePlayerWeaponVData value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBtNodeConditionInactive
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBtNodeConditionInactive(std::string ptr, lua_State* state);
    GCBtNodeConditionInactive(void *ptr);

    float GetRoundStartThresholdSeconds() const;
    void SetRoundStartThresholdSeconds(float value);
    float GetSensorInactivityThresholdSeconds() const;
    void SetSensorInactivityThresholdSeconds(float value);
    GCountdownTimer GetSensorInactivityTimer() const;
    void SetSensorInactivityTimer(GCountdownTimer value);
    GCBtNodeCondition GetParent() const;
    void SetParent(GCBtNodeCondition value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSAdditionalPerRoundStats_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSAdditionalPerRoundStats_t(std::string ptr, lua_State* state);
    GCSAdditionalPerRoundStats_t(void *ptr);

    int32_t GetNumChickensKilled() const;
    void SetNumChickensKilled(int32_t value);
    int32_t GetKillsWhileBlind() const;
    void SetKillsWhileBlind(int32_t value);
    int32_t GetBombCarrierkills() const;
    void SetBombCarrierkills(int32_t value);
    int32_t GetBurnDamageInflicted() const;
    void SetBurnDamageInflicted(int32_t value);
    int32_t GetBlastDamageInflicted() const;
    void SetBlastDamageInflicted(int32_t value);
    int32_t GetDinks() const;
    void SetDinks(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GActiveModelConfig_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GActiveModelConfig_t(std::string ptr, lua_State* state);
    GActiveModelConfig_t(void *ptr);

    GModelConfigHandle_t GetHandle() const;
    void SetHandle(GModelConfigHandle_t value);
    std::string GetName() const;
    void SetName(std::string value);
    std::vector<GCBaseModelEntity> GetAssociatedEntities() const;
    void SetAssociatedEntities(std::vector<GCBaseModelEntity> value);
    std::vector<CUtlSymbolLarge> GetAssociatedEntityNames() const;
    void SetAssociatedEntityNames(std::vector<CUtlSymbolLarge> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPrecipitationVData
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPrecipitationVData(std::string ptr, lua_State* state);
    GCPrecipitationVData(void *ptr);

    float GetInnerDistance() const;
    void SetInnerDistance(float value);
    uint64_t GetAttachType() const;
    void SetAttachType(uint64_t value);
    bool GetBatchSameVolumeType() const;
    void SetBatchSameVolumeType(bool value);
    int32_t GetRTEnvCP() const;
    void SetRTEnvCP(int32_t value);
    int32_t GetRTEnvCPComponent() const;
    void SetRTEnvCPComponent(int32_t value);
    std::string GetModifier() const;
    void SetModifier(std::string value);
    GCEntitySubclassVDataBase GetParent() const;
    void SetParent(GCEntitySubclassVDataBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBreakableStageHelper
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBreakableStageHelper(std::string ptr, lua_State* state);
    GCBreakableStageHelper(void *ptr);

    int32_t GetCurrentStage() const;
    void SetCurrentStage(int32_t value);
    int32_t GetStageCount() const;
    void SetStageCount(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNavVolumeBreadthFirstSearch
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNavVolumeBreadthFirstSearch(std::string ptr, lua_State* state);
    GCNavVolumeBreadthFirstSearch(void *ptr);

    Vector GetStartPos() const;
    void SetStartPos(Vector value);
    float GetSearchDist() const;
    void SetSearchDist(float value);
    GCNavVolumeCalculatedVector GetParent() const;
    void SetParent(GCNavVolumeCalculatedVector value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAmbientGeneric
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAmbientGeneric(std::string ptr, lua_State* state);
    GCAmbientGeneric(void *ptr);

    float GetRadius() const;
    void SetRadius(float value);
    float GetMaxRadius() const;
    void SetMaxRadius(float value);
    uint64_t GetSoundLevel() const;
    void SetSoundLevel(uint64_t value);
    Gdynpitchvol_t GetDpv() const;
    void SetDpv(Gdynpitchvol_t value);
    bool GetActive() const;
    void SetActive(bool value);
    bool GetLooping() const;
    void SetLooping(bool value);
    std::string GetSound() const;
    void SetSound(std::string value);
    std::string GetSourceEntName() const;
    void SetSourceEntName(std::string value);
    GCBaseEntity GetSoundSource() const;
    void SetSoundSource(GCBaseEntity value);
    int GetSoundSourceEntIndex() const;
    void SetSoundSourceEntIndex(int value);
    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSAdditionalMatchStats_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSAdditionalMatchStats_t(std::string ptr, lua_State* state);
    GCSAdditionalMatchStats_t(void *ptr);

    int32_t GetNumRoundsSurvived() const;
    void SetNumRoundsSurvived(int32_t value);
    int32_t GetMaxNumRoundsSurvived() const;
    void SetMaxNumRoundsSurvived(int32_t value);
    int32_t GetNumRoundsSurvivedTotal() const;
    void SetNumRoundsSurvivedTotal(int32_t value);
    int32_t GetRoundsWonWithoutPurchase() const;
    void SetRoundsWonWithoutPurchase(int32_t value);
    int32_t GetRoundsWonWithoutPurchaseTotal() const;
    void SetRoundsWonWithoutPurchaseTotal(int32_t value);
    int32_t GetNumFirstKills() const;
    void SetNumFirstKills(int32_t value);
    int32_t GetNumClutchKills() const;
    void SetNumClutchKills(int32_t value);
    int32_t GetNumPistolKills() const;
    void SetNumPistolKills(int32_t value);
    int32_t GetNumSniperKills() const;
    void SetNumSniperKills(int32_t value);
    int32_t GetNumSuicides() const;
    void SetNumSuicides(int32_t value);
    int32_t GetNumTeamKills() const;
    void SetNumTeamKills(int32_t value);
    int32_t GetTeamDamage() const;
    void SetTeamDamage(int32_t value);
    GCSAdditionalPerRoundStats_t GetParent() const;
    void SetParent(GCSAdditionalPerRoundStats_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GIRagdoll
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GIRagdoll(std::string ptr, lua_State* state);
    GIRagdoll(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCGameText
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCGameText(std::string ptr, lua_State* state);
    GCGameText(void *ptr);

    std::string GetMessage() const;
    void SetMessage(std::string value);
    Ghudtextparms_t GetTextParms() const;
    void SetTextParms(Ghudtextparms_t value);
    GCRulePointEntity GetParent() const;
    void SetParent(GCRulePointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCInfoInstructorHintBombTargetB
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCInfoInstructorHintBombTargetB(std::string ptr, lua_State* state);
    GCInfoInstructorHintBombTargetB(void *ptr);

    GCPointEntity GetParent() const;
    void SetParent(GCPointEntity value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNavVolumeAll
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNavVolumeAll(std::string ptr, lua_State* state);
    GCNavVolumeAll(void *ptr);

    GCNavVolumeVector GetParent() const;
    void SetParent(GCNavVolumeVector value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNavVolumeSphericalShell
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNavVolumeSphericalShell(std::string ptr, lua_State* state);
    GCNavVolumeSphericalShell(void *ptr);

    float GetRadiusInner() const;
    void SetRadiusInner(float value);
    GCNavVolumeSphere GetParent() const;
    void SetParent(GCNavVolumeSphere value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GRelationshipOverride_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GRelationshipOverride_t(std::string ptr, lua_State* state);
    GRelationshipOverride_t(void *ptr);

    GCBaseEntity GetEntity() const;
    void SetEntity(GCBaseEntity value);
    uint64_t GetClassType() const;
    void SetClassType(uint64_t value);
    GRelationship_t GetParent() const;
    void SetParent(GRelationship_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GParticleAttributeIndex_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GParticleAttributeIndex_t(std::string ptr, lua_State* state);
    GParticleAttributeIndex_t(void *ptr);

    int32_t GetValue() const;
    void SetValue(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCParticleInput
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCParticleInput(std::string ptr, lua_State* state);
    GCParticleInput(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCParticleFloatInput
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCParticleFloatInput(std::string ptr, lua_State* state);
    GCParticleFloatInput(void *ptr);

    uint64_t GetType() const;
    void SetType(uint64_t value);
    uint64_t GetMapType() const;
    void SetMapType(uint64_t value);
    float GetLiteralValue() const;
    void SetLiteralValue(float value);
    int32_t GetControlPoint() const;
    void SetControlPoint(int32_t value);
    GParticleAttributeIndex_t GetScalarAttribute() const;
    void SetScalarAttribute(GParticleAttributeIndex_t value);
    GParticleAttributeIndex_t GetVectorAttribute() const;
    void SetVectorAttribute(GParticleAttributeIndex_t value);
    int32_t GetVectorComponent() const;
    void SetVectorComponent(int32_t value);
    float GetRandomMin() const;
    void SetRandomMin(float value);
    float GetRandomMax() const;
    void SetRandomMax(float value);
    bool GetHasRandomSignFlip() const;
    void SetHasRandomSignFlip(bool value);
    int32_t GetRandomSeed() const;
    void SetRandomSeed(int32_t value);
    uint64_t GetRandomMode() const;
    void SetRandomMode(uint64_t value);
    float GetLOD0() const;
    void SetLOD0(float value);
    float GetLOD1() const;
    void SetLOD1(float value);
    float GetLOD2() const;
    void SetLOD2(float value);
    float GetLOD3() const;
    void SetLOD3(float value);
    GParticleAttributeIndex_t GetNoiseInputVectorAttribute() const;
    void SetNoiseInputVectorAttribute(GParticleAttributeIndex_t value);
    float GetNoiseOutputMin() const;
    void SetNoiseOutputMin(float value);
    float GetNoiseOutputMax() const;
    void SetNoiseOutputMax(float value);
    float GetNoiseScale() const;
    void SetNoiseScale(float value);
    Vector GetNoiseOffsetRate() const;
    void SetNoiseOffsetRate(Vector value);
    float GetNoiseOffset() const;
    void SetNoiseOffset(float value);
    int32_t GetNoiseOctaves() const;
    void SetNoiseOctaves(int32_t value);
    uint64_t GetNoiseTurbulence() const;
    void SetNoiseTurbulence(uint64_t value);
    uint64_t GetNoiseType() const;
    void SetNoiseType(uint64_t value);
    uint64_t GetNoiseModifier() const;
    void SetNoiseModifier(uint64_t value);
    float GetNoiseTurbulenceScale() const;
    void SetNoiseTurbulenceScale(float value);
    float GetNoiseTurbulenceMix() const;
    void SetNoiseTurbulenceMix(float value);
    float GetNoiseImgPreviewScale() const;
    void SetNoiseImgPreviewScale(float value);
    bool GetNoiseImgPreviewLive() const;
    void SetNoiseImgPreviewLive(bool value);
    float GetNoCameraFallback() const;
    void SetNoCameraFallback(float value);
    bool GetUseBoundsCenter() const;
    void SetUseBoundsCenter(bool value);
    uint64_t GetInputMode() const;
    void SetInputMode(uint64_t value);
    float GetMultFactor() const;
    void SetMultFactor(float value);
    float GetInput0() const;
    void SetInput0(float value);
    float GetInput1() const;
    void SetInput1(float value);
    float GetOutput0() const;
    void SetOutput0(float value);
    float GetOutput1() const;
    void SetOutput1(float value);
    float GetNotchedRangeMin() const;
    void SetNotchedRangeMin(float value);
    float GetNotchedRangeMax() const;
    void SetNotchedRangeMax(float value);
    float GetNotchedOutputOutside() const;
    void SetNotchedOutputOutside(float value);
    float GetNotchedOutputInside() const;
    void SetNotchedOutputInside(float value);
    uint64_t GetBiasType() const;
    void SetBiasType(uint64_t value);
    float GetBiasParameter() const;
    void SetBiasParameter(float value);
    GCParticleInput GetParent() const;
    void SetParent(GCParticleInput value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVoxelVisBlockOffset_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVoxelVisBlockOffset_t(std::string ptr, lua_State* state);
    GVoxelVisBlockOffset_t(void *ptr);

    uint32_t GetOffset() const;
    void SetOffset(uint32_t value);
    uint32_t GetElementCount() const;
    void SetElementCount(uint32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GAggregateLODSetup_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GAggregateLODSetup_t(std::string ptr, lua_State* state);
    GAggregateLODSetup_t(void *ptr);

    Vector GetLODOrigin() const;
    void SetLODOrigin(Vector value);
    float GetMaxObjectScale() const;
    void SetMaxObjectScale(float value);
    std::vector<float32> GetSwitchDistances() const;
    void SetSwitchDistances(std::vector<float32> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCProductQuantizer
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCProductQuantizer(std::string ptr, lua_State* state);
    GCProductQuantizer(void *ptr);

    std::vector<GCVectorQuantizer> GetSubQuantizers() const;
    void SetSubQuantizers(std::vector<GCVectorQuantizer> value);
    int32_t GetDimensions() const;
    void SetDimensions(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimUpdateNodeRef
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimUpdateNodeRef(std::string ptr, lua_State* state);
    GCAnimUpdateNodeRef(void *ptr);

    int32_t GetNodeIndex() const;
    void SetNodeIndex(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmGraphNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmGraphNode(std::string ptr, lua_State* state);
    GCNmGraphNode(void *ptr);

    int16_t GetNodeIdx() const;
    void SetNodeIdx(int16_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCParticleCollectionFloatInput
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCParticleCollectionFloatInput(std::string ptr, lua_State* state);
    GCParticleCollectionFloatInput(void *ptr);

    GCParticleFloatInput GetParent() const;
    void SetParent(GCParticleFloatInput value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCParticleFunction
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCParticleFunction(std::string ptr, lua_State* state);
    GCParticleFunction(void *ptr);

    GCParticleCollectionFloatInput GetOpStrength() const;
    void SetOpStrength(GCParticleCollectionFloatInput value);
    uint64_t GetOpEndCapState() const;
    void SetOpEndCapState(uint64_t value);
    float GetOpStartFadeInTime() const;
    void SetOpStartFadeInTime(float value);
    float GetOpEndFadeInTime() const;
    void SetOpEndFadeInTime(float value);
    float GetOpStartFadeOutTime() const;
    void SetOpStartFadeOutTime(float value);
    float GetOpEndFadeOutTime() const;
    void SetOpEndFadeOutTime(float value);
    float GetOpFadeOscillatePeriod() const;
    void SetOpFadeOscillatePeriod(float value);
    bool GetNormalizeToStopTime() const;
    void SetNormalizeToStopTime(bool value);
    float GetOpTimeOffsetMin() const;
    void SetOpTimeOffsetMin(float value);
    float GetOpTimeOffsetMax() const;
    void SetOpTimeOffsetMax(float value);
    int32_t GetOpTimeOffsetSeed() const;
    void SetOpTimeOffsetSeed(int32_t value);
    int32_t GetOpTimeScaleSeed() const;
    void SetOpTimeScaleSeed(int32_t value);
    float GetOpTimeScaleMin() const;
    void SetOpTimeScaleMin(float value);
    float GetOpTimeScaleMax() const;
    void SetOpTimeScaleMax(float value);
    bool GetDisableOperator() const;
    void SetDisableOperator(bool value);
    std::string GetNotes() const;
    void SetNotes(std::string value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCParticleFunctionOperator
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCParticleFunctionOperator(std::string ptr, lua_State* state);
    GCParticleFunctionOperator(void *ptr);

    GCParticleFunction GetParent() const;
    void SetParent(GCParticleFunction value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GPARTICLE_WORLD_HANDLE__
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GPARTICLE_WORLD_HANDLE__(std::string ptr, lua_State* state);
    GPARTICLE_WORLD_HANDLE__(void *ptr);

    int32_t GetUnused() const;
    void SetUnused(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVMixDynamicsCompressorDesc_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVMixDynamicsCompressorDesc_t(std::string ptr, lua_State* state);
    GVMixDynamicsCompressorDesc_t(void *ptr);

    float GetFldbOutputGain() const;
    void SetFldbOutputGain(float value);
    float GetFldbCompressionThreshold() const;
    void SetFldbCompressionThreshold(float value);
    float GetFldbKneeWidth() const;
    void SetFldbKneeWidth(float value);
    float GetCompressionRatio() const;
    void SetCompressionRatio(float value);
    float GetAttackTimeMS() const;
    void SetAttackTimeMS(float value);
    float GetReleaseTimeMS() const;
    void SetReleaseTimeMS(float value);
    float GetRMSTimeMS() const;
    void SetRMSTimeMS(float value);
    float GetWetMix() const;
    void SetWetMix(float value);
    bool GetPeakMode() const;
    void SetPeakMode(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFootStepTrigger
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFootStepTrigger(std::string ptr, lua_State* state);
    GFootStepTrigger(void *ptr);

    std::vector<int32> GetTags() const;
    void SetTags(std::vector<int32> value);
    int32_t GetFootIndex() const;
    void SetFootIndex(int32_t value);
    uint64_t GetTriggerPhase() const;
    void SetTriggerPhase(uint64_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GParticleControlPointDriver_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GParticleControlPointDriver_t(std::string ptr, lua_State* state);
    GParticleControlPointDriver_t(void *ptr);

    int32_t GetControlPoint() const;
    void SetControlPoint(int32_t value);
    uint64_t GetAttachType() const;
    void SetAttachType(uint64_t value);
    std::string GetAttachmentName() const;
    void SetAttachmentName(std::string value);
    Vector GetOffset() const;
    void SetOffset(Vector value);
    QAngle GetOffset1() const;
    void SetOffset1(QAngle value);
    std::string GetEntityName() const;
    void SetEntityName(std::string value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeSphereRigid_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeSphereRigid_t(std::string ptr, lua_State* state);
    GFeSphereRigid_t(void *ptr);

    float GetSphere() const;
    void SetSphere(float value);
    uint16_t GetNode() const;
    void SetNode(uint16_t value);
    uint16_t GetCollisionMask() const;
    void SetCollisionMask(uint16_t value);
    uint16_t GetVertexMapIndex() const;
    void SetVertexMapIndex(uint16_t value);
    uint16_t GetFlags() const;
    void SetFlags(uint16_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMotionMetricEvaluator
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMotionMetricEvaluator(std::string ptr, lua_State* state);
    GCMotionMetricEvaluator(void *ptr);

    std::vector<float32> GetMeans() const;
    void SetMeans(std::vector<float32> value);
    std::vector<float32> GetStandardDeviations() const;
    void SetStandardDeviations(std::vector<float32> value);
    float GetWeight() const;
    void SetWeight(float value);
    int32_t GetDimensionStartIndex() const;
    void SetDimensionStartIndex(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCDrawCullingData
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCDrawCullingData(std::string ptr, lua_State* state);
    GCDrawCullingData(void *ptr);

    Vector GetConeApex() const;
    void SetConeApex(Vector value);
    std::vector<int32_t> GetConeAxis() const;
    void SetConeAxis(std::vector<int32_t> value);
    int32_t GetConeCutoff() const;
    void SetConeCutoff(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimUserDifference
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimUserDifference(std::string ptr, lua_State* state);
    GCAnimUserDifference(void *ptr);

    int32_t GetType() const;
    void SetType(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSeqMultiFetchFlag
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSeqMultiFetchFlag(std::string ptr, lua_State* state);
    GCSeqMultiFetchFlag(void *ptr);

    bool GetRealtime() const;
    void SetRealtime(bool value);
    bool GetCylepose() const;
    void SetCylepose(bool value);
    bool Get0D() const;
    void Set0D(bool value);
    bool Get1D() const;
    void Set1D(bool value);
    bool Get2D() const;
    void Set2D(bool value);
    bool Get2D_TRI() const;
    void Set2D_TRI(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmEvent
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmEvent(std::string ptr, lua_State* state);
    GCNmEvent(void *ptr);

    float GetStartTime() const;
    void SetStartTime(float value);
    float GetDuration() const;
    void SetDuration(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimParamHandle
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimParamHandle(std::string ptr, lua_State* state);
    GCAnimParamHandle(void *ptr);

    uint64_t GetType() const;
    void SetType(uint64_t value);
    uint32_t GetIndex() const;
    void SetIndex(uint32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFuseSymbolTable
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFuseSymbolTable(std::string ptr, lua_State* state);
    GCFuseSymbolTable(void *ptr);

    std::vector<GConstantInfo_t> GetConstants() const;
    void SetConstants(std::vector<GConstantInfo_t> value);
    std::vector<GVariableInfo_t> GetVariables() const;
    void SetVariables(std::vector<GVariableInfo_t> value);
    std::vector<GFunctionInfo_t> GetFunctions() const;
    void SetFunctions(std::vector<GFunctionInfo_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GGeneratedTextureHandle_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GGeneratedTextureHandle_t(std::string ptr, lua_State* state);
    GGeneratedTextureHandle_t(void *ptr);

    std::string GetStrBitmapName() const;
    void SetStrBitmapName(std::string value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GSceneViewId_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GSceneViewId_t(std::string ptr, lua_State* state);
    GSceneViewId_t(void *ptr);

    uint64_t GetViewId() const;
    void SetViewId(uint64_t value);
    uint64_t GetFrameCount() const;
    void SetFrameCount(uint64_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GPhysFeModelDesc_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GPhysFeModelDesc_t(std::string ptr, lua_State* state);
    GPhysFeModelDesc_t(void *ptr);

    std::vector<uint32> GetCtrlHash() const;
    void SetCtrlHash(std::vector<uint32> value);
    std::vector<CUtlString> GetCtrlName() const;
    void SetCtrlName(std::vector<CUtlString> value);
    uint32_t GetStaticNodeFlags() const;
    void SetStaticNodeFlags(uint32_t value);
    uint32_t GetDynamicNodeFlags() const;
    void SetDynamicNodeFlags(uint32_t value);
    float GetLocalForce() const;
    void SetLocalForce(float value);
    float GetLocalRotation() const;
    void SetLocalRotation(float value);
    uint16_t GetNodeCount() const;
    void SetNodeCount(uint16_t value);
    uint16_t GetStaticNodes() const;
    void SetStaticNodes(uint16_t value);
    uint16_t GetRotLockStaticNodes() const;
    void SetRotLockStaticNodes(uint16_t value);
    uint16_t GetFirstPositionDrivenNode() const;
    void SetFirstPositionDrivenNode(uint16_t value);
    uint16_t GetSimdTriCount1() const;
    void SetSimdTriCount1(uint16_t value);
    uint16_t GetSimdTriCount2() const;
    void SetSimdTriCount2(uint16_t value);
    uint16_t GetSimdQuadCount1() const;
    void SetSimdQuadCount1(uint16_t value);
    uint16_t GetSimdQuadCount2() const;
    void SetSimdQuadCount2(uint16_t value);
    uint16_t GetQuadCount1() const;
    void SetQuadCount1(uint16_t value);
    uint16_t GetQuadCount2() const;
    void SetQuadCount2(uint16_t value);
    uint16_t GetTreeDepth() const;
    void SetTreeDepth(uint16_t value);
    uint16_t GetNodeBaseJiggleboneDependsCount() const;
    void SetNodeBaseJiggleboneDependsCount(uint16_t value);
    uint16_t GetRopeCount() const;
    void SetRopeCount(uint16_t value);
    std::vector<uint16> GetRopes() const;
    void SetRopes(std::vector<uint16> value);
    std::vector<GFeNodeBase_t> GetNodeBases() const;
    void SetNodeBases(std::vector<GFeNodeBase_t> value);
    std::vector<GFeSimdNodeBase_t> GetSimdNodeBases() const;
    void SetSimdNodeBases(std::vector<GFeSimdNodeBase_t> value);
    std::vector<GFeQuad_t> GetQuads() const;
    void SetQuads(std::vector<GFeQuad_t> value);
    std::vector<GFeSimdQuad_t> GetSimdQuads() const;
    void SetSimdQuads(std::vector<GFeSimdQuad_t> value);
    std::vector<GFeSimdTri_t> GetSimdTris() const;
    void SetSimdTris(std::vector<GFeSimdTri_t> value);
    std::vector<GFeSimdRodConstraint_t> GetSimdRods() const;
    void SetSimdRods(std::vector<GFeSimdRodConstraint_t> value);
    std::vector<GFeSimdRodConstraintAnim_t> GetSimdRodsAnim() const;
    void SetSimdRodsAnim(std::vector<GFeSimdRodConstraintAnim_t> value);
    std::vector<GFeRodConstraint_t> GetRods() const;
    void SetRods(std::vector<GFeRodConstraint_t> value);
    std::vector<GFeTwistConstraint_t> GetTwists() const;
    void SetTwists(std::vector<GFeTwistConstraint_t> value);
    std::vector<GFeAxialEdgeBend_t> GetAxialEdges() const;
    void SetAxialEdges(std::vector<GFeAxialEdgeBend_t> value);
    std::vector<float32> GetNodeInvMasses() const;
    void SetNodeInvMasses(std::vector<float32> value);
    std::vector<GFeCtrlOffset_t> GetCtrlOffsets() const;
    void SetCtrlOffsets(std::vector<GFeCtrlOffset_t> value);
    std::vector<GFeCtrlOsOffset_t> GetCtrlOsOffsets() const;
    void SetCtrlOsOffsets(std::vector<GFeCtrlOsOffset_t> value);
    std::vector<GFeFollowNode_t> GetFollowNodes() const;
    void SetFollowNodes(std::vector<GFeFollowNode_t> value);
    std::vector<GFeCollisionPlane_t> GetCollisionPlanes() const;
    void SetCollisionPlanes(std::vector<GFeCollisionPlane_t> value);
    std::vector<GFeNodeIntegrator_t> GetNodeIntegrator() const;
    void SetNodeIntegrator(std::vector<GFeNodeIntegrator_t> value);
    std::vector<GFeSpringIntegrator_t> GetSpringIntegrator() const;
    void SetSpringIntegrator(std::vector<GFeSpringIntegrator_t> value);
    std::vector<GFeSimdSpringIntegrator_t> GetSimdSpringIntegrator() const;
    void SetSimdSpringIntegrator(std::vector<GFeSimdSpringIntegrator_t> value);
    std::vector<GFeWorldCollisionParams_t> GetWorldCollisionParams() const;
    void SetWorldCollisionParams(std::vector<GFeWorldCollisionParams_t> value);
    std::vector<float32> GetLegacyStretchForce() const;
    void SetLegacyStretchForce(std::vector<float32> value);
    std::vector<float32> GetNodeCollisionRadii() const;
    void SetNodeCollisionRadii(std::vector<float32> value);
    std::vector<float32> GetDynNodeFriction() const;
    void SetDynNodeFriction(std::vector<float32> value);
    std::vector<float32> GetLocalRotation1() const;
    void SetLocalRotation1(std::vector<float32> value);
    std::vector<float32> GetLocalForce1() const;
    void SetLocalForce1(std::vector<float32> value);
    std::vector<GFeTaperedCapsuleStretch_t> GetTaperedCapsuleStretches() const;
    void SetTaperedCapsuleStretches(std::vector<GFeTaperedCapsuleStretch_t> value);
    std::vector<GFeTaperedCapsuleRigid_t> GetTaperedCapsuleRigids() const;
    void SetTaperedCapsuleRigids(std::vector<GFeTaperedCapsuleRigid_t> value);
    std::vector<GFeSphereRigid_t> GetSphereRigids() const;
    void SetSphereRigids(std::vector<GFeSphereRigid_t> value);
    std::vector<uint16> GetWorldCollisionNodes() const;
    void SetWorldCollisionNodes(std::vector<uint16> value);
    std::vector<uint16> GetTreeParents() const;
    void SetTreeParents(std::vector<uint16> value);
    std::vector<uint16> GetTreeCollisionMasks() const;
    void SetTreeCollisionMasks(std::vector<uint16> value);
    std::vector<GFeTreeChildren_t> GetTreeChildren() const;
    void SetTreeChildren(std::vector<GFeTreeChildren_t> value);
    std::vector<uint16> GetFreeNodes() const;
    void SetFreeNodes(std::vector<uint16> value);
    std::vector<GFeFitMatrix_t> GetFitMatrices() const;
    void SetFitMatrices(std::vector<GFeFitMatrix_t> value);
    std::vector<GFeFitWeight_t> GetFitWeights() const;
    void SetFitWeights(std::vector<GFeFitWeight_t> value);
    std::vector<GFeNodeReverseOffset_t> GetReverseOffsets() const;
    void SetReverseOffsets(std::vector<GFeNodeReverseOffset_t> value);
    std::vector<GFeAnimStrayRadius_t> GetAnimStrayRadii() const;
    void SetAnimStrayRadii(std::vector<GFeAnimStrayRadius_t> value);
    std::vector<GFeSimdAnimStrayRadius_t> GetSimdAnimStrayRadii() const;
    void SetSimdAnimStrayRadii(std::vector<GFeSimdAnimStrayRadius_t> value);
    std::vector<GFeKelagerBend2_t> GetKelagerBends() const;
    void SetKelagerBends(std::vector<GFeKelagerBend2_t> value);
    std::vector<GFeCtrlSoftOffset_t> GetCtrlSoftOffsets() const;
    void SetCtrlSoftOffsets(std::vector<GFeCtrlSoftOffset_t> value);
    std::vector<GCFeIndexedJiggleBone> GetJiggleBones() const;
    void SetJiggleBones(std::vector<GCFeIndexedJiggleBone> value);
    std::vector<uint16> GetSourceElems() const;
    void SetSourceElems(std::vector<uint16> value);
    std::vector<uint32> GetGoalDampedSpringIntegrators() const;
    void SetGoalDampedSpringIntegrators(std::vector<uint32> value);
    std::vector<GFeTri_t> GetTris() const;
    void SetTris(std::vector<GFeTri_t> value);
    uint16_t GetTriCount1() const;
    void SetTriCount1(uint16_t value);
    uint16_t GetTriCount2() const;
    void SetTriCount2(uint16_t value);
    uint32_t GetReservedUint8() const;
    void SetReservedUint8(uint32_t value);
    uint32_t GetExtraPressureIterations() const;
    void SetExtraPressureIterations(uint32_t value);
    uint32_t GetExtraGoalIterations() const;
    void SetExtraGoalIterations(uint32_t value);
    uint32_t GetExtraIterations() const;
    void SetExtraIterations(uint32_t value);
    std::vector<GFeBoxRigid_t> GetBoxRigids() const;
    void SetBoxRigids(std::vector<GFeBoxRigid_t> value);
    std::vector<uint8> GetDynNodeVertexSet() const;
    void SetDynNodeVertexSet(std::vector<uint8> value);
    std::vector<uint32> GetVertexSetNames() const;
    void SetVertexSetNames(std::vector<uint32> value);
    std::vector<GFeRigidColliderIndices_t> GetRigidColliderPriorities() const;
    void SetRigidColliderPriorities(std::vector<GFeRigidColliderIndices_t> value);
    std::vector<GFeMorphLayerDepr_t> GetMorphLayers() const;
    void SetMorphLayers(std::vector<GFeMorphLayerDepr_t> value);
    std::vector<uint8> GetMorphSetData() const;
    void SetMorphSetData(std::vector<uint8> value);
    std::vector<GFeVertexMapDesc_t> GetVertexMaps() const;
    void SetVertexMaps(std::vector<GFeVertexMapDesc_t> value);
    std::vector<uint8> GetVertexMapValues() const;
    void SetVertexMapValues(std::vector<uint8> value);
    std::vector<GFeEffectDesc_t> GetEffects() const;
    void SetEffects(std::vector<GFeEffectDesc_t> value);
    std::vector<GFeCtrlOffset_t> GetLockToParent() const;
    void SetLockToParent(std::vector<GFeCtrlOffset_t> value);
    std::vector<uint16> GetLockToGoal() const;
    void SetLockToGoal(std::vector<uint16> value);
    std::vector<int16> GetSkelParents() const;
    void SetSkelParents(std::vector<int16> value);
    std::vector<GFeNodeWindBase_t> GetDynNodeWindBases() const;
    void SetDynNodeWindBases(std::vector<GFeNodeWindBase_t> value);
    float GetInternalPressure() const;
    void SetInternalPressure(float value);
    float GetDefaultTimeDilation() const;
    void SetDefaultTimeDilation(float value);
    float GetWindage() const;
    void SetWindage(float value);
    float GetWindDrag() const;
    void SetWindDrag(float value);
    float GetDefaultSurfaceStretch() const;
    void SetDefaultSurfaceStretch(float value);
    float GetDefaultThreadStretch() const;
    void SetDefaultThreadStretch(float value);
    float GetDefaultGravityScale() const;
    void SetDefaultGravityScale(float value);
    float GetDefaultVelAirDrag() const;
    void SetDefaultVelAirDrag(float value);
    float GetDefaultExpAirDrag() const;
    void SetDefaultExpAirDrag(float value);
    float GetDefaultVelQuadAirDrag() const;
    void SetDefaultVelQuadAirDrag(float value);
    float GetDefaultExpQuadAirDrag() const;
    void SetDefaultExpQuadAirDrag(float value);
    float GetRodVelocitySmoothRate() const;
    void SetRodVelocitySmoothRate(float value);
    float GetQuadVelocitySmoothRate() const;
    void SetQuadVelocitySmoothRate(float value);
    float GetAddWorldCollisionRadius() const;
    void SetAddWorldCollisionRadius(float value);
    float GetDefaultVolumetricSolveAmount() const;
    void SetDefaultVolumetricSolveAmount(float value);
    float GetMotionSmoothCDT() const;
    void SetMotionSmoothCDT(float value);
    uint16_t GetRodVelocitySmoothIterations() const;
    void SetRodVelocitySmoothIterations(uint16_t value);
    uint16_t GetQuadVelocitySmoothIterations() const;
    void SetQuadVelocitySmoothIterations(uint16_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCycleBase
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCycleBase(std::string ptr, lua_State* state);
    GCCycleBase(void *ptr);

    float GetCycle() const;
    void SetCycle(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPhysSurfacePropertiesSoundNames
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPhysSurfacePropertiesSoundNames(std::string ptr, lua_State* state);
    GCPhysSurfacePropertiesSoundNames(void *ptr);

    std::string GetImpactSoft() const;
    void SetImpactSoft(std::string value);
    std::string GetImpactHard() const;
    void SetImpactHard(std::string value);
    std::string GetScrapeSmooth() const;
    void SetScrapeSmooth(std::string value);
    std::string GetScrapeRough() const;
    void SetScrapeRough(std::string value);
    std::string GetBulletImpact() const;
    void SetBulletImpact(std::string value);
    std::string GetRolling() const;
    void SetRolling(std::string value);
    std::string GetBreak() const;
    void SetBreak(std::string value);
    std::string GetStrain() const;
    void SetStrain(std::string value);
    std::string GetMeleeImpact() const;
    void SetMeleeImpact(std::string value);
    std::string GetPushOff() const;
    void SetPushOff(std::string value);
    std::string GetSkidStop() const;
    void SetSkidStop(std::string value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GDynamicMeshDeformParams_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GDynamicMeshDeformParams_t(std::string ptr, lua_State* state);
    GDynamicMeshDeformParams_t(void *ptr);

    float GetTensionCompressScale() const;
    void SetTensionCompressScale(float value);
    float GetTensionStretchScale() const;
    void SetTensionStretchScale(float value);
    bool GetRecomputeSmoothNormalsAfterAnimation() const;
    void SetRecomputeSmoothNormalsAfterAnimation(bool value);
    bool GetComputeDynamicMeshTensionAfterAnimation() const;
    void SetComputeDynamicMeshTensionAfterAnimation(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCDistanceRemainingMetricEvaluator
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCDistanceRemainingMetricEvaluator(std::string ptr, lua_State* state);
    GCDistanceRemainingMetricEvaluator(void *ptr);

    float GetMaxDistance() const;
    void SetMaxDistance(float value);
    float GetMinDistance() const;
    void SetMinDistance(float value);
    float GetStartGoalFilterDistance() const;
    void SetStartGoalFilterDistance(float value);
    float GetMaxGoalOvershootScale() const;
    void SetMaxGoalOvershootScale(float value);
    bool GetFilterFixedMinDistance() const;
    void SetFilterFixedMinDistance(bool value);
    bool GetFilterGoalDistance() const;
    void SetFilterGoalDistance(bool value);
    bool GetFilterGoalOvershoot() const;
    void SetFilterGoalOvershoot(bool value);
    GCMotionMetricEvaluator GetParent() const;
    void SetParent(GCMotionMetricEvaluator value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVMixDynamicsBand_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVMixDynamicsBand_t(std::string ptr, lua_State* state);
    GVMixDynamicsBand_t(void *ptr);

    float GetFldbGainInput() const;
    void SetFldbGainInput(float value);
    float GetFldbGainOutput() const;
    void SetFldbGainOutput(float value);
    float GetFldbThresholdBelow() const;
    void SetFldbThresholdBelow(float value);
    float GetFldbThresholdAbove() const;
    void SetFldbThresholdAbove(float value);
    float GetRatioBelow() const;
    void SetRatioBelow(float value);
    float GetRatioAbove() const;
    void SetRatioAbove(float value);
    float GetAttackTimeMS() const;
    void SetAttackTimeMS(float value);
    float GetReleaseTimeMS() const;
    void SetReleaseTimeMS(float value);
    bool GetEnable() const;
    void SetEnable(bool value);
    bool GetSolo() const;
    void SetSolo(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GRnCapsule_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GRnCapsule_t(std::string ptr, lua_State* state);
    GRnCapsule_t(void *ptr);

    std::vector<Vector> GetCenter() const;
    void SetCenter(std::vector<Vector> value);
    float GetRadius() const;
    void SetRadius(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimInputDamping
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimInputDamping(std::string ptr, lua_State* state);
    GCAnimInputDamping(void *ptr);

    uint64_t GetSpeedFunction() const;
    void SetSpeedFunction(uint64_t value);
    float GetSpeedScale() const;
    void SetSpeedScale(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GAnimTagID
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GAnimTagID(std::string ptr, lua_State* state);
    GAnimTagID(void *ptr);

    uint32_t GetId() const;
    void SetId(uint32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCParticleFunctionPreEmission
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCParticleFunctionPreEmission(std::string ptr, lua_State* state);
    GCParticleFunctionPreEmission(void *ptr);

    bool GetRunOnce() const;
    void SetRunOnce(bool value);
    GCParticleFunctionOperator GetParent() const;
    void SetParent(GCParticleFunctionOperator value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPerParticleFloatInput
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPerParticleFloatInput(std::string ptr, lua_State* state);
    GCPerParticleFloatInput(void *ptr);

    GCParticleFloatInput GetParent() const;
    void SetParent(GCParticleFloatInput value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSosGroupActionSchema
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSosGroupActionSchema(std::string ptr, lua_State* state);
    GCSosGroupActionSchema(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    uint64_t GetActionType() const;
    void SetActionType(uint64_t value);
    uint64_t GetActionInstanceType() const;
    void SetActionInstanceType(uint64_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFutureFacingMetricEvaluator
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFutureFacingMetricEvaluator(std::string ptr, lua_State* state);
    GCFutureFacingMetricEvaluator(void *ptr);

    float GetDistance() const;
    void SetDistance(float value);
    float GetTime() const;
    void SetTime(float value);
    GCMotionMetricEvaluator GetParent() const;
    void SetParent(GCMotionMetricEvaluator value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSeqTransition
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSeqTransition(std::string ptr, lua_State* state);
    GCSeqTransition(void *ptr);

    float GetFadeInTime() const;
    void SetFadeInTime(float value);
    float GetFadeOutTime() const;
    void SetFadeOutTime(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimNodePath
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimNodePath(std::string ptr, lua_State* state);
    GCAnimNodePath(void *ptr);

    std::vector<GAnimNodeID> GetPath() const;
    void SetPath(std::vector<GAnimNodeID> value);
    int32_t GetCount() const;
    void SetCount(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCParamSpanUpdater
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCParamSpanUpdater(std::string ptr, lua_State* state);
    GCParamSpanUpdater(void *ptr);

    std::vector<GParamSpan_t> GetSpans() const;
    void SetSpans(std::vector<GParamSpan_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GAnimNodeID
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GAnimNodeID(std::string ptr, lua_State* state);
    GAnimNodeID(void *ptr);

    uint32_t GetId() const;
    void SetId(uint32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCParticleFunctionInitializer
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCParticleFunctionInitializer(std::string ptr, lua_State* state);
    GCParticleFunctionInitializer(void *ptr);

    int32_t GetAssociatedEmitterIndex() const;
    void SetAssociatedEmitterIndex(int32_t value);
    GCParticleFunction GetParent() const;
    void SetParent(GCParticleFunction value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GRnFace_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GRnFace_t(std::string ptr, lua_State* state);
    GRnFace_t(void *ptr);

    uint32_t GetEdge() const;
    void SetEdge(uint32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEngineLoopState_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEngineLoopState_t(std::string ptr, lua_State* state);
    GEngineLoopState_t(void *ptr);

    int32_t GetPlatWindowWidth() const;
    void SetPlatWindowWidth(int32_t value);
    int32_t GetPlatWindowHeight() const;
    void SetPlatWindowHeight(int32_t value);
    int32_t GetRenderWidth() const;
    void SetRenderWidth(int32_t value);
    int32_t GetRenderHeight() const;
    void SetRenderHeight(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmPoseNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmPoseNode(std::string ptr, lua_State* state);
    GCNmPoseNode(void *ptr);

    GCNmGraphNode GetParent() const;
    void SetParent(GCNmGraphNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCParticleFunctionConstraint
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCParticleFunctionConstraint(std::string ptr, lua_State* state);
    GCParticleFunctionConstraint(void *ptr);

    GCParticleFunction GetParent() const;
    void SetParent(GCParticleFunction value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmStateMachineNode__TransitionDefinition_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmStateMachineNode__TransitionDefinition_t(std::string ptr, lua_State* state);
    GCNmStateMachineNode__TransitionDefinition_t(void *ptr);

    int16_t GetTargetStateIdx() const;
    void SetTargetStateIdx(int16_t value);
    int16_t GetConditionNodeIdx() const;
    void SetConditionNodeIdx(int16_t value);
    int16_t GetTransitionNodeIdx() const;
    void SetTransitionNodeIdx(int16_t value);
    bool GetCanBeForced() const;
    void SetCanBeForced(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimAttachment
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimAttachment(std::string ptr, lua_State* state);
    GCAnimAttachment(void *ptr);

    std::vector<Vector> GetInfluenceOffsets() const;
    void SetInfluenceOffsets(std::vector<Vector> value);
    std::vector<int32_t> GetInfluenceIndices() const;
    void SetInfluenceIndices(std::vector<int32_t> value);
    std::vector<float> GetInfluenceWeights() const;
    void SetInfluenceWeights(std::vector<float> value);
    uint32_t GetNumInfluences() const;
    void SetNumInfluences(uint32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEventSimulate_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEventSimulate_t(std::string ptr, lua_State* state);
    GEventSimulate_t(void *ptr);

    GEngineLoopState_t GetLoopState() const;
    void SetLoopState(GEngineLoopState_t value);
    bool GetFirstTick() const;
    void SetFirstTick(bool value);
    bool GetLastTick() const;
    void SetLastTick(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCParticleCollectionRendererFloatInput
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCParticleCollectionRendererFloatInput(std::string ptr, lua_State* state);
    GCParticleCollectionRendererFloatInput(void *ptr);

    GCParticleCollectionFloatInput GetParent() const;
    void SetParent(GCParticleCollectionFloatInput value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GModelSkeletonData_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GModelSkeletonData_t(std::string ptr, lua_State* state);
    GModelSkeletonData_t(void *ptr);

    std::vector<CUtlString> GetBoneName() const;
    void SetBoneName(std::vector<CUtlString> value);
    std::vector<int16> GetParent() const;
    void SetParent(std::vector<int16> value);
    std::vector<float32> GetBoneSphere() const;
    void SetBoneSphere(std::vector<float32> value);
    std::vector<uint32> GetFlag() const;
    void SetFlag(std::vector<uint32> value);
    std::vector<Vector> GetBonePosParent() const;
    void SetBonePosParent(std::vector<Vector> value);
    std::vector<float32> GetBoneScaleParent() const;
    void SetBoneScaleParent(std::vector<float32> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEventModInitialized_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEventModInitialized_t(std::string ptr, lua_State* state);
    GEventModInitialized_t(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCParticleTransformInput
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCParticleTransformInput(std::string ptr, lua_State* state);
    GCParticleTransformInput(void *ptr);

    uint64_t GetType() const;
    void SetType(uint64_t value);
    bool GetFollowNamedValue() const;
    void SetFollowNamedValue(bool value);
    bool GetSupportsDisabled() const;
    void SetSupportsDisabled(bool value);
    bool GetUseOrientation() const;
    void SetUseOrientation(bool value);
    int32_t GetControlPoint() const;
    void SetControlPoint(int32_t value);
    int32_t GetControlPointRangeMax() const;
    void SetControlPointRangeMax(int32_t value);
    float GetEndCPGrowthTime() const;
    void SetEndCPGrowthTime(float value);
    GCParticleInput GetParent() const;
    void SetParent(GCParticleInput value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCParticleVisibilityInputs
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCParticleVisibilityInputs(std::string ptr, lua_State* state);
    GCParticleVisibilityInputs(void *ptr);

    float GetCameraBias() const;
    void SetCameraBias(float value);
    int32_t GetCPin() const;
    void SetCPin(int32_t value);
    float GetProxyRadius() const;
    void SetProxyRadius(float value);
    float GetInputMin() const;
    void SetInputMin(float value);
    float GetInputMax() const;
    void SetInputMax(float value);
    float GetInputPixelVisFade() const;
    void SetInputPixelVisFade(float value);
    float GetNoPixelVisibilityFallback() const;
    void SetNoPixelVisibilityFallback(float value);
    float GetDistanceInputMin() const;
    void SetDistanceInputMin(float value);
    float GetDistanceInputMax() const;
    void SetDistanceInputMax(float value);
    float GetDotInputMin() const;
    void SetDotInputMin(float value);
    float GetDotInputMax() const;
    void SetDotInputMax(float value);
    bool GetDotCPAngles() const;
    void SetDotCPAngles(bool value);
    bool GetDotCameraAngles() const;
    void SetDotCameraAngles(bool value);
    float GetAlphaScaleMin() const;
    void SetAlphaScaleMin(float value);
    float GetAlphaScaleMax() const;
    void SetAlphaScaleMax(float value);
    float GetRadiusScaleMin() const;
    void SetRadiusScaleMin(float value);
    float GetRadiusScaleMax() const;
    void SetRadiusScaleMax(float value);
    float GetRadiusScaleFOVBase() const;
    void SetRadiusScaleFOVBase(float value);
    bool GetRightEye() const;
    void SetRightEye(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GMaterialGroup_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GMaterialGroup_t(std::string ptr, lua_State* state);
    GMaterialGroup_t(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimUpdateNodeBase
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimUpdateNodeBase(std::string ptr, lua_State* state);
    GCAnimUpdateNodeBase(void *ptr);

    GCAnimNodePath GetNodePath() const;
    void SetNodePath(GCAnimNodePath value);
    uint64_t GetNetworkMode() const;
    void SetNetworkMode(uint64_t value);
    std::string GetName() const;
    void SetName(std::string value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCParticleFunctionRenderer
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCParticleFunctionRenderer(std::string ptr, lua_State* state);
    GCParticleFunctionRenderer(void *ptr);

    GCParticleVisibilityInputs GetVisibilityInputs() const;
    void SetVisibilityInputs(GCParticleVisibilityInputs value);
    bool GetCannotBeRefracted() const;
    void SetCannotBeRefracted(bool value);
    bool GetSkipRenderingOnMobile() const;
    void SetSkipRenderingOnMobile(bool value);
    GCParticleFunction GetParent() const;
    void SetParent(GCParticleFunction value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCParticleVecInput
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCParticleVecInput(std::string ptr, lua_State* state);
    GCParticleVecInput(void *ptr);

    uint64_t GetType() const;
    void SetType(uint64_t value);
    Vector GetLiteralValue() const;
    void SetLiteralValue(Vector value);
    Color GetLiteralColor() const;
    void SetLiteralColor(Color value);
    bool GetFollowNamedValue() const;
    void SetFollowNamedValue(bool value);
    GParticleAttributeIndex_t GetVectorAttribute() const;
    void SetVectorAttribute(GParticleAttributeIndex_t value);
    Vector GetVectorAttributeScale() const;
    void SetVectorAttributeScale(Vector value);
    int32_t GetControlPoint() const;
    void SetControlPoint(int32_t value);
    int32_t GetDeltaControlPoint() const;
    void SetDeltaControlPoint(int32_t value);
    Vector GetCPValueScale() const;
    void SetCPValueScale(Vector value);
    Vector GetCPRelativePosition() const;
    void SetCPRelativePosition(Vector value);
    Vector GetCPRelativeDir() const;
    void SetCPRelativeDir(Vector value);
    GCParticleFloatInput GetFloatComponentX() const;
    void SetFloatComponentX(GCParticleFloatInput value);
    GCParticleFloatInput GetFloatComponentY() const;
    void SetFloatComponentY(GCParticleFloatInput value);
    GCParticleFloatInput GetFloatComponentZ() const;
    void SetFloatComponentZ(GCParticleFloatInput value);
    GCParticleFloatInput GetFloatInterp() const;
    void SetFloatInterp(GCParticleFloatInput value);
    float GetInterpInput0() const;
    void SetInterpInput0(float value);
    float GetInterpInput1() const;
    void SetInterpInput1(float value);
    Vector GetInterpOutput0() const;
    void SetInterpOutput0(Vector value);
    Vector GetInterpOutput1() const;
    void SetInterpOutput1(Vector value);
    Vector GetRandomMin() const;
    void SetRandomMin(Vector value);
    Vector GetRandomMax() const;
    void SetRandomMax(Vector value);
    GCParticleInput GetParent() const;
    void SetParent(GCParticleInput value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVPhysXConstraintParams_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVPhysXConstraintParams_t(std::string ptr, lua_State* state);
    GVPhysXConstraintParams_t(void *ptr);

    int32_t GetType() const;
    void SetType(int32_t value);
    int32_t GetTranslateMotion() const;
    void SetTranslateMotion(int32_t value);
    int32_t GetRotateMotion() const;
    void SetRotateMotion(int32_t value);
    int32_t GetFlags() const;
    void SetFlags(int32_t value);
    std::vector<Vector> GetAnchor() const;
    void SetAnchor(std::vector<Vector> value);
    float GetMaxForce() const;
    void SetMaxForce(float value);
    float GetMaxTorque() const;
    void SetMaxTorque(float value);
    float GetLinearLimitValue() const;
    void SetLinearLimitValue(float value);
    float GetLinearLimitRestitution() const;
    void SetLinearLimitRestitution(float value);
    float GetLinearLimitSpring() const;
    void SetLinearLimitSpring(float value);
    float GetLinearLimitDamping() const;
    void SetLinearLimitDamping(float value);
    float GetTwistLowLimitValue() const;
    void SetTwistLowLimitValue(float value);
    float GetTwistLowLimitRestitution() const;
    void SetTwistLowLimitRestitution(float value);
    float GetTwistLowLimitSpring() const;
    void SetTwistLowLimitSpring(float value);
    float GetTwistLowLimitDamping() const;
    void SetTwistLowLimitDamping(float value);
    float GetTwistHighLimitValue() const;
    void SetTwistHighLimitValue(float value);
    float GetTwistHighLimitRestitution() const;
    void SetTwistHighLimitRestitution(float value);
    float GetTwistHighLimitSpring() const;
    void SetTwistHighLimitSpring(float value);
    float GetTwistHighLimitDamping() const;
    void SetTwistHighLimitDamping(float value);
    float GetSwing1LimitValue() const;
    void SetSwing1LimitValue(float value);
    float GetSwing1LimitRestitution() const;
    void SetSwing1LimitRestitution(float value);
    float GetSwing1LimitSpring() const;
    void SetSwing1LimitSpring(float value);
    float GetSwing1LimitDamping() const;
    void SetSwing1LimitDamping(float value);
    float GetSwing2LimitValue() const;
    void SetSwing2LimitValue(float value);
    float GetSwing2LimitRestitution() const;
    void SetSwing2LimitRestitution(float value);
    float GetSwing2LimitSpring() const;
    void SetSwing2LimitSpring(float value);
    float GetSwing2LimitDamping() const;
    void SetSwing2LimitDamping(float value);
    Vector GetGoalPosition() const;
    void SetGoalPosition(Vector value);
    Vector GetGoalAngularVelocity() const;
    void SetGoalAngularVelocity(Vector value);
    float GetDriveSpringX() const;
    void SetDriveSpringX(float value);
    float GetDriveSpringY() const;
    void SetDriveSpringY(float value);
    float GetDriveSpringZ() const;
    void SetDriveSpringZ(float value);
    float GetDriveDampingX() const;
    void SetDriveDampingX(float value);
    float GetDriveDampingY() const;
    void SetDriveDampingY(float value);
    float GetDriveDampingZ() const;
    void SetDriveDampingZ(float value);
    float GetDriveSpringTwist() const;
    void SetDriveSpringTwist(float value);
    float GetDriveSpringSwing() const;
    void SetDriveSpringSwing(float value);
    float GetDriveSpringSlerp() const;
    void SetDriveSpringSlerp(float value);
    float GetDriveDampingTwist() const;
    void SetDriveDampingTwist(float value);
    float GetDriveDampingSwing() const;
    void SetDriveDampingSwing(float value);
    float GetDriveDampingSlerp() const;
    void SetDriveDampingSlerp(float value);
    int32_t GetSolverIterationCount() const;
    void SetSolverIterationCount(int32_t value);
    float GetProjectionLinearTolerance() const;
    void SetProjectionLinearTolerance(float value);
    float GetProjectionAngularTolerance() const;
    void SetProjectionAngularTolerance(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMorphRectData
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMorphRectData(std::string ptr, lua_State* state);
    GCMorphRectData(void *ptr);

    int16_t GetXLeftDst() const;
    void SetXLeftDst(int16_t value);
    int16_t GetYTopDst() const;
    void SetYTopDst(int16_t value);
    float GetUWidthSrc() const;
    void SetUWidthSrc(float value);
    float GetVHeightSrc() const;
    void SetVHeightSrc(float value);
    std::vector<GCMorphBundleData> GetBundleDatas() const;
    void SetBundleDatas(std::vector<GCMorphBundleData> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEventServerPollNetworking_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEventServerPollNetworking_t(std::string ptr, lua_State* state);
    GEventServerPollNetworking_t(void *ptr);

    GEventSimulate_t GetParent() const;
    void SetParent(GEventSimulate_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCDspPresetModifierList
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCDspPresetModifierList(std::string ptr, lua_State* state);
    GCDspPresetModifierList(void *ptr);

    std::string GetDspName() const;
    void SetDspName(std::string value);
    std::vector<GCDSPMixgroupModifier> GetModifiers() const;
    void SetModifiers(std::vector<GCDSPMixgroupModifier> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GSkeletonDemoDb_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GSkeletonDemoDb_t(std::string ptr, lua_State* state);
    GSkeletonDemoDb_t(void *ptr);

    std::vector<GSkeletonAnimCapture_t*> GetAnimCaptures() const;
    void SetAnimCaptures(std::vector<GSkeletonAnimCapture_t*> value);
    std::vector<GSkeletonAnimCapture_t> GetCameraTrack() const;
    void SetCameraTrack(std::vector<GSkeletonAnimCapture_t> value);
    float GetRecordingTime() const;
    void SetRecordingTime(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCRenderGroom
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCRenderGroom(std::string ptr, lua_State* state);
    GCRenderGroom(void *ptr);

    std::vector<GRenderHairStrandInfo_t> GetHairs() const;
    void SetHairs(std::vector<GRenderHairStrandInfo_t> value);
    int32_t GetSegmentsPerHairStrand() const;
    void SetSegmentsPerHairStrand(int32_t value);
    int32_t GetGuideHairCount() const;
    void SetGuideHairCount(int32_t value);
    int32_t GetHairCount() const;
    void SetHairCount(int32_t value);
    int32_t GetGroomGroupID() const;
    void SetGroomGroupID(int32_t value);
    int32_t GetAttachBoneIdx() const;
    void SetAttachBoneIdx(int32_t value);
    int32_t GetAttachMeshIdx() const;
    void SetAttachMeshIdx(int32_t value);
    int32_t GetAttachMeshDrawCallIdx() const;
    void SetAttachMeshDrawCallIdx(int32_t value);
    float GetSumOfAllHairLengths() const;
    void SetSumOfAllHairLengths(float value);
    bool GetEnableSimulation() const;
    void SetEnableSimulation(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCUnaryUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCUnaryUpdateNode(std::string ptr, lua_State* state);
    GCUnaryUpdateNode(void *ptr);

    GCAnimUpdateNodeRef GetChildNode() const;
    void SetChildNode(GCAnimUpdateNodeRef value);
    GCAnimUpdateNodeBase GetParent() const;
    void SetParent(GCAnimUpdateNodeBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBlendCurve
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBlendCurve(std::string ptr, lua_State* state);
    GCBlendCurve(void *ptr);

    float GetControlPoint1() const;
    void SetControlPoint1(float value);
    float GetControlPoint2() const;
    void SetControlPoint2(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GChangeAccessorFieldPathIndex_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GChangeAccessorFieldPathIndex_t(std::string ptr, lua_State* state);
    GChangeAccessorFieldPathIndex_t(void *ptr);

    int16_t GetValue() const;
    void SetValue(int16_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeKelagerBend2_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeKelagerBend2_t(std::string ptr, lua_State* state);
    GFeKelagerBend2_t(void *ptr);

    std::vector<float> GetWeight() const;
    void SetWeight(std::vector<float> value);
    float GetHeight0() const;
    void SetHeight0(float value);
    std::vector<uint16_t> GetNode() const;
    void SetNode(std::vector<uint16_t> value);
    uint16_t GetReserved() const;
    void SetReserved(uint16_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMorphSetData
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMorphSetData(std::string ptr, lua_State* state);
    GCMorphSetData(void *ptr);

    int32_t GetWidth() const;
    void SetWidth(int32_t value);
    int32_t GetHeight() const;
    void SetHeight(int32_t value);
    std::vector<MorphBundleType_t> GetBundleTypes() const;
    void SetBundleTypes(std::vector<MorphBundleType_t> value);
    std::vector<GCMorphData> GetMorphDatas() const;
    void SetMorphDatas(std::vector<GCMorphData> value);
    std::vector<GCFlexDesc> GetFlexDesc() const;
    void SetFlexDesc(std::vector<GCFlexDesc> value);
    std::vector<GCFlexController> GetFlexControllers() const;
    void SetFlexControllers(std::vector<GCFlexController> value);
    std::vector<GCFlexRule> GetFlexRules() const;
    void SetFlexRules(std::vector<GCFlexRule> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBinaryUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBinaryUpdateNode(std::string ptr, lua_State* state);
    GCBinaryUpdateNode(void *ptr);

    GCAnimUpdateNodeRef GetChild1() const;
    void SetChild1(GCAnimUpdateNodeRef value);
    GCAnimUpdateNodeRef GetChild2() const;
    void SetChild2(GCAnimUpdateNodeRef value);
    uint64_t GetTimingBehavior() const;
    void SetTimingBehavior(uint64_t value);
    float GetTimingBlend() const;
    void SetTimingBlend(float value);
    bool GetResetChild1() const;
    void SetResetChild1(bool value);
    bool GetResetChild2() const;
    void SetResetChild2(bool value);
    GCAnimUpdateNodeBase GetParent() const;
    void SetParent(GCAnimUpdateNodeBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class Gconstraint_axislimit_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    Gconstraint_axislimit_t(std::string ptr, lua_State* state);
    Gconstraint_axislimit_t(void *ptr);

    float GetMinRotation() const;
    void SetMinRotation(float value);
    float GetMaxRotation() const;
    void SetMaxRotation(float value);
    float GetMotorTargetAngSpeed() const;
    void SetMotorTargetAngSpeed(float value);
    float GetMotorMaxTorque() const;
    void SetMotorMaxTorque(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFuseFunctionIndex_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFuseFunctionIndex_t(std::string ptr, lua_State* state);
    GFuseFunctionIndex_t(void *ptr);

    uint16_t GetValue() const;
    void SetValue(uint16_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCGeneralSpin
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCGeneralSpin(std::string ptr, lua_State* state);
    GCGeneralSpin(void *ptr);

    int32_t GetSpinRateDegrees() const;
    void SetSpinRateDegrees(int32_t value);
    int32_t GetSpinRateMinDegrees() const;
    void SetSpinRateMinDegrees(int32_t value);
    float GetSpinRateStopTime() const;
    void SetSpinRateStopTime(float value);
    GCParticleFunctionOperator GetParent() const;
    void SetParent(GCParticleFunctionOperator value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFeJiggleBone
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFeJiggleBone(std::string ptr, lua_State* state);
    GCFeJiggleBone(void *ptr);

    uint32_t GetFlags() const;
    void SetFlags(uint32_t value);
    float GetLength() const;
    void SetLength(float value);
    float GetTipMass() const;
    void SetTipMass(float value);
    float GetYawStiffness() const;
    void SetYawStiffness(float value);
    float GetYawDamping() const;
    void SetYawDamping(float value);
    float GetPitchStiffness() const;
    void SetPitchStiffness(float value);
    float GetPitchDamping() const;
    void SetPitchDamping(float value);
    float GetAlongStiffness() const;
    void SetAlongStiffness(float value);
    float GetAlongDamping() const;
    void SetAlongDamping(float value);
    float GetAngleLimit() const;
    void SetAngleLimit(float value);
    float GetMinYaw() const;
    void SetMinYaw(float value);
    float GetMaxYaw() const;
    void SetMaxYaw(float value);
    float GetYawFriction() const;
    void SetYawFriction(float value);
    float GetYawBounce() const;
    void SetYawBounce(float value);
    float GetMinPitch() const;
    void SetMinPitch(float value);
    float GetMaxPitch() const;
    void SetMaxPitch(float value);
    float GetPitchFriction() const;
    void SetPitchFriction(float value);
    float GetPitchBounce() const;
    void SetPitchBounce(float value);
    float GetBaseMass() const;
    void SetBaseMass(float value);
    float GetBaseStiffness() const;
    void SetBaseStiffness(float value);
    float GetBaseDamping() const;
    void SetBaseDamping(float value);
    float GetBaseMinLeft() const;
    void SetBaseMinLeft(float value);
    float GetBaseMaxLeft() const;
    void SetBaseMaxLeft(float value);
    float GetBaseLeftFriction() const;
    void SetBaseLeftFriction(float value);
    float GetBaseMinUp() const;
    void SetBaseMinUp(float value);
    float GetBaseMaxUp() const;
    void SetBaseMaxUp(float value);
    float GetBaseUpFriction() const;
    void SetBaseUpFriction(float value);
    float GetBaseMinForward() const;
    void SetBaseMinForward(float value);
    float GetBaseMaxForward() const;
    void SetBaseMaxForward(float value);
    float GetBaseForwardFriction() const;
    void SetBaseForwardFriction(float value);
    float GetRadius0() const;
    void SetRadius0(float value);
    float GetRadius1() const;
    void SetRadius1(float value);
    Vector GetPoint0() const;
    void SetPoint0(Vector value);
    Vector GetPoint1() const;
    void SetPoint1(Vector value);
    uint16_t GetCollisionMask() const;
    void SetCollisionMask(uint16_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCGlowOverlay
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCGlowOverlay(std::string ptr, lua_State* state);
    GCGlowOverlay(void *ptr);

    Vector GetPos() const;
    void SetPos(Vector value);
    bool GetDirectional() const;
    void SetDirectional(bool value);
    Vector GetDirection() const;
    void SetDirection(Vector value);
    bool GetInSky() const;
    void SetInSky(bool value);
    float GetSkyObstructionScale() const;
    void SetSkyObstructionScale(float value);
    std::vector<GCGlowSprite> GetSprites() const;
    void SetSprites(std::vector<GCGlowSprite> value);
    int32_t GetSprites1() const;
    void SetSprites1(int32_t value);
    float GetProxyRadius() const;
    void SetProxyRadius(float value);
    float GetHDRColorScale() const;
    void SetHDRColorScale(float value);
    float GetGlowObstructionScale() const;
    void SetGlowObstructionScale(float value);
    bool GetCacheGlowObstruction() const;
    void SetCacheGlowObstruction(bool value);
    bool GetCacheSkyObstruction() const;
    void SetCacheSkyObstruction(bool value);
    int16_t GetActivated() const;
    void SetActivated(int16_t value);
    uint16_t GetListIndex() const;
    void SetListIndex(uint16_t value);
    int32_t GetQueryHandle() const;
    void SetQueryHandle(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GTextureControls_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GTextureControls_t(std::string ptr, lua_State* state);
    GTextureControls_t(void *ptr);

    GCParticleCollectionRendererFloatInput GetFinalTextureScaleU() const;
    void SetFinalTextureScaleU(GCParticleCollectionRendererFloatInput value);
    GCParticleCollectionRendererFloatInput GetFinalTextureScaleV() const;
    void SetFinalTextureScaleV(GCParticleCollectionRendererFloatInput value);
    GCParticleCollectionRendererFloatInput GetFinalTextureOffsetU() const;
    void SetFinalTextureOffsetU(GCParticleCollectionRendererFloatInput value);
    GCParticleCollectionRendererFloatInput GetFinalTextureOffsetV() const;
    void SetFinalTextureOffsetV(GCParticleCollectionRendererFloatInput value);
    GCParticleCollectionRendererFloatInput GetFinalTextureUVRotation() const;
    void SetFinalTextureUVRotation(GCParticleCollectionRendererFloatInput value);
    GCParticleCollectionRendererFloatInput GetZoomScale() const;
    void SetZoomScale(GCParticleCollectionRendererFloatInput value);
    GCParticleCollectionRendererFloatInput GetDistortion() const;
    void SetDistortion(GCParticleCollectionRendererFloatInput value);
    bool GetRandomizeOffsets() const;
    void SetRandomizeOffsets(bool value);
    bool GetClampUVs() const;
    void SetClampUVs(bool value);
    uint64_t GetPerParticleBlend() const;
    void SetPerParticleBlend(uint64_t value);
    uint64_t GetPerParticleScale() const;
    void SetPerParticleScale(uint64_t value);
    uint64_t GetPerParticleOffsetU() const;
    void SetPerParticleOffsetU(uint64_t value);
    uint64_t GetPerParticleOffsetV() const;
    void SetPerParticleOffsetV(uint64_t value);
    uint64_t GetPerParticleRotation() const;
    void SetPerParticleRotation(uint64_t value);
    uint64_t GetPerParticleZoom() const;
    void SetPerParticleZoom(uint64_t value);
    uint64_t GetPerParticleDistortion() const;
    void SetPerParticleDistortion(uint64_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCParticleModelInput
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCParticleModelInput(std::string ptr, lua_State* state);
    GCParticleModelInput(void *ptr);

    uint64_t GetType() const;
    void SetType(uint64_t value);
    int32_t GetControlPoint() const;
    void SetControlPoint(int32_t value);
    GCParticleInput GetParent() const;
    void SetParent(GCParticleInput value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmPassthroughNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmPassthroughNode(std::string ptr, lua_State* state);
    GCNmPassthroughNode(void *ptr);

    int16_t GetChildNodeIdx() const;
    void SetChildNodeIdx(int16_t value);
    GCNmPoseNode GetParent() const;
    void SetParent(GCNmPoseNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimDecoder
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimDecoder(std::string ptr, lua_State* state);
    GCAnimDecoder(void *ptr);

    int32_t GetVersion() const;
    void SetVersion(int32_t value);
    int32_t GetType() const;
    void SetType(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GNmPercent_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GNmPercent_t(std::string ptr, lua_State* state);
    GNmPercent_t(void *ptr);

    float GetValue() const;
    void SetValue(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEventProfileStorageAvailable_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEventProfileStorageAvailable_t(std::string ptr, lua_State* state);
    GEventProfileStorageAvailable_t(void *ptr);

    int32_t GetSplitScreenSlot() const;
    void SetSplitScreenSlot(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCVoiceContainerBase
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCVoiceContainerBase(std::string ptr, lua_State* state);
    GCVoiceContainerBase(void *ptr);

    bool GetHideAnalyzers() const;
    void SetHideAnalyzers(bool value);
    std::vector<GCVoiceContainerAnalysisBase*> GetAnalysisContainers() const;
    void SetAnalysisContainers(std::vector<GCVoiceContainerAnalysisBase*> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPerParticleVecInput
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPerParticleVecInput(std::string ptr, lua_State* state);
    GCPerParticleVecInput(void *ptr);

    GCParticleVecInput GetParent() const;
    void SetParent(GCParticleVecInput value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBoneMaskUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBoneMaskUpdateNode(std::string ptr, lua_State* state);
    GCBoneMaskUpdateNode(void *ptr);

    int32_t GetWeightListIndex() const;
    void SetWeightListIndex(int32_t value);
    float GetRootMotionBlend() const;
    void SetRootMotionBlend(float value);
    uint64_t GetBlendSpace() const;
    void SetBlendSpace(uint64_t value);
    uint64_t GetFootMotionTiming() const;
    void SetFootMotionTiming(uint64_t value);
    bool GetUseBlendScale() const;
    void SetUseBlendScale(bool value);
    uint64_t GetBlendValueSource() const;
    void SetBlendValueSource(uint64_t value);
    GCAnimParamHandle GetBlendParameter() const;
    void SetBlendParameter(GCAnimParamHandle value);
    GCBinaryUpdateNode GetParent() const;
    void SetParent(GCBinaryUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GConfigIndex
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GConfigIndex(std::string ptr, lua_State* state);
    GConfigIndex(void *ptr);

    uint16_t GetGroup() const;
    void SetGroup(uint16_t value);
    uint16_t GetConfig() const;
    void SetConfig(uint16_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeSimdRodConstraint_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeSimdRodConstraint_t(std::string ptr, lua_State* state);
    GFeSimdRodConstraint_t(void *ptr);

    float Get4MaxDist() const;
    void Set4MaxDist(float value);
    float Get4MinDist() const;
    void Set4MinDist(float value);
    float Get4Weight0() const;
    void Set4Weight0(float value);
    float Get4RelaxationFactor() const;
    void Set4RelaxationFactor(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSSDSMsg_EndFrame
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSSDSMsg_EndFrame(std::string ptr, lua_State* state);
    GCSSDSMsg_EndFrame(void *ptr);

    std::vector<GCSSDSEndFrameViewInfo> GetViews() const;
    void SetViews(std::vector<GCSSDSEndFrameViewInfo> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GSkeletonBoneBounds_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GSkeletonBoneBounds_t(std::string ptr, lua_State* state);
    GSkeletonBoneBounds_t(void *ptr);

    Vector GetCenter() const;
    void SetCenter(Vector value);
    Vector GetSize() const;
    void SetSize(Vector value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCDSPMixgroupModifier
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCDSPMixgroupModifier(std::string ptr, lua_State* state);
    GCDSPMixgroupModifier(void *ptr);

    std::string GetMixgroup() const;
    void SetMixgroup(std::string value);
    float GetModifier() const;
    void SetModifier(float value);
    float GetModifierMin() const;
    void SetModifierMin(float value);
    float GetSourceModifier() const;
    void SetSourceModifier(float value);
    float GetSourceModifierMin() const;
    void SetSourceModifierMin(float value);
    float GetListenerReverbModifierWhenSourceReverbIsActive() const;
    void SetListenerReverbModifierWhenSourceReverbIsActive(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBoneConstraintBase
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBoneConstraintBase(std::string ptr, lua_State* state);
    GCBoneConstraintBase(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEventAdvanceTick_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEventAdvanceTick_t(std::string ptr, lua_State* state);
    GEventAdvanceTick_t(void *ptr);

    int32_t GetCurrentTick() const;
    void SetCurrentTick(int32_t value);
    int32_t GetCurrentTickThisFrame() const;
    void SetCurrentTickThisFrame(int32_t value);
    int32_t GetTotalTicksThisFrame() const;
    void SetTotalTicksThisFrame(int32_t value);
    int32_t GetTotalTicks() const;
    void SetTotalTicks(int32_t value);
    GEventSimulate_t GetParent() const;
    void SetParent(GEventSimulate_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GMotionIndex
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GMotionIndex(std::string ptr, lua_State* state);
    GMotionIndex(void *ptr);

    uint16_t GetGroup() const;
    void SetGroup(uint16_t value);
    uint16_t GetMotion() const;
    void SetMotion(uint16_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimBoneDifference
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimBoneDifference(std::string ptr, lua_State* state);
    GCAnimBoneDifference(void *ptr);

    Vector GetPosError() const;
    void SetPosError(Vector value);
    bool GetHasRotation() const;
    void SetHasRotation(bool value);
    bool GetHasMovement() const;
    void SetHasMovement(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFootDefinition
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFootDefinition(std::string ptr, lua_State* state);
    GCFootDefinition(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    std::string GetAnkleBoneName() const;
    void SetAnkleBoneName(std::string value);
    std::string GetToeBoneName() const;
    void SetToeBoneName(std::string value);
    Vector GetBallOffset() const;
    void SetBallOffset(Vector value);
    Vector GetHeelOffset() const;
    void SetHeelOffset(Vector value);
    float GetFootLength() const;
    void SetFootLength(float value);
    float GetBindPoseDirectionMS() const;
    void SetBindPoseDirectionMS(float value);
    float GetTraceHeight() const;
    void SetTraceHeight(float value);
    float GetTraceRadius() const;
    void SetTraceRadius(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFootCycle
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFootCycle(std::string ptr, lua_State* state);
    GCFootCycle(void *ptr);

    GCCycleBase GetParent() const;
    void SetParent(GCCycleBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMotionDataSet
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMotionDataSet(std::string ptr, lua_State* state);
    GCMotionDataSet(void *ptr);

    std::vector<GCMotionGraphGroup> GetGroups() const;
    void SetGroups(std::vector<GCMotionGraphGroup> value);
    int32_t GetDimensionCount() const;
    void SetDimensionCount(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCVPhysXSurfacePropertiesList
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCVPhysXSurfacePropertiesList(std::string ptr, lua_State* state);
    GCVPhysXSurfacePropertiesList(void *ptr);

    std::vector<GCPhysSurfaceProperties*> GetSurfacePropertiesList() const;
    void SetSurfacePropertiesList(std::vector<GCPhysSurfaceProperties*> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCParticleFunctionEmitter
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCParticleFunctionEmitter(std::string ptr, lua_State* state);
    GCParticleFunctionEmitter(void *ptr);

    int32_t GetEmitterIndex() const;
    void SetEmitterIndex(int32_t value);
    GCParticleFunction GetParent() const;
    void SetParent(GCParticleFunction value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVMixFilterDesc_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVMixFilterDesc_t(std::string ptr, lua_State* state);
    GVMixFilterDesc_t(void *ptr);

    uint64_t GetFilterType() const;
    void SetFilterType(uint64_t value);
    uint64_t GetFilterSlope() const;
    void SetFilterSlope(uint64_t value);
    bool GetEnabled() const;
    void SetEnabled(bool value);
    float GetFldbGain() const;
    void SetFldbGain(float value);
    float GetCutoffFreq() const;
    void SetCutoffFreq(float value);
    float GetQ() const;
    void SetQ(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBaseConstraint
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBaseConstraint(std::string ptr, lua_State* state);
    GCBaseConstraint(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    Vector GetUpVector() const;
    void SetUpVector(Vector value);
    std::vector<GCConstraintSlave> GetSlaves() const;
    void SetSlaves(std::vector<GCConstraintSlave> value);
    std::vector<GCConstraintTarget> GetTargets() const;
    void SetTargets(std::vector<GCConstraintTarget> value);
    GCBoneConstraintBase GetParent() const;
    void SetParent(GCBoneConstraintBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCParticleMassCalculationParameters
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCParticleMassCalculationParameters(std::string ptr, lua_State* state);
    GCParticleMassCalculationParameters(void *ptr);

    uint64_t GetMassMode() const;
    void SetMassMode(uint64_t value);
    GCPerParticleFloatInput GetRadius() const;
    void SetRadius(GCPerParticleFloatInput value);
    GCPerParticleFloatInput GetNominalRadius() const;
    void SetNominalRadius(GCPerParticleFloatInput value);
    GCPerParticleFloatInput GetScale() const;
    void SetScale(GCPerParticleFloatInput value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GAnimParamID
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GAnimParamID(std::string ptr, lua_State* state);
    GAnimParamID(void *ptr);

    uint32_t GetId() const;
    void SetId(uint32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTransitionUpdateData
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTransitionUpdateData(std::string ptr, lua_State* state);
    GCTransitionUpdateData(void *ptr);

    uint32_t GetSrcStateIndex() const;
    void SetSrcStateIndex(uint32_t value);
    uint32_t GetDestStateIndex() const;
    void SetDestStateIndex(uint32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GManifestTestResource_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GManifestTestResource_t(std::string ptr, lua_State* state);
    GManifestTestResource_t(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFootPinningPoseOpFixedData_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFootPinningPoseOpFixedData_t(std::string ptr, lua_State* state);
    GFootPinningPoseOpFixedData_t(void *ptr);

    std::vector<GFootFixedData_t> GetFootInfo() const;
    void SetFootInfo(std::vector<GFootFixedData_t> value);
    float GetBlendTime() const;
    void SetBlendTime(float value);
    float GetLockBreakDistance() const;
    void SetLockBreakDistance(float value);
    float GetMaxLegTwist() const;
    void SetMaxLegTwist(float value);
    int32_t GetHipBoneIndex() const;
    void SetHipBoneIndex(int32_t value);
    bool GetApplyLegTwistLimits() const;
    void SetApplyLegTwistLimits(bool value);
    bool GetApplyFootRotationLimits() const;
    void SetApplyFootRotationLimits(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFootPinningUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFootPinningUpdateNode(std::string ptr, lua_State* state);
    GCFootPinningUpdateNode(void *ptr);

    GFootPinningPoseOpFixedData_t GetPoseOpFixedData() const;
    void SetPoseOpFixedData(GFootPinningPoseOpFixedData_t value);
    uint64_t GetTimingSource() const;
    void SetTimingSource(uint64_t value);
    std::vector<GCAnimParamHandle> GetParams() const;
    void SetParams(std::vector<GCAnimParamHandle> value);
    bool GetResetChild() const;
    void SetResetChild(bool value);
    GCUnaryUpdateNode GetParent() const;
    void SetParent(GCUnaryUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCLeafUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCLeafUpdateNode(std::string ptr, lua_State* state);
    GCLeafUpdateNode(void *ptr);

    GCAnimUpdateNodeBase GetParent() const;
    void SetParent(GCAnimUpdateNodeBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimMotorUpdaterBase
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimMotorUpdaterBase(std::string ptr, lua_State* state);
    GCAnimMotorUpdaterBase(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    bool GetDefault() const;
    void SetDefault(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GRnMesh_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GRnMesh_t(std::string ptr, lua_State* state);
    GRnMesh_t(void *ptr);

    Vector GetMin() const;
    void SetMin(Vector value);
    Vector GetMax() const;
    void SetMax(Vector value);
    std::vector<GRnNode_t> GetNodes() const;
    void SetNodes(std::vector<GRnNode_t> value);
    std::vector<GRnTriangle_t> GetTriangles() const;
    void SetTriangles(std::vector<GRnTriangle_t> value);
    std::vector<GRnWing_t> GetWings() const;
    void SetWings(std::vector<GRnWing_t> value);
    std::vector<uint8> GetMaterials() const;
    void SetMaterials(std::vector<uint8> value);
    Vector GetOrthographicAreas() const;
    void SetOrthographicAreas(Vector value);
    uint32_t GetFlags() const;
    void SetFlags(uint32_t value);
    uint32_t GetDebugFlags() const;
    void SetDebugFlags(uint32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCModelConfigElement
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCModelConfigElement(std::string ptr, lua_State* state);
    GCModelConfigElement(void *ptr);

    std::string GetElementName() const;
    void SetElementName(std::string value);
    std::vector<GCModelConfigElement*> GetNestedElements() const;
    void SetNestedElements(std::vector<GCModelConfigElement*> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVPhysXAggregateData_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVPhysXAggregateData_t(std::string ptr, lua_State* state);
    GVPhysXAggregateData_t(void *ptr);

    uint16_t GetFlags() const;
    void SetFlags(uint16_t value);
    uint16_t GetRefCounter() const;
    void SetRefCounter(uint16_t value);
    std::vector<uint32> GetBonesHash() const;
    void SetBonesHash(std::vector<uint32> value);
    std::vector<CUtlString> GetBoneNames() const;
    void SetBoneNames(std::vector<CUtlString> value);
    std::vector<uint16> GetIndexNames() const;
    void SetIndexNames(std::vector<uint16> value);
    std::vector<uint16> GetIndexHash() const;
    void SetIndexHash(std::vector<uint16> value);
    std::vector<GVPhysXBodyPart_t> GetParts() const;
    void SetParts(std::vector<GVPhysXBodyPart_t> value);
    std::vector<GVPhysXConstraint2_t> GetConstraints2() const;
    void SetConstraints2(std::vector<GVPhysXConstraint2_t> value);
    std::vector<GVPhysXJoint_t> GetJoints() const;
    void SetJoints(std::vector<GVPhysXJoint_t> value);
    GPhysFeModelDesc_t GetFeModel() const;
    void SetFeModel(GPhysFeModelDesc_t value);
    std::vector<uint16> GetBoneParents() const;
    void SetBoneParents(std::vector<uint16> value);
    std::vector<uint32> GetSurfacePropertyHashes() const;
    void SetSurfacePropertyHashes(std::vector<uint32> value);
    std::vector<GVPhysXCollisionAttributes_t> GetCollisionAttributes() const;
    void SetCollisionAttributes(std::vector<GVPhysXCollisionAttributes_t> value);
    std::vector<CUtlString> GetDebugPartNames() const;
    void SetDebugPartNames(std::vector<CUtlString> value);
    std::string GetEmbeddedKeyvalues() const;
    void SetEmbeddedKeyvalues(std::string value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSequenceUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSequenceUpdateNode(std::string ptr, lua_State* state);
    GCSequenceUpdateNode(void *ptr);

    GCParamSpanUpdater GetParamSpans() const;
    void SetParamSpans(GCParamSpanUpdater value);
    std::vector<GTagSpan_t> GetTags() const;
    void SetTags(std::vector<GTagSpan_t> value);
    float GetPlaybackSpeed() const;
    void SetPlaybackSpeed(float value);
    float GetDuration() const;
    void SetDuration(float value);
    bool GetLoop() const;
    void SetLoop(bool value);
    GCLeafUpdateNode GetParent() const;
    void SetParent(GCLeafUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCModelConfigElement_Command
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCModelConfigElement_Command(std::string ptr, lua_State* state);
    GCModelConfigElement_Command(void *ptr);

    std::string GetCommand() const;
    void SetCommand(std::string value);
    GCModelConfigElement GetParent() const;
    void SetParent(GCModelConfigElement value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimParameterBase
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimParameterBase(std::string ptr, lua_State* state);
    GCAnimParameterBase(void *ptr);

    std::string GetComment() const;
    void SetComment(std::string value);
    std::string GetGroup() const;
    void SetGroup(std::string value);
    GAnimParamID GetId() const;
    void SetId(GAnimParamID value);
    std::string GetComponentName() const;
    void SetComponentName(std::string value);
    bool GetNetworkingRequested() const;
    void SetNetworkingRequested(bool value);
    bool GetIsReferenced() const;
    void SetIsReferenced(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCompositeMaterialInputLooseVariable_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCompositeMaterialInputLooseVariable_t(std::string ptr, lua_State* state);
    GCompositeMaterialInputLooseVariable_t(void *ptr);

    std::string GetStrName() const;
    void SetStrName(std::string value);
    bool GetExposeExternally() const;
    void SetExposeExternally(bool value);
    std::string GetStrExposedFriendlyName() const;
    void SetStrExposedFriendlyName(std::string value);
    std::string GetStrExposedFriendlyGroupName() const;
    void SetStrExposedFriendlyGroupName(std::string value);
    bool GetExposedVariableIsFixedRange() const;
    void SetExposedVariableIsFixedRange(bool value);
    std::string GetStrExposedVisibleWhenTrue() const;
    void SetStrExposedVisibleWhenTrue(std::string value);
    std::string GetStrExposedHiddenWhenTrue() const;
    void SetStrExposedHiddenWhenTrue(std::string value);
    uint64_t GetVariableType() const;
    void SetVariableType(uint64_t value);
    bool GetValueBoolean() const;
    void SetValueBoolean(bool value);
    int32_t GetValueIntX() const;
    void SetValueIntX(int32_t value);
    int32_t GetValueIntY() const;
    void SetValueIntY(int32_t value);
    int32_t GetValueIntZ() const;
    void SetValueIntZ(int32_t value);
    int32_t GetValueIntW() const;
    void SetValueIntW(int32_t value);
    bool GetHasFloatBounds() const;
    void SetHasFloatBounds(bool value);
    float GetValueFloatX() const;
    void SetValueFloatX(float value);
    float GetValueFloatX_Min() const;
    void SetValueFloatX_Min(float value);
    float GetValueFloatX_Max() const;
    void SetValueFloatX_Max(float value);
    float GetValueFloatY() const;
    void SetValueFloatY(float value);
    float GetValueFloatY_Min() const;
    void SetValueFloatY_Min(float value);
    float GetValueFloatY_Max() const;
    void SetValueFloatY_Max(float value);
    float GetValueFloatZ() const;
    void SetValueFloatZ(float value);
    float GetValueFloatZ_Min() const;
    void SetValueFloatZ_Min(float value);
    float GetValueFloatZ_Max() const;
    void SetValueFloatZ_Max(float value);
    float GetValueFloatW() const;
    void SetValueFloatW(float value);
    float GetValueFloatW_Min() const;
    void SetValueFloatW_Min(float value);
    float GetValueFloatW_Max() const;
    void SetValueFloatW_Max(float value);
    Color GetCValueColor4() const;
    void SetCValueColor4(Color value);
    uint64_t GetValueSystemVar() const;
    void SetValueSystemVar(uint64_t value);
    std::string GetStrTextureContentAssetPath() const;
    void SetStrTextureContentAssetPath(std::string value);
    std::string GetStrTextureCompilationVtexTemplate() const;
    void SetStrTextureCompilationVtexTemplate(std::string value);
    uint64_t GetTextureType() const;
    void SetTextureType(uint64_t value);
    std::string GetStrString() const;
    void SetStrString(std::string value);
    std::string GetStrPanoramaPanelPath() const;
    void SetStrPanoramaPanelPath(std::string value);
    int32_t GetPanoramaRenderRes() const;
    void SetPanoramaRenderRes(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVecInputMaterialVariable_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVecInputMaterialVariable_t(std::string ptr, lua_State* state);
    GVecInputMaterialVariable_t(void *ptr);

    std::string GetStrVariable() const;
    void SetStrVariable(std::string value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCachedPose
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCachedPose(std::string ptr, lua_State* state);
    GCCachedPose(void *ptr);

    std::vector<float32> GetMorphWeights() const;
    void SetMorphWeights(std::vector<float32> value);
    float GetCycle() const;
    void SetCycle(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimGraphSettingsGroup
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimGraphSettingsGroup(std::string ptr, lua_State* state);
    GCAnimGraphSettingsGroup(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCModelConfig
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCModelConfig(std::string ptr, lua_State* state);
    GCModelConfig(void *ptr);

    std::string GetConfigName() const;
    void SetConfigName(std::string value);
    std::vector<GCModelConfigElement*> GetElements() const;
    void SetElements(std::vector<GCModelConfigElement*> value);
    bool GetTopLevel() const;
    void SetTopLevel(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFootLockPoseOpFixedSettings
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFootLockPoseOpFixedSettings(std::string ptr, lua_State* state);
    GFootLockPoseOpFixedSettings(void *ptr);

    std::vector<GFootFixedData_t> GetFootInfo() const;
    void SetFootInfo(std::vector<GFootFixedData_t> value);
    GCAnimInputDamping GetHipDampingSettings() const;
    void SetHipDampingSettings(GCAnimInputDamping value);
    int32_t GetHipBoneIndex() const;
    void SetHipBoneIndex(int32_t value);
    uint64_t GetIkSolverType() const;
    void SetIkSolverType(uint64_t value);
    bool GetApplyTilt() const;
    void SetApplyTilt(bool value);
    bool GetApplyHipDrop() const;
    void SetApplyHipDrop(bool value);
    bool GetAlwaysUseFallbackHinge() const;
    void SetAlwaysUseFallbackHinge(bool value);
    bool GetApplyFootRotationLimits() const;
    void SetApplyFootRotationLimits(bool value);
    bool GetApplyLegTwistLimits() const;
    void SetApplyLegTwistLimits(bool value);
    float GetMaxFootHeight() const;
    void SetMaxFootHeight(float value);
    float GetExtensionScale() const;
    void SetExtensionScale(float value);
    float GetMaxLegTwist() const;
    void SetMaxLegTwist(float value);
    bool GetEnableLockBreaking() const;
    void SetEnableLockBreaking(bool value);
    float GetLockBreakTolerance() const;
    void SetLockBreakTolerance(float value);
    float GetLockBlendTime() const;
    void SetLockBlendTime(float value);
    bool GetEnableStretching() const;
    void SetEnableStretching(bool value);
    float GetMaxStretchAmount() const;
    void SetMaxStretchAmount(float value);
    float GetStretchExtensionScale() const;
    void SetStretchExtensionScale(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFlexRule
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFlexRule(std::string ptr, lua_State* state);
    GCFlexRule(void *ptr);

    int32_t GetFlex() const;
    void SetFlex(int32_t value);
    std::vector<GCFlexOp> GetFlexOps() const;
    void SetFlexOps(std::vector<GCFlexOp> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSosGroupActionSetSoundeventParameterSchema
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSosGroupActionSetSoundeventParameterSchema(std::string ptr, lua_State* state);
    GCSosGroupActionSetSoundeventParameterSchema(void *ptr);

    int32_t GetMaxCount() const;
    void SetMaxCount(int32_t value);
    float GetMinValue() const;
    void SetMinValue(float value);
    float GetMaxValue() const;
    void SetMaxValue(float value);
    std::string GetOpvarName() const;
    void SetOpvarName(std::string value);
    uint64_t GetSortType() const;
    void SetSortType(uint64_t value);
    GCSosGroupActionSchema GetParent() const;
    void SetParent(GCSosGroupActionSchema value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCStepsRemainingMetricEvaluator
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCStepsRemainingMetricEvaluator(std::string ptr, lua_State* state);
    GCStepsRemainingMetricEvaluator(void *ptr);

    std::vector<int32> GetFootIndices() const;
    void SetFootIndices(std::vector<int32> value);
    float GetMinStepsRemaining() const;
    void SetMinStepsRemaining(float value);
    GCMotionMetricEvaluator GetParent() const;
    void SetParent(GCMotionMetricEvaluator value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GNmCompressionSettings_t__QuantizationRange_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GNmCompressionSettings_t__QuantizationRange_t(std::string ptr, lua_State* state);
    GNmCompressionSettings_t__QuantizationRange_t(void *ptr);

    float GetRangeStart() const;
    void SetRangeStart(float value);
    float GetRangeLength() const;
    void SetRangeLength(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimParameterManagerUpdater
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimParameterManagerUpdater(std::string ptr, lua_State* state);
    GCAnimParameterManagerUpdater(void *ptr);

    std::vector<GCAnimParamHandle> GetIndexToHandle() const;
    void SetIndexToHandle(std::vector<GCAnimParamHandle> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCModelConfigElement_RandomColor
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCModelConfigElement_RandomColor(std::string ptr, lua_State* state);
    GCModelConfigElement_RandomColor(void *ptr);

    GCModelConfigElement GetParent() const;
    void SetParent(GCModelConfigElement value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMotionNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMotionNode(std::string ptr, lua_State* state);
    GCMotionNode(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    GAnimNodeID GetId() const;
    void SetId(GAnimNodeID value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimTagBase
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimTagBase(std::string ptr, lua_State* state);
    GCAnimTagBase(void *ptr);

    std::string GetComment() const;
    void SetComment(std::string value);
    GAnimTagID GetTagID() const;
    void SetTagID(GAnimTagID value);
    bool GetIsReferenced() const;
    void SetIsReferenced(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GAnimComponentID
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GAnimComponentID(std::string ptr, lua_State* state);
    GAnimComponentID(void *ptr);

    uint32_t GetId() const;
    void SetId(uint32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimLocalHierarchy
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimLocalHierarchy(std::string ptr, lua_State* state);
    GCAnimLocalHierarchy(void *ptr);

    int32_t GetStartFrame() const;
    void SetStartFrame(int32_t value);
    int32_t GetPeakFrame() const;
    void SetPeakFrame(int32_t value);
    int32_t GetTailFrame() const;
    void SetTailFrame(int32_t value);
    int32_t GetEndFrame() const;
    void SetEndFrame(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GRnShapeDesc_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GRnShapeDesc_t(std::string ptr, lua_State* state);
    GRnShapeDesc_t(void *ptr);

    uint32_t GetCollisionAttributeIndex() const;
    void SetCollisionAttributeIndex(uint32_t value);
    uint32_t GetSurfacePropertyIndex() const;
    void SetSurfacePropertyIndex(uint32_t value);
    std::string GetUserFriendlyName() const;
    void SetUserFriendlyName(std::string value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBoneConstraintPoseSpaceBone__Input_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBoneConstraintPoseSpaceBone__Input_t(std::string ptr, lua_State* state);
    GCBoneConstraintPoseSpaceBone__Input_t(void *ptr);

    Vector GetInputValue() const;
    void SetInputValue(Vector value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCModelConfigElement_SetRenderColor
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCModelConfigElement_SetRenderColor(std::string ptr, lua_State* state);
    GCModelConfigElement_SetRenderColor(void *ptr);

    Color GetColor() const;
    void SetColor(Color value);
    GCModelConfigElement GetParent() const;
    void SetParent(GCModelConfigElement value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GPhysSoftbodyDesc_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GPhysSoftbodyDesc_t(std::string ptr, lua_State* state);
    GPhysSoftbodyDesc_t(void *ptr);

    std::vector<uint32> GetParticleBoneHash() const;
    void SetParticleBoneHash(std::vector<uint32> value);
    std::vector<GRnSoftbodyParticle_t> GetParticles() const;
    void SetParticles(std::vector<GRnSoftbodyParticle_t> value);
    std::vector<GRnSoftbodySpring_t> GetSprings() const;
    void SetSprings(std::vector<GRnSoftbodySpring_t> value);
    std::vector<GRnSoftbodyCapsule_t> GetCapsules() const;
    void SetCapsules(std::vector<GRnSoftbodyCapsule_t> value);
    std::vector<CUtlString> GetParticleBoneName() const;
    void SetParticleBoneName(std::vector<CUtlString> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVMapResourceData_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVMapResourceData_t(std::string ptr, lua_State* state);
    GVMapResourceData_t(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeCtrlSoftOffset_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeCtrlSoftOffset_t(std::string ptr, lua_State* state);
    GFeCtrlSoftOffset_t(void *ptr);

    uint16_t GetCtrlParent() const;
    void SetCtrlParent(uint16_t value);
    uint16_t GetCtrlChild() const;
    void SetCtrlChild(uint16_t value);
    Vector GetOffset() const;
    void SetOffset(Vector value);
    float GetAlpha() const;
    void SetAlpha(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMorphBundleData
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMorphBundleData(std::string ptr, lua_State* state);
    GCMorphBundleData(void *ptr);

    float GetULeftSrc() const;
    void SetULeftSrc(float value);
    float GetVTopSrc() const;
    void SetVTopSrc(float value);
    std::vector<float32> GetOffsets() const;
    void SetOffsets(std::vector<float32> value);
    std::vector<float32> GetRanges() const;
    void SetRanges(std::vector<float32> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmBoneMask
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmBoneMask(std::string ptr, lua_State* state);
    GCNmBoneMask(void *ptr);

    GCNmBoneMask GetWeightInfo() const;
    void SetWeightInfo(GCNmBoneMask value);
    std::vector<float32> GetWeights() const;
    void SetWeights(std::vector<float32> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAudioEmphasisSample
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAudioEmphasisSample(std::string ptr, lua_State* state);
    GCAudioEmphasisSample(void *ptr);

    float GetTime() const;
    void SetTime(float value);
    float GetValue() const;
    void SetValue(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmFrameSnapEvent
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmFrameSnapEvent(std::string ptr, lua_State* state);
    GCNmFrameSnapEvent(void *ptr);

    uint64_t GetFrameSnapMode() const;
    void SetFrameSnapMode(uint64_t value);
    GCNmEvent GetParent() const;
    void SetParent(GCNmEvent value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCJumpHelperUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCJumpHelperUpdateNode(std::string ptr, lua_State* state);
    GCJumpHelperUpdateNode(void *ptr);

    GCAnimParamHandle GetTargetParam() const;
    void SetTargetParam(GCAnimParamHandle value);
    Vector GetOriginalJumpMovement() const;
    void SetOriginalJumpMovement(Vector value);
    float GetOriginalJumpDuration() const;
    void SetOriginalJumpDuration(float value);
    float GetJumpStartCycle() const;
    void SetJumpStartCycle(float value);
    float GetJumpEndCycle() const;
    void SetJumpEndCycle(float value);
    uint64_t GetCorrectionMethod() const;
    void SetCorrectionMethod(uint64_t value);
    std::vector<bool> GetTranslationAxis() const;
    void SetTranslationAxis(std::vector<bool> value);
    bool GetScaleSpeed() const;
    void SetScaleSpeed(bool value);
    GCSequenceUpdateNode GetParent() const;
    void SetParent(GCSequenceUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GSolveIKChainPoseOpFixedSettings_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GSolveIKChainPoseOpFixedSettings_t(std::string ptr, lua_State* state);
    GSolveIKChainPoseOpFixedSettings_t(void *ptr);

    std::vector<GChainToSolveData_t> GetChainsToSolveData() const;
    void SetChainsToSolveData(std::vector<GChainToSolveData_t> value);
    bool GetMatchTargetOrientation() const;
    void SetMatchTargetOrientation(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMaterialAttributeAnimTag
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMaterialAttributeAnimTag(std::string ptr, lua_State* state);
    GCMaterialAttributeAnimTag(void *ptr);

    std::string GetAttributeName() const;
    void SetAttributeName(std::string value);
    uint64_t GetAttributeType() const;
    void SetAttributeType(uint64_t value);
    float GetValue() const;
    void SetValue(float value);
    Color GetColor() const;
    void SetColor(Color value);
    GCAnimTagBase GetParent() const;
    void SetParent(GCAnimTagBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimComponentUpdater
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimComponentUpdater(std::string ptr, lua_State* state);
    GCAnimComponentUpdater(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    GAnimComponentID GetId() const;
    void SetId(GAnimComponentID value);
    uint64_t GetNetworkMode() const;
    void SetNetworkMode(uint64_t value);
    bool GetStartEnabled() const;
    void SetStartEnabled(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCReplicationParameters
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCReplicationParameters(std::string ptr, lua_State* state);
    GCReplicationParameters(void *ptr);

    uint64_t GetReplicationMode() const;
    void SetReplicationMode(uint64_t value);
    bool GetScaleChildParticleRadii() const;
    void SetScaleChildParticleRadii(bool value);
    GCParticleCollectionFloatInput GetMinRandomRadiusScale() const;
    void SetMinRandomRadiusScale(GCParticleCollectionFloatInput value);
    GCParticleCollectionFloatInput GetMaxRandomRadiusScale() const;
    void SetMaxRandomRadiusScale(GCParticleCollectionFloatInput value);
    GCParticleCollectionFloatInput GetModellingScale() const;
    void SetModellingScale(GCParticleCollectionFloatInput value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVMixEnvelopeDesc_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVMixEnvelopeDesc_t(std::string ptr, lua_State* state);
    GVMixEnvelopeDesc_t(void *ptr);

    float GetAttackTimeMS() const;
    void SetAttackTimeMS(float value);
    float GetHoldTimeMS() const;
    void SetHoldTimeMS(float value);
    float GetReleaseTimeMS() const;
    void SetReleaseTimeMS(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmValueNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmValueNode(std::string ptr, lua_State* state);
    GCNmValueNode(void *ptr);

    GCNmGraphNode GetParent() const;
    void SetParent(GCNmGraphNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFollowPathUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFollowPathUpdateNode(std::string ptr, lua_State* state);
    GCFollowPathUpdateNode(void *ptr);

    float GetBlendOutTime() const;
    void SetBlendOutTime(float value);
    bool GetBlockNonPathMovement() const;
    void SetBlockNonPathMovement(bool value);
    bool GetStopFeetAtGoal() const;
    void SetStopFeetAtGoal(bool value);
    bool GetScaleSpeed() const;
    void SetScaleSpeed(bool value);
    float GetScale() const;
    void SetScale(float value);
    float GetMinAngle() const;
    void SetMinAngle(float value);
    float GetMaxAngle() const;
    void SetMaxAngle(float value);
    float GetSpeedScaleBlending() const;
    void SetSpeedScaleBlending(float value);
    GCAnimInputDamping GetTurnDamping() const;
    void SetTurnDamping(GCAnimInputDamping value);
    uint64_t GetFacingTarget() const;
    void SetFacingTarget(uint64_t value);
    GCAnimParamHandle GetParam() const;
    void SetParam(GCAnimParamHandle value);
    float GetTurnToFaceOffset() const;
    void SetTurnToFaceOffset(float value);
    bool GetTurnToFace() const;
    void SetTurnToFace(bool value);
    GCUnaryUpdateNode GetParent() const;
    void SetParent(GCUnaryUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEventClientPostSimulate_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEventClientPostSimulate_t(std::string ptr, lua_State* state);
    GEventClientPostSimulate_t(void *ptr);

    GEventSimulate_t GetParent() const;
    void SetParent(GEventSimulate_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GAABB_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GAABB_t(std::string ptr, lua_State* state);
    GAABB_t(void *ptr);

    Vector GetMinBounds() const;
    void SetMinBounds(Vector value);
    Vector GetMaxBounds() const;
    void SetMaxBounds(Vector value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeNodeBase_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeNodeBase_t(std::string ptr, lua_State* state);
    GFeNodeBase_t(void *ptr);

    uint16_t GetNode() const;
    void SetNode(uint16_t value);
    std::vector<uint16_t> GetDummy() const;
    void SetDummy(std::vector<uint16_t> value);
    uint16_t GetNodeX0() const;
    void SetNodeX0(uint16_t value);
    uint16_t GetNodeX1() const;
    void SetNodeX1(uint16_t value);
    uint16_t GetNodeY0() const;
    void SetNodeY0(uint16_t value);
    uint16_t GetNodeY1() const;
    void SetNodeY1(uint16_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GModelBoneFlexDriverControl_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GModelBoneFlexDriverControl_t(std::string ptr, lua_State* state);
    GModelBoneFlexDriverControl_t(void *ptr);

    uint64_t GetBoneComponent() const;
    void SetBoneComponent(uint64_t value);
    std::string GetFlexController() const;
    void SetFlexController(std::string value);
    uint32_t GetFlexControllerToken() const;
    void SetFlexControllerToken(uint32_t value);
    float GetMin() const;
    void SetMin(float value);
    float GetMax() const;
    void SetMax(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GPostProcessingVignetteParameters_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GPostProcessingVignetteParameters_t(std::string ptr, lua_State* state);
    GPostProcessingVignetteParameters_t(void *ptr);

    float GetVignetteStrength() const;
    void SetVignetteStrength(float value);
    Vector2D GetCenter() const;
    void SetCenter(Vector2D value);
    float GetRadius() const;
    void SetRadius(float value);
    float GetRoundness() const;
    void SetRoundness(float value);
    float GetFeather() const;
    void SetFeather(float value);
    Vector GetColorTint() const;
    void SetColorTint(Vector value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GConstantInfo_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GConstantInfo_t(std::string ptr, lua_State* state);
    GConstantInfo_t(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    uint32_t GetNameToken() const;
    void SetNameToken(uint32_t value);
    float GetValue() const;
    void SetValue(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFuseVariableIndex_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFuseVariableIndex_t(std::string ptr, lua_State* state);
    GFuseVariableIndex_t(void *ptr);

    uint16_t GetValue() const;
    void SetValue(uint16_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GIParticleEffect
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GIParticleEffect(std::string ptr, lua_State* state);
    GIParticleEffect(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCStopAtGoalUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCStopAtGoalUpdateNode(std::string ptr, lua_State* state);
    GCStopAtGoalUpdateNode(void *ptr);

    float GetOuterRadius() const;
    void SetOuterRadius(float value);
    float GetInnerRadius() const;
    void SetInnerRadius(float value);
    float GetMaxScale() const;
    void SetMaxScale(float value);
    float GetMinScale() const;
    void SetMinScale(float value);
    GCAnimInputDamping GetDamping() const;
    void SetDamping(GCAnimInputDamping value);
    GCUnaryUpdateNode GetParent() const;
    void SetParent(GCUnaryUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSequenceGroupData
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSequenceGroupData(std::string ptr, lua_State* state);
    GCSequenceGroupData(void *ptr);

    uint32_t GetFlags() const;
    void SetFlags(uint32_t value);
    std::vector<GCSeqS1SeqDesc> GetLocalS1SeqDescArray() const;
    void SetLocalS1SeqDescArray(std::vector<GCSeqS1SeqDesc> value);
    std::vector<GCSeqS1SeqDesc> GetLocalMultiSeqDescArray() const;
    void SetLocalMultiSeqDescArray(std::vector<GCSeqS1SeqDesc> value);
    std::vector<GCSeqSynthAnimDesc> GetLocalSynthAnimDescArray() const;
    void SetLocalSynthAnimDescArray(std::vector<GCSeqSynthAnimDesc> value);
    std::vector<GCSeqCmdSeqDesc> GetLocalCmdSeqDescArray() const;
    void SetLocalCmdSeqDescArray(std::vector<GCSeqCmdSeqDesc> value);
    std::vector<GCSeqBoneMaskList> GetLocalBoneMaskArray() const;
    void SetLocalBoneMaskArray(std::vector<GCSeqBoneMaskList> value);
    std::vector<GCSeqScaleSet> GetLocalScaleSetArray() const;
    void SetLocalScaleSetArray(std::vector<GCSeqScaleSet> value);
    std::vector<GCSeqPoseParamDesc> GetLocalPoseParamArray() const;
    void SetLocalPoseParamArray(std::vector<GCSeqPoseParamDesc> value);
    std::vector<GCSeqIKLock> GetLocalIKAutoplayLockArray() const;
    void SetLocalIKAutoplayLockArray(std::vector<GCSeqIKLock> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GParticleNamedValueConfiguration_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GParticleNamedValueConfiguration_t(std::string ptr, lua_State* state);
    GParticleNamedValueConfiguration_t(void *ptr);

    std::string GetConfigName() const;
    void SetConfigName(std::string value);
    uint64_t GetAttachType() const;
    void SetAttachType(uint64_t value);
    std::string GetBoundEntityPath() const;
    void SetBoundEntityPath(std::string value);
    std::string GetStrEntityScope() const;
    void SetStrEntityScope(std::string value);
    std::string GetStrAttachmentName() const;
    void SetStrAttachmentName(std::string value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimSkeleton
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimSkeleton(std::string ptr, lua_State* state);
    GCAnimSkeleton(void *ptr);

    std::vector<CUtlString> GetBoneNames() const;
    void SetBoneNames(std::vector<CUtlString> value);
    std::vector<int32> GetParents() const;
    void SetParents(std::vector<int32> value);
    std::vector<GCAnimFoot> GetFeet() const;
    void SetFeet(std::vector<GCAnimFoot> value);
    std::vector<CUtlString> GetMorphNames() const;
    void SetMorphNames(std::vector<CUtlString> value);
    std::vector<int32> GetLodBoneCounts() const;
    void SetLodBoneCounts(std::vector<int32> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimationGraphVisualizerPrimitiveBase
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimationGraphVisualizerPrimitiveBase(std::string ptr, lua_State* state);
    GCAnimationGraphVisualizerPrimitiveBase(void *ptr);

    uint64_t GetType() const;
    void SetType(uint64_t value);
    std::vector<GAnimNodeID> GetOwningAnimNodePaths() const;
    void SetOwningAnimNodePaths(std::vector<GAnimNodeID> value);
    int32_t GetOwningAnimNodePathCount() const;
    void SetOwningAnimNodePathCount(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBodyGroupAnimTag
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBodyGroupAnimTag(std::string ptr, lua_State* state);
    GCBodyGroupAnimTag(void *ptr);

    int32_t GetPriority() const;
    void SetPriority(int32_t value);
    std::vector<GCBodyGroupSetting> GetBodyGroupSettings() const;
    void SetBodyGroupSettings(std::vector<GCBodyGroupSetting> value);
    GCAnimTagBase GetParent() const;
    void SetParent(GCAnimTagBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeAxialEdgeBend_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeAxialEdgeBend_t(std::string ptr, lua_State* state);
    GFeAxialEdgeBend_t(void *ptr);

    float GetTe() const;
    void SetTe(float value);
    float GetTv() const;
    void SetTv(float value);
    float GetDist() const;
    void SetDist(float value);
    std::vector<float> GetWeight() const;
    void SetWeight(std::vector<float> value);
    std::vector<uint16_t> GetNode() const;
    void SetNode(std::vector<uint16_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GParamSpanSample_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GParamSpanSample_t(std::string ptr, lua_State* state);
    GParamSpanSample_t(void *ptr);

    float GetCycle() const;
    void SetCycle(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFunctionInfo_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFunctionInfo_t(std::string ptr, lua_State* state);
    GFunctionInfo_t(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    uint32_t GetNameToken() const;
    void SetNameToken(uint32_t value);
    int32_t GetParamCount() const;
    void SetParamCount(int32_t value);
    GFuseFunctionIndex_t GetIndex() const;
    void SetIndex(GFuseFunctionIndex_t value);
    bool GetIsPure() const;
    void SetIsPure(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFourQuaternions
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFourQuaternions(std::string ptr, lua_State* state);
    GFourQuaternions(void *ptr);

    float GetX() const;
    void SetX(float value);
    float GetY() const;
    void SetY(float value);
    float GetZ() const;
    void SetZ(float value);
    float GetW() const;
    void SetW(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GSkeletonAnimCapture_t__FrameStamp_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GSkeletonAnimCapture_t__FrameStamp_t(std::string ptr, lua_State* state);
    GSkeletonAnimCapture_t__FrameStamp_t(void *ptr);

    float GetTime() const;
    void SetTime(float value);
    float GetEntitySimTime() const;
    void SetEntitySimTime(float value);
    bool GetTeleportTick() const;
    void SetTeleportTick(bool value);
    bool GetPredicted() const;
    void SetPredicted(bool value);
    float GetCurTime() const;
    void SetCurTime(float value);
    float GetRealTime() const;
    void SetRealTime(float value);
    int32_t GetFrameCount() const;
    void SetFrameCount(int32_t value);
    int32_t GetTickCount() const;
    void SetTickCount(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSeqAutoLayerFlag
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSeqAutoLayerFlag(std::string ptr, lua_State* state);
    GCSeqAutoLayerFlag(void *ptr);

    bool GetPost() const;
    void SetPost(bool value);
    bool GetSpline() const;
    void SetSpline(bool value);
    bool GetXFade() const;
    void SetXFade(bool value);
    bool GetNoBlend() const;
    void SetNoBlend(bool value);
    bool GetLocal() const;
    void SetLocal(bool value);
    bool GetPose() const;
    void SetPose(bool value);
    bool GetFetchFrame() const;
    void SetFetchFrame(bool value);
    bool GetSubtract() const;
    void SetSubtract(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GParamSpan_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GParamSpan_t(std::string ptr, lua_State* state);
    GParamSpan_t(void *ptr);

    std::vector<GParamSpanSample_t> GetSamples() const;
    void SetSamples(std::vector<GParamSpanSample_t> value);
    GCAnimParamHandle GetParam() const;
    void SetParam(GCAnimParamHandle value);
    uint64_t GetParamType() const;
    void SetParamType(uint64_t value);
    float GetStartCycle() const;
    void SetStartCycle(float value);
    float GetEndCycle() const;
    void SetEndCycle(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmBoolValueNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmBoolValueNode(std::string ptr, lua_State* state);
    GCNmBoolValueNode(void *ptr);

    GCNmValueNode GetParent() const;
    void SetParent(GCNmValueNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GRenderInputLayoutField_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GRenderInputLayoutField_t(std::string ptr, lua_State* state);
    GRenderInputLayoutField_t(void *ptr);

    std::vector<uint32_t> GetSemanticName() const;
    void SetSemanticName(std::vector<uint32_t> value);
    int32_t GetSemanticIndex() const;
    void SetSemanticIndex(int32_t value);
    uint32_t GetFormat() const;
    void SetFormat(uint32_t value);
    int32_t GetOffset() const;
    void SetOffset(int32_t value);
    int32_t GetSlot() const;
    void SetSlot(int32_t value);
    uint64_t GetSlotType() const;
    void SetSlotType(uint64_t value);
    int32_t GetInstanceStepRate() const;
    void SetInstanceStepRate(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCPPScriptComponentUpdater
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCPPScriptComponentUpdater(std::string ptr, lua_State* state);
    GCCPPScriptComponentUpdater(void *ptr);

    GCAnimComponentUpdater GetParent() const;
    void SetParent(GCAnimComponentUpdater value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCDampedValueComponentUpdater
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCDampedValueComponentUpdater(std::string ptr, lua_State* state);
    GCDampedValueComponentUpdater(void *ptr);

    std::vector<GCDampedValueUpdateItem> GetItems() const;
    void SetItems(std::vector<GCDampedValueUpdateItem> value);
    GCAnimComponentUpdater GetParent() const;
    void SetParent(GCAnimComponentUpdater value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSeqPoseSetting
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSeqPoseSetting(std::string ptr, lua_State* state);
    GCSeqPoseSetting(void *ptr);

    float GetValue() const;
    void SetValue(float value);
    bool GetX() const;
    void SetX(bool value);
    bool GetY() const;
    void SetY(bool value);
    bool GetZ() const;
    void SetZ(bool value);
    int32_t GetType() const;
    void SetType(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GRenderHairStrandInfo_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GRenderHairStrandInfo_t(std::string ptr, lua_State* state);
    GRenderHairStrandInfo_t(void *ptr);

    std::vector<uint32_t> GetGuideHairIndices_nSurfaceTriIndex() const;
    void SetGuideHairIndices_nSurfaceTriIndex(std::vector<uint32_t> value);
    std::vector<uint16_t> GetGuideBary_vBaseBary() const;
    void SetGuideBary_vBaseBary(std::vector<uint16_t> value);
    std::vector<uint16_t> GetRootOffset_flLengthScale() const;
    void SetRootOffset_flLengthScale(std::vector<uint16_t> value);
    std::vector<uint16_t> GetPackedBaseUv() const;
    void SetPackedBaseUv(std::vector<uint16_t> value);
    uint32_t GetPackedSurfaceNormalOs() const;
    void SetPackedSurfaceNormalOs(uint32_t value);
    uint32_t GetPackedSurfaceTangentOs() const;
    void SetPackedSurfaceTangentOs(uint32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCExampleSchemaVData_Monomorphic
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCExampleSchemaVData_Monomorphic(std::string ptr, lua_State* state);
    GCExampleSchemaVData_Monomorphic(void *ptr);

    int32_t GetExample1() const;
    void SetExample1(int32_t value);
    int32_t GetExample2() const;
    void SetExample2(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPlayerSprayDecalRenderHelper
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPlayerSprayDecalRenderHelper(std::string ptr, lua_State* state);
    GCPlayerSprayDecalRenderHelper(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeTaperedCapsuleRigid_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeTaperedCapsuleRigid_t(std::string ptr, lua_State* state);
    GFeTaperedCapsuleRigid_t(void *ptr);

    std::vector<float> GetSphere() const;
    void SetSphere(std::vector<float> value);
    uint16_t GetNode() const;
    void SetNode(uint16_t value);
    uint16_t GetCollisionMask() const;
    void SetCollisionMask(uint16_t value);
    uint16_t GetVertexMapIndex() const;
    void SetVertexMapIndex(uint16_t value);
    uint16_t GetFlags() const;
    void SetFlags(uint16_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCChoiceUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCChoiceUpdateNode(std::string ptr, lua_State* state);
    GCChoiceUpdateNode(void *ptr);

    std::vector<GCAnimUpdateNodeRef> GetChildren() const;
    void SetChildren(std::vector<GCAnimUpdateNodeRef> value);
    std::vector<float32> GetWeights() const;
    void SetWeights(std::vector<float32> value);
    std::vector<float32> GetBlendTimes() const;
    void SetBlendTimes(std::vector<float32> value);
    uint64_t GetChoiceMethod() const;
    void SetChoiceMethod(uint64_t value);
    uint64_t GetChoiceChangeMethod() const;
    void SetChoiceChangeMethod(uint64_t value);
    uint64_t GetBlendMethod() const;
    void SetBlendMethod(uint64_t value);
    float GetBlendTime() const;
    void SetBlendTime(float value);
    bool GetCrossFade() const;
    void SetCrossFade(bool value);
    bool GetResetChosen() const;
    void SetResetChosen(bool value);
    bool GetDontResetSameSelection() const;
    void SetDontResetSameSelection(bool value);
    GCAnimUpdateNodeBase GetParent() const;
    void SetParent(GCAnimUpdateNodeBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GIKSolverSettings_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GIKSolverSettings_t(std::string ptr, lua_State* state);
    GIKSolverSettings_t(void *ptr);

    uint64_t GetSolverType() const;
    void SetSolverType(uint64_t value);
    int32_t GetNumIterations() const;
    void SetNumIterations(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmLayerBlendNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmLayerBlendNode(std::string ptr, lua_State* state);
    GCNmLayerBlendNode(void *ptr);

    int16_t GetBaseNodeIdx() const;
    void SetBaseNodeIdx(int16_t value);
    bool GetOnlySampleBaseRootMotion() const;
    void SetOnlySampleBaseRootMotion(bool value);
    GCNmPoseNode GetParent() const;
    void SetParent(GCNmPoseNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCRandomNumberGeneratorParameters
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCRandomNumberGeneratorParameters(std::string ptr, lua_State* state);
    GCRandomNumberGeneratorParameters(void *ptr);

    bool GetDistributeEvenly() const;
    void SetDistributeEvenly(bool value);
    int32_t GetSeed() const;
    void SetSeed(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GAnimationDecodeDebugDumpElement_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GAnimationDecodeDebugDumpElement_t(std::string ptr, lua_State* state);
    GAnimationDecodeDebugDumpElement_t(void *ptr);

    int32_t GetEntityIndex() const;
    void SetEntityIndex(int32_t value);
    std::string GetModelName() const;
    void SetModelName(std::string value);
    std::vector<CUtlString> GetPoseParams() const;
    void SetPoseParams(std::vector<CUtlString> value);
    std::vector<CUtlString> GetDecodeOps() const;
    void SetDecodeOps(std::vector<CUtlString> value);
    std::vector<CUtlString> GetInternalOps() const;
    void SetInternalOps(std::vector<CUtlString> value);
    std::vector<CUtlString> GetDecodedAnims() const;
    void SetDecodedAnims(std::vector<CUtlString> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmFloatValueNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmFloatValueNode(std::string ptr, lua_State* state);
    GCNmFloatValueNode(void *ptr);

    GCNmValueNode GetParent() const;
    void SetParent(GCNmValueNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSSDSMsg_LayerBase
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSSDSMsg_LayerBase(std::string ptr, lua_State* state);
    GCSSDSMsg_LayerBase(void *ptr);

    GSceneViewId_t GetViewId() const;
    void SetViewId(GSceneViewId_t value);
    std::string GetViewName() const;
    void SetViewName(std::string value);
    int32_t GetLayerIndex() const;
    void SetLayerIndex(int32_t value);
    uint64_t GetLayerId() const;
    void SetLayerId(uint64_t value);
    std::string GetLayerName() const;
    void SetLayerName(std::string value);
    std::string GetDisplayText() const;
    void SetDisplayText(std::string value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSosGroupActionSoundeventClusterSchema
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSosGroupActionSoundeventClusterSchema(std::string ptr, lua_State* state);
    GCSosGroupActionSoundeventClusterSchema(void *ptr);

    int32_t GetMinNearby() const;
    void SetMinNearby(int32_t value);
    float GetClusterEpsilon() const;
    void SetClusterEpsilon(float value);
    std::string GetShouldPlayOpvar() const;
    void SetShouldPlayOpvar(std::string value);
    std::string GetShouldPlayClusterChild() const;
    void SetShouldPlayClusterChild(std::string value);
    std::string GetClusterSizeOpvar() const;
    void SetClusterSizeOpvar(std::string value);
    std::string GetGroupBoundingBoxMinsOpvar() const;
    void SetGroupBoundingBoxMinsOpvar(std::string value);
    std::string GetGroupBoundingBoxMaxsOpvar() const;
    void SetGroupBoundingBoxMaxsOpvar(std::string value);
    GCSosGroupActionSchema GetParent() const;
    void SetParent(GCSosGroupActionSchema value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimationGraphVisualizerAxis
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimationGraphVisualizerAxis(std::string ptr, lua_State* state);
    GCAnimationGraphVisualizerAxis(void *ptr);

    float GetAxisSize() const;
    void SetAxisSize(float value);
    GCAnimationGraphVisualizerPrimitiveBase GetParent() const;
    void SetParent(GCAnimationGraphVisualizerPrimitiveBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GMaterialResourceData_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GMaterialResourceData_t(std::string ptr, lua_State* state);
    GMaterialResourceData_t(void *ptr);

    std::string GetMaterialName() const;
    void SetMaterialName(std::string value);
    std::string GetShaderName() const;
    void SetShaderName(std::string value);
    std::vector<GMaterialParamInt_t> GetIntParams() const;
    void SetIntParams(std::vector<GMaterialParamInt_t> value);
    std::vector<GMaterialParamFloat_t> GetFloatParams() const;
    void SetFloatParams(std::vector<GMaterialParamFloat_t> value);
    std::vector<GMaterialParamVector_t> GetVectorParams() const;
    void SetVectorParams(std::vector<GMaterialParamVector_t> value);
    std::vector<GMaterialParamTexture_t> GetTextureParams() const;
    void SetTextureParams(std::vector<GMaterialParamTexture_t> value);
    std::vector<GMaterialParamBuffer_t> GetDynamicParams() const;
    void SetDynamicParams(std::vector<GMaterialParamBuffer_t> value);
    std::vector<GMaterialParamBuffer_t> GetDynamicTextureParams() const;
    void SetDynamicTextureParams(std::vector<GMaterialParamBuffer_t> value);
    std::vector<GMaterialParamInt_t> GetIntAttributes() const;
    void SetIntAttributes(std::vector<GMaterialParamInt_t> value);
    std::vector<GMaterialParamFloat_t> GetFloatAttributes() const;
    void SetFloatAttributes(std::vector<GMaterialParamFloat_t> value);
    std::vector<GMaterialParamVector_t> GetVectorAttributes() const;
    void SetVectorAttributes(std::vector<GMaterialParamVector_t> value);
    std::vector<GMaterialParamTexture_t> GetTextureAttributes() const;
    void SetTextureAttributes(std::vector<GMaterialParamTexture_t> value);
    std::vector<GMaterialParamString_t> GetStringAttributes() const;
    void SetStringAttributes(std::vector<GMaterialParamString_t> value);
    std::vector<CUtlString> GetRenderAttributesUsed() const;
    void SetRenderAttributesUsed(std::vector<CUtlString> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GBlendItem_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GBlendItem_t(std::string ptr, lua_State* state);
    GBlendItem_t(void *ptr);

    std::vector<GTagSpan_t> GetTags() const;
    void SetTags(std::vector<GTagSpan_t> value);
    GCAnimUpdateNodeRef GetChild() const;
    void SetChild(GCAnimUpdateNodeRef value);
    Vector2D GetPos() const;
    void SetPos(Vector2D value);
    float GetDuration() const;
    void SetDuration(float value);
    bool GetUseCustomDuration() const;
    void SetUseCustomDuration(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCVoiceContainerAnalysisBase
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCVoiceContainerAnalysisBase(std::string ptr, lua_State* state);
    GCVoiceContainerAnalysisBase(void *ptr);

    bool GetRegenerateCurveOnCompile() const;
    void SetRegenerateCurveOnCompile(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSosGroupActionLimitSchema
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSosGroupActionLimitSchema(std::string ptr, lua_State* state);
    GCSosGroupActionLimitSchema(void *ptr);

    int32_t GetMaxCount() const;
    void SetMaxCount(int32_t value);
    uint64_t GetStopType() const;
    void SetStopType(uint64_t value);
    uint64_t GetSortType() const;
    void SetSortType(uint64_t value);
    GCSosGroupActionSchema GetParent() const;
    void SetParent(GCSosGroupActionSchema value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeWeightedNode_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeWeightedNode_t(std::string ptr, lua_State* state);
    GFeWeightedNode_t(void *ptr);

    uint16_t GetNode() const;
    void SetNode(uint16_t value);
    uint16_t GetWeight() const;
    void SetWeight(uint16_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCLookComponentUpdater
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCLookComponentUpdater(std::string ptr, lua_State* state);
    GCLookComponentUpdater(void *ptr);

    GCAnimParamHandle GetLookHeading() const;
    void SetLookHeading(GCAnimParamHandle value);
    GCAnimParamHandle GetLookHeadingVelocity() const;
    void SetLookHeadingVelocity(GCAnimParamHandle value);
    GCAnimParamHandle GetLookPitch() const;
    void SetLookPitch(GCAnimParamHandle value);
    GCAnimParamHandle GetLookDistance() const;
    void SetLookDistance(GCAnimParamHandle value);
    GCAnimParamHandle GetLookDirection() const;
    void SetLookDirection(GCAnimParamHandle value);
    GCAnimParamHandle GetLookTarget() const;
    void SetLookTarget(GCAnimParamHandle value);
    GCAnimParamHandle GetLookTargetWorldSpace() const;
    void SetLookTargetWorldSpace(GCAnimParamHandle value);
    bool GetNetworkLookTarget() const;
    void SetNetworkLookTarget(bool value);
    GCAnimComponentUpdater GetParent() const;
    void SetParent(GCAnimComponentUpdater value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCycleControlUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCycleControlUpdateNode(std::string ptr, lua_State* state);
    GCCycleControlUpdateNode(void *ptr);

    uint64_t GetValueSource() const;
    void SetValueSource(uint64_t value);
    GCAnimParamHandle GetParamIndex() const;
    void SetParamIndex(GCAnimParamHandle value);
    GCUnaryUpdateNode GetParent() const;
    void SetParent(GCUnaryUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNetworkVarChainer
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNetworkVarChainer(std::string ptr, lua_State* state);
    GCNetworkVarChainer(void *ptr);

    GChangeAccessorFieldPathIndex_t GetPathIndex() const;
    void SetPathIndex(GChangeAccessorFieldPathIndex_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GRnTriangle_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GRnTriangle_t(std::string ptr, lua_State* state);
    GRnTriangle_t(void *ptr);

    std::vector<int32_t> GetIndex() const;
    void SetIndex(std::vector<int32_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmVectorValueNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmVectorValueNode(std::string ptr, lua_State* state);
    GCNmVectorValueNode(void *ptr);

    GCNmValueNode GetParent() const;
    void SetParent(GCNmValueNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSeqSeqDescFlag
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSeqSeqDescFlag(std::string ptr, lua_State* state);
    GCSeqSeqDescFlag(void *ptr);

    bool GetLooping() const;
    void SetLooping(bool value);
    bool GetSnap() const;
    void SetSnap(bool value);
    bool GetAutoplay() const;
    void SetAutoplay(bool value);
    bool GetPost() const;
    void SetPost(bool value);
    bool GetHidden() const;
    void SetHidden(bool value);
    bool GetMulti() const;
    void SetMulti(bool value);
    bool GetLegacyDelta() const;
    void SetLegacyDelta(bool value);
    bool GetLegacyWorldspace() const;
    void SetLegacyWorldspace(bool value);
    bool GetLegacyCyclepose() const;
    void SetLegacyCyclepose(bool value);
    bool GetLegacyRealtime() const;
    void SetLegacyRealtime(bool value);
    bool GetModelDoc() const;
    void SetModelDoc(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GAimCameraOpFixedSettings_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GAimCameraOpFixedSettings_t(std::string ptr, lua_State* state);
    GAimCameraOpFixedSettings_t(void *ptr);

    int32_t GetChainIndex() const;
    void SetChainIndex(int32_t value);
    int32_t GetCameraJointIndex() const;
    void SetCameraJointIndex(int32_t value);
    int32_t GetPelvisJointIndex() const;
    void SetPelvisJointIndex(int32_t value);
    int32_t GetClavicleLeftJointIndex() const;
    void SetClavicleLeftJointIndex(int32_t value);
    int32_t GetClavicleRightJointIndex() const;
    void SetClavicleRightJointIndex(int32_t value);
    int32_t GetDepenetrationJointIndex() const;
    void SetDepenetrationJointIndex(int32_t value);
    std::vector<int32> GetPropJoints() const;
    void SetPropJoints(std::vector<int32> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCParticleRemapFloatInput
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCParticleRemapFloatInput(std::string ptr, lua_State* state);
    GCParticleRemapFloatInput(void *ptr);

    GCParticleFloatInput GetParent() const;
    void SetParent(GCParticleFloatInput value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GBaseSceneObjectOverride_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GBaseSceneObjectOverride_t(std::string ptr, lua_State* state);
    GBaseSceneObjectOverride_t(void *ptr);

    uint32_t GetSceneObjectIndex() const;
    void SetSceneObjectIndex(uint32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCConcreteAnimParameter
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCConcreteAnimParameter(std::string ptr, lua_State* state);
    GCConcreteAnimParameter(void *ptr);

    uint64_t GetPreviewButton() const;
    void SetPreviewButton(uint64_t value);
    uint64_t GetNetworkSetting() const;
    void SetNetworkSetting(uint64_t value);
    bool GetUseMostRecentValue() const;
    void SetUseMostRecentValue(bool value);
    bool GetAutoReset() const;
    void SetAutoReset(bool value);
    bool GetGameWritable() const;
    void SetGameWritable(bool value);
    bool GetGraphWritable() const;
    void SetGraphWritable(bool value);
    GCAnimParameterBase GetParent() const;
    void SetParent(GCAnimParameterBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeAnimStrayRadius_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeAnimStrayRadius_t(std::string ptr, lua_State* state);
    GFeAnimStrayRadius_t(void *ptr);

    std::vector<uint16_t> GetNode() const;
    void SetNode(std::vector<uint16_t> value);
    float GetMaxDist() const;
    void SetMaxDist(float value);
    float GetRelaxationFactor() const;
    void SetRelaxationFactor(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GModelReference_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GModelReference_t(std::string ptr, lua_State* state);
    GModelReference_t(void *ptr);

    float GetRelativeProbabilityOfSpawn() const;
    void SetRelativeProbabilityOfSpawn(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GRnCapsuleDesc_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GRnCapsuleDesc_t(std::string ptr, lua_State* state);
    GRnCapsuleDesc_t(void *ptr);

    GRnCapsule_t GetCapsule() const;
    void SetCapsule(GRnCapsule_t value);
    GRnShapeDesc_t GetParent() const;
    void SetParent(GRnShapeDesc_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimGraphDebugReplay
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimGraphDebugReplay(std::string ptr, lua_State* state);
    GCAnimGraphDebugReplay(void *ptr);

    std::string GetAnimGraphFileName() const;
    void SetAnimGraphFileName(std::string value);
    int32_t GetStartIndex() const;
    void SetStartIndex(int32_t value);
    int32_t GetWriteIndex() const;
    void SetWriteIndex(int32_t value);
    int32_t GetFrameCount() const;
    void SetFrameCount(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCVoiceContainerSwitch
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCVoiceContainerSwitch(std::string ptr, lua_State* state);
    GCVoiceContainerSwitch(void *ptr);

    std::vector<GCVoiceContainerBase*> GetSoundsToPlay() const;
    void SetSoundsToPlay(std::vector<GCVoiceContainerBase*> value);
    GCVoiceContainerBase GetParent() const;
    void SetParent(GCVoiceContainerBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GLookAtBone_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GLookAtBone_t(std::string ptr, lua_State* state);
    GLookAtBone_t(void *ptr);

    int32_t GetIndex() const;
    void SetIndex(int32_t value);
    float GetWeight() const;
    void SetWeight(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmBoneMaskValueNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmBoneMaskValueNode(std::string ptr, lua_State* state);
    GCNmBoneMaskValueNode(void *ptr);

    GCNmValueNode GetParent() const;
    void SetParent(GCNmValueNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmTransitionEvent
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmTransitionEvent(std::string ptr, lua_State* state);
    GCNmTransitionEvent(void *ptr);

    uint64_t GetRule() const;
    void SetRule(uint64_t value);
    GCNmEvent GetParent() const;
    void SetParent(GCNmEvent value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCStringAnimTag
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCStringAnimTag(std::string ptr, lua_State* state);
    GCStringAnimTag(void *ptr);

    GCAnimTagBase GetParent() const;
    void SetParent(GCAnimTagBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GSkeletonAnimCapture_t__Bone_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GSkeletonAnimCapture_t__Bone_t(std::string ptr, lua_State* state);
    GSkeletonAnimCapture_t__Bone_t(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    int32_t GetParent() const;
    void SetParent(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCStaticPoseCache
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCStaticPoseCache(std::string ptr, lua_State* state);
    GCStaticPoseCache(void *ptr);

    std::vector<GCCachedPose> GetPoses() const;
    void SetPoses(std::vector<GCCachedPose> value);
    int32_t GetBoneCount() const;
    void SetBoneCount(int32_t value);
    int32_t GetMorphCount() const;
    void SetMorphCount(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GParticlePreviewBodyGroup_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GParticlePreviewBodyGroup_t(std::string ptr, lua_State* state);
    GParticlePreviewBodyGroup_t(void *ptr);

    std::string GetBodyGroupName() const;
    void SetBodyGroupName(std::string value);
    int32_t GetValue() const;
    void SetValue(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeWorldCollisionParams_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeWorldCollisionParams_t(std::string ptr, lua_State* state);
    GFeWorldCollisionParams_t(void *ptr);

    float GetWorldFriction() const;
    void SetWorldFriction(float value);
    float GetGroundFriction() const;
    void SetGroundFriction(float value);
    uint16_t GetListBegin() const;
    void SetListBegin(uint16_t value);
    uint16_t GetListEnd() const;
    void SetListEnd(uint16_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPlayerInputAnimMotorUpdater
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPlayerInputAnimMotorUpdater(std::string ptr, lua_State* state);
    GCPlayerInputAnimMotorUpdater(void *ptr);

    std::vector<float32> GetSampleTimes() const;
    void SetSampleTimes(std::vector<float32> value);
    float GetSpringConstant() const;
    void SetSpringConstant(float value);
    float GetAnticipationDistance() const;
    void SetAnticipationDistance(float value);
    GCAnimParamHandle GetAnticipationPosParam() const;
    void SetAnticipationPosParam(GCAnimParamHandle value);
    GCAnimParamHandle GetAnticipationHeadingParam() const;
    void SetAnticipationHeadingParam(GCAnimParamHandle value);
    bool GetUseAcceleration() const;
    void SetUseAcceleration(bool value);
    GCAnimMotorUpdaterBase GetParent() const;
    void SetParent(GCAnimMotorUpdaterBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCParticleCollectionRendererVecInput
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCParticleCollectionRendererVecInput(std::string ptr, lua_State* state);
    GCParticleCollectionRendererVecInput(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeBandBendLimit_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeBandBendLimit_t(std::string ptr, lua_State* state);
    GFeBandBendLimit_t(void *ptr);

    float GetDistMin() const;
    void SetDistMin(float value);
    float GetDistMax() const;
    void SetDistMax(float value);
    std::vector<uint16_t> GetNode() const;
    void SetNode(std::vector<uint16_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimFoot
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimFoot(std::string ptr, lua_State* state);
    GCAnimFoot(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    Vector GetBallOffset() const;
    void SetBallOffset(Vector value);
    Vector GetHeelOffset() const;
    void SetHeelOffset(Vector value);
    int32_t GetAnkleBoneIndex() const;
    void SetAnkleBoneIndex(int32_t value);
    int32_t GetToeBoneIndex() const;
    void SetToeBoneIndex(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEventClientAdvanceTick_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEventClientAdvanceTick_t(std::string ptr, lua_State* state);
    GEventClientAdvanceTick_t(void *ptr);

    GEventAdvanceTick_t GetParent() const;
    void SetParent(GEventAdvanceTick_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GMaterialOverride_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GMaterialOverride_t(std::string ptr, lua_State* state);
    GMaterialOverride_t(void *ptr);

    uint32_t GetSubSceneObject() const;
    void SetSubSceneObject(uint32_t value);
    uint32_t GetDrawCallIndex() const;
    void SetDrawCallIndex(uint32_t value);
    GBaseSceneObjectOverride_t GetParent() const;
    void SetParent(GBaseSceneObjectOverride_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimDemoCaptureSettings
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimDemoCaptureSettings(std::string ptr, lua_State* state);
    GCAnimDemoCaptureSettings(void *ptr);

    Vector2D GetErrorRangeSplineRotation() const;
    void SetErrorRangeSplineRotation(Vector2D value);
    Vector2D GetErrorRangeSplineTranslation() const;
    void SetErrorRangeSplineTranslation(Vector2D value);
    Vector2D GetErrorRangeSplineScale() const;
    void SetErrorRangeSplineScale(Vector2D value);
    float GetIkRotation_MaxSplineError() const;
    void SetIkRotation_MaxSplineError(float value);
    float GetIkTranslation_MaxSplineError() const;
    void SetIkTranslation_MaxSplineError(float value);
    Vector2D GetErrorRangeQuantizationRotation() const;
    void SetErrorRangeQuantizationRotation(Vector2D value);
    Vector2D GetErrorRangeQuantizationTranslation() const;
    void SetErrorRangeQuantizationTranslation(Vector2D value);
    Vector2D GetErrorRangeQuantizationScale() const;
    void SetErrorRangeQuantizationScale(Vector2D value);
    float GetIkRotation_MaxQuantizationError() const;
    void SetIkRotation_MaxQuantizationError(float value);
    float GetIkTranslation_MaxQuantizationError() const;
    void SetIkTranslation_MaxQuantizationError(float value);
    std::string GetBaseSequence() const;
    void SetBaseSequence(std::string value);
    int32_t GetBaseSequenceFrame() const;
    void SetBaseSequenceFrame(int32_t value);
    uint64_t GetBoneSelectionMode() const;
    void SetBoneSelectionMode(uint64_t value);
    std::vector<GBoneDemoCaptureSettings_t> GetBones() const;
    void SetBones(std::vector<GBoneDemoCaptureSettings_t> value);
    std::vector<GIKDemoCaptureSettings_t> GetIkChains() const;
    void SetIkChains(std::vector<GIKDemoCaptureSettings_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmIDEvent
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmIDEvent(std::string ptr, lua_State* state);
    GCNmIDEvent(void *ptr);

    GCNmEvent GetParent() const;
    void SetParent(GCNmEvent value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPathMetricEvaluator
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPathMetricEvaluator(std::string ptr, lua_State* state);
    GCPathMetricEvaluator(void *ptr);

    std::vector<float32> GetPathTimeSamples() const;
    void SetPathTimeSamples(std::vector<float32> value);
    float GetDistance() const;
    void SetDistance(float value);
    bool GetExtrapolateMovement() const;
    void SetExtrapolateMovement(bool value);
    float GetMinExtrapolationSpeed() const;
    void SetMinExtrapolationSpeed(float value);
    GCMotionMetricEvaluator GetParent() const;
    void SetParent(GCMotionMetricEvaluator value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GMaterialParam_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GMaterialParam_t(std::string ptr, lua_State* state);
    GMaterialParam_t(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSpeedScaleUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSpeedScaleUpdateNode(std::string ptr, lua_State* state);
    GCSpeedScaleUpdateNode(void *ptr);

    GCAnimParamHandle GetParamIndex() const;
    void SetParamIndex(GCAnimParamHandle value);
    GCUnaryUpdateNode GetParent() const;
    void SetParent(GCUnaryUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVMixEQ8Desc_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVMixEQ8Desc_t(std::string ptr, lua_State* state);
    GVMixEQ8Desc_t(void *ptr);

    std::vector<GVMixFilterDesc_t> GetStages() const;
    void SetStages(std::vector<GVMixFilterDesc_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCModelConfigElement_SetMaterialGroupOnAttachedModels
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCModelConfigElement_SetMaterialGroupOnAttachedModels(std::string ptr, lua_State* state);
    GCModelConfigElement_SetMaterialGroupOnAttachedModels(void *ptr);

    std::string GetMaterialGroupName() const;
    void SetMaterialGroupName(std::string value);
    GCModelConfigElement GetParent() const;
    void SetParent(GCModelConfigElement value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GTwoBoneIKSettings_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GTwoBoneIKSettings_t(std::string ptr, lua_State* state);
    GTwoBoneIKSettings_t(void *ptr);

    uint64_t GetEndEffectorType() const;
    void SetEndEffectorType(uint64_t value);
    GCAnimAttachment GetEndEffectorAttachment() const;
    void SetEndEffectorAttachment(GCAnimAttachment value);
    uint64_t GetTargetType() const;
    void SetTargetType(uint64_t value);
    GCAnimAttachment GetTargetAttachment() const;
    void SetTargetAttachment(GCAnimAttachment value);
    int32_t GetTargetBoneIndex() const;
    void SetTargetBoneIndex(int32_t value);
    GCAnimParamHandle GetPositionParam() const;
    void SetPositionParam(GCAnimParamHandle value);
    GCAnimParamHandle GetRotationParam() const;
    void SetRotationParam(GCAnimParamHandle value);
    bool GetAlwaysUseFallbackHinge() const;
    void SetAlwaysUseFallbackHinge(bool value);
    Vector GetLsFallbackHingeAxis() const;
    void SetLsFallbackHingeAxis(Vector value);
    int32_t GetFixedBoneIndex() const;
    void SetFixedBoneIndex(int32_t value);
    int32_t GetMiddleBoneIndex() const;
    void SetMiddleBoneIndex(int32_t value);
    int32_t GetEndBoneIndex() const;
    void SetEndBoneIndex(int32_t value);
    bool GetMatchTargetOrientation() const;
    void SetMatchTargetOrientation(bool value);
    bool GetConstrainTwist() const;
    void SetConstrainTwist(bool value);
    float GetMaxTwist() const;
    void SetMaxTwist(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCompositeMaterialInputContainer_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCompositeMaterialInputContainer_t(std::string ptr, lua_State* state);
    GCompositeMaterialInputContainer_t(void *ptr);

    bool GetEnabled() const;
    void SetEnabled(bool value);
    uint64_t GetCompositeMaterialInputContainerSourceType() const;
    void SetCompositeMaterialInputContainerSourceType(uint64_t value);
    std::string GetStrAttrName() const;
    void SetStrAttrName(std::string value);
    std::string GetStrAlias() const;
    void SetStrAlias(std::string value);
    std::vector<GCompositeMaterialInputLooseVariable_t> GetLooseVariables() const;
    void SetLooseVariables(std::vector<GCompositeMaterialInputLooseVariable_t> value);
    std::string GetStrAttrNameForVar() const;
    void SetStrAttrNameForVar(std::string value);
    bool GetExposeExternally() const;
    void SetExposeExternally(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCStateNodeStateData
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCStateNodeStateData(std::string ptr, lua_State* state);
    GCStateNodeStateData(void *ptr);

    GCAnimUpdateNodeRef GetChild() const;
    void SetChild(GCAnimUpdateNodeRef value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeTwistConstraint_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeTwistConstraint_t(std::string ptr, lua_State* state);
    GFeTwistConstraint_t(void *ptr);

    uint16_t GetNodeOrient() const;
    void SetNodeOrient(uint16_t value);
    uint16_t GetNodeEnd() const;
    void SetNodeEnd(uint16_t value);
    float GetTwistRelax() const;
    void SetTwistRelax(float value);
    float GetSwingRelax() const;
    void SetSwingRelax(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFootFixedData_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFootFixedData_t(std::string ptr, lua_State* state);
    GFootFixedData_t(void *ptr);

    Vector GetToeOffset() const;
    void SetToeOffset(Vector value);
    Vector GetHeelOffset() const;
    void SetHeelOffset(Vector value);
    int32_t GetTargetBoneIndex() const;
    void SetTargetBoneIndex(int32_t value);
    int32_t GetAnkleBoneIndex() const;
    void SetAnkleBoneIndex(int32_t value);
    int32_t GetIKAnchorBoneIndex() const;
    void SetIKAnchorBoneIndex(int32_t value);
    int32_t GetIkChainIndex() const;
    void SetIkChainIndex(int32_t value);
    float GetMaxIKLength() const;
    void SetMaxIKLength(float value);
    int32_t GetFootIndex() const;
    void SetFootIndex(int32_t value);
    int32_t GetTagIndex() const;
    void SetTagIndex(int32_t value);
    float GetMaxRotationLeft() const;
    void SetMaxRotationLeft(float value);
    float GetMaxRotationRight() const;
    void SetMaxRotationRight(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVMixDiffusorDesc_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVMixDiffusorDesc_t(std::string ptr, lua_State* state);
    GVMixDiffusorDesc_t(void *ptr);

    float GetSize() const;
    void SetSize(float value);
    float GetComplexity() const;
    void SetComplexity(float value);
    float GetFeedback() const;
    void SetFeedback(float value);
    float GetOutputGain() const;
    void SetOutputGain(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeProxyVertexMap_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeProxyVertexMap_t(std::string ptr, lua_State* state);
    GFeProxyVertexMap_t(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    float GetWeight() const;
    void SetWeight(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCDirectPlaybackUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCDirectPlaybackUpdateNode(std::string ptr, lua_State* state);
    GCDirectPlaybackUpdateNode(void *ptr);

    bool GetFinishEarly() const;
    void SetFinishEarly(bool value);
    bool GetResetOnFinish() const;
    void SetResetOnFinish(bool value);
    std::vector<GCDirectPlaybackTagData> GetAllTags() const;
    void SetAllTags(std::vector<GCDirectPlaybackTagData> value);
    GCUnaryUpdateNode GetParent() const;
    void SetParent(GCUnaryUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GPostProcessingLocalContrastParameters_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GPostProcessingLocalContrastParameters_t(std::string ptr, lua_State* state);
    GPostProcessingLocalContrastParameters_t(void *ptr);

    float GetLocalContrastStrength() const;
    void SetLocalContrastStrength(float value);
    float GetLocalContrastEdgeStrength() const;
    void SetLocalContrastEdgeStrength(float value);
    float GetLocalContrastVignetteStart() const;
    void SetLocalContrastVignetteStart(float value);
    float GetLocalContrastVignetteEnd() const;
    void SetLocalContrastVignetteEnd(float value);
    float GetLocalContrastVignetteBlur() const;
    void SetLocalContrastVignetteBlur(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFootLockUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFootLockUpdateNode(std::string ptr, lua_State* state);
    GCFootLockUpdateNode(void *ptr);

    GFootLockPoseOpFixedSettings GetOpFixedSettings() const;
    void SetOpFixedSettings(GFootLockPoseOpFixedSettings value);
    std::vector<GFootFixedSettings> GetFootSettings() const;
    void SetFootSettings(std::vector<GFootFixedSettings> value);
    GCAnimInputDamping GetHipShiftDamping() const;
    void SetHipShiftDamping(GCAnimInputDamping value);
    GCAnimInputDamping GetRootHeightDamping() const;
    void SetRootHeightDamping(GCAnimInputDamping value);
    float GetStrideCurveScale() const;
    void SetStrideCurveScale(float value);
    float GetStrideCurveLimitScale() const;
    void SetStrideCurveLimitScale(float value);
    float GetStepHeightIncreaseScale() const;
    void SetStepHeightIncreaseScale(float value);
    float GetStepHeightDecreaseScale() const;
    void SetStepHeightDecreaseScale(float value);
    float GetHipShiftScale() const;
    void SetHipShiftScale(float value);
    float GetBlendTime() const;
    void SetBlendTime(float value);
    float GetMaxRootHeightOffset() const;
    void SetMaxRootHeightOffset(float value);
    float GetMinRootHeightOffset() const;
    void SetMinRootHeightOffset(float value);
    float GetTiltPlanePitchSpringStrength() const;
    void SetTiltPlanePitchSpringStrength(float value);
    float GetTiltPlaneRollSpringStrength() const;
    void SetTiltPlaneRollSpringStrength(float value);
    bool GetApplyFootRotationLimits() const;
    void SetApplyFootRotationLimits(bool value);
    bool GetApplyHipShift() const;
    void SetApplyHipShift(bool value);
    bool GetModulateStepHeight() const;
    void SetModulateStepHeight(bool value);
    bool GetResetChild() const;
    void SetResetChild(bool value);
    bool GetEnableVerticalCurvedPaths() const;
    void SetEnableVerticalCurvedPaths(bool value);
    bool GetEnableRootHeightDamping() const;
    void SetEnableRootHeightDamping(bool value);
    GCUnaryUpdateNode GetParent() const;
    void SetParent(GCUnaryUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCParentConstraint
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCParentConstraint(std::string ptr, lua_State* state);
    GCParentConstraint(void *ptr);

    GCBaseConstraint GetParent() const;
    void SetParent(GCBaseConstraint value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GSkeletonAnimCapture_t__Frame_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GSkeletonAnimCapture_t__Frame_t(std::string ptr, lua_State* state);
    GSkeletonAnimCapture_t__Frame_t(void *ptr);

    float GetTime() const;
    void SetTime(float value);
    GSkeletonAnimCapture_t GetStamp() const;
    void SetStamp(GSkeletonAnimCapture_t value);
    bool GetTeleport() const;
    void SetTeleport(bool value);
    std::vector<Vector> GetFeModelPos() const;
    void SetFeModelPos(std::vector<Vector> value);
    std::vector<float32> GetFlexControllerWeights() const;
    void SetFlexControllerWeights(std::vector<float32> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPathParameters
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPathParameters(std::string ptr, lua_State* state);
    GCPathParameters(void *ptr);

    int32_t GetStartControlPointNumber() const;
    void SetStartControlPointNumber(int32_t value);
    int32_t GetEndControlPointNumber() const;
    void SetEndControlPointNumber(int32_t value);
    int32_t GetBulgeControl() const;
    void SetBulgeControl(int32_t value);
    float GetBulge() const;
    void SetBulge(float value);
    float GetMidPoint() const;
    void SetMidPoint(float value);
    Vector GetStartPointOffset() const;
    void SetStartPointOffset(Vector value);
    Vector GetMidPointOffset() const;
    void SetMidPointOffset(Vector value);
    Vector GetEndOffset() const;
    void SetEndOffset(Vector value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSlowDownOnSlopesUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSlowDownOnSlopesUpdateNode(std::string ptr, lua_State* state);
    GCSlowDownOnSlopesUpdateNode(void *ptr);

    float GetSlowDownStrength() const;
    void SetSlowDownStrength(float value);
    GCUnaryUpdateNode GetParent() const;
    void SetParent(GCUnaryUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAttachment
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAttachment(std::string ptr, lua_State* state);
    GCAttachment(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    std::vector<CUtlString> GetInfluenceNames() const;
    void SetInfluenceNames(std::vector<CUtlString> value);
    std::vector<Vector> GetInfluenceOffsets() const;
    void SetInfluenceOffsets(std::vector<Vector> value);
    std::vector<float> GetInfluenceWeights() const;
    void SetInfluenceWeights(std::vector<float> value);
    std::vector<bool> GetInfluenceRootTransform() const;
    void SetInfluenceRootTransform(std::vector<bool> value);
    uint32_t GetInfluences() const;
    void SetInfluences(uint32_t value);
    bool GetIgnoreRotation() const;
    void SetIgnoreRotation(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEmptyEntityInstance
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEmptyEntityInstance(std::string ptr, lua_State* state);
    GCEmptyEntityInstance(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCompositeMaterialEditorDoc
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCompositeMaterialEditorDoc(std::string ptr, lua_State* state);
    GCCompositeMaterialEditorDoc(void *ptr);

    int32_t GetVersion() const;
    void SetVersion(int32_t value);
    std::vector<GCompositeMaterialEditorPoint_t> GetPoints() const;
    void SetPoints(std::vector<GCompositeMaterialEditorPoint_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPhysSurfacePropertiesPhysics
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPhysSurfacePropertiesPhysics(std::string ptr, lua_State* state);
    GCPhysSurfacePropertiesPhysics(void *ptr);

    float GetFriction() const;
    void SetFriction(float value);
    float GetElasticity() const;
    void SetElasticity(float value);
    float GetDensity() const;
    void SetDensity(float value);
    float GetThickness() const;
    void SetThickness(float value);
    float GetSoftContactFrequency() const;
    void SetSoftContactFrequency(float value);
    float GetSoftContactDampingRatio() const;
    void SetSoftContactDampingRatio(float value);
    float GetWheelDrag() const;
    void SetWheelDrag(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEventClientPostOutput_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEventClientPostOutput_t(std::string ptr, lua_State* state);
    GEventClientPostOutput_t(void *ptr);

    GEngineLoopState_t GetLoopState() const;
    void SetLoopState(GEngineLoopState_t value);
    double GetRenderTime() const;
    void SetRenderTime(double value);
    float GetRenderFrameTime() const;
    void SetRenderFrameTime(float value);
    float GetRenderFrameTimeUnbounded() const;
    void SetRenderFrameTimeUnbounded(float value);
    bool GetRenderOnly() const;
    void SetRenderOnly(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeNodeIntegrator_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeNodeIntegrator_t(std::string ptr, lua_State* state);
    GFeNodeIntegrator_t(void *ptr);

    float GetPointDamping() const;
    void SetPointDamping(float value);
    float GetAnimationForceAttraction() const;
    void SetAnimationForceAttraction(float value);
    float GetAnimationVertexAttraction() const;
    void SetAnimationVertexAttraction(float value);
    float GetGravity() const;
    void SetGravity(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GRnMeshDesc_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GRnMeshDesc_t(std::string ptr, lua_State* state);
    GRnMeshDesc_t(void *ptr);

    GRnMesh_t GetMesh() const;
    void SetMesh(GRnMesh_t value);
    GRnShapeDesc_t GetParent() const;
    void SetParent(GRnShapeDesc_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimGraphNetworkSettings
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimGraphNetworkSettings(std::string ptr, lua_State* state);
    GCAnimGraphNetworkSettings(void *ptr);

    bool GetNetworkingEnabled() const;
    void SetNetworkingEnabled(bool value);
    GCAnimGraphSettingsGroup GetParent() const;
    void SetParent(GCAnimGraphSettingsGroup value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAimConstraint
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAimConstraint(std::string ptr, lua_State* state);
    GCAimConstraint(void *ptr);

    uint32_t GetUpType() const;
    void SetUpType(uint32_t value);
    GCBaseConstraint GetParent() const;
    void SetParent(GCBaseConstraint value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimActionUpdater
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimActionUpdater(std::string ptr, lua_State* state);
    GCAnimActionUpdater(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCParticleFunctionForce
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCParticleFunctionForce(std::string ptr, lua_State* state);
    GCParticleFunctionForce(void *ptr);

    GCParticleFunction GetParent() const;
    void SetParent(GCParticleFunction value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSpinUpdateBase
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSpinUpdateBase(std::string ptr, lua_State* state);
    GCSpinUpdateBase(void *ptr);

    GCParticleFunctionOperator GetParent() const;
    void SetParent(GCParticleFunctionOperator value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GControlPointReference_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GControlPointReference_t(std::string ptr, lua_State* state);
    GControlPointReference_t(void *ptr);

    int32_t GetControlPointNameString() const;
    void SetControlPointNameString(int32_t value);
    Vector GetOffsetFromControlPoint() const;
    void SetOffsetFromControlPoint(Vector value);
    bool GetOffsetInLocalSpace() const;
    void SetOffsetInLocalSpace(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCVoiceContainerRandomSampler
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCVoiceContainerRandomSampler(std::string ptr, lua_State* state);
    GCVoiceContainerRandomSampler(void *ptr);

    float GetAmplitude() const;
    void SetAmplitude(float value);
    float GetAmplitudeJitter() const;
    void SetAmplitudeJitter(float value);
    float GetTimeJitter() const;
    void SetTimeJitter(float value);
    float GetMaxLength() const;
    void SetMaxLength(float value);
    int32_t GetNumDelayVariations() const;
    void SetNumDelayVariations(int32_t value);
    GCVoiceContainerBase GetParent() const;
    void SetParent(GCVoiceContainerBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeFollowNode_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeFollowNode_t(std::string ptr, lua_State* state);
    GFeFollowNode_t(void *ptr);

    uint16_t GetParentNode() const;
    void SetParentNode(uint16_t value);
    uint16_t GetChildNode() const;
    void SetChildNode(uint16_t value);
    float GetWeight() const;
    void SetWeight(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCovMatrix3
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCovMatrix3(std::string ptr, lua_State* state);
    GCovMatrix3(void *ptr);

    Vector GetDiag() const;
    void SetDiag(Vector value);
    float GetXY() const;
    void SetXY(float value);
    float GetXZ() const;
    void SetXZ(float value);
    float GetYZ() const;
    void SetYZ(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GAnimStateID
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GAnimStateID(std::string ptr, lua_State* state);
    GAnimStateID(void *ptr);

    uint32_t GetId() const;
    void SetId(uint32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCVoiceContainerStaticAdditiveSynth
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCVoiceContainerStaticAdditiveSynth(std::string ptr, lua_State* state);
    GCVoiceContainerStaticAdditiveSynth(void *ptr);

    float GetMinVolume() const;
    void SetMinVolume(float value);
    int32_t GetInstancesAtMinVolume() const;
    void SetInstancesAtMinVolume(int32_t value);
    float GetMaxVolume() const;
    void SetMaxVolume(float value);
    int32_t GetInstancesAtMaxVolume() const;
    void SetInstancesAtMaxVolume(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GRnSoftbodyCapsule_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GRnSoftbodyCapsule_t(std::string ptr, lua_State* state);
    GRnSoftbodyCapsule_t(void *ptr);

    std::vector<Vector> GetCenter() const;
    void SetCenter(std::vector<Vector> value);
    float GetRadius() const;
    void SetRadius(float value);
    std::vector<uint16_t> GetParticle() const;
    void SetParticle(std::vector<uint16_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCModelConfigElement_RandomPick
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCModelConfigElement_RandomPick(std::string ptr, lua_State* state);
    GCModelConfigElement_RandomPick(void *ptr);

    std::vector<CUtlString> GetChoices() const;
    void SetChoices(std::vector<CUtlString> value);
    std::vector<float32> GetChoiceWeights() const;
    void SetChoiceWeights(std::vector<float32> value);
    GCModelConfigElement GetParent() const;
    void SetParent(GCModelConfigElement value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GNmSyncTrackTime_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GNmSyncTrackTime_t(std::string ptr, lua_State* state);
    GNmSyncTrackTime_t(void *ptr);

    int32_t GetEventIdx() const;
    void SetEventIdx(int32_t value);
    GNmPercent_t GetPercentageThrough() const;
    void SetPercentageThrough(GNmPercent_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCGeneralRandomRotation
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCGeneralRandomRotation(std::string ptr, lua_State* state);
    GCGeneralRandomRotation(void *ptr);

    GParticleAttributeIndex_t GetFieldOutput() const;
    void SetFieldOutput(GParticleAttributeIndex_t value);
    float GetDegrees() const;
    void SetDegrees(float value);
    float GetDegreesMin() const;
    void SetDegreesMin(float value);
    float GetDegreesMax() const;
    void SetDegreesMax(float value);
    float GetRotationRandExponent() const;
    void SetRotationRandExponent(float value);
    bool GetRandomlyFlipDirection() const;
    void SetRandomlyFlipDirection(bool value);
    GCParticleFunctionInitializer GetParent() const;
    void SetParent(GCParticleFunctionInitializer value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GRnPlane_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GRnPlane_t(std::string ptr, lua_State* state);
    GRnPlane_t(void *ptr);

    Vector GetNormal() const;
    void SetNormal(Vector value);
    float GetOffset() const;
    void SetOffset(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeNodeWindBase_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeNodeWindBase_t(std::string ptr, lua_State* state);
    GFeNodeWindBase_t(void *ptr);

    uint16_t GetNodeX0() const;
    void SetNodeX0(uint16_t value);
    uint16_t GetNodeX1() const;
    void SetNodeX1(uint16_t value);
    uint16_t GetNodeY0() const;
    void SetNodeY0(uint16_t value);
    uint16_t GetNodeY1() const;
    void SetNodeY1(uint16_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCQuaternionAnimParameter
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCQuaternionAnimParameter(std::string ptr, lua_State* state);
    GCQuaternionAnimParameter(void *ptr);

    bool GetInterpolate() const;
    void SetInterpolate(bool value);
    GCConcreteAnimParameter GetParent() const;
    void SetParent(GCConcreteAnimParameter value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GSkeletonAnimCapture_t__Camera_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GSkeletonAnimCapture_t__Camera_t(std::string ptr, lua_State* state);
    GSkeletonAnimCapture_t__Camera_t(void *ptr);

    float GetTime() const;
    void SetTime(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimEncodeDifference
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimEncodeDifference(std::string ptr, lua_State* state);
    GCAnimEncodeDifference(void *ptr);

    std::vector<GCAnimBoneDifference> GetBoneArray() const;
    void SetBoneArray(std::vector<GCAnimBoneDifference> value);
    std::vector<GCAnimMorphDifference> GetMorphArray() const;
    void SetMorphArray(std::vector<GCAnimMorphDifference> value);
    std::vector<GCAnimUserDifference> GetUserArray() const;
    void SetUserArray(std::vector<GCAnimUserDifference> value);
    std::vector<uint8> GetHasRotationBitArray() const;
    void SetHasRotationBitArray(std::vector<uint8> value);
    std::vector<uint8> GetHasMovementBitArray() const;
    void SetHasMovementBitArray(std::vector<uint8> value);
    std::vector<uint8> GetHasMorphBitArray() const;
    void SetHasMorphBitArray(std::vector<uint8> value);
    std::vector<uint8> GetHasUserBitArray() const;
    void SetHasUserBitArray(std::vector<uint8> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GAggregateSceneObject_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GAggregateSceneObject_t(std::string ptr, lua_State* state);
    GAggregateSceneObject_t(void *ptr);

    uint64_t GetAllFlags() const;
    void SetAllFlags(uint64_t value);
    uint64_t GetAnyFlags() const;
    void SetAnyFlags(uint64_t value);
    int16_t GetLayer() const;
    void SetLayer(int16_t value);
    std::vector<GAggregateMeshInfo_t> GetAggregateMeshes() const;
    void SetAggregateMeshes(std::vector<GAggregateMeshInfo_t> value);
    std::vector<GAggregateLODSetup_t> GetLodSetups() const;
    void SetLodSetups(std::vector<GAggregateLODSetup_t> value);
    std::vector<uint16> GetVisClusterMembership() const;
    void SetVisClusterMembership(std::vector<uint16> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GIKDemoCaptureSettings_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GIKDemoCaptureSettings_t(std::string ptr, lua_State* state);
    GIKDemoCaptureSettings_t(void *ptr);

    std::string GetParentBoneName() const;
    void SetParentBoneName(std::string value);
    uint64_t GetMode() const;
    void SetMode(uint64_t value);
    std::string GetIkChainName() const;
    void SetIkChainName(std::string value);
    std::string GetOneBoneStart() const;
    void SetOneBoneStart(std::string value);
    std::string GetOneBoneEnd() const;
    void SetOneBoneEnd(std::string value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCParticleCollectionBindingInstance
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCParticleCollectionBindingInstance(std::string ptr, lua_State* state);
    GCParticleCollectionBindingInstance(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCVoiceContainerDefault
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCVoiceContainerDefault(std::string ptr, lua_State* state);
    GCVoiceContainerDefault(void *ptr);

    GCVoiceContainerBase GetParent() const;
    void SetParent(GCVoiceContainerBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSoundEventMetaData
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSoundEventMetaData(std::string ptr, lua_State* state);
    GCSoundEventMetaData(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMorphConstraint
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMorphConstraint(std::string ptr, lua_State* state);
    GCMorphConstraint(void *ptr);

    std::string GetTargetMorph() const;
    void SetTargetMorph(std::string value);
    int32_t GetSlaveChannel() const;
    void SetSlaveChannel(int32_t value);
    float GetMin() const;
    void SetMin(float value);
    float GetMax() const;
    void SetMax(float value);
    GCBaseConstraint GetParent() const;
    void SetParent(GCBaseConstraint value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GDop26_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GDop26_t(std::string ptr, lua_State* state);
    GDop26_t(void *ptr);

    std::vector<float> GetSupport() const;
    void SetSupport(std::vector<float> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimGraphModelBinding
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimGraphModelBinding(std::string ptr, lua_State* state);
    GCAnimGraphModelBinding(void *ptr);

    std::string GetModelName() const;
    void SetModelName(std::string value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFakeEntityDerivedA_tAPI
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFakeEntityDerivedA_tAPI(std::string ptr, lua_State* state);
    GFakeEntityDerivedA_tAPI(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimParamHandleMap
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimParamHandleMap(std::string ptr, lua_State* state);
    GCAnimParamHandleMap(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeMorphLayerDepr_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeMorphLayerDepr_t(std::string ptr, lua_State* state);
    GFeMorphLayerDepr_t(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    uint32_t GetNameHash() const;
    void SetNameHash(uint32_t value);
    std::vector<uint16> GetNodes() const;
    void SetNodes(std::vector<uint16> value);
    std::vector<Vector> GetInitPos() const;
    void SetInitPos(std::vector<Vector> value);
    std::vector<float32> GetGravity() const;
    void SetGravity(std::vector<float32> value);
    std::vector<float32> GetGoalStrength() const;
    void SetGoalStrength(std::vector<float32> value);
    std::vector<float32> GetGoalDamping() const;
    void SetGoalDamping(std::vector<float32> value);
    uint32_t GetFlags() const;
    void SetFlags(uint32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFourCovMatrices3
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFourCovMatrices3(std::string ptr, lua_State* state);
    GFourCovMatrices3(void *ptr);

    float GetXY() const;
    void SetXY(float value);
    float GetXZ() const;
    void SetXZ(float value);
    float GetYZ() const;
    void SetYZ(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeFitMatrix_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeFitMatrix_t(std::string ptr, lua_State* state);
    GFeFitMatrix_t(void *ptr);

    Vector GetCenter() const;
    void SetCenter(Vector value);
    uint16_t GetEnd() const;
    void SetEnd(uint16_t value);
    uint16_t GetNode() const;
    void SetNode(uint16_t value);
    uint16_t GetBeginDynamic() const;
    void SetBeginDynamic(uint16_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GRnVertex_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GRnVertex_t(std::string ptr, lua_State* state);
    GRnVertex_t(void *ptr);

    uint32_t GetEdge() const;
    void SetEdge(uint32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GTraceSettings_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GTraceSettings_t(std::string ptr, lua_State* state);
    GTraceSettings_t(void *ptr);

    float GetTraceHeight() const;
    void SetTraceHeight(float value);
    float GetTraceRadius() const;
    void SetTraceRadius(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCConstraintTarget
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCConstraintTarget(std::string ptr, lua_State* state);
    GCConstraintTarget(void *ptr);

    Vector GetOffset() const;
    void SetOffset(Vector value);
    uint32_t GetBoneHash() const;
    void SetBoneHash(uint32_t value);
    std::string GetName() const;
    void SetName(std::string value);
    float GetWeight() const;
    void SetWeight(float value);
    bool GetIsAttachment() const;
    void SetIsAttachment(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCompMatPropertyMutator_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCompMatPropertyMutator_t(std::string ptr, lua_State* state);
    GCompMatPropertyMutator_t(void *ptr);

    bool GetEnabled() const;
    void SetEnabled(bool value);
    uint64_t GetMutatorCommandType() const;
    void SetMutatorCommandType(uint64_t value);
    std::string GetStrInitWith_Container() const;
    void SetStrInitWith_Container(std::string value);
    std::string GetStrCopyProperty_InputContainerSrc() const;
    void SetStrCopyProperty_InputContainerSrc(std::string value);
    std::string GetStrCopyProperty_InputContainerProperty() const;
    void SetStrCopyProperty_InputContainerProperty(std::string value);
    std::string GetStrCopyProperty_TargetProperty() const;
    void SetStrCopyProperty_TargetProperty(std::string value);
    std::string GetStrRandomRollInputVars_SeedInputVar() const;
    void SetStrRandomRollInputVars_SeedInputVar(std::string value);
    std::vector<CUtlString> GetRandomRollInputVars_InputVarsToRoll() const;
    void SetRandomRollInputVars_InputVarsToRoll(std::vector<CUtlString> value);
    std::string GetStrCopyMatchingKeys_InputContainerSrc() const;
    void SetStrCopyMatchingKeys_InputContainerSrc(std::string value);
    std::string GetStrCopyKeysWithSuffix_InputContainerSrc() const;
    void SetStrCopyKeysWithSuffix_InputContainerSrc(std::string value);
    std::string GetStrCopyKeysWithSuffix_FindSuffix() const;
    void SetStrCopyKeysWithSuffix_FindSuffix(std::string value);
    std::string GetStrCopyKeysWithSuffix_ReplaceSuffix() const;
    void SetStrCopyKeysWithSuffix_ReplaceSuffix(std::string value);
    GCompositeMaterialInputLooseVariable_t GetSetValue_Value() const;
    void SetSetValue_Value(GCompositeMaterialInputLooseVariable_t value);
    std::string GetStrGenerateTexture_TargetParam() const;
    void SetStrGenerateTexture_TargetParam(std::string value);
    std::string GetStrGenerateTexture_InitialContainer() const;
    void SetStrGenerateTexture_InitialContainer(std::string value);
    int32_t GetResolution() const;
    void SetResolution(int32_t value);
    bool GetIsScratchTarget() const;
    void SetIsScratchTarget(bool value);
    bool GetSplatDebugInfo() const;
    void SetSplatDebugInfo(bool value);
    bool GetCaptureInRenderDoc() const;
    void SetCaptureInRenderDoc(bool value);
    std::vector<GCompMatPropertyMutator_t> GetTexGenInstructions() const;
    void SetTexGenInstructions(std::vector<GCompMatPropertyMutator_t> value);
    std::vector<GCompMatPropertyMutator_t> GetConditionalMutators() const;
    void SetConditionalMutators(std::vector<GCompMatPropertyMutator_t> value);
    std::string GetStrPopInputQueue_Container() const;
    void SetStrPopInputQueue_Container(std::string value);
    std::string GetStrDrawText_InputContainerSrc() const;
    void SetStrDrawText_InputContainerSrc(std::string value);
    std::string GetStrDrawText_InputContainerProperty() const;
    void SetStrDrawText_InputContainerProperty(std::string value);
    Vector2D GetDrawText_Position() const;
    void SetDrawText_Position(Vector2D value);
    Color GetColDrawText_Color() const;
    void SetColDrawText_Color(Color value);
    std::string GetStrDrawText_Font() const;
    void SetStrDrawText_Font(std::string value);
    std::vector<GCompMatMutatorCondition_t> GetConditions() const;
    void SetConditions(std::vector<GCompMatMutatorCondition_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GIKBoneNameAndIndex_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GIKBoneNameAndIndex_t(std::string ptr, lua_State* state);
    GIKBoneNameAndIndex_t(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GPermEntityLumpData_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GPermEntityLumpData_t(std::string ptr, lua_State* state);
    GPermEntityLumpData_t(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVMixDelayDesc_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVMixDelayDesc_t(std::string ptr, lua_State* state);
    GVMixDelayDesc_t(void *ptr);

    GVMixFilterDesc_t GetFeedbackFilter() const;
    void SetFeedbackFilter(GVMixFilterDesc_t value);
    bool GetEnableFilter() const;
    void SetEnableFilter(bool value);
    float GetDelay() const;
    void SetDelay(float value);
    float GetDirectGain() const;
    void SetDirectGain(float value);
    float GetDelayGain() const;
    void SetDelayGain(float value);
    float GetFeedbackGain() const;
    void SetFeedbackGain(float value);
    float GetWidth() const;
    void SetWidth(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBoneConstraintDotToMorph
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBoneConstraintDotToMorph(std::string ptr, lua_State* state);
    GCBoneConstraintDotToMorph(void *ptr);

    std::string GetBoneName() const;
    void SetBoneName(std::string value);
    std::string GetTargetBoneName() const;
    void SetTargetBoneName(std::string value);
    std::string GetMorphChannelName() const;
    void SetMorphChannelName(std::string value);
    std::vector<float> GetRemap() const;
    void SetRemap(std::vector<float> value);
    GCBoneConstraintBase GetParent() const;
    void SetParent(GCBoneConstraintBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GPostProcessingBloomParameters_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GPostProcessingBloomParameters_t(std::string ptr, lua_State* state);
    GPostProcessingBloomParameters_t(void *ptr);

    uint64_t GetBlendMode() const;
    void SetBlendMode(uint64_t value);
    float GetBloomStrength() const;
    void SetBloomStrength(float value);
    float GetScreenBloomStrength() const;
    void SetScreenBloomStrength(float value);
    float GetBlurBloomStrength() const;
    void SetBlurBloomStrength(float value);
    float GetBloomThreshold() const;
    void SetBloomThreshold(float value);
    float GetBloomThresholdWidth() const;
    void SetBloomThresholdWidth(float value);
    float GetSkyboxBloomStrength() const;
    void SetSkyboxBloomStrength(float value);
    float GetBloomStartValue() const;
    void SetBloomStartValue(float value);
    std::vector<float> GetBlurWeight() const;
    void SetBlurWeight(std::vector<float> value);
    std::vector<Vector> GetBlurTint() const;
    void SetBlurTint(std::vector<Vector> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEntOutput_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEntOutput_t(std::string ptr, lua_State* state);
    GEntOutput_t(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFakeEntityDerivedB_tAPI
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFakeEntityDerivedB_tAPI(std::string ptr, lua_State* state);
    GFakeEntityDerivedB_tAPI(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSlopeComponentUpdater
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSlopeComponentUpdater(std::string ptr, lua_State* state);
    GCSlopeComponentUpdater(void *ptr);

    float GetTraceDistance() const;
    void SetTraceDistance(float value);
    GCAnimParamHandle GetSlopeAngle() const;
    void SetSlopeAngle(GCAnimParamHandle value);
    GCAnimParamHandle GetSlopeAngleFront() const;
    void SetSlopeAngleFront(GCAnimParamHandle value);
    GCAnimParamHandle GetSlopeAngleSide() const;
    void SetSlopeAngleSide(GCAnimParamHandle value);
    GCAnimParamHandle GetSlopeHeading() const;
    void SetSlopeHeading(GCAnimParamHandle value);
    GCAnimParamHandle GetSlopeNormal() const;
    void SetSlopeNormal(GCAnimParamHandle value);
    GCAnimParamHandle GetSlopeNormal_WorldSpace() const;
    void SetSlopeNormal_WorldSpace(GCAnimParamHandle value);
    GCAnimComponentUpdater GetParent() const;
    void SetParent(GCAnimComponentUpdater value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GRnNode_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GRnNode_t(std::string ptr, lua_State* state);
    GRnNode_t(void *ptr);

    Vector GetMin() const;
    void SetMin(Vector value);
    uint32_t GetChildren() const;
    void SetChildren(uint32_t value);
    Vector GetMax() const;
    void SetMax(Vector value);
    uint32_t GetTriangleOffset() const;
    void SetTriangleOffset(uint32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSeqCmdSeqDesc
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSeqCmdSeqDesc(std::string ptr, lua_State* state);
    GCSeqCmdSeqDesc(void *ptr);

    GCSeqSeqDescFlag GetFlags() const;
    void SetFlags(GCSeqSeqDescFlag value);
    GCSeqTransition GetTransition() const;
    void SetTransition(GCSeqTransition value);
    int16_t GetFrameRangeSequence() const;
    void SetFrameRangeSequence(int16_t value);
    int16_t GetFrameCount() const;
    void SetFrameCount(int16_t value);
    float GetFPS() const;
    void SetFPS(float value);
    int16_t GetSubCycles() const;
    void SetSubCycles(int16_t value);
    int16_t GetNumLocalResults() const;
    void SetNumLocalResults(int16_t value);
    std::vector<GCSeqCmdLayer> GetCmdLayerArray() const;
    void SetCmdLayerArray(std::vector<GCSeqCmdLayer> value);
    std::vector<GCAnimEventDefinition> GetEventArray() const;
    void SetEventArray(std::vector<GCAnimEventDefinition> value);
    std::vector<GCAnimActivity> GetActivityArray() const;
    void SetActivityArray(std::vector<GCAnimActivity> value);
    std::vector<GCSeqPoseSetting> GetPoseSettingArray() const;
    void SetPoseSettingArray(std::vector<GCSeqPoseSetting> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPathAnimMotorUpdaterBase
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPathAnimMotorUpdaterBase(std::string ptr, lua_State* state);
    GCPathAnimMotorUpdaterBase(void *ptr);

    bool GetLockToPath() const;
    void SetLockToPath(bool value);
    GCAnimMotorUpdaterBase GetParent() const;
    void SetParent(GCAnimMotorUpdaterBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCVariantDefaultAllocator
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCVariantDefaultAllocator(std::string ptr, lua_State* state);
    GCVariantDefaultAllocator(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVMixOscDesc_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVMixOscDesc_t(std::string ptr, lua_State* state);
    GVMixOscDesc_t(void *ptr);

    uint64_t GetOscType() const;
    void SetOscType(uint64_t value);
    float GetFreq() const;
    void SetFreq(float value);
    float GetPhase() const;
    void SetPhase(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeEdgeDesc_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeEdgeDesc_t(std::string ptr, lua_State* state);
    GFeEdgeDesc_t(void *ptr);

    std::vector<uint16_t> GetEdge() const;
    void SetEdge(std::vector<uint16_t> value);
    std::vector<uint16_t> GetVirtElem() const;
    void SetVirtElem(std::vector<uint16_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPathAnimMotorUpdater
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPathAnimMotorUpdater(std::string ptr, lua_State* state);
    GCPathAnimMotorUpdater(void *ptr);

    GCPathAnimMotorUpdaterBase GetParent() const;
    void SetParent(GCPathAnimMotorUpdaterBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCWayPointHelperUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCWayPointHelperUpdateNode(std::string ptr, lua_State* state);
    GCWayPointHelperUpdateNode(void *ptr);

    float GetStartCycle() const;
    void SetStartCycle(float value);
    float GetEndCycle() const;
    void SetEndCycle(float value);
    bool GetOnlyGoals() const;
    void SetOnlyGoals(bool value);
    bool GetPreventOvershoot() const;
    void SetPreventOvershoot(bool value);
    bool GetPreventUndershoot() const;
    void SetPreventUndershoot(bool value);
    GCUnaryUpdateNode GetParent() const;
    void SetParent(GCUnaryUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GMaterialParamInt_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GMaterialParamInt_t(std::string ptr, lua_State* state);
    GMaterialParamInt_t(void *ptr);

    int32_t GetValue() const;
    void SetValue(int32_t value);
    GMaterialParam_t GetParent() const;
    void SetParent(GMaterialParam_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GPermModelInfo_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GPermModelInfo_t(std::string ptr, lua_State* state);
    GPermModelInfo_t(void *ptr);

    uint32_t GetFlags() const;
    void SetFlags(uint32_t value);
    Vector GetHullMin() const;
    void SetHullMin(Vector value);
    Vector GetHullMax() const;
    void SetHullMax(Vector value);
    Vector GetViewMin() const;
    void SetViewMin(Vector value);
    Vector GetViewMax() const;
    void SetViewMax(Vector value);
    float GetMass() const;
    void SetMass(float value);
    Vector GetEyePosition() const;
    void SetEyePosition(Vector value);
    float GetMaxEyeDeflection() const;
    void SetMaxEyeDeflection(float value);
    std::string GetSurfaceProperty() const;
    void SetSurfaceProperty(std::string value);
    std::string GetKeyValueText() const;
    void SetKeyValueText(std::string value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GAnimScriptHandle
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GAnimScriptHandle(std::string ptr, lua_State* state);
    GAnimScriptHandle(void *ptr);

    uint32_t GetId() const;
    void SetId(uint32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeCtrlOffset_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeCtrlOffset_t(std::string ptr, lua_State* state);
    GFeCtrlOffset_t(void *ptr);

    Vector GetOffset() const;
    void SetOffset(Vector value);
    uint16_t GetCtrlParent() const;
    void SetCtrlParent(uint16_t value);
    uint16_t GetCtrlChild() const;
    void SetCtrlChild(uint16_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeTri_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeTri_t(std::string ptr, lua_State* state);
    GFeTri_t(void *ptr);

    std::vector<uint16_t> GetNode() const;
    void SetNode(std::vector<uint16_t> value);
    float GetW1() const;
    void SetW1(float value);
    float GetW2() const;
    void SetW2(float value);
    float Get1x() const;
    void Set1x(float value);
    Vector2D Get2() const;
    void Set2(Vector2D value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCLeanMatrixUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCLeanMatrixUpdateNode(std::string ptr, lua_State* state);
    GCLeanMatrixUpdateNode(void *ptr);

    std::vector<GCPoseHandle> GetPoses() const;
    void SetPoses(std::vector<GCPoseHandle> value);
    GCAnimInputDamping GetDamping() const;
    void SetDamping(GCAnimInputDamping value);
    uint64_t GetBlendSource() const;
    void SetBlendSource(uint64_t value);
    GCAnimParamHandle GetParamIndex() const;
    void SetParamIndex(GCAnimParamHandle value);
    Vector GetVerticalAxis() const;
    void SetVerticalAxis(Vector value);
    Vector GetHorizontalAxis() const;
    void SetHorizontalAxis(Vector value);
    float GetMaxValue() const;
    void SetMaxValue(float value);
    int32_t GetSequenceMaxFrame() const;
    void SetSequenceMaxFrame(int32_t value);
    GCLeafUpdateNode GetParent() const;
    void SetParent(GCLeafUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCStanceScaleUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCStanceScaleUpdateNode(std::string ptr, lua_State* state);
    GCStanceScaleUpdateNode(void *ptr);

    GCAnimParamHandle GetParam() const;
    void SetParam(GCAnimParamHandle value);
    GCUnaryUpdateNode GetParent() const;
    void SetParent(GCUnaryUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GIKTargetSettings_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GIKTargetSettings_t(std::string ptr, lua_State* state);
    GIKTargetSettings_t(void *ptr);

    uint64_t GetTargetSource() const;
    void SetTargetSource(uint64_t value);
    GIKBoneNameAndIndex_t GetBone() const;
    void SetBone(GIKBoneNameAndIndex_t value);
    GAnimParamID GetAnimgraphParameterNamePosition() const;
    void SetAnimgraphParameterNamePosition(GAnimParamID value);
    GAnimParamID GetAnimgraphParameterNameOrientation() const;
    void SetAnimgraphParameterNameOrientation(GAnimParamID value);
    uint64_t GetTargetCoordSystem() const;
    void SetTargetCoordSystem(uint64_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GTestResource_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GTestResource_t(std::string ptr, lua_State* state);
    GTestResource_t(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBaseRendererSource2
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBaseRendererSource2(std::string ptr, lua_State* state);
    GCBaseRendererSource2(void *ptr);

    GCParticleCollectionRendererFloatInput GetRadiusScale() const;
    void SetRadiusScale(GCParticleCollectionRendererFloatInput value);
    GCParticleCollectionRendererFloatInput GetAlphaScale() const;
    void SetAlphaScale(GCParticleCollectionRendererFloatInput value);
    GCParticleCollectionRendererFloatInput GetRollScale() const;
    void SetRollScale(GCParticleCollectionRendererFloatInput value);
    GParticleAttributeIndex_t GetAlpha2Field() const;
    void SetAlpha2Field(GParticleAttributeIndex_t value);
    GCParticleCollectionRendererVecInput GetColorScale() const;
    void SetColorScale(GCParticleCollectionRendererVecInput value);
    uint64_t GetColorBlendType() const;
    void SetColorBlendType(uint64_t value);
    uint64_t GetShaderType() const;
    void SetShaderType(uint64_t value);
    std::string GetStrShaderOverride() const;
    void SetStrShaderOverride(std::string value);
    GCParticleCollectionRendererFloatInput GetCenterXOffset() const;
    void SetCenterXOffset(GCParticleCollectionRendererFloatInput value);
    GCParticleCollectionRendererFloatInput GetCenterYOffset() const;
    void SetCenterYOffset(GCParticleCollectionRendererFloatInput value);
    float GetBumpStrength() const;
    void SetBumpStrength(float value);
    uint64_t GetCropTextureOverride() const;
    void SetCropTextureOverride(uint64_t value);
    std::vector<GTextureGroup_t> GetTexturesInput() const;
    void SetTexturesInput(std::vector<GTextureGroup_t> value);
    float GetAnimationRate() const;
    void SetAnimationRate(float value);
    uint64_t GetAnimationType() const;
    void SetAnimationType(uint64_t value);
    bool GetAnimateInFPS() const;
    void SetAnimateInFPS(bool value);
    GCParticleCollectionRendererFloatInput GetSelfIllumAmount() const;
    void SetSelfIllumAmount(GCParticleCollectionRendererFloatInput value);
    GCParticleCollectionRendererFloatInput GetDiffuseAmount() const;
    void SetDiffuseAmount(GCParticleCollectionRendererFloatInput value);
    GCParticleCollectionRendererFloatInput GetDiffuseClamp() const;
    void SetDiffuseClamp(GCParticleCollectionRendererFloatInput value);
    int32_t GetLightingControlPoint() const;
    void SetLightingControlPoint(int32_t value);
    GParticleAttributeIndex_t GetSelfIllumPerParticle() const;
    void SetSelfIllumPerParticle(GParticleAttributeIndex_t value);
    uint64_t GetOutputBlendMode() const;
    void SetOutputBlendMode(uint64_t value);
    bool GetGammaCorrectVertexColors() const;
    void SetGammaCorrectVertexColors(bool value);
    bool GetSaturateColorPreAlphaBlend() const;
    void SetSaturateColorPreAlphaBlend(bool value);
    GCParticleCollectionRendererFloatInput GetAddSelfAmount() const;
    void SetAddSelfAmount(GCParticleCollectionRendererFloatInput value);
    GCParticleCollectionRendererFloatInput GetDesaturation() const;
    void SetDesaturation(GCParticleCollectionRendererFloatInput value);
    GCParticleCollectionRendererFloatInput GetOverbrightFactor() const;
    void SetOverbrightFactor(GCParticleCollectionRendererFloatInput value);
    int32_t GetHSVShiftControlPoint() const;
    void SetHSVShiftControlPoint(int32_t value);
    uint64_t GetFogType() const;
    void SetFogType(uint64_t value);
    GCParticleCollectionRendererFloatInput GetFogAmount() const;
    void SetFogAmount(GCParticleCollectionRendererFloatInput value);
    bool GetTintByFOW() const;
    void SetTintByFOW(bool value);
    bool GetTintByGlobalLight() const;
    void SetTintByGlobalLight(bool value);
    uint64_t GetPerParticleAlphaReference() const;
    void SetPerParticleAlphaReference(uint64_t value);
    uint64_t GetPerParticleAlphaRefWindow() const;
    void SetPerParticleAlphaRefWindow(uint64_t value);
    uint64_t GetAlphaReferenceType() const;
    void SetAlphaReferenceType(uint64_t value);
    GCParticleCollectionRendererFloatInput GetAlphaReferenceSoftness() const;
    void SetAlphaReferenceSoftness(GCParticleCollectionRendererFloatInput value);
    GCParticleCollectionRendererFloatInput GetSourceAlphaValueToMapToZero() const;
    void SetSourceAlphaValueToMapToZero(GCParticleCollectionRendererFloatInput value);
    GCParticleCollectionRendererFloatInput GetSourceAlphaValueToMapToOne() const;
    void SetSourceAlphaValueToMapToOne(GCParticleCollectionRendererFloatInput value);
    bool GetRefract() const;
    void SetRefract(bool value);
    bool GetRefractSolid() const;
    void SetRefractSolid(bool value);
    GCParticleCollectionRendererFloatInput GetRefractAmount() const;
    void SetRefractAmount(GCParticleCollectionRendererFloatInput value);
    int32_t GetRefractBlurRadius() const;
    void SetRefractBlurRadius(int32_t value);
    uint64_t GetRefractBlurType() const;
    void SetRefractBlurType(uint64_t value);
    bool GetOnlyRenderInEffectsBloomPass() const;
    void SetOnlyRenderInEffectsBloomPass(bool value);
    bool GetOnlyRenderInEffectsWaterPass() const;
    void SetOnlyRenderInEffectsWaterPass(bool value);
    bool GetUseMixedResolutionRendering() const;
    void SetUseMixedResolutionRendering(bool value);
    bool GetOnlyRenderInEffecsGameOverlay() const;
    void SetOnlyRenderInEffecsGameOverlay(bool value);
    std::string GetStencilTestID() const;
    void SetStencilTestID(std::string value);
    bool GetStencilTestExclude() const;
    void SetStencilTestExclude(bool value);
    std::string GetStencilWriteID() const;
    void SetStencilWriteID(std::string value);
    bool GetWriteStencilOnDepthPass() const;
    void SetWriteStencilOnDepthPass(bool value);
    bool GetWriteStencilOnDepthFail() const;
    void SetWriteStencilOnDepthFail(bool value);
    bool GetReverseZBuffering() const;
    void SetReverseZBuffering(bool value);
    bool GetDisableZBuffering() const;
    void SetDisableZBuffering(bool value);
    uint64_t GetFeatheringMode() const;
    void SetFeatheringMode(uint64_t value);
    GCParticleCollectionRendererFloatInput GetFeatheringMinDist() const;
    void SetFeatheringMinDist(GCParticleCollectionRendererFloatInput value);
    GCParticleCollectionRendererFloatInput GetFeatheringMaxDist() const;
    void SetFeatheringMaxDist(GCParticleCollectionRendererFloatInput value);
    GCParticleCollectionRendererFloatInput GetFeatheringFilter() const;
    void SetFeatheringFilter(GCParticleCollectionRendererFloatInput value);
    GCParticleCollectionRendererFloatInput GetDepthBias() const;
    void SetDepthBias(GCParticleCollectionRendererFloatInput value);
    uint64_t GetSortMethod() const;
    void SetSortMethod(uint64_t value);
    bool GetBlendFramesSeq0() const;
    void SetBlendFramesSeq0(bool value);
    bool GetMaxLuminanceBlendingSequence0() const;
    void SetMaxLuminanceBlendingSequence0(bool value);
    GCParticleFunctionRenderer GetParent() const;
    void SetParent(GCParticleFunctionRenderer value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSSDSMsg_ViewRender
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSSDSMsg_ViewRender(std::string ptr, lua_State* state);
    GCSSDSMsg_ViewRender(void *ptr);

    GSceneViewId_t GetViewId() const;
    void SetViewId(GSceneViewId_t value);
    std::string GetViewName() const;
    void SetViewName(std::string value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCZeroPoseUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCZeroPoseUpdateNode(std::string ptr, lua_State* state);
    GCZeroPoseUpdateNode(void *ptr);

    GCLeafUpdateNode GetParent() const;
    void SetParent(GCLeafUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeFitWeight_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeFitWeight_t(std::string ptr, lua_State* state);
    GFeFitWeight_t(void *ptr);

    float GetWeight() const;
    void SetWeight(float value);
    uint16_t GetNode() const;
    void SetNode(uint16_t value);
    uint16_t GetDummy() const;
    void SetDummy(uint16_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFootCycleMetricEvaluator
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFootCycleMetricEvaluator(std::string ptr, lua_State* state);
    GCFootCycleMetricEvaluator(void *ptr);

    std::vector<int32> GetFootIndices() const;
    void SetFootIndices(std::vector<int32> value);
    GCMotionMetricEvaluator GetParent() const;
    void SetParent(GCMotionMetricEvaluator value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFootPositionMetricEvaluator
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFootPositionMetricEvaluator(std::string ptr, lua_State* state);
    GCFootPositionMetricEvaluator(void *ptr);

    std::vector<int32> GetFootIndices() const;
    void SetFootIndices(std::vector<int32> value);
    bool GetIgnoreSlope() const;
    void SetIgnoreSlope(bool value);
    GCMotionMetricEvaluator GetParent() const;
    void SetParent(GCMotionMetricEvaluator value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFlexOp
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFlexOp(std::string ptr, lua_State* state);
    GCFlexOp(void *ptr);

    uint64_t GetOpCode() const;
    void SetOpCode(uint64_t value);
    int32_t GetData() const;
    void SetData(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPointConstraint
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPointConstraint(std::string ptr, lua_State* state);
    GCPointConstraint(void *ptr);

    GCBaseConstraint GetParent() const;
    void SetParent(GCBaseConstraint value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GMotionBlendItem
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GMotionBlendItem(std::string ptr, lua_State* state);
    GMotionBlendItem(void *ptr);

    float GetKeyValue() const;
    void SetKeyValue(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCVectorQuantizer
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCVectorQuantizer(std::string ptr, lua_State* state);
    GCVectorQuantizer(void *ptr);

    std::vector<float32> GetCentroidVectors() const;
    void SetCentroidVectors(std::vector<float32> value);
    int32_t GetCentroids() const;
    void SetCentroids(int32_t value);
    int32_t GetDimensions() const;
    void SetDimensions(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GSignatureOutflow_Resume
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GSignatureOutflow_Resume(std::string ptr, lua_State* state);
    GSignatureOutflow_Resume(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeBoxRigid_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeBoxRigid_t(std::string ptr, lua_State* state);
    GFeBoxRigid_t(void *ptr);

    uint16_t GetNode() const;
    void SetNode(uint16_t value);
    uint16_t GetCollisionMask() const;
    void SetCollisionMask(uint16_t value);
    Vector GetSize() const;
    void SetSize(Vector value);
    uint16_t GetVertexMapIndex() const;
    void SetVertexMapIndex(uint16_t value);
    uint16_t GetFlags() const;
    void SetFlags(uint16_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCIntAnimParameter
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCIntAnimParameter(std::string ptr, lua_State* state);
    GCIntAnimParameter(void *ptr);

    int32_t GetDefaultValue() const;
    void SetDefaultValue(int32_t value);
    int32_t GetMinValue() const;
    void SetMinValue(int32_t value);
    int32_t GetMaxValue() const;
    void SetMaxValue(int32_t value);
    GCConcreteAnimParameter GetParent() const;
    void SetParent(GCConcreteAnimParameter value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmTargetValueNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmTargetValueNode(std::string ptr, lua_State* state);
    GCNmTargetValueNode(void *ptr);

    GCNmValueNode GetParent() const;
    void SetParent(GCNmValueNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEventSimpleLoopFrameUpdate_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEventSimpleLoopFrameUpdate_t(std::string ptr, lua_State* state);
    GEventSimpleLoopFrameUpdate_t(void *ptr);

    GEngineLoopState_t GetLoopState() const;
    void SetLoopState(GEngineLoopState_t value);
    float GetRealTime() const;
    void SetRealTime(float value);
    float GetFrameTime() const;
    void SetFrameTime(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEventServerAdvanceTick_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEventServerAdvanceTick_t(std::string ptr, lua_State* state);
    GEventServerAdvanceTick_t(void *ptr);

    GEventAdvanceTick_t GetParent() const;
    void SetParent(GEventAdvanceTick_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GTimedEvent
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GTimedEvent(std::string ptr, lua_State* state);
    GTimedEvent(void *ptr);

    float GetTimeBetweenEvents() const;
    void SetTimeBetweenEvents(float value);
    float GetNextEvent() const;
    void SetNextEvent(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GTextureGroup_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GTextureGroup_t(std::string ptr, lua_State* state);
    GTextureGroup_t(void *ptr);

    bool GetEnabled() const;
    void SetEnabled(bool value);
    bool GetReplaceTextureWithGradient() const;
    void SetReplaceTextureWithGradient(bool value);
    uint64_t GetTextureType() const;
    void SetTextureType(uint64_t value);
    uint64_t GetTextureChannels() const;
    void SetTextureChannels(uint64_t value);
    uint64_t GetTextureBlendMode() const;
    void SetTextureBlendMode(uint64_t value);
    GCParticleCollectionRendererFloatInput GetTextureBlend() const;
    void SetTextureBlend(GCParticleCollectionRendererFloatInput value);
    GTextureControls_t GetTextureControls() const;
    void SetTextureControls(GTextureControls_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSosGroupActionSoundeventPrioritySchema
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSosGroupActionSoundeventPrioritySchema(std::string ptr, lua_State* state);
    GCSosGroupActionSoundeventPrioritySchema(void *ptr);

    std::string GetPriorityValue() const;
    void SetPriorityValue(std::string value);
    std::string GetPriorityVolumeScalar() const;
    void SetPriorityVolumeScalar(std::string value);
    std::string GetPriorityContributeButDontRead() const;
    void SetPriorityContributeButDontRead(std::string value);
    std::string GetPriorityReadButDontContribute() const;
    void SetPriorityReadButDontContribute(std::string value);
    GCSosGroupActionSchema GetParent() const;
    void SetParent(GCSosGroupActionSchema value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBonePositionMetricEvaluator
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBonePositionMetricEvaluator(std::string ptr, lua_State* state);
    GCBonePositionMetricEvaluator(void *ptr);

    int32_t GetBoneIndex() const;
    void SetBoneIndex(int32_t value);
    GCMotionMetricEvaluator GetParent() const;
    void SetParent(GCMotionMetricEvaluator value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPhysSurfacePropertiesAudio
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPhysSurfacePropertiesAudio(std::string ptr, lua_State* state);
    GCPhysSurfacePropertiesAudio(void *ptr);

    float GetReflectivity() const;
    void SetReflectivity(float value);
    float GetHardnessFactor() const;
    void SetHardnessFactor(float value);
    float GetRoughnessFactor() const;
    void SetRoughnessFactor(float value);
    float GetRoughThreshold() const;
    void SetRoughThreshold(float value);
    float GetHardThreshold() const;
    void SetHardThreshold(float value);
    float GetHardVelocityThreshold() const;
    void SetHardVelocityThreshold(float value);
    float GetStaticImpactVolume() const;
    void SetStaticImpactVolume(float value);
    float GetOcclusionFactor() const;
    void SetOcclusionFactor(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmIDValueNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmIDValueNode(std::string ptr, lua_State* state);
    GCNmIDValueNode(void *ptr);

    GCNmValueNode GetParent() const;
    void SetParent(GCNmValueNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeSimdNodeBase_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeSimdNodeBase_t(std::string ptr, lua_State* state);
    GFeSimdNodeBase_t(void *ptr);

    std::vector<uint16_t> GetNode() const;
    void SetNode(std::vector<uint16_t> value);
    std::vector<uint16_t> GetNodeX0() const;
    void SetNodeX0(std::vector<uint16_t> value);
    std::vector<uint16_t> GetNodeX1() const;
    void SetNodeX1(std::vector<uint16_t> value);
    std::vector<uint16_t> GetNodeY0() const;
    void SetNodeY0(std::vector<uint16_t> value);
    std::vector<uint16_t> GetNodeY1() const;
    void SetNodeY1(std::vector<uint16_t> value);
    std::vector<uint16_t> GetDummy() const;
    void SetDummy(std::vector<uint16_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GPermModelExtPart_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GPermModelExtPart_t(std::string ptr, lua_State* state);
    GPermModelExtPart_t(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    int32_t GetParent() const;
    void SetParent(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCurrentRotationVelocityMetricEvaluator
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCurrentRotationVelocityMetricEvaluator(std::string ptr, lua_State* state);
    GCCurrentRotationVelocityMetricEvaluator(void *ptr);

    GCMotionMetricEvaluator GetParent() const;
    void SetParent(GCMotionMetricEvaluator value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimEventDefinition
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimEventDefinition(std::string ptr, lua_State* state);
    GCAnimEventDefinition(void *ptr);

    int32_t GetFrame() const;
    void SetFrame(int32_t value);
    int32_t GetEndFrame() const;
    void SetEndFrame(int32_t value);
    float GetCycle() const;
    void SetCycle(float value);
    float GetDuration() const;
    void SetDuration(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimEnum
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimEnum(std::string ptr, lua_State* state);
    GCAnimEnum(void *ptr);

    uint32_t GetValue() const;
    void SetValue(uint32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimFrameBlockAnim
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimFrameBlockAnim(std::string ptr, lua_State* state);
    GCAnimFrameBlockAnim(void *ptr);

    int32_t GetStartFrame() const;
    void SetStartFrame(int32_t value);
    int32_t GetEndFrame() const;
    void SetEndFrame(int32_t value);
    std::vector<int32> GetSegmentIndexArray() const;
    void SetSegmentIndexArray(std::vector<int32> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmVirtualParameterIDNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmVirtualParameterIDNode(std::string ptr, lua_State* state);
    GCNmVirtualParameterIDNode(void *ptr);

    int16_t GetChildNodeIdx() const;
    void SetChildNodeIdx(int16_t value);
    GCNmIDValueNode GetParent() const;
    void SetParent(GCNmIDValueNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFlashlightEffect
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFlashlightEffect(std::string ptr, lua_State* state);
    GCFlashlightEffect(void *ptr);

    bool GetIsOn() const;
    void SetIsOn(bool value);
    bool GetMuzzleFlashEnabled() const;
    void SetMuzzleFlashEnabled(bool value);
    float GetMuzzleFlashBrightness() const;
    void SetMuzzleFlashBrightness(float value);
    Vector GetMuzzleFlashOrigin() const;
    void SetMuzzleFlashOrigin(Vector value);
    float GetFov() const;
    void SetFov(float value);
    float GetFarZ() const;
    void SetFarZ(float value);
    float GetLinearAtten() const;
    void SetLinearAtten(float value);
    bool GetCastsShadows() const;
    void SetCastsShadows(bool value);
    float GetCurrentPullBackDist() const;
    void SetCurrentPullBackDist(float value);
    std::string GetTextureName() const;
    void SetTextureName(std::string value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeBuildSphereRigid_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeBuildSphereRigid_t(std::string ptr, lua_State* state);
    GFeBuildSphereRigid_t(void *ptr);

    int32_t GetPriority() const;
    void SetPriority(int32_t value);
    uint32_t GetVertexMapHash() const;
    void SetVertexMapHash(uint32_t value);
    GFeSphereRigid_t GetParent() const;
    void SetParent(GFeSphereRigid_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimEncodedFrames
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimEncodedFrames(std::string ptr, lua_State* state);
    GCAnimEncodedFrames(void *ptr);

    int32_t GetFrames() const;
    void SetFrames(int32_t value);
    int32_t GetFramesPerBlock() const;
    void SetFramesPerBlock(int32_t value);
    std::vector<GCAnimFrameBlockAnim> GetFrameblockArray() const;
    void SetFrameblockArray(std::vector<GCAnimFrameBlockAnim> value);
    GCAnimEncodeDifference GetUsageDifferences() const;
    void SetUsageDifferences(GCAnimEncodeDifference value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEventSetTime_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEventSetTime_t(std::string ptr, lua_State* state);
    GEventSetTime_t(void *ptr);

    GEngineLoopState_t GetLoopState() const;
    void SetLoopState(GEngineLoopState_t value);
    int32_t GetClientOutputFrames() const;
    void SetClientOutputFrames(int32_t value);
    double GetRealTime() const;
    void SetRealTime(double value);
    double GetRenderTime() const;
    void SetRenderTime(double value);
    double GetRenderFrameTime() const;
    void SetRenderFrameTime(double value);
    double GetRenderFrameTimeUnbounded() const;
    void SetRenderFrameTimeUnbounded(double value);
    double GetRenderFrameTimeUnscaled() const;
    void SetRenderFrameTimeUnscaled(double value);
    double GetTickRemainder() const;
    void SetTickRemainder(double value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GOldFeEdge_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GOldFeEdge_t(std::string ptr, lua_State* state);
    GOldFeEdge_t(void *ptr);

    std::vector<float> GetK() const;
    void SetK(std::vector<float> value);
    float GetInvA() const;
    void SetInvA(float value);
    float GetT() const;
    void SetT(float value);
    float GetThetaRelaxed() const;
    void SetThetaRelaxed(float value);
    float GetThetaFactor() const;
    void SetThetaFactor(float value);
    float GetC01() const;
    void SetC01(float value);
    float GetC02() const;
    void SetC02(float value);
    float GetC03() const;
    void SetC03(float value);
    float GetC04() const;
    void SetC04(float value);
    float GetAxialModelDist() const;
    void SetAxialModelDist(float value);
    std::vector<float> GetAxialModelWeights() const;
    void SetAxialModelWeights(std::vector<float> value);
    std::vector<uint16_t> GetNode() const;
    void SetNode(std::vector<uint16_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCStanceOverrideUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCStanceOverrideUpdateNode(std::string ptr, lua_State* state);
    GCStanceOverrideUpdateNode(void *ptr);

    std::vector<GStanceInfo_t> GetFootStanceInfo() const;
    void SetFootStanceInfo(std::vector<GStanceInfo_t> value);
    GCAnimUpdateNodeRef GetStanceSourceNode() const;
    void SetStanceSourceNode(GCAnimUpdateNodeRef value);
    GCAnimParamHandle GetParameter() const;
    void SetParameter(GCAnimParamHandle value);
    uint64_t GetMode() const;
    void SetMode(uint64_t value);
    GCUnaryUpdateNode GetParent() const;
    void SetParent(GCUnaryUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class Gconstraint_breakableparams_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    Gconstraint_breakableparams_t(std::string ptr, lua_State* state);
    Gconstraint_breakableparams_t(void *ptr);

    float GetStrength() const;
    void SetStrength(float value);
    float GetForceLimit() const;
    void SetForceLimit(float value);
    float GetTorqueLimit() const;
    void SetTorqueLimit(float value);
    std::vector<float> GetBodyMassScale() const;
    void SetBodyMassScale(std::vector<float> value);
    bool GetIsActive() const;
    void SetIsActive(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCStateNodeTransitionData
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCStateNodeTransitionData(std::string ptr, lua_State* state);
    GCStateNodeTransitionData(void *ptr);

    GCBlendCurve GetCurve() const;
    void SetCurve(GCBlendCurve value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMotionMatchingUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMotionMatchingUpdateNode(std::string ptr, lua_State* state);
    GCMotionMatchingUpdateNode(void *ptr);

    GCMotionDataSet GetDataSet() const;
    void SetDataSet(GCMotionDataSet value);
    std::vector<float32> GetWeights() const;
    void SetWeights(std::vector<float32> value);
    bool GetSearchEveryTick() const;
    void SetSearchEveryTick(bool value);
    float GetSearchInterval() const;
    void SetSearchInterval(float value);
    bool GetSearchWhenClipEnds() const;
    void SetSearchWhenClipEnds(bool value);
    bool GetSearchWhenGoalChanges() const;
    void SetSearchWhenGoalChanges(bool value);
    GCBlendCurve GetBlendCurve() const;
    void SetBlendCurve(GCBlendCurve value);
    float GetSampleRate() const;
    void SetSampleRate(float value);
    float GetBlendTime() const;
    void SetBlendTime(float value);
    bool GetLockClipWhenWaning() const;
    void SetLockClipWhenWaning(bool value);
    float GetSelectionThreshold() const;
    void SetSelectionThreshold(float value);
    float GetReselectionTimeWindow() const;
    void SetReselectionTimeWindow(float value);
    bool GetEnableRotationCorrection() const;
    void SetEnableRotationCorrection(bool value);
    bool GetGoalAssist() const;
    void SetGoalAssist(bool value);
    float GetGoalAssistDistance() const;
    void SetGoalAssistDistance(float value);
    float GetGoalAssistTolerance() const;
    void SetGoalAssistTolerance(float value);
    GCAnimInputDamping GetDistanceScale_Damping() const;
    void SetDistanceScale_Damping(GCAnimInputDamping value);
    float GetDistanceScale_OuterRadius() const;
    void SetDistanceScale_OuterRadius(float value);
    float GetDistanceScale_InnerRadius() const;
    void SetDistanceScale_InnerRadius(float value);
    float GetDistanceScale_MaxScale() const;
    void SetDistanceScale_MaxScale(float value);
    float GetDistanceScale_MinScale() const;
    void SetDistanceScale_MinScale(float value);
    bool GetEnableDistanceScaling() const;
    void SetEnableDistanceScaling(bool value);
    GCLeafUpdateNode GetParent() const;
    void SetParent(GCLeafUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmSyncTrack__Event_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmSyncTrack__Event_t(std::string ptr, lua_State* state);
    GCNmSyncTrack__Event_t(void *ptr);

    GNmPercent_t GetStartTime() const;
    void SetStartTime(GNmPercent_t value);
    GNmPercent_t GetDuration() const;
    void SetDuration(GNmPercent_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEventSplitScreenStateChanged_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEventSplitScreenStateChanged_t(std::string ptr, lua_State* state);
    GEventSplitScreenStateChanged_t(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GParticleNamedValueSource_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GParticleNamedValueSource_t(std::string ptr, lua_State* state);
    GParticleNamedValueSource_t(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    bool GetIsPublic() const;
    void SetIsPublic(bool value);
    uint64_t GetValueType() const;
    void SetValueType(uint64_t value);
    GParticleNamedValueConfiguration_t GetDefaultConfig() const;
    void SetDefaultConfig(GParticleNamedValueConfiguration_t value);
    std::vector<GParticleNamedValueConfiguration_t> GetNamedConfigs() const;
    void SetNamedConfigs(std::vector<GParticleNamedValueConfiguration_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GMaterialParamBuffer_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GMaterialParamBuffer_t(std::string ptr, lua_State* state);
    GMaterialParamBuffer_t(void *ptr);

    GMaterialParam_t GetParent() const;
    void SetParent(GMaterialParam_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEventPostDataUpdate_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEventPostDataUpdate_t(std::string ptr, lua_State* state);
    GEventPostDataUpdate_t(void *ptr);

    int32_t GetCount() const;
    void SetCount(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GRenderProjectedMaterial_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GRenderProjectedMaterial_t(std::string ptr, lua_State* state);
    GRenderProjectedMaterial_t(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSSDSMsg_ViewTargetList
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSSDSMsg_ViewTargetList(std::string ptr, lua_State* state);
    GCSSDSMsg_ViewTargetList(void *ptr);

    GSceneViewId_t GetViewId() const;
    void SetViewId(GSceneViewId_t value);
    std::string GetViewName() const;
    void SetViewName(std::string value);
    std::vector<GCSSDSMsg_ViewTarget> GetTargets() const;
    void SetTargets(std::vector<GCSSDSMsg_ViewTarget> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeSimdAnimStrayRadius_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeSimdAnimStrayRadius_t(std::string ptr, lua_State* state);
    GFeSimdAnimStrayRadius_t(void *ptr);

    float GetMaxDist() const;
    void SetMaxDist(float value);
    float GetRelaxationFactor() const;
    void SetRelaxationFactor(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimUser
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimUser(std::string ptr, lua_State* state);
    GCAnimUser(void *ptr);

    int32_t GetType() const;
    void SetType(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeSpringIntegrator_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeSpringIntegrator_t(std::string ptr, lua_State* state);
    GFeSpringIntegrator_t(void *ptr);

    std::vector<uint16_t> GetNode() const;
    void SetNode(std::vector<uint16_t> value);
    float GetSpringRestLength() const;
    void SetSpringRestLength(float value);
    float GetSpringConstant() const;
    void SetSpringConstant(float value);
    float GetSpringDamping() const;
    void SetSpringDamping(float value);
    float GetNodeWeight0() const;
    void SetNodeWeight0(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCModelConfigElement_UserPick
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCModelConfigElement_UserPick(std::string ptr, lua_State* state);
    GCModelConfigElement_UserPick(void *ptr);

    std::vector<CUtlString> GetChoices() const;
    void SetChoices(std::vector<CUtlString> value);
    GCModelConfigElement GetParent() const;
    void SetParent(GCModelConfigElement value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GRenderSkeletonBone_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GRenderSkeletonBone_t(std::string ptr, lua_State* state);
    GRenderSkeletonBone_t(void *ptr);

    std::string GetBoneName() const;
    void SetBoneName(std::string value);
    std::string GetParentName() const;
    void SetParentName(std::string value);
    GSkeletonBoneBounds_t GetBbox() const;
    void SetBbox(GSkeletonBoneBounds_t value);
    float GetSphereRadius() const;
    void SetSphereRadius(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GAnimationDecodeDebugDump_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GAnimationDecodeDebugDump_t(std::string ptr, lua_State* state);
    GAnimationDecodeDebugDump_t(void *ptr);

    uint64_t GetProcessingType() const;
    void SetProcessingType(uint64_t value);
    std::vector<GAnimationDecodeDebugDumpElement_t> GetElems() const;
    void SetElems(std::vector<GAnimationDecodeDebugDumpElement_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GPARTICLE_EHANDLE__
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GPARTICLE_EHANDLE__(std::string ptr, lua_State* state);
    GPARTICLE_EHANDLE__(void *ptr);

    int32_t GetUnused() const;
    void SetUnused(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeCollisionPlane_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeCollisionPlane_t(std::string ptr, lua_State* state);
    GFeCollisionPlane_t(void *ptr);

    uint16_t GetCtrlParent() const;
    void SetCtrlParent(uint16_t value);
    uint16_t GetChildNode() const;
    void SetChildNode(uint16_t value);
    GRnPlane_t GetPlane() const;
    void SetPlane(GRnPlane_t value);
    float GetStrength() const;
    void SetStrength(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimCycle
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimCycle(std::string ptr, lua_State* state);
    GCAnimCycle(void *ptr);

    GCCycleBase GetParent() const;
    void SetParent(GCCycleBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmSyncTrack__EventMarker_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmSyncTrack__EventMarker_t(std::string ptr, lua_State* state);
    GCNmSyncTrack__EventMarker_t(void *ptr);

    GNmPercent_t GetStartTime() const;
    void SetStartTime(GNmPercent_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimGraphSettingsManager
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimGraphSettingsManager(std::string ptr, lua_State* state);
    GCAnimGraphSettingsManager(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCRagdollUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCRagdollUpdateNode(std::string ptr, lua_State* state);
    GCRagdollUpdateNode(void *ptr);

    int32_t GetWeightListIndex() const;
    void SetWeightListIndex(int32_t value);
    uint64_t GetPoseControlMethod() const;
    void SetPoseControlMethod(uint64_t value);
    GCUnaryUpdateNode GetParent() const;
    void SetParent(GCUnaryUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEntityComponentHelper
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEntityComponentHelper(std::string ptr, lua_State* state);
    GCEntityComponentHelper(void *ptr);

    uint32_t GetFlags() const;
    void SetFlags(uint32_t value);
    GEntComponentInfo_t GetInfo() const;
    void SetInfo(GEntComponentInfo_t value);
    int32_t GetPriority() const;
    void SetPriority(int32_t value);
    GCEntityComponentHelper GetNext() const;
    void SetNext(GCEntityComponentHelper value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCompositeMaterial_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCompositeMaterial_t(std::string ptr, lua_State* state);
    GCompositeMaterial_t(void *ptr);

    std::vector<GGeneratedTextureHandle_t> GetGeneratedTextures() const;
    void SetGeneratedTextures(std::vector<GGeneratedTextureHandle_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GSignatureOutflow_Continue
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GSignatureOutflow_Continue(std::string ptr, lua_State* state);
    GSignatureOutflow_Continue(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GWeightList
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GWeightList(std::string ptr, lua_State* state);
    GWeightList(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    std::vector<float32> GetWeights() const;
    void SetWeights(std::vector<float32> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GRnBodyDesc_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GRnBodyDesc_t(std::string ptr, lua_State* state);
    GRnBodyDesc_t(void *ptr);

    std::string GetDebugName() const;
    void SetDebugName(std::string value);
    Vector GetPosition() const;
    void SetPosition(Vector value);
    Vector GetLinearVelocity() const;
    void SetLinearVelocity(Vector value);
    Vector GetAngularVelocity() const;
    void SetAngularVelocity(Vector value);
    Vector GetLocalMassCenter() const;
    void SetLocalMassCenter(Vector value);
    std::vector<Vector> GetLocalInertiaInv() const;
    void SetLocalInertiaInv(std::vector<Vector> value);
    float GetMassInv() const;
    void SetMassInv(float value);
    float GetGameMass() const;
    void SetGameMass(float value);
    float GetInertiaScaleInv() const;
    void SetInertiaScaleInv(float value);
    float GetLinearDamping() const;
    void SetLinearDamping(float value);
    float GetAngularDamping() const;
    void SetAngularDamping(float value);
    float GetLinearDrag() const;
    void SetLinearDrag(float value);
    float GetAngularDrag() const;
    void SetAngularDrag(float value);
    float GetLinearBuoyancyDrag() const;
    void SetLinearBuoyancyDrag(float value);
    float GetAngularBuoyancyDrag() const;
    void SetAngularBuoyancyDrag(float value);
    Vector GetLastAwakeForceAccum() const;
    void SetLastAwakeForceAccum(Vector value);
    Vector GetLastAwakeTorqueAccum() const;
    void SetLastAwakeTorqueAccum(Vector value);
    float GetBuoyancyFactor() const;
    void SetBuoyancyFactor(float value);
    float GetGravityScale() const;
    void SetGravityScale(float value);
    float GetTimeScale() const;
    void SetTimeScale(float value);
    int32_t GetBodyType() const;
    void SetBodyType(int32_t value);
    uint32_t GetGameIndex() const;
    void SetGameIndex(uint32_t value);
    uint32_t GetGameFlags() const;
    void SetGameFlags(uint32_t value);
    int32_t GetMinVelocityIterations() const;
    void SetMinVelocityIterations(int32_t value);
    int32_t GetMinPositionIterations() const;
    void SetMinPositionIterations(int32_t value);
    int32_t GetMassPriority() const;
    void SetMassPriority(int32_t value);
    bool GetEnabled() const;
    void SetEnabled(bool value);
    bool GetSleeping() const;
    void SetSleeping(bool value);
    bool GetIsContinuousEnabled() const;
    void SetIsContinuousEnabled(bool value);
    bool GetDragEnabled() const;
    void SetDragEnabled(bool value);
    bool GetBuoyancyDragEnabled() const;
    void SetBuoyancyDragEnabled(bool value);
    bool GetGravityDisabled() const;
    void SetGravityDisabled(bool value);
    bool GetSpeculativeEnabled() const;
    void SetSpeculativeEnabled(bool value);
    bool GetHasShadowController() const;
    void SetHasShadowController(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFeMorphLayer
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFeMorphLayer(std::string ptr, lua_State* state);
    GCFeMorphLayer(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    uint32_t GetNameHash() const;
    void SetNameHash(uint32_t value);
    std::vector<uint16> GetNodes() const;
    void SetNodes(std::vector<uint16> value);
    std::vector<Vector> GetInitPos() const;
    void SetInitPos(std::vector<Vector> value);
    std::vector<float32> GetGravity() const;
    void SetGravity(std::vector<float32> value);
    std::vector<float32> GetGoalStrength() const;
    void SetGoalStrength(std::vector<float32> value);
    std::vector<float32> GetGoalDamping() const;
    void SetGoalDamping(std::vector<float32> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GAnimNodeOutputID
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GAnimNodeOutputID(std::string ptr, lua_State* state);
    GAnimNodeOutputID(void *ptr);

    uint32_t GetId() const;
    void SetId(uint32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEventClientSceneSystemThreadStateChange_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEventClientSceneSystemThreadStateChange_t(std::string ptr, lua_State* state);
    GEventClientSceneSystemThreadStateChange_t(void *ptr);

    bool GetThreadsActive() const;
    void SetThreadsActive(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEventClientPreSimulate_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEventClientPreSimulate_t(std::string ptr, lua_State* state);
    GEventClientPreSimulate_t(void *ptr);

    GEventSimulate_t GetParent() const;
    void SetParent(GEventSimulate_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GClutterSceneObject_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GClutterSceneObject_t(std::string ptr, lua_State* state);
    GClutterSceneObject_t(void *ptr);

    GAABB_t GetBounds() const;
    void SetBounds(GAABB_t value);
    uint64_t GetFlags() const;
    void SetFlags(uint64_t value);
    int16_t GetLayer() const;
    void SetLayer(int16_t value);
    std::vector<Vector> GetInstancePositions() const;
    void SetInstancePositions(std::vector<Vector> value);
    std::vector<float32> GetInstanceScales() const;
    void SetInstanceScales(std::vector<float32> value);
    std::vector<Color> GetInstanceTintSrgb() const;
    void SetInstanceTintSrgb(std::vector<Color> value);
    std::vector<GClutterTile_t> GetTiles() const;
    void SetTiles(std::vector<GClutterTile_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPoseHandle
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPoseHandle(std::string ptr, lua_State* state);
    GCPoseHandle(void *ptr);

    uint16_t GetIndex() const;
    void SetIndex(uint16_t value);
    uint64_t GetType() const;
    void SetType(uint64_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimScriptBase
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimScriptBase(std::string ptr, lua_State* state);
    GCAnimScriptBase(void *ptr);

    bool GetIsValid() const;
    void SetIsValid(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCVoiceContainerBlender
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCVoiceContainerBlender(std::string ptr, lua_State* state);
    GCVoiceContainerBlender(void *ptr);

    float GetBlendFactor() const;
    void SetBlendFactor(float value);
    GCVoiceContainerBase GetParent() const;
    void SetParent(GCVoiceContainerBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class Gvphysics_save_cphysicsbody_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    Gvphysics_save_cphysicsbody_t(std::string ptr, lua_State* state);
    Gvphysics_save_cphysicsbody_t(void *ptr);

    uint64_t GetOldPointer() const;
    void SetOldPointer(uint64_t value);
    GRnBodyDesc_t GetParent() const;
    void SetParent(GRnBodyDesc_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCRagdollAnimTag
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCRagdollAnimTag(std::string ptr, lua_State* state);
    GCRagdollAnimTag(void *ptr);

    uint64_t GetPoseControl() const;
    void SetPoseControl(uint64_t value);
    float GetFrequency() const;
    void SetFrequency(float value);
    float GetDampingRatio() const;
    void SetDampingRatio(float value);
    float GetDecayDuration() const;
    void SetDecayDuration(float value);
    float GetDecayBias() const;
    void SetDecayBias(float value);
    bool GetDestroy() const;
    void SetDestroy(bool value);
    GCAnimTagBase GetParent() const;
    void SetParent(GCAnimTagBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GIClientAlphaProperty
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GIClientAlphaProperty(std::string ptr, lua_State* state);
    GIClientAlphaProperty(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GPermModelData_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GPermModelData_t(std::string ptr, lua_State* state);
    GPermModelData_t(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    GPermModelInfo_t GetModelInfo() const;
    void SetModelInfo(GPermModelInfo_t value);
    std::vector<GPermModelExtPart_t> GetExtParts() const;
    void SetExtParts(std::vector<GPermModelExtPart_t> value);
    std::vector<uint64> GetRefMeshGroupMasks() const;
    void SetRefMeshGroupMasks(std::vector<uint64> value);
    std::vector<uint64> GetRefPhysGroupMasks() const;
    void SetRefPhysGroupMasks(std::vector<uint64> value);
    std::vector<uint8> GetRefLODGroupMasks() const;
    void SetRefLODGroupMasks(std::vector<uint8> value);
    std::vector<float32> GetLodGroupSwitchDistances() const;
    void SetLodGroupSwitchDistances(std::vector<float32> value);
    std::vector<CUtlString> GetMeshGroups() const;
    void SetMeshGroups(std::vector<CUtlString> value);
    std::vector<GMaterialGroup_t> GetMaterialGroups() const;
    void SetMaterialGroups(std::vector<GMaterialGroup_t> value);
    uint64_t GetDefaultMeshGroupMask() const;
    void SetDefaultMeshGroupMask(uint64_t value);
    GModelSkeletonData_t GetModelSkeleton() const;
    void SetModelSkeleton(GModelSkeletonData_t value);
    std::vector<int16> GetRemappingTable() const;
    void SetRemappingTable(std::vector<int16> value);
    std::vector<uint16> GetRemappingTableStarts() const;
    void SetRemappingTableStarts(std::vector<uint16> value);
    std::vector<GModelBoneFlexDriver_t> GetBoneFlexDrivers() const;
    void SetBoneFlexDrivers(std::vector<GModelBoneFlexDriver_t> value);
    GCModelConfigList GetModelConfigList() const;
    void SetModelConfigList(GCModelConfigList value);
    std::vector<CUtlString> GetBodyGroupsHiddenInTools() const;
    void SetBodyGroupsHiddenInTools(std::vector<CUtlString> value);
    std::vector<GPermModelDataAnimatedMaterialAttribute_t> GetAnimatedMaterialAttributes() const;
    void SetAnimatedMaterialAttributes(std::vector<GPermModelDataAnimatedMaterialAttribute_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFootFixedSettings
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFootFixedSettings(std::string ptr, lua_State* state);
    GFootFixedSettings(void *ptr);

    GTraceSettings_t GetTraceSettings() const;
    void SetTraceSettings(GTraceSettings_t value);
    Vector GetFootBaseBindPosePositionMS() const;
    void SetFootBaseBindPosePositionMS(Vector value);
    float GetFootBaseLength() const;
    void SetFootBaseLength(float value);
    float GetMaxRotationLeft() const;
    void SetMaxRotationLeft(float value);
    float GetMaxRotationRight() const;
    void SetMaxRotationRight(float value);
    int32_t GetFootstepLandedTagIndex() const;
    void SetFootstepLandedTagIndex(int32_t value);
    bool GetEnableTracing() const;
    void SetEnableTracing(bool value);
    float GetTraceAngleBlend() const;
    void SetTraceAngleBlend(float value);
    int32_t GetDisableTagIndex() const;
    void SetDisableTagIndex(int32_t value);
    int32_t GetFootIndex() const;
    void SetFootIndex(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSolveIKTargetHandle_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSolveIKTargetHandle_t(std::string ptr, lua_State* state);
    GCSolveIKTargetHandle_t(void *ptr);

    GCAnimParamHandle GetPositionHandle() const;
    void SetPositionHandle(GCAnimParamHandle value);
    GCAnimParamHandle GetOrientationHandle() const;
    void SetOrientationHandle(GCAnimParamHandle value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBlendUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBlendUpdateNode(std::string ptr, lua_State* state);
    GCBlendUpdateNode(void *ptr);

    std::vector<GCAnimUpdateNodeRef> GetChildren() const;
    void SetChildren(std::vector<GCAnimUpdateNodeRef> value);
    std::vector<uint8> GetSortedOrder() const;
    void SetSortedOrder(std::vector<uint8> value);
    std::vector<float32> GetTargetValues() const;
    void SetTargetValues(std::vector<float32> value);
    uint64_t GetBlendValueSource() const;
    void SetBlendValueSource(uint64_t value);
    GCAnimParamHandle GetParamIndex() const;
    void SetParamIndex(GCAnimParamHandle value);
    GCAnimInputDamping GetDamping() const;
    void SetDamping(GCAnimInputDamping value);
    uint64_t GetBlendKeyType() const;
    void SetBlendKeyType(uint64_t value);
    bool GetLockBlendOnReset() const;
    void SetLockBlendOnReset(bool value);
    bool GetSyncCycles() const;
    void SetSyncCycles(bool value);
    bool GetLoop() const;
    void SetLoop(bool value);
    bool GetLockWhenWaning() const;
    void SetLockWhenWaning(bool value);
    GCAnimUpdateNodeBase GetParent() const;
    void SetParent(GCAnimUpdateNodeBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimationGraphVisualizerSphere
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimationGraphVisualizerSphere(std::string ptr, lua_State* state);
    GCAnimationGraphVisualizerSphere(void *ptr);

    Vector GetWsPosition() const;
    void SetWsPosition(Vector value);
    float GetRadius() const;
    void SetRadius(float value);
    Color GetColor() const;
    void SetColor(Color value);
    GCAnimationGraphVisualizerPrimitiveBase GetParent() const;
    void SetParent(GCAnimationGraphVisualizerPrimitiveBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GMaterialParamFloat_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GMaterialParamFloat_t(std::string ptr, lua_State* state);
    GMaterialParamFloat_t(void *ptr);

    float GetValue() const;
    void SetValue(float value);
    GMaterialParam_t GetParent() const;
    void SetParent(GMaterialParam_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEventServerSimulate_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEventServerSimulate_t(std::string ptr, lua_State* state);
    GEventServerSimulate_t(void *ptr);

    GEventSimulate_t GetParent() const;
    void SetParent(GEventSimulate_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCVoiceContainerEnvelopeAnalyzer
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCVoiceContainerEnvelopeAnalyzer(std::string ptr, lua_State* state);
    GCVoiceContainerEnvelopeAnalyzer(void *ptr);

    uint64_t GetMode() const;
    void SetMode(uint64_t value);
    int32_t GetSamples() const;
    void SetSamples(int32_t value);
    float GetThreshold() const;
    void SetThreshold(float value);
    GCVoiceContainerAnalysisBase GetParent() const;
    void SetParent(GCVoiceContainerAnalysisBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFollowAttachmentSettings_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFollowAttachmentSettings_t(std::string ptr, lua_State* state);
    GFollowAttachmentSettings_t(void *ptr);

    GCAnimAttachment GetAttachment() const;
    void SetAttachment(GCAnimAttachment value);
    int32_t GetBoneIndex() const;
    void SetBoneIndex(int32_t value);
    bool GetMatchTranslation() const;
    void SetMatchTranslation(bool value);
    bool GetMatchRotation() const;
    void SetMatchRotation(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GJiggleBoneSettings_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GJiggleBoneSettings_t(std::string ptr, lua_State* state);
    GJiggleBoneSettings_t(void *ptr);

    int32_t GetBoneIndex() const;
    void SetBoneIndex(int32_t value);
    float GetSpringStrength() const;
    void SetSpringStrength(float value);
    float GetMaxTimeStep() const;
    void SetMaxTimeStep(float value);
    float GetDamping() const;
    void SetDamping(float value);
    Vector GetBoundsMaxLS() const;
    void SetBoundsMaxLS(Vector value);
    Vector GetBoundsMinLS() const;
    void SetBoundsMinLS(Vector value);
    uint64_t GetSimSpace() const;
    void SetSimSpace(uint64_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimStateMachineUpdater
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimStateMachineUpdater(std::string ptr, lua_State* state);
    GCAnimStateMachineUpdater(void *ptr);

    std::vector<GCStateUpdateData> GetStates() const;
    void SetStates(std::vector<GCStateUpdateData> value);
    std::vector<GCTransitionUpdateData> GetTransitions() const;
    void SetTransitions(std::vector<GCTransitionUpdateData> value);
    int32_t GetStartStateIndex() const;
    void SetStartStateIndex(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmControlParameterFloatNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmControlParameterFloatNode(std::string ptr, lua_State* state);
    GCNmControlParameterFloatNode(void *ptr);

    GCNmFloatValueNode GetParent() const;
    void SetParent(GCNmFloatValueNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSeqCmdLayer
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSeqCmdLayer(std::string ptr, lua_State* state);
    GCSeqCmdLayer(void *ptr);

    int16_t GetCmd() const;
    void SetCmd(int16_t value);
    int16_t GetLocalReference() const;
    void SetLocalReference(int16_t value);
    int16_t GetLocalBonemask() const;
    void SetLocalBonemask(int16_t value);
    int16_t GetDstResult() const;
    void SetDstResult(int16_t value);
    int16_t GetSrcResult() const;
    void SetSrcResult(int16_t value);
    bool GetSpline() const;
    void SetSpline(bool value);
    float GetVar1() const;
    void SetVar1(float value);
    float GetVar2() const;
    void SetVar2(float value);
    int16_t GetLineNumber() const;
    void SetLineNumber(int16_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimScriptComponentUpdater
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimScriptComponentUpdater(std::string ptr, lua_State* state);
    GCAnimScriptComponentUpdater(void *ptr);

    GAnimScriptHandle GetScript() const;
    void SetScript(GAnimScriptHandle value);
    GCAnimComponentUpdater GetParent() const;
    void SetParent(GCAnimComponentUpdater value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeRigidColliderIndices_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeRigidColliderIndices_t(std::string ptr, lua_State* state);
    GFeRigidColliderIndices_t(void *ptr);

    uint16_t GetTaperedCapsuleRigidIndex() const;
    void SetTaperedCapsuleRigidIndex(uint16_t value);
    uint16_t GetSphereRigidIndex() const;
    void SetSphereRigidIndex(uint16_t value);
    uint16_t GetBoxRigidIndex() const;
    void SetBoxRigidIndex(uint16_t value);
    uint16_t GetCollisionPlaneIndex() const;
    void SetCollisionPlaneIndex(uint16_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSeqAutoLayer
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSeqAutoLayer(std::string ptr, lua_State* state);
    GCSeqAutoLayer(void *ptr);

    int16_t GetLocalReference() const;
    void SetLocalReference(int16_t value);
    int16_t GetLocalPose() const;
    void SetLocalPose(int16_t value);
    GCSeqAutoLayerFlag GetFlags() const;
    void SetFlags(GCSeqAutoLayerFlag value);
    float GetStart() const;
    void SetStart(float value);
    float GetPeak() const;
    void SetPeak(float value);
    float GetTail() const;
    void SetTail(float value);
    float GetEnd() const;
    void SetEnd(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GBakedLightingInfo_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GBakedLightingInfo_t(std::string ptr, lua_State* state);
    GBakedLightingInfo_t(void *ptr);

    uint32_t GetLightmapVersionNumber() const;
    void SetLightmapVersionNumber(uint32_t value);
    uint32_t GetLightmapGameVersionNumber() const;
    void SetLightmapGameVersionNumber(uint32_t value);
    Vector2D GetLightmapUvScale() const;
    void SetLightmapUvScale(Vector2D value);
    bool GetHasLightmaps() const;
    void SetHasLightmaps(bool value);
    bool GetBakedShadowsGamma20() const;
    void SetBakedShadowsGamma20(bool value);
    bool GetCompressionEnabled() const;
    void SetCompressionEnabled(bool value);
    uint32_t GetChartPackIterations() const;
    void SetChartPackIterations(uint32_t value);
    uint32_t GetVradQuality() const;
    void SetVradQuality(uint32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCExampleSchemaVData_PolymorphicBase
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCExampleSchemaVData_PolymorphicBase(std::string ptr, lua_State* state);
    GCExampleSchemaVData_PolymorphicBase(void *ptr);

    int32_t GetBase() const;
    void SetBase(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFourVectors2D
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFourVectors2D(std::string ptr, lua_State* state);
    GFourVectors2D(void *ptr);

    float GetX() const;
    void SetX(float value);
    float GetY() const;
    void SetY(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCOrientConstraint
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCOrientConstraint(std::string ptr, lua_State* state);
    GCOrientConstraint(void *ptr);

    GCBaseConstraint GetParent() const;
    void SetParent(GCBaseConstraint value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GSequenceWeightedList_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GSequenceWeightedList_t(std::string ptr, lua_State* state);
    GSequenceWeightedList_t(void *ptr);

    int32_t GetSequence() const;
    void SetSequence(int32_t value);
    float GetRelativeWeight() const;
    void SetRelativeWeight(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSosGroupActionMemberCountEnvelopeSchema
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSosGroupActionMemberCountEnvelopeSchema(std::string ptr, lua_State* state);
    GCSosGroupActionMemberCountEnvelopeSchema(void *ptr);

    int32_t GetBaseCount() const;
    void SetBaseCount(int32_t value);
    int32_t GetTargetCount() const;
    void SetTargetCount(int32_t value);
    float GetBaseValue() const;
    void SetBaseValue(float value);
    float GetTargetValue() const;
    void SetTargetValue(float value);
    float GetAttack() const;
    void SetAttack(float value);
    float GetDecay() const;
    void SetDecay(float value);
    std::string GetResultVarName() const;
    void SetResultVarName(std::string value);
    bool GetSaveToGroup() const;
    void SetSaveToGroup(bool value);
    GCSosGroupActionSchema GetParent() const;
    void SetParent(GCSosGroupActionSchema value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeRodConstraint_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeRodConstraint_t(std::string ptr, lua_State* state);
    GFeRodConstraint_t(void *ptr);

    std::vector<uint16_t> GetNode() const;
    void SetNode(std::vector<uint16_t> value);
    float GetMaxDist() const;
    void SetMaxDist(float value);
    float GetMinDist() const;
    void SetMinDist(float value);
    float GetWeight0() const;
    void SetWeight0(float value);
    float GetRelaxationFactor() const;
    void SetRelaxationFactor(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFollowTargetOpFixedSettings_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFollowTargetOpFixedSettings_t(std::string ptr, lua_State* state);
    GFollowTargetOpFixedSettings_t(void *ptr);

    int32_t GetBoneIndex() const;
    void SetBoneIndex(int32_t value);
    bool GetBoneTarget() const;
    void SetBoneTarget(bool value);
    int32_t GetBoneTargetIndex() const;
    void SetBoneTargetIndex(int32_t value);
    bool GetWorldCoodinateTarget() const;
    void SetWorldCoodinateTarget(bool value);
    bool GetMatchTargetOrientation() const;
    void SetMatchTargetOrientation(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCRenderSkeleton
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCRenderSkeleton(std::string ptr, lua_State* state);
    GCRenderSkeleton(void *ptr);

    std::vector<GRenderSkeletonBone_t> GetBones() const;
    void SetBones(std::vector<GRenderSkeletonBone_t> value);
    std::vector<int32> GetBoneParents() const;
    void SetBoneParents(std::vector<int32> value);
    int32_t GetBoneWeightCount() const;
    void SetBoneWeightCount(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVMixConvolutionDesc_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVMixConvolutionDesc_t(std::string ptr, lua_State* state);
    GVMixConvolutionDesc_t(void *ptr);

    float GetFldbGain() const;
    void SetFldbGain(float value);
    float GetPreDelayMS() const;
    void SetPreDelayMS(float value);
    float GetWetMix() const;
    void SetWetMix(float value);
    float GetFldbLow() const;
    void SetFldbLow(float value);
    float GetFldbMid() const;
    void SetFldbMid(float value);
    float GetFldbHigh() const;
    void SetFldbHigh(float value);
    float GetLowCutoffFreq() const;
    void SetLowCutoffFreq(float value);
    float GetHighCutoffFreq() const;
    void SetHighCutoffFreq(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSosGroupBranchPattern
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSosGroupBranchPattern(std::string ptr, lua_State* state);
    GCSosGroupBranchPattern(void *ptr);

    bool GetMatchEventName() const;
    void SetMatchEventName(bool value);
    bool GetMatchEventSubString() const;
    void SetMatchEventSubString(bool value);
    bool GetMatchEntIndex() const;
    void SetMatchEntIndex(bool value);
    bool GetMatchOpvar() const;
    void SetMatchOpvar(bool value);
    bool GetMatchString() const;
    void SetMatchString(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmGraphDefinition__ExternalGraphSlot_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmGraphDefinition__ExternalGraphSlot_t(std::string ptr, lua_State* state);
    GCNmGraphDefinition__ExternalGraphSlot_t(void *ptr);

    int16_t GetNodeIdx() const;
    void SetNodeIdx(int16_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmStateMachineNode__StateDefinition_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmStateMachineNode__StateDefinition_t(std::string ptr, lua_State* state);
    GCNmStateMachineNode__StateDefinition_t(void *ptr);

    int16_t GetStateNodeIdx() const;
    void SetStateNodeIdx(int16_t value);
    int16_t GetEntryConditionNodeIdx() const;
    void SetEntryConditionNodeIdx(int16_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCModelConfigElement_SetBodygroupOnAttachedModels
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCModelConfigElement_SetBodygroupOnAttachedModels(std::string ptr, lua_State* state);
    GCModelConfigElement_SetBodygroupOnAttachedModels(void *ptr);

    std::string GetGroupName() const;
    void SetGroupName(std::string value);
    int32_t GetChoice() const;
    void SetChoice(int32_t value);
    GCModelConfigElement GetParent() const;
    void SetParent(GCModelConfigElement value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmFootEvent
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmFootEvent(std::string ptr, lua_State* state);
    GCNmFootEvent(void *ptr);

    uint64_t GetPhase() const;
    void SetPhase(uint64_t value);
    GCNmEvent GetParent() const;
    void SetParent(GCNmEvent value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCHandshakeAnimTagBase
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCHandshakeAnimTagBase(std::string ptr, lua_State* state);
    GCHandshakeAnimTagBase(void *ptr);

    bool GetIsDisableTag() const;
    void SetIsDisableTag(bool value);
    GCAnimTagBase GetParent() const;
    void SetParent(GCAnimTagBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBlend2DUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBlend2DUpdateNode(std::string ptr, lua_State* state);
    GCBlend2DUpdateNode(void *ptr);

    std::vector<GBlendItem_t> GetItems() const;
    void SetItems(std::vector<GBlendItem_t> value);
    std::vector<GTagSpan_t> GetTags() const;
    void SetTags(std::vector<GTagSpan_t> value);
    GCParamSpanUpdater GetParamSpans() const;
    void SetParamSpans(GCParamSpanUpdater value);
    std::vector<int32> GetNodeItemIndices() const;
    void SetNodeItemIndices(std::vector<int32> value);
    GCAnimInputDamping GetDamping() const;
    void SetDamping(GCAnimInputDamping value);
    uint64_t GetBlendSourceX() const;
    void SetBlendSourceX(uint64_t value);
    GCAnimParamHandle GetParamX() const;
    void SetParamX(GCAnimParamHandle value);
    uint64_t GetBlendSourceY() const;
    void SetBlendSourceY(uint64_t value);
    GCAnimParamHandle GetParamY() const;
    void SetParamY(GCAnimParamHandle value);
    uint64_t GetBlendMode() const;
    void SetBlendMode(uint64_t value);
    float GetPlaybackSpeed() const;
    void SetPlaybackSpeed(float value);
    bool GetLoop() const;
    void SetLoop(bool value);
    bool GetLockBlendOnReset() const;
    void SetLockBlendOnReset(bool value);
    bool GetLockWhenWaning() const;
    void SetLockWhenWaning(bool value);
    bool GetAnimEventsAndTagsOnMostWeightedOnly() const;
    void SetAnimEventsAndTagsOnMostWeightedOnly(bool value);
    GCAnimUpdateNodeBase GetParent() const;
    void SetParent(GCAnimUpdateNodeBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GAnimationSnapshotBase_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GAnimationSnapshotBase_t(std::string ptr, lua_State* state);
    GAnimationSnapshotBase_t(void *ptr);

    float GetRealTime() const;
    void SetRealTime(float value);
    bool GetBonesInWorldSpace() const;
    void SetBonesInWorldSpace(bool value);
    std::vector<uint32> GetBoneSetupMask() const;
    void SetBoneSetupMask(std::vector<uint32> value);
    std::vector<float32> GetFlexControllers() const;
    void SetFlexControllers(std::vector<float32> value);
    uint64_t GetSnapshotType() const;
    void SetSnapshotType(uint64_t value);
    bool GetHasDecodeDump() const;
    void SetHasDecodeDump(bool value);
    GAnimationDecodeDebugDumpElement_t GetDecodeDump() const;
    void SetDecodeDump(GAnimationDecodeDebugDumpElement_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTiltTwistConstraint
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTiltTwistConstraint(std::string ptr, lua_State* state);
    GCTiltTwistConstraint(void *ptr);

    int32_t GetTargetAxis() const;
    void SetTargetAxis(int32_t value);
    int32_t GetSlaveAxis() const;
    void SetSlaveAxis(int32_t value);
    GCBaseConstraint GetParent() const;
    void SetParent(GCBaseConstraint value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GMaterialParamTexture_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GMaterialParamTexture_t(std::string ptr, lua_State* state);
    GMaterialParamTexture_t(void *ptr);

    GMaterialParam_t GetParent() const;
    void SetParent(GMaterialParam_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCGlobalLightBase
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCGlobalLightBase(std::string ptr, lua_State* state);
    GCGlobalLightBase(void *ptr);

    bool GetSpotLight() const;
    void SetSpotLight(bool value);
    Vector GetSpotLightOrigin() const;
    void SetSpotLightOrigin(Vector value);
    QAngle GetSpotLightAngles() const;
    void SetSpotLightAngles(QAngle value);
    Vector GetShadowDirection() const;
    void SetShadowDirection(Vector value);
    Vector GetAmbientDirection() const;
    void SetAmbientDirection(Vector value);
    Vector GetSpecularDirection() const;
    void SetSpecularDirection(Vector value);
    Vector GetInspectorSpecularDirection() const;
    void SetInspectorSpecularDirection(Vector value);
    float GetSpecularPower() const;
    void SetSpecularPower(float value);
    float GetSpecularIndependence() const;
    void SetSpecularIndependence(float value);
    Color GetSpecularColor() const;
    void SetSpecularColor(Color value);
    bool GetStartDisabled() const;
    void SetStartDisabled(bool value);
    bool GetEnabled() const;
    void SetEnabled(bool value);
    Color GetLightColor() const;
    void SetLightColor(Color value);
    Color GetAmbientColor1() const;
    void SetAmbientColor1(Color value);
    Color GetAmbientColor2() const;
    void SetAmbientColor2(Color value);
    Color GetAmbientColor3() const;
    void SetAmbientColor3(Color value);
    float GetSunDistance() const;
    void SetSunDistance(float value);
    float GetFOV() const;
    void SetFOV(float value);
    float GetNearZ() const;
    void SetNearZ(float value);
    float GetFarZ() const;
    void SetFarZ(float value);
    bool GetEnableShadows() const;
    void SetEnableShadows(bool value);
    bool GetOldEnableShadows() const;
    void SetOldEnableShadows(bool value);
    bool GetBackgroundClearNotRequired() const;
    void SetBackgroundClearNotRequired(bool value);
    float GetCloudScale() const;
    void SetCloudScale(float value);
    float GetCloud1Speed() const;
    void SetCloud1Speed(float value);
    float GetCloud1Direction() const;
    void SetCloud1Direction(float value);
    float GetCloud2Speed() const;
    void SetCloud2Speed(float value);
    float GetCloud2Direction() const;
    void SetCloud2Direction(float value);
    float GetAmbientScale1() const;
    void SetAmbientScale1(float value);
    float GetAmbientScale2() const;
    void SetAmbientScale2(float value);
    float GetGroundScale() const;
    void SetGroundScale(float value);
    float GetLightScale() const;
    void SetLightScale(float value);
    float GetFoWDarkness() const;
    void SetFoWDarkness(float value);
    bool GetEnableSeparateSkyboxFog() const;
    void SetEnableSeparateSkyboxFog(bool value);
    Vector GetFowColor() const;
    void SetFowColor(Vector value);
    Vector GetViewOrigin() const;
    void SetViewOrigin(Vector value);
    QAngle GetViewAngles() const;
    void SetViewAngles(QAngle value);
    float GetViewFoV() const;
    void SetViewFoV(float value);
    std::vector<Vector> GetWorldPoints() const;
    void SetWorldPoints(std::vector<Vector> value);
    Vector2D GetFogOffsetLayer0() const;
    void SetFogOffsetLayer0(Vector2D value);
    Vector2D GetFogOffsetLayer1() const;
    void SetFogOffsetLayer1(Vector2D value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCModelConfigElement_SetBodygroup
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCModelConfigElement_SetBodygroup(std::string ptr, lua_State* state);
    GCModelConfigElement_SetBodygroup(void *ptr);

    std::string GetGroupName() const;
    void SetGroupName(std::string value);
    int32_t GetChoice() const;
    void SetChoice(int32_t value);
    GCModelConfigElement GetParent() const;
    void SetParent(GCModelConfigElement value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCModelConfigElement_AttachedModel
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCModelConfigElement_AttachedModel(std::string ptr, lua_State* state);
    GCModelConfigElement_AttachedModel(void *ptr);

    std::string GetInstanceName() const;
    void SetInstanceName(std::string value);
    std::string GetEntityClass() const;
    void SetEntityClass(std::string value);
    Vector GetOffset() const;
    void SetOffset(Vector value);
    QAngle GetAngOffset() const;
    void SetAngOffset(QAngle value);
    std::string GetAttachmentName() const;
    void SetAttachmentName(std::string value);
    std::string GetLocalAttachmentOffsetName() const;
    void SetLocalAttachmentOffsetName(std::string value);
    uint64_t GetAttachmentType() const;
    void SetAttachmentType(uint64_t value);
    bool GetBoneMergeFlex() const;
    void SetBoneMergeFlex(bool value);
    bool GetUserSpecifiedColor() const;
    void SetUserSpecifiedColor(bool value);
    bool GetUserSpecifiedMaterialGroup() const;
    void SetUserSpecifiedMaterialGroup(bool value);
    bool GetAcceptParentMaterialDrivenDecals() const;
    void SetAcceptParentMaterialDrivenDecals(bool value);
    std::string GetBodygroupOnOtherModels() const;
    void SetBodygroupOnOtherModels(std::string value);
    std::string GetMaterialGroupOnOtherModels() const;
    void SetMaterialGroupOnOtherModels(std::string value);
    GCModelConfigElement GetParent() const;
    void SetParent(GCModelConfigElement value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFollowAttachmentUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFollowAttachmentUpdateNode(std::string ptr, lua_State* state);
    GCFollowAttachmentUpdateNode(void *ptr);

    GFollowAttachmentSettings_t GetOpFixedData() const;
    void SetOpFixedData(GFollowAttachmentSettings_t value);
    GCUnaryUpdateNode GetParent() const;
    void SetParent(GCUnaryUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GParticleChildrenInfo_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GParticleChildrenInfo_t(std::string ptr, lua_State* state);
    GParticleChildrenInfo_t(void *ptr);

    float GetDelay() const;
    void SetDelay(float value);
    bool GetEndCap() const;
    void SetEndCap(bool value);
    bool GetDisableChild() const;
    void SetDisableChild(bool value);
    uint64_t GetDetailLevel() const;
    void SetDetailLevel(uint64_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCVoiceContainerNull
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCVoiceContainerNull(std::string ptr, lua_State* state);
    GCVoiceContainerNull(void *ptr);

    GCVoiceContainerBase GetParent() const;
    void SetParent(GCVoiceContainerBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GMoodAnimation_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GMoodAnimation_t(std::string ptr, lua_State* state);
    GMoodAnimation_t(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    float GetWeight() const;
    void SetWeight(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCClientAlphaProperty
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCClientAlphaProperty(std::string ptr, lua_State* state);
    GCClientAlphaProperty(void *ptr);

    uint32_t GetRenderFX() const;
    void SetRenderFX(uint32_t value);
    uint32_t GetRenderMode() const;
    void SetRenderMode(uint32_t value);
    uint32_t GetAlpha() const;
    void SetAlpha(uint32_t value);
    uint16_t GetDesyncOffset() const;
    void SetDesyncOffset(uint16_t value);
    uint16_t GetReserved2() const;
    void SetReserved2(uint16_t value);
    uint16_t GetDistFadeStart() const;
    void SetDistFadeStart(uint16_t value);
    uint16_t GetDistFadeEnd() const;
    void SetDistFadeEnd(uint16_t value);
    float GetFadeScale() const;
    void SetFadeScale(float value);
    float GetRenderFxStartTime() const;
    void SetRenderFxStartTime(float value);
    float GetRenderFxDuration() const;
    void SetRenderFxDuration(float value);
    GIClientAlphaProperty GetParent() const;
    void SetParent(GIClientAlphaProperty value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTimeRemainingMetricEvaluator
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTimeRemainingMetricEvaluator(std::string ptr, lua_State* state);
    GCTimeRemainingMetricEvaluator(void *ptr);

    bool GetMatchByTimeRemaining() const;
    void SetMatchByTimeRemaining(bool value);
    float GetMaxTimeRemaining() const;
    void SetMaxTimeRemaining(float value);
    bool GetFilterByTimeRemaining() const;
    void SetFilterByTimeRemaining(bool value);
    float GetMinTimeRemaining() const;
    void SetMinTimeRemaining(float value);
    GCMotionMetricEvaluator GetParent() const;
    void SetParent(GCMotionMetricEvaluator value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GNmSyncTrackTimeRange_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GNmSyncTrackTimeRange_t(std::string ptr, lua_State* state);
    GNmSyncTrackTimeRange_t(void *ptr);

    GNmSyncTrackTime_t GetStartTime() const;
    void SetStartTime(GNmSyncTrackTime_t value);
    GNmSyncTrackTime_t GetEndTime() const;
    void SetEndTime(GNmSyncTrackTime_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimActivity
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimActivity(std::string ptr, lua_State* state);
    GCAnimActivity(void *ptr);

    int32_t GetActivity() const;
    void SetActivity(int32_t value);
    int32_t GetFlags() const;
    void SetFlags(int32_t value);
    int32_t GetWeight() const;
    void SetWeight(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmGraphDefinition
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmGraphDefinition(std::string ptr, lua_State* state);
    GCNmGraphDefinition(void *ptr);

    std::vector<int16> GetPersistentNodeIndices() const;
    void SetPersistentNodeIndices(std::vector<int16> value);
    int16_t GetRootNodeIdx() const;
    void SetRootNodeIdx(int16_t value);
    std::vector<int16> GetVirtualParameterNodeIndices() const;
    void SetVirtualParameterNodeIndices(std::vector<int16> value);
    std::vector<GCNmGraphDefinition> GetChildGraphSlots() const;
    void SetChildGraphSlots(std::vector<GCNmGraphDefinition> value);
    std::vector<GCNmGraphDefinition> GetExternalGraphSlots() const;
    void SetExternalGraphSlots(std::vector<GCNmGraphDefinition> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSolveIKChainUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSolveIKChainUpdateNode(std::string ptr, lua_State* state);
    GCSolveIKChainUpdateNode(void *ptr);

    std::vector<GCSolveIKTargetHandle_t> GetTargetHandles() const;
    void SetTargetHandles(std::vector<GCSolveIKTargetHandle_t> value);
    GSolveIKChainPoseOpFixedSettings_t GetOpFixedData() const;
    void SetOpFixedData(GSolveIKChainPoseOpFixedSettings_t value);
    GCUnaryUpdateNode GetParent() const;
    void SetParent(GCUnaryUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEventClientPollNetworking_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEventClientPollNetworking_t(std::string ptr, lua_State* state);
    GEventClientPollNetworking_t(void *ptr);

    int32_t GetTickCount() const;
    void SetTickCount(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMeshletDescriptor
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMeshletDescriptor(std::string ptr, lua_State* state);
    GCMeshletDescriptor(void *ptr);

    GCDrawCullingData GetCullingData() const;
    void SetCullingData(GCDrawCullingData value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmLayerBlendNode__LayerDefinition_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmLayerBlendNode__LayerDefinition_t(std::string ptr, lua_State* state);
    GCNmLayerBlendNode__LayerDefinition_t(void *ptr);

    int16_t GetInputNodeIdx() const;
    void SetInputNodeIdx(int16_t value);
    int16_t GetWeightValueNodeIdx() const;
    void SetWeightValueNodeIdx(int16_t value);
    int16_t GetBoneMaskValueNodeIdx() const;
    void SetBoneMaskValueNodeIdx(int16_t value);
    int16_t GetRootMotionWeightValueNodeIdx() const;
    void SetRootMotionWeightValueNodeIdx(int16_t value);
    bool GetIsSynchronized() const;
    void SetIsSynchronized(bool value);
    bool GetIgnoreEvents() const;
    void SetIgnoreEvents(bool value);
    bool GetIsStateMachineLayer() const;
    void SetIsStateMachineLayer(bool value);
    uint64_t GetBlendMode() const;
    void SetBlendMode(uint64_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimSequenceParams
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimSequenceParams(std::string ptr, lua_State* state);
    GCAnimSequenceParams(void *ptr);

    float GetFadeInTime() const;
    void SetFadeInTime(float value);
    float GetFadeOutTime() const;
    void SetFadeOutTime(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCDemoSettingsComponentUpdater
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCDemoSettingsComponentUpdater(std::string ptr, lua_State* state);
    GCDemoSettingsComponentUpdater(void *ptr);

    GCAnimDemoCaptureSettings GetSettings() const;
    void SetSettings(GCAnimDemoCaptureSettings value);
    GCAnimComponentUpdater GetParent() const;
    void SetParent(GCAnimComponentUpdater value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCompositeMaterialAssemblyProcedure_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCompositeMaterialAssemblyProcedure_t(std::string ptr, lua_State* state);
    GCompositeMaterialAssemblyProcedure_t(void *ptr);

    std::vector<GCompositeMaterialMatchFilter_t> GetMatchFilters() const;
    void SetMatchFilters(std::vector<GCompositeMaterialMatchFilter_t> value);
    std::vector<GCompositeMaterialInputContainer_t> GetCompositeInputContainers() const;
    void SetCompositeInputContainers(std::vector<GCompositeMaterialInputContainer_t> value);
    std::vector<GCompMatPropertyMutator_t> GetPropertyMutators() const;
    void SetPropertyMutators(std::vector<GCompMatPropertyMutator_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTaskHandshakeAnimTag
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTaskHandshakeAnimTag(std::string ptr, lua_State* state);
    GCTaskHandshakeAnimTag(void *ptr);

    GCHandshakeAnimTagBase GetParent() const;
    void SetParent(GCHandshakeAnimTagBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEventClientPauseSimulate_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEventClientPauseSimulate_t(std::string ptr, lua_State* state);
    GEventClientPauseSimulate_t(void *ptr);

    GEventSimulate_t GetParent() const;
    void SetParent(GEventSimulate_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFireOverlay
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFireOverlay(std::string ptr, lua_State* state);
    GCFireOverlay(void *ptr);

    std::vector<Vector> GetBaseColors() const;
    void SetBaseColors(std::vector<Vector> value);
    float GetScale() const;
    void SetScale(float value);
    int32_t GetGUID() const;
    void SetGUID(int32_t value);
    GCGlowOverlay GetParent() const;
    void SetParent(GCGlowOverlay value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeBuildTaperedCapsuleRigid_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeBuildTaperedCapsuleRigid_t(std::string ptr, lua_State* state);
    GFeBuildTaperedCapsuleRigid_t(void *ptr);

    int32_t GetPriority() const;
    void SetPriority(int32_t value);
    uint32_t GetVertexMapHash() const;
    void SetVertexMapHash(uint32_t value);
    GFeTaperedCapsuleRigid_t GetParent() const;
    void SetParent(GFeTaperedCapsuleRigid_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCStateUpdateData
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCStateUpdateData(std::string ptr, lua_State* state);
    GCStateUpdateData(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    GAnimScriptHandle GetScript() const;
    void SetScript(GAnimScriptHandle value);
    std::vector<int32> GetTransitionIndices() const;
    void SetTransitionIndices(std::vector<int32> value);
    std::vector<GCStateActionUpdater> GetActions() const;
    void SetActions(std::vector<GCStateActionUpdater> value);
    GAnimStateID GetStateID() const;
    void SetStateID(GAnimStateID value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPhysSurfaceProperties
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPhysSurfaceProperties(std::string ptr, lua_State* state);
    GCPhysSurfaceProperties(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    uint32_t GetNameHash() const;
    void SetNameHash(uint32_t value);
    uint32_t GetBaseNameHash() const;
    void SetBaseNameHash(uint32_t value);
    bool GetHidden() const;
    void SetHidden(bool value);
    std::string GetDescription() const;
    void SetDescription(std::string value);
    GCPhysSurfacePropertiesPhysics GetPhysics() const;
    void SetPhysics(GCPhysSurfacePropertiesPhysics value);
    GCPhysSurfacePropertiesSoundNames GetAudioSounds() const;
    void SetAudioSounds(GCPhysSurfacePropertiesSoundNames value);
    GCPhysSurfacePropertiesAudio GetAudioParams() const;
    void SetAudioParams(GCPhysSurfacePropertiesAudio value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMotionSearchNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMotionSearchNode(std::string ptr, lua_State* state);
    GCMotionSearchNode(void *ptr);

    std::vector<GCMotionSearchNode*> GetChildren() const;
    void SetChildren(std::vector<GCMotionSearchNode*> value);
    GCVectorQuantizer GetQuantizer() const;
    void SetQuantizer(GCVectorQuantizer value);
    std::vector<int32> GetSelectableSamples() const;
    void SetSelectableSamples(std::vector<int32> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVMixVocoderDesc_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVMixVocoderDesc_t(std::string ptr, lua_State* state);
    GVMixVocoderDesc_t(void *ptr);

    int32_t GetBandCount() const;
    void SetBandCount(int32_t value);
    float GetBandwidth() const;
    void SetBandwidth(float value);
    float GetFldBModGain() const;
    void SetFldBModGain(float value);
    float GetFreqRangeStart() const;
    void SetFreqRangeStart(float value);
    float GetFreqRangeEnd() const;
    void SetFreqRangeEnd(float value);
    float GetFldBUnvoicedGain() const;
    void SetFldBUnvoicedGain(float value);
    float GetAttackTimeMS() const;
    void SetAttackTimeMS(float value);
    float GetReleaseTimeMS() const;
    void SetReleaseTimeMS(float value);
    int32_t GetDebugBand() const;
    void SetDebugBand(int32_t value);
    bool GetPeakMode() const;
    void SetPeakMode(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimScriptManager
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimScriptManager(std::string ptr, lua_State* state);
    GCAnimScriptManager(void *ptr);

    std::vector<GScriptInfo_t> GetScriptInfo() const;
    void SetScriptInfo(std::vector<GScriptInfo_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimationGraphVisualizerLine
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimationGraphVisualizerLine(std::string ptr, lua_State* state);
    GCAnimationGraphVisualizerLine(void *ptr);

    Vector GetWsPositionStart() const;
    void SetWsPositionStart(Vector value);
    Vector GetWsPositionEnd() const;
    void SetWsPositionEnd(Vector value);
    Color GetColor() const;
    void SetColor(Color value);
    GCAnimationGraphVisualizerPrimitiveBase GetParent() const;
    void SetParent(GCAnimationGraphVisualizerPrimitiveBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFootTrajectory
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFootTrajectory(std::string ptr, lua_State* state);
    GCFootTrajectory(void *ptr);

    Vector GetOffset() const;
    void SetOffset(Vector value);
    float GetRotationOffset() const;
    void SetRotationOffset(float value);
    float GetProgression() const;
    void SetProgression(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVMixModDelayDesc_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVMixModDelayDesc_t(std::string ptr, lua_State* state);
    GVMixModDelayDesc_t(void *ptr);

    GVMixFilterDesc_t GetFeedbackFilter() const;
    void SetFeedbackFilter(GVMixFilterDesc_t value);
    bool GetPhaseInvert() const;
    void SetPhaseInvert(bool value);
    float GetGlideTime() const;
    void SetGlideTime(float value);
    float GetDelay() const;
    void SetDelay(float value);
    float GetOutputGain() const;
    void SetOutputGain(float value);
    float GetFeedbackGain() const;
    void SetFeedbackGain(float value);
    float GetModRate() const;
    void SetModRate(float value);
    float GetModDepth() const;
    void SetModDepth(float value);
    bool GetApplyAntialiasing() const;
    void SetApplyAntialiasing(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCHitBox
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCHitBox(std::string ptr, lua_State* state);
    GCHitBox(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    std::string GetSurfaceProperty() const;
    void SetSurfaceProperty(std::string value);
    std::string GetBoneName() const;
    void SetBoneName(std::string value);
    Vector GetMinBounds() const;
    void SetMinBounds(Vector value);
    Vector GetMaxBounds() const;
    void SetMaxBounds(Vector value);
    float GetShapeRadius() const;
    void SetShapeRadius(float value);
    uint32_t GetBoneNameHash() const;
    void SetBoneNameHash(uint32_t value);
    int32_t GetGroupId() const;
    void SetGroupId(int32_t value);
    uint32_t GetShapeType() const;
    void SetShapeType(uint32_t value);
    bool GetTranslationOnly() const;
    void SetTranslationOnly(bool value);
    uint32_t GetCRC() const;
    void SetCRC(uint32_t value);
    Color GetCRenderColor() const;
    void SetCRenderColor(Color value);
    uint16_t GetHitBoxIndex() const;
    void SetHitBoxIndex(uint16_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTestDomainDerived_Cursor
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTestDomainDerived_Cursor(std::string ptr, lua_State* state);
    GCTestDomainDerived_Cursor(void *ptr);

    int32_t GetCursorValueA() const;
    void SetCursorValueA(int32_t value);
    int32_t GetCursorValueB() const;
    void SetCursorValueB(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAudioMorphData
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAudioMorphData(std::string ptr, lua_State* state);
    GCAudioMorphData(void *ptr);

    std::vector<float32> GetTimes() const;
    void SetTimes(std::vector<float32> value);
    std::vector<uint32> GetNameHashCodes() const;
    void SetNameHashCodes(std::vector<uint32> value);
    std::vector<CUtlString> GetNameStrings() const;
    void SetNameStrings(std::vector<CUtlString> value);
    float GetEaseIn() const;
    void SetEaseIn(float value);
    float GetEaseOut() const;
    void SetEaseOut(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSeqIKLock
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSeqIKLock(std::string ptr, lua_State* state);
    GCSeqIKLock(void *ptr);

    float GetPosWeight() const;
    void SetPosWeight(float value);
    float GetAngleWeight() const;
    void SetAngleWeight(float value);
    int16_t GetLocalBone() const;
    void SetLocalBone(int16_t value);
    bool GetBonesOrientedAlongPositiveX() const;
    void SetBonesOrientedAlongPositiveX(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeQuad_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeQuad_t(std::string ptr, lua_State* state);
    GFeQuad_t(void *ptr);

    std::vector<uint16_t> GetNode() const;
    void SetNode(std::vector<uint16_t> value);
    float GetSlack() const;
    void SetSlack(float value);
    std::vector<Vector4D> GetShape() const;
    void SetShape(std::vector<Vector4D> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSosGroupMatchPattern
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSosGroupMatchPattern(std::string ptr, lua_State* state);
    GCSosGroupMatchPattern(void *ptr);

    std::string GetMatchSoundEventName() const;
    void SetMatchSoundEventName(std::string value);
    std::string GetMatchSoundEventSubString() const;
    void SetMatchSoundEventSubString(std::string value);
    float GetEntIndex() const;
    void SetEntIndex(float value);
    float GetOpvar() const;
    void SetOpvar(float value);
    std::string GetOpvarString() const;
    void SetOpvarString(std::string value);
    GCSosGroupBranchPattern GetParent() const;
    void SetParent(GCSosGroupBranchPattern value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSSDSEndFrameViewInfo
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSSDSEndFrameViewInfo(std::string ptr, lua_State* state);
    GCSSDSEndFrameViewInfo(void *ptr);

    uint64_t GetViewId() const;
    void SetViewId(uint64_t value);
    std::string GetViewName() const;
    void SetViewName(std::string value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmExternalGraphNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmExternalGraphNode(std::string ptr, lua_State* state);
    GCNmExternalGraphNode(void *ptr);

    GCNmPoseNode GetParent() const;
    void SetParent(GCNmPoseNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMoverUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMoverUpdateNode(std::string ptr, lua_State* state);
    GCMoverUpdateNode(void *ptr);

    GCAnimInputDamping GetDamping() const;
    void SetDamping(GCAnimInputDamping value);
    uint64_t GetFacingTarget() const;
    void SetFacingTarget(uint64_t value);
    GCAnimParamHandle GetMoveVecParam() const;
    void SetMoveVecParam(GCAnimParamHandle value);
    GCAnimParamHandle GetMoveHeadingParam() const;
    void SetMoveHeadingParam(GCAnimParamHandle value);
    GCAnimParamHandle GetTurnToFaceParam() const;
    void SetTurnToFaceParam(GCAnimParamHandle value);
    float GetTurnToFaceOffset() const;
    void SetTurnToFaceOffset(float value);
    float GetTurnToFaceLimit() const;
    void SetTurnToFaceLimit(float value);
    bool GetAdditive() const;
    void SetAdditive(bool value);
    bool GetApplyMovement() const;
    void SetApplyMovement(bool value);
    bool GetOrientMovement() const;
    void SetOrientMovement(bool value);
    bool GetApplyRotation() const;
    void SetApplyRotation(bool value);
    bool GetLimitOnly() const;
    void SetLimitOnly(bool value);
    GCUnaryUpdateNode GetParent() const;
    void SetParent(GCUnaryUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GRnHull_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GRnHull_t(std::string ptr, lua_State* state);
    GRnHull_t(void *ptr);

    Vector GetCentroid() const;
    void SetCentroid(Vector value);
    float GetMaxAngularRadius() const;
    void SetMaxAngularRadius(float value);
    GAABB_t GetBounds() const;
    void SetBounds(GAABB_t value);
    Vector GetOrthographicAreas() const;
    void SetOrthographicAreas(Vector value);
    float GetVolume() const;
    void SetVolume(float value);
    float GetSurfaceArea() const;
    void SetSurfaceArea(float value);
    std::vector<GRnVertex_t> GetVertices() const;
    void SetVertices(std::vector<GRnVertex_t> value);
    std::vector<Vector> GetVertexPositions() const;
    void SetVertexPositions(std::vector<Vector> value);
    std::vector<GRnHalfEdge_t> GetEdges() const;
    void SetEdges(std::vector<GRnHalfEdge_t> value);
    std::vector<GRnFace_t> GetFaces() const;
    void SetFaces(std::vector<GRnFace_t> value);
    std::vector<GRnPlane_t> GetFacePlanes() const;
    void SetFacePlanes(std::vector<GRnPlane_t> value);
    uint32_t GetFlags() const;
    void SetFlags(uint32_t value);
    GCRegionSVM GetRegionSVM() const;
    void SetRegionSVM(GCRegionSVM value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMoodVData
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMoodVData(std::string ptr, lua_State* state);
    GCMoodVData(void *ptr);

    uint64_t GetMoodType() const;
    void SetMoodType(uint64_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEventClientFrameSimulate_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEventClientFrameSimulate_t(std::string ptr, lua_State* state);
    GEventClientFrameSimulate_t(void *ptr);

    GEngineLoopState_t GetLoopState() const;
    void SetLoopState(GEngineLoopState_t value);
    float GetRealTime() const;
    void SetRealTime(float value);
    float GetFrameTime() const;
    void SetFrameTime(float value);
    double GetWhenScheduleSendTickPacket() const;
    void SetWhenScheduleSendTickPacket(double value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCRagdollComponentUpdater
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCRagdollComponentUpdater(std::string ptr, lua_State* state);
    GCRagdollComponentUpdater(void *ptr);

    std::vector<GCAnimNodePath> GetRagdollNodePaths() const;
    void SetRagdollNodePaths(std::vector<GCAnimNodePath> value);
    std::vector<int32> GetBoneIndices() const;
    void SetBoneIndices(std::vector<int32> value);
    std::vector<CUtlString> GetBoneNames() const;
    void SetBoneNames(std::vector<CUtlString> value);
    std::vector<GWeightList> GetWeightLists() const;
    void SetWeightLists(std::vector<GWeightList> value);
    float GetSpringFrequencyMin() const;
    void SetSpringFrequencyMin(float value);
    float GetSpringFrequencyMax() const;
    void SetSpringFrequencyMax(float value);
    float GetMaxStretch() const;
    void SetMaxStretch(float value);
    bool GetSolidCollisionAtZeroWeight() const;
    void SetSolidCollisionAtZeroWeight(bool value);
    GCAnimComponentUpdater GetParent() const;
    void SetParent(GCAnimComponentUpdater value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMotionNodeBlend1D
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMotionNodeBlend1D(std::string ptr, lua_State* state);
    GCMotionNodeBlend1D(void *ptr);

    std::vector<GMotionBlendItem> GetBlendItems() const;
    void SetBlendItems(std::vector<GMotionBlendItem> value);
    int32_t GetParamIndex() const;
    void SetParamIndex(int32_t value);
    GCMotionNode GetParent() const;
    void SetParent(GCMotionNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmControlParameterVectorNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmControlParameterVectorNode(std::string ptr, lua_State* state);
    GCNmControlParameterVectorNode(void *ptr);

    GCNmVectorValueNode GetParent() const;
    void SetParent(GCNmVectorValueNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCPathHelperUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCPathHelperUpdateNode(std::string ptr, lua_State* state);
    GCPathHelperUpdateNode(void *ptr);

    float GetStoppingRadius() const;
    void SetStoppingRadius(float value);
    float GetStoppingSpeedScale() const;
    void SetStoppingSpeedScale(float value);
    GCUnaryUpdateNode GetParent() const;
    void SetParent(GCUnaryUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSeqPoseParamDesc
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSeqPoseParamDesc(std::string ptr, lua_State* state);
    GCSeqPoseParamDesc(void *ptr);

    float GetStart() const;
    void SetStart(float value);
    float GetEnd() const;
    void SetEnd(float value);
    float GetLoop() const;
    void SetLoop(float value);
    bool GetLooping() const;
    void SetLooping(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVMixPitchShiftDesc_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVMixPitchShiftDesc_t(std::string ptr, lua_State* state);
    GVMixPitchShiftDesc_t(void *ptr);

    int32_t GetGrainSampleCount() const;
    void SetGrainSampleCount(int32_t value);
    float GetPitchShift() const;
    void SetPitchShift(float value);
    int32_t GetQuality() const;
    void SetQuality(int32_t value);
    int32_t GetProcType() const;
    void SetProcType(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAudioSentence
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAudioSentence(std::string ptr, lua_State* state);
    GCAudioSentence(void *ptr);

    bool GetShouldVoiceDuck() const;
    void SetShouldVoiceDuck(bool value);
    std::vector<GCAudioPhonemeTag> GetRunTimePhonemes() const;
    void SetRunTimePhonemes(std::vector<GCAudioPhonemeTag> value);
    std::vector<GCAudioEmphasisSample> GetEmphasisSamples() const;
    void SetEmphasisSamples(std::vector<GCAudioEmphasisSample> value);
    GCAudioMorphData GetMorphData() const;
    void SetMorphData(GCAudioMorphData value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCRenderBufferBinding
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCRenderBufferBinding(std::string ptr, lua_State* state);
    GCRenderBufferBinding(void *ptr);

    uint64_t GetBuffer() const;
    void SetBuffer(uint64_t value);
    uint32_t GetBindOffsetBytes() const;
    void SetBindOffsetBytes(uint32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCParticleAnimTag
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCParticleAnimTag(std::string ptr, lua_State* state);
    GCParticleAnimTag(void *ptr);

    std::string GetParticleSystemName() const;
    void SetParticleSystemName(std::string value);
    std::string GetConfigName() const;
    void SetConfigName(std::string value);
    bool GetDetachFromOwner() const;
    void SetDetachFromOwner(bool value);
    bool GetStopWhenTagEnds() const;
    void SetStopWhenTagEnds(bool value);
    bool GetTagEndStopIsInstant() const;
    void SetTagEndStopIsInstant(bool value);
    std::string GetAttachmentName() const;
    void SetAttachmentName(std::string value);
    uint64_t GetAttachmentType() const;
    void SetAttachmentType(uint64_t value);
    std::string GetAttachmentCP1Name() const;
    void SetAttachmentCP1Name(std::string value);
    uint64_t GetAttachmentCP1Type() const;
    void SetAttachmentCP1Type(uint64_t value);
    GCAnimTagBase GetParent() const;
    void SetParent(GCAnimTagBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCStaticPoseCacheBuilder
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCStaticPoseCacheBuilder(std::string ptr, lua_State* state);
    GCStaticPoseCacheBuilder(void *ptr);

    GCStaticPoseCache GetParent() const;
    void SetParent(GCStaticPoseCache value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmRootMotionData
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmRootMotionData(std::string ptr, lua_State* state);
    GCNmRootMotionData(void *ptr);

    int32_t GetNumFrames() const;
    void SetNumFrames(int32_t value);
    float GetAverageLinearVelocity() const;
    void SetAverageLinearVelocity(float value);
    float GetAverageAngularVelocityRadians() const;
    void SetAverageAngularVelocityRadians(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimReplayFrame
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimReplayFrame(std::string ptr, lua_State* state);
    GCAnimReplayFrame(void *ptr);

    float GetTimeStamp() const;
    void SetTimeStamp(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmVirtualParameterBoneMaskNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmVirtualParameterBoneMaskNode(std::string ptr, lua_State* state);
    GCNmVirtualParameterBoneMaskNode(void *ptr);

    int16_t GetChildNodeIdx() const;
    void SetChildNodeIdx(int16_t value);
    GCNmBoneMaskValueNode GetParent() const;
    void SetParent(GCNmBoneMaskValueNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBlockSelectionMetricEvaluator
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBlockSelectionMetricEvaluator(std::string ptr, lua_State* state);
    GCBlockSelectionMetricEvaluator(void *ptr);

    GCMotionMetricEvaluator GetParent() const;
    void SetParent(GCMotionMetricEvaluator value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMotionGraph
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMotionGraph(std::string ptr, lua_State* state);
    GCMotionGraph(void *ptr);

    GCParamSpanUpdater GetParamSpans() const;
    void SetParamSpans(GCParamSpanUpdater value);
    std::vector<GTagSpan_t> GetTags() const;
    void SetTags(std::vector<GTagSpan_t> value);
    int32_t GetParameterCount() const;
    void SetParameterCount(int32_t value);
    int32_t GetConfigStartIndex() const;
    void SetConfigStartIndex(int32_t value);
    int32_t GetConfigCount() const;
    void SetConfigCount(int32_t value);
    bool GetLoop() const;
    void SetLoop(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSosSoundEventGroupSchema
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSosSoundEventGroupSchema(std::string ptr, lua_State* state);
    GCSosSoundEventGroupSchema(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    uint64_t GetType() const;
    void SetType(uint64_t value);
    bool GetIsBlocking() const;
    void SetIsBlocking(bool value);
    int32_t GetBlockMaxCount() const;
    void SetBlockMaxCount(int32_t value);
    bool GetInvertMatch() const;
    void SetInvertMatch(bool value);
    GCSosGroupMatchPattern GetMatchPattern() const;
    void SetMatchPattern(GCSosGroupMatchPattern value);
    GCSosGroupBranchPattern GetBranchPattern() const;
    void SetBranchPattern(GCSosGroupBranchPattern value);
    float GetLifeSpanTime() const;
    void SetLifeSpanTime(float value);
    std::vector<GCSosGroupActionSchema*> GetActions() const;
    void SetActions(std::vector<GCSosGroupActionSchema*> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFootMotion
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFootMotion(std::string ptr, lua_State* state);
    GCFootMotion(void *ptr);

    std::vector<GCFootStride> GetStrides() const;
    void SetStrides(std::vector<GCFootStride> value);
    std::string GetName() const;
    void SetName(std::string value);
    bool GetAdditive() const;
    void SetAdditive(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCDampedValueUpdateItem
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCDampedValueUpdateItem(std::string ptr, lua_State* state);
    GCDampedValueUpdateItem(void *ptr);

    GCAnimInputDamping GetDamping() const;
    void SetDamping(GCAnimInputDamping value);
    GCAnimParamHandle GetParamIn() const;
    void SetParamIn(GCAnimParamHandle value);
    GCAnimParamHandle GetParamOut() const;
    void SetParamOut(GCAnimParamHandle value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GRnHalfEdge_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GRnHalfEdge_t(std::string ptr, lua_State* state);
    GRnHalfEdge_t(void *ptr);

    uint32_t GetNext() const;
    void SetNext(uint32_t value);
    uint32_t GetTwin() const;
    void SetTwin(uint32_t value);
    uint32_t GetOrigin() const;
    void SetOrigin(uint32_t value);
    uint32_t GetFace() const;
    void SetFace(uint32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimDataChannelDesc
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimDataChannelDesc(std::string ptr, lua_State* state);
    GCAnimDataChannelDesc(void *ptr);

    int32_t GetFlags() const;
    void SetFlags(int32_t value);
    int32_t GetType() const;
    void SetType(int32_t value);
    std::vector<int32> GetElementIndexArray() const;
    void SetElementIndexArray(std::vector<int32> value);
    std::vector<uint32> GetElementMaskArray() const;
    void SetElementMaskArray(std::vector<uint32> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEventClientProcessNetworking_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEventClientProcessNetworking_t(std::string ptr, lua_State* state);
    GEventClientProcessNetworking_t(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCModelConfigList
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCModelConfigList(std::string ptr, lua_State* state);
    GCModelConfigList(void *ptr);

    bool GetHideMaterialGroupInTools() const;
    void SetHideMaterialGroupInTools(bool value);
    bool GetHideRenderColorInTools() const;
    void SetHideRenderColorInTools(bool value);
    std::vector<GCModelConfig*> GetConfigs() const;
    void SetConfigs(std::vector<GCModelConfig*> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmGraphVariation
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmGraphVariation(std::string ptr, lua_State* state);
    GCNmGraphVariation(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSosGroupActionTimeBlockLimitSchema
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSosGroupActionTimeBlockLimitSchema(std::string ptr, lua_State* state);
    GCSosGroupActionTimeBlockLimitSchema(void *ptr);

    int32_t GetMaxCount() const;
    void SetMaxCount(int32_t value);
    float GetMaxDuration() const;
    void SetMaxDuration(float value);
    GCSosGroupActionSchema GetParent() const;
    void SetParent(GCSosGroupActionSchema value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVMixDynamics3BandDesc_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVMixDynamics3BandDesc_t(std::string ptr, lua_State* state);
    GVMixDynamics3BandDesc_t(void *ptr);

    float GetFldbGainOutput() const;
    void SetFldbGainOutput(float value);
    float GetRMSTimeMS() const;
    void SetRMSTimeMS(float value);
    float GetFldbKneeWidth() const;
    void SetFldbKneeWidth(float value);
    float GetDepth() const;
    void SetDepth(float value);
    float GetWetMix() const;
    void SetWetMix(float value);
    float GetTimeScale() const;
    void SetTimeScale(float value);
    float GetLowCutoffFreq() const;
    void SetLowCutoffFreq(float value);
    float GetHighCutoffFreq() const;
    void SetHighCutoffFreq(float value);
    bool GetPeakMode() const;
    void SetPeakMode(bool value);
    std::vector<GVMixDynamicsBand_t> GetBandDesc() const;
    void SetBandDesc(std::vector<GVMixDynamicsBand_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCModelConfigElement_SetMaterialGroup
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCModelConfigElement_SetMaterialGroup(std::string ptr, lua_State* state);
    GCModelConfigElement_SetMaterialGroup(void *ptr);

    std::string GetMaterialGroupName() const;
    void SetMaterialGroupName(std::string value);
    GCModelConfigElement GetParent() const;
    void SetParent(GCModelConfigElement value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMovementHandshakeAnimTag
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMovementHandshakeAnimTag(std::string ptr, lua_State* state);
    GCMovementHandshakeAnimTag(void *ptr);

    GCHandshakeAnimTagBase GetParent() const;
    void SetParent(GCHandshakeAnimTagBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSeqScaleSet
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSeqScaleSet(std::string ptr, lua_State* state);
    GCSeqScaleSet(void *ptr);

    bool GetRootOffset() const;
    void SetRootOffset(bool value);
    Vector GetRootOffset1() const;
    void SetRootOffset1(Vector value);
    std::vector<int16> GetLocalBoneArray() const;
    void SetLocalBoneArray(std::vector<int16> value);
    std::vector<float32> GetBoneScaleArray() const;
    void SetBoneScaleArray(std::vector<float32> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEventClientProcessGameInput_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEventClientProcessGameInput_t(std::string ptr, lua_State* state);
    GEventClientProcessGameInput_t(void *ptr);

    GEngineLoopState_t GetLoopState() const;
    void SetLoopState(GEngineLoopState_t value);
    float GetRealTime() const;
    void SetRealTime(float value);
    float GetFrameTime() const;
    void SetFrameTime(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVsInputSignatureElement_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVsInputSignatureElement_t(std::string ptr, lua_State* state);
    GVsInputSignatureElement_t(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    std::string GetSemantic() const;
    void SetSemantic(std::string value);
    std::string GetD3DSemanticName() const;
    void SetD3DSemanticName(std::string value);
    int32_t GetD3DSemanticIndex() const;
    void SetD3DSemanticIndex(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCompositeMaterialMatchFilter_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCompositeMaterialMatchFilter_t(std::string ptr, lua_State* state);
    GCompositeMaterialMatchFilter_t(void *ptr);

    uint64_t GetCompositeMaterialMatchFilterType() const;
    void SetCompositeMaterialMatchFilterType(uint64_t value);
    std::string GetStrMatchFilter() const;
    void SetStrMatchFilter(std::string value);
    std::string GetStrMatchValue() const;
    void SetStrMatchValue(std::string value);
    bool GetPassWhenTrue() const;
    void SetPassWhenTrue(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVertexPositionColor_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVertexPositionColor_t(std::string ptr, lua_State* state);
    GVertexPositionColor_t(void *ptr);

    Vector GetPosition() const;
    void SetPosition(Vector value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFootTrajectories
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFootTrajectories(std::string ptr, lua_State* state);
    GCFootTrajectories(void *ptr);

    std::vector<GCFootTrajectory> GetTrajectories() const;
    void SetTrajectories(std::vector<GCFootTrajectory> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GSceneObject_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GSceneObject_t(std::string ptr, lua_State* state);
    GSceneObject_t(void *ptr);

    uint32_t GetObjectID() const;
    void SetObjectID(uint32_t value);
    std::vector<Vector4D> GetTransform() const;
    void SetTransform(std::vector<Vector4D> value);
    float GetFadeStartDistance() const;
    void SetFadeStartDistance(float value);
    float GetFadeEndDistance() const;
    void SetFadeEndDistance(float value);
    Vector4D GetTintColor() const;
    void SetTintColor(Vector4D value);
    std::string GetSkin() const;
    void SetSkin(std::string value);
    uint64_t GetObjectTypeFlags() const;
    void SetObjectTypeFlags(uint64_t value);
    Vector GetLightingOrigin() const;
    void SetLightingOrigin(Vector value);
    int16_t GetOverlayRenderOrder() const;
    void SetOverlayRenderOrder(int16_t value);
    int16_t GetLODOverride() const;
    void SetLODOverride(int16_t value);
    int32_t GetCubeMapPrecomputedHandshake() const;
    void SetCubeMapPrecomputedHandshake(int32_t value);
    int32_t GetLightProbeVolumePrecomputedHandshake() const;
    void SetLightProbeVolumePrecomputedHandshake(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSSDSMsg_ViewTarget
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSSDSMsg_ViewTarget(std::string ptr, lua_State* state);
    GCSSDSMsg_ViewTarget(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    uint64_t GetTextureId() const;
    void SetTextureId(uint64_t value);
    int32_t GetWidth() const;
    void SetWidth(int32_t value);
    int32_t GetHeight() const;
    void SetHeight(int32_t value);
    int32_t GetRequestedWidth() const;
    void SetRequestedWidth(int32_t value);
    int32_t GetRequestedHeight() const;
    void SetRequestedHeight(int32_t value);
    int32_t GetNumMipLevels() const;
    void SetNumMipLevels(int32_t value);
    int32_t GetDepth() const;
    void SetDepth(int32_t value);
    int32_t GetMultisampleNumSamples() const;
    void SetMultisampleNumSamples(int32_t value);
    int32_t GetFormat() const;
    void SetFormat(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVMixSubgraphSwitchDesc_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVMixSubgraphSwitchDesc_t(std::string ptr, lua_State* state);
    GVMixSubgraphSwitchDesc_t(void *ptr);

    uint64_t GetInterpolationMode() const;
    void SetInterpolationMode(uint64_t value);
    bool GetOnlyTailsOnFadeOut() const;
    void SetOnlyTailsOnFadeOut(bool value);
    float GetInterpolationTime() const;
    void SetInterpolationTime(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmTransitionNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmTransitionNode(std::string ptr, lua_State* state);
    GCNmTransitionNode(void *ptr);

    int16_t GetTargetCNmStateNodeIdx() const;
    void SetTargetCNmStateNodeIdx(int16_t value);
    int16_t GetDurationOverrideNodeIdx() const;
    void SetDurationOverrideNodeIdx(int16_t value);
    int16_t GetSyncEventOffsetOverrideNodeIdx() const;
    void SetSyncEventOffsetOverrideNodeIdx(int16_t value);
    int16_t GetStartBoneMaskNodeIdx() const;
    void SetStartBoneMaskNodeIdx(int16_t value);
    float GetDuration() const;
    void SetDuration(float value);
    GNmPercent_t GetBoneMaskBlendInTimePercentage() const;
    void SetBoneMaskBlendInTimePercentage(GNmPercent_t value);
    float GetSyncEventOffset() const;
    void SetSyncEventOffset(float value);
    GCNmTransitionNode GetTransitionOptions() const;
    void SetTransitionOptions(GCNmTransitionNode value);
    int16_t GetTargetSyncIDNodeIdx() const;
    void SetTargetSyncIDNodeIdx(int16_t value);
    uint64_t GetBlendWeightEasing() const;
    void SetBlendWeightEasing(uint64_t value);
    uint64_t GetRootMotionBlend() const;
    void SetRootMotionBlend(uint64_t value);
    GCNmPoseNode GetParent() const;
    void SetParent(GCNmPoseNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GMotionDBIndex
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GMotionDBIndex(std::string ptr, lua_State* state);
    GMotionDBIndex(void *ptr);

    uint32_t GetIndex() const;
    void SetIndex(uint32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCToggleComponentActionUpdater
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCToggleComponentActionUpdater(std::string ptr, lua_State* state);
    GCToggleComponentActionUpdater(void *ptr);

    GAnimComponentID GetComponentID() const;
    void SetComponentID(GAnimComponentID value);
    bool GetSetEnabled() const;
    void SetSetEnabled(bool value);
    GCAnimActionUpdater GetParent() const;
    void SetParent(GCAnimActionUpdater value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmControlParameterIDNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmControlParameterIDNode(std::string ptr, lua_State* state);
    GCNmControlParameterIDNode(void *ptr);

    GCNmIDValueNode GetParent() const;
    void SetParent(GCNmIDValueNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GPostProcessingTonemapParameters_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GPostProcessingTonemapParameters_t(std::string ptr, lua_State* state);
    GPostProcessingTonemapParameters_t(void *ptr);

    float GetExposureBias() const;
    void SetExposureBias(float value);
    float GetShoulderStrength() const;
    void SetShoulderStrength(float value);
    float GetLinearStrength() const;
    void SetLinearStrength(float value);
    float GetLinearAngle() const;
    void SetLinearAngle(float value);
    float GetToeStrength() const;
    void SetToeStrength(float value);
    float GetToeNum() const;
    void SetToeNum(float value);
    float GetToeDenom() const;
    void SetToeDenom(float value);
    float GetWhitePoint() const;
    void SetWhitePoint(float value);
    float GetLuminanceSource() const;
    void SetLuminanceSource(float value);
    float GetExposureBiasShadows() const;
    void SetExposureBiasShadows(float value);
    float GetExposureBiasHighlights() const;
    void SetExposureBiasHighlights(float value);
    float GetMinShadowLum() const;
    void SetMinShadowLum(float value);
    float GetMaxShadowLum() const;
    void SetMaxShadowLum(float value);
    float GetMinHighlightLum() const;
    void SetMinHighlightLum(float value);
    float GetMaxHighlightLum() const;
    void SetMaxHighlightLum(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVMixAutoFilterDesc_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVMixAutoFilterDesc_t(std::string ptr, lua_State* state);
    GVMixAutoFilterDesc_t(void *ptr);

    float GetEnvelopeAmount() const;
    void SetEnvelopeAmount(float value);
    float GetAttackTimeMS() const;
    void SetAttackTimeMS(float value);
    float GetReleaseTimeMS() const;
    void SetReleaseTimeMS(float value);
    GVMixFilterDesc_t GetFilter() const;
    void SetFilter(GVMixFilterDesc_t value);
    float GetLFOAmount() const;
    void SetLFOAmount(float value);
    float GetLFORate() const;
    void SetLFORate(float value);
    float GetPhase() const;
    void SetPhase(float value);
    uint64_t GetLFOShape() const;
    void SetLFOShape(uint64_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSeqMultiFetch
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSeqMultiFetch(std::string ptr, lua_State* state);
    GCSeqMultiFetch(void *ptr);

    GCSeqMultiFetchFlag GetFlags() const;
    void SetFlags(GCSeqMultiFetchFlag value);
    std::vector<int16> GetLocalReferenceArray() const;
    void SetLocalReferenceArray(std::vector<int16> value);
    std::vector<int32_t> GetGroupSize() const;
    void SetGroupSize(std::vector<int32_t> value);
    std::vector<int32_t> GetLocalPose() const;
    void SetLocalPose(std::vector<int32_t> value);
    std::vector<float32> GetPoseKeyArray0() const;
    void SetPoseKeyArray0(std::vector<float32> value);
    std::vector<float32> GetPoseKeyArray1() const;
    void SetPoseKeyArray1(std::vector<float32> value);
    int32_t GetLocalCyclePoseParameter() const;
    void SetLocalCyclePoseParameter(int32_t value);
    bool GetCalculatePoseParameters() const;
    void SetCalculatePoseParameters(bool value);
    bool GetFixedBlendWeight() const;
    void SetFixedBlendWeight(bool value);
    std::vector<float> GetFixedBlendWeightVals() const;
    void SetFixedBlendWeightVals(std::vector<float> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmStateMachineNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmStateMachineNode(std::string ptr, lua_State* state);
    GCNmStateMachineNode(void *ptr);

    int16_t GetDefaultStateIndex() const;
    void SetDefaultStateIndex(int16_t value);
    GCNmPoseNode GetParent() const;
    void SetParent(GCNmPoseNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBoneConstraintPoseSpaceMorph
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBoneConstraintPoseSpaceMorph(std::string ptr, lua_State* state);
    GCBoneConstraintPoseSpaceMorph(void *ptr);

    std::string GetBoneName() const;
    void SetBoneName(std::string value);
    std::string GetAttachmentName() const;
    void SetAttachmentName(std::string value);
    std::vector<CUtlString> GetOutputMorph() const;
    void SetOutputMorph(std::vector<CUtlString> value);
    std::vector<GCBoneConstraintPoseSpaceMorph> GetInputList() const;
    void SetInputList(std::vector<GCBoneConstraintPoseSpaceMorph> value);
    bool GetClamp() const;
    void SetClamp(bool value);
    GCBoneConstraintBase GetParent() const;
    void SetParent(GCBoneConstraintBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSSDSMsg_PreLayer
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSSDSMsg_PreLayer(std::string ptr, lua_State* state);
    GCSSDSMsg_PreLayer(void *ptr);

    GCSSDSMsg_LayerBase GetParent() const;
    void SetParent(GCSSDSMsg_LayerBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSelectorUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSelectorUpdateNode(std::string ptr, lua_State* state);
    GCSelectorUpdateNode(void *ptr);

    std::vector<GCAnimUpdateNodeRef> GetChildren() const;
    void SetChildren(std::vector<GCAnimUpdateNodeRef> value);
    std::vector<int8> GetTags() const;
    void SetTags(std::vector<int8> value);
    GCBlendCurve GetBlendCurve() const;
    void SetBlendCurve(GCBlendCurve value);
    GCAnimParamHandle GetParameter() const;
    void SetParameter(GCAnimParamHandle value);
    int32_t GetTagIndex() const;
    void SetTagIndex(int32_t value);
    uint64_t GetTagBehavior() const;
    void SetTagBehavior(uint64_t value);
    bool GetResetOnChange() const;
    void SetResetOnChange(bool value);
    bool GetLockWhenWaning() const;
    void SetLockWhenWaning(bool value);
    bool GetSyncCyclesOnChange() const;
    void SetSyncCyclesOnChange(bool value);
    GCAnimUpdateNodeBase GetParent() const;
    void SetParent(GCAnimUpdateNodeBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAimCameraUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAimCameraUpdateNode(std::string ptr, lua_State* state);
    GCAimCameraUpdateNode(void *ptr);

    GCAnimParamHandle GetParameterPosition() const;
    void SetParameterPosition(GCAnimParamHandle value);
    GCAnimParamHandle GetParameterOrientation() const;
    void SetParameterOrientation(GCAnimParamHandle value);
    GCAnimParamHandle GetParameterSpineRotationWeight() const;
    void SetParameterSpineRotationWeight(GCAnimParamHandle value);
    GCAnimParamHandle GetParameterPelvisOffset() const;
    void SetParameterPelvisOffset(GCAnimParamHandle value);
    GCAnimParamHandle GetParameterUseIK() const;
    void SetParameterUseIK(GCAnimParamHandle value);
    GCAnimParamHandle GetParameterWeaponDepenetrationDistance() const;
    void SetParameterWeaponDepenetrationDistance(GCAnimParamHandle value);
    GCAnimParamHandle GetParameterCameraClearanceDistance() const;
    void SetParameterCameraClearanceDistance(GCAnimParamHandle value);
    GAimCameraOpFixedSettings_t GetOpFixedSettings() const;
    void SetOpFixedSettings(GAimCameraOpFixedSettings_t value);
    GCUnaryUpdateNode GetParent() const;
    void SetParent(GCUnaryUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFootStepTriggerUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFootStepTriggerUpdateNode(std::string ptr, lua_State* state);
    GCFootStepTriggerUpdateNode(void *ptr);

    std::vector<GFootStepTrigger> GetTriggers() const;
    void SetTriggers(std::vector<GFootStepTrigger> value);
    float GetTolerance() const;
    void SetTolerance(float value);
    GCUnaryUpdateNode GetParent() const;
    void SetParent(GCUnaryUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GRnSoftbodyParticle_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GRnSoftbodyParticle_t(std::string ptr, lua_State* state);
    GRnSoftbodyParticle_t(void *ptr);

    float GetMassInv() const;
    void SetMassInv(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSingleFrameUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSingleFrameUpdateNode(std::string ptr, lua_State* state);
    GCSingleFrameUpdateNode(void *ptr);

    GCPoseHandle GetPoseCacheHandle() const;
    void SetPoseCacheHandle(GCPoseHandle value);
    float GetCycle() const;
    void SetCycle(float value);
    GCLeafUpdateNode GetParent() const;
    void SetParent(GCLeafUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSeqSynthAnimDesc
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSeqSynthAnimDesc(std::string ptr, lua_State* state);
    GCSeqSynthAnimDesc(void *ptr);

    GCSeqSeqDescFlag GetFlags() const;
    void SetFlags(GCSeqSeqDescFlag value);
    GCSeqTransition GetTransition() const;
    void SetTransition(GCSeqTransition value);
    int16_t GetLocalBaseReference() const;
    void SetLocalBaseReference(int16_t value);
    int16_t GetLocalBoneMask() const;
    void SetLocalBoneMask(int16_t value);
    std::vector<GCAnimActivity> GetActivityArray() const;
    void SetActivityArray(std::vector<GCAnimActivity> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCDirectPlaybackTagData
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCDirectPlaybackTagData(std::string ptr, lua_State* state);
    GCDirectPlaybackTagData(void *ptr);

    std::string GetSequenceName() const;
    void SetSequenceName(std::string value);
    std::vector<GTagSpan_t> GetTags() const;
    void SetTags(std::vector<GTagSpan_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEventFrameBoundary_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEventFrameBoundary_t(std::string ptr, lua_State* state);
    GEventFrameBoundary_t(void *ptr);

    float GetFrameTime() const;
    void SetFrameTime(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GWorldNode_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GWorldNode_t(std::string ptr, lua_State* state);
    GWorldNode_t(void *ptr);

    std::vector<GSceneObject_t> GetSceneObjects() const;
    void SetSceneObjects(std::vector<GSceneObject_t> value);
    std::vector<GInfoOverlayData_t> GetInfoOverlays() const;
    void SetInfoOverlays(std::vector<GInfoOverlayData_t> value);
    std::vector<uint16> GetVisClusterMembership() const;
    void SetVisClusterMembership(std::vector<uint16> value);
    std::vector<GAggregateSceneObject_t> GetAggregateSceneObjects() const;
    void SetAggregateSceneObjects(std::vector<GAggregateSceneObject_t> value);
    std::vector<GClutterSceneObject_t> GetClutterSceneObjects() const;
    void SetClutterSceneObjects(std::vector<GClutterSceneObject_t> value);
    std::vector<GExtraVertexStreamOverride_t> GetExtraVertexStreamOverrides() const;
    void SetExtraVertexStreamOverrides(std::vector<GExtraVertexStreamOverride_t> value);
    std::vector<GMaterialOverride_t> GetMaterialOverrides() const;
    void SetMaterialOverrides(std::vector<GMaterialOverride_t> value);
    std::vector<GWorldNodeOnDiskBufferData_t> GetExtraVertexStreams() const;
    void SetExtraVertexStreams(std::vector<GWorldNodeOnDiskBufferData_t> value);
    std::vector<CUtlString> GetLayerNames() const;
    void SetLayerNames(std::vector<CUtlString> value);
    std::vector<uint8> GetSceneObjectLayerIndices() const;
    void SetSceneObjectLayerIndices(std::vector<uint8> value);
    std::vector<uint8> GetOverlayLayerIndices() const;
    void SetOverlayLayerIndices(std::vector<uint8> value);
    std::string GetGrassFileName() const;
    void SetGrassFileName(std::string value);
    GBakedLightingInfo_t GetNodeLightingInfo() const;
    void SetNodeLightingInfo(GBakedLightingInfo_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GAggregateMeshInfo_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GAggregateMeshInfo_t(std::string ptr, lua_State* state);
    GAggregateMeshInfo_t(void *ptr);

    uint32_t GetVisClusterMemberOffset() const;
    void SetVisClusterMemberOffset(uint32_t value);
    uint32_t GetVisClusterMemberCount() const;
    void SetVisClusterMemberCount(uint32_t value);
    bool GetHasTransform() const;
    void SetHasTransform(bool value);
    int16_t GetDrawCallIndex() const;
    void SetDrawCallIndex(int16_t value);
    int16_t GetLODSetupIndex() const;
    void SetLODSetupIndex(int16_t value);
    uint32_t GetLODGroupMask() const;
    void SetLODGroupMask(uint32_t value);
    Color GetTintColor() const;
    void SetTintColor(Color value);
    uint64_t GetObjectFlags() const;
    void SetObjectFlags(uint64_t value);
    int32_t GetLightProbeVolumePrecomputedHandshake() const;
    void SetLightProbeVolumePrecomputedHandshake(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeSimdRodConstraintAnim_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeSimdRodConstraintAnim_t(std::string ptr, lua_State* state);
    GFeSimdRodConstraintAnim_t(void *ptr);

    float Get4Weight0() const;
    void Set4Weight0(float value);
    float Get4RelaxationFactor() const;
    void Set4RelaxationFactor(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEventPostAdvanceTick_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEventPostAdvanceTick_t(std::string ptr, lua_State* state);
    GEventPostAdvanceTick_t(void *ptr);

    int32_t GetCurrentTick() const;
    void SetCurrentTick(int32_t value);
    int32_t GetCurrentTickThisFrame() const;
    void SetCurrentTickThisFrame(int32_t value);
    int32_t GetTotalTicksThisFrame() const;
    void SetTotalTicksThisFrame(int32_t value);
    int32_t GetTotalTicks() const;
    void SetTotalTicks(int32_t value);
    GEventSimulate_t GetParent() const;
    void SetParent(GEventSimulate_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeBuildBoxRigid_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeBuildBoxRigid_t(std::string ptr, lua_State* state);
    GFeBuildBoxRigid_t(void *ptr);

    int32_t GetPriority() const;
    void SetPriority(int32_t value);
    uint32_t GetVertexMapHash() const;
    void SetVertexMapHash(uint32_t value);
    GFeBoxRigid_t GetParent() const;
    void SetParent(GFeBoxRigid_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GIPhysicsPlayerController
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GIPhysicsPlayerController(std::string ptr, lua_State* state);
    GIPhysicsPlayerController(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEventServerPostAdvanceTick_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEventServerPostAdvanceTick_t(std::string ptr, lua_State* state);
    GEventServerPostAdvanceTick_t(void *ptr);

    GEventPostAdvanceTick_t GetParent() const;
    void SetParent(GEventPostAdvanceTick_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEventClientPreOutput_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEventClientPreOutput_t(std::string ptr, lua_State* state);
    GEventClientPreOutput_t(void *ptr);

    GEngineLoopState_t GetLoopState() const;
    void SetLoopState(GEngineLoopState_t value);
    double GetRenderTime() const;
    void SetRenderTime(double value);
    double GetRenderFrameTime() const;
    void SetRenderFrameTime(double value);
    double GetRenderFrameTimeUnbounded() const;
    void SetRenderFrameTimeUnbounded(double value);
    float GetRealTime() const;
    void SetRealTime(float value);
    bool GetRenderOnly() const;
    void SetRenderOnly(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GRnSoftbodySpring_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GRnSoftbodySpring_t(std::string ptr, lua_State* state);
    GRnSoftbodySpring_t(void *ptr);

    std::vector<uint16_t> GetParticle() const;
    void SetParticle(std::vector<uint16_t> value);
    float GetLength() const;
    void SetLength(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeNodeReverseOffset_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeNodeReverseOffset_t(std::string ptr, lua_State* state);
    GFeNodeReverseOffset_t(void *ptr);

    Vector GetOffset() const;
    void SetOffset(Vector value);
    uint16_t GetBoneCtrl() const;
    void SetBoneCtrl(uint16_t value);
    uint16_t GetTargetNode() const;
    void SetTargetNode(uint16_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GRnHullDesc_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GRnHullDesc_t(std::string ptr, lua_State* state);
    GRnHullDesc_t(void *ptr);

    GRnHull_t GetHull() const;
    void SetHull(GRnHull_t value);
    GRnShapeDesc_t GetParent() const;
    void SetParent(GRnShapeDesc_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSymbolAnimParameter
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSymbolAnimParameter(std::string ptr, lua_State* state);
    GCSymbolAnimParameter(void *ptr);

    GCConcreteAnimParameter GetParent() const;
    void SetParent(GCConcreteAnimParameter value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeStiffHingeBuild_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeStiffHingeBuild_t(std::string ptr, lua_State* state);
    GFeStiffHingeBuild_t(void *ptr);

    float GetMaxAngle() const;
    void SetMaxAngle(float value);
    float GetStrength() const;
    void SetStrength(float value);
    std::vector<float> GetMotionBias() const;
    void SetMotionBias(std::vector<float> value);
    std::vector<uint16_t> GetNode() const;
    void SetNode(std::vector<uint16_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GExtraVertexStreamOverride_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GExtraVertexStreamOverride_t(std::string ptr, lua_State* state);
    GExtraVertexStreamOverride_t(void *ptr);

    uint32_t GetSubSceneObject() const;
    void SetSubSceneObject(uint32_t value);
    uint32_t GetDrawCallIndex() const;
    void SetDrawCallIndex(uint32_t value);
    uint64_t GetAdditionalMeshDrawPrimitiveFlags() const;
    void SetAdditionalMeshDrawPrimitiveFlags(uint64_t value);
    GCRenderBufferBinding GetExtraBufferBinding() const;
    void SetExtraBufferBinding(GCRenderBufferBinding value);
    GBaseSceneObjectOverride_t GetParent() const;
    void SetParent(GBaseSceneObjectOverride_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEntityIOConnectionData_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEntityIOConnectionData_t(std::string ptr, lua_State* state);
    GEntityIOConnectionData_t(void *ptr);

    std::string GetOutputName() const;
    void SetOutputName(std::string value);
    uint32_t GetTargetType() const;
    void SetTargetType(uint32_t value);
    std::string GetTargetName() const;
    void SetTargetName(std::string value);
    std::string GetInputName() const;
    void SetInputName(std::string value);
    std::string GetOverrideParam() const;
    void SetOverrideParam(std::string value);
    float GetDelay() const;
    void SetDelay(float value);
    int32_t GetTimesToFire() const;
    void SetTimesToFire(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GSkeletonAnimCapture_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GSkeletonAnimCapture_t(std::string ptr, lua_State* state);
    GSkeletonAnimCapture_t(void *ptr);

    int GetEntIndex() const;
    void SetEntIndex(int value);
    int GetEntParent() const;
    void SetEntParent(int value);
    std::vector<int> GetImportedCollision() const;
    void SetImportedCollision(std::vector<int> value);
    std::string GetModelName() const;
    void SetModelName(std::string value);
    std::string GetCaptureName() const;
    void SetCaptureName(std::string value);
    std::vector<GSkeletonAnimCapture_t> GetModelBindPose() const;
    void SetModelBindPose(std::vector<GSkeletonAnimCapture_t> value);
    std::vector<GSkeletonAnimCapture_t> GetFeModelInitPose() const;
    void SetFeModelInitPose(std::vector<GSkeletonAnimCapture_t> value);
    int32_t GetFlexControllers() const;
    void SetFlexControllers(int32_t value);
    bool GetPredicted() const;
    void SetPredicted(bool value);
    std::vector<GSkeletonAnimCapture_t> GetFrames() const;
    void SetFrames(std::vector<GSkeletonAnimCapture_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCStateActionUpdater
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCStateActionUpdater(std::string ptr, lua_State* state);
    GCStateActionUpdater(void *ptr);

    uint64_t GetBehavior() const;
    void SetBehavior(uint64_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSeqS1SeqDesc
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSeqS1SeqDesc(std::string ptr, lua_State* state);
    GCSeqS1SeqDesc(void *ptr);

    GCSeqSeqDescFlag GetFlags() const;
    void SetFlags(GCSeqSeqDescFlag value);
    GCSeqMultiFetch GetFetch() const;
    void SetFetch(GCSeqMultiFetch value);
    int32_t GetLocalWeightlist() const;
    void SetLocalWeightlist(int32_t value);
    std::vector<GCSeqAutoLayer> GetAutoLayerArray() const;
    void SetAutoLayerArray(std::vector<GCSeqAutoLayer> value);
    std::vector<GCSeqIKLock> GetIKLockArray() const;
    void SetIKLockArray(std::vector<GCSeqIKLock> value);
    GCSeqTransition GetTransition() const;
    void SetTransition(GCSeqTransition value);
    std::vector<GCAnimActivity> GetActivityArray() const;
    void SetActivityArray(std::vector<GCAnimActivity> value);
    std::vector<GCFootMotion> GetFootMotion() const;
    void SetFootMotion(std::vector<GCFootMotion> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GAimMatrixOpFixedSettings_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GAimMatrixOpFixedSettings_t(std::string ptr, lua_State* state);
    GAimMatrixOpFixedSettings_t(void *ptr);

    GCAnimAttachment GetAttachment() const;
    void SetAttachment(GCAnimAttachment value);
    GCAnimInputDamping GetDamping() const;
    void SetDamping(GCAnimInputDamping value);
    std::vector<GCPoseHandle> GetPoseCacheHandles() const;
    void SetPoseCacheHandles(std::vector<GCPoseHandle> value);
    uint64_t GetBlendMode() const;
    void SetBlendMode(uint64_t value);
    float GetMaxYawAngle() const;
    void SetMaxYawAngle(float value);
    float GetMaxPitchAngle() const;
    void SetMaxPitchAngle(float value);
    int32_t GetSequenceMaxFrame() const;
    void SetSequenceMaxFrame(int32_t value);
    int32_t GetBoneMaskIndex() const;
    void SetBoneMaskIndex(int32_t value);
    bool GetTargetIsPosition() const;
    void SetTargetIsPosition(bool value);
    bool GetUseBiasAndClamp() const;
    void SetUseBiasAndClamp(bool value);
    float GetBiasAndClampYawOffset() const;
    void SetBiasAndClampYawOffset(float value);
    float GetBiasAndClampPitchOffset() const;
    void SetBiasAndClampPitchOffset(float value);
    GCBlendCurve GetBiasAndClampBlendCurve() const;
    void SetBiasAndClampBlendCurve(GCBlendCurve value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GParticlePreviewState_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GParticlePreviewState_t(std::string ptr, lua_State* state);
    GParticlePreviewState_t(void *ptr);

    std::string GetPreviewModel() const;
    void SetPreviewModel(std::string value);
    uint32_t GetModSpecificData() const;
    void SetModSpecificData(uint32_t value);
    uint64_t GetGroundType() const;
    void SetGroundType(uint64_t value);
    std::string GetSequenceName() const;
    void SetSequenceName(std::string value);
    int32_t GetFireParticleOnSequenceFrame() const;
    void SetFireParticleOnSequenceFrame(int32_t value);
    std::string GetHitboxSetName() const;
    void SetHitboxSetName(std::string value);
    std::string GetMaterialGroupName() const;
    void SetMaterialGroupName(std::string value);
    std::vector<GParticlePreviewBodyGroup_t> GetBodyGroups() const;
    void SetBodyGroups(std::vector<GParticlePreviewBodyGroup_t> value);
    float GetPlaybackSpeed() const;
    void SetPlaybackSpeed(float value);
    float GetParticleSimulationRate() const;
    void SetParticleSimulationRate(float value);
    bool GetShouldDrawHitboxes() const;
    void SetShouldDrawHitboxes(bool value);
    bool GetShouldDrawAttachments() const;
    void SetShouldDrawAttachments(bool value);
    bool GetShouldDrawAttachmentNames() const;
    void SetShouldDrawAttachmentNames(bool value);
    bool GetShouldDrawControlPointAxes() const;
    void SetShouldDrawControlPointAxes(bool value);
    bool GetAnimationNonLooping() const;
    void SetAnimationNonLooping(bool value);
    Vector GetPreviewGravity() const;
    void SetPreviewGravity(Vector value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeCtrlOsOffset_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeCtrlOsOffset_t(std::string ptr, lua_State* state);
    GFeCtrlOsOffset_t(void *ptr);

    uint16_t GetCtrlParent() const;
    void SetCtrlParent(uint16_t value);
    uint16_t GetCtrlChild() const;
    void SetCtrlChild(uint16_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMorphData
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMorphData(std::string ptr, lua_State* state);
    GCMorphData(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    std::vector<GCMorphRectData> GetMorphRectDatas() const;
    void SetMorphRectDatas(std::vector<GCMorphRectData> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAimMatrixUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAimMatrixUpdateNode(std::string ptr, lua_State* state);
    GCAimMatrixUpdateNode(void *ptr);

    GAimMatrixOpFixedSettings_t GetOpFixedSettings() const;
    void SetOpFixedSettings(GAimMatrixOpFixedSettings_t value);
    uint64_t GetTarget() const;
    void SetTarget(uint64_t value);
    GCAnimParamHandle GetParamIndex() const;
    void SetParamIndex(GCAnimParamHandle value);
    bool GetResetChild() const;
    void SetResetChild(bool value);
    bool GetLockWhenWaning() const;
    void SetLockWhenWaning(bool value);
    GCUnaryUpdateNode GetParent() const;
    void SetParent(GCUnaryUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCDirectionalBlendUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCDirectionalBlendUpdateNode(std::string ptr, lua_State* state);
    GCDirectionalBlendUpdateNode(void *ptr);

    GCAnimInputDamping GetDamping() const;
    void SetDamping(GCAnimInputDamping value);
    uint64_t GetBlendValueSource() const;
    void SetBlendValueSource(uint64_t value);
    GCAnimParamHandle GetParamIndex() const;
    void SetParamIndex(GCAnimParamHandle value);
    float GetPlaybackSpeed() const;
    void SetPlaybackSpeed(float value);
    float GetDuration() const;
    void SetDuration(float value);
    bool GetLoop() const;
    void SetLoop(bool value);
    bool GetLockBlendOnReset() const;
    void SetLockBlendOnReset(bool value);
    GCLeafUpdateNode GetParent() const;
    void SetParent(GCLeafUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVMixPannerDesc_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVMixPannerDesc_t(std::string ptr, lua_State* state);
    GVMixPannerDesc_t(void *ptr);

    uint64_t GetType() const;
    void SetType(uint64_t value);
    float GetStrength() const;
    void SetStrength(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeSimdSpringIntegrator_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeSimdSpringIntegrator_t(std::string ptr, lua_State* state);
    GFeSimdSpringIntegrator_t(void *ptr);

    float GetSpringRestLength() const;
    void SetSpringRestLength(float value);
    float GetSpringConstant() const;
    void SetSpringConstant(float value);
    float GetSpringDamping() const;
    void SetSpringDamping(float value);
    float GetNodeWeight0() const;
    void SetNodeWeight0(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GModelBoneFlexDriver_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GModelBoneFlexDriver_t(std::string ptr, lua_State* state);
    GModelBoneFlexDriver_t(void *ptr);

    std::string GetBoneName() const;
    void SetBoneName(std::string value);
    uint32_t GetBoneNameToken() const;
    void SetBoneNameToken(uint32_t value);
    std::vector<GModelBoneFlexDriverControl_t> GetControls() const;
    void SetControls(std::vector<GModelBoneFlexDriverControl_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBoolAnimParameter
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBoolAnimParameter(std::string ptr, lua_State* state);
    GCBoolAnimParameter(void *ptr);

    bool GetDefaultValue() const;
    void SetDefaultValue(bool value);
    GCConcreteAnimParameter GetParent() const;
    void SetParent(GCConcreteAnimParameter value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEventAppShutdown_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEventAppShutdown_t(std::string ptr, lua_State* state);
    GEventAppShutdown_t(void *ptr);

    int32_t GetDummy0() const;
    void SetDummy0(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GResourceId_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GResourceId_t(std::string ptr, lua_State* state);
    GResourceId_t(void *ptr);

    uint64_t GetValue() const;
    void SetValue(uint64_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCVoiceContainerRealtimeFMSineWave
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCVoiceContainerRealtimeFMSineWave(std::string ptr, lua_State* state);
    GCVoiceContainerRealtimeFMSineWave(void *ptr);

    float GetCarrierFrequency() const;
    void SetCarrierFrequency(float value);
    float GetModulatorFrequency() const;
    void SetModulatorFrequency(float value);
    float GetModulatorAmount() const;
    void SetModulatorAmount(float value);
    GCVoiceContainerBase GetParent() const;
    void SetParent(GCVoiceContainerBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmVirtualParameterBoolNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmVirtualParameterBoolNode(std::string ptr, lua_State* state);
    GCNmVirtualParameterBoolNode(void *ptr);

    int16_t GetChildNodeIdx() const;
    void SetChildNodeIdx(int16_t value);
    GCNmBoolValueNode GetParent() const;
    void SetParent(GCNmBoolValueNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmSyncTrack
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmSyncTrack(std::string ptr, lua_State* state);
    GCNmSyncTrack(void *ptr);

    int32_t GetStartEventOffset() const;
    void SetStartEventOffset(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GTagSpan_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GTagSpan_t(std::string ptr, lua_State* state);
    GTagSpan_t(void *ptr);

    int32_t GetTagIndex() const;
    void SetTagIndex(int32_t value);
    float GetStartCycle() const;
    void SetStartCycle(float value);
    float GetEndCycle() const;
    void SetEndCycle(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmStateNode__TimedEvent_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmStateNode__TimedEvent_t(std::string ptr, lua_State* state);
    GCNmStateNode__TimedEvent_t(void *ptr);

    float GetTimeValue() const;
    void SetTimeValue(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmControlParameterTargetNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmControlParameterTargetNode(std::string ptr, lua_State* state);
    GCNmControlParameterTargetNode(void *ptr);

    GCNmTargetValueNode GetParent() const;
    void SetParent(GCNmTargetValueNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFootstepLandedAnimTag
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFootstepLandedAnimTag(std::string ptr, lua_State* state);
    GCFootstepLandedAnimTag(void *ptr);

    uint64_t GetFootstepType() const;
    void SetFootstepType(uint64_t value);
    std::string GetOverrideSoundName() const;
    void SetOverrideSoundName(std::string value);
    std::string GetDebugAnimSourceString() const;
    void SetDebugAnimSourceString(std::string value);
    std::string GetBoneName() const;
    void SetBoneName(std::string value);
    GCAnimTagBase GetParent() const;
    void SetParent(GCAnimTagBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEnumAnimParameter
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEnumAnimParameter(std::string ptr, lua_State* state);
    GCEnumAnimParameter(void *ptr);

    uint32_t GetDefaultValue() const;
    void SetDefaultValue(uint32_t value);
    std::vector<CUtlString> GetEnumOptions() const;
    void SetEnumOptions(std::vector<CUtlString> value);
    std::vector<uint64> GetEnumReferenced() const;
    void SetEnumReferenced(std::vector<uint64> value);
    GCConcreteAnimParameter GetParent() const;
    void SetParent(GCConcreteAnimParameter value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimationGraphVisualizerPie
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimationGraphVisualizerPie(std::string ptr, lua_State* state);
    GCAnimationGraphVisualizerPie(void *ptr);

    Vector GetWsCenter() const;
    void SetWsCenter(Vector value);
    Vector GetWsStart() const;
    void SetWsStart(Vector value);
    Vector GetWsEnd() const;
    void SetWsEnd(Vector value);
    Color GetColor() const;
    void SetColor(Color value);
    GCAnimationGraphVisualizerPrimitiveBase GetParent() const;
    void SetParent(GCAnimationGraphVisualizerPrimitiveBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GAnimationSnapshot_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GAnimationSnapshot_t(std::string ptr, lua_State* state);
    GAnimationSnapshot_t(void *ptr);

    int32_t GetEntIndex() const;
    void SetEntIndex(int32_t value);
    std::string GetModelName() const;
    void SetModelName(std::string value);
    GAnimationSnapshotBase_t GetParent() const;
    void SetParent(GAnimationSnapshotBase_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVPhysXCollisionAttributes_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVPhysXCollisionAttributes_t(std::string ptr, lua_State* state);
    GVPhysXCollisionAttributes_t(void *ptr);

    uint32_t GetCollisionGroup() const;
    void SetCollisionGroup(uint32_t value);
    std::vector<uint32> GetInteractAs() const;
    void SetInteractAs(std::vector<uint32> value);
    std::vector<uint32> GetInteractWith() const;
    void SetInteractWith(std::vector<uint32> value);
    std::vector<uint32> GetInteractExclude() const;
    void SetInteractExclude(std::vector<uint32> value);
    std::string GetCollisionGroupString() const;
    void SetCollisionGroupString(std::string value);
    std::vector<CUtlString> GetInteractAsStrings() const;
    void SetInteractAsStrings(std::vector<CUtlString> value);
    std::vector<CUtlString> GetInteractWithStrings() const;
    void SetInteractWithStrings(std::vector<CUtlString> value);
    std::vector<CUtlString> GetInteractExcludeStrings() const;
    void SetInteractExcludeStrings(std::vector<CUtlString> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCActionComponentUpdater
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCActionComponentUpdater(std::string ptr, lua_State* state);
    GCActionComponentUpdater(void *ptr);

    GCAnimComponentUpdater GetParent() const;
    void SetParent(GCAnimComponentUpdater value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmVirtualParameterVectorNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmVirtualParameterVectorNode(std::string ptr, lua_State* state);
    GCNmVirtualParameterVectorNode(void *ptr);

    int16_t GetChildNodeIdx() const;
    void SetChildNodeIdx(int16_t value);
    GCNmVectorValueNode GetParent() const;
    void SetParent(GCNmVectorValueNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimFrameSegment
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimFrameSegment(std::string ptr, lua_State* state);
    GCAnimFrameSegment(void *ptr);

    int32_t GetUniqueFrameIndex() const;
    void SetUniqueFrameIndex(int32_t value);
    uint32_t GetLocalElementMasks() const;
    void SetLocalElementMasks(uint32_t value);
    int32_t GetLocalChannel() const;
    void SetLocalChannel(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCClothSettingsAnimTag
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCClothSettingsAnimTag(std::string ptr, lua_State* state);
    GCClothSettingsAnimTag(void *ptr);

    float GetStiffness() const;
    void SetStiffness(float value);
    float GetEaseIn() const;
    void SetEaseIn(float value);
    float GetEaseOut() const;
    void SetEaseOut(float value);
    std::string GetVertexSet() const;
    void SetVertexSet(std::string value);
    GCAnimTagBase GetParent() const;
    void SetParent(GCAnimTagBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVariableInfo_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVariableInfo_t(std::string ptr, lua_State* state);
    GVariableInfo_t(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    uint32_t GetNameToken() const;
    void SetNameToken(uint32_t value);
    GFuseVariableIndex_t GetIndex() const;
    void SetIndex(GFuseVariableIndex_t value);
    uint32_t GetNumComponents() const;
    void SetNumComponents(uint32_t value);
    uint64_t GetVarType() const;
    void SetVarType(uint64_t value);
    uint64_t GetAccess() const;
    void SetAccess(uint64_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVMixShaperDesc_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVMixShaperDesc_t(std::string ptr, lua_State* state);
    GVMixShaperDesc_t(void *ptr);

    int32_t GetShape() const;
    void SetShape(int32_t value);
    float GetFldbDrive() const;
    void SetFldbDrive(float value);
    float GetFldbOutputGain() const;
    void SetFldbOutputGain(float value);
    float GetWetMix() const;
    void SetWetMix(float value);
    int32_t GetOversampleFactor() const;
    void SetOversampleFactor(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSoundInfoHeader
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSoundInfoHeader(std::string ptr, lua_State* state);
    GCSoundInfoHeader(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCVoiceContainerDecayingSineWave
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCVoiceContainerDecayingSineWave(std::string ptr, lua_State* state);
    GCVoiceContainerDecayingSineWave(void *ptr);

    float GetFrequency() const;
    void SetFrequency(float value);
    float GetDecayTime() const;
    void SetDecayTime(float value);
    GCVoiceContainerBase GetParent() const;
    void SetParent(GCVoiceContainerBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCycleControlClipUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCycleControlClipUpdateNode(std::string ptr, lua_State* state);
    GCCycleControlClipUpdateNode(void *ptr);

    std::vector<GTagSpan_t> GetTags() const;
    void SetTags(std::vector<GTagSpan_t> value);
    float GetDuration() const;
    void SetDuration(float value);
    uint64_t GetValueSource() const;
    void SetValueSource(uint64_t value);
    GCAnimParamHandle GetParamIndex() const;
    void SetParamIndex(GCAnimParamHandle value);
    GCLeafUpdateNode GetParent() const;
    void SetParent(GCLeafUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBaseTrailRenderer
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBaseTrailRenderer(std::string ptr, lua_State* state);
    GCBaseTrailRenderer(void *ptr);

    uint64_t GetOrientationType() const;
    void SetOrientationType(uint64_t value);
    int32_t GetOrientationControlPoint() const;
    void SetOrientationControlPoint(int32_t value);
    float GetMinSize() const;
    void SetMinSize(float value);
    float GetMaxSize() const;
    void SetMaxSize(float value);
    GCParticleCollectionRendererFloatInput GetStartFadeSize() const;
    void SetStartFadeSize(GCParticleCollectionRendererFloatInput value);
    GCParticleCollectionRendererFloatInput GetEndFadeSize() const;
    void SetEndFadeSize(GCParticleCollectionRendererFloatInput value);
    bool GetClampV() const;
    void SetClampV(bool value);
    GCBaseRendererSource2 GetParent() const;
    void SetParent(GCBaseRendererSource2 value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBoneConstraintPoseSpaceBone
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBoneConstraintPoseSpaceBone(std::string ptr, lua_State* state);
    GCBoneConstraintPoseSpaceBone(void *ptr);

    std::vector<GCBoneConstraintPoseSpaceBone> GetInputList() const;
    void SetInputList(std::vector<GCBoneConstraintPoseSpaceBone> value);
    GCBaseConstraint GetParent() const;
    void SetParent(GCBaseConstraint value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEventServerPostSimulate_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEventServerPostSimulate_t(std::string ptr, lua_State* state);
    GEventServerPostSimulate_t(void *ptr);

    GEventSimulate_t GetParent() const;
    void SetParent(GEventSimulate_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCChoreoUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCChoreoUpdateNode(std::string ptr, lua_State* state);
    GCChoreoUpdateNode(void *ptr);

    GCUnaryUpdateNode GetParent() const;
    void SetParent(GCUnaryUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmSkeleton
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmSkeleton(std::string ptr, lua_State* state);
    GCNmSkeleton(void *ptr);

    std::vector<int32> GetParentIndices() const;
    void SetParentIndices(std::vector<int32> value);
    int32_t GetNumBonesToSampleAtLowLOD() const;
    void SetNumBonesToSampleAtLowLOD(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVMixBoxverbDesc_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVMixBoxverbDesc_t(std::string ptr, lua_State* state);
    GVMixBoxverbDesc_t(void *ptr);

    float GetSizeMax() const;
    void SetSizeMax(float value);
    float GetSizeMin() const;
    void SetSizeMin(float value);
    float GetComplexity() const;
    void SetComplexity(float value);
    float GetDiffusion() const;
    void SetDiffusion(float value);
    float GetModDepth() const;
    void SetModDepth(float value);
    float GetModRate() const;
    void SetModRate(float value);
    bool GetParallel() const;
    void SetParallel(bool value);
    GVMixFilterDesc_t GetFilterType() const;
    void SetFilterType(GVMixFilterDesc_t value);
    float GetWidth() const;
    void SetWidth(float value);
    float GetHeight() const;
    void SetHeight(float value);
    float GetDepth() const;
    void SetDepth(float value);
    float GetFeedbackScale() const;
    void SetFeedbackScale(float value);
    float GetFeedbackWidth() const;
    void SetFeedbackWidth(float value);
    float GetFeedbackHeight() const;
    void SetFeedbackHeight(float value);
    float GetFeedbackDepth() const;
    void SetFeedbackDepth(float value);
    float GetOutputGain() const;
    void SetOutputGain(float value);
    float GetTaps() const;
    void SetTaps(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeTreeChildren_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeTreeChildren_t(std::string ptr, lua_State* state);
    GFeTreeChildren_t(void *ptr);

    std::vector<uint16_t> GetChild() const;
    void SetChild(std::vector<uint16_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSceneObjectData
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSceneObjectData(std::string ptr, lua_State* state);
    GCSceneObjectData(void *ptr);

    Vector GetMinBounds() const;
    void SetMinBounds(Vector value);
    Vector GetMaxBounds() const;
    void SetMaxBounds(Vector value);
    std::vector<GCMaterialDrawDescriptor> GetDrawCalls() const;
    void SetDrawCalls(std::vector<GCMaterialDrawDescriptor> value);
    std::vector<GAABB_t> GetDrawBounds() const;
    void SetDrawBounds(std::vector<GAABB_t> value);
    std::vector<GCMeshletDescriptor> GetMeshlets() const;
    void SetMeshlets(std::vector<GCMeshletDescriptor> value);
    Vector4D GetTintColor() const;
    void SetTintColor(Vector4D value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GStanceInfo_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GStanceInfo_t(std::string ptr, lua_State* state);
    GStanceInfo_t(void *ptr);

    Vector GetPosition() const;
    void SetPosition(Vector value);
    float GetDirection() const;
    void SetDirection(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMotionNodeSequence
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMotionNodeSequence(std::string ptr, lua_State* state);
    GCMotionNodeSequence(void *ptr);

    std::vector<GTagSpan_t> GetTags() const;
    void SetTags(std::vector<GTagSpan_t> value);
    float GetPlaybackSpeed() const;
    void SetPlaybackSpeed(float value);
    GCMotionNode GetParent() const;
    void SetParent(GCMotionNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFootCycleDefinition
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFootCycleDefinition(std::string ptr, lua_State* state);
    GCFootCycleDefinition(void *ptr);

    Vector GetStancePositionMS() const;
    void SetStancePositionMS(Vector value);
    Vector GetMidpointPositionMS() const;
    void SetMidpointPositionMS(Vector value);
    float GetStanceDirectionMS() const;
    void SetStanceDirectionMS(float value);
    Vector GetToStrideStartPos() const;
    void SetToStrideStartPos(Vector value);
    GCAnimCycle GetStanceCycle() const;
    void SetStanceCycle(GCAnimCycle value);
    GCFootCycle GetFootLiftCycle() const;
    void SetFootLiftCycle(GCFootCycle value);
    GCFootCycle GetFootOffCycle() const;
    void SetFootOffCycle(GCFootCycle value);
    GCFootCycle GetFootStrikeCycle() const;
    void SetFootStrikeCycle(GCFootCycle value);
    GCFootCycle GetFootLandCycle() const;
    void SetFootLandCycle(GCFootCycle value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimDesc_Flag
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimDesc_Flag(std::string ptr, lua_State* state);
    GCAnimDesc_Flag(void *ptr);

    bool GetLooping() const;
    void SetLooping(bool value);
    bool GetAllZeros() const;
    void SetAllZeros(bool value);
    bool GetHidden() const;
    void SetHidden(bool value);
    bool GetDelta() const;
    void SetDelta(bool value);
    bool GetLegacyWorldspace() const;
    void SetLegacyWorldspace(bool value);
    bool GetModelDoc() const;
    void SetModelDoc(bool value);
    bool GetImplicitSeqIgnoreDelta() const;
    void SetImplicitSeqIgnoreDelta(bool value);
    bool GetAnimGraphAdditive() const;
    void SetAnimGraphAdditive(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBoneVelocityMetricEvaluator
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBoneVelocityMetricEvaluator(std::string ptr, lua_State* state);
    GCBoneVelocityMetricEvaluator(void *ptr);

    int32_t GetBoneIndex() const;
    void SetBoneIndex(int32_t value);
    GCMotionMetricEvaluator GetParent() const;
    void SetParent(GCMotionMetricEvaluator value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFuseProgram
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFuseProgram(std::string ptr, lua_State* state);
    GCFuseProgram(void *ptr);

    std::vector<uint8> GetProgramBuffer() const;
    void SetProgramBuffer(std::vector<uint8> value);
    std::vector<GFuseVariableIndex_t> GetVariablesRead() const;
    void SetVariablesRead(std::vector<GFuseVariableIndex_t> value);
    std::vector<GFuseVariableIndex_t> GetVariablesWritten() const;
    void SetVariablesWritten(std::vector<GFuseVariableIndex_t> value);
    int32_t GetMaxTempVarsUsed() const;
    void SetMaxTempVarsUsed(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFeVertexMapBuildArray
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFeVertexMapBuildArray(std::string ptr, lua_State* state);
    GCFeVertexMapBuildArray(void *ptr);

    std::vector<GFeVertexMapBuild_t*> GetArray() const;
    void SetArray(std::vector<GFeVertexMapBuild_t*> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeSoftParent_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeSoftParent_t(std::string ptr, lua_State* state);
    GFeSoftParent_t(void *ptr);

    int32_t GetParent() const;
    void SetParent(int32_t value);
    float GetAlpha() const;
    void SetAlpha(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFootFallAnimTag
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFootFallAnimTag(std::string ptr, lua_State* state);
    GCFootFallAnimTag(void *ptr);

    uint64_t GetFoot() const;
    void SetFoot(uint64_t value);
    GCAnimTagBase GetParent() const;
    void SetParent(GCAnimTagBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEventClientOutput_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEventClientOutput_t(std::string ptr, lua_State* state);
    GEventClientOutput_t(void *ptr);

    GEngineLoopState_t GetLoopState() const;
    void SetLoopState(GEngineLoopState_t value);
    float GetRenderTime() const;
    void SetRenderTime(float value);
    float GetRealTime() const;
    void SetRealTime(float value);
    float GetRenderFrameTimeUnbounded() const;
    void SetRenderFrameTimeUnbounded(float value);
    bool GetRenderOnly() const;
    void SetRenderOnly(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GMaterialVariable_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GMaterialVariable_t(std::string ptr, lua_State* state);
    GMaterialVariable_t(void *ptr);

    std::string GetStrVariable() const;
    void SetStrVariable(std::string value);
    GParticleAttributeIndex_t GetVariableField() const;
    void SetVariableField(GParticleAttributeIndex_t value);
    float GetScale() const;
    void SetScale(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFeNamedJiggleBone
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFeNamedJiggleBone(std::string ptr, lua_State* state);
    GCFeNamedJiggleBone(void *ptr);

    std::string GetStrParentBone() const;
    void SetStrParentBone(std::string value);
    uint32_t GetJiggleParent() const;
    void SetJiggleParent(uint32_t value);
    GCFeJiggleBone GetJiggleBone() const;
    void SetJiggleBone(GCFeJiggleBone value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEventClientProcessInput_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEventClientProcessInput_t(std::string ptr, lua_State* state);
    GEventClientProcessInput_t(void *ptr);

    GEngineLoopState_t GetLoopState() const;
    void SetLoopState(GEngineLoopState_t value);
    float GetRealTime() const;
    void SetRealTime(float value);
    float GetTickInterval() const;
    void SetTickInterval(float value);
    double GetTickStartTime() const;
    void SetTickStartTime(double value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GJiggleBoneSettingsList_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GJiggleBoneSettingsList_t(std::string ptr, lua_State* state);
    GJiggleBoneSettingsList_t(void *ptr);

    std::vector<GJiggleBoneSettings_t> GetBoneSettings() const;
    void SetBoneSettings(std::vector<GJiggleBoneSettings_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSequenceFinishedAnimTag
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSequenceFinishedAnimTag(std::string ptr, lua_State* state);
    GCSequenceFinishedAnimTag(void *ptr);

    std::string GetSequenceName() const;
    void SetSequenceName(std::string value);
    GCAnimTagBase GetParent() const;
    void SetParent(GCAnimTagBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimationGraphVisualizerText
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimationGraphVisualizerText(std::string ptr, lua_State* state);
    GCAnimationGraphVisualizerText(void *ptr);

    Vector GetWsPosition() const;
    void SetWsPosition(Vector value);
    Color GetColor() const;
    void SetColor(Color value);
    std::string GetText() const;
    void SetText(std::string value);
    GCAnimationGraphVisualizerPrimitiveBase GetParent() const;
    void SetParent(GCAnimationGraphVisualizerPrimitiveBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCDampedPathAnimMotorUpdater
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCDampedPathAnimMotorUpdater(std::string ptr, lua_State* state);
    GCDampedPathAnimMotorUpdater(void *ptr);

    float GetAnticipationTime() const;
    void SetAnticipationTime(float value);
    float GetMinSpeedScale() const;
    void SetMinSpeedScale(float value);
    GCAnimParamHandle GetAnticipationPosParam() const;
    void SetAnticipationPosParam(GCAnimParamHandle value);
    GCAnimParamHandle GetAnticipationHeadingParam() const;
    void SetAnticipationHeadingParam(GCAnimParamHandle value);
    float GetSpringConstant() const;
    void SetSpringConstant(float value);
    float GetMinSpringTension() const;
    void SetMinSpringTension(float value);
    float GetMaxSpringTension() const;
    void SetMaxSpringTension(float value);
    GCPathAnimMotorUpdaterBase GetParent() const;
    void SetParent(GCPathAnimMotorUpdaterBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GLookAtOpFixedSettings_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GLookAtOpFixedSettings_t(std::string ptr, lua_State* state);
    GLookAtOpFixedSettings_t(void *ptr);

    GCAnimAttachment GetAttachment() const;
    void SetAttachment(GCAnimAttachment value);
    GCAnimInputDamping GetDamping() const;
    void SetDamping(GCAnimInputDamping value);
    std::vector<GLookAtBone_t> GetBones() const;
    void SetBones(std::vector<GLookAtBone_t> value);
    float GetYawLimit() const;
    void SetYawLimit(float value);
    float GetPitchLimit() const;
    void SetPitchLimit(float value);
    float GetHysteresisInnerAngle() const;
    void SetHysteresisInnerAngle(float value);
    float GetHysteresisOuterAngle() const;
    void SetHysteresisOuterAngle(float value);
    bool GetRotateYawForward() const;
    void SetRotateYawForward(bool value);
    bool GetMaintainUpDirection() const;
    void SetMaintainUpDirection(bool value);
    bool GetTargetIsPosition() const;
    void SetTargetIsPosition(bool value);
    bool GetUseHysteresis() const;
    void SetUseHysteresis(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEntityIOOutput
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEntityIOOutput(std::string ptr, lua_State* state);
    GCEntityIOOutput(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCDSPPresetMixgroupModifierTable
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCDSPPresetMixgroupModifierTable(std::string ptr, lua_State* state);
    GCDSPPresetMixgroupModifierTable(void *ptr);

    std::vector<GCDspPresetModifierList> GetTable() const;
    void SetTable(std::vector<GCDspPresetModifierList> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GRnWing_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GRnWing_t(std::string ptr, lua_State* state);
    GRnWing_t(void *ptr);

    std::vector<int32_t> GetIndex() const;
    void SetIndex(std::vector<int32_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmChildGraphNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmChildGraphNode(std::string ptr, lua_State* state);
    GCNmChildGraphNode(void *ptr);

    int16_t GetChildGraphIdx() const;
    void SetChildGraphIdx(int16_t value);
    GCNmPoseNode GetParent() const;
    void SetParent(GCNmPoseNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVMixPlateverbDesc_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVMixPlateverbDesc_t(std::string ptr, lua_State* state);
    GVMixPlateverbDesc_t(void *ptr);

    float GetPrefilter() const;
    void SetPrefilter(float value);
    float GetInputDiffusion1() const;
    void SetInputDiffusion1(float value);
    float GetInputDiffusion2() const;
    void SetInputDiffusion2(float value);
    float GetDecay() const;
    void SetDecay(float value);
    float GetDamp() const;
    void SetDamp(float value);
    float GetFeedbackDiffusion1() const;
    void SetFeedbackDiffusion1(float value);
    float GetFeedbackDiffusion2() const;
    void SetFeedbackDiffusion2(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMotionSearchDB
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMotionSearchDB(std::string ptr, lua_State* state);
    GCMotionSearchDB(void *ptr);

    GCMotionSearchNode GetRootNode() const;
    void SetRootNode(GCMotionSearchNode value);
    GCProductQuantizer GetResidualQuantizer() const;
    void SetResidualQuantizer(GCProductQuantizer value);
    std::vector<GMotionDBIndex> GetCodeIndices() const;
    void SetCodeIndices(std::vector<GMotionDBIndex> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVPhysics2ShapeDef_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVPhysics2ShapeDef_t(std::string ptr, lua_State* state);
    GVPhysics2ShapeDef_t(void *ptr);

    std::vector<GRnSphereDesc_t> GetSpheres() const;
    void SetSpheres(std::vector<GRnSphereDesc_t> value);
    std::vector<GRnCapsuleDesc_t> GetCapsules() const;
    void SetCapsules(std::vector<GRnCapsuleDesc_t> value);
    std::vector<GRnHullDesc_t> GetHulls() const;
    void SetHulls(std::vector<GRnHullDesc_t> value);
    std::vector<GRnMeshDesc_t> GetMeshes() const;
    void SetMeshes(std::vector<GRnMeshDesc_t> value);
    std::vector<uint16> GetCollisionAttributeIndices() const;
    void SetCollisionAttributeIndices(std::vector<uint16> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GWorldBuilderParams_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GWorldBuilderParams_t(std::string ptr, lua_State* state);
    GWorldBuilderParams_t(void *ptr);

    float GetMinDrawVolumeSize() const;
    void SetMinDrawVolumeSize(float value);
    bool GetBuildBakedLighting() const;
    void SetBuildBakedLighting(bool value);
    GBakedLightingInfo_t GetBakedLightingInfo() const;
    void SetBakedLightingInfo(GBakedLightingInfo_t value);
    uint64_t GetCompileTimestamp() const;
    void SetCompileTimestamp(uint64_t value);
    uint64_t GetCompileFingerprint() const;
    void SetCompileFingerprint(uint64_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFootAdjustmentUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFootAdjustmentUpdateNode(std::string ptr, lua_State* state);
    GCFootAdjustmentUpdateNode(void *ptr);

    GCPoseHandle GetBasePoseCacheHandle() const;
    void SetBasePoseCacheHandle(GCPoseHandle value);
    GCAnimParamHandle GetFacingTarget() const;
    void SetFacingTarget(GCAnimParamHandle value);
    float GetTurnTimeMin() const;
    void SetTurnTimeMin(float value);
    float GetTurnTimeMax() const;
    void SetTurnTimeMax(float value);
    float GetStepHeightMax() const;
    void SetStepHeightMax(float value);
    float GetStepHeightMaxAngle() const;
    void SetStepHeightMaxAngle(float value);
    bool GetResetChild() const;
    void SetResetChild(bool value);
    bool GetAnimationDriven() const;
    void SetAnimationDriven(bool value);
    GCUnaryUpdateNode GetParent() const;
    void SetParent(GCUnaryUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmClipNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmClipNode(std::string ptr, lua_State* state);
    GCNmClipNode(void *ptr);

    int16_t GetPlayInReverseValueNodeIdx() const;
    void SetPlayInReverseValueNodeIdx(int16_t value);
    int16_t GetResetTimeValueNodeIdx() const;
    void SetResetTimeValueNodeIdx(int16_t value);
    bool GetSampleRootMotion() const;
    void SetSampleRootMotion(bool value);
    bool GetAllowLooping() const;
    void SetAllowLooping(bool value);
    int16_t GetDataSlotIdx() const;
    void SetDataSlotIdx(int16_t value);
    GCNmPoseNode GetParent() const;
    void SetParent(GCNmPoseNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimMorphDifference
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimMorphDifference(std::string ptr, lua_State* state);
    GCAnimMorphDifference(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GIParticleCollection
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GIParticleCollection(std::string ptr, lua_State* state);
    GIParticleCollection(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmGraphDefinition__ChildGraphSlot_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmGraphDefinition__ChildGraphSlot_t(std::string ptr, lua_State* state);
    GCNmGraphDefinition__ChildGraphSlot_t(void *ptr);

    int16_t GetNodeIdx() const;
    void SetNodeIdx(int16_t value);
    int16_t GetDataSlotIdx() const;
    void SetDataSlotIdx(int16_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFutureVelocityMetricEvaluator
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFutureVelocityMetricEvaluator(std::string ptr, lua_State* state);
    GCFutureVelocityMetricEvaluator(void *ptr);

    float GetDistance() const;
    void SetDistance(float value);
    float GetStoppingDistance() const;
    void SetStoppingDistance(float value);
    float GetTargetSpeed() const;
    void SetTargetSpeed(float value);
    uint64_t GetMode() const;
    void SetMode(uint64_t value);
    GCMotionMetricEvaluator GetParent() const;
    void SetParent(GCMotionMetricEvaluator value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCParticleProperty
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCParticleProperty(std::string ptr, lua_State* state);
    GCParticleProperty(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVertexPositionNormal_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVertexPositionNormal_t(std::string ptr, lua_State* state);
    GVertexPositionNormal_t(void *ptr);

    Vector GetPosition() const;
    void SetPosition(Vector value);
    Vector GetNormal() const;
    void SetNormal(Vector value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeEffectDesc_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeEffectDesc_t(std::string ptr, lua_State* state);
    GFeEffectDesc_t(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    uint32_t GetNameHash() const;
    void SetNameHash(uint32_t value);
    int32_t GetType() const;
    void SetType(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCLODComponentUpdater
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCLODComponentUpdater(std::string ptr, lua_State* state);
    GCLODComponentUpdater(void *ptr);

    int32_t GetServerLOD() const;
    void SetServerLOD(int32_t value);
    GCAnimComponentUpdater GetParent() const;
    void SetParent(GCAnimComponentUpdater value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmLegacyEvent
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmLegacyEvent(std::string ptr, lua_State* state);
    GCNmLegacyEvent(void *ptr);

    GCNmEvent GetParent() const;
    void SetParent(GCNmEvent value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GMaterialParamVector_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GMaterialParamVector_t(std::string ptr, lua_State* state);
    GMaterialParamVector_t(void *ptr);

    Vector4D GetValue() const;
    void SetValue(Vector4D value);
    GMaterialParam_t GetParent() const;
    void SetParent(GMaterialParam_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMotionGraphGroup
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMotionGraphGroup(std::string ptr, lua_State* state);
    GCMotionGraphGroup(void *ptr);

    GCMotionSearchDB GetSearchDB() const;
    void SetSearchDB(GCMotionSearchDB value);
    std::vector<GCMotionGraphConfig> GetMotionGraphConfigs() const;
    void SetMotionGraphConfigs(std::vector<GCMotionGraphConfig> value);
    std::vector<int32> GetSampleToConfig() const;
    void SetSampleToConfig(std::vector<int32> value);
    GAnimScriptHandle GetIsActiveScript() const;
    void SetIsActiveScript(GAnimScriptHandle value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GHitReactFixedSettings_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GHitReactFixedSettings_t(std::string ptr, lua_State* state);
    GHitReactFixedSettings_t(void *ptr);

    int32_t GetWeightListIndex() const;
    void SetWeightListIndex(int32_t value);
    int32_t GetEffectedBoneCount() const;
    void SetEffectedBoneCount(int32_t value);
    float GetMaxImpactForce() const;
    void SetMaxImpactForce(float value);
    float GetMinImpactForce() const;
    void SetMinImpactForce(float value);
    float GetWhipImpactScale() const;
    void SetWhipImpactScale(float value);
    float GetCounterRotationScale() const;
    void SetCounterRotationScale(float value);
    float GetDistanceFadeScale() const;
    void SetDistanceFadeScale(float value);
    float GetPropagationScale() const;
    void SetPropagationScale(float value);
    float GetWhipDelay() const;
    void SetWhipDelay(float value);
    float GetSpringStrength() const;
    void SetSpringStrength(float value);
    float GetWhipSpringStrength() const;
    void SetWhipSpringStrength(float value);
    float GetMaxAngleRadians() const;
    void SetMaxAngleRadians(float value);
    int32_t GetHipBoneIndex() const;
    void SetHipBoneIndex(int32_t value);
    float GetHipBoneTranslationScale() const;
    void SetHipBoneTranslationScale(float value);
    float GetHipDipSpringStrength() const;
    void SetHipDipSpringStrength(float value);
    float GetHipDipImpactScale() const;
    void SetHipDipImpactScale(float value);
    float GetHipDipDelay() const;
    void SetHipDipDelay(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCRootUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCRootUpdateNode(std::string ptr, lua_State* state);
    GCRootUpdateNode(void *ptr);

    GCUnaryUpdateNode GetParent() const;
    void SetParent(GCUnaryUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimMovement
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimMovement(std::string ptr, lua_State* state);
    GCAnimMovement(void *ptr);

    int32_t GetEndframe() const;
    void SetEndframe(int32_t value);
    int32_t GetMotionflags() const;
    void SetMotionflags(int32_t value);
    float Get0() const;
    void Set0(float value);
    float Get1() const;
    void Set1(float value);
    float GetAngle() const;
    void SetAngle(float value);
    Vector GetVector() const;
    void SetVector(Vector value);
    Vector GetPosition() const;
    void SetPosition(Vector value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCConstraintSlave
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCConstraintSlave(std::string ptr, lua_State* state);
    GCConstraintSlave(void *ptr);

    Vector GetBasePosition() const;
    void SetBasePosition(Vector value);
    uint32_t GetBoneHash() const;
    void SetBoneHash(uint32_t value);
    float GetWeight() const;
    void SetWeight(float value);
    std::string GetName() const;
    void SetName(std::string value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSeqBoneMaskList
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSeqBoneMaskList(std::string ptr, lua_State* state);
    GCSeqBoneMaskList(void *ptr);

    std::vector<int16> GetLocalBoneArray() const;
    void SetLocalBoneArray(std::vector<int16> value);
    std::vector<float32> GetBoneWeightArray() const;
    void SetBoneWeightArray(std::vector<float32> value);
    float GetDefaultMorphCtrlWeight() const;
    void SetDefaultMorphCtrlWeight(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GPermModelDataAnimatedMaterialAttribute_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GPermModelDataAnimatedMaterialAttribute_t(std::string ptr, lua_State* state);
    GPermModelDataAnimatedMaterialAttribute_t(void *ptr);

    std::string GetAttributeName() const;
    void SetAttributeName(std::string value);
    int32_t GetNumChannels() const;
    void SetNumChannels(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GScriptInfo_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GScriptInfo_t(std::string ptr, lua_State* state);
    GScriptInfo_t(void *ptr);

    std::string GetCode() const;
    void SetCode(std::string value);
    std::vector<GCAnimParamHandle> GetParamsModified() const;
    void SetParamsModified(std::vector<GCAnimParamHandle> value);
    std::vector<int32> GetProxyReadParams() const;
    void SetProxyReadParams(std::vector<int32> value);
    std::vector<int32> GetProxyWriteParams() const;
    void SetProxyWriteParams(std::vector<int32> value);
    uint64_t GetScriptType() const;
    void SetScriptType(uint64_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVPhysXRange_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVPhysXRange_t(std::string ptr, lua_State* state);
    GVPhysXRange_t(void *ptr);

    float GetMin() const;
    void SetMin(float value);
    float GetMax() const;
    void SetMax(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCJiggleBoneUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCJiggleBoneUpdateNode(std::string ptr, lua_State* state);
    GCJiggleBoneUpdateNode(void *ptr);

    GJiggleBoneSettingsList_t GetOpFixedData() const;
    void SetOpFixedData(GJiggleBoneSettingsList_t value);
    GCUnaryUpdateNode GetParent() const;
    void SetParent(GCUnaryUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCollisionGroupContext_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCollisionGroupContext_t(std::string ptr, lua_State* state);
    GCollisionGroupContext_t(void *ptr);

    int32_t GetCollisionGroupNumber() const;
    void SetCollisionGroupNumber(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAudioPhonemeTag
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAudioPhonemeTag(std::string ptr, lua_State* state);
    GCAudioPhonemeTag(void *ptr);

    float GetStartTime() const;
    void SetStartTime(float value);
    float GetEndTime() const;
    void SetEndTime(float value);
    int32_t GetPhonemeCode() const;
    void SetPhonemeCode(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimData
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimData(std::string ptr, lua_State* state);
    GCAnimData(void *ptr);

    std::vector<GCAnimDesc> GetAnimArray() const;
    void SetAnimArray(std::vector<GCAnimDesc> value);
    std::vector<GCAnimDecoder> GetDecoderArray() const;
    void SetDecoderArray(std::vector<GCAnimDecoder> value);
    int32_t GetMaxUniqueFrameIndex() const;
    void SetMaxUniqueFrameIndex(int32_t value);
    std::vector<GCAnimFrameSegment> GetSegmentArray() const;
    void SetSegmentArray(std::vector<GCAnimFrameSegment> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GSosEditItemInfo_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GSosEditItemInfo_t(std::string ptr, lua_State* state);
    GSosEditItemInfo_t(void *ptr);

    uint64_t GetItemType() const;
    void SetItemType(uint64_t value);
    std::string GetItemName() const;
    void SetItemName(std::string value);
    std::string GetItemTypeName() const;
    void SetItemTypeName(std::string value);
    std::string GetItemKVString() const;
    void SetItemKVString(std::string value);
    Vector2D GetItemPos() const;
    void SetItemPos(Vector2D value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeFitInfluence_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeFitInfluence_t(std::string ptr, lua_State* state);
    GFeFitInfluence_t(void *ptr);

    uint32_t GetVertexNode() const;
    void SetVertexNode(uint32_t value);
    float GetWeight() const;
    void SetWeight(float value);
    uint32_t GetMatrixNode() const;
    void SetMatrixNode(uint32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCInputStreamUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCInputStreamUpdateNode(std::string ptr, lua_State* state);
    GCInputStreamUpdateNode(void *ptr);

    GCLeafUpdateNode GetParent() const;
    void SetParent(GCLeafUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEventClientPollInput_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEventClientPollInput_t(std::string ptr, lua_State* state);
    GEventClientPollInput_t(void *ptr);

    GEngineLoopState_t GetLoopState() const;
    void SetLoopState(GEngineLoopState_t value);
    float GetRealTime() const;
    void SetRealTime(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeSimdQuad_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeSimdQuad_t(std::string ptr, lua_State* state);
    GFeSimdQuad_t(void *ptr);

    float Get4Slack() const;
    void Set4Slack(float value);
    std::vector<float> Get4Weights() const;
    void Set4Weights(std::vector<float> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEmitTagActionUpdater
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEmitTagActionUpdater(std::string ptr, lua_State* state);
    GCEmitTagActionUpdater(void *ptr);

    int32_t GetTagIndex() const;
    void SetTagIndex(int32_t value);
    bool GetIsZeroDuration() const;
    void SetIsZeroDuration(bool value);
    GCAnimActionUpdater GetParent() const;
    void SetParent(GCAnimActionUpdater value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAddUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAddUpdateNode(std::string ptr, lua_State* state);
    GCAddUpdateNode(void *ptr);

    uint64_t GetFootMotionTiming() const;
    void SetFootMotionTiming(uint64_t value);
    bool GetApplyToFootMotion() const;
    void SetApplyToFootMotion(bool value);
    bool GetApplyChannelsSeparately() const;
    void SetApplyChannelsSeparately(bool value);
    bool GetUseModelSpace() const;
    void SetUseModelSpace(bool value);
    bool GetApplyScale() const;
    void SetApplyScale(bool value);
    GCBinaryUpdateNode GetParent() const;
    void SetParent(GCBinaryUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimTagManagerUpdater
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimTagManagerUpdater(std::string ptr, lua_State* state);
    GCAnimTagManagerUpdater(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GSampleCode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GSampleCode(std::string ptr, lua_State* state);
    GSampleCode(void *ptr);

    std::vector<uint32_t> GetSubCode() const;
    void SetSubCode(std::vector<uint32_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCExpressionActionUpdater
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCExpressionActionUpdater(std::string ptr, lua_State* state);
    GCExpressionActionUpdater(void *ptr);

    GCAnimParamHandle GetParam() const;
    void SetParam(GCAnimParamHandle value);
    uint64_t GetParamType() const;
    void SetParamType(uint64_t value);
    GAnimScriptHandle GetScript() const;
    void SetScript(GAnimScriptHandle value);
    GCAnimActionUpdater GetParent() const;
    void SetParent(GCAnimActionUpdater value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEventClientPostAdvanceTick_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEventClientPostAdvanceTick_t(std::string ptr, lua_State* state);
    GEventClientPostAdvanceTick_t(void *ptr);

    GEventPostAdvanceTick_t GetParent() const;
    void SetParent(GEventPostAdvanceTick_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GBoneDemoCaptureSettings_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GBoneDemoCaptureSettings_t(std::string ptr, lua_State* state);
    GBoneDemoCaptureSettings_t(void *ptr);

    std::string GetBoneName() const;
    void SetBoneName(std::string value);
    float GetErrorSplineRotationMax() const;
    void SetErrorSplineRotationMax(float value);
    float GetErrorSplineTranslationMax() const;
    void SetErrorSplineTranslationMax(float value);
    float GetErrorSplineScaleMax() const;
    void SetErrorSplineScaleMax(float value);
    float GetErrorQuantizationRotationMax() const;
    void SetErrorQuantizationRotationMax(float value);
    float GetErrorQuantizationTranslationMax() const;
    void SetErrorQuantizationTranslationMax(float value);
    float GetErrorQuantizationScaleMax() const;
    void SetErrorQuantizationScaleMax(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVPhysXBodyPart_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVPhysXBodyPart_t(std::string ptr, lua_State* state);
    GVPhysXBodyPart_t(void *ptr);

    uint32_t GetFlags() const;
    void SetFlags(uint32_t value);
    float GetMass() const;
    void SetMass(float value);
    GVPhysics2ShapeDef_t GetRnShape() const;
    void SetRnShape(GVPhysics2ShapeDef_t value);
    uint16_t GetCollisionAttributeIndex() const;
    void SetCollisionAttributeIndex(uint16_t value);
    uint16_t GetReserved() const;
    void SetReserved(uint16_t value);
    float GetInertiaScale() const;
    void SetInertiaScale(float value);
    float GetLinearDamping() const;
    void SetLinearDamping(float value);
    float GetAngularDamping() const;
    void SetAngularDamping(float value);
    bool GetOverrideMassCenter() const;
    void SetOverrideMassCenter(bool value);
    Vector GetMassCenterOverride() const;
    void SetMassCenterOverride(Vector value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCDecalInfo
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCDecalInfo(std::string ptr, lua_State* state);
    GCDecalInfo(void *ptr);

    float GetAnimationScale() const;
    void SetAnimationScale(float value);
    float GetAnimationLifeSpan() const;
    void SetAnimationLifeSpan(float value);
    float GetPlaceTime() const;
    void SetPlaceTime(float value);
    float GetFadeStartTime() const;
    void SetFadeStartTime(float value);
    float GetFadeDuration() const;
    void SetFadeDuration(float value);
    int32_t GetVBSlot() const;
    void SetVBSlot(int32_t value);
    int32_t GetBoneIndex() const;
    void SetBoneIndex(int32_t value);
    Vector GetPosition() const;
    void SetPosition(Vector value);
    float GetBoundingRadiusSqr() const;
    void SetBoundingRadiusSqr(float value);
    GCDecalInfo GetNext() const;
    void SetNext(GCDecalInfo value);
    GCDecalInfo GetPrev() const;
    void SetPrev(GCDecalInfo value);
    int32_t GetDecalMaterialIndex() const;
    void SetDecalMaterialIndex(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GParticleControlPointConfiguration_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GParticleControlPointConfiguration_t(std::string ptr, lua_State* state);
    GParticleControlPointConfiguration_t(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    std::vector<GParticleControlPointDriver_t> GetDrivers() const;
    void SetDrivers(std::vector<GParticleControlPointDriver_t> value);
    GParticlePreviewState_t GetPreviewState() const;
    void SetPreviewState(GParticlePreviewState_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVMixUtilityDesc_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVMixUtilityDesc_t(std::string ptr, lua_State* state);
    GVMixUtilityDesc_t(void *ptr);

    uint64_t GetOp() const;
    void SetOp(uint64_t value);
    float GetInputPan() const;
    void SetInputPan(float value);
    float GetOutputBalance() const;
    void SetOutputBalance(float value);
    float GetFldbOutputGain() const;
    void SetFldbOutputGain(float value);
    bool GetBassMono() const;
    void SetBassMono(bool value);
    float GetBassFreq() const;
    void SetBassFreq(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMotionGraphConfig
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMotionGraphConfig(std::string ptr, lua_State* state);
    GCMotionGraphConfig(void *ptr);

    std::vector<float> GetParamValues() const;
    void SetParamValues(std::vector<float> value);
    float GetDuration() const;
    void SetDuration(float value);
    GMotionIndex GetMotionIndex() const;
    void SetMotionIndex(GMotionIndex value);
    int32_t GetSampleStart() const;
    void SetSampleStart(int32_t value);
    int32_t GetSampleCount() const;
    void SetSampleCount(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMovementComponentUpdater
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMovementComponentUpdater(std::string ptr, lua_State* state);
    GCMovementComponentUpdater(void *ptr);

    GCAnimInputDamping GetFacingDamping() const;
    void SetFacingDamping(GCAnimInputDamping value);
    int32_t GetDefaultMotorIndex() const;
    void SetDefaultMotorIndex(int32_t value);
    float GetDefaultRunSpeed() const;
    void SetDefaultRunSpeed(float value);
    bool GetMoveVarsDisabled() const;
    void SetMoveVarsDisabled(bool value);
    bool GetNetworkPath() const;
    void SetNetworkPath(bool value);
    bool GetNetworkFacing() const;
    void SetNetworkFacing(bool value);
    std::vector<GCAnimParamHandle> GetParamHandles() const;
    void SetParamHandles(std::vector<GCAnimParamHandle> value);
    GCAnimComponentUpdater GetParent() const;
    void SetParent(GCAnimComponentUpdater value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GPointDefinition_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GPointDefinition_t(std::string ptr, lua_State* state);
    GPointDefinition_t(void *ptr);

    int32_t GetControlPoint() const;
    void SetControlPoint(int32_t value);
    bool GetLocalCoords() const;
    void SetLocalCoords(bool value);
    Vector GetOffset() const;
    void SetOffset(Vector value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVMixEffectChainDesc_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVMixEffectChainDesc_t(std::string ptr, lua_State* state);
    GVMixEffectChainDesc_t(void *ptr);

    float GetCrossfadeTime() const;
    void SetCrossfadeTime(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCHitReactUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCHitReactUpdateNode(std::string ptr, lua_State* state);
    GCHitReactUpdateNode(void *ptr);

    GHitReactFixedSettings_t GetOpFixedSettings() const;
    void SetOpFixedSettings(GHitReactFixedSettings_t value);
    GCAnimParamHandle GetTriggerParam() const;
    void SetTriggerParam(GCAnimParamHandle value);
    GCAnimParamHandle GetHitBoneParam() const;
    void SetHitBoneParam(GCAnimParamHandle value);
    GCAnimParamHandle GetHitOffsetParam() const;
    void SetHitOffsetParam(GCAnimParamHandle value);
    GCAnimParamHandle GetHitDirectionParam() const;
    void SetHitDirectionParam(GCAnimParamHandle value);
    GCAnimParamHandle GetHitStrengthParam() const;
    void SetHitStrengthParam(GCAnimParamHandle value);
    float GetMinDelayBetweenHits() const;
    void SetMinDelayBetweenHits(float value);
    bool GetResetChild() const;
    void SetResetChild(bool value);
    GCUnaryUpdateNode GetParent() const;
    void SetParent(GCUnaryUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEntInput_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEntInput_t(std::string ptr, lua_State* state);
    GEntInput_t(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmVirtualParameterFloatNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmVirtualParameterFloatNode(std::string ptr, lua_State* state);
    GCNmVirtualParameterFloatNode(void *ptr);

    int16_t GetChildNodeIdx() const;
    void SetChildNodeIdx(int16_t value);
    GCNmFloatValueNode GetParent() const;
    void SetParent(GCNmFloatValueNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCParticleSystemDefinition
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCParticleSystemDefinition(std::string ptr, lua_State* state);
    GCParticleSystemDefinition(void *ptr);

    int32_t GetBehaviorVersion() const;
    void SetBehaviorVersion(int32_t value);
    std::vector<GCParticleFunctionPreEmission*> GetPreEmissionOperators() const;
    void SetPreEmissionOperators(std::vector<GCParticleFunctionPreEmission*> value);
    std::vector<GCParticleFunctionEmitter*> GetEmitters() const;
    void SetEmitters(std::vector<GCParticleFunctionEmitter*> value);
    std::vector<GCParticleFunctionInitializer*> GetInitializers() const;
    void SetInitializers(std::vector<GCParticleFunctionInitializer*> value);
    std::vector<GCParticleFunctionOperator*> GetOperators() const;
    void SetOperators(std::vector<GCParticleFunctionOperator*> value);
    std::vector<GCParticleFunctionForce*> GetForceGenerators() const;
    void SetForceGenerators(std::vector<GCParticleFunctionForce*> value);
    std::vector<GCParticleFunctionConstraint*> GetConstraints() const;
    void SetConstraints(std::vector<GCParticleFunctionConstraint*> value);
    std::vector<GCParticleFunctionRenderer*> GetRenderers() const;
    void SetRenderers(std::vector<GCParticleFunctionRenderer*> value);
    std::vector<GParticleChildrenInfo_t> GetChildren() const;
    void SetChildren(std::vector<GParticleChildrenInfo_t> value);
    int32_t GetFirstMultipleOverride_BackwardCompat() const;
    void SetFirstMultipleOverride_BackwardCompat(int32_t value);
    int32_t GetInitialParticles() const;
    void SetInitialParticles(int32_t value);
    int32_t GetMaxParticles() const;
    void SetMaxParticles(int32_t value);
    int32_t GetGroupID() const;
    void SetGroupID(int32_t value);
    Vector GetBoundingBoxMin() const;
    void SetBoundingBoxMin(Vector value);
    Vector GetBoundingBoxMax() const;
    void SetBoundingBoxMax(Vector value);
    float GetDepthSortBias() const;
    void SetDepthSortBias(float value);
    int32_t GetSortOverridePositionCP() const;
    void SetSortOverridePositionCP(int32_t value);
    bool GetInfiniteBounds() const;
    void SetInfiniteBounds(bool value);
    bool GetEnableNamedValues() const;
    void SetEnableNamedValues(bool value);
    std::string GetNamedValueDomain() const;
    void SetNamedValueDomain(std::string value);
    std::vector<GParticleNamedValueSource_t*> GetNamedValueLocals() const;
    void SetNamedValueLocals(std::vector<GParticleNamedValueSource_t*> value);
    Color GetConstantColor() const;
    void SetConstantColor(Color value);
    Vector GetConstantNormal() const;
    void SetConstantNormal(Vector value);
    float GetConstantRadius() const;
    void SetConstantRadius(float value);
    float GetConstantRotation() const;
    void SetConstantRotation(float value);
    float GetConstantRotationSpeed() const;
    void SetConstantRotationSpeed(float value);
    float GetConstantLifespan() const;
    void SetConstantLifespan(float value);
    int32_t GetConstantSequenceNumber() const;
    void SetConstantSequenceNumber(int32_t value);
    int32_t GetConstantSequenceNumber1() const;
    void SetConstantSequenceNumber1(int32_t value);
    int32_t GetSnapshotControlPoint() const;
    void SetSnapshotControlPoint(int32_t value);
    float GetCullRadius() const;
    void SetCullRadius(float value);
    float GetCullFillCost() const;
    void SetCullFillCost(float value);
    int32_t GetCullControlPoint() const;
    void SetCullControlPoint(int32_t value);
    int32_t GetFallbackMaxCount() const;
    void SetFallbackMaxCount(int32_t value);
    float GetPreSimulationTime() const;
    void SetPreSimulationTime(float value);
    float GetStopSimulationAfterTime() const;
    void SetStopSimulationAfterTime(float value);
    float GetMaximumTimeStep() const;
    void SetMaximumTimeStep(float value);
    float GetMaximumSimTime() const;
    void SetMaximumSimTime(float value);
    float GetMinimumSimTime() const;
    void SetMinimumSimTime(float value);
    float GetMinimumTimeStep() const;
    void SetMinimumTimeStep(float value);
    int32_t GetMinimumFrames() const;
    void SetMinimumFrames(int32_t value);
    int32_t GetMinCPULevel() const;
    void SetMinCPULevel(int32_t value);
    int32_t GetMinGPULevel() const;
    void SetMinGPULevel(int32_t value);
    float GetNoDrawTimeToGoToSleep() const;
    void SetNoDrawTimeToGoToSleep(float value);
    float GetMaxDrawDistance() const;
    void SetMaxDrawDistance(float value);
    float GetStartFadeDistance() const;
    void SetStartFadeDistance(float value);
    float GetMaxCreationDistance() const;
    void SetMaxCreationDistance(float value);
    int32_t GetAggregationMinAvailableParticles() const;
    void SetAggregationMinAvailableParticles(int32_t value);
    float GetAggregateRadius() const;
    void SetAggregateRadius(float value);
    bool GetShouldBatch() const;
    void SetShouldBatch(bool value);
    bool GetShouldHitboxesFallbackToRenderBounds() const;
    void SetShouldHitboxesFallbackToRenderBounds(bool value);
    bool GetShouldHitboxesFallbackToSnapshot() const;
    void SetShouldHitboxesFallbackToSnapshot(bool value);
    bool GetShouldHitboxesFallbackToCollisionHulls() const;
    void SetShouldHitboxesFallbackToCollisionHulls(bool value);
    uint64_t GetViewModelEffect() const;
    void SetViewModelEffect(uint64_t value);
    bool GetScreenSpaceEffect() const;
    void SetScreenSpaceEffect(bool value);
    std::string GetTargetLayerID() const;
    void SetTargetLayerID(std::string value);
    int32_t GetSkipRenderControlPoint() const;
    void SetSkipRenderControlPoint(int32_t value);
    int32_t GetAllowRenderControlPoint() const;
    void SetAllowRenderControlPoint(int32_t value);
    bool GetShouldSort() const;
    void SetShouldSort(bool value);
    std::vector<GParticleControlPointConfiguration_t> GetControlPointConfigurations() const;
    void SetControlPointConfigurations(std::vector<GParticleControlPointConfiguration_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCVoiceContainerSelector
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCVoiceContainerSelector(std::string ptr, lua_State* state);
    GCVoiceContainerSelector(void *ptr);

    uint64_t GetMode() const;
    void SetMode(uint64_t value);
    bool GetRetrigger() const;
    void SetRetrigger(bool value);
    GCVoiceContainerBase GetParent() const;
    void SetParent(GCVoiceContainerBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCRegionSVM
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCRegionSVM(std::string ptr, lua_State* state);
    GCRegionSVM(void *ptr);

    std::vector<GRnPlane_t> GetPlanes() const;
    void SetPlanes(std::vector<GRnPlane_t> value);
    std::vector<uint32> GetNodes() const;
    void SetNodes(std::vector<uint32> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSetParameterActionUpdater
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSetParameterActionUpdater(std::string ptr, lua_State* state);
    GCSetParameterActionUpdater(void *ptr);

    GCAnimParamHandle GetParam() const;
    void SetParam(GCAnimParamHandle value);
    GCAnimActionUpdater GetParent() const;
    void SetParent(GCAnimActionUpdater value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimUpdateSharedData
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimUpdateSharedData(std::string ptr, lua_State* state);
    GCAnimUpdateSharedData(void *ptr);

    GCAnimGraphSettingsManager GetSettings() const;
    void SetSettings(GCAnimGraphSettingsManager value);
    GCAnimNodePath GetRootNodePath() const;
    void SetRootNodePath(GCAnimNodePath value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEventClientSimulate_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEventClientSimulate_t(std::string ptr, lua_State* state);
    GEventClientSimulate_t(void *ptr);

    GEventSimulate_t GetParent() const;
    void SetParent(GEventSimulate_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCVoiceContainerAmpedDecayingSineWave
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCVoiceContainerAmpedDecayingSineWave(std::string ptr, lua_State* state);
    GCVoiceContainerAmpedDecayingSineWave(void *ptr);

    float GetGainAmount() const;
    void SetGainAmount(float value);
    GCVoiceContainerDecayingSineWave GetParent() const;
    void SetParent(GCVoiceContainerDecayingSineWave value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GClutterTile_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GClutterTile_t(std::string ptr, lua_State* state);
    GClutterTile_t(void *ptr);

    uint32_t GetFirstInstance() const;
    void SetFirstInstance(uint32_t value);
    uint32_t GetLastInstance() const;
    void SetLastInstance(uint32_t value);
    GAABB_t GetBoundsWs() const;
    void SetBoundsWs(GAABB_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GPointDefinitionWithTimeValues_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GPointDefinitionWithTimeValues_t(std::string ptr, lua_State* state);
    GPointDefinitionWithTimeValues_t(void *ptr);

    float GetTimeDuration() const;
    void SetTimeDuration(float value);
    GPointDefinition_t GetParent() const;
    void SetParent(GPointDefinition_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeVertexMapBuild_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeVertexMapBuild_t(std::string ptr, lua_State* state);
    GFeVertexMapBuild_t(void *ptr);

    std::string GetVertexMapName() const;
    void SetVertexMapName(std::string value);
    uint32_t GetNameHash() const;
    void SetNameHash(uint32_t value);
    Color GetColor() const;
    void SetColor(Color value);
    float GetVolumetricSolveStrength() const;
    void SetVolumetricSolveStrength(float value);
    int32_t GetScaleSourceNode() const;
    void SetScaleSourceNode(int32_t value);
    std::vector<float32> GetWeights() const;
    void SetWeights(std::vector<float32> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimDesc
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimDesc(std::string ptr, lua_State* state);
    GCAnimDesc(void *ptr);

    GCAnimDesc_Flag GetFlags() const;
    void SetFlags(GCAnimDesc_Flag value);
    float GetFps() const;
    void SetFps(float value);
    GCAnimEncodedFrames GetData() const;
    void SetData(GCAnimEncodedFrames value);
    std::vector<GCAnimMovement> GetMovementArray() const;
    void SetMovementArray(std::vector<GCAnimMovement> value);
    std::vector<GCAnimEventDefinition> GetEventArray() const;
    void SetEventArray(std::vector<GCAnimEventDefinition> value);
    std::vector<GCAnimActivity> GetActivityArray() const;
    void SetActivityArray(std::vector<GCAnimActivity> value);
    std::vector<GCAnimLocalHierarchy> GetHierarchyArray() const;
    void SetHierarchyArray(std::vector<GCAnimLocalHierarchy> value);
    float GetFramestalltime() const;
    void SetFramestalltime(float value);
    Vector GetRootMin() const;
    void SetRootMin(Vector value);
    Vector GetRootMax() const;
    void SetRootMax(Vector value);
    std::vector<Vector> GetBoneWorldMin() const;
    void SetBoneWorldMin(std::vector<Vector> value);
    std::vector<Vector> GetBoneWorldMax() const;
    void SetBoneWorldMax(std::vector<Vector> value);
    GCAnimSequenceParams GetSequenceParams() const;
    void SetSequenceParams(GCAnimSequenceParams value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTwistConstraint
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTwistConstraint(std::string ptr, lua_State* state);
    GCTwistConstraint(void *ptr);

    bool GetInverse() const;
    void SetInverse(bool value);
    GCBaseConstraint GetParent() const;
    void SetParent(GCBaseConstraint value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNewParticleEffect
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNewParticleEffect(std::string ptr, lua_State* state);
    GCNewParticleEffect(void *ptr);

    GCNewParticleEffect GetNext() const;
    void SetNext(GCNewParticleEffect value);
    GCNewParticleEffect GetPrev() const;
    void SetPrev(GCNewParticleEffect value);
    GIParticleCollection GetParticles() const;
    void SetParticles(GIParticleCollection value);
    std::string GetDebugName() const;
    void SetDebugName(std::string value);
    Vector GetSortOrigin() const;
    void SetSortOrigin(Vector value);
    float GetScale() const;
    void SetScale(float value);
    GPARTICLE_EHANDLE__ GetOwner() const;
    void SetOwner(GPARTICLE_EHANDLE__ value);
    GCParticleProperty GetOwningParticleProperty() const;
    void SetOwningParticleProperty(GCParticleProperty value);
    float GetFreezeTransitionStart() const;
    void SetFreezeTransitionStart(float value);
    float GetFreezeTransitionDuration() const;
    void SetFreezeTransitionDuration(float value);
    float GetFreezeTransitionOverride() const;
    void SetFreezeTransitionOverride(float value);
    bool GetFreezeTransitionActive() const;
    void SetFreezeTransitionActive(bool value);
    bool GetFreezeTargetState() const;
    void SetFreezeTargetState(bool value);
    bool GetCanFreeze() const;
    void SetCanFreeze(bool value);
    Vector GetLastMin() const;
    void SetLastMin(Vector value);
    Vector GetLastMax() const;
    void SetLastMax(Vector value);
    int32_t GetSplitScreenUser() const;
    void SetSplitScreenUser(int32_t value);
    Vector GetAggregationCenter() const;
    void SetAggregationCenter(Vector value);
    int32_t GetRefCount() const;
    void SetRefCount(int32_t value);
    GIParticleEffect GetParent() const;
    void SetParent(GIParticleEffect value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFeIndexedJiggleBone
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFeIndexedJiggleBone(std::string ptr, lua_State* state);
    GCFeIndexedJiggleBone(void *ptr);

    uint32_t GetNode() const;
    void SetNode(uint32_t value);
    uint32_t GetJiggleParent() const;
    void SetJiggleParent(uint32_t value);
    GCFeJiggleBone GetJiggleBone() const;
    void SetJiggleBone(GCFeJiggleBone value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFloatAnimParameter
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFloatAnimParameter(std::string ptr, lua_State* state);
    GCFloatAnimParameter(void *ptr);

    float GetDefaultValue() const;
    void SetDefaultValue(float value);
    float GetMinValue() const;
    void SetMinValue(float value);
    float GetMaxValue() const;
    void SetMaxValue(float value);
    bool GetInterpolate() const;
    void SetInterpolate(bool value);
    GCConcreteAnimParameter GetParent() const;
    void SetParent(GCConcreteAnimParameter value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GRnBlendVertex_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GRnBlendVertex_t(std::string ptr, lua_State* state);
    GRnBlendVertex_t(void *ptr);

    uint16_t GetWeight0() const;
    void SetWeight0(uint16_t value);
    uint16_t GetIndex0() const;
    void SetIndex0(uint16_t value);
    uint16_t GetWeight1() const;
    void SetWeight1(uint16_t value);
    uint16_t GetIndex1() const;
    void SetIndex1(uint16_t value);
    uint16_t GetWeight2() const;
    void SetWeight2(uint16_t value);
    uint16_t GetIndex2() const;
    void SetIndex2(uint16_t value);
    uint16_t GetFlags() const;
    void SetFlags(uint16_t value);
    uint16_t GetTargetIndex() const;
    void SetTargetIndex(uint16_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCVirtualAnimParameter
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCVirtualAnimParameter(std::string ptr, lua_State* state);
    GCVirtualAnimParameter(void *ptr);

    std::string GetExpressionString() const;
    void SetExpressionString(std::string value);
    uint64_t GetParamType() const;
    void SetParamType(uint64_t value);
    GCAnimParameterBase GetParent() const;
    void SetParent(GCAnimParameterBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCHitBoxSetList
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCHitBoxSetList(std::string ptr, lua_State* state);
    GCHitBoxSetList(void *ptr);

    std::vector<GCHitBoxSet> GetHitBoxSets() const;
    void SetHitBoxSets(std::vector<GCHitBoxSet> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GMaterialParamString_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GMaterialParamString_t(std::string ptr, lua_State* state);
    GMaterialParamString_t(void *ptr);

    std::string GetValue() const;
    void SetValue(std::string value);
    GMaterialParam_t GetParent() const;
    void SetParent(GMaterialParam_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVsInputSignature_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVsInputSignature_t(std::string ptr, lua_State* state);
    GVsInputSignature_t(void *ptr);

    std::vector<GVsInputSignatureElement_t> GetElems() const;
    void SetElems(std::vector<GVsInputSignatureElement_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GInfoOverlayData_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GInfoOverlayData_t(std::string ptr, lua_State* state);
    GInfoOverlayData_t(void *ptr);

    float GetWidth() const;
    void SetWidth(float value);
    float GetHeight() const;
    void SetHeight(float value);
    float GetDepth() const;
    void SetDepth(float value);
    Vector2D GetUVStart() const;
    void SetUVStart(Vector2D value);
    Vector2D GetUVEnd() const;
    void SetUVEnd(Vector2D value);
    int32_t GetRenderOrder() const;
    void SetRenderOrder(int32_t value);
    Vector4D GetTintColor() const;
    void SetTintColor(Vector4D value);
    int32_t GetSequenceOverride() const;
    void SetSequenceOverride(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCastSphereSATParams_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCastSphereSATParams_t(std::string ptr, lua_State* state);
    GCastSphereSATParams_t(void *ptr);

    Vector GetRayStart() const;
    void SetRayStart(Vector value);
    Vector GetRayDelta() const;
    void SetRayDelta(Vector value);
    float GetRadius() const;
    void SetRadius(float value);
    float GetMaxFraction() const;
    void SetMaxFraction(float value);
    float GetScale() const;
    void SetScale(float value);
    GRnHull_t GetHull() const;
    void SetHull(GRnHull_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBindPoseUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBindPoseUpdateNode(std::string ptr, lua_State* state);
    GCBindPoseUpdateNode(void *ptr);

    GCLeafUpdateNode GetParent() const;
    void SetParent(GCLeafUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVMixFreeverbDesc_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVMixFreeverbDesc_t(std::string ptr, lua_State* state);
    GVMixFreeverbDesc_t(void *ptr);

    float GetRoomSize() const;
    void SetRoomSize(float value);
    float GetDamp() const;
    void SetDamp(float value);
    float GetWidth() const;
    void SetWidth(float value);
    float GetLateReflections() const;
    void SetLateReflections(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCCurrentVelocityMetricEvaluator
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCCurrentVelocityMetricEvaluator(std::string ptr, lua_State* state);
    GCCurrentVelocityMetricEvaluator(void *ptr);

    GCMotionMetricEvaluator GetParent() const;
    void SetParent(GCMotionMetricEvaluator value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCVoxelVisibility
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCVoxelVisibility(std::string ptr, lua_State* state);
    GCVoxelVisibility(void *ptr);

    uint32_t GetBaseClusterCount() const;
    void SetBaseClusterCount(uint32_t value);
    uint32_t GetPVSBytesPerCluster() const;
    void SetPVSBytesPerCluster(uint32_t value);
    Vector GetMinBounds() const;
    void SetMinBounds(Vector value);
    Vector GetMaxBounds() const;
    void SetMaxBounds(Vector value);
    float GetGridSize() const;
    void SetGridSize(float value);
    uint32_t GetSkyVisibilityCluster() const;
    void SetSkyVisibilityCluster(uint32_t value);
    uint32_t GetSunVisibilityCluster() const;
    void SetSunVisibilityCluster(uint32_t value);
    GVoxelVisBlockOffset_t GetNodeBlock() const;
    void SetNodeBlock(GVoxelVisBlockOffset_t value);
    GVoxelVisBlockOffset_t GetRegionBlock() const;
    void SetRegionBlock(GVoxelVisBlockOffset_t value);
    GVoxelVisBlockOffset_t GetEnclosedClusterListBlock() const;
    void SetEnclosedClusterListBlock(GVoxelVisBlockOffset_t value);
    GVoxelVisBlockOffset_t GetEnclosedClustersBlock() const;
    void SetEnclosedClustersBlock(GVoxelVisBlockOffset_t value);
    GVoxelVisBlockOffset_t GetMasksBlock() const;
    void SetMasksBlock(GVoxelVisBlockOffset_t value);
    GVoxelVisBlockOffset_t GetVisBlocks() const;
    void SetVisBlocks(GVoxelVisBlockOffset_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GSelectedEditItemInfo_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GSelectedEditItemInfo_t(std::string ptr, lua_State* state);
    GSelectedEditItemInfo_t(void *ptr);

    std::vector<GSosEditItemInfo_t> GetEditItems() const;
    void SetEditItems(std::vector<GSosEditItemInfo_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GChainToSolveData_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GChainToSolveData_t(std::string ptr, lua_State* state);
    GChainToSolveData_t(void *ptr);

    int32_t GetChainIndex() const;
    void SetChainIndex(int32_t value);
    GIKSolverSettings_t GetSolverSettings() const;
    void SetSolverSettings(GIKSolverSettings_t value);
    GIKTargetSettings_t GetTargetSettings() const;
    void SetTargetSettings(GIKTargetSettings_t value);
    uint64_t GetDebugSetting() const;
    void SetDebugSetting(uint64_t value);
    float GetDebugNormalizedValue() const;
    void SetDebugNormalizedValue(float value);
    Vector GetDebugOffset() const;
    void SetDebugOffset(Vector value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCGlowSprite
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCGlowSprite(std::string ptr, lua_State* state);
    GCGlowSprite(void *ptr);

    Vector GetColor() const;
    void SetColor(Vector value);
    float GetHorzSize() const;
    void SetHorzSize(float value);
    float GetVertSize() const;
    void SetVertSize(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSSDSMsg_PostLayer
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSSDSMsg_PostLayer(std::string ptr, lua_State* state);
    GCSSDSMsg_PostLayer(void *ptr);

    GCSSDSMsg_LayerBase GetParent() const;
    void SetParent(GCSSDSMsg_LayerBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimBone
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimBone(std::string ptr, lua_State* state);
    GCAnimBone(void *ptr);

    int32_t GetParent() const;
    void SetParent(int32_t value);
    Vector GetPos() const;
    void SetPos(Vector value);
    float GetScale() const;
    void SetScale(float value);
    int32_t GetFlags() const;
    void SetFlags(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVPhysXConstraint2_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVPhysXConstraint2_t(std::string ptr, lua_State* state);
    GVPhysXConstraint2_t(void *ptr);

    uint32_t GetFlags() const;
    void SetFlags(uint32_t value);
    uint16_t GetParent() const;
    void SetParent(uint16_t value);
    uint16_t GetChild() const;
    void SetChild(uint16_t value);
    GVPhysXConstraintParams_t GetParams() const;
    void SetParams(GVPhysXConstraintParams_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCEditableMotionGraph
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCEditableMotionGraph(std::string ptr, lua_State* state);
    GCEditableMotionGraph(void *ptr);

    GCMotionGraph GetParent() const;
    void SetParent(GCMotionGraph value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimKeyData
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimKeyData(std::string ptr, lua_State* state);
    GCAnimKeyData(void *ptr);

    std::vector<GCAnimBone> GetBoneArray() const;
    void SetBoneArray(std::vector<GCAnimBone> value);
    std::vector<GCAnimUser> GetUserArray() const;
    void SetUserArray(std::vector<GCAnimUser> value);
    int32_t GetChannelElements() const;
    void SetChannelElements(int32_t value);
    std::vector<GCAnimDataChannelDesc> GetDataChannelArray() const;
    void SetDataChannelArray(std::vector<GCAnimDataChannelDesc> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEventPreDataUpdate_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEventPreDataUpdate_t(std::string ptr, lua_State* state);
    GEventPreDataUpdate_t(void *ptr);

    int32_t GetCount() const;
    void SetCount(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GWorld_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GWorld_t(std::string ptr, lua_State* state);
    GWorld_t(void *ptr);

    GWorldBuilderParams_t GetBuilderParams() const;
    void SetBuilderParams(GWorldBuilderParams_t value);
    std::vector<GNodeData_t> GetWorldNodes() const;
    void SetWorldNodes(std::vector<GNodeData_t> value);
    GBakedLightingInfo_t GetWorldLightingInfo() const;
    void SetWorldLightingInfo(GBakedLightingInfo_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCVectorAnimParameter
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCVectorAnimParameter(std::string ptr, lua_State* state);
    GCVectorAnimParameter(void *ptr);

    Vector GetDefaultValue() const;
    void SetDefaultValue(Vector value);
    bool GetInterpolate() const;
    void SetInterpolate(bool value);
    GCConcreteAnimParameter GetParent() const;
    void SetParent(GCConcreteAnimParameter value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmControlParameterBoolNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmControlParameterBoolNode(std::string ptr, lua_State* state);
    GCNmControlParameterBoolNode(void *ptr);

    GCNmBoolValueNode GetParent() const;
    void SetParent(GCNmBoolValueNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCStateMachineUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCStateMachineUpdateNode(std::string ptr, lua_State* state);
    GCStateMachineUpdateNode(void *ptr);

    GCAnimStateMachineUpdater GetStateMachine() const;
    void SetStateMachine(GCAnimStateMachineUpdater value);
    std::vector<GCStateNodeStateData> GetStateData() const;
    void SetStateData(std::vector<GCStateNodeStateData> value);
    std::vector<GCStateNodeTransitionData> GetTransitionData() const;
    void SetTransitionData(std::vector<GCStateNodeTransitionData> value);
    bool GetBlockWaningTags() const;
    void SetBlockWaningTags(bool value);
    bool GetLockStateWhenWaning() const;
    void SetLockStateWhenWaning(bool value);
    GCAnimUpdateNodeBase GetParent() const;
    void SetParent(GCAnimUpdateNodeBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCHitBoxSet
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCHitBoxSet(std::string ptr, lua_State* state);
    GCHitBoxSet(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    uint32_t GetNameHash() const;
    void SetNameHash(uint32_t value);
    std::vector<GCHitBox> GetHitBoxes() const;
    void SetHitBoxes(std::vector<GCHitBox> value);
    std::string GetSourceFilename() const;
    void SetSourceFilename(std::string value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCExampleSchemaVData_PolymorphicDerivedB
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCExampleSchemaVData_PolymorphicDerivedB(std::string ptr, lua_State* state);
    GCExampleSchemaVData_PolymorphicDerivedB(void *ptr);

    int32_t GetDerivedB() const;
    void SetDerivedB(int32_t value);
    GCExampleSchemaVData_PolymorphicBase GetParent() const;
    void SetParent(GCExampleSchemaVData_PolymorphicBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeSimdTri_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeSimdTri_t(std::string ptr, lua_State* state);
    GFeSimdTri_t(void *ptr);

    float GetW1() const;
    void SetW1(float value);
    float GetW2() const;
    void SetW2(float value);
    float Get1x() const;
    void Set1x(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GPostProcessingResource_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GPostProcessingResource_t(std::string ptr, lua_State* state);
    GPostProcessingResource_t(void *ptr);

    bool GetHasTonemapParams() const;
    void SetHasTonemapParams(bool value);
    GPostProcessingTonemapParameters_t GetToneMapParams() const;
    void SetToneMapParams(GPostProcessingTonemapParameters_t value);
    bool GetHasBloomParams() const;
    void SetHasBloomParams(bool value);
    GPostProcessingBloomParameters_t GetBloomParams() const;
    void SetBloomParams(GPostProcessingBloomParameters_t value);
    bool GetHasVignetteParams() const;
    void SetHasVignetteParams(bool value);
    GPostProcessingVignetteParameters_t GetVignetteParams() const;
    void SetVignetteParams(GPostProcessingVignetteParameters_t value);
    bool GetHasLocalContrastParams() const;
    void SetHasLocalContrastParams(bool value);
    GPostProcessingLocalContrastParameters_t GetLocalConstrastParams() const;
    void SetLocalConstrastParams(GPostProcessingLocalContrastParameters_t value);
    int32_t GetColorCorrectionVolumeDim() const;
    void SetColorCorrectionVolumeDim(int32_t value);
    bool GetHasColorCorrection() const;
    void SetHasColorCorrection(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmStateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmStateNode(std::string ptr, lua_State* state);
    GCNmStateNode(void *ptr);

    int16_t GetChildNodeIdx() const;
    void SetChildNodeIdx(int16_t value);
    int16_t GetLayerWeightNodeIdx() const;
    void SetLayerWeightNodeIdx(int16_t value);
    int16_t GetLayerRootMotionWeightNodeIdx() const;
    void SetLayerRootMotionWeightNodeIdx(int16_t value);
    int16_t GetLayerBoneMaskNodeIdx() const;
    void SetLayerBoneMaskNodeIdx(int16_t value);
    bool GetIsOffState() const;
    void SetIsOffState(bool value);
    GCNmPoseNode GetParent() const;
    void SetParent(GCNmPoseNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GNodeData_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GNodeData_t(std::string ptr, lua_State* state);
    GNodeData_t(void *ptr);

    int32_t GetParent() const;
    void SetParent(int32_t value);
    Vector GetOrigin() const;
    void SetOrigin(Vector value);
    Vector GetMinBounds() const;
    void SetMinBounds(Vector value);
    Vector GetMaxBounds() const;
    void SetMaxBounds(Vector value);
    float GetMinimumDistance() const;
    void SetMinimumDistance(float value);
    std::vector<int32> GetChildNodeIndices() const;
    void SetChildNodeIndices(std::vector<int32> value);
    std::string GetWorldNodePrefix() const;
    void SetWorldNodePrefix(std::string value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTaskStatusAnimTag
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTaskStatusAnimTag(std::string ptr, lua_State* state);
    GCTaskStatusAnimTag(void *ptr);

    GCAnimTagBase GetParent() const;
    void SetParent(GCAnimTagBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMaterialDrawDescriptor
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMaterialDrawDescriptor(std::string ptr, lua_State* state);
    GCMaterialDrawDescriptor(void *ptr);

    float GetUvDensity() const;
    void SetUvDensity(float value);
    Vector GetTintColor() const;
    void SetTintColor(Vector value);
    float GetAlpha() const;
    void SetAlpha(float value);
    uint32_t GetFirstMeshlet() const;
    void SetFirstMeshlet(uint32_t value);
    uint16_t GetNumMeshlets() const;
    void SetNumMeshlets(uint16_t value);
    uint64_t GetPrimitiveType() const;
    void SetPrimitiveType(uint64_t value);
    int32_t GetBaseVertex() const;
    void SetBaseVertex(int32_t value);
    int32_t GetVertexCount() const;
    void SetVertexCount(int32_t value);
    int32_t GetStartIndex() const;
    void SetStartIndex(int32_t value);
    int32_t GetIndexCount() const;
    void SetIndexCount(int32_t value);
    GCRenderBufferBinding GetIndexBuffer() const;
    void SetIndexBuffer(GCRenderBufferBinding value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEventServerProcessNetworking_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEventServerProcessNetworking_t(std::string ptr, lua_State* state);
    GEventServerProcessNetworking_t(void *ptr);

    GEventSimulate_t GetParent() const;
    void SetParent(GEventSimulate_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCInterpolatedValue
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCInterpolatedValue(std::string ptr, lua_State* state);
    GCInterpolatedValue(void *ptr);

    float GetStartTime() const;
    void SetStartTime(float value);
    float GetEndTime() const;
    void SetEndTime(float value);
    float GetStartValue() const;
    void SetStartValue(float value);
    float GetEndValue() const;
    void SetEndValue(float value);
    int32_t GetInterpType() const;
    void SetInterpType(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCMotionGraphUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCMotionGraphUpdateNode(std::string ptr, lua_State* state);
    GCMotionGraphUpdateNode(void *ptr);

    GCLeafUpdateNode GetParent() const;
    void SetParent(GCLeafUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCLookAtUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCLookAtUpdateNode(std::string ptr, lua_State* state);
    GCLookAtUpdateNode(void *ptr);

    GLookAtOpFixedSettings_t GetOpFixedSettings() const;
    void SetOpFixedSettings(GLookAtOpFixedSettings_t value);
    uint64_t GetTarget() const;
    void SetTarget(uint64_t value);
    GCAnimParamHandle GetParamIndex() const;
    void SetParamIndex(GCAnimParamHandle value);
    GCAnimParamHandle GetWeightParamIndex() const;
    void SetWeightParamIndex(GCAnimParamHandle value);
    bool GetResetChild() const;
    void SetResetChild(bool value);
    bool GetLockWhenWaning() const;
    void SetLockWhenWaning(bool value);
    GCUnaryUpdateNode GetParent() const;
    void SetParent(GCUnaryUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFlexController
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFlexController(std::string ptr, lua_State* state);
    GCFlexController(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    std::string GetType() const;
    void SetType(std::string value);
    float GetMin() const;
    void SetMin(float value);
    float GetMax() const;
    void SetMax(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCExampleSchemaVData_PolymorphicDerivedA
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCExampleSchemaVData_PolymorphicDerivedA(std::string ptr, lua_State* state);
    GCExampleSchemaVData_PolymorphicDerivedA(void *ptr);

    int32_t GetDerivedA() const;
    void SetDerivedA(int32_t value);
    GCExampleSchemaVData_PolymorphicBase GetParent() const;
    void SetParent(GCExampleSchemaVData_PolymorphicBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEntityKeyValueData_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEntityKeyValueData_t(std::string ptr, lua_State* state);
    GEntityKeyValueData_t(void *ptr);

    std::vector<GEntityIOConnectionData_t> GetConnections() const;
    void SetConnections(std::vector<GEntityIOConnectionData_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFootStride
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFootStride(std::string ptr, lua_State* state);
    GCFootStride(void *ptr);

    GCFootCycleDefinition GetDefinition() const;
    void SetDefinition(GCFootCycleDefinition value);
    GCFootTrajectories GetTrajectories() const;
    void SetTrajectories(GCFootTrajectories value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAnimationGroup
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAnimationGroup(std::string ptr, lua_State* state);
    GCAnimationGroup(void *ptr);

    uint32_t GetFlags() const;
    void SetFlags(uint32_t value);
    GCAnimKeyData GetDecodeKey() const;
    void SetDecodeKey(GCAnimKeyData value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSubtractUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSubtractUpdateNode(std::string ptr, lua_State* state);
    GCSubtractUpdateNode(void *ptr);

    uint64_t GetFootMotionTiming() const;
    void SetFootMotionTiming(uint64_t value);
    bool GetApplyToFootMotion() const;
    void SetApplyToFootMotion(bool value);
    bool GetApplyChannelsSeparately() const;
    void SetApplyChannelsSeparately(bool value);
    bool GetUseModelSpace() const;
    void SetUseModelSpace(bool value);
    GCBinaryUpdateNode GetParent() const;
    void SetParent(GCBinaryUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeTaperedCapsuleStretch_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeTaperedCapsuleStretch_t(std::string ptr, lua_State* state);
    GFeTaperedCapsuleStretch_t(void *ptr);

    std::vector<uint16_t> GetNode() const;
    void SetNode(std::vector<uint16_t> value);
    uint16_t GetCollisionMask() const;
    void SetCollisionMask(uint16_t value);
    uint16_t GetDummy() const;
    void SetDummy(uint16_t value);
    std::vector<float> GetRadius() const;
    void SetRadius(std::vector<float> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GWorldNodeOnDiskBufferData_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GWorldNodeOnDiskBufferData_t(std::string ptr, lua_State* state);
    GWorldNodeOnDiskBufferData_t(void *ptr);

    int32_t GetElementCount() const;
    void SetElementCount(int32_t value);
    int32_t GetElementSizeInBytes() const;
    void SetElementSizeInBytes(int32_t value);
    std::vector<GRenderInputLayoutField_t> GetInputLayoutFields() const;
    void SetInputLayoutFields(std::vector<GRenderInputLayoutField_t> value);
    std::vector<uint8> GetData() const;
    void SetData(std::vector<uint8> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEntComponentInfo_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEntComponentInfo_t(std::string ptr, lua_State* state);
    GEntComponentInfo_t(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    std::string GetCPPClassname() const;
    void SetCPPClassname(std::string value);
    std::string GetNetworkDataReferencedDescription() const;
    void SetNetworkDataReferencedDescription(std::string value);
    std::string GetNetworkDataReferencedPtrPropDescription() const;
    void SetNetworkDataReferencedPtrPropDescription(std::string value);
    int32_t GetRuntimeIndex() const;
    void SetRuntimeIndex(int32_t value);
    uint32_t GetFlags() const;
    void SetFlags(uint32_t value);
    GCEntityComponentHelper GetBaseClassComponentHelper() const;
    void SetBaseClassComponentHelper(GCEntityComponentHelper value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCClientGapTypeQueryRegistration
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCClientGapTypeQueryRegistration(std::string ptr, lua_State* state);
    GCClientGapTypeQueryRegistration(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmVirtualParameterTargetNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmVirtualParameterTargetNode(std::string ptr, lua_State* state);
    GCNmVirtualParameterTargetNode(void *ptr);

    int16_t GetChildNodeIdx() const;
    void SetChildNodeIdx(int16_t value);
    GCNmTargetValueNode GetParent() const;
    void SetParent(GCNmTargetValueNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCAudioAnimTag
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCAudioAnimTag(std::string ptr, lua_State* state);
    GCAudioAnimTag(void *ptr);

    std::string GetClipName() const;
    void SetClipName(std::string value);
    std::string GetAttachmentName() const;
    void SetAttachmentName(std::string value);
    float GetVolume() const;
    void SetVolume(float value);
    bool GetStopWhenTagEnds() const;
    void SetStopWhenTagEnds(bool value);
    bool GetStopWhenGraphEnds() const;
    void SetStopWhenGraphEnds(bool value);
    bool GetPlayOnServer() const;
    void SetPlayOnServer(bool value);
    bool GetPlayOnClient() const;
    void SetPlayOnClient(bool value);
    GCAnimTagBase GetParent() const;
    void SetParent(GCAnimTagBase value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCRenderMesh
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCRenderMesh(std::string ptr, lua_State* state);
    GCRenderMesh(void *ptr);

    std::vector<GCBaseConstraint*> GetConstraints() const;
    void SetConstraints(std::vector<GCBaseConstraint*> value);
    GCRenderSkeleton GetSkeleton() const;
    void SetSkeleton(GCRenderSkeleton value);
    GDynamicMeshDeformParams_t GetMeshDeformParams() const;
    void SetMeshDeformParams(GDynamicMeshDeformParams_t value);
    GCRenderGroom GetGroomData() const;
    void SetGroomData(GCRenderGroom value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class Gconstraint_hingeparams_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    Gconstraint_hingeparams_t(std::string ptr, lua_State* state);
    Gconstraint_hingeparams_t(void *ptr);

    Vector GetWorldPosition() const;
    void SetWorldPosition(Vector value);
    Vector GetWorldAxisDirection() const;
    void SetWorldAxisDirection(Vector value);
    Gconstraint_axislimit_t GetHingeAxis() const;
    void SetHingeAxis(Gconstraint_axislimit_t value);
    Gconstraint_breakableparams_t GetConstraint() const;
    void SetConstraint(Gconstraint_breakableparams_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GNmCompressionSettings_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GNmCompressionSettings_t(std::string ptr, lua_State* state);
    GNmCompressionSettings_t(void *ptr);

    GNmCompressionSettings_t GetTranslationRangeX() const;
    void SetTranslationRangeX(GNmCompressionSettings_t value);
    GNmCompressionSettings_t GetTranslationRangeY() const;
    void SetTranslationRangeY(GNmCompressionSettings_t value);
    GNmCompressionSettings_t GetTranslationRangeZ() const;
    void SetTranslationRangeZ(GNmCompressionSettings_t value);
    GNmCompressionSettings_t GetScaleRange() const;
    void SetScaleRange(GNmCompressionSettings_t value);
    bool GetIsRotationStatic() const;
    void SetIsRotationStatic(bool value);
    bool GetIsTranslationStatic() const;
    void SetIsTranslationStatic(bool value);
    bool GetIsScaleStatic() const;
    void SetIsScaleStatic(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTurnHelperUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTurnHelperUpdateNode(std::string ptr, lua_State* state);
    GCTurnHelperUpdateNode(void *ptr);

    uint64_t GetFacingTarget() const;
    void SetFacingTarget(uint64_t value);
    float GetTurnStartTimeOffset() const;
    void SetTurnStartTimeOffset(float value);
    float GetTurnDuration() const;
    void SetTurnDuration(float value);
    bool GetMatchChildDuration() const;
    void SetMatchChildDuration(bool value);
    float GetManualTurnOffset() const;
    void SetManualTurnOffset(float value);
    bool GetUseManualTurnOffset() const;
    void SetUseManualTurnOffset(bool value);
    GCUnaryUpdateNode GetParent() const;
    void SetParent(GCUnaryUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSosGroupActionTimeLimitSchema
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSosGroupActionTimeLimitSchema(std::string ptr, lua_State* state);
    GCSosGroupActionTimeLimitSchema(void *ptr);

    float GetMaxDuration() const;
    void SetMaxDuration(float value);
    GCSosGroupActionSchema GetParent() const;
    void SetParent(GCSosGroupActionSchema value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFollowTargetUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFollowTargetUpdateNode(std::string ptr, lua_State* state);
    GCFollowTargetUpdateNode(void *ptr);

    GFollowTargetOpFixedSettings_t GetOpFixedData() const;
    void SetOpFixedData(GFollowTargetOpFixedSettings_t value);
    GCAnimParamHandle GetParameterPosition() const;
    void SetParameterPosition(GCAnimParamHandle value);
    GCAnimParamHandle GetParameterOrientation() const;
    void SetParameterOrientation(GCAnimParamHandle value);
    GCUnaryUpdateNode GetParent() const;
    void SetParent(GCUnaryUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GEventClientAdvanceNonRenderedFrame_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GEventClientAdvanceNonRenderedFrame_t(std::string ptr, lua_State* state);
    GEventClientAdvanceNonRenderedFrame_t(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCSosSoundEventGroupListSchema
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCSosSoundEventGroupListSchema(std::string ptr, lua_State* state);
    GCSosSoundEventGroupListSchema(void *ptr);

    std::vector<GCSosSoundEventGroupSchema> GetGroupList() const;
    void SetGroupList(std::vector<GCSosSoundEventGroupSchema> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmClip
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmClip(std::string ptr, lua_State* state);
    GCNmClip(void *ptr);

    uint32_t GetNumFrames() const;
    void SetNumFrames(uint32_t value);
    float GetDuration() const;
    void SetDuration(float value);
    std::vector<GNmCompressionSettings_t> GetTrackCompressionSettings() const;
    void SetTrackCompressionSettings(std::vector<GNmCompressionSettings_t> value);
    std::vector<uint32> GetCompressedPoseOffsets() const;
    void SetCompressedPoseOffsets(std::vector<uint32> value);
    GCNmSyncTrack GetSyncTrack() const;
    void SetSyncTrack(GCNmSyncTrack value);
    GCNmRootMotionData GetRootMotion() const;
    void SetRootMotion(GCNmRootMotionData value);
    bool GetIsAdditive() const;
    void SetIsAdditive(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCFlexDesc
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCFlexDesc(std::string ptr, lua_State* state);
    GCFlexDesc(void *ptr);

    std::string GetFacs() const;
    void SetFacs(std::string value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCStateMachineComponentUpdater
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCStateMachineComponentUpdater(std::string ptr, lua_State* state);
    GCStateMachineComponentUpdater(void *ptr);

    GCAnimStateMachineUpdater GetStateMachine() const;
    void SetStateMachine(GCAnimStateMachineUpdater value);
    GCAnimComponentUpdater GetParent() const;
    void SetParent(GCAnimComponentUpdater value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCompMatMutatorCondition_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCompMatMutatorCondition_t(std::string ptr, lua_State* state);
    GCompMatMutatorCondition_t(void *ptr);

    uint64_t GetMutatorCondition() const;
    void SetMutatorCondition(uint64_t value);
    std::string GetStrMutatorConditionContainerName() const;
    void SetStrMutatorConditionContainerName(std::string value);
    std::string GetStrMutatorConditionContainerVarName() const;
    void SetStrMutatorConditionContainerVarName(std::string value);
    std::string GetStrMutatorConditionContainerVarValue() const;
    void SetStrMutatorConditionContainerVarValue(std::string value);
    bool GetPassWhenTrue() const;
    void SetPassWhenTrue(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFakeEntity_tAPI
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFakeEntity_tAPI(std::string ptr, lua_State* state);
    GFakeEntity_tAPI(void *ptr);



    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBoneConstraintPoseSpaceMorph__Input_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBoneConstraintPoseSpaceMorph__Input_t(std::string ptr, lua_State* state);
    GCBoneConstraintPoseSpaceMorph__Input_t(void *ptr);

    Vector GetInputValue() const;
    void SetInputValue(Vector value);
    std::vector<float32> GetOutputWeightList() const;
    void SetOutputWeightList(std::vector<float32> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCTwoBoneIKUpdateNode
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCTwoBoneIKUpdateNode(std::string ptr, lua_State* state);
    GCTwoBoneIKUpdateNode(void *ptr);

    GTwoBoneIKSettings_t GetOpFixedData() const;
    void SetOpFixedData(GTwoBoneIKSettings_t value);
    GCUnaryUpdateNode GetParent() const;
    void SetParent(GCUnaryUpdateNode value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVMixDynamicsDesc_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVMixDynamicsDesc_t(std::string ptr, lua_State* state);
    GVMixDynamicsDesc_t(void *ptr);

    float GetFldbGain() const;
    void SetFldbGain(float value);
    float GetFldbNoiseGateThreshold() const;
    void SetFldbNoiseGateThreshold(float value);
    float GetFldbCompressionThreshold() const;
    void SetFldbCompressionThreshold(float value);
    float GetFldbLimiterThreshold() const;
    void SetFldbLimiterThreshold(float value);
    float GetFldbKneeWidth() const;
    void SetFldbKneeWidth(float value);
    float GetRatio() const;
    void SetRatio(float value);
    float GetLimiterRatio() const;
    void SetLimiterRatio(float value);
    float GetAttackTimeMS() const;
    void SetAttackTimeMS(float value);
    float GetReleaseTimeMS() const;
    void SetReleaseTimeMS(float value);
    float GetRMSTimeMS() const;
    void SetRMSTimeMS(float value);
    float GetWetMix() const;
    void SetWetMix(float value);
    bool GetPeakMode() const;
    void SetPeakMode(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeVertexMapDesc_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeVertexMapDesc_t(std::string ptr, lua_State* state);
    GFeVertexMapDesc_t(void *ptr);

    std::string GetName() const;
    void SetName(std::string value);
    uint32_t GetNameHash() const;
    void SetNameHash(uint32_t value);
    uint32_t GetColor() const;
    void SetColor(uint32_t value);
    uint32_t GetFlags() const;
    void SetFlags(uint32_t value);
    uint16_t GetVertexBase() const;
    void SetVertexBase(uint16_t value);
    uint16_t GetVertexCount() const;
    void SetVertexCount(uint16_t value);
    uint32_t GetMapOffset() const;
    void SetMapOffset(uint32_t value);
    uint32_t GetNodeListOffset() const;
    void SetNodeListOffset(uint32_t value);
    Vector GetCenterOfMass() const;
    void SetCenterOfMass(Vector value);
    float GetVolumetricSolveStrength() const;
    void SetVolumetricSolveStrength(float value);
    int16_t GetScaleSourceNode() const;
    void SetScaleSourceNode(int16_t value);
    uint16_t GetNodeListCount() const;
    void SetNodeListCount(uint16_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GFeSourceEdge_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GFeSourceEdge_t(std::string ptr, lua_State* state);
    GFeSourceEdge_t(void *ptr);

    std::vector<uint16_t> GetNode() const;
    void SetNode(std::vector<uint16_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCompositeMaterialEditorPoint_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCompositeMaterialEditorPoint_t(std::string ptr, lua_State* state);
    GCompositeMaterialEditorPoint_t(void *ptr);

    int32_t GetSequenceIndex() const;
    void SetSequenceIndex(int32_t value);
    float GetCycle() const;
    void SetCycle(float value);
    bool GetEnableChildModel() const;
    void SetEnableChildModel(bool value);
    std::vector<GCompositeMaterialAssemblyProcedure_t> GetCompositeMaterialAssemblyProcedures() const;
    void SetCompositeMaterialAssemblyProcedures(std::vector<GCompositeMaterialAssemblyProcedure_t> value);
    std::vector<GCompositeMaterial_t> GetCompositeMaterials() const;
    void SetCompositeMaterials(std::vector<GCompositeMaterial_t> value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GVPhysXJoint_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GVPhysXJoint_t(std::string ptr, lua_State* state);
    GVPhysXJoint_t(void *ptr);

    uint16_t GetType() const;
    void SetType(uint16_t value);
    uint16_t GetBody1() const;
    void SetBody1(uint16_t value);
    uint16_t GetBody2() const;
    void SetBody2(uint16_t value);
    uint16_t GetFlags() const;
    void SetFlags(uint16_t value);
    bool GetEnableCollision() const;
    void SetEnableCollision(bool value);
    bool GetEnableLinearLimit() const;
    void SetEnableLinearLimit(bool value);
    GVPhysXRange_t GetLinearLimit() const;
    void SetLinearLimit(GVPhysXRange_t value);
    bool GetEnableLinearMotor() const;
    void SetEnableLinearMotor(bool value);
    Vector GetLinearTargetVelocity() const;
    void SetLinearTargetVelocity(Vector value);
    float GetMaxForce() const;
    void SetMaxForce(float value);
    bool GetEnableSwingLimit() const;
    void SetEnableSwingLimit(bool value);
    GVPhysXRange_t GetSwingLimit() const;
    void SetSwingLimit(GVPhysXRange_t value);
    bool GetEnableTwistLimit() const;
    void SetEnableTwistLimit(bool value);
    GVPhysXRange_t GetTwistLimit() const;
    void SetTwistLimit(GVPhysXRange_t value);
    bool GetEnableAngularMotor() const;
    void SetEnableAngularMotor(bool value);
    Vector GetAngularTargetVelocity() const;
    void SetAngularTargetVelocity(Vector value);
    float GetMaxTorque() const;
    void SetMaxTorque(float value);
    float GetLinearFrequency() const;
    void SetLinearFrequency(float value);
    float GetLinearDampingRatio() const;
    void SetLinearDampingRatio(float value);
    float GetAngularFrequency() const;
    void SetAngularFrequency(float value);
    float GetAngularDampingRatio() const;
    void SetAngularDampingRatio(float value);
    float GetFriction() const;
    void SetFriction(float value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCBodyGroupSetting
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCBodyGroupSetting(std::string ptr, lua_State* state);
    GCBodyGroupSetting(void *ptr);

    std::string GetBodyGroupName() const;
    void SetBodyGroupName(std::string value);
    int32_t GetBodyGroupOption() const;
    void SetBodyGroupOption(int32_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GRnSphereDesc_t
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GRnSphereDesc_t(std::string ptr, lua_State* state);
    GRnSphereDesc_t(void *ptr);

    GRnShapeDesc_t GetParent() const;
    void SetParent(GRnShapeDesc_t value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};

class GCNmTarget
{
private:
    void *m_ptr;
    std::string plugin_name = "unknown";

public:
    GCNmTarget(std::string ptr, lua_State* state);
    GCNmTarget(void *ptr);

    bool GetIsBoneTarget() const;
    void SetIsBoneTarget(bool value);
    bool GetIsUsingBoneSpaceOffsets() const;
    void SetIsUsingBoneSpaceOffsets(bool value);
    bool GetHasOffsets() const;
    void SetHasOffsets(bool value);
    bool GetIsSet() const;
    void SetIsSet(bool value);

    void* GetPtr();
    std::string ToPtr();
    bool IsValid();
};