#include "classes.h"

GCGlowProperty::GCGlowProperty(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCGlowProperty::GCGlowProperty(void *ptr) {
    m_ptr = ptr;
}

Vector GCGlowProperty::GetGlowColor() const {
    return GetSchemaValue<Vector>(m_ptr, "CGlowProperty", "m_fGlowColor");
}

void GCGlowProperty::SetGlowColor(Vector value) {
    SetSchemaValue(m_ptr, "CGlowProperty", "m_fGlowColor", false, value);
}

int32_t GCGlowProperty::GetGlowType() const {
    return GetSchemaValue<int32_t>(m_ptr, "CGlowProperty", "m_iGlowType");
}

void GCGlowProperty::SetGlowType(int32_t value) {
    SetSchemaValue(m_ptr, "CGlowProperty", "m_iGlowType", false, value);
}

int32_t GCGlowProperty::GetGlowTeam() const {
    return GetSchemaValue<int32_t>(m_ptr, "CGlowProperty", "m_iGlowTeam");
}

void GCGlowProperty::SetGlowTeam(int32_t value) {
    SetSchemaValue(m_ptr, "CGlowProperty", "m_iGlowTeam", false, value);
}

int32_t GCGlowProperty::GetGlowRange() const {
    return GetSchemaValue<int32_t>(m_ptr, "CGlowProperty", "m_nGlowRange");
}

void GCGlowProperty::SetGlowRange(int32_t value) {
    SetSchemaValue(m_ptr, "CGlowProperty", "m_nGlowRange", false, value);
}

int32_t GCGlowProperty::GetGlowRangeMin() const {
    return GetSchemaValue<int32_t>(m_ptr, "CGlowProperty", "m_nGlowRangeMin");
}

void GCGlowProperty::SetGlowRangeMin(int32_t value) {
    SetSchemaValue(m_ptr, "CGlowProperty", "m_nGlowRangeMin", false, value);
}

Color GCGlowProperty::GetGlowColorOverride() const {
    return GetSchemaValue<Color>(m_ptr, "CGlowProperty", "m_glowColorOverride");
}

void GCGlowProperty::SetGlowColorOverride(Color value) {
    SetSchemaValue(m_ptr, "CGlowProperty", "m_glowColorOverride", false, value);
}

bool GCGlowProperty::GetFlashing() const {
    return GetSchemaValue<bool>(m_ptr, "CGlowProperty", "m_bFlashing");
}

void GCGlowProperty::SetFlashing(bool value) {
    SetSchemaValue(m_ptr, "CGlowProperty", "m_bFlashing", false, value);
}

float GCGlowProperty::GetGlowTime() const {
    return GetSchemaValue<float>(m_ptr, "CGlowProperty", "m_flGlowTime");
}

void GCGlowProperty::SetGlowTime(float value) {
    SetSchemaValue(m_ptr, "CGlowProperty", "m_flGlowTime", false, value);
}

float GCGlowProperty::GetGlowStartTime() const {
    return GetSchemaValue<float>(m_ptr, "CGlowProperty", "m_flGlowStartTime");
}

void GCGlowProperty::SetGlowStartTime(float value) {
    SetSchemaValue(m_ptr, "CGlowProperty", "m_flGlowStartTime", false, value);
}

bool GCGlowProperty::GetEligibleForScreenHighlight() const {
    return GetSchemaValue<bool>(m_ptr, "CGlowProperty", "m_bEligibleForScreenHighlight");
}

void GCGlowProperty::SetEligibleForScreenHighlight(bool value) {
    SetSchemaValue(m_ptr, "CGlowProperty", "m_bEligibleForScreenHighlight", false, value);
}

bool GCGlowProperty::GetGlowing() const {
    return GetSchemaValue<bool>(m_ptr, "CGlowProperty", "m_bGlowing");
}

void GCGlowProperty::SetGlowing(bool value) {
    SetSchemaValue(m_ptr, "CGlowProperty", "m_bGlowing", false, value);
}

std::string GCGlowProperty::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCGlowProperty::IsValid() {
    return (m_ptr != nullptr);
}

GCEntityComponent::GCEntityComponent(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEntityComponent::GCEntityComponent(void *ptr) {
    m_ptr = ptr;
}

std::string GCEntityComponent::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEntityComponent::IsValid() {
    return (m_ptr != nullptr);
}

GCPlayerPawnComponent::GCPlayerPawnComponent(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPlayerPawnComponent::GCPlayerPawnComponent(void *ptr) {
    m_ptr = ptr;
}

GCNetworkVarChainer GCPlayerPawnComponent::Get__pChainEntity() const {
    return GetSchemaValue<GCNetworkVarChainer>(m_ptr, "CPlayerPawnComponent", "__m_pChainEntity");
}

void GCPlayerPawnComponent::Set__pChainEntity(GCNetworkVarChainer value) {
    SetSchemaValue(m_ptr, "CPlayerPawnComponent", "__m_pChainEntity", false, value);
}

std::string GCPlayerPawnComponent::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPlayerPawnComponent::IsValid() {
    return (m_ptr != nullptr);
}

Gfogparams_t::Gfogparams_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

Gfogparams_t::Gfogparams_t(void *ptr) {
    m_ptr = ptr;
}

Vector Gfogparams_t::GetDirPrimary() const {
    return GetSchemaValue<Vector>(m_ptr, "fogparams_t", "dirPrimary");
}

void Gfogparams_t::SetDirPrimary(Vector value) {
    SetSchemaValue(m_ptr, "fogparams_t", "dirPrimary", true, value);
}

Color Gfogparams_t::GetColorPrimary() const {
    return GetSchemaValue<Color>(m_ptr, "fogparams_t", "colorPrimary");
}

void Gfogparams_t::SetColorPrimary(Color value) {
    SetSchemaValue(m_ptr, "fogparams_t", "colorPrimary", true, value);
}

Color Gfogparams_t::GetColorSecondary() const {
    return GetSchemaValue<Color>(m_ptr, "fogparams_t", "colorSecondary");
}

void Gfogparams_t::SetColorSecondary(Color value) {
    SetSchemaValue(m_ptr, "fogparams_t", "colorSecondary", true, value);
}

Color Gfogparams_t::GetColorPrimaryLerpTo() const {
    return GetSchemaValue<Color>(m_ptr, "fogparams_t", "colorPrimaryLerpTo");
}

void Gfogparams_t::SetColorPrimaryLerpTo(Color value) {
    SetSchemaValue(m_ptr, "fogparams_t", "colorPrimaryLerpTo", true, value);
}

Color Gfogparams_t::GetColorSecondaryLerpTo() const {
    return GetSchemaValue<Color>(m_ptr, "fogparams_t", "colorSecondaryLerpTo");
}

void Gfogparams_t::SetColorSecondaryLerpTo(Color value) {
    SetSchemaValue(m_ptr, "fogparams_t", "colorSecondaryLerpTo", true, value);
}

float Gfogparams_t::GetStart() const {
    return GetSchemaValue<float>(m_ptr, "fogparams_t", "start");
}

void Gfogparams_t::SetStart(float value) {
    SetSchemaValue(m_ptr, "fogparams_t", "start", true, value);
}

float Gfogparams_t::GetEnd() const {
    return GetSchemaValue<float>(m_ptr, "fogparams_t", "end");
}

void Gfogparams_t::SetEnd(float value) {
    SetSchemaValue(m_ptr, "fogparams_t", "end", true, value);
}

float Gfogparams_t::GetFarz() const {
    return GetSchemaValue<float>(m_ptr, "fogparams_t", "farz");
}

void Gfogparams_t::SetFarz(float value) {
    SetSchemaValue(m_ptr, "fogparams_t", "farz", true, value);
}

float Gfogparams_t::GetMaxdensity() const {
    return GetSchemaValue<float>(m_ptr, "fogparams_t", "maxdensity");
}

void Gfogparams_t::SetMaxdensity(float value) {
    SetSchemaValue(m_ptr, "fogparams_t", "maxdensity", true, value);
}

float Gfogparams_t::GetExponent() const {
    return GetSchemaValue<float>(m_ptr, "fogparams_t", "exponent");
}

void Gfogparams_t::SetExponent(float value) {
    SetSchemaValue(m_ptr, "fogparams_t", "exponent", true, value);
}

float Gfogparams_t::GetHDRColorScale() const {
    return GetSchemaValue<float>(m_ptr, "fogparams_t", "HDRColorScale");
}

void Gfogparams_t::SetHDRColorScale(float value) {
    SetSchemaValue(m_ptr, "fogparams_t", "HDRColorScale", true, value);
}

float Gfogparams_t::GetSkyboxFogFactor() const {
    return GetSchemaValue<float>(m_ptr, "fogparams_t", "skyboxFogFactor");
}

void Gfogparams_t::SetSkyboxFogFactor(float value) {
    SetSchemaValue(m_ptr, "fogparams_t", "skyboxFogFactor", true, value);
}

float Gfogparams_t::GetSkyboxFogFactorLerpTo() const {
    return GetSchemaValue<float>(m_ptr, "fogparams_t", "skyboxFogFactorLerpTo");
}

void Gfogparams_t::SetSkyboxFogFactorLerpTo(float value) {
    SetSchemaValue(m_ptr, "fogparams_t", "skyboxFogFactorLerpTo", true, value);
}

float Gfogparams_t::GetStartLerpTo() const {
    return GetSchemaValue<float>(m_ptr, "fogparams_t", "startLerpTo");
}

void Gfogparams_t::SetStartLerpTo(float value) {
    SetSchemaValue(m_ptr, "fogparams_t", "startLerpTo", true, value);
}

float Gfogparams_t::GetEndLerpTo() const {
    return GetSchemaValue<float>(m_ptr, "fogparams_t", "endLerpTo");
}

void Gfogparams_t::SetEndLerpTo(float value) {
    SetSchemaValue(m_ptr, "fogparams_t", "endLerpTo", true, value);
}

float Gfogparams_t::GetMaxdensityLerpTo() const {
    return GetSchemaValue<float>(m_ptr, "fogparams_t", "maxdensityLerpTo");
}

void Gfogparams_t::SetMaxdensityLerpTo(float value) {
    SetSchemaValue(m_ptr, "fogparams_t", "maxdensityLerpTo", true, value);
}

float Gfogparams_t::GetDuration() const {
    return GetSchemaValue<float>(m_ptr, "fogparams_t", "duration");
}

void Gfogparams_t::SetDuration(float value) {
    SetSchemaValue(m_ptr, "fogparams_t", "duration", true, value);
}

float Gfogparams_t::GetBlendtobackground() const {
    return GetSchemaValue<float>(m_ptr, "fogparams_t", "blendtobackground");
}

void Gfogparams_t::SetBlendtobackground(float value) {
    SetSchemaValue(m_ptr, "fogparams_t", "blendtobackground", true, value);
}

float Gfogparams_t::GetScattering() const {
    return GetSchemaValue<float>(m_ptr, "fogparams_t", "scattering");
}

void Gfogparams_t::SetScattering(float value) {
    SetSchemaValue(m_ptr, "fogparams_t", "scattering", true, value);
}

float Gfogparams_t::GetLocallightscale() const {
    return GetSchemaValue<float>(m_ptr, "fogparams_t", "locallightscale");
}

void Gfogparams_t::SetLocallightscale(float value) {
    SetSchemaValue(m_ptr, "fogparams_t", "locallightscale", true, value);
}

bool Gfogparams_t::GetEnable() const {
    return GetSchemaValue<bool>(m_ptr, "fogparams_t", "enable");
}

void Gfogparams_t::SetEnable(bool value) {
    SetSchemaValue(m_ptr, "fogparams_t", "enable", true, value);
}

bool Gfogparams_t::GetBlend() const {
    return GetSchemaValue<bool>(m_ptr, "fogparams_t", "blend");
}

void Gfogparams_t::SetBlend(bool value) {
    SetSchemaValue(m_ptr, "fogparams_t", "blend", true, value);
}

bool Gfogparams_t::GetNoReflectionFog() const {
    return GetSchemaValue<bool>(m_ptr, "fogparams_t", "m_bNoReflectionFog");
}

void Gfogparams_t::SetNoReflectionFog(bool value) {
    SetSchemaValue(m_ptr, "fogparams_t", "m_bNoReflectionFog", true, value);
}

bool Gfogparams_t::GetPadding() const {
    return GetSchemaValue<bool>(m_ptr, "fogparams_t", "m_bPadding");
}

void Gfogparams_t::SetPadding(bool value) {
    SetSchemaValue(m_ptr, "fogparams_t", "m_bPadding", true, value);
}

std::string Gfogparams_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool Gfogparams_t::IsValid() {
    return (m_ptr != nullptr);
}

GCNetworkTransmitComponent::GCNetworkTransmitComponent(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNetworkTransmitComponent::GCNetworkTransmitComponent(void *ptr) {
    m_ptr = ptr;
}

uint8_t GCNetworkTransmitComponent::GetTransmitStateOwnedCounter() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CNetworkTransmitComponent", "m_nTransmitStateOwnedCounter");
}

void GCNetworkTransmitComponent::SetTransmitStateOwnedCounter(uint8_t value) {
    SetSchemaValue(m_ptr, "CNetworkTransmitComponent", "m_nTransmitStateOwnedCounter", false, value);
}

std::string GCNetworkTransmitComponent::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNetworkTransmitComponent::IsValid() {
    return (m_ptr != nullptr);
}

GCNetworkViewOffsetVector::GCNetworkViewOffsetVector(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNetworkViewOffsetVector::GCNetworkViewOffsetVector(void *ptr) {
    m_ptr = ptr;
}

float GCNetworkViewOffsetVector::GetX() const {
    return GetSchemaValue<float>(m_ptr, "CNetworkViewOffsetVector", "m_vecX");
}

void GCNetworkViewOffsetVector::SetX(float value) {
    SetSchemaValue(m_ptr, "CNetworkViewOffsetVector", "m_vecX", false, value);
}

float GCNetworkViewOffsetVector::GetY() const {
    return GetSchemaValue<float>(m_ptr, "CNetworkViewOffsetVector", "m_vecY");
}

void GCNetworkViewOffsetVector::SetY(float value) {
    SetSchemaValue(m_ptr, "CNetworkViewOffsetVector", "m_vecY", false, value);
}

float GCNetworkViewOffsetVector::GetZ() const {
    return GetSchemaValue<float>(m_ptr, "CNetworkViewOffsetVector", "m_vecZ");
}

void GCNetworkViewOffsetVector::SetZ(float value) {
    SetSchemaValue(m_ptr, "CNetworkViewOffsetVector", "m_vecZ", false, value);
}

std::string GCNetworkViewOffsetVector::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNetworkViewOffsetVector::IsValid() {
    return (m_ptr != nullptr);
}

GCNetworkVelocityVector::GCNetworkVelocityVector(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNetworkVelocityVector::GCNetworkVelocityVector(void *ptr) {
    m_ptr = ptr;
}

float GCNetworkVelocityVector::GetX() const {
    return GetSchemaValue<float>(m_ptr, "CNetworkVelocityVector", "m_vecX");
}

void GCNetworkVelocityVector::SetX(float value) {
    SetSchemaValue(m_ptr, "CNetworkVelocityVector", "m_vecX", false, value);
}

float GCNetworkVelocityVector::GetY() const {
    return GetSchemaValue<float>(m_ptr, "CNetworkVelocityVector", "m_vecY");
}

void GCNetworkVelocityVector::SetY(float value) {
    SetSchemaValue(m_ptr, "CNetworkVelocityVector", "m_vecY", false, value);
}

float GCNetworkVelocityVector::GetZ() const {
    return GetSchemaValue<float>(m_ptr, "CNetworkVelocityVector", "m_vecZ");
}

void GCNetworkVelocityVector::SetZ(float value) {
    SetSchemaValue(m_ptr, "CNetworkVelocityVector", "m_vecZ", false, value);
}

std::string GCNetworkVelocityVector::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNetworkVelocityVector::IsValid() {
    return (m_ptr != nullptr);
}

GCEntityInstance::GCEntityInstance(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEntityInstance::GCEntityInstance(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCEntityInstance::GetPrivateVScripts() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEntityInstance", "m_iszPrivateVScripts");
}

void GCEntityInstance::SetPrivateVScripts(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEntityInstance", "m_iszPrivateVScripts", false, value);
}

GCEntityIdentity GCEntityInstance::GetEntity() const {
    GCEntityIdentity value(GetSchemaValuePtr<void>(m_ptr, "CEntityInstance", "m_pEntity"));
    return value;
}

void GCEntityInstance::SetEntity(GCEntityIdentity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Entity' is not possible.\n");
}

GCScriptComponent GCEntityInstance::GetCScriptComponent() const {
    GCScriptComponent value(GetSchemaValuePtr<void>(m_ptr, "CEntityInstance", "m_CScriptComponent"));
    return value;
}

void GCEntityInstance::SetCScriptComponent(GCScriptComponent* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'CScriptComponent' is not possible.\n");
}

bool GCEntityInstance::GetVisibleinPVS() const {
    return GetSchemaValue<bool>(m_ptr, "CEntityInstance", "m_bVisibleinPVS");
}

void GCEntityInstance::SetVisibleinPVS(bool value) {
    SetSchemaValue(m_ptr, "CEntityInstance", "m_bVisibleinPVS", false, value);
}

std::string GCEntityInstance::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEntityInstance::IsValid() {
    return (m_ptr != nullptr);
}

GCBaseEntity::GCBaseEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBaseEntity::GCBaseEntity(void *ptr) {
    m_ptr = ptr;
}

GCBodyComponent GCBaseEntity::GetCBodyComponent() const {
    GCBodyComponent value(GetSchemaValuePtr<void>(m_ptr, "CBaseEntity", "m_CBodyComponent"));
    return value;
}

void GCBaseEntity::SetCBodyComponent(GCBodyComponent* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'CBodyComponent' is not possible.\n");
}

GCNetworkTransmitComponent GCBaseEntity::GetNetworkTransmitComponent() const {
    return GetSchemaValue<GCNetworkTransmitComponent>(m_ptr, "CBaseEntity", "m_NetworkTransmitComponent");
}

void GCBaseEntity::SetNetworkTransmitComponent(GCNetworkTransmitComponent value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_NetworkTransmitComponent", false, value);
}

std::vector<Gthinkfunc_t> GCBaseEntity::GetThinkFunctions() const {
    CUtlVector<Gthinkfunc_t>* vec = GetSchemaValue<CUtlVector<Gthinkfunc_t>*>(m_ptr, "CBaseEntity", "m_aThinkFunctions"); std::vector<Gthinkfunc_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCBaseEntity::SetThinkFunctions(std::vector<Gthinkfunc_t> value) {
    SetSchemaValueCUtlVector<Gthinkfunc_t>(m_ptr, "CBaseEntity", "m_aThinkFunctions", false, value);
}

int32_t GCBaseEntity::GetCurrentThinkContext() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBaseEntity", "m_iCurrentThinkContext");
}

void GCBaseEntity::SetCurrentThinkContext(int32_t value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_iCurrentThinkContext", false, value);
}

bool GCBaseEntity::GetDisabledContextThinks() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseEntity", "m_bDisabledContextThinks");
}

void GCBaseEntity::SetDisabledContextThinks(bool value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_bDisabledContextThinks", false, value);
}

float GCBaseEntity::GetLastNetworkChange() const {
    return GetSchemaValue<float>(m_ptr, "CBaseEntity", "m_lastNetworkChange");
}

void GCBaseEntity::SetLastNetworkChange(float value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_lastNetworkChange", false, value);
}

std::vector<GResponseContext_t> GCBaseEntity::GetResponseContexts() const {
    CUtlVector<GResponseContext_t>* vec = GetSchemaValue<CUtlVector<GResponseContext_t>*>(m_ptr, "CBaseEntity", "m_ResponseContexts"); std::vector<GResponseContext_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCBaseEntity::SetResponseContexts(std::vector<GResponseContext_t> value) {
    SetSchemaValueCUtlVector<GResponseContext_t>(m_ptr, "CBaseEntity", "m_ResponseContexts", false, value);
}

CUtlSymbolLarge GCBaseEntity::GetResponseContext() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBaseEntity", "m_iszResponseContext");
}

void GCBaseEntity::SetResponseContext(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_iszResponseContext", false, value);
}

int32_t GCBaseEntity::GetHealth() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBaseEntity", "m_iHealth");
}

void GCBaseEntity::SetHealth(int32_t value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_iHealth", false, value);
}

int32_t GCBaseEntity::GetMaxHealth() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBaseEntity", "m_iMaxHealth");
}

void GCBaseEntity::SetMaxHealth(int32_t value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_iMaxHealth", false, value);
}

uint8_t GCBaseEntity::GetLifeState() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CBaseEntity", "m_lifeState");
}

void GCBaseEntity::SetLifeState(uint8_t value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_lifeState", false, value);
}

float GCBaseEntity::GetDamageAccumulator() const {
    return GetSchemaValue<float>(m_ptr, "CBaseEntity", "m_flDamageAccumulator");
}

void GCBaseEntity::SetDamageAccumulator(float value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_flDamageAccumulator", false, value);
}

bool GCBaseEntity::GetTakesDamage() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseEntity", "m_bTakesDamage");
}

void GCBaseEntity::SetTakesDamage(bool value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_bTakesDamage", false, value);
}

TakeDamageFlags_t GCBaseEntity::GetTakeDamageFlags() const {
    return GetSchemaValue<TakeDamageFlags_t>(m_ptr, "CBaseEntity", "m_nTakeDamageFlags");
}

void GCBaseEntity::SetTakeDamageFlags(TakeDamageFlags_t value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_nTakeDamageFlags", false, value);
}

bool GCBaseEntity::GetIsPlatform() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseEntity", "m_bIsPlatform");
}

void GCBaseEntity::SetIsPlatform(bool value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_bIsPlatform", false, value);
}

MoveCollide_t GCBaseEntity::GetMoveCollide() const {
    return GetSchemaValue<MoveCollide_t>(m_ptr, "CBaseEntity", "m_MoveCollide");
}

void GCBaseEntity::SetMoveCollide(MoveCollide_t value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_MoveCollide", false, value);
}

MoveType_t GCBaseEntity::GetMoveType() const {
    return GetSchemaValue<MoveType_t>(m_ptr, "CBaseEntity", "m_MoveType");
}

void GCBaseEntity::SetMoveType(MoveType_t value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_MoveType", false, value);
}

MoveType_t GCBaseEntity::GetActualMoveType() const {
    return GetSchemaValue<MoveType_t>(m_ptr, "CBaseEntity", "m_nActualMoveType");
}

void GCBaseEntity::SetActualMoveType(MoveType_t value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_nActualMoveType", false, value);
}

uint8_t GCBaseEntity::GetWaterTouch() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CBaseEntity", "m_nWaterTouch");
}

void GCBaseEntity::SetWaterTouch(uint8_t value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_nWaterTouch", false, value);
}

uint8_t GCBaseEntity::GetSlimeTouch() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CBaseEntity", "m_nSlimeTouch");
}

void GCBaseEntity::SetSlimeTouch(uint8_t value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_nSlimeTouch", false, value);
}

bool GCBaseEntity::GetRestoreInHierarchy() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseEntity", "m_bRestoreInHierarchy");
}

void GCBaseEntity::SetRestoreInHierarchy(bool value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_bRestoreInHierarchy", false, value);
}

CUtlSymbolLarge GCBaseEntity::GetTarget() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBaseEntity", "m_target");
}

void GCBaseEntity::SetTarget(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_target", false, value);
}

GCBaseFilter GCBaseEntity::GetDamageFilter() const {
    GCBaseFilter value(GetSchemaValuePtr<void>(m_ptr, "CBaseEntity", "m_hDamageFilter"));
    return value;
}

void GCBaseEntity::SetDamageFilter(GCBaseFilter* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'DamageFilter' is not possible.\n");
}

CUtlSymbolLarge GCBaseEntity::GetDamageFilterName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBaseEntity", "m_iszDamageFilterName");
}

void GCBaseEntity::SetDamageFilterName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_iszDamageFilterName", false, value);
}

float GCBaseEntity::GetMoveDoneTime() const {
    return GetSchemaValue<float>(m_ptr, "CBaseEntity", "m_flMoveDoneTime");
}

void GCBaseEntity::SetMoveDoneTime(float value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_flMoveDoneTime", false, value);
}

CUtlStringToken GCBaseEntity::GetSubclassID() const {
    return GetSchemaValue<CUtlStringToken>(m_ptr, "CBaseEntity", "m_nSubclassID");
}

void GCBaseEntity::SetSubclassID(CUtlStringToken value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_nSubclassID", false, value);
}

float GCBaseEntity::GetAnimTime() const {
    return GetSchemaValue<float>(m_ptr, "CBaseEntity", "m_flAnimTime");
}

void GCBaseEntity::SetAnimTime(float value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_flAnimTime", false, value);
}

float GCBaseEntity::GetSimulationTime() const {
    return GetSchemaValue<float>(m_ptr, "CBaseEntity", "m_flSimulationTime");
}

void GCBaseEntity::SetSimulationTime(float value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_flSimulationTime", false, value);
}

bool GCBaseEntity::GetClientSideRagdoll() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseEntity", "m_bClientSideRagdoll");
}

void GCBaseEntity::SetClientSideRagdoll(bool value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_bClientSideRagdoll", false, value);
}

uint8_t GCBaseEntity::GetInterpolationFrame() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CBaseEntity", "m_ubInterpolationFrame");
}

void GCBaseEntity::SetInterpolationFrame(uint8_t value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_ubInterpolationFrame", false, value);
}

Vector GCBaseEntity::GetPrevVPhysicsUpdatePos() const {
    return GetSchemaValue<Vector>(m_ptr, "CBaseEntity", "m_vPrevVPhysicsUpdatePos");
}

void GCBaseEntity::SetPrevVPhysicsUpdatePos(Vector value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_vPrevVPhysicsUpdatePos", false, value);
}

uint8_t GCBaseEntity::GetTeamNum() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CBaseEntity", "m_iTeamNum");
}

void GCBaseEntity::SetTeamNum(uint8_t value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_iTeamNum", false, value);
}

CUtlSymbolLarge GCBaseEntity::GetGlobalname() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBaseEntity", "m_iGlobalname");
}

void GCBaseEntity::SetGlobalname(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_iGlobalname", false, value);
}

int32_t GCBaseEntity::GetSentToClients() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBaseEntity", "m_iSentToClients");
}

void GCBaseEntity::SetSentToClients(int32_t value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_iSentToClients", false, value);
}

float GCBaseEntity::GetSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CBaseEntity", "m_flSpeed");
}

void GCBaseEntity::SetSpeed(float value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_flSpeed", false, value);
}

CUtlString GCBaseEntity::GetUniqueHammerID() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CBaseEntity", "m_sUniqueHammerID");
}

void GCBaseEntity::SetUniqueHammerID(CUtlString value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_sUniqueHammerID", false, value);
}

uint32_t GCBaseEntity::GetSpawnflags() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CBaseEntity", "m_spawnflags");
}

void GCBaseEntity::SetSpawnflags(uint32_t value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_spawnflags", false, value);
}

int32_t GCBaseEntity::GetSimulationTick() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBaseEntity", "m_nSimulationTick");
}

void GCBaseEntity::SetSimulationTick(int32_t value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_nSimulationTick", false, value);
}

GCEntityIOOutput GCBaseEntity::GetOnKilled() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseEntity", "m_OnKilled");
}

void GCBaseEntity::SetOnKilled(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_OnKilled", false, value);
}

uint32_t GCBaseEntity::GetFlags() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CBaseEntity", "m_fFlags");
}

void GCBaseEntity::SetFlags(uint32_t value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_fFlags", false, value);
}

Vector GCBaseEntity::GetAbsVelocity() const {
    return GetSchemaValue<Vector>(m_ptr, "CBaseEntity", "m_vecAbsVelocity");
}

void GCBaseEntity::SetAbsVelocity(Vector value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_vecAbsVelocity", false, value);
}

GCNetworkVelocityVector GCBaseEntity::GetVelocity() const {
    return GetSchemaValue<GCNetworkVelocityVector>(m_ptr, "CBaseEntity", "m_vecVelocity");
}

void GCBaseEntity::SetVelocity(GCNetworkVelocityVector value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_vecVelocity", false, value);
}

Vector GCBaseEntity::GetBaseVelocity() const {
    return GetSchemaValue<Vector>(m_ptr, "CBaseEntity", "m_vecBaseVelocity");
}

void GCBaseEntity::SetBaseVelocity(Vector value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_vecBaseVelocity", false, value);
}

int32_t GCBaseEntity::GetPushEnumCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBaseEntity", "m_nPushEnumCount");
}

void GCBaseEntity::SetPushEnumCount(int32_t value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_nPushEnumCount", false, value);
}

GCCollisionProperty GCBaseEntity::GetCollision() const {
    GCCollisionProperty value(GetSchemaValuePtr<void>(m_ptr, "CBaseEntity", "m_pCollision"));
    return value;
}

void GCBaseEntity::SetCollision(GCCollisionProperty* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Collision' is not possible.\n");
}

GCBaseEntity GCBaseEntity::GetEffectEntity() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CBaseEntity", "m_hEffectEntity"));
    return value;
}

void GCBaseEntity::SetEffectEntity(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'EffectEntity' is not possible.\n");
}

GCBaseEntity GCBaseEntity::GetOwnerEntity() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CBaseEntity", "m_hOwnerEntity"));
    return value;
}

void GCBaseEntity::SetOwnerEntity(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OwnerEntity' is not possible.\n");
}

uint32_t GCBaseEntity::GetEffects() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CBaseEntity", "m_fEffects");
}

void GCBaseEntity::SetEffects(uint32_t value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_fEffects", false, value);
}

GCBaseEntity GCBaseEntity::GetGroundEntity() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CBaseEntity", "m_hGroundEntity"));
    return value;
}

void GCBaseEntity::SetGroundEntity(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'GroundEntity' is not possible.\n");
}

int32_t GCBaseEntity::GetGroundBodyIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBaseEntity", "m_nGroundBodyIndex");
}

void GCBaseEntity::SetGroundBodyIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_nGroundBodyIndex", false, value);
}

float GCBaseEntity::GetFriction() const {
    return GetSchemaValue<float>(m_ptr, "CBaseEntity", "m_flFriction");
}

void GCBaseEntity::SetFriction(float value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_flFriction", false, value);
}

float GCBaseEntity::GetElasticity() const {
    return GetSchemaValue<float>(m_ptr, "CBaseEntity", "m_flElasticity");
}

void GCBaseEntity::SetElasticity(float value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_flElasticity", false, value);
}

float GCBaseEntity::GetGravityScale() const {
    return GetSchemaValue<float>(m_ptr, "CBaseEntity", "m_flGravityScale");
}

void GCBaseEntity::SetGravityScale(float value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_flGravityScale", false, value);
}

float GCBaseEntity::GetTimeScale() const {
    return GetSchemaValue<float>(m_ptr, "CBaseEntity", "m_flTimeScale");
}

void GCBaseEntity::SetTimeScale(float value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_flTimeScale", false, value);
}

float GCBaseEntity::GetWaterLevel() const {
    return GetSchemaValue<float>(m_ptr, "CBaseEntity", "m_flWaterLevel");
}

void GCBaseEntity::SetWaterLevel(float value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_flWaterLevel", false, value);
}

bool GCBaseEntity::GetAnimatedEveryTick() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseEntity", "m_bAnimatedEveryTick");
}

void GCBaseEntity::SetAnimatedEveryTick(bool value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_bAnimatedEveryTick", false, value);
}

bool GCBaseEntity::GetDisableLowViolence() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseEntity", "m_bDisableLowViolence");
}

void GCBaseEntity::SetDisableLowViolence(bool value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_bDisableLowViolence", false, value);
}

uint8_t GCBaseEntity::GetWaterType() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CBaseEntity", "m_nWaterType");
}

void GCBaseEntity::SetWaterType(uint8_t value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_nWaterType", false, value);
}

int32_t GCBaseEntity::GetEFlags() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBaseEntity", "m_iEFlags");
}

void GCBaseEntity::SetEFlags(int32_t value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_iEFlags", false, value);
}

GCEntityIOOutput GCBaseEntity::GetOnUser1() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseEntity", "m_OnUser1");
}

void GCBaseEntity::SetOnUser1(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_OnUser1", false, value);
}

GCEntityIOOutput GCBaseEntity::GetOnUser2() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseEntity", "m_OnUser2");
}

void GCBaseEntity::SetOnUser2(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_OnUser2", false, value);
}

GCEntityIOOutput GCBaseEntity::GetOnUser3() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseEntity", "m_OnUser3");
}

void GCBaseEntity::SetOnUser3(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_OnUser3", false, value);
}

GCEntityIOOutput GCBaseEntity::GetOnUser4() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseEntity", "m_OnUser4");
}

void GCBaseEntity::SetOnUser4(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_OnUser4", false, value);
}

int32_t GCBaseEntity::GetInitialTeamNum() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBaseEntity", "m_iInitialTeamNum");
}

void GCBaseEntity::SetInitialTeamNum(int32_t value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_iInitialTeamNum", false, value);
}

QAngle GCBaseEntity::GetAngVelocity() const {
    return GetSchemaValue<QAngle>(m_ptr, "CBaseEntity", "m_vecAngVelocity");
}

void GCBaseEntity::SetAngVelocity(QAngle value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_vecAngVelocity", false, value);
}

bool GCBaseEntity::GetNetworkQuantizeOriginAndAngles() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseEntity", "m_bNetworkQuantizeOriginAndAngles");
}

void GCBaseEntity::SetNetworkQuantizeOriginAndAngles(bool value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_bNetworkQuantizeOriginAndAngles", false, value);
}

bool GCBaseEntity::GetLagCompensate() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseEntity", "m_bLagCompensate");
}

void GCBaseEntity::SetLagCompensate(bool value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_bLagCompensate", false, value);
}

float GCBaseEntity::GetOverriddenFriction() const {
    return GetSchemaValue<float>(m_ptr, "CBaseEntity", "m_flOverriddenFriction");
}

void GCBaseEntity::SetOverriddenFriction(float value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_flOverriddenFriction", false, value);
}

GCBaseEntity GCBaseEntity::GetBlocker() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CBaseEntity", "m_pBlocker"));
    return value;
}

void GCBaseEntity::SetBlocker(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Blocker' is not possible.\n");
}

float GCBaseEntity::GetLocalTime() const {
    return GetSchemaValue<float>(m_ptr, "CBaseEntity", "m_flLocalTime");
}

void GCBaseEntity::SetLocalTime(float value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_flLocalTime", false, value);
}

float GCBaseEntity::GetVPhysicsUpdateLocalTime() const {
    return GetSchemaValue<float>(m_ptr, "CBaseEntity", "m_flVPhysicsUpdateLocalTime");
}

void GCBaseEntity::SetVPhysicsUpdateLocalTime(float value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_flVPhysicsUpdateLocalTime", false, value);
}

BloodType GCBaseEntity::GetBloodType() const {
    return GetSchemaValue<BloodType>(m_ptr, "CBaseEntity", "m_nBloodType");
}

void GCBaseEntity::SetBloodType(BloodType value) {
    SetSchemaValue(m_ptr, "CBaseEntity", "m_nBloodType", false, value);
}

std::string GCBaseEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBaseEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCPropDataComponent::GCPropDataComponent(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPropDataComponent::GCPropDataComponent(void *ptr) {
    m_ptr = ptr;
}

float GCPropDataComponent::GetDmgModBullet() const {
    return GetSchemaValue<float>(m_ptr, "CPropDataComponent", "m_flDmgModBullet");
}

void GCPropDataComponent::SetDmgModBullet(float value) {
    SetSchemaValue(m_ptr, "CPropDataComponent", "m_flDmgModBullet", false, value);
}

float GCPropDataComponent::GetDmgModClub() const {
    return GetSchemaValue<float>(m_ptr, "CPropDataComponent", "m_flDmgModClub");
}

void GCPropDataComponent::SetDmgModClub(float value) {
    SetSchemaValue(m_ptr, "CPropDataComponent", "m_flDmgModClub", false, value);
}

float GCPropDataComponent::GetDmgModExplosive() const {
    return GetSchemaValue<float>(m_ptr, "CPropDataComponent", "m_flDmgModExplosive");
}

void GCPropDataComponent::SetDmgModExplosive(float value) {
    SetSchemaValue(m_ptr, "CPropDataComponent", "m_flDmgModExplosive", false, value);
}

float GCPropDataComponent::GetDmgModFire() const {
    return GetSchemaValue<float>(m_ptr, "CPropDataComponent", "m_flDmgModFire");
}

void GCPropDataComponent::SetDmgModFire(float value) {
    SetSchemaValue(m_ptr, "CPropDataComponent", "m_flDmgModFire", false, value);
}

CUtlSymbolLarge GCPropDataComponent::GetPhysicsDamageTableName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPropDataComponent", "m_iszPhysicsDamageTableName");
}

void GCPropDataComponent::SetPhysicsDamageTableName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPropDataComponent", "m_iszPhysicsDamageTableName", false, value);
}

CUtlSymbolLarge GCPropDataComponent::GetBasePropData() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPropDataComponent", "m_iszBasePropData");
}

void GCPropDataComponent::SetBasePropData(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPropDataComponent", "m_iszBasePropData", false, value);
}

int32_t GCPropDataComponent::GetInteractions() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPropDataComponent", "m_nInteractions");
}

void GCPropDataComponent::SetInteractions(int32_t value) {
    SetSchemaValue(m_ptr, "CPropDataComponent", "m_nInteractions", false, value);
}

bool GCPropDataComponent::GetSpawnMotionDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CPropDataComponent", "m_bSpawnMotionDisabled");
}

void GCPropDataComponent::SetSpawnMotionDisabled(bool value) {
    SetSchemaValue(m_ptr, "CPropDataComponent", "m_bSpawnMotionDisabled", false, value);
}

int32_t GCPropDataComponent::GetDisableTakePhysicsDamageSpawnFlag() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPropDataComponent", "m_nDisableTakePhysicsDamageSpawnFlag");
}

void GCPropDataComponent::SetDisableTakePhysicsDamageSpawnFlag(int32_t value) {
    SetSchemaValue(m_ptr, "CPropDataComponent", "m_nDisableTakePhysicsDamageSpawnFlag", false, value);
}

int32_t GCPropDataComponent::GetMotionDisabledSpawnFlag() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPropDataComponent", "m_nMotionDisabledSpawnFlag");
}

void GCPropDataComponent::SetMotionDisabledSpawnFlag(int32_t value) {
    SetSchemaValue(m_ptr, "CPropDataComponent", "m_nMotionDisabledSpawnFlag", false, value);
}

std::string GCPropDataComponent::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPropDataComponent::IsValid() {
    return (m_ptr != nullptr);
}

GCHitboxComponent::GCHitboxComponent(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCHitboxComponent::GCHitboxComponent(void *ptr) {
    m_ptr = ptr;
}

std::vector<uint32_t> GCHitboxComponent::GetDisabledHitGroups() const {
    uint32_t* outValue = GetSchemaValue<uint32_t*>(m_ptr, "CHitboxComponent", "m_bvDisabledHitGroups"); std::vector<uint32_t> ret; for(int i = 0; i < 1; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCHitboxComponent::SetDisabledHitGroups(std::vector<uint32_t> value) {
    uint32_t* outValue = GetSchemaValue<uint32_t*>(m_ptr, "CHitboxComponent", "m_bvDisabledHitGroups"); for(int i = 0; i < 1; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CHitboxComponent", "m_bvDisabledHitGroups", false, outValue);
}

std::string GCHitboxComponent::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCHitboxComponent::IsValid() {
    return (m_ptr != nullptr);
}

GVPhysicsCollisionAttribute_t::GVPhysicsCollisionAttribute_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVPhysicsCollisionAttribute_t::GVPhysicsCollisionAttribute_t(void *ptr) {
    m_ptr = ptr;
}

uint64_t GVPhysicsCollisionAttribute_t::GetInteractsAs() const {
    return GetSchemaValue<uint64_t>(m_ptr, "VPhysicsCollisionAttribute_t", "m_nInteractsAs");
}

void GVPhysicsCollisionAttribute_t::SetInteractsAs(uint64_t value) {
    SetSchemaValue(m_ptr, "VPhysicsCollisionAttribute_t", "m_nInteractsAs", true, value);
}

uint64_t GVPhysicsCollisionAttribute_t::GetInteractsWith() const {
    return GetSchemaValue<uint64_t>(m_ptr, "VPhysicsCollisionAttribute_t", "m_nInteractsWith");
}

void GVPhysicsCollisionAttribute_t::SetInteractsWith(uint64_t value) {
    SetSchemaValue(m_ptr, "VPhysicsCollisionAttribute_t", "m_nInteractsWith", true, value);
}

uint64_t GVPhysicsCollisionAttribute_t::GetInteractsExclude() const {
    return GetSchemaValue<uint64_t>(m_ptr, "VPhysicsCollisionAttribute_t", "m_nInteractsExclude");
}

void GVPhysicsCollisionAttribute_t::SetInteractsExclude(uint64_t value) {
    SetSchemaValue(m_ptr, "VPhysicsCollisionAttribute_t", "m_nInteractsExclude", true, value);
}

uint32_t GVPhysicsCollisionAttribute_t::GetEntityId() const {
    return GetSchemaValue<uint32_t>(m_ptr, "VPhysicsCollisionAttribute_t", "m_nEntityId");
}

void GVPhysicsCollisionAttribute_t::SetEntityId(uint32_t value) {
    SetSchemaValue(m_ptr, "VPhysicsCollisionAttribute_t", "m_nEntityId", true, value);
}

uint32_t GVPhysicsCollisionAttribute_t::GetOwnerId() const {
    return GetSchemaValue<uint32_t>(m_ptr, "VPhysicsCollisionAttribute_t", "m_nOwnerId");
}

void GVPhysicsCollisionAttribute_t::SetOwnerId(uint32_t value) {
    SetSchemaValue(m_ptr, "VPhysicsCollisionAttribute_t", "m_nOwnerId", true, value);
}

uint16_t GVPhysicsCollisionAttribute_t::GetHierarchyId() const {
    return GetSchemaValue<uint16_t>(m_ptr, "VPhysicsCollisionAttribute_t", "m_nHierarchyId");
}

void GVPhysicsCollisionAttribute_t::SetHierarchyId(uint16_t value) {
    SetSchemaValue(m_ptr, "VPhysicsCollisionAttribute_t", "m_nHierarchyId", true, value);
}

uint8_t GVPhysicsCollisionAttribute_t::GetCollisionGroup() const {
    return GetSchemaValue<uint8_t>(m_ptr, "VPhysicsCollisionAttribute_t", "m_nCollisionGroup");
}

void GVPhysicsCollisionAttribute_t::SetCollisionGroup(uint8_t value) {
    SetSchemaValue(m_ptr, "VPhysicsCollisionAttribute_t", "m_nCollisionGroup", true, value);
}

uint8_t GVPhysicsCollisionAttribute_t::GetCollisionFunctionMask() const {
    return GetSchemaValue<uint8_t>(m_ptr, "VPhysicsCollisionAttribute_t", "m_nCollisionFunctionMask");
}

void GVPhysicsCollisionAttribute_t::SetCollisionFunctionMask(uint8_t value) {
    SetSchemaValue(m_ptr, "VPhysicsCollisionAttribute_t", "m_nCollisionFunctionMask", true, value);
}

std::string GVPhysicsCollisionAttribute_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVPhysicsCollisionAttribute_t::IsValid() {
    return (m_ptr != nullptr);
}

GCCollisionProperty::GCCollisionProperty(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCollisionProperty::GCCollisionProperty(void *ptr) {
    m_ptr = ptr;
}

GVPhysicsCollisionAttribute_t GCCollisionProperty::GetCollisionAttribute() const {
    return GetSchemaValue<GVPhysicsCollisionAttribute_t>(m_ptr, "CCollisionProperty", "m_collisionAttribute");
}

void GCCollisionProperty::SetCollisionAttribute(GVPhysicsCollisionAttribute_t value) {
    SetSchemaValue(m_ptr, "CCollisionProperty", "m_collisionAttribute", false, value);
}

Vector GCCollisionProperty::GetMins() const {
    return GetSchemaValue<Vector>(m_ptr, "CCollisionProperty", "m_vecMins");
}

void GCCollisionProperty::SetMins(Vector value) {
    SetSchemaValue(m_ptr, "CCollisionProperty", "m_vecMins", false, value);
}

Vector GCCollisionProperty::GetMaxs() const {
    return GetSchemaValue<Vector>(m_ptr, "CCollisionProperty", "m_vecMaxs");
}

void GCCollisionProperty::SetMaxs(Vector value) {
    SetSchemaValue(m_ptr, "CCollisionProperty", "m_vecMaxs", false, value);
}

uint8_t GCCollisionProperty::GetSolidFlags() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CCollisionProperty", "m_usSolidFlags");
}

void GCCollisionProperty::SetSolidFlags(uint8_t value) {
    SetSchemaValue(m_ptr, "CCollisionProperty", "m_usSolidFlags", false, value);
}

SolidType_t GCCollisionProperty::GetSolidType() const {
    return GetSchemaValue<SolidType_t>(m_ptr, "CCollisionProperty", "m_nSolidType");
}

void GCCollisionProperty::SetSolidType(SolidType_t value) {
    SetSchemaValue(m_ptr, "CCollisionProperty", "m_nSolidType", false, value);
}

uint8_t GCCollisionProperty::GetTriggerBloat() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CCollisionProperty", "m_triggerBloat");
}

void GCCollisionProperty::SetTriggerBloat(uint8_t value) {
    SetSchemaValue(m_ptr, "CCollisionProperty", "m_triggerBloat", false, value);
}

SurroundingBoundsType_t GCCollisionProperty::GetSurroundType() const {
    return GetSchemaValue<SurroundingBoundsType_t>(m_ptr, "CCollisionProperty", "m_nSurroundType");
}

void GCCollisionProperty::SetSurroundType(SurroundingBoundsType_t value) {
    SetSchemaValue(m_ptr, "CCollisionProperty", "m_nSurroundType", false, value);
}

uint8_t GCCollisionProperty::GetCollisionGroup() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CCollisionProperty", "m_CollisionGroup");
}

void GCCollisionProperty::SetCollisionGroup(uint8_t value) {
    SetSchemaValue(m_ptr, "CCollisionProperty", "m_CollisionGroup", false, value);
}

uint8_t GCCollisionProperty::GetEnablePhysics() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CCollisionProperty", "m_nEnablePhysics");
}

void GCCollisionProperty::SetEnablePhysics(uint8_t value) {
    SetSchemaValue(m_ptr, "CCollisionProperty", "m_nEnablePhysics", false, value);
}

float GCCollisionProperty::GetBoundingRadius() const {
    return GetSchemaValue<float>(m_ptr, "CCollisionProperty", "m_flBoundingRadius");
}

void GCCollisionProperty::SetBoundingRadius(float value) {
    SetSchemaValue(m_ptr, "CCollisionProperty", "m_flBoundingRadius", false, value);
}

Vector GCCollisionProperty::GetSpecifiedSurroundingMins() const {
    return GetSchemaValue<Vector>(m_ptr, "CCollisionProperty", "m_vecSpecifiedSurroundingMins");
}

void GCCollisionProperty::SetSpecifiedSurroundingMins(Vector value) {
    SetSchemaValue(m_ptr, "CCollisionProperty", "m_vecSpecifiedSurroundingMins", false, value);
}

Vector GCCollisionProperty::GetSpecifiedSurroundingMaxs() const {
    return GetSchemaValue<Vector>(m_ptr, "CCollisionProperty", "m_vecSpecifiedSurroundingMaxs");
}

void GCCollisionProperty::SetSpecifiedSurroundingMaxs(Vector value) {
    SetSchemaValue(m_ptr, "CCollisionProperty", "m_vecSpecifiedSurroundingMaxs", false, value);
}

Vector GCCollisionProperty::GetSurroundingMaxs() const {
    return GetSchemaValue<Vector>(m_ptr, "CCollisionProperty", "m_vecSurroundingMaxs");
}

void GCCollisionProperty::SetSurroundingMaxs(Vector value) {
    SetSchemaValue(m_ptr, "CCollisionProperty", "m_vecSurroundingMaxs", false, value);
}

Vector GCCollisionProperty::GetSurroundingMins() const {
    return GetSchemaValue<Vector>(m_ptr, "CCollisionProperty", "m_vecSurroundingMins");
}

void GCCollisionProperty::SetSurroundingMins(Vector value) {
    SetSchemaValue(m_ptr, "CCollisionProperty", "m_vecSurroundingMins", false, value);
}

Vector GCCollisionProperty::GetCapsuleCenter1() const {
    return GetSchemaValue<Vector>(m_ptr, "CCollisionProperty", "m_vCapsuleCenter1");
}

void GCCollisionProperty::SetCapsuleCenter1(Vector value) {
    SetSchemaValue(m_ptr, "CCollisionProperty", "m_vCapsuleCenter1", false, value);
}

Vector GCCollisionProperty::GetCapsuleCenter2() const {
    return GetSchemaValue<Vector>(m_ptr, "CCollisionProperty", "m_vCapsuleCenter2");
}

void GCCollisionProperty::SetCapsuleCenter2(Vector value) {
    SetSchemaValue(m_ptr, "CCollisionProperty", "m_vCapsuleCenter2", false, value);
}

float GCCollisionProperty::GetCapsuleRadius() const {
    return GetSchemaValue<float>(m_ptr, "CCollisionProperty", "m_flCapsuleRadius");
}

void GCCollisionProperty::SetCapsuleRadius(float value) {
    SetSchemaValue(m_ptr, "CCollisionProperty", "m_flCapsuleRadius", false, value);
}

std::string GCCollisionProperty::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCollisionProperty::IsValid() {
    return (m_ptr != nullptr);
}

GCBaseModelEntity::GCBaseModelEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBaseModelEntity::GCBaseModelEntity(void *ptr) {
    m_ptr = ptr;
}

GCRenderComponent GCBaseModelEntity::GetCRenderComponent() const {
    GCRenderComponent value(GetSchemaValuePtr<void>(m_ptr, "CBaseModelEntity", "m_CRenderComponent"));
    return value;
}

void GCBaseModelEntity::SetCRenderComponent(GCRenderComponent* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'CRenderComponent' is not possible.\n");
}

GCHitboxComponent GCBaseModelEntity::GetCHitboxComponent() const {
    return GetSchemaValue<GCHitboxComponent>(m_ptr, "CBaseModelEntity", "m_CHitboxComponent");
}

void GCBaseModelEntity::SetCHitboxComponent(GCHitboxComponent value) {
    SetSchemaValue(m_ptr, "CBaseModelEntity", "m_CHitboxComponent", false, value);
}

GCEntityIOOutput GCBaseModelEntity::GetOnIgnite() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseModelEntity", "m_OnIgnite");
}

void GCBaseModelEntity::SetOnIgnite(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseModelEntity", "m_OnIgnite", false, value);
}

RenderMode_t GCBaseModelEntity::GetRenderMode() const {
    return GetSchemaValue<RenderMode_t>(m_ptr, "CBaseModelEntity", "m_nRenderMode");
}

void GCBaseModelEntity::SetRenderMode(RenderMode_t value) {
    SetSchemaValue(m_ptr, "CBaseModelEntity", "m_nRenderMode", false, value);
}

RenderFx_t GCBaseModelEntity::GetRenderFX() const {
    return GetSchemaValue<RenderFx_t>(m_ptr, "CBaseModelEntity", "m_nRenderFX");
}

void GCBaseModelEntity::SetRenderFX(RenderFx_t value) {
    SetSchemaValue(m_ptr, "CBaseModelEntity", "m_nRenderFX", false, value);
}

bool GCBaseModelEntity::GetAllowFadeInView() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseModelEntity", "m_bAllowFadeInView");
}

void GCBaseModelEntity::SetAllowFadeInView(bool value) {
    SetSchemaValue(m_ptr, "CBaseModelEntity", "m_bAllowFadeInView", false, value);
}

Color GCBaseModelEntity::GetRender() const {
    return GetSchemaValue<Color>(m_ptr, "CBaseModelEntity", "m_clrRender");
}

void GCBaseModelEntity::SetRender(Color value) {
    SetSchemaValue(m_ptr, "CBaseModelEntity", "m_clrRender", false, value);
}

std::vector<GEntityRenderAttribute_t> GCBaseModelEntity::GetRenderAttributes() const {
    CUtlVector<GEntityRenderAttribute_t>* vec = GetSchemaValue<CUtlVector<GEntityRenderAttribute_t>*>(m_ptr, "CBaseModelEntity", "m_vecRenderAttributes"); std::vector<GEntityRenderAttribute_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCBaseModelEntity::SetRenderAttributes(std::vector<GEntityRenderAttribute_t> value) {
    SetSchemaValueCUtlVector<GEntityRenderAttribute_t>(m_ptr, "CBaseModelEntity", "m_vecRenderAttributes", false, value);
}

bool GCBaseModelEntity::GetRenderToCubemaps() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseModelEntity", "m_bRenderToCubemaps");
}

void GCBaseModelEntity::SetRenderToCubemaps(bool value) {
    SetSchemaValue(m_ptr, "CBaseModelEntity", "m_bRenderToCubemaps", false, value);
}

GCCollisionProperty GCBaseModelEntity::GetCollision() const {
    return GetSchemaValue<GCCollisionProperty>(m_ptr, "CBaseModelEntity", "m_Collision");
}

void GCBaseModelEntity::SetCollision(GCCollisionProperty value) {
    SetSchemaValue(m_ptr, "CBaseModelEntity", "m_Collision", false, value);
}

GCGlowProperty GCBaseModelEntity::GetGlow() const {
    return GetSchemaValue<GCGlowProperty>(m_ptr, "CBaseModelEntity", "m_Glow");
}

void GCBaseModelEntity::SetGlow(GCGlowProperty value) {
    SetSchemaValue(m_ptr, "CBaseModelEntity", "m_Glow", false, value);
}

float GCBaseModelEntity::GetGlowBackfaceMult() const {
    return GetSchemaValue<float>(m_ptr, "CBaseModelEntity", "m_flGlowBackfaceMult");
}

void GCBaseModelEntity::SetGlowBackfaceMult(float value) {
    SetSchemaValue(m_ptr, "CBaseModelEntity", "m_flGlowBackfaceMult", false, value);
}

float GCBaseModelEntity::GetFadeMinDist() const {
    return GetSchemaValue<float>(m_ptr, "CBaseModelEntity", "m_fadeMinDist");
}

void GCBaseModelEntity::SetFadeMinDist(float value) {
    SetSchemaValue(m_ptr, "CBaseModelEntity", "m_fadeMinDist", false, value);
}

float GCBaseModelEntity::GetFadeMaxDist() const {
    return GetSchemaValue<float>(m_ptr, "CBaseModelEntity", "m_fadeMaxDist");
}

void GCBaseModelEntity::SetFadeMaxDist(float value) {
    SetSchemaValue(m_ptr, "CBaseModelEntity", "m_fadeMaxDist", false, value);
}

float GCBaseModelEntity::GetFadeScale() const {
    return GetSchemaValue<float>(m_ptr, "CBaseModelEntity", "m_flFadeScale");
}

void GCBaseModelEntity::SetFadeScale(float value) {
    SetSchemaValue(m_ptr, "CBaseModelEntity", "m_flFadeScale", false, value);
}

float GCBaseModelEntity::GetShadowStrength() const {
    return GetSchemaValue<float>(m_ptr, "CBaseModelEntity", "m_flShadowStrength");
}

void GCBaseModelEntity::SetShadowStrength(float value) {
    SetSchemaValue(m_ptr, "CBaseModelEntity", "m_flShadowStrength", false, value);
}

uint8_t GCBaseModelEntity::GetObjectCulling() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CBaseModelEntity", "m_nObjectCulling");
}

void GCBaseModelEntity::SetObjectCulling(uint8_t value) {
    SetSchemaValue(m_ptr, "CBaseModelEntity", "m_nObjectCulling", false, value);
}

int32_t GCBaseModelEntity::GetAddDecal() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBaseModelEntity", "m_nAddDecal");
}

void GCBaseModelEntity::SetAddDecal(int32_t value) {
    SetSchemaValue(m_ptr, "CBaseModelEntity", "m_nAddDecal", false, value);
}

Vector GCBaseModelEntity::GetDecalPosition() const {
    return GetSchemaValue<Vector>(m_ptr, "CBaseModelEntity", "m_vDecalPosition");
}

void GCBaseModelEntity::SetDecalPosition(Vector value) {
    SetSchemaValue(m_ptr, "CBaseModelEntity", "m_vDecalPosition", false, value);
}

Vector GCBaseModelEntity::GetDecalForwardAxis() const {
    return GetSchemaValue<Vector>(m_ptr, "CBaseModelEntity", "m_vDecalForwardAxis");
}

void GCBaseModelEntity::SetDecalForwardAxis(Vector value) {
    SetSchemaValue(m_ptr, "CBaseModelEntity", "m_vDecalForwardAxis", false, value);
}

float GCBaseModelEntity::GetDecalHealBloodRate() const {
    return GetSchemaValue<float>(m_ptr, "CBaseModelEntity", "m_flDecalHealBloodRate");
}

void GCBaseModelEntity::SetDecalHealBloodRate(float value) {
    SetSchemaValue(m_ptr, "CBaseModelEntity", "m_flDecalHealBloodRate", false, value);
}

float GCBaseModelEntity::GetDecalHealHeightRate() const {
    return GetSchemaValue<float>(m_ptr, "CBaseModelEntity", "m_flDecalHealHeightRate");
}

void GCBaseModelEntity::SetDecalHealHeightRate(float value) {
    SetSchemaValue(m_ptr, "CBaseModelEntity", "m_flDecalHealHeightRate", false, value);
}

std::vector<GCBaseModelEntity*> GCBaseModelEntity::GetConfigEntitiesToPropagateMaterialDecalsTo() const {
    CUtlVector<GCBaseModelEntity*>* vec = GetSchemaValue<CUtlVector<GCBaseModelEntity*>*>(m_ptr, "CBaseModelEntity", "m_ConfigEntitiesToPropagateMaterialDecalsTo"); std::vector<GCBaseModelEntity*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCBaseModelEntity::SetConfigEntitiesToPropagateMaterialDecalsTo(std::vector<GCBaseModelEntity*> value) {
    SetSchemaValueCUtlVector<GCBaseModelEntity*>(m_ptr, "CBaseModelEntity", "m_ConfigEntitiesToPropagateMaterialDecalsTo", false, value);
}

GCNetworkViewOffsetVector GCBaseModelEntity::GetViewOffset() const {
    return GetSchemaValue<GCNetworkViewOffsetVector>(m_ptr, "CBaseModelEntity", "m_vecViewOffset");
}

void GCBaseModelEntity::SetViewOffset(GCNetworkViewOffsetVector value) {
    SetSchemaValue(m_ptr, "CBaseModelEntity", "m_vecViewOffset", false, value);
}

std::string GCBaseModelEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBaseModelEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCServerOnlyEntity::GCServerOnlyEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCServerOnlyEntity::GCServerOnlyEntity(void *ptr) {
    m_ptr = ptr;
}

std::string GCServerOnlyEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCServerOnlyEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCBaseToggle::GCBaseToggle(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBaseToggle::GCBaseToggle(void *ptr) {
    m_ptr = ptr;
}

TOGGLE_STATE GCBaseToggle::GetToggle_state() const {
    return GetSchemaValue<TOGGLE_STATE>(m_ptr, "CBaseToggle", "m_toggle_state");
}

void GCBaseToggle::SetToggle_state(TOGGLE_STATE value) {
    SetSchemaValue(m_ptr, "CBaseToggle", "m_toggle_state", false, value);
}

float GCBaseToggle::GetMoveDistance() const {
    return GetSchemaValue<float>(m_ptr, "CBaseToggle", "m_flMoveDistance");
}

void GCBaseToggle::SetMoveDistance(float value) {
    SetSchemaValue(m_ptr, "CBaseToggle", "m_flMoveDistance", false, value);
}

float GCBaseToggle::GetWait() const {
    return GetSchemaValue<float>(m_ptr, "CBaseToggle", "m_flWait");
}

void GCBaseToggle::SetWait(float value) {
    SetSchemaValue(m_ptr, "CBaseToggle", "m_flWait", false, value);
}

float GCBaseToggle::GetLip() const {
    return GetSchemaValue<float>(m_ptr, "CBaseToggle", "m_flLip");
}

void GCBaseToggle::SetLip(float value) {
    SetSchemaValue(m_ptr, "CBaseToggle", "m_flLip", false, value);
}

bool GCBaseToggle::GetAlwaysFireBlockedOutputs() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseToggle", "m_bAlwaysFireBlockedOutputs");
}

void GCBaseToggle::SetAlwaysFireBlockedOutputs(bool value) {
    SetSchemaValue(m_ptr, "CBaseToggle", "m_bAlwaysFireBlockedOutputs", false, value);
}

Vector GCBaseToggle::GetPosition1() const {
    return GetSchemaValue<Vector>(m_ptr, "CBaseToggle", "m_vecPosition1");
}

void GCBaseToggle::SetPosition1(Vector value) {
    SetSchemaValue(m_ptr, "CBaseToggle", "m_vecPosition1", false, value);
}

Vector GCBaseToggle::GetPosition2() const {
    return GetSchemaValue<Vector>(m_ptr, "CBaseToggle", "m_vecPosition2");
}

void GCBaseToggle::SetPosition2(Vector value) {
    SetSchemaValue(m_ptr, "CBaseToggle", "m_vecPosition2", false, value);
}

QAngle GCBaseToggle::GetMoveAng() const {
    return GetSchemaValue<QAngle>(m_ptr, "CBaseToggle", "m_vecMoveAng");
}

void GCBaseToggle::SetMoveAng(QAngle value) {
    SetSchemaValue(m_ptr, "CBaseToggle", "m_vecMoveAng", false, value);
}

QAngle GCBaseToggle::GetAngle1() const {
    return GetSchemaValue<QAngle>(m_ptr, "CBaseToggle", "m_vecAngle1");
}

void GCBaseToggle::SetAngle1(QAngle value) {
    SetSchemaValue(m_ptr, "CBaseToggle", "m_vecAngle1", false, value);
}

QAngle GCBaseToggle::GetAngle2() const {
    return GetSchemaValue<QAngle>(m_ptr, "CBaseToggle", "m_vecAngle2");
}

void GCBaseToggle::SetAngle2(QAngle value) {
    SetSchemaValue(m_ptr, "CBaseToggle", "m_vecAngle2", false, value);
}

float GCBaseToggle::GetHeight() const {
    return GetSchemaValue<float>(m_ptr, "CBaseToggle", "m_flHeight");
}

void GCBaseToggle::SetHeight(float value) {
    SetSchemaValue(m_ptr, "CBaseToggle", "m_flHeight", false, value);
}

GCBaseEntity GCBaseToggle::GetActivator() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CBaseToggle", "m_hActivator"));
    return value;
}

void GCBaseToggle::SetActivator(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Activator' is not possible.\n");
}

Vector GCBaseToggle::GetFinalDest() const {
    return GetSchemaValue<Vector>(m_ptr, "CBaseToggle", "m_vecFinalDest");
}

void GCBaseToggle::SetFinalDest(Vector value) {
    SetSchemaValue(m_ptr, "CBaseToggle", "m_vecFinalDest", false, value);
}

QAngle GCBaseToggle::GetFinalAngle() const {
    return GetSchemaValue<QAngle>(m_ptr, "CBaseToggle", "m_vecFinalAngle");
}

void GCBaseToggle::SetFinalAngle(QAngle value) {
    SetSchemaValue(m_ptr, "CBaseToggle", "m_vecFinalAngle", false, value);
}

int32_t GCBaseToggle::GetMovementType() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBaseToggle", "m_movementType");
}

void GCBaseToggle::SetMovementType(int32_t value) {
    SetSchemaValue(m_ptr, "CBaseToggle", "m_movementType", false, value);
}

CUtlSymbolLarge GCBaseToggle::GetMaster() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBaseToggle", "m_sMaster");
}

void GCBaseToggle::SetMaster(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBaseToggle", "m_sMaster", false, value);
}

std::string GCBaseToggle::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBaseToggle::IsValid() {
    return (m_ptr != nullptr);
}

GCBaseTrigger::GCBaseTrigger(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBaseTrigger::GCBaseTrigger(void *ptr) {
    m_ptr = ptr;
}

bool GCBaseTrigger::GetDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseTrigger", "m_bDisabled");
}

void GCBaseTrigger::SetDisabled(bool value) {
    SetSchemaValue(m_ptr, "CBaseTrigger", "m_bDisabled", false, value);
}

CUtlSymbolLarge GCBaseTrigger::GetFilterName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBaseTrigger", "m_iFilterName");
}

void GCBaseTrigger::SetFilterName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBaseTrigger", "m_iFilterName", false, value);
}

GCBaseFilter GCBaseTrigger::GetFilter() const {
    GCBaseFilter value(GetSchemaValuePtr<void>(m_ptr, "CBaseTrigger", "m_hFilter"));
    return value;
}

void GCBaseTrigger::SetFilter(GCBaseFilter* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Filter' is not possible.\n");
}

GCEntityIOOutput GCBaseTrigger::GetOnStartTouch() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseTrigger", "m_OnStartTouch");
}

void GCBaseTrigger::SetOnStartTouch(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseTrigger", "m_OnStartTouch", false, value);
}

GCEntityIOOutput GCBaseTrigger::GetOnStartTouchAll() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseTrigger", "m_OnStartTouchAll");
}

void GCBaseTrigger::SetOnStartTouchAll(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseTrigger", "m_OnStartTouchAll", false, value);
}

GCEntityIOOutput GCBaseTrigger::GetOnEndTouch() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseTrigger", "m_OnEndTouch");
}

void GCBaseTrigger::SetOnEndTouch(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseTrigger", "m_OnEndTouch", false, value);
}

GCEntityIOOutput GCBaseTrigger::GetOnEndTouchAll() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseTrigger", "m_OnEndTouchAll");
}

void GCBaseTrigger::SetOnEndTouchAll(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseTrigger", "m_OnEndTouchAll", false, value);
}

GCEntityIOOutput GCBaseTrigger::GetOnTouching() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseTrigger", "m_OnTouching");
}

void GCBaseTrigger::SetOnTouching(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseTrigger", "m_OnTouching", false, value);
}

GCEntityIOOutput GCBaseTrigger::GetOnTouchingEachEntity() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseTrigger", "m_OnTouchingEachEntity");
}

void GCBaseTrigger::SetOnTouchingEachEntity(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseTrigger", "m_OnTouchingEachEntity", false, value);
}

GCEntityIOOutput GCBaseTrigger::GetOnNotTouching() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseTrigger", "m_OnNotTouching");
}

void GCBaseTrigger::SetOnNotTouching(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseTrigger", "m_OnNotTouching", false, value);
}

bool GCBaseTrigger::GetClientSidePredicted() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseTrigger", "m_bClientSidePredicted");
}

void GCBaseTrigger::SetClientSidePredicted(bool value) {
    SetSchemaValue(m_ptr, "CBaseTrigger", "m_bClientSidePredicted", false, value);
}

std::string GCBaseTrigger::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBaseTrigger::IsValid() {
    return (m_ptr != nullptr);
}

GCTriggerProximity::GCTriggerProximity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTriggerProximity::GCTriggerProximity(void *ptr) {
    m_ptr = ptr;
}

GCBaseEntity GCTriggerProximity::GetMeasureTarget() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CTriggerProximity", "m_hMeasureTarget"));
    return value;
}

void GCTriggerProximity::SetMeasureTarget(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'MeasureTarget' is not possible.\n");
}

CUtlSymbolLarge GCTriggerProximity::GetMeasureTarget1() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CTriggerProximity", "m_iszMeasureTarget");
}

void GCTriggerProximity::SetMeasureTarget1(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CTriggerProximity", "m_iszMeasureTarget", false, value);
}

float GCTriggerProximity::GetRadius() const {
    return GetSchemaValue<float>(m_ptr, "CTriggerProximity", "m_fRadius");
}

void GCTriggerProximity::SetRadius(float value) {
    SetSchemaValue(m_ptr, "CTriggerProximity", "m_fRadius", false, value);
}

int32_t GCTriggerProximity::GetTouchers() const {
    return GetSchemaValue<int32_t>(m_ptr, "CTriggerProximity", "m_nTouchers");
}

void GCTriggerProximity::SetTouchers(int32_t value) {
    SetSchemaValue(m_ptr, "CTriggerProximity", "m_nTouchers", false, value);
}

std::string GCTriggerProximity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTriggerProximity::IsValid() {
    return (m_ptr != nullptr);
}

GCLogicalEntity::GCLogicalEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCLogicalEntity::GCLogicalEntity(void *ptr) {
    m_ptr = ptr;
}

std::string GCLogicalEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCLogicalEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCTriggerPush::GCTriggerPush(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTriggerPush::GCTriggerPush(void *ptr) {
    m_ptr = ptr;
}

QAngle GCTriggerPush::GetPushEntitySpace() const {
    return GetSchemaValue<QAngle>(m_ptr, "CTriggerPush", "m_angPushEntitySpace");
}

void GCTriggerPush::SetPushEntitySpace(QAngle value) {
    SetSchemaValue(m_ptr, "CTriggerPush", "m_angPushEntitySpace", false, value);
}

Vector GCTriggerPush::GetPushDirEntitySpace() const {
    return GetSchemaValue<Vector>(m_ptr, "CTriggerPush", "m_vecPushDirEntitySpace");
}

void GCTriggerPush::SetPushDirEntitySpace(Vector value) {
    SetSchemaValue(m_ptr, "CTriggerPush", "m_vecPushDirEntitySpace", false, value);
}

bool GCTriggerPush::GetTriggerOnStartTouch() const {
    return GetSchemaValue<bool>(m_ptr, "CTriggerPush", "m_bTriggerOnStartTouch");
}

void GCTriggerPush::SetTriggerOnStartTouch(bool value) {
    SetSchemaValue(m_ptr, "CTriggerPush", "m_bTriggerOnStartTouch", false, value);
}

bool GCTriggerPush::GetUsePathSimple() const {
    return GetSchemaValue<bool>(m_ptr, "CTriggerPush", "m_bUsePathSimple");
}

void GCTriggerPush::SetUsePathSimple(bool value) {
    SetSchemaValue(m_ptr, "CTriggerPush", "m_bUsePathSimple", false, value);
}

CUtlSymbolLarge GCTriggerPush::GetPathSimpleName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CTriggerPush", "m_iszPathSimpleName");
}

void GCTriggerPush::SetPathSimpleName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CTriggerPush", "m_iszPathSimpleName", false, value);
}

GCPathSimple GCTriggerPush::GetPathSimple() const {
    GCPathSimple value(GetSchemaValuePtr<void>(m_ptr, "CTriggerPush", "m_PathSimple"));
    return value;
}

void GCTriggerPush::SetPathSimple(GCPathSimple* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'PathSimple' is not possible.\n");
}

uint32_t GCTriggerPush::GetSplinePushType() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CTriggerPush", "m_splinePushType");
}

void GCTriggerPush::SetSplinePushType(uint32_t value) {
    SetSchemaValue(m_ptr, "CTriggerPush", "m_splinePushType", false, value);
}

std::string GCTriggerPush::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTriggerPush::IsValid() {
    return (m_ptr != nullptr);
}

GCTriggerMultiple::GCTriggerMultiple(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTriggerMultiple::GCTriggerMultiple(void *ptr) {
    m_ptr = ptr;
}

GCEntityIOOutput GCTriggerMultiple::GetOnTrigger() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CTriggerMultiple", "m_OnTrigger");
}

void GCTriggerMultiple::SetOnTrigger(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CTriggerMultiple", "m_OnTrigger", false, value);
}

std::string GCTriggerMultiple::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTriggerMultiple::IsValid() {
    return (m_ptr != nullptr);
}

GCBasePlatTrain::GCBasePlatTrain(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBasePlatTrain::GCBasePlatTrain(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCBasePlatTrain::GetNoiseMoving() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBasePlatTrain", "m_NoiseMoving");
}

void GCBasePlatTrain::SetNoiseMoving(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBasePlatTrain", "m_NoiseMoving", false, value);
}

CUtlSymbolLarge GCBasePlatTrain::GetNoiseArrived() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBasePlatTrain", "m_NoiseArrived");
}

void GCBasePlatTrain::SetNoiseArrived(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBasePlatTrain", "m_NoiseArrived", false, value);
}

float GCBasePlatTrain::GetVolume() const {
    return GetSchemaValue<float>(m_ptr, "CBasePlatTrain", "m_volume");
}

void GCBasePlatTrain::SetVolume(float value) {
    SetSchemaValue(m_ptr, "CBasePlatTrain", "m_volume", false, value);
}

float GCBasePlatTrain::GetTWidth() const {
    return GetSchemaValue<float>(m_ptr, "CBasePlatTrain", "m_flTWidth");
}

void GCBasePlatTrain::SetTWidth(float value) {
    SetSchemaValue(m_ptr, "CBasePlatTrain", "m_flTWidth", false, value);
}

float GCBasePlatTrain::GetTLength() const {
    return GetSchemaValue<float>(m_ptr, "CBasePlatTrain", "m_flTLength");
}

void GCBasePlatTrain::SetTLength(float value) {
    SetSchemaValue(m_ptr, "CBasePlatTrain", "m_flTLength", false, value);
}

std::string GCBasePlatTrain::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBasePlatTrain::IsValid() {
    return (m_ptr != nullptr);
}

GCTonemapTrigger::GCTonemapTrigger(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTonemapTrigger::GCTonemapTrigger(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCTonemapTrigger::GetTonemapControllerName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CTonemapTrigger", "m_tonemapControllerName");
}

void GCTonemapTrigger::SetTonemapControllerName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CTonemapTrigger", "m_tonemapControllerName", false, value);
}

GCEntityInstance GCTonemapTrigger::GetTonemapController() const {
    GCEntityInstance value(GetSchemaValuePtr<void>(m_ptr, "CTonemapTrigger", "m_hTonemapController"));
    return value;
}

void GCTonemapTrigger::SetTonemapController(GCEntityInstance* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'TonemapController' is not possible.\n");
}

std::string GCTonemapTrigger::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTonemapTrigger::IsValid() {
    return (m_ptr != nullptr);
}

GCEconItemAttribute::GCEconItemAttribute(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEconItemAttribute::GCEconItemAttribute(void *ptr) {
    m_ptr = ptr;
}

uint16_t GCEconItemAttribute::GetAttributeDefinitionIndex() const {
    return GetSchemaValue<uint16_t>(m_ptr, "CEconItemAttribute", "m_iAttributeDefinitionIndex");
}

void GCEconItemAttribute::SetAttributeDefinitionIndex(uint16_t value) {
    SetSchemaValue(m_ptr, "CEconItemAttribute", "m_iAttributeDefinitionIndex", false, value);
}

float GCEconItemAttribute::GetValue() const {
    return GetSchemaValue<float>(m_ptr, "CEconItemAttribute", "m_flValue");
}

void GCEconItemAttribute::SetValue(float value) {
    SetSchemaValue(m_ptr, "CEconItemAttribute", "m_flValue", false, value);
}

float GCEconItemAttribute::GetInitialValue() const {
    return GetSchemaValue<float>(m_ptr, "CEconItemAttribute", "m_flInitialValue");
}

void GCEconItemAttribute::SetInitialValue(float value) {
    SetSchemaValue(m_ptr, "CEconItemAttribute", "m_flInitialValue", false, value);
}

int32_t GCEconItemAttribute::GetRefundableCurrency() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEconItemAttribute", "m_nRefundableCurrency");
}

void GCEconItemAttribute::SetRefundableCurrency(int32_t value) {
    SetSchemaValue(m_ptr, "CEconItemAttribute", "m_nRefundableCurrency", false, value);
}

bool GCEconItemAttribute::GetSetBonus() const {
    return GetSchemaValue<bool>(m_ptr, "CEconItemAttribute", "m_bSetBonus");
}

void GCEconItemAttribute::SetSetBonus(bool value) {
    SetSchemaValue(m_ptr, "CEconItemAttribute", "m_bSetBonus", false, value);
}

std::string GCEconItemAttribute::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEconItemAttribute::IsValid() {
    return (m_ptr != nullptr);
}

GCIronSightController::GCIronSightController(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCIronSightController::GCIronSightController(void *ptr) {
    m_ptr = ptr;
}

bool GCIronSightController::GetIronSightAvailable() const {
    return GetSchemaValue<bool>(m_ptr, "CIronSightController", "m_bIronSightAvailable");
}

void GCIronSightController::SetIronSightAvailable(bool value) {
    SetSchemaValue(m_ptr, "CIronSightController", "m_bIronSightAvailable", false, value);
}

float GCIronSightController::GetIronSightAmount() const {
    return GetSchemaValue<float>(m_ptr, "CIronSightController", "m_flIronSightAmount");
}

void GCIronSightController::SetIronSightAmount(float value) {
    SetSchemaValue(m_ptr, "CIronSightController", "m_flIronSightAmount", false, value);
}

float GCIronSightController::GetIronSightAmountGained() const {
    return GetSchemaValue<float>(m_ptr, "CIronSightController", "m_flIronSightAmountGained");
}

void GCIronSightController::SetIronSightAmountGained(float value) {
    SetSchemaValue(m_ptr, "CIronSightController", "m_flIronSightAmountGained", false, value);
}

float GCIronSightController::GetIronSightAmountBiased() const {
    return GetSchemaValue<float>(m_ptr, "CIronSightController", "m_flIronSightAmountBiased");
}

void GCIronSightController::SetIronSightAmountBiased(float value) {
    SetSchemaValue(m_ptr, "CIronSightController", "m_flIronSightAmountBiased", false, value);
}

std::string GCIronSightController::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCIronSightController::IsValid() {
    return (m_ptr != nullptr);
}

GCFogTrigger::GCFogTrigger(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFogTrigger::GCFogTrigger(void *ptr) {
    m_ptr = ptr;
}

Gfogparams_t GCFogTrigger::GetFog() const {
    return GetSchemaValue<Gfogparams_t>(m_ptr, "CFogTrigger", "m_fog");
}

void GCFogTrigger::SetFog(Gfogparams_t value) {
    SetSchemaValue(m_ptr, "CFogTrigger", "m_fog", false, value);
}

std::string GCFogTrigger::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFogTrigger::IsValid() {
    return (m_ptr != nullptr);
}

GCBaseFilter::GCBaseFilter(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBaseFilter::GCBaseFilter(void *ptr) {
    m_ptr = ptr;
}

bool GCBaseFilter::GetNegated() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseFilter", "m_bNegated");
}

void GCBaseFilter::SetNegated(bool value) {
    SetSchemaValue(m_ptr, "CBaseFilter", "m_bNegated", false, value);
}

GCEntityIOOutput GCBaseFilter::GetOnPass() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseFilter", "m_OnPass");
}

void GCBaseFilter::SetOnPass(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseFilter", "m_OnPass", false, value);
}

GCEntityIOOutput GCBaseFilter::GetOnFail() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseFilter", "m_OnFail");
}

void GCBaseFilter::SetOnFail(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseFilter", "m_OnFail", false, value);
}

std::string GCBaseFilter::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBaseFilter::IsValid() {
    return (m_ptr != nullptr);
}

GCCSPointScriptExtensions_weapon_cs_base::GCCSPointScriptExtensions_weapon_cs_base(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSPointScriptExtensions_weapon_cs_base::GCCSPointScriptExtensions_weapon_cs_base(void *ptr) {
    m_ptr = ptr;
}

std::string GCCSPointScriptExtensions_weapon_cs_base::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSPointScriptExtensions_weapon_cs_base::IsValid() {
    return (m_ptr != nullptr);
}

GCTriggerHostageReset::GCTriggerHostageReset(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTriggerHostageReset::GCTriggerHostageReset(void *ptr) {
    m_ptr = ptr;
}

std::string GCTriggerHostageReset::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTriggerHostageReset::IsValid() {
    return (m_ptr != nullptr);
}

GCServerOnlyPointEntity::GCServerOnlyPointEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCServerOnlyPointEntity::GCServerOnlyPointEntity(void *ptr) {
    m_ptr = ptr;
}

std::string GCServerOnlyPointEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCServerOnlyPointEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCPointEntity::GCPointEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPointEntity::GCPointEntity(void *ptr) {
    m_ptr = ptr;
}

std::string GCPointEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPointEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCountdownTimer::GCountdownTimer(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCountdownTimer::GCountdownTimer(void *ptr) {
    m_ptr = ptr;
}

float GCountdownTimer::GetDuration() const {
    return GetSchemaValue<float>(m_ptr, "CountdownTimer", "m_duration");
}

void GCountdownTimer::SetDuration(float value) {
    SetSchemaValue(m_ptr, "CountdownTimer", "m_duration", false, value);
}

float GCountdownTimer::GetTimescale() const {
    return GetSchemaValue<float>(m_ptr, "CountdownTimer", "m_timescale");
}

void GCountdownTimer::SetTimescale(float value) {
    SetSchemaValue(m_ptr, "CountdownTimer", "m_timescale", false, value);
}

WorldGroupId_t GCountdownTimer::GetWorldGroupId() const {
    return GetSchemaValue<WorldGroupId_t>(m_ptr, "CountdownTimer", "m_nWorldGroupId");
}

void GCountdownTimer::SetWorldGroupId(WorldGroupId_t value) {
    SetSchemaValue(m_ptr, "CountdownTimer", "m_nWorldGroupId", false, value);
}

std::string GCountdownTimer::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCountdownTimer::IsValid() {
    return (m_ptr != nullptr);
}

GSceneEventId_t::GSceneEventId_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GSceneEventId_t::GSceneEventId_t(void *ptr) {
    m_ptr = ptr;
}

uint32_t GSceneEventId_t::GetValue() const {
    return GetSchemaValue<uint32_t>(m_ptr, "SceneEventId_t", "m_Value");
}

void GSceneEventId_t::SetValue(uint32_t value) {
    SetSchemaValue(m_ptr, "SceneEventId_t", "m_Value", true, value);
}

std::string GSceneEventId_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GSceneEventId_t::IsValid() {
    return (m_ptr != nullptr);
}

GCBuoyancyHelper::GCBuoyancyHelper(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBuoyancyHelper::GCBuoyancyHelper(void *ptr) {
    m_ptr = ptr;
}

float GCBuoyancyHelper::GetFluidDensity() const {
    return GetSchemaValue<float>(m_ptr, "CBuoyancyHelper", "m_flFluidDensity");
}

void GCBuoyancyHelper::SetFluidDensity(float value) {
    SetSchemaValue(m_ptr, "CBuoyancyHelper", "m_flFluidDensity", false, value);
}

std::string GCBuoyancyHelper::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBuoyancyHelper::IsValid() {
    return (m_ptr != nullptr);
}

GCMoverPathNode::GCMoverPathNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMoverPathNode::GCMoverPathNode(void *ptr) {
    m_ptr = ptr;
}

Vector GCMoverPathNode::GetInTangentLocal() const {
    return GetSchemaValue<Vector>(m_ptr, "CMoverPathNode", "m_vInTangentLocal");
}

void GCMoverPathNode::SetInTangentLocal(Vector value) {
    SetSchemaValue(m_ptr, "CMoverPathNode", "m_vInTangentLocal", false, value);
}

Vector GCMoverPathNode::GetOutTangentLocal() const {
    return GetSchemaValue<Vector>(m_ptr, "CMoverPathNode", "m_vOutTangentLocal");
}

void GCMoverPathNode::SetOutTangentLocal(Vector value) {
    SetSchemaValue(m_ptr, "CMoverPathNode", "m_vOutTangentLocal", false, value);
}

CUtlSymbolLarge GCMoverPathNode::GetParentPathUniqueID() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CMoverPathNode", "m_szParentPathUniqueID");
}

void GCMoverPathNode::SetParentPathUniqueID(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CMoverPathNode", "m_szParentPathUniqueID", false, value);
}

GCEntityIOOutput GCMoverPathNode::GetOnPassThrough() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CMoverPathNode", "m_OnPassThrough");
}

void GCMoverPathNode::SetOnPassThrough(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CMoverPathNode", "m_OnPassThrough", false, value);
}

GCPathMover GCMoverPathNode::GetMover() const {
    GCPathMover value(GetSchemaValuePtr<void>(m_ptr, "CMoverPathNode", "m_hMover"));
    return value;
}

void GCMoverPathNode::SetMover(GCPathMover* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Mover' is not possible.\n");
}

std::string GCMoverPathNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMoverPathNode::IsValid() {
    return (m_ptr != nullptr);
}

GCBtNode::GCBtNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBtNode::GCBtNode(void *ptr) {
    m_ptr = ptr;
}

std::string GCBtNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBtNode::IsValid() {
    return (m_ptr != nullptr);
}

GCPlayer_ViewModelServices::GCPlayer_ViewModelServices(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPlayer_ViewModelServices::GCPlayer_ViewModelServices(void *ptr) {
    m_ptr = ptr;
}

std::string GCPlayer_ViewModelServices::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPlayer_ViewModelServices::IsValid() {
    return (m_ptr != nullptr);
}

GIEconItemInterface::GIEconItemInterface(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GIEconItemInterface::GIEconItemInterface(void *ptr) {
    m_ptr = ptr;
}

std::string GIEconItemInterface::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GIEconItemInterface::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvSoundscape::GCEnvSoundscape(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvSoundscape::GCEnvSoundscape(void *ptr) {
    m_ptr = ptr;
}

GCEntityIOOutput GCEnvSoundscape::GetOnPlay() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CEnvSoundscape", "m_OnPlay");
}

void GCEnvSoundscape::SetOnPlay(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CEnvSoundscape", "m_OnPlay", false, value);
}

float GCEnvSoundscape::GetRadius() const {
    return GetSchemaValue<float>(m_ptr, "CEnvSoundscape", "m_flRadius");
}

void GCEnvSoundscape::SetRadius(float value) {
    SetSchemaValue(m_ptr, "CEnvSoundscape", "m_flRadius", false, value);
}

CUtlSymbolLarge GCEnvSoundscape::GetSoundscapeName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvSoundscape", "m_soundscapeName");
}

void GCEnvSoundscape::SetSoundscapeName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEnvSoundscape", "m_soundscapeName", false, value);
}

CUtlSymbolLarge GCEnvSoundscape::GetSoundEventName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvSoundscape", "m_soundEventName");
}

void GCEnvSoundscape::SetSoundEventName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEnvSoundscape", "m_soundEventName", false, value);
}

bool GCEnvSoundscape::GetOverrideWithEvent() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvSoundscape", "m_bOverrideWithEvent");
}

void GCEnvSoundscape::SetOverrideWithEvent(bool value) {
    SetSchemaValue(m_ptr, "CEnvSoundscape", "m_bOverrideWithEvent", false, value);
}

int32_t GCEnvSoundscape::GetSoundscapeIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvSoundscape", "m_soundscapeIndex");
}

void GCEnvSoundscape::SetSoundscapeIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvSoundscape", "m_soundscapeIndex", false, value);
}

int32_t GCEnvSoundscape::GetSoundscapeEntityListId() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvSoundscape", "m_soundscapeEntityListId");
}

void GCEnvSoundscape::SetSoundscapeEntityListId(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvSoundscape", "m_soundscapeEntityListId", false, value);
}

uint32_t GCEnvSoundscape::GetSoundEventHash() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CEnvSoundscape", "m_soundEventHash");
}

void GCEnvSoundscape::SetSoundEventHash(uint32_t value) {
    SetSchemaValue(m_ptr, "CEnvSoundscape", "m_soundEventHash", false, value);
}

std::vector<CUtlSymbolLarge> GCEnvSoundscape::GetPositionNames() const {
    CUtlSymbolLarge* outValue = GetSchemaValue<CUtlSymbolLarge*>(m_ptr, "CEnvSoundscape", "m_positionNames"); std::vector<CUtlSymbolLarge> ret; for(int i = 0; i < 8; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCEnvSoundscape::SetPositionNames(std::vector<CUtlSymbolLarge> value) {
    CUtlSymbolLarge* outValue = GetSchemaValue<CUtlSymbolLarge*>(m_ptr, "CEnvSoundscape", "m_positionNames"); for(int i = 0; i < 8; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CEnvSoundscape", "m_positionNames", false, outValue);
}

GCEnvSoundscape GCEnvSoundscape::GetProxySoundscape() const {
    GCEnvSoundscape value(GetSchemaValuePtr<void>(m_ptr, "CEnvSoundscape", "m_hProxySoundscape"));
    return value;
}

void GCEnvSoundscape::SetProxySoundscape(GCEnvSoundscape* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ProxySoundscape' is not possible.\n");
}

bool GCEnvSoundscape::GetDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvSoundscape", "m_bDisabled");
}

void GCEnvSoundscape::SetDisabled(bool value) {
    SetSchemaValue(m_ptr, "CEnvSoundscape", "m_bDisabled", false, value);
}

std::string GCEnvSoundscape::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvSoundscape::IsValid() {
    return (m_ptr != nullptr);
}

Gfogplayerparams_t::Gfogplayerparams_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

Gfogplayerparams_t::Gfogplayerparams_t(void *ptr) {
    m_ptr = ptr;
}

GCFogController Gfogplayerparams_t::GetCtrl() const {
    GCFogController value(GetSchemaValuePtr<void>(m_ptr, "fogplayerparams_t", "m_hCtrl"));
    return value;
}

void Gfogplayerparams_t::SetCtrl(GCFogController* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Ctrl' is not possible.\n");
}

float Gfogplayerparams_t::GetTransitionTime() const {
    return GetSchemaValue<float>(m_ptr, "fogplayerparams_t", "m_flTransitionTime");
}

void Gfogplayerparams_t::SetTransitionTime(float value) {
    SetSchemaValue(m_ptr, "fogplayerparams_t", "m_flTransitionTime", true, value);
}

Color Gfogplayerparams_t::GetOldColor() const {
    return GetSchemaValue<Color>(m_ptr, "fogplayerparams_t", "m_OldColor");
}

void Gfogplayerparams_t::SetOldColor(Color value) {
    SetSchemaValue(m_ptr, "fogplayerparams_t", "m_OldColor", true, value);
}

float Gfogplayerparams_t::GetOldStart() const {
    return GetSchemaValue<float>(m_ptr, "fogplayerparams_t", "m_flOldStart");
}

void Gfogplayerparams_t::SetOldStart(float value) {
    SetSchemaValue(m_ptr, "fogplayerparams_t", "m_flOldStart", true, value);
}

float Gfogplayerparams_t::GetOldEnd() const {
    return GetSchemaValue<float>(m_ptr, "fogplayerparams_t", "m_flOldEnd");
}

void Gfogplayerparams_t::SetOldEnd(float value) {
    SetSchemaValue(m_ptr, "fogplayerparams_t", "m_flOldEnd", true, value);
}

float Gfogplayerparams_t::GetOldMaxDensity() const {
    return GetSchemaValue<float>(m_ptr, "fogplayerparams_t", "m_flOldMaxDensity");
}

void Gfogplayerparams_t::SetOldMaxDensity(float value) {
    SetSchemaValue(m_ptr, "fogplayerparams_t", "m_flOldMaxDensity", true, value);
}

float Gfogplayerparams_t::GetOldHDRColorScale() const {
    return GetSchemaValue<float>(m_ptr, "fogplayerparams_t", "m_flOldHDRColorScale");
}

void Gfogplayerparams_t::SetOldHDRColorScale(float value) {
    SetSchemaValue(m_ptr, "fogplayerparams_t", "m_flOldHDRColorScale", true, value);
}

float Gfogplayerparams_t::GetOldFarZ() const {
    return GetSchemaValue<float>(m_ptr, "fogplayerparams_t", "m_flOldFarZ");
}

void Gfogplayerparams_t::SetOldFarZ(float value) {
    SetSchemaValue(m_ptr, "fogplayerparams_t", "m_flOldFarZ", true, value);
}

Color Gfogplayerparams_t::GetNewColor() const {
    return GetSchemaValue<Color>(m_ptr, "fogplayerparams_t", "m_NewColor");
}

void Gfogplayerparams_t::SetNewColor(Color value) {
    SetSchemaValue(m_ptr, "fogplayerparams_t", "m_NewColor", true, value);
}

float Gfogplayerparams_t::GetNewStart() const {
    return GetSchemaValue<float>(m_ptr, "fogplayerparams_t", "m_flNewStart");
}

void Gfogplayerparams_t::SetNewStart(float value) {
    SetSchemaValue(m_ptr, "fogplayerparams_t", "m_flNewStart", true, value);
}

float Gfogplayerparams_t::GetNewEnd() const {
    return GetSchemaValue<float>(m_ptr, "fogplayerparams_t", "m_flNewEnd");
}

void Gfogplayerparams_t::SetNewEnd(float value) {
    SetSchemaValue(m_ptr, "fogplayerparams_t", "m_flNewEnd", true, value);
}

float Gfogplayerparams_t::GetNewMaxDensity() const {
    return GetSchemaValue<float>(m_ptr, "fogplayerparams_t", "m_flNewMaxDensity");
}

void Gfogplayerparams_t::SetNewMaxDensity(float value) {
    SetSchemaValue(m_ptr, "fogplayerparams_t", "m_flNewMaxDensity", true, value);
}

float Gfogplayerparams_t::GetNewHDRColorScale() const {
    return GetSchemaValue<float>(m_ptr, "fogplayerparams_t", "m_flNewHDRColorScale");
}

void Gfogplayerparams_t::SetNewHDRColorScale(float value) {
    SetSchemaValue(m_ptr, "fogplayerparams_t", "m_flNewHDRColorScale", true, value);
}

float Gfogplayerparams_t::GetNewFarZ() const {
    return GetSchemaValue<float>(m_ptr, "fogplayerparams_t", "m_flNewFarZ");
}

void Gfogplayerparams_t::SetNewFarZ(float value) {
    SetSchemaValue(m_ptr, "fogplayerparams_t", "m_flNewFarZ", true, value);
}

std::string Gfogplayerparams_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool Gfogplayerparams_t::IsValid() {
    return (m_ptr != nullptr);
}

GCFogController::GCFogController(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFogController::GCFogController(void *ptr) {
    m_ptr = ptr;
}

Gfogparams_t GCFogController::GetFog() const {
    return GetSchemaValue<Gfogparams_t>(m_ptr, "CFogController", "m_fog");
}

void GCFogController::SetFog(Gfogparams_t value) {
    SetSchemaValue(m_ptr, "CFogController", "m_fog", false, value);
}

bool GCFogController::GetUseAngles() const {
    return GetSchemaValue<bool>(m_ptr, "CFogController", "m_bUseAngles");
}

void GCFogController::SetUseAngles(bool value) {
    SetSchemaValue(m_ptr, "CFogController", "m_bUseAngles", false, value);
}

int32_t GCFogController::GetChangedVariables() const {
    return GetSchemaValue<int32_t>(m_ptr, "CFogController", "m_iChangedVariables");
}

void GCFogController::SetChangedVariables(int32_t value) {
    SetSchemaValue(m_ptr, "CFogController", "m_iChangedVariables", false, value);
}

std::string GCFogController::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFogController::IsValid() {
    return (m_ptr != nullptr);
}

GCAttributeList::GCAttributeList(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAttributeList::GCAttributeList(void *ptr) {
    m_ptr = ptr;
}

std::vector<GCEconItemAttribute> GCAttributeList::GetAttributes() const {
    CUtlVector<GCEconItemAttribute>* vec = GetSchemaValue<CUtlVector<GCEconItemAttribute>*>(m_ptr, "CAttributeList", "m_Attributes"); std::vector<GCEconItemAttribute> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAttributeList::SetAttributes(std::vector<GCEconItemAttribute> value) {
    SetSchemaValueCUtlVector<GCEconItemAttribute>(m_ptr, "CAttributeList", "m_Attributes", false, value);
}

GCAttributeManager GCAttributeList::GetManager() const {
    GCAttributeManager value(GetSchemaValuePtr<void>(m_ptr, "CAttributeList", "m_pManager"));
    return value;
}

void GCAttributeList::SetManager(GCAttributeManager* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Manager' is not possible.\n");
}

std::string GCAttributeList::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAttributeList::IsValid() {
    return (m_ptr != nullptr);
}

GCModelState::GCModelState(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCModelState::GCModelState(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCModelState::GetModelName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CModelState", "m_ModelName");
}

void GCModelState::SetModelName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CModelState", "m_ModelName", false, value);
}

bool GCModelState::GetClientClothCreationSuppressed() const {
    return GetSchemaValue<bool>(m_ptr, "CModelState", "m_bClientClothCreationSuppressed");
}

void GCModelState::SetClientClothCreationSuppressed(bool value) {
    SetSchemaValue(m_ptr, "CModelState", "m_bClientClothCreationSuppressed", false, value);
}

uint64_t GCModelState::GetMeshGroupMask() const {
    return GetSchemaValue<uint64_t>(m_ptr, "CModelState", "m_MeshGroupMask");
}

void GCModelState::SetMeshGroupMask(uint64_t value) {
    SetSchemaValue(m_ptr, "CModelState", "m_MeshGroupMask", false, value);
}

int8_t GCModelState::GetIdealMotionType() const {
    return GetSchemaValue<int8_t>(m_ptr, "CModelState", "m_nIdealMotionType");
}

void GCModelState::SetIdealMotionType(int8_t value) {
    SetSchemaValue(m_ptr, "CModelState", "m_nIdealMotionType", false, value);
}

int8_t GCModelState::GetForceLOD() const {
    return GetSchemaValue<int8_t>(m_ptr, "CModelState", "m_nForceLOD");
}

void GCModelState::SetForceLOD(int8_t value) {
    SetSchemaValue(m_ptr, "CModelState", "m_nForceLOD", false, value);
}

int8_t GCModelState::GetClothUpdateFlags() const {
    return GetSchemaValue<int8_t>(m_ptr, "CModelState", "m_nClothUpdateFlags");
}

void GCModelState::SetClothUpdateFlags(int8_t value) {
    SetSchemaValue(m_ptr, "CModelState", "m_nClothUpdateFlags", false, value);
}

std::string GCModelState::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCModelState::IsValid() {
    return (m_ptr != nullptr);
}

GCBaseAnimGraph::GCBaseAnimGraph(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBaseAnimGraph::GCBaseAnimGraph(void *ptr) {
    m_ptr = ptr;
}

bool GCBaseAnimGraph::GetInitiallyPopulateInterpHistory() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseAnimGraph", "m_bInitiallyPopulateInterpHistory");
}

void GCBaseAnimGraph::SetInitiallyPopulateInterpHistory(bool value) {
    SetSchemaValue(m_ptr, "CBaseAnimGraph", "m_bInitiallyPopulateInterpHistory", false, value);
}

GIChoreoServices GCBaseAnimGraph::GetChoreoServices() const {
    GIChoreoServices value(GetSchemaValuePtr<void>(m_ptr, "CBaseAnimGraph", "m_pChoreoServices"));
    return value;
}

void GCBaseAnimGraph::SetChoreoServices(GIChoreoServices* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ChoreoServices' is not possible.\n");
}

bool GCBaseAnimGraph::GetAnimGraphUpdateEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseAnimGraph", "m_bAnimGraphUpdateEnabled");
}

void GCBaseAnimGraph::SetAnimGraphUpdateEnabled(bool value) {
    SetSchemaValue(m_ptr, "CBaseAnimGraph", "m_bAnimGraphUpdateEnabled", false, value);
}

float GCBaseAnimGraph::GetMaxSlopeDistance() const {
    return GetSchemaValue<float>(m_ptr, "CBaseAnimGraph", "m_flMaxSlopeDistance");
}

void GCBaseAnimGraph::SetMaxSlopeDistance(float value) {
    SetSchemaValue(m_ptr, "CBaseAnimGraph", "m_flMaxSlopeDistance", false, value);
}

Vector GCBaseAnimGraph::GetLastSlopeCheckPos() const {
    return GetSchemaValue<Vector>(m_ptr, "CBaseAnimGraph", "m_vLastSlopeCheckPos");
}

void GCBaseAnimGraph::SetLastSlopeCheckPos(Vector value) {
    SetSchemaValue(m_ptr, "CBaseAnimGraph", "m_vLastSlopeCheckPos", false, value);
}

bool GCBaseAnimGraph::GetAnimationUpdateScheduled() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseAnimGraph", "m_bAnimationUpdateScheduled");
}

void GCBaseAnimGraph::SetAnimationUpdateScheduled(bool value) {
    SetSchemaValue(m_ptr, "CBaseAnimGraph", "m_bAnimationUpdateScheduled", false, value);
}

Vector GCBaseAnimGraph::GetForce() const {
    return GetSchemaValue<Vector>(m_ptr, "CBaseAnimGraph", "m_vecForce");
}

void GCBaseAnimGraph::SetForce(Vector value) {
    SetSchemaValue(m_ptr, "CBaseAnimGraph", "m_vecForce", false, value);
}

int32_t GCBaseAnimGraph::GetForceBone() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBaseAnimGraph", "m_nForceBone");
}

void GCBaseAnimGraph::SetForceBone(int32_t value) {
    SetSchemaValue(m_ptr, "CBaseAnimGraph", "m_nForceBone", false, value);
}

GPhysicsRagdollPose_t GCBaseAnimGraph::GetRagdollPose() const {
    GPhysicsRagdollPose_t value(GetSchemaValuePtr<void>(m_ptr, "CBaseAnimGraph", "m_pRagdollPose"));
    return value;
}

void GCBaseAnimGraph::SetRagdollPose(GPhysicsRagdollPose_t* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'RagdollPose' is not possible.\n");
}

bool GCBaseAnimGraph::GetRagdollClientSide() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseAnimGraph", "m_bRagdollClientSide");
}

void GCBaseAnimGraph::SetRagdollClientSide(bool value) {
    SetSchemaValue(m_ptr, "CBaseAnimGraph", "m_bRagdollClientSide", false, value);
}

std::string GCBaseAnimGraph::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBaseAnimGraph::IsValid() {
    return (m_ptr != nullptr);
}

GCEnableMotionFixup::GCEnableMotionFixup(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnableMotionFixup::GCEnableMotionFixup(void *ptr) {
    m_ptr = ptr;
}

std::string GCEnableMotionFixup::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnableMotionFixup::IsValid() {
    return (m_ptr != nullptr);
}

GCInButtonState::GCInButtonState(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCInButtonState::GCInButtonState(void *ptr) {
    m_ptr = ptr;
}

std::vector<uint64_t> GCInButtonState::GetButtonStates() const {
    uint64_t* outValue = GetSchemaValue<uint64_t*>(m_ptr, "CInButtonState", "m_pButtonStates"); std::vector<uint64_t> ret; for(int i = 0; i < 3; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCInButtonState::SetButtonStates(std::vector<uint64_t> value) {
    uint64_t* outValue = GetSchemaValue<uint64_t*>(m_ptr, "CInButtonState", "m_pButtonStates"); for(int i = 0; i < 3; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CInButtonState", "m_pButtonStates", false, outValue);
}

std::string GCInButtonState::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCInButtonState::IsValid() {
    return (m_ptr != nullptr);
}

GCBtNodeDecorator::GCBtNodeDecorator(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBtNodeDecorator::GCBtNodeDecorator(void *ptr) {
    m_ptr = ptr;
}

std::string GCBtNodeDecorator::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBtNodeDecorator::IsValid() {
    return (m_ptr != nullptr);
}

GCAttributeManager::GCAttributeManager(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAttributeManager::GCAttributeManager(void *ptr) {
    m_ptr = ptr;
}

int32_t GCAttributeManager::GetReapplyProvisionParity() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAttributeManager", "m_iReapplyProvisionParity");
}

void GCAttributeManager::SetReapplyProvisionParity(int32_t value) {
    SetSchemaValue(m_ptr, "CAttributeManager", "m_iReapplyProvisionParity", false, value);
}

GCBaseEntity GCAttributeManager::GetOuter() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CAttributeManager", "m_hOuter"));
    return value;
}

void GCAttributeManager::SetOuter(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Outer' is not possible.\n");
}

bool GCAttributeManager::GetPreventLoopback() const {
    return GetSchemaValue<bool>(m_ptr, "CAttributeManager", "m_bPreventLoopback");
}

void GCAttributeManager::SetPreventLoopback(bool value) {
    SetSchemaValue(m_ptr, "CAttributeManager", "m_bPreventLoopback", false, value);
}

attributeprovidertypes_t GCAttributeManager::GetProviderType() const {
    return GetSchemaValue<attributeprovidertypes_t>(m_ptr, "CAttributeManager", "m_ProviderType");
}

void GCAttributeManager::SetProviderType(attributeprovidertypes_t value) {
    SetSchemaValue(m_ptr, "CAttributeManager", "m_ProviderType", false, value);
}

std::vector<GCAttributeManager> GCAttributeManager::GetCachedResults() const {
    CUtlVector<GCAttributeManager>* vec = GetSchemaValue<CUtlVector<GCAttributeManager>*>(m_ptr, "CAttributeManager", "m_CachedResults"); std::vector<GCAttributeManager> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAttributeManager::SetCachedResults(std::vector<GCAttributeManager> value) {
    SetSchemaValueCUtlVector<GCAttributeManager>(m_ptr, "CAttributeManager", "m_CachedResults", false, value);
}

std::string GCAttributeManager::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAttributeManager::IsValid() {
    return (m_ptr != nullptr);
}

GFilterHealth::GFilterHealth(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFilterHealth::GFilterHealth(void *ptr) {
    m_ptr = ptr;
}

bool GFilterHealth::GetAdrenalineActive() const {
    return GetSchemaValue<bool>(m_ptr, "FilterHealth", "m_bAdrenalineActive");
}

void GFilterHealth::SetAdrenalineActive(bool value) {
    SetSchemaValue(m_ptr, "FilterHealth", "m_bAdrenalineActive", false, value);
}

int32_t GFilterHealth::GetHealthMin() const {
    return GetSchemaValue<int32_t>(m_ptr, "FilterHealth", "m_iHealthMin");
}

void GFilterHealth::SetHealthMin(int32_t value) {
    SetSchemaValue(m_ptr, "FilterHealth", "m_iHealthMin", false, value);
}

int32_t GFilterHealth::GetHealthMax() const {
    return GetSchemaValue<int32_t>(m_ptr, "FilterHealth", "m_iHealthMax");
}

void GFilterHealth::SetHealthMax(int32_t value) {
    SetSchemaValue(m_ptr, "FilterHealth", "m_iHealthMax", false, value);
}

std::string GFilterHealth::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFilterHealth::IsValid() {
    return (m_ptr != nullptr);
}

GCPlayerPing::GCPlayerPing(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPlayerPing::GCPlayerPing(void *ptr) {
    m_ptr = ptr;
}

GCCSPlayerPawn GCPlayerPing::GetPlayer() const {
    GCCSPlayerPawn value(GetSchemaValuePtr<void>(m_ptr, "CPlayerPing", "m_hPlayer"));
    return value;
}

void GCPlayerPing::SetPlayer(GCCSPlayerPawn* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Player' is not possible.\n");
}

GCBaseEntity GCPlayerPing::GetPingedEntity() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CPlayerPing", "m_hPingedEntity"));
    return value;
}

void GCPlayerPing::SetPingedEntity(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'PingedEntity' is not possible.\n");
}

int32_t GCPlayerPing::GetType() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPlayerPing", "m_iType");
}

void GCPlayerPing::SetType(int32_t value) {
    SetSchemaValue(m_ptr, "CPlayerPing", "m_iType", false, value);
}

bool GCPlayerPing::GetUrgent() const {
    return GetSchemaValue<bool>(m_ptr, "CPlayerPing", "m_bUrgent");
}

void GCPlayerPing::SetUrgent(bool value) {
    SetSchemaValue(m_ptr, "CPlayerPing", "m_bUrgent", false, value);
}

std::string GCPlayerPing::GetPlaceName() const {
    return GetSchemaValuePtr<char>(m_ptr, "CPlayerPing", "m_szPlaceName");
}

void GCPlayerPing::SetPlaceName(std::string value) {
    WriteSchemaPtrValue(m_ptr, "CPlayerPing", "m_szPlaceName", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 18);
}

std::string GCPlayerPing::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPlayerPing::IsValid() {
    return (m_ptr != nullptr);
}

GCCSPointScriptEntity::GCCSPointScriptEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSPointScriptEntity::GCCSPointScriptEntity(void *ptr) {
    m_ptr = ptr;
}

std::string GCCSPointScriptEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSPointScriptEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCNetworkOriginCellCoordQuantizedVector::GCNetworkOriginCellCoordQuantizedVector(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNetworkOriginCellCoordQuantizedVector::GCNetworkOriginCellCoordQuantizedVector(void *ptr) {
    m_ptr = ptr;
}

uint16_t GCNetworkOriginCellCoordQuantizedVector::GetCellX() const {
    return GetSchemaValue<uint16_t>(m_ptr, "CNetworkOriginCellCoordQuantizedVector", "m_cellX");
}

void GCNetworkOriginCellCoordQuantizedVector::SetCellX(uint16_t value) {
    SetSchemaValue(m_ptr, "CNetworkOriginCellCoordQuantizedVector", "m_cellX", false, value);
}

uint16_t GCNetworkOriginCellCoordQuantizedVector::GetCellY() const {
    return GetSchemaValue<uint16_t>(m_ptr, "CNetworkOriginCellCoordQuantizedVector", "m_cellY");
}

void GCNetworkOriginCellCoordQuantizedVector::SetCellY(uint16_t value) {
    SetSchemaValue(m_ptr, "CNetworkOriginCellCoordQuantizedVector", "m_cellY", false, value);
}

uint16_t GCNetworkOriginCellCoordQuantizedVector::GetCellZ() const {
    return GetSchemaValue<uint16_t>(m_ptr, "CNetworkOriginCellCoordQuantizedVector", "m_cellZ");
}

void GCNetworkOriginCellCoordQuantizedVector::SetCellZ(uint16_t value) {
    SetSchemaValue(m_ptr, "CNetworkOriginCellCoordQuantizedVector", "m_cellZ", false, value);
}

uint16_t GCNetworkOriginCellCoordQuantizedVector::GetOutsideWorld() const {
    return GetSchemaValue<uint16_t>(m_ptr, "CNetworkOriginCellCoordQuantizedVector", "m_nOutsideWorld");
}

void GCNetworkOriginCellCoordQuantizedVector::SetOutsideWorld(uint16_t value) {
    SetSchemaValue(m_ptr, "CNetworkOriginCellCoordQuantizedVector", "m_nOutsideWorld", false, value);
}

float GCNetworkOriginCellCoordQuantizedVector::GetX() const {
    return GetSchemaValue<float>(m_ptr, "CNetworkOriginCellCoordQuantizedVector", "m_vecX");
}

void GCNetworkOriginCellCoordQuantizedVector::SetX(float value) {
    SetSchemaValue(m_ptr, "CNetworkOriginCellCoordQuantizedVector", "m_vecX", false, value);
}

float GCNetworkOriginCellCoordQuantizedVector::GetY() const {
    return GetSchemaValue<float>(m_ptr, "CNetworkOriginCellCoordQuantizedVector", "m_vecY");
}

void GCNetworkOriginCellCoordQuantizedVector::SetY(float value) {
    SetSchemaValue(m_ptr, "CNetworkOriginCellCoordQuantizedVector", "m_vecY", false, value);
}

float GCNetworkOriginCellCoordQuantizedVector::GetZ() const {
    return GetSchemaValue<float>(m_ptr, "CNetworkOriginCellCoordQuantizedVector", "m_vecZ");
}

void GCNetworkOriginCellCoordQuantizedVector::SetZ(float value) {
    SetSchemaValue(m_ptr, "CNetworkOriginCellCoordQuantizedVector", "m_vecZ", false, value);
}

std::string GCNetworkOriginCellCoordQuantizedVector::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNetworkOriginCellCoordQuantizedVector::IsValid() {
    return (m_ptr != nullptr);
}

GCInfoLandmark::GCInfoLandmark(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCInfoLandmark::GCInfoLandmark(void *ptr) {
    m_ptr = ptr;
}

std::string GCInfoLandmark::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCInfoLandmark::IsValid() {
    return (m_ptr != nullptr);
}

GCBaseFlex::GCBaseFlex(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBaseFlex::GCBaseFlex(void *ptr) {
    m_ptr = ptr;
}

std::vector<float32> GCBaseFlex::GetFlexWeight() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "CBaseFlex", "m_flexWeight"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCBaseFlex::SetFlexWeight(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "CBaseFlex", "m_flexWeight", false, value);
}

Vector GCBaseFlex::GetLookTargetPosition() const {
    return GetSchemaValue<Vector>(m_ptr, "CBaseFlex", "m_vLookTargetPosition");
}

void GCBaseFlex::SetLookTargetPosition(Vector value) {
    SetSchemaValue(m_ptr, "CBaseFlex", "m_vLookTargetPosition", false, value);
}

bool GCBaseFlex::GetBlinktoggle() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseFlex", "m_blinktoggle");
}

void GCBaseFlex::SetBlinktoggle(bool value) {
    SetSchemaValue(m_ptr, "CBaseFlex", "m_blinktoggle", false, value);
}

GSceneEventId_t GCBaseFlex::GetNextSceneEventId() const {
    return GetSchemaValue<GSceneEventId_t>(m_ptr, "CBaseFlex", "m_nNextSceneEventId");
}

void GCBaseFlex::SetNextSceneEventId(GSceneEventId_t value) {
    SetSchemaValue(m_ptr, "CBaseFlex", "m_nNextSceneEventId", false, value);
}

bool GCBaseFlex::GetUpdateLayerPriorities() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseFlex", "m_bUpdateLayerPriorities");
}

void GCBaseFlex::SetUpdateLayerPriorities(bool value) {
    SetSchemaValue(m_ptr, "CBaseFlex", "m_bUpdateLayerPriorities", false, value);
}

std::string GCBaseFlex::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBaseFlex::IsValid() {
    return (m_ptr != nullptr);
}

GCEconItemView::GCEconItemView(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEconItemView::GCEconItemView(void *ptr) {
    m_ptr = ptr;
}

uint16_t GCEconItemView::GetItemDefinitionIndex() const {
    return GetSchemaValue<uint16_t>(m_ptr, "CEconItemView", "m_iItemDefinitionIndex");
}

void GCEconItemView::SetItemDefinitionIndex(uint16_t value) {
    SetSchemaValue(m_ptr, "CEconItemView", "m_iItemDefinitionIndex", false, value);
}

int32_t GCEconItemView::GetEntityQuality() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEconItemView", "m_iEntityQuality");
}

void GCEconItemView::SetEntityQuality(int32_t value) {
    SetSchemaValue(m_ptr, "CEconItemView", "m_iEntityQuality", false, value);
}

uint32_t GCEconItemView::GetEntityLevel() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CEconItemView", "m_iEntityLevel");
}

void GCEconItemView::SetEntityLevel(uint32_t value) {
    SetSchemaValue(m_ptr, "CEconItemView", "m_iEntityLevel", false, value);
}

uint64_t GCEconItemView::GetItemID() const {
    return GetSchemaValue<uint64_t>(m_ptr, "CEconItemView", "m_iItemID");
}

void GCEconItemView::SetItemID(uint64_t value) {
    SetSchemaValue(m_ptr, "CEconItemView", "m_iItemID", false, value);
}

uint32_t GCEconItemView::GetItemIDHigh() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CEconItemView", "m_iItemIDHigh");
}

void GCEconItemView::SetItemIDHigh(uint32_t value) {
    SetSchemaValue(m_ptr, "CEconItemView", "m_iItemIDHigh", false, value);
}

uint32_t GCEconItemView::GetItemIDLow() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CEconItemView", "m_iItemIDLow");
}

void GCEconItemView::SetItemIDLow(uint32_t value) {
    SetSchemaValue(m_ptr, "CEconItemView", "m_iItemIDLow", false, value);
}

uint32_t GCEconItemView::GetAccountID() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CEconItemView", "m_iAccountID");
}

void GCEconItemView::SetAccountID(uint32_t value) {
    SetSchemaValue(m_ptr, "CEconItemView", "m_iAccountID", false, value);
}

uint32_t GCEconItemView::GetInventoryPosition() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CEconItemView", "m_iInventoryPosition");
}

void GCEconItemView::SetInventoryPosition(uint32_t value) {
    SetSchemaValue(m_ptr, "CEconItemView", "m_iInventoryPosition", false, value);
}

bool GCEconItemView::GetInitialized() const {
    return GetSchemaValue<bool>(m_ptr, "CEconItemView", "m_bInitialized");
}

void GCEconItemView::SetInitialized(bool value) {
    SetSchemaValue(m_ptr, "CEconItemView", "m_bInitialized", false, value);
}

GCAttributeList GCEconItemView::GetAttributeList() const {
    return GetSchemaValue<GCAttributeList>(m_ptr, "CEconItemView", "m_AttributeList");
}

void GCEconItemView::SetAttributeList(GCAttributeList value) {
    SetSchemaValue(m_ptr, "CEconItemView", "m_AttributeList", false, value);
}

GCAttributeList GCEconItemView::GetNetworkedDynamicAttributes() const {
    return GetSchemaValue<GCAttributeList>(m_ptr, "CEconItemView", "m_NetworkedDynamicAttributes");
}

void GCEconItemView::SetNetworkedDynamicAttributes(GCAttributeList value) {
    SetSchemaValue(m_ptr, "CEconItemView", "m_NetworkedDynamicAttributes", false, value);
}

std::string GCEconItemView::GetCustomName() const {
    return GetSchemaValuePtr<char>(m_ptr, "CEconItemView", "m_szCustomName");
}

void GCEconItemView::SetCustomName(std::string value) {
    WriteSchemaPtrValue(m_ptr, "CEconItemView", "m_szCustomName", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 161);
}

std::string GCEconItemView::GetCustomNameOverride() const {
    return GetSchemaValuePtr<char>(m_ptr, "CEconItemView", "m_szCustomNameOverride");
}

void GCEconItemView::SetCustomNameOverride(std::string value) {
    WriteSchemaPtrValue(m_ptr, "CEconItemView", "m_szCustomNameOverride", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 161);
}

std::string GCEconItemView::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEconItemView::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimGraphNetworkedVariables::GCAnimGraphNetworkedVariables(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimGraphNetworkedVariables::GCAnimGraphNetworkedVariables(void *ptr) {
    m_ptr = ptr;
}

std::vector<uint32> GCAnimGraphNetworkedVariables::GetPredNetBoolVariables() const {
    CUtlVector<uint32>* vec = GetSchemaValue<CUtlVector<uint32>*>(m_ptr, "CAnimGraphNetworkedVariables", "m_PredNetBoolVariables"); std::vector<uint32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimGraphNetworkedVariables::SetPredNetBoolVariables(std::vector<uint32> value) {
    SetSchemaValueCUtlVector<uint32>(m_ptr, "CAnimGraphNetworkedVariables", "m_PredNetBoolVariables", false, value);
}

std::vector<uint8> GCAnimGraphNetworkedVariables::GetPredNetByteVariables() const {
    CUtlVector<uint8>* vec = GetSchemaValue<CUtlVector<uint8>*>(m_ptr, "CAnimGraphNetworkedVariables", "m_PredNetByteVariables"); std::vector<uint8> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimGraphNetworkedVariables::SetPredNetByteVariables(std::vector<uint8> value) {
    SetSchemaValueCUtlVector<uint8>(m_ptr, "CAnimGraphNetworkedVariables", "m_PredNetByteVariables", false, value);
}

std::vector<uint16> GCAnimGraphNetworkedVariables::GetPredNetUInt16Variables() const {
    CUtlVector<uint16>* vec = GetSchemaValue<CUtlVector<uint16>*>(m_ptr, "CAnimGraphNetworkedVariables", "m_PredNetUInt16Variables"); std::vector<uint16> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimGraphNetworkedVariables::SetPredNetUInt16Variables(std::vector<uint16> value) {
    SetSchemaValueCUtlVector<uint16>(m_ptr, "CAnimGraphNetworkedVariables", "m_PredNetUInt16Variables", false, value);
}

std::vector<int32> GCAnimGraphNetworkedVariables::GetPredNetIntVariables() const {
    CUtlVector<int32>* vec = GetSchemaValue<CUtlVector<int32>*>(m_ptr, "CAnimGraphNetworkedVariables", "m_PredNetIntVariables"); std::vector<int32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimGraphNetworkedVariables::SetPredNetIntVariables(std::vector<int32> value) {
    SetSchemaValueCUtlVector<int32>(m_ptr, "CAnimGraphNetworkedVariables", "m_PredNetIntVariables", false, value);
}

std::vector<uint32> GCAnimGraphNetworkedVariables::GetPredNetUInt32Variables() const {
    CUtlVector<uint32>* vec = GetSchemaValue<CUtlVector<uint32>*>(m_ptr, "CAnimGraphNetworkedVariables", "m_PredNetUInt32Variables"); std::vector<uint32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimGraphNetworkedVariables::SetPredNetUInt32Variables(std::vector<uint32> value) {
    SetSchemaValueCUtlVector<uint32>(m_ptr, "CAnimGraphNetworkedVariables", "m_PredNetUInt32Variables", false, value);
}

std::vector<uint64> GCAnimGraphNetworkedVariables::GetPredNetUInt64Variables() const {
    CUtlVector<uint64>* vec = GetSchemaValue<CUtlVector<uint64>*>(m_ptr, "CAnimGraphNetworkedVariables", "m_PredNetUInt64Variables"); std::vector<uint64> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimGraphNetworkedVariables::SetPredNetUInt64Variables(std::vector<uint64> value) {
    SetSchemaValueCUtlVector<uint64>(m_ptr, "CAnimGraphNetworkedVariables", "m_PredNetUInt64Variables", false, value);
}

std::vector<float32> GCAnimGraphNetworkedVariables::GetPredNetFloatVariables() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "CAnimGraphNetworkedVariables", "m_PredNetFloatVariables"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimGraphNetworkedVariables::SetPredNetFloatVariables(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "CAnimGraphNetworkedVariables", "m_PredNetFloatVariables", false, value);
}

std::vector<Vector> GCAnimGraphNetworkedVariables::GetPredNetVectorVariables() const {
    CUtlVector<Vector>* vec = GetSchemaValue<CUtlVector<Vector>*>(m_ptr, "CAnimGraphNetworkedVariables", "m_PredNetVectorVariables"); std::vector<Vector> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimGraphNetworkedVariables::SetPredNetVectorVariables(std::vector<Vector> value) {
    SetSchemaValueCUtlVector<Vector>(m_ptr, "CAnimGraphNetworkedVariables", "m_PredNetVectorVariables", false, value);
}

std::vector<Quaternion> GCAnimGraphNetworkedVariables::GetPredNetQuaternionVariables() const {
    CUtlVector<Quaternion>* vec = GetSchemaValue<CUtlVector<Quaternion>*>(m_ptr, "CAnimGraphNetworkedVariables", "m_PredNetQuaternionVariables"); std::vector<Quaternion> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimGraphNetworkedVariables::SetPredNetQuaternionVariables(std::vector<Quaternion> value) {
    SetSchemaValueCUtlVector<Quaternion>(m_ptr, "CAnimGraphNetworkedVariables", "m_PredNetQuaternionVariables", false, value);
}

std::vector<uint32> GCAnimGraphNetworkedVariables::GetOwnerOnlyPredNetBoolVariables() const {
    CUtlVector<uint32>* vec = GetSchemaValue<CUtlVector<uint32>*>(m_ptr, "CAnimGraphNetworkedVariables", "m_OwnerOnlyPredNetBoolVariables"); std::vector<uint32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimGraphNetworkedVariables::SetOwnerOnlyPredNetBoolVariables(std::vector<uint32> value) {
    SetSchemaValueCUtlVector<uint32>(m_ptr, "CAnimGraphNetworkedVariables", "m_OwnerOnlyPredNetBoolVariables", false, value);
}

std::vector<uint8> GCAnimGraphNetworkedVariables::GetOwnerOnlyPredNetByteVariables() const {
    CUtlVector<uint8>* vec = GetSchemaValue<CUtlVector<uint8>*>(m_ptr, "CAnimGraphNetworkedVariables", "m_OwnerOnlyPredNetByteVariables"); std::vector<uint8> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimGraphNetworkedVariables::SetOwnerOnlyPredNetByteVariables(std::vector<uint8> value) {
    SetSchemaValueCUtlVector<uint8>(m_ptr, "CAnimGraphNetworkedVariables", "m_OwnerOnlyPredNetByteVariables", false, value);
}

std::vector<uint16> GCAnimGraphNetworkedVariables::GetOwnerOnlyPredNetUInt16Variables() const {
    CUtlVector<uint16>* vec = GetSchemaValue<CUtlVector<uint16>*>(m_ptr, "CAnimGraphNetworkedVariables", "m_OwnerOnlyPredNetUInt16Variables"); std::vector<uint16> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimGraphNetworkedVariables::SetOwnerOnlyPredNetUInt16Variables(std::vector<uint16> value) {
    SetSchemaValueCUtlVector<uint16>(m_ptr, "CAnimGraphNetworkedVariables", "m_OwnerOnlyPredNetUInt16Variables", false, value);
}

std::vector<int32> GCAnimGraphNetworkedVariables::GetOwnerOnlyPredNetIntVariables() const {
    CUtlVector<int32>* vec = GetSchemaValue<CUtlVector<int32>*>(m_ptr, "CAnimGraphNetworkedVariables", "m_OwnerOnlyPredNetIntVariables"); std::vector<int32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimGraphNetworkedVariables::SetOwnerOnlyPredNetIntVariables(std::vector<int32> value) {
    SetSchemaValueCUtlVector<int32>(m_ptr, "CAnimGraphNetworkedVariables", "m_OwnerOnlyPredNetIntVariables", false, value);
}

std::vector<uint32> GCAnimGraphNetworkedVariables::GetOwnerOnlyPredNetUInt32Variables() const {
    CUtlVector<uint32>* vec = GetSchemaValue<CUtlVector<uint32>*>(m_ptr, "CAnimGraphNetworkedVariables", "m_OwnerOnlyPredNetUInt32Variables"); std::vector<uint32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimGraphNetworkedVariables::SetOwnerOnlyPredNetUInt32Variables(std::vector<uint32> value) {
    SetSchemaValueCUtlVector<uint32>(m_ptr, "CAnimGraphNetworkedVariables", "m_OwnerOnlyPredNetUInt32Variables", false, value);
}

std::vector<uint64> GCAnimGraphNetworkedVariables::GetOwnerOnlyPredNetUInt64Variables() const {
    CUtlVector<uint64>* vec = GetSchemaValue<CUtlVector<uint64>*>(m_ptr, "CAnimGraphNetworkedVariables", "m_OwnerOnlyPredNetUInt64Variables"); std::vector<uint64> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimGraphNetworkedVariables::SetOwnerOnlyPredNetUInt64Variables(std::vector<uint64> value) {
    SetSchemaValueCUtlVector<uint64>(m_ptr, "CAnimGraphNetworkedVariables", "m_OwnerOnlyPredNetUInt64Variables", false, value);
}

std::vector<float32> GCAnimGraphNetworkedVariables::GetOwnerOnlyPredNetFloatVariables() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "CAnimGraphNetworkedVariables", "m_OwnerOnlyPredNetFloatVariables"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimGraphNetworkedVariables::SetOwnerOnlyPredNetFloatVariables(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "CAnimGraphNetworkedVariables", "m_OwnerOnlyPredNetFloatVariables", false, value);
}

std::vector<Vector> GCAnimGraphNetworkedVariables::GetOwnerOnlyPredNetVectorVariables() const {
    CUtlVector<Vector>* vec = GetSchemaValue<CUtlVector<Vector>*>(m_ptr, "CAnimGraphNetworkedVariables", "m_OwnerOnlyPredNetVectorVariables"); std::vector<Vector> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimGraphNetworkedVariables::SetOwnerOnlyPredNetVectorVariables(std::vector<Vector> value) {
    SetSchemaValueCUtlVector<Vector>(m_ptr, "CAnimGraphNetworkedVariables", "m_OwnerOnlyPredNetVectorVariables", false, value);
}

std::vector<Quaternion> GCAnimGraphNetworkedVariables::GetOwnerOnlyPredNetQuaternionVariables() const {
    CUtlVector<Quaternion>* vec = GetSchemaValue<CUtlVector<Quaternion>*>(m_ptr, "CAnimGraphNetworkedVariables", "m_OwnerOnlyPredNetQuaternionVariables"); std::vector<Quaternion> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimGraphNetworkedVariables::SetOwnerOnlyPredNetQuaternionVariables(std::vector<Quaternion> value) {
    SetSchemaValueCUtlVector<Quaternion>(m_ptr, "CAnimGraphNetworkedVariables", "m_OwnerOnlyPredNetQuaternionVariables", false, value);
}

int32_t GCAnimGraphNetworkedVariables::GetBoolVariablesCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimGraphNetworkedVariables", "m_nBoolVariablesCount");
}

void GCAnimGraphNetworkedVariables::SetBoolVariablesCount(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimGraphNetworkedVariables", "m_nBoolVariablesCount", false, value);
}

int32_t GCAnimGraphNetworkedVariables::GetOwnerOnlyBoolVariablesCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimGraphNetworkedVariables", "m_nOwnerOnlyBoolVariablesCount");
}

void GCAnimGraphNetworkedVariables::SetOwnerOnlyBoolVariablesCount(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimGraphNetworkedVariables", "m_nOwnerOnlyBoolVariablesCount", false, value);
}

int32_t GCAnimGraphNetworkedVariables::GetRandomSeedOffset() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimGraphNetworkedVariables", "m_nRandomSeedOffset");
}

void GCAnimGraphNetworkedVariables::SetRandomSeedOffset(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimGraphNetworkedVariables", "m_nRandomSeedOffset", false, value);
}

float GCAnimGraphNetworkedVariables::GetLastTeleportTime() const {
    return GetSchemaValue<float>(m_ptr, "CAnimGraphNetworkedVariables", "m_flLastTeleportTime");
}

void GCAnimGraphNetworkedVariables::SetLastTeleportTime(float value) {
    SetSchemaValue(m_ptr, "CAnimGraphNetworkedVariables", "m_flLastTeleportTime", false, value);
}

std::string GCAnimGraphNetworkedVariables::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimGraphNetworkedVariables::IsValid() {
    return (m_ptr != nullptr);
}

GCBodyComponent::GCBodyComponent(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBodyComponent::GCBodyComponent(void *ptr) {
    m_ptr = ptr;
}

GCGameSceneNode GCBodyComponent::GetSceneNode() const {
    GCGameSceneNode value(GetSchemaValuePtr<void>(m_ptr, "CBodyComponent", "m_pSceneNode"));
    return value;
}

void GCBodyComponent::SetSceneNode(GCGameSceneNode* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'SceneNode' is not possible.\n");
}

GCNetworkVarChainer GCBodyComponent::Get__pChainEntity() const {
    return GetSchemaValue<GCNetworkVarChainer>(m_ptr, "CBodyComponent", "__m_pChainEntity");
}

void GCBodyComponent::Set__pChainEntity(GCNetworkVarChainer value) {
    SetSchemaValue(m_ptr, "CBodyComponent", "__m_pChainEntity", false, value);
}

std::string GCBodyComponent::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBodyComponent::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvFireSensor::GCEnvFireSensor(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvFireSensor::GCEnvFireSensor(void *ptr) {
    m_ptr = ptr;
}

bool GCEnvFireSensor::GetEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvFireSensor", "m_bEnabled");
}

void GCEnvFireSensor::SetEnabled(bool value) {
    SetSchemaValue(m_ptr, "CEnvFireSensor", "m_bEnabled", false, value);
}

bool GCEnvFireSensor::GetHeatAtLevel() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvFireSensor", "m_bHeatAtLevel");
}

void GCEnvFireSensor::SetHeatAtLevel(bool value) {
    SetSchemaValue(m_ptr, "CEnvFireSensor", "m_bHeatAtLevel", false, value);
}

float GCEnvFireSensor::GetRadius() const {
    return GetSchemaValue<float>(m_ptr, "CEnvFireSensor", "m_radius");
}

void GCEnvFireSensor::SetRadius(float value) {
    SetSchemaValue(m_ptr, "CEnvFireSensor", "m_radius", false, value);
}

float GCEnvFireSensor::GetTargetLevel() const {
    return GetSchemaValue<float>(m_ptr, "CEnvFireSensor", "m_targetLevel");
}

void GCEnvFireSensor::SetTargetLevel(float value) {
    SetSchemaValue(m_ptr, "CEnvFireSensor", "m_targetLevel", false, value);
}

float GCEnvFireSensor::GetTargetTime() const {
    return GetSchemaValue<float>(m_ptr, "CEnvFireSensor", "m_targetTime");
}

void GCEnvFireSensor::SetTargetTime(float value) {
    SetSchemaValue(m_ptr, "CEnvFireSensor", "m_targetTime", false, value);
}

float GCEnvFireSensor::GetLevelTime() const {
    return GetSchemaValue<float>(m_ptr, "CEnvFireSensor", "m_levelTime");
}

void GCEnvFireSensor::SetLevelTime(float value) {
    SetSchemaValue(m_ptr, "CEnvFireSensor", "m_levelTime", false, value);
}

GCEntityIOOutput GCEnvFireSensor::GetOnHeatLevelStart() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CEnvFireSensor", "m_OnHeatLevelStart");
}

void GCEnvFireSensor::SetOnHeatLevelStart(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CEnvFireSensor", "m_OnHeatLevelStart", false, value);
}

GCEntityIOOutput GCEnvFireSensor::GetOnHeatLevelEnd() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CEnvFireSensor", "m_OnHeatLevelEnd");
}

void GCEnvFireSensor::SetOnHeatLevelEnd(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CEnvFireSensor", "m_OnHeatLevelEnd", false, value);
}

std::string GCEnvFireSensor::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvFireSensor::IsValid() {
    return (m_ptr != nullptr);
}

GCCSGO_TeamPreviewCharacterPosition::GCCSGO_TeamPreviewCharacterPosition(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSGO_TeamPreviewCharacterPosition::GCCSGO_TeamPreviewCharacterPosition(void *ptr) {
    m_ptr = ptr;
}

int32_t GCCSGO_TeamPreviewCharacterPosition::GetVariant() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGO_TeamPreviewCharacterPosition", "m_nVariant");
}

void GCCSGO_TeamPreviewCharacterPosition::SetVariant(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGO_TeamPreviewCharacterPosition", "m_nVariant", false, value);
}

int32_t GCCSGO_TeamPreviewCharacterPosition::GetRandom() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGO_TeamPreviewCharacterPosition", "m_nRandom");
}

void GCCSGO_TeamPreviewCharacterPosition::SetRandom(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGO_TeamPreviewCharacterPosition", "m_nRandom", false, value);
}

int32_t GCCSGO_TeamPreviewCharacterPosition::GetOrdinal() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGO_TeamPreviewCharacterPosition", "m_nOrdinal");
}

void GCCSGO_TeamPreviewCharacterPosition::SetOrdinal(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGO_TeamPreviewCharacterPosition", "m_nOrdinal", false, value);
}

CUtlString GCCSGO_TeamPreviewCharacterPosition::GetWeaponName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CCSGO_TeamPreviewCharacterPosition", "m_sWeaponName");
}

void GCCSGO_TeamPreviewCharacterPosition::SetWeaponName(CUtlString value) {
    SetSchemaValue(m_ptr, "CCSGO_TeamPreviewCharacterPosition", "m_sWeaponName", false, value);
}

uint64_t GCCSGO_TeamPreviewCharacterPosition::GetXuid() const {
    return GetSchemaValue<uint64_t>(m_ptr, "CCSGO_TeamPreviewCharacterPosition", "m_xuid");
}

void GCCSGO_TeamPreviewCharacterPosition::SetXuid(uint64_t value) {
    SetSchemaValue(m_ptr, "CCSGO_TeamPreviewCharacterPosition", "m_xuid", false, value);
}

GCEconItemView GCCSGO_TeamPreviewCharacterPosition::GetAgentItem() const {
    return GetSchemaValue<GCEconItemView>(m_ptr, "CCSGO_TeamPreviewCharacterPosition", "m_agentItem");
}

void GCCSGO_TeamPreviewCharacterPosition::SetAgentItem(GCEconItemView value) {
    SetSchemaValue(m_ptr, "CCSGO_TeamPreviewCharacterPosition", "m_agentItem", false, value);
}

GCEconItemView GCCSGO_TeamPreviewCharacterPosition::GetGlovesItem() const {
    return GetSchemaValue<GCEconItemView>(m_ptr, "CCSGO_TeamPreviewCharacterPosition", "m_glovesItem");
}

void GCCSGO_TeamPreviewCharacterPosition::SetGlovesItem(GCEconItemView value) {
    SetSchemaValue(m_ptr, "CCSGO_TeamPreviewCharacterPosition", "m_glovesItem", false, value);
}

GCEconItemView GCCSGO_TeamPreviewCharacterPosition::GetWeaponItem() const {
    return GetSchemaValue<GCEconItemView>(m_ptr, "CCSGO_TeamPreviewCharacterPosition", "m_weaponItem");
}

void GCCSGO_TeamPreviewCharacterPosition::SetWeaponItem(GCEconItemView value) {
    SetSchemaValue(m_ptr, "CCSGO_TeamPreviewCharacterPosition", "m_weaponItem", false, value);
}

std::string GCCSGO_TeamPreviewCharacterPosition::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSGO_TeamPreviewCharacterPosition::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvWindShared__WindAveEvent_t::GCEnvWindShared__WindAveEvent_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvWindShared__WindAveEvent_t::GCEnvWindShared__WindAveEvent_t(void *ptr) {
    m_ptr = ptr;
}

float GCEnvWindShared__WindAveEvent_t::GetStartWindSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CEnvWindShared__WindAveEvent_t", "m_flStartWindSpeed");
}

void GCEnvWindShared__WindAveEvent_t::SetStartWindSpeed(float value) {
    SetSchemaValue(m_ptr, "CEnvWindShared__WindAveEvent_t", "m_flStartWindSpeed", true, value);
}

float GCEnvWindShared__WindAveEvent_t::GetAveWindSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CEnvWindShared__WindAveEvent_t", "m_flAveWindSpeed");
}

void GCEnvWindShared__WindAveEvent_t::SetAveWindSpeed(float value) {
    SetSchemaValue(m_ptr, "CEnvWindShared__WindAveEvent_t", "m_flAveWindSpeed", true, value);
}

std::string GCEnvWindShared__WindAveEvent_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvWindShared__WindAveEvent_t::IsValid() {
    return (m_ptr != nullptr);
}

GCBaseProp::GCBaseProp(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBaseProp::GCBaseProp(void *ptr) {
    m_ptr = ptr;
}

bool GCBaseProp::GetModelOverrodeBlockLOS() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseProp", "m_bModelOverrodeBlockLOS");
}

void GCBaseProp::SetModelOverrodeBlockLOS(bool value) {
    SetSchemaValue(m_ptr, "CBaseProp", "m_bModelOverrodeBlockLOS", false, value);
}

int32_t GCBaseProp::GetShapeType() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBaseProp", "m_iShapeType");
}

void GCBaseProp::SetShapeType(int32_t value) {
    SetSchemaValue(m_ptr, "CBaseProp", "m_iShapeType", false, value);
}

bool GCBaseProp::GetConformToCollisionBounds() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseProp", "m_bConformToCollisionBounds");
}

void GCBaseProp::SetConformToCollisionBounds(bool value) {
    SetSchemaValue(m_ptr, "CBaseProp", "m_bConformToCollisionBounds", false, value);
}

matrix3x4_t GCBaseProp::GetMPreferredCatchTransform() const {
    return GetSchemaValue<matrix3x4_t>(m_ptr, "CBaseProp", "m_mPreferredCatchTransform");
}

void GCBaseProp::SetMPreferredCatchTransform(matrix3x4_t value) {
    SetSchemaValue(m_ptr, "CBaseProp", "m_mPreferredCatchTransform", false, value);
}

std::string GCBaseProp::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBaseProp::IsValid() {
    return (m_ptr != nullptr);
}

GCPointGamestatsCounter::GCPointGamestatsCounter(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPointGamestatsCounter::GCPointGamestatsCounter(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCPointGamestatsCounter::GetStrStatisticName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPointGamestatsCounter", "m_strStatisticName");
}

void GCPointGamestatsCounter::SetStrStatisticName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPointGamestatsCounter", "m_strStatisticName", false, value);
}

bool GCPointGamestatsCounter::GetDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CPointGamestatsCounter", "m_bDisabled");
}

void GCPointGamestatsCounter::SetDisabled(bool value) {
    SetSchemaValue(m_ptr, "CPointGamestatsCounter", "m_bDisabled", false, value);
}

std::string GCPointGamestatsCounter::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPointGamestatsCounter::IsValid() {
    return (m_ptr != nullptr);
}

GCPhysicsShake::GCPhysicsShake(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPhysicsShake::GCPhysicsShake(void *ptr) {
    m_ptr = ptr;
}

Vector GCPhysicsShake::GetForce() const {
    return GetSchemaValue<Vector>(m_ptr, "CPhysicsShake", "m_force");
}

void GCPhysicsShake::SetForce(Vector value) {
    SetSchemaValue(m_ptr, "CPhysicsShake", "m_force", false, value);
}

std::string GCPhysicsShake::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPhysicsShake::IsValid() {
    return (m_ptr != nullptr);
}

GCBreakable::GCBreakable(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBreakable::GCBreakable(void *ptr) {
    m_ptr = ptr;
}

GCPropDataComponent GCBreakable::GetCPropDataComponent() const {
    return GetSchemaValue<GCPropDataComponent>(m_ptr, "CBreakable", "m_CPropDataComponent");
}

void GCBreakable::SetCPropDataComponent(GCPropDataComponent value) {
    SetSchemaValue(m_ptr, "CBreakable", "m_CPropDataComponent", false, value);
}

Materials GCBreakable::GetMaterial() const {
    return GetSchemaValue<Materials>(m_ptr, "CBreakable", "m_Material");
}

void GCBreakable::SetMaterial(Materials value) {
    SetSchemaValue(m_ptr, "CBreakable", "m_Material", false, value);
}

GCBaseEntity GCBreakable::GetBreaker() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CBreakable", "m_hBreaker"));
    return value;
}

void GCBreakable::SetBreaker(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Breaker' is not possible.\n");
}

Explosions GCBreakable::GetExplosion() const {
    return GetSchemaValue<Explosions>(m_ptr, "CBreakable", "m_Explosion");
}

void GCBreakable::SetExplosion(Explosions value) {
    SetSchemaValue(m_ptr, "CBreakable", "m_Explosion", false, value);
}

CUtlSymbolLarge GCBreakable::GetSpawnObject() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBreakable", "m_iszSpawnObject");
}

void GCBreakable::SetSpawnObject(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBreakable", "m_iszSpawnObject", false, value);
}

float GCBreakable::GetPressureDelay() const {
    return GetSchemaValue<float>(m_ptr, "CBreakable", "m_flPressureDelay");
}

void GCBreakable::SetPressureDelay(float value) {
    SetSchemaValue(m_ptr, "CBreakable", "m_flPressureDelay", false, value);
}

int32_t GCBreakable::GetMinHealthDmg() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBreakable", "m_iMinHealthDmg");
}

void GCBreakable::SetMinHealthDmg(int32_t value) {
    SetSchemaValue(m_ptr, "CBreakable", "m_iMinHealthDmg", false, value);
}

CUtlSymbolLarge GCBreakable::GetPropData() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBreakable", "m_iszPropData");
}

void GCBreakable::SetPropData(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBreakable", "m_iszPropData", false, value);
}

float GCBreakable::GetImpactEnergyScale() const {
    return GetSchemaValue<float>(m_ptr, "CBreakable", "m_impactEnergyScale");
}

void GCBreakable::SetImpactEnergyScale(float value) {
    SetSchemaValue(m_ptr, "CBreakable", "m_impactEnergyScale", false, value);
}

EOverrideBlockLOS_t GCBreakable::GetOverrideBlockLOS() const {
    return GetSchemaValue<EOverrideBlockLOS_t>(m_ptr, "CBreakable", "m_nOverrideBlockLOS");
}

void GCBreakable::SetOverrideBlockLOS(EOverrideBlockLOS_t value) {
    SetSchemaValue(m_ptr, "CBreakable", "m_nOverrideBlockLOS", false, value);
}

GCEntityIOOutput GCBreakable::GetOnBreak() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBreakable", "m_OnBreak");
}

void GCBreakable::SetOnBreak(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBreakable", "m_OnBreak", false, value);
}

PerformanceMode_t GCBreakable::GetPerformanceMode() const {
    return GetSchemaValue<PerformanceMode_t>(m_ptr, "CBreakable", "m_PerformanceMode");
}

void GCBreakable::SetPerformanceMode(PerformanceMode_t value) {
    SetSchemaValue(m_ptr, "CBreakable", "m_PerformanceMode", false, value);
}

GCBasePlayerPawn GCBreakable::GetPhysicsAttacker() const {
    GCBasePlayerPawn value(GetSchemaValuePtr<void>(m_ptr, "CBreakable", "m_hPhysicsAttacker"));
    return value;
}

void GCBreakable::SetPhysicsAttacker(GCBasePlayerPawn* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'PhysicsAttacker' is not possible.\n");
}

std::string GCBreakable::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBreakable::IsValid() {
    return (m_ptr != nullptr);
}

GCPathKeyFrame::GCPathKeyFrame(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPathKeyFrame::GCPathKeyFrame(void *ptr) {
    m_ptr = ptr;
}

Vector GCPathKeyFrame::GetOrigin() const {
    return GetSchemaValue<Vector>(m_ptr, "CPathKeyFrame", "m_Origin");
}

void GCPathKeyFrame::SetOrigin(Vector value) {
    SetSchemaValue(m_ptr, "CPathKeyFrame", "m_Origin", false, value);
}

QAngle GCPathKeyFrame::GetAngles() const {
    return GetSchemaValue<QAngle>(m_ptr, "CPathKeyFrame", "m_Angles");
}

void GCPathKeyFrame::SetAngles(QAngle value) {
    SetSchemaValue(m_ptr, "CPathKeyFrame", "m_Angles", false, value);
}

Quaternion GCPathKeyFrame::GetAngle() const {
    return GetSchemaValue<Quaternion>(m_ptr, "CPathKeyFrame", "m_qAngle");
}

void GCPathKeyFrame::SetAngle(Quaternion value) {
    SetSchemaValue(m_ptr, "CPathKeyFrame", "m_qAngle", false, value);
}

CUtlSymbolLarge GCPathKeyFrame::GetNextKey() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPathKeyFrame", "m_iNextKey");
}

void GCPathKeyFrame::SetNextKey(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPathKeyFrame", "m_iNextKey", false, value);
}

float GCPathKeyFrame::GetNextTime() const {
    return GetSchemaValue<float>(m_ptr, "CPathKeyFrame", "m_flNextTime");
}

void GCPathKeyFrame::SetNextTime(float value) {
    SetSchemaValue(m_ptr, "CPathKeyFrame", "m_flNextTime", false, value);
}

GCPathKeyFrame GCPathKeyFrame::GetNextKey1() const {
    GCPathKeyFrame value(GetSchemaValuePtr<void>(m_ptr, "CPathKeyFrame", "m_pNextKey"));
    return value;
}

void GCPathKeyFrame::SetNextKey1(GCPathKeyFrame* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'NextKey1' is not possible.\n");
}

GCPathKeyFrame GCPathKeyFrame::GetPrevKey() const {
    GCPathKeyFrame value(GetSchemaValuePtr<void>(m_ptr, "CPathKeyFrame", "m_pPrevKey"));
    return value;
}

void GCPathKeyFrame::SetPrevKey(GCPathKeyFrame* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'PrevKey' is not possible.\n");
}

float GCPathKeyFrame::GetMoveSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CPathKeyFrame", "m_flMoveSpeed");
}

void GCPathKeyFrame::SetMoveSpeed(float value) {
    SetSchemaValue(m_ptr, "CPathKeyFrame", "m_flMoveSpeed", false, value);
}

std::string GCPathKeyFrame::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPathKeyFrame::IsValid() {
    return (m_ptr != nullptr);
}

GCTriggerTripWire::GCTriggerTripWire(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTriggerTripWire::GCTriggerTripWire(void *ptr) {
    m_ptr = ptr;
}

std::string GCTriggerTripWire::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTriggerTripWire::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvTilt::GCEnvTilt(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvTilt::GCEnvTilt(void *ptr) {
    m_ptr = ptr;
}

float GCEnvTilt::GetDuration() const {
    return GetSchemaValue<float>(m_ptr, "CEnvTilt", "m_Duration");
}

void GCEnvTilt::SetDuration(float value) {
    SetSchemaValue(m_ptr, "CEnvTilt", "m_Duration", false, value);
}

float GCEnvTilt::GetRadius() const {
    return GetSchemaValue<float>(m_ptr, "CEnvTilt", "m_Radius");
}

void GCEnvTilt::SetRadius(float value) {
    SetSchemaValue(m_ptr, "CEnvTilt", "m_Radius", false, value);
}

float GCEnvTilt::GetTiltTime() const {
    return GetSchemaValue<float>(m_ptr, "CEnvTilt", "m_TiltTime");
}

void GCEnvTilt::SetTiltTime(float value) {
    SetSchemaValue(m_ptr, "CEnvTilt", "m_TiltTime", false, value);
}

std::string GCEnvTilt::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvTilt::IsValid() {
    return (m_ptr != nullptr);
}

GCAttributeContainer::GCAttributeContainer(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAttributeContainer::GCAttributeContainer(void *ptr) {
    m_ptr = ptr;
}

GCEconItemView GCAttributeContainer::GetItem() const {
    return GetSchemaValue<GCEconItemView>(m_ptr, "CAttributeContainer", "m_Item");
}

void GCAttributeContainer::SetItem(GCEconItemView value) {
    SetSchemaValue(m_ptr, "CAttributeContainer", "m_Item", false, value);
}

std::string GCAttributeContainer::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAttributeContainer::IsValid() {
    return (m_ptr != nullptr);
}

GCItemGenericTriggerHelper::GCItemGenericTriggerHelper(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCItemGenericTriggerHelper::GCItemGenericTriggerHelper(void *ptr) {
    m_ptr = ptr;
}

std::string GCItemGenericTriggerHelper::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCItemGenericTriggerHelper::IsValid() {
    return (m_ptr != nullptr);
}

GCLogicBranchList::GCLogicBranchList(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCLogicBranchList::GCLogicBranchList(void *ptr) {
    m_ptr = ptr;
}

std::vector<CUtlSymbolLarge> GCLogicBranchList::GetLogicBranchNames() const {
    CUtlSymbolLarge* outValue = GetSchemaValue<CUtlSymbolLarge*>(m_ptr, "CLogicBranchList", "m_nLogicBranchNames"); std::vector<CUtlSymbolLarge> ret; for(int i = 0; i < 16; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCLogicBranchList::SetLogicBranchNames(std::vector<CUtlSymbolLarge> value) {
    CUtlSymbolLarge* outValue = GetSchemaValue<CUtlSymbolLarge*>(m_ptr, "CLogicBranchList", "m_nLogicBranchNames"); for(int i = 0; i < 16; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CLogicBranchList", "m_nLogicBranchNames", false, outValue);
}

GCLogicBranchList GCLogicBranchList::GetLastState() const {
    return GetSchemaValue<GCLogicBranchList>(m_ptr, "CLogicBranchList", "m_eLastState");
}

void GCLogicBranchList::SetLastState(GCLogicBranchList value) {
    SetSchemaValue(m_ptr, "CLogicBranchList", "m_eLastState", false, value);
}

GCEntityIOOutput GCLogicBranchList::GetOnAllTrue() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CLogicBranchList", "m_OnAllTrue");
}

void GCLogicBranchList::SetOnAllTrue(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CLogicBranchList", "m_OnAllTrue", false, value);
}

GCEntityIOOutput GCLogicBranchList::GetOnAllFalse() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CLogicBranchList", "m_OnAllFalse");
}

void GCLogicBranchList::SetOnAllFalse(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CLogicBranchList", "m_OnAllFalse", false, value);
}

GCEntityIOOutput GCLogicBranchList::GetOnMixed() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CLogicBranchList", "m_OnMixed");
}

void GCLogicBranchList::SetOnMixed(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CLogicBranchList", "m_OnMixed", false, value);
}

std::string GCLogicBranchList::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCLogicBranchList::IsValid() {
    return (m_ptr != nullptr);
}

Gaudioparams_t::Gaudioparams_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

Gaudioparams_t::Gaudioparams_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<Vector> Gaudioparams_t::GetLocalSound() const {
    Vector* outValue = GetSchemaValue<Vector*>(m_ptr, "audioparams_t", "localSound"); std::vector<Vector> ret; for(int i = 0; i < 8; i++) { ret.push_back(outValue[i]); } return ret;
}

void Gaudioparams_t::SetLocalSound(std::vector<Vector> value) {
    Vector* outValue = GetSchemaValue<Vector*>(m_ptr, "audioparams_t", "localSound"); for(int i = 0; i < 8; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "audioparams_t", "localSound", true, outValue);
}

int32_t Gaudioparams_t::GetSoundscapeIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "audioparams_t", "soundscapeIndex");
}

void Gaudioparams_t::SetSoundscapeIndex(int32_t value) {
    SetSchemaValue(m_ptr, "audioparams_t", "soundscapeIndex", true, value);
}

uint8_t Gaudioparams_t::GetLocalBits() const {
    return GetSchemaValue<uint8_t>(m_ptr, "audioparams_t", "localBits");
}

void Gaudioparams_t::SetLocalBits(uint8_t value) {
    SetSchemaValue(m_ptr, "audioparams_t", "localBits", true, value);
}

int32_t Gaudioparams_t::GetSoundscapeEntityListIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "audioparams_t", "soundscapeEntityListIndex");
}

void Gaudioparams_t::SetSoundscapeEntityListIndex(int32_t value) {
    SetSchemaValue(m_ptr, "audioparams_t", "soundscapeEntityListIndex", true, value);
}

uint32_t Gaudioparams_t::GetSoundEventHash() const {
    return GetSchemaValue<uint32_t>(m_ptr, "audioparams_t", "soundEventHash");
}

void Gaudioparams_t::SetSoundEventHash(uint32_t value) {
    SetSchemaValue(m_ptr, "audioparams_t", "soundEventHash", true, value);
}

std::string Gaudioparams_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool Gaudioparams_t::IsValid() {
    return (m_ptr != nullptr);
}

GCEconEntity::GCEconEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEconEntity::GCEconEntity(void *ptr) {
    m_ptr = ptr;
}

GCAttributeContainer GCEconEntity::GetAttributeManager() const {
    return GetSchemaValue<GCAttributeContainer>(m_ptr, "CEconEntity", "m_AttributeManager");
}

void GCEconEntity::SetAttributeManager(GCAttributeContainer value) {
    SetSchemaValue(m_ptr, "CEconEntity", "m_AttributeManager", false, value);
}

uint32_t GCEconEntity::GetOriginalOwnerXuidLow() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CEconEntity", "m_OriginalOwnerXuidLow");
}

void GCEconEntity::SetOriginalOwnerXuidLow(uint32_t value) {
    SetSchemaValue(m_ptr, "CEconEntity", "m_OriginalOwnerXuidLow", false, value);
}

uint32_t GCEconEntity::GetOriginalOwnerXuidHigh() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CEconEntity", "m_OriginalOwnerXuidHigh");
}

void GCEconEntity::SetOriginalOwnerXuidHigh(uint32_t value) {
    SetSchemaValue(m_ptr, "CEconEntity", "m_OriginalOwnerXuidHigh", false, value);
}

int32_t GCEconEntity::GetFallbackPaintKit() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEconEntity", "m_nFallbackPaintKit");
}

void GCEconEntity::SetFallbackPaintKit(int32_t value) {
    SetSchemaValue(m_ptr, "CEconEntity", "m_nFallbackPaintKit", false, value);
}

int32_t GCEconEntity::GetFallbackSeed() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEconEntity", "m_nFallbackSeed");
}

void GCEconEntity::SetFallbackSeed(int32_t value) {
    SetSchemaValue(m_ptr, "CEconEntity", "m_nFallbackSeed", false, value);
}

float GCEconEntity::GetFallbackWear() const {
    return GetSchemaValue<float>(m_ptr, "CEconEntity", "m_flFallbackWear");
}

void GCEconEntity::SetFallbackWear(float value) {
    SetSchemaValue(m_ptr, "CEconEntity", "m_flFallbackWear", false, value);
}

int32_t GCEconEntity::GetFallbackStatTrak() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEconEntity", "m_nFallbackStatTrak");
}

void GCEconEntity::SetFallbackStatTrak(int32_t value) {
    SetSchemaValue(m_ptr, "CEconEntity", "m_nFallbackStatTrak", false, value);
}

GCBaseEntity GCEconEntity::GetOldProvidee() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CEconEntity", "m_hOldProvidee"));
    return value;
}

void GCEconEntity::SetOldProvidee(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OldProvidee' is not possible.\n");
}

int32_t GCEconEntity::GetOldOwnerClass() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEconEntity", "m_iOldOwnerClass");
}

void GCEconEntity::SetOldOwnerClass(int32_t value) {
    SetSchemaValue(m_ptr, "CEconEntity", "m_iOldOwnerClass", false, value);
}

std::string GCEconEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEconEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCModelPointEntity::GCModelPointEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCModelPointEntity::GCModelPointEntity(void *ptr) {
    m_ptr = ptr;
}

std::string GCModelPointEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCModelPointEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCMultiLightProxy::GCMultiLightProxy(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMultiLightProxy::GCMultiLightProxy(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCMultiLightProxy::GetLightNameFilter() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CMultiLightProxy", "m_iszLightNameFilter");
}

void GCMultiLightProxy::SetLightNameFilter(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CMultiLightProxy", "m_iszLightNameFilter", false, value);
}

CUtlSymbolLarge GCMultiLightProxy::GetLightClassFilter() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CMultiLightProxy", "m_iszLightClassFilter");
}

void GCMultiLightProxy::SetLightClassFilter(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CMultiLightProxy", "m_iszLightClassFilter", false, value);
}

float GCMultiLightProxy::GetLightRadiusFilter() const {
    return GetSchemaValue<float>(m_ptr, "CMultiLightProxy", "m_flLightRadiusFilter");
}

void GCMultiLightProxy::SetLightRadiusFilter(float value) {
    SetSchemaValue(m_ptr, "CMultiLightProxy", "m_flLightRadiusFilter", false, value);
}

float GCMultiLightProxy::GetBrightnessDelta() const {
    return GetSchemaValue<float>(m_ptr, "CMultiLightProxy", "m_flBrightnessDelta");
}

void GCMultiLightProxy::SetBrightnessDelta(float value) {
    SetSchemaValue(m_ptr, "CMultiLightProxy", "m_flBrightnessDelta", false, value);
}

bool GCMultiLightProxy::GetPerformScreenFade() const {
    return GetSchemaValue<bool>(m_ptr, "CMultiLightProxy", "m_bPerformScreenFade");
}

void GCMultiLightProxy::SetPerformScreenFade(bool value) {
    SetSchemaValue(m_ptr, "CMultiLightProxy", "m_bPerformScreenFade", false, value);
}

float GCMultiLightProxy::GetTargetBrightnessMultiplier() const {
    return GetSchemaValue<float>(m_ptr, "CMultiLightProxy", "m_flTargetBrightnessMultiplier");
}

void GCMultiLightProxy::SetTargetBrightnessMultiplier(float value) {
    SetSchemaValue(m_ptr, "CMultiLightProxy", "m_flTargetBrightnessMultiplier", false, value);
}

float GCMultiLightProxy::GetCurrentBrightnessMultiplier() const {
    return GetSchemaValue<float>(m_ptr, "CMultiLightProxy", "m_flCurrentBrightnessMultiplier");
}

void GCMultiLightProxy::SetCurrentBrightnessMultiplier(float value) {
    SetSchemaValue(m_ptr, "CMultiLightProxy", "m_flCurrentBrightnessMultiplier", false, value);
}

std::string GCMultiLightProxy::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMultiLightProxy::IsValid() {
    return (m_ptr != nullptr);
}

GCEffectData::GCEffectData(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEffectData::GCEffectData(void *ptr) {
    m_ptr = ptr;
}

Vector GCEffectData::GetOrigin() const {
    return GetSchemaValue<Vector>(m_ptr, "CEffectData", "m_vOrigin");
}

void GCEffectData::SetOrigin(Vector value) {
    SetSchemaValue(m_ptr, "CEffectData", "m_vOrigin", false, value);
}

Vector GCEffectData::GetStart() const {
    return GetSchemaValue<Vector>(m_ptr, "CEffectData", "m_vStart");
}

void GCEffectData::SetStart(Vector value) {
    SetSchemaValue(m_ptr, "CEffectData", "m_vStart", false, value);
}

Vector GCEffectData::GetNormal() const {
    return GetSchemaValue<Vector>(m_ptr, "CEffectData", "m_vNormal");
}

void GCEffectData::SetNormal(Vector value) {
    SetSchemaValue(m_ptr, "CEffectData", "m_vNormal", false, value);
}

QAngle GCEffectData::GetAngles() const {
    return GetSchemaValue<QAngle>(m_ptr, "CEffectData", "m_vAngles");
}

void GCEffectData::SetAngles(QAngle value) {
    SetSchemaValue(m_ptr, "CEffectData", "m_vAngles", false, value);
}

GCEntityInstance GCEffectData::GetEntity() const {
    GCEntityInstance value(GetSchemaValuePtr<void>(m_ptr, "CEffectData", "m_hEntity"));
    return value;
}

void GCEffectData::SetEntity(GCEntityInstance* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Entity' is not possible.\n");
}

GCEntityInstance GCEffectData::GetOtherEntity() const {
    GCEntityInstance value(GetSchemaValuePtr<void>(m_ptr, "CEffectData", "m_hOtherEntity"));
    return value;
}

void GCEffectData::SetOtherEntity(GCEntityInstance* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OtherEntity' is not possible.\n");
}

float GCEffectData::GetScale() const {
    return GetSchemaValue<float>(m_ptr, "CEffectData", "m_flScale");
}

void GCEffectData::SetScale(float value) {
    SetSchemaValue(m_ptr, "CEffectData", "m_flScale", false, value);
}

float GCEffectData::GetMagnitude() const {
    return GetSchemaValue<float>(m_ptr, "CEffectData", "m_flMagnitude");
}

void GCEffectData::SetMagnitude(float value) {
    SetSchemaValue(m_ptr, "CEffectData", "m_flMagnitude", false, value);
}

float GCEffectData::GetRadius() const {
    return GetSchemaValue<float>(m_ptr, "CEffectData", "m_flRadius");
}

void GCEffectData::SetRadius(float value) {
    SetSchemaValue(m_ptr, "CEffectData", "m_flRadius", false, value);
}

CUtlStringToken GCEffectData::GetSurfaceProp() const {
    return GetSchemaValue<CUtlStringToken>(m_ptr, "CEffectData", "m_nSurfaceProp");
}

void GCEffectData::SetSurfaceProp(CUtlStringToken value) {
    SetSchemaValue(m_ptr, "CEffectData", "m_nSurfaceProp", false, value);
}

uint32_t GCEffectData::GetDamageType() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CEffectData", "m_nDamageType");
}

void GCEffectData::SetDamageType(uint32_t value) {
    SetSchemaValue(m_ptr, "CEffectData", "m_nDamageType", false, value);
}

uint8_t GCEffectData::GetPenetrate() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CEffectData", "m_nPenetrate");
}

void GCEffectData::SetPenetrate(uint8_t value) {
    SetSchemaValue(m_ptr, "CEffectData", "m_nPenetrate", false, value);
}

uint16_t GCEffectData::GetMaterial() const {
    return GetSchemaValue<uint16_t>(m_ptr, "CEffectData", "m_nMaterial");
}

void GCEffectData::SetMaterial(uint16_t value) {
    SetSchemaValue(m_ptr, "CEffectData", "m_nMaterial", false, value);
}

uint16_t GCEffectData::GetHitBox() const {
    return GetSchemaValue<uint16_t>(m_ptr, "CEffectData", "m_nHitBox");
}

void GCEffectData::SetHitBox(uint16_t value) {
    SetSchemaValue(m_ptr, "CEffectData", "m_nHitBox", false, value);
}

uint8_t GCEffectData::GetColor() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CEffectData", "m_nColor");
}

void GCEffectData::SetColor(uint8_t value) {
    SetSchemaValue(m_ptr, "CEffectData", "m_nColor", false, value);
}

uint8_t GCEffectData::GetFlags() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CEffectData", "m_fFlags");
}

void GCEffectData::SetFlags(uint8_t value) {
    SetSchemaValue(m_ptr, "CEffectData", "m_fFlags", false, value);
}

CUtlStringToken GCEffectData::GetAttachmentName() const {
    return GetSchemaValue<CUtlStringToken>(m_ptr, "CEffectData", "m_nAttachmentName");
}

void GCEffectData::SetAttachmentName(CUtlStringToken value) {
    SetSchemaValue(m_ptr, "CEffectData", "m_nAttachmentName", false, value);
}

uint16_t GCEffectData::GetEffectName() const {
    return GetSchemaValue<uint16_t>(m_ptr, "CEffectData", "m_iEffectName");
}

void GCEffectData::SetEffectName(uint16_t value) {
    SetSchemaValue(m_ptr, "CEffectData", "m_iEffectName", false, value);
}

uint8_t GCEffectData::GetExplosionType() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CEffectData", "m_nExplosionType");
}

void GCEffectData::SetExplosionType(uint8_t value) {
    SetSchemaValue(m_ptr, "CEffectData", "m_nExplosionType", false, value);
}

std::string GCEffectData::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEffectData::IsValid() {
    return (m_ptr != nullptr);
}

GCEntityBlocker::GCEntityBlocker(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEntityBlocker::GCEntityBlocker(void *ptr) {
    m_ptr = ptr;
}

std::string GCEntityBlocker::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEntityBlocker::IsValid() {
    return (m_ptr != nullptr);
}

GCLogicCase::GCLogicCase(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCLogicCase::GCLogicCase(void *ptr) {
    m_ptr = ptr;
}

std::vector<CUtlSymbolLarge> GCLogicCase::GetCase() const {
    CUtlSymbolLarge* outValue = GetSchemaValue<CUtlSymbolLarge*>(m_ptr, "CLogicCase", "m_nCase"); std::vector<CUtlSymbolLarge> ret; for(int i = 0; i < 32; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCLogicCase::SetCase(std::vector<CUtlSymbolLarge> value) {
    CUtlSymbolLarge* outValue = GetSchemaValue<CUtlSymbolLarge*>(m_ptr, "CLogicCase", "m_nCase"); for(int i = 0; i < 32; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CLogicCase", "m_nCase", false, outValue);
}

int32_t GCLogicCase::GetShuffleCases() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLogicCase", "m_nShuffleCases");
}

void GCLogicCase::SetShuffleCases(int32_t value) {
    SetSchemaValue(m_ptr, "CLogicCase", "m_nShuffleCases", false, value);
}

int32_t GCLogicCase::GetLastShuffleCase() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLogicCase", "m_nLastShuffleCase");
}

void GCLogicCase::SetLastShuffleCase(int32_t value) {
    SetSchemaValue(m_ptr, "CLogicCase", "m_nLastShuffleCase", false, value);
}

std::vector<uint8_t> GCLogicCase::GetUchShuffleCaseMap() const {
    uint8_t* outValue = GetSchemaValue<uint8_t*>(m_ptr, "CLogicCase", "m_uchShuffleCaseMap"); std::vector<uint8_t> ret; for(int i = 0; i < 32; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCLogicCase::SetUchShuffleCaseMap(std::vector<uint8_t> value) {
    uint8_t* outValue = GetSchemaValue<uint8_t*>(m_ptr, "CLogicCase", "m_uchShuffleCaseMap"); for(int i = 0; i < 32; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CLogicCase", "m_uchShuffleCaseMap", false, outValue);
}

std::vector<GCEntityIOOutput> GCLogicCase::GetOnCase() const {
    GCEntityIOOutput* outValue = GetSchemaValue<GCEntityIOOutput*>(m_ptr, "CLogicCase", "m_OnCase"); std::vector<GCEntityIOOutput> ret; for(int i = 0; i < 32; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCLogicCase::SetOnCase(std::vector<GCEntityIOOutput> value) {
    GCEntityIOOutput* outValue = GetSchemaValue<GCEntityIOOutput*>(m_ptr, "CLogicCase", "m_OnCase"); for(int i = 0; i < 32; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CLogicCase", "m_OnCase", false, outValue);
}

std::string GCLogicCase::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCLogicCase::IsValid() {
    return (m_ptr != nullptr);
}

GCItem::GCItem(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCItem::GCItem(void *ptr) {
    m_ptr = ptr;
}

GCEntityIOOutput GCItem::GetOnPlayerTouch() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CItem", "m_OnPlayerTouch");
}

void GCItem::SetOnPlayerTouch(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CItem", "m_OnPlayerTouch", false, value);
}

GCEntityIOOutput GCItem::GetOnPlayerPickup() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CItem", "m_OnPlayerPickup");
}

void GCItem::SetOnPlayerPickup(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CItem", "m_OnPlayerPickup", false, value);
}

bool GCItem::GetActivateWhenAtRest() const {
    return GetSchemaValue<bool>(m_ptr, "CItem", "m_bActivateWhenAtRest");
}

void GCItem::SetActivateWhenAtRest(bool value) {
    SetSchemaValue(m_ptr, "CItem", "m_bActivateWhenAtRest", false, value);
}

GCEntityIOOutput GCItem::GetOnCacheInteraction() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CItem", "m_OnCacheInteraction");
}

void GCItem::SetOnCacheInteraction(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CItem", "m_OnCacheInteraction", false, value);
}

GCEntityIOOutput GCItem::GetOnGlovePulled() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CItem", "m_OnGlovePulled");
}

void GCItem::SetOnGlovePulled(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CItem", "m_OnGlovePulled", false, value);
}

Vector GCItem::GetOriginalSpawnOrigin() const {
    return GetSchemaValue<Vector>(m_ptr, "CItem", "m_vOriginalSpawnOrigin");
}

void GCItem::SetOriginalSpawnOrigin(Vector value) {
    SetSchemaValue(m_ptr, "CItem", "m_vOriginalSpawnOrigin", false, value);
}

QAngle GCItem::GetOriginalSpawnAngles() const {
    return GetSchemaValue<QAngle>(m_ptr, "CItem", "m_vOriginalSpawnAngles");
}

void GCItem::SetOriginalSpawnAngles(QAngle value) {
    SetSchemaValue(m_ptr, "CItem", "m_vOriginalSpawnAngles", false, value);
}

bool GCItem::GetPhysStartAsleep() const {
    return GetSchemaValue<bool>(m_ptr, "CItem", "m_bPhysStartAsleep");
}

void GCItem::SetPhysStartAsleep(bool value) {
    SetSchemaValue(m_ptr, "CItem", "m_bPhysStartAsleep", false, value);
}

std::string GCItem::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCItem::IsValid() {
    return (m_ptr != nullptr);
}

GCRuleEntity::GCRuleEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCRuleEntity::GCRuleEntity(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCRuleEntity::GetMaster() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CRuleEntity", "m_iszMaster");
}

void GCRuleEntity::SetMaster(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CRuleEntity", "m_iszMaster", false, value);
}

std::string GCRuleEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCRuleEntity::IsValid() {
    return (m_ptr != nullptr);
}

GExtent::GExtent(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GExtent::GExtent(void *ptr) {
    m_ptr = ptr;
}

Vector GExtent::GetLo() const {
    return GetSchemaValue<Vector>(m_ptr, "Extent", "lo");
}

void GExtent::SetLo(Vector value) {
    SetSchemaValue(m_ptr, "Extent", "lo", false, value);
}

Vector GExtent::GetHi() const {
    return GetSchemaValue<Vector>(m_ptr, "Extent", "hi");
}

void GExtent::SetHi(Vector value) {
    SetSchemaValue(m_ptr, "Extent", "hi", false, value);
}

std::string GExtent::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GExtent::IsValid() {
    return (m_ptr != nullptr);
}

GCSoundEventEntity::GCSoundEventEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSoundEventEntity::GCSoundEventEntity(void *ptr) {
    m_ptr = ptr;
}

bool GCSoundEventEntity::GetStartOnSpawn() const {
    return GetSchemaValue<bool>(m_ptr, "CSoundEventEntity", "m_bStartOnSpawn");
}

void GCSoundEventEntity::SetStartOnSpawn(bool value) {
    SetSchemaValue(m_ptr, "CSoundEventEntity", "m_bStartOnSpawn", false, value);
}

bool GCSoundEventEntity::GetToLocalPlayer() const {
    return GetSchemaValue<bool>(m_ptr, "CSoundEventEntity", "m_bToLocalPlayer");
}

void GCSoundEventEntity::SetToLocalPlayer(bool value) {
    SetSchemaValue(m_ptr, "CSoundEventEntity", "m_bToLocalPlayer", false, value);
}

bool GCSoundEventEntity::GetStopOnNew() const {
    return GetSchemaValue<bool>(m_ptr, "CSoundEventEntity", "m_bStopOnNew");
}

void GCSoundEventEntity::SetStopOnNew(bool value) {
    SetSchemaValue(m_ptr, "CSoundEventEntity", "m_bStopOnNew", false, value);
}

bool GCSoundEventEntity::GetSaveRestore() const {
    return GetSchemaValue<bool>(m_ptr, "CSoundEventEntity", "m_bSaveRestore");
}

void GCSoundEventEntity::SetSaveRestore(bool value) {
    SetSchemaValue(m_ptr, "CSoundEventEntity", "m_bSaveRestore", false, value);
}

bool GCSoundEventEntity::GetSavedIsPlaying() const {
    return GetSchemaValue<bool>(m_ptr, "CSoundEventEntity", "m_bSavedIsPlaying");
}

void GCSoundEventEntity::SetSavedIsPlaying(bool value) {
    SetSchemaValue(m_ptr, "CSoundEventEntity", "m_bSavedIsPlaying", false, value);
}

float GCSoundEventEntity::GetSavedElapsedTime() const {
    return GetSchemaValue<float>(m_ptr, "CSoundEventEntity", "m_flSavedElapsedTime");
}

void GCSoundEventEntity::SetSavedElapsedTime(float value) {
    SetSchemaValue(m_ptr, "CSoundEventEntity", "m_flSavedElapsedTime", false, value);
}

CUtlSymbolLarge GCSoundEventEntity::GetSourceEntityName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSoundEventEntity", "m_iszSourceEntityName");
}

void GCSoundEventEntity::SetSourceEntityName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CSoundEventEntity", "m_iszSourceEntityName", false, value);
}

CUtlSymbolLarge GCSoundEventEntity::GetAttachmentName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSoundEventEntity", "m_iszAttachmentName");
}

void GCSoundEventEntity::SetAttachmentName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CSoundEventEntity", "m_iszAttachmentName", false, value);
}

GCEntityIOOutput GCSoundEventEntity::GetOnSoundFinished() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CSoundEventEntity", "m_onSoundFinished");
}

void GCSoundEventEntity::SetOnSoundFinished(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CSoundEventEntity", "m_onSoundFinished", false, value);
}

CUtlSymbolLarge GCSoundEventEntity::GetSoundName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSoundEventEntity", "m_iszSoundName");
}

void GCSoundEventEntity::SetSoundName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CSoundEventEntity", "m_iszSoundName", false, value);
}

GCEntityInstance GCSoundEventEntity::GetSource() const {
    GCEntityInstance value(GetSchemaValuePtr<void>(m_ptr, "CSoundEventEntity", "m_hSource"));
    return value;
}

void GCSoundEventEntity::SetSource(GCEntityInstance* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Source' is not possible.\n");
}

int32_t GCSoundEventEntity::GetEntityIndexSelection() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSoundEventEntity", "m_nEntityIndexSelection");
}

void GCSoundEventEntity::SetEntityIndexSelection(int32_t value) {
    SetSchemaValue(m_ptr, "CSoundEventEntity", "m_nEntityIndexSelection", false, value);
}

std::string GCSoundEventEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSoundEventEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCCSPlayer_ViewModelServices::GCCSPlayer_ViewModelServices(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSPlayer_ViewModelServices::GCCSPlayer_ViewModelServices(void *ptr) {
    m_ptr = ptr;
}

std::vector<GCBaseViewModel*> GCCSPlayer_ViewModelServices::GetViewModel() const {
    GCBaseViewModel** outValue = GetSchemaValue<GCBaseViewModel**>(m_ptr, "CCSPlayer_ViewModelServices", "m_hViewModel"); std::vector<GCBaseViewModel*> ret; for(int i = 0; i < 3; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCCSPlayer_ViewModelServices::SetViewModel(std::vector<GCBaseViewModel*> value) {
    GCBaseViewModel** outValue = GetSchemaValue<GCBaseViewModel**>(m_ptr, "CCSPlayer_ViewModelServices", "m_hViewModel"); for(int i = 0; i < 3; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CCSPlayer_ViewModelServices", "m_hViewModel", false, outValue);
}

std::string GCCSPlayer_ViewModelServices::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSPlayer_ViewModelServices::IsValid() {
    return (m_ptr != nullptr);
}

GCBasePlayerWeapon::GCBasePlayerWeapon(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBasePlayerWeapon::GCBasePlayerWeapon(void *ptr) {
    m_ptr = ptr;
}

float GCBasePlayerWeapon::GetNextPrimaryAttackTickRatio() const {
    return GetSchemaValue<float>(m_ptr, "CBasePlayerWeapon", "m_flNextPrimaryAttackTickRatio");
}

void GCBasePlayerWeapon::SetNextPrimaryAttackTickRatio(float value) {
    SetSchemaValue(m_ptr, "CBasePlayerWeapon", "m_flNextPrimaryAttackTickRatio", false, value);
}

float GCBasePlayerWeapon::GetNextSecondaryAttackTickRatio() const {
    return GetSchemaValue<float>(m_ptr, "CBasePlayerWeapon", "m_flNextSecondaryAttackTickRatio");
}

void GCBasePlayerWeapon::SetNextSecondaryAttackTickRatio(float value) {
    SetSchemaValue(m_ptr, "CBasePlayerWeapon", "m_flNextSecondaryAttackTickRatio", false, value);
}

int32_t GCBasePlayerWeapon::GetClip1() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBasePlayerWeapon", "m_iClip1");
}

void GCBasePlayerWeapon::SetClip1(int32_t value) {
    SetSchemaValue(m_ptr, "CBasePlayerWeapon", "m_iClip1", false, value);
}

int32_t GCBasePlayerWeapon::GetClip2() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBasePlayerWeapon", "m_iClip2");
}

void GCBasePlayerWeapon::SetClip2(int32_t value) {
    SetSchemaValue(m_ptr, "CBasePlayerWeapon", "m_iClip2", false, value);
}

std::vector<int32_t> GCBasePlayerWeapon::GetReserveAmmo() const {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CBasePlayerWeapon", "m_pReserveAmmo"); std::vector<int32_t> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCBasePlayerWeapon::SetReserveAmmo(std::vector<int32_t> value) {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CBasePlayerWeapon", "m_pReserveAmmo"); for(int i = 0; i < 2; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CBasePlayerWeapon", "m_pReserveAmmo", false, outValue);
}

GCEntityIOOutput GCBasePlayerWeapon::GetOnPlayerUse() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBasePlayerWeapon", "m_OnPlayerUse");
}

void GCBasePlayerWeapon::SetOnPlayerUse(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBasePlayerWeapon", "m_OnPlayerUse", false, value);
}

std::string GCBasePlayerWeapon::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBasePlayerWeapon::IsValid() {
    return (m_ptr != nullptr);
}

GCInfoParticleTarget::GCInfoParticleTarget(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCInfoParticleTarget::GCInfoParticleTarget(void *ptr) {
    m_ptr = ptr;
}

std::string GCInfoParticleTarget::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCInfoParticleTarget::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvVolumetricFogController::GCEnvVolumetricFogController(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvVolumetricFogController::GCEnvVolumetricFogController(void *ptr) {
    m_ptr = ptr;
}

float GCEnvVolumetricFogController::GetScattering() const {
    return GetSchemaValue<float>(m_ptr, "CEnvVolumetricFogController", "m_flScattering");
}

void GCEnvVolumetricFogController::SetScattering(float value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogController", "m_flScattering", false, value);
}

float GCEnvVolumetricFogController::GetAnisotropy() const {
    return GetSchemaValue<float>(m_ptr, "CEnvVolumetricFogController", "m_flAnisotropy");
}

void GCEnvVolumetricFogController::SetAnisotropy(float value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogController", "m_flAnisotropy", false, value);
}

float GCEnvVolumetricFogController::GetFadeSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CEnvVolumetricFogController", "m_flFadeSpeed");
}

void GCEnvVolumetricFogController::SetFadeSpeed(float value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogController", "m_flFadeSpeed", false, value);
}

float GCEnvVolumetricFogController::GetDrawDistance() const {
    return GetSchemaValue<float>(m_ptr, "CEnvVolumetricFogController", "m_flDrawDistance");
}

void GCEnvVolumetricFogController::SetDrawDistance(float value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogController", "m_flDrawDistance", false, value);
}

float GCEnvVolumetricFogController::GetFadeInStart() const {
    return GetSchemaValue<float>(m_ptr, "CEnvVolumetricFogController", "m_flFadeInStart");
}

void GCEnvVolumetricFogController::SetFadeInStart(float value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogController", "m_flFadeInStart", false, value);
}

float GCEnvVolumetricFogController::GetFadeInEnd() const {
    return GetSchemaValue<float>(m_ptr, "CEnvVolumetricFogController", "m_flFadeInEnd");
}

void GCEnvVolumetricFogController::SetFadeInEnd(float value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogController", "m_flFadeInEnd", false, value);
}

float GCEnvVolumetricFogController::GetIndirectStrength() const {
    return GetSchemaValue<float>(m_ptr, "CEnvVolumetricFogController", "m_flIndirectStrength");
}

void GCEnvVolumetricFogController::SetIndirectStrength(float value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogController", "m_flIndirectStrength", false, value);
}

int32_t GCEnvVolumetricFogController::GetIndirectTextureDimX() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvVolumetricFogController", "m_nIndirectTextureDimX");
}

void GCEnvVolumetricFogController::SetIndirectTextureDimX(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogController", "m_nIndirectTextureDimX", false, value);
}

int32_t GCEnvVolumetricFogController::GetIndirectTextureDimY() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvVolumetricFogController", "m_nIndirectTextureDimY");
}

void GCEnvVolumetricFogController::SetIndirectTextureDimY(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogController", "m_nIndirectTextureDimY", false, value);
}

int32_t GCEnvVolumetricFogController::GetIndirectTextureDimZ() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvVolumetricFogController", "m_nIndirectTextureDimZ");
}

void GCEnvVolumetricFogController::SetIndirectTextureDimZ(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogController", "m_nIndirectTextureDimZ", false, value);
}

Vector GCEnvVolumetricFogController::GetBoxMins() const {
    return GetSchemaValue<Vector>(m_ptr, "CEnvVolumetricFogController", "m_vBoxMins");
}

void GCEnvVolumetricFogController::SetBoxMins(Vector value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogController", "m_vBoxMins", false, value);
}

Vector GCEnvVolumetricFogController::GetBoxMaxs() const {
    return GetSchemaValue<Vector>(m_ptr, "CEnvVolumetricFogController", "m_vBoxMaxs");
}

void GCEnvVolumetricFogController::SetBoxMaxs(Vector value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogController", "m_vBoxMaxs", false, value);
}

bool GCEnvVolumetricFogController::GetActive() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvVolumetricFogController", "m_bActive");
}

void GCEnvVolumetricFogController::SetActive(bool value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogController", "m_bActive", false, value);
}

float GCEnvVolumetricFogController::GetStartAnisotropy() const {
    return GetSchemaValue<float>(m_ptr, "CEnvVolumetricFogController", "m_flStartAnisotropy");
}

void GCEnvVolumetricFogController::SetStartAnisotropy(float value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogController", "m_flStartAnisotropy", false, value);
}

float GCEnvVolumetricFogController::GetStartScattering() const {
    return GetSchemaValue<float>(m_ptr, "CEnvVolumetricFogController", "m_flStartScattering");
}

void GCEnvVolumetricFogController::SetStartScattering(float value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogController", "m_flStartScattering", false, value);
}

float GCEnvVolumetricFogController::GetStartDrawDistance() const {
    return GetSchemaValue<float>(m_ptr, "CEnvVolumetricFogController", "m_flStartDrawDistance");
}

void GCEnvVolumetricFogController::SetStartDrawDistance(float value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogController", "m_flStartDrawDistance", false, value);
}

float GCEnvVolumetricFogController::GetDefaultAnisotropy() const {
    return GetSchemaValue<float>(m_ptr, "CEnvVolumetricFogController", "m_flDefaultAnisotropy");
}

void GCEnvVolumetricFogController::SetDefaultAnisotropy(float value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogController", "m_flDefaultAnisotropy", false, value);
}

float GCEnvVolumetricFogController::GetDefaultScattering() const {
    return GetSchemaValue<float>(m_ptr, "CEnvVolumetricFogController", "m_flDefaultScattering");
}

void GCEnvVolumetricFogController::SetDefaultScattering(float value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogController", "m_flDefaultScattering", false, value);
}

float GCEnvVolumetricFogController::GetDefaultDrawDistance() const {
    return GetSchemaValue<float>(m_ptr, "CEnvVolumetricFogController", "m_flDefaultDrawDistance");
}

void GCEnvVolumetricFogController::SetDefaultDrawDistance(float value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogController", "m_flDefaultDrawDistance", false, value);
}

bool GCEnvVolumetricFogController::GetStartDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvVolumetricFogController", "m_bStartDisabled");
}

void GCEnvVolumetricFogController::SetStartDisabled(bool value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogController", "m_bStartDisabled", false, value);
}

bool GCEnvVolumetricFogController::GetEnableIndirect() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvVolumetricFogController", "m_bEnableIndirect");
}

void GCEnvVolumetricFogController::SetEnableIndirect(bool value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogController", "m_bEnableIndirect", false, value);
}

bool GCEnvVolumetricFogController::GetIndirectUseLPVs() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvVolumetricFogController", "m_bIndirectUseLPVs");
}

void GCEnvVolumetricFogController::SetIndirectUseLPVs(bool value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogController", "m_bIndirectUseLPVs", false, value);
}

bool GCEnvVolumetricFogController::GetIsMaster() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvVolumetricFogController", "m_bIsMaster");
}

void GCEnvVolumetricFogController::SetIsMaster(bool value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogController", "m_bIsMaster", false, value);
}

int32_t GCEnvVolumetricFogController::GetForceRefreshCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvVolumetricFogController", "m_nForceRefreshCount");
}

void GCEnvVolumetricFogController::SetForceRefreshCount(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogController", "m_nForceRefreshCount", false, value);
}

float GCEnvVolumetricFogController::GetNoiseSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CEnvVolumetricFogController", "m_fNoiseSpeed");
}

void GCEnvVolumetricFogController::SetNoiseSpeed(float value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogController", "m_fNoiseSpeed", false, value);
}

float GCEnvVolumetricFogController::GetNoiseStrength() const {
    return GetSchemaValue<float>(m_ptr, "CEnvVolumetricFogController", "m_fNoiseStrength");
}

void GCEnvVolumetricFogController::SetNoiseStrength(float value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogController", "m_fNoiseStrength", false, value);
}

Vector GCEnvVolumetricFogController::GetNoiseScale() const {
    return GetSchemaValue<Vector>(m_ptr, "CEnvVolumetricFogController", "m_vNoiseScale");
}

void GCEnvVolumetricFogController::SetNoiseScale(Vector value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogController", "m_vNoiseScale", false, value);
}

bool GCEnvVolumetricFogController::GetFirstTime() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvVolumetricFogController", "m_bFirstTime");
}

void GCEnvVolumetricFogController::SetFirstTime(bool value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogController", "m_bFirstTime", false, value);
}

std::string GCEnvVolumetricFogController::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvVolumetricFogController::IsValid() {
    return (m_ptr != nullptr);
}

GCPlayer_MovementServices::GCPlayer_MovementServices(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPlayer_MovementServices::GCPlayer_MovementServices(void *ptr) {
    m_ptr = ptr;
}

int32_t GCPlayer_MovementServices::GetImpulse() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPlayer_MovementServices", "m_nImpulse");
}

void GCPlayer_MovementServices::SetImpulse(int32_t value) {
    SetSchemaValue(m_ptr, "CPlayer_MovementServices", "m_nImpulse", false, value);
}

GCInButtonState GCPlayer_MovementServices::GetButtons() const {
    return GetSchemaValue<GCInButtonState>(m_ptr, "CPlayer_MovementServices", "m_nButtons");
}

void GCPlayer_MovementServices::SetButtons(GCInButtonState value) {
    SetSchemaValue(m_ptr, "CPlayer_MovementServices", "m_nButtons", false, value);
}

uint64_t GCPlayer_MovementServices::GetQueuedButtonDownMask() const {
    return GetSchemaValue<uint64_t>(m_ptr, "CPlayer_MovementServices", "m_nQueuedButtonDownMask");
}

void GCPlayer_MovementServices::SetQueuedButtonDownMask(uint64_t value) {
    SetSchemaValue(m_ptr, "CPlayer_MovementServices", "m_nQueuedButtonDownMask", false, value);
}

uint64_t GCPlayer_MovementServices::GetQueuedButtonChangeMask() const {
    return GetSchemaValue<uint64_t>(m_ptr, "CPlayer_MovementServices", "m_nQueuedButtonChangeMask");
}

void GCPlayer_MovementServices::SetQueuedButtonChangeMask(uint64_t value) {
    SetSchemaValue(m_ptr, "CPlayer_MovementServices", "m_nQueuedButtonChangeMask", false, value);
}

uint64_t GCPlayer_MovementServices::GetButtonDoublePressed() const {
    return GetSchemaValue<uint64_t>(m_ptr, "CPlayer_MovementServices", "m_nButtonDoublePressed");
}

void GCPlayer_MovementServices::SetButtonDoublePressed(uint64_t value) {
    SetSchemaValue(m_ptr, "CPlayer_MovementServices", "m_nButtonDoublePressed", false, value);
}

std::vector<uint32_t> GCPlayer_MovementServices::GetButtonPressedCmdNumber() const {
    uint32_t* outValue = GetSchemaValue<uint32_t*>(m_ptr, "CPlayer_MovementServices", "m_pButtonPressedCmdNumber"); std::vector<uint32_t> ret; for(int i = 0; i < 64; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCPlayer_MovementServices::SetButtonPressedCmdNumber(std::vector<uint32_t> value) {
    uint32_t* outValue = GetSchemaValue<uint32_t*>(m_ptr, "CPlayer_MovementServices", "m_pButtonPressedCmdNumber"); for(int i = 0; i < 64; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CPlayer_MovementServices", "m_pButtonPressedCmdNumber", false, outValue);
}

uint32_t GCPlayer_MovementServices::GetLastCommandNumberProcessed() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CPlayer_MovementServices", "m_nLastCommandNumberProcessed");
}

void GCPlayer_MovementServices::SetLastCommandNumberProcessed(uint32_t value) {
    SetSchemaValue(m_ptr, "CPlayer_MovementServices", "m_nLastCommandNumberProcessed", false, value);
}

uint64_t GCPlayer_MovementServices::GetToggleButtonDownMask() const {
    return GetSchemaValue<uint64_t>(m_ptr, "CPlayer_MovementServices", "m_nToggleButtonDownMask");
}

void GCPlayer_MovementServices::SetToggleButtonDownMask(uint64_t value) {
    SetSchemaValue(m_ptr, "CPlayer_MovementServices", "m_nToggleButtonDownMask", false, value);
}

float GCPlayer_MovementServices::GetMaxspeed() const {
    return GetSchemaValue<float>(m_ptr, "CPlayer_MovementServices", "m_flMaxspeed");
}

void GCPlayer_MovementServices::SetMaxspeed(float value) {
    SetSchemaValue(m_ptr, "CPlayer_MovementServices", "m_flMaxspeed", false, value);
}

std::vector<float> GCPlayer_MovementServices::GetForceSubtickMoveWhen() const {
    float* outValue = GetSchemaValue<float*>(m_ptr, "CPlayer_MovementServices", "m_arrForceSubtickMoveWhen"); std::vector<float> ret; for(int i = 0; i < 4; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCPlayer_MovementServices::SetForceSubtickMoveWhen(std::vector<float> value) {
    float* outValue = GetSchemaValue<float*>(m_ptr, "CPlayer_MovementServices", "m_arrForceSubtickMoveWhen"); for(int i = 0; i < 4; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CPlayer_MovementServices", "m_arrForceSubtickMoveWhen", false, outValue);
}

float GCPlayer_MovementServices::GetForwardMove() const {
    return GetSchemaValue<float>(m_ptr, "CPlayer_MovementServices", "m_flForwardMove");
}

void GCPlayer_MovementServices::SetForwardMove(float value) {
    SetSchemaValue(m_ptr, "CPlayer_MovementServices", "m_flForwardMove", false, value);
}

float GCPlayer_MovementServices::GetLeftMove() const {
    return GetSchemaValue<float>(m_ptr, "CPlayer_MovementServices", "m_flLeftMove");
}

void GCPlayer_MovementServices::SetLeftMove(float value) {
    SetSchemaValue(m_ptr, "CPlayer_MovementServices", "m_flLeftMove", false, value);
}

float GCPlayer_MovementServices::GetUpMove() const {
    return GetSchemaValue<float>(m_ptr, "CPlayer_MovementServices", "m_flUpMove");
}

void GCPlayer_MovementServices::SetUpMove(float value) {
    SetSchemaValue(m_ptr, "CPlayer_MovementServices", "m_flUpMove", false, value);
}

Vector GCPlayer_MovementServices::GetLastMovementImpulses() const {
    return GetSchemaValue<Vector>(m_ptr, "CPlayer_MovementServices", "m_vecLastMovementImpulses");
}

void GCPlayer_MovementServices::SetLastMovementImpulses(Vector value) {
    SetSchemaValue(m_ptr, "CPlayer_MovementServices", "m_vecLastMovementImpulses", false, value);
}

QAngle GCPlayer_MovementServices::GetOldViewAngles() const {
    return GetSchemaValue<QAngle>(m_ptr, "CPlayer_MovementServices", "m_vecOldViewAngles");
}

void GCPlayer_MovementServices::SetOldViewAngles(QAngle value) {
    SetSchemaValue(m_ptr, "CPlayer_MovementServices", "m_vecOldViewAngles", false, value);
}

std::string GCPlayer_MovementServices::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPlayer_MovementServices::IsValid() {
    return (m_ptr != nullptr);
}

GCBreakableProp::GCBreakableProp(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBreakableProp::GCBreakableProp(void *ptr) {
    m_ptr = ptr;
}

GCPropDataComponent GCBreakableProp::GetCPropDataComponent() const {
    return GetSchemaValue<GCPropDataComponent>(m_ptr, "CBreakableProp", "m_CPropDataComponent");
}

void GCBreakableProp::SetCPropDataComponent(GCPropDataComponent value) {
    SetSchemaValue(m_ptr, "CBreakableProp", "m_CPropDataComponent", false, value);
}

GCEntityIOOutput GCBreakableProp::GetOnBreak() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBreakableProp", "m_OnBreak");
}

void GCBreakableProp::SetOnBreak(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBreakableProp", "m_OnBreak", false, value);
}

GCEntityIOOutput GCBreakableProp::GetOnTakeDamage() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBreakableProp", "m_OnTakeDamage");
}

void GCBreakableProp::SetOnTakeDamage(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBreakableProp", "m_OnTakeDamage", false, value);
}

float GCBreakableProp::GetImpactEnergyScale() const {
    return GetSchemaValue<float>(m_ptr, "CBreakableProp", "m_impactEnergyScale");
}

void GCBreakableProp::SetImpactEnergyScale(float value) {
    SetSchemaValue(m_ptr, "CBreakableProp", "m_impactEnergyScale", false, value);
}

int32_t GCBreakableProp::GetMinHealthDmg() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBreakableProp", "m_iMinHealthDmg");
}

void GCBreakableProp::SetMinHealthDmg(int32_t value) {
    SetSchemaValue(m_ptr, "CBreakableProp", "m_iMinHealthDmg", false, value);
}

QAngle GCBreakableProp::GetPreferredCarryAngles() const {
    return GetSchemaValue<QAngle>(m_ptr, "CBreakableProp", "m_preferredCarryAngles");
}

void GCBreakableProp::SetPreferredCarryAngles(QAngle value) {
    SetSchemaValue(m_ptr, "CBreakableProp", "m_preferredCarryAngles", false, value);
}

float GCBreakableProp::GetPressureDelay() const {
    return GetSchemaValue<float>(m_ptr, "CBreakableProp", "m_flPressureDelay");
}

void GCBreakableProp::SetPressureDelay(float value) {
    SetSchemaValue(m_ptr, "CBreakableProp", "m_flPressureDelay", false, value);
}

float GCBreakableProp::GetDefBurstScale() const {
    return GetSchemaValue<float>(m_ptr, "CBreakableProp", "m_flDefBurstScale");
}

void GCBreakableProp::SetDefBurstScale(float value) {
    SetSchemaValue(m_ptr, "CBreakableProp", "m_flDefBurstScale", false, value);
}

Vector GCBreakableProp::GetDefBurstOffset() const {
    return GetSchemaValue<Vector>(m_ptr, "CBreakableProp", "m_vDefBurstOffset");
}

void GCBreakableProp::SetDefBurstOffset(Vector value) {
    SetSchemaValue(m_ptr, "CBreakableProp", "m_vDefBurstOffset", false, value);
}

GCBaseEntity GCBreakableProp::GetBreaker() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CBreakableProp", "m_hBreaker"));
    return value;
}

void GCBreakableProp::SetBreaker(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Breaker' is not possible.\n");
}

PerformanceMode_t GCBreakableProp::GetPerformanceMode() const {
    return GetSchemaValue<PerformanceMode_t>(m_ptr, "CBreakableProp", "m_PerformanceMode");
}

void GCBreakableProp::SetPerformanceMode(PerformanceMode_t value) {
    SetSchemaValue(m_ptr, "CBreakableProp", "m_PerformanceMode", false, value);
}

bool GCBreakableProp::GetHasBreakPiecesOrCommands() const {
    return GetSchemaValue<bool>(m_ptr, "CBreakableProp", "m_bHasBreakPiecesOrCommands");
}

void GCBreakableProp::SetHasBreakPiecesOrCommands(bool value) {
    SetSchemaValue(m_ptr, "CBreakableProp", "m_bHasBreakPiecesOrCommands", false, value);
}

float GCBreakableProp::GetExplodeDamage() const {
    return GetSchemaValue<float>(m_ptr, "CBreakableProp", "m_explodeDamage");
}

void GCBreakableProp::SetExplodeDamage(float value) {
    SetSchemaValue(m_ptr, "CBreakableProp", "m_explodeDamage", false, value);
}

float GCBreakableProp::GetExplodeRadius() const {
    return GetSchemaValue<float>(m_ptr, "CBreakableProp", "m_explodeRadius");
}

void GCBreakableProp::SetExplodeRadius(float value) {
    SetSchemaValue(m_ptr, "CBreakableProp", "m_explodeRadius", false, value);
}

float GCBreakableProp::GetExplosionDelay() const {
    return GetSchemaValue<float>(m_ptr, "CBreakableProp", "m_explosionDelay");
}

void GCBreakableProp::SetExplosionDelay(float value) {
    SetSchemaValue(m_ptr, "CBreakableProp", "m_explosionDelay", false, value);
}

CUtlSymbolLarge GCBreakableProp::GetExplosionBuildupSound() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBreakableProp", "m_explosionBuildupSound");
}

void GCBreakableProp::SetExplosionBuildupSound(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBreakableProp", "m_explosionBuildupSound", false, value);
}

CUtlSymbolLarge GCBreakableProp::GetExplosionCustomEffect() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBreakableProp", "m_explosionCustomEffect");
}

void GCBreakableProp::SetExplosionCustomEffect(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBreakableProp", "m_explosionCustomEffect", false, value);
}

CUtlSymbolLarge GCBreakableProp::GetExplosionCustomSound() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBreakableProp", "m_explosionCustomSound");
}

void GCBreakableProp::SetExplosionCustomSound(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBreakableProp", "m_explosionCustomSound", false, value);
}

CUtlSymbolLarge GCBreakableProp::GetExplosionModifier() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBreakableProp", "m_explosionModifier");
}

void GCBreakableProp::SetExplosionModifier(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBreakableProp", "m_explosionModifier", false, value);
}

GCBasePlayerPawn GCBreakableProp::GetPhysicsAttacker() const {
    GCBasePlayerPawn value(GetSchemaValuePtr<void>(m_ptr, "CBreakableProp", "m_hPhysicsAttacker"));
    return value;
}

void GCBreakableProp::SetPhysicsAttacker(GCBasePlayerPawn* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'PhysicsAttacker' is not possible.\n");
}

bool GCBreakableProp::GetOriginalBlockLOS() const {
    return GetSchemaValue<bool>(m_ptr, "CBreakableProp", "m_bOriginalBlockLOS");
}

void GCBreakableProp::SetOriginalBlockLOS(bool value) {
    SetSchemaValue(m_ptr, "CBreakableProp", "m_bOriginalBlockLOS", false, value);
}

float GCBreakableProp::GetDefaultFadeScale() const {
    return GetSchemaValue<float>(m_ptr, "CBreakableProp", "m_flDefaultFadeScale");
}

void GCBreakableProp::SetDefaultFadeScale(float value) {
    SetSchemaValue(m_ptr, "CBreakableProp", "m_flDefaultFadeScale", false, value);
}

GCBaseEntity GCBreakableProp::GetLastAttacker() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CBreakableProp", "m_hLastAttacker"));
    return value;
}

void GCBreakableProp::SetLastAttacker(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'LastAttacker' is not possible.\n");
}

GCBaseEntity GCBreakableProp::GetFlareEnt() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CBreakableProp", "m_hFlareEnt"));
    return value;
}

void GCBreakableProp::SetFlareEnt(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'FlareEnt' is not possible.\n");
}

bool GCBreakableProp::GetUsePuntSound() const {
    return GetSchemaValue<bool>(m_ptr, "CBreakableProp", "m_bUsePuntSound");
}

void GCBreakableProp::SetUsePuntSound(bool value) {
    SetSchemaValue(m_ptr, "CBreakableProp", "m_bUsePuntSound", false, value);
}

CUtlSymbolLarge GCBreakableProp::GetPuntSound() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBreakableProp", "m_iszPuntSound");
}

void GCBreakableProp::SetPuntSound(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBreakableProp", "m_iszPuntSound", false, value);
}

bool GCBreakableProp::GetNoGhostCollision() const {
    return GetSchemaValue<bool>(m_ptr, "CBreakableProp", "m_noGhostCollision");
}

void GCBreakableProp::SetNoGhostCollision(bool value) {
    SetSchemaValue(m_ptr, "CBreakableProp", "m_noGhostCollision", false, value);
}

std::string GCBreakableProp::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBreakableProp::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvSoundscapeProxy::GCEnvSoundscapeProxy(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvSoundscapeProxy::GCEnvSoundscapeProxy(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCEnvSoundscapeProxy::GetMainSoundscapeName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvSoundscapeProxy", "m_MainSoundscapeName");
}

void GCEnvSoundscapeProxy::SetMainSoundscapeName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEnvSoundscapeProxy", "m_MainSoundscapeName", false, value);
}

std::string GCEnvSoundscapeProxy::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvSoundscapeProxy::IsValid() {
    return (m_ptr != nullptr);
}

GCPhysConstraint::GCPhysConstraint(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPhysConstraint::GCPhysConstraint(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCPhysConstraint::GetNameAttach1() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPhysConstraint", "m_nameAttach1");
}

void GCPhysConstraint::SetNameAttach1(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPhysConstraint", "m_nameAttach1", false, value);
}

CUtlSymbolLarge GCPhysConstraint::GetNameAttach2() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPhysConstraint", "m_nameAttach2");
}

void GCPhysConstraint::SetNameAttach2(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPhysConstraint", "m_nameAttach2", false, value);
}

GCBaseEntity GCPhysConstraint::GetAttach1() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CPhysConstraint", "m_hAttach1"));
    return value;
}

void GCPhysConstraint::SetAttach1(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Attach1' is not possible.\n");
}

GCBaseEntity GCPhysConstraint::GetAttach2() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CPhysConstraint", "m_hAttach2"));
    return value;
}

void GCPhysConstraint::SetAttach2(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Attach2' is not possible.\n");
}

CUtlSymbolLarge GCPhysConstraint::GetNameAttachment1() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPhysConstraint", "m_nameAttachment1");
}

void GCPhysConstraint::SetNameAttachment1(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPhysConstraint", "m_nameAttachment1", false, value);
}

CUtlSymbolLarge GCPhysConstraint::GetNameAttachment2() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPhysConstraint", "m_nameAttachment2");
}

void GCPhysConstraint::SetNameAttachment2(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPhysConstraint", "m_nameAttachment2", false, value);
}

CUtlSymbolLarge GCPhysConstraint::GetBreakSound() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPhysConstraint", "m_breakSound");
}

void GCPhysConstraint::SetBreakSound(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPhysConstraint", "m_breakSound", false, value);
}

float GCPhysConstraint::GetForceLimit() const {
    return GetSchemaValue<float>(m_ptr, "CPhysConstraint", "m_forceLimit");
}

void GCPhysConstraint::SetForceLimit(float value) {
    SetSchemaValue(m_ptr, "CPhysConstraint", "m_forceLimit", false, value);
}

float GCPhysConstraint::GetTorqueLimit() const {
    return GetSchemaValue<float>(m_ptr, "CPhysConstraint", "m_torqueLimit");
}

void GCPhysConstraint::SetTorqueLimit(float value) {
    SetSchemaValue(m_ptr, "CPhysConstraint", "m_torqueLimit", false, value);
}

uint32_t GCPhysConstraint::GetTeleportTick() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CPhysConstraint", "m_teleportTick");
}

void GCPhysConstraint::SetTeleportTick(uint32_t value) {
    SetSchemaValue(m_ptr, "CPhysConstraint", "m_teleportTick", false, value);
}

float GCPhysConstraint::GetMinTeleportDistance() const {
    return GetSchemaValue<float>(m_ptr, "CPhysConstraint", "m_minTeleportDistance");
}

void GCPhysConstraint::SetMinTeleportDistance(float value) {
    SetSchemaValue(m_ptr, "CPhysConstraint", "m_minTeleportDistance", false, value);
}

bool GCPhysConstraint::GetSnapObjectPositions() const {
    return GetSchemaValue<bool>(m_ptr, "CPhysConstraint", "m_bSnapObjectPositions");
}

void GCPhysConstraint::SetSnapObjectPositions(bool value) {
    SetSchemaValue(m_ptr, "CPhysConstraint", "m_bSnapObjectPositions", false, value);
}

GCEntityIOOutput GCPhysConstraint::GetOnBreak() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPhysConstraint", "m_OnBreak");
}

void GCPhysConstraint::SetOnBreak(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPhysConstraint", "m_OnBreak", false, value);
}

std::string GCPhysConstraint::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPhysConstraint::IsValid() {
    return (m_ptr != nullptr);
}

GCCSGameModeRules::GCCSGameModeRules(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSGameModeRules::GCCSGameModeRules(void *ptr) {
    m_ptr = ptr;
}

GCNetworkVarChainer GCCSGameModeRules::Get__pChainEntity() const {
    return GetSchemaValue<GCNetworkVarChainer>(m_ptr, "CCSGameModeRules", "__m_pChainEntity");
}

void GCCSGameModeRules::Set__pChainEntity(GCNetworkVarChainer value) {
    SetSchemaValue(m_ptr, "CCSGameModeRules", "__m_pChainEntity", false, value);
}

std::string GCCSGameModeRules::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSGameModeRules::IsValid() {
    return (m_ptr != nullptr);
}

GCItemAssaultSuit::GCItemAssaultSuit(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCItemAssaultSuit::GCItemAssaultSuit(void *ptr) {
    m_ptr = ptr;
}

std::string GCItemAssaultSuit::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCItemAssaultSuit::IsValid() {
    return (m_ptr != nullptr);
}

GCInfoPlayerStart::GCInfoPlayerStart(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCInfoPlayerStart::GCInfoPlayerStart(void *ptr) {
    m_ptr = ptr;
}

bool GCInfoPlayerStart::GetDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CInfoPlayerStart", "m_bDisabled");
}

void GCInfoPlayerStart::SetDisabled(bool value) {
    SetSchemaValue(m_ptr, "CInfoPlayerStart", "m_bDisabled", false, value);
}

std::string GCInfoPlayerStart::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCInfoPlayerStart::IsValid() {
    return (m_ptr != nullptr);
}

GCSoundOpvarSetPointBase::GCSoundOpvarSetPointBase(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSoundOpvarSetPointBase::GCSoundOpvarSetPointBase(void *ptr) {
    m_ptr = ptr;
}

bool GCSoundOpvarSetPointBase::GetDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CSoundOpvarSetPointBase", "m_bDisabled");
}

void GCSoundOpvarSetPointBase::SetDisabled(bool value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetPointBase", "m_bDisabled", false, value);
}

GCEntityInstance GCSoundOpvarSetPointBase::GetSource() const {
    GCEntityInstance value(GetSchemaValuePtr<void>(m_ptr, "CSoundOpvarSetPointBase", "m_hSource"));
    return value;
}

void GCSoundOpvarSetPointBase::SetSource(GCEntityInstance* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Source' is not possible.\n");
}

CUtlSymbolLarge GCSoundOpvarSetPointBase::GetSourceEntityName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSoundOpvarSetPointBase", "m_iszSourceEntityName");
}

void GCSoundOpvarSetPointBase::SetSourceEntityName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetPointBase", "m_iszSourceEntityName", false, value);
}

Vector GCSoundOpvarSetPointBase::GetLastPosition() const {
    return GetSchemaValue<Vector>(m_ptr, "CSoundOpvarSetPointBase", "m_vLastPosition");
}

void GCSoundOpvarSetPointBase::SetLastPosition(Vector value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetPointBase", "m_vLastPosition", false, value);
}

CUtlSymbolLarge GCSoundOpvarSetPointBase::GetStackName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSoundOpvarSetPointBase", "m_iszStackName");
}

void GCSoundOpvarSetPointBase::SetStackName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetPointBase", "m_iszStackName", false, value);
}

CUtlSymbolLarge GCSoundOpvarSetPointBase::GetOperatorName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSoundOpvarSetPointBase", "m_iszOperatorName");
}

void GCSoundOpvarSetPointBase::SetOperatorName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetPointBase", "m_iszOperatorName", false, value);
}

CUtlSymbolLarge GCSoundOpvarSetPointBase::GetOpvarName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSoundOpvarSetPointBase", "m_iszOpvarName");
}

void GCSoundOpvarSetPointBase::SetOpvarName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetPointBase", "m_iszOpvarName", false, value);
}

int32_t GCSoundOpvarSetPointBase::GetOpvarIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSoundOpvarSetPointBase", "m_iOpvarIndex");
}

void GCSoundOpvarSetPointBase::SetOpvarIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetPointBase", "m_iOpvarIndex", false, value);
}

bool GCSoundOpvarSetPointBase::GetUseAutoCompare() const {
    return GetSchemaValue<bool>(m_ptr, "CSoundOpvarSetPointBase", "m_bUseAutoCompare");
}

void GCSoundOpvarSetPointBase::SetUseAutoCompare(bool value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetPointBase", "m_bUseAutoCompare", false, value);
}

std::string GCSoundOpvarSetPointBase::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSoundOpvarSetPointBase::IsValid() {
    return (m_ptr != nullptr);
}

Gragdoll_t::Gragdoll_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

Gragdoll_t::Gragdoll_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<Gragdollelement_t> Gragdoll_t::GetList() const {
    CUtlVector<Gragdollelement_t>* vec = GetSchemaValue<CUtlVector<Gragdollelement_t>*>(m_ptr, "ragdoll_t", "list"); std::vector<Gragdollelement_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void Gragdoll_t::SetList(std::vector<Gragdollelement_t> value) {
    SetSchemaValueCUtlVector<Gragdollelement_t>(m_ptr, "ragdoll_t", "list", true, value);
}

std::vector<int32> Gragdoll_t::GetBoneIndex() const {
    CUtlVector<int32>* vec = GetSchemaValue<CUtlVector<int32>*>(m_ptr, "ragdoll_t", "boneIndex"); std::vector<int32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void Gragdoll_t::SetBoneIndex(std::vector<int32> value) {
    SetSchemaValueCUtlVector<int32>(m_ptr, "ragdoll_t", "boneIndex", true, value);
}

bool Gragdoll_t::GetAllowStretch() const {
    return GetSchemaValue<bool>(m_ptr, "ragdoll_t", "allowStretch");
}

void Gragdoll_t::SetAllowStretch(bool value) {
    SetSchemaValue(m_ptr, "ragdoll_t", "allowStretch", true, value);
}

bool Gragdoll_t::GetUnused() const {
    return GetSchemaValue<bool>(m_ptr, "ragdoll_t", "unused");
}

void Gragdoll_t::SetUnused(bool value) {
    SetSchemaValue(m_ptr, "ragdoll_t", "unused", true, value);
}

std::string Gragdoll_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool Gragdoll_t::IsValid() {
    return (m_ptr != nullptr);
}

GCItemDogtags::GCItemDogtags(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCItemDogtags::GCItemDogtags(void *ptr) {
    m_ptr = ptr;
}

GCCSPlayerPawn GCItemDogtags::GetOwningPlayer() const {
    GCCSPlayerPawn value(GetSchemaValuePtr<void>(m_ptr, "CItemDogtags", "m_OwningPlayer"));
    return value;
}

void GCItemDogtags::SetOwningPlayer(GCCSPlayerPawn* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OwningPlayer' is not possible.\n");
}

GCCSPlayerPawn GCItemDogtags::GetKillingPlayer() const {
    GCCSPlayerPawn value(GetSchemaValuePtr<void>(m_ptr, "CItemDogtags", "m_KillingPlayer"));
    return value;
}

void GCItemDogtags::SetKillingPlayer(GCCSPlayerPawn* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'KillingPlayer' is not possible.\n");
}

std::string GCItemDogtags::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCItemDogtags::IsValid() {
    return (m_ptr != nullptr);
}

GCLightEntity::GCLightEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCLightEntity::GCLightEntity(void *ptr) {
    m_ptr = ptr;
}

GCLightComponent GCLightEntity::GetCLightComponent() const {
    GCLightComponent value(GetSchemaValuePtr<void>(m_ptr, "CLightEntity", "m_CLightComponent"));
    return value;
}

void GCLightEntity::SetCLightComponent(GCLightComponent* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'CLightComponent' is not possible.\n");
}

std::string GCLightEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCLightEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCPlayer_WaterServices::GCPlayer_WaterServices(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPlayer_WaterServices::GCPlayer_WaterServices(void *ptr) {
    m_ptr = ptr;
}

std::string GCPlayer_WaterServices::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPlayer_WaterServices::IsValid() {
    return (m_ptr != nullptr);
}

GCSkyboxReference::GCSkyboxReference(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSkyboxReference::GCSkyboxReference(void *ptr) {
    m_ptr = ptr;
}

WorldGroupId_t GCSkyboxReference::GetWorldGroupId() const {
    return GetSchemaValue<WorldGroupId_t>(m_ptr, "CSkyboxReference", "m_worldGroupId");
}

void GCSkyboxReference::SetWorldGroupId(WorldGroupId_t value) {
    SetSchemaValue(m_ptr, "CSkyboxReference", "m_worldGroupId", false, value);
}

GCSkyCamera GCSkyboxReference::GetSkyCamera() const {
    GCSkyCamera value(GetSchemaValuePtr<void>(m_ptr, "CSkyboxReference", "m_hSkyCamera"));
    return value;
}

void GCSkyboxReference::SetSkyCamera(GCSkyCamera* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'SkyCamera' is not possible.\n");
}

std::string GCSkyboxReference::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSkyboxReference::IsValid() {
    return (m_ptr != nullptr);
}

GCDynamicProp::GCDynamicProp(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCDynamicProp::GCDynamicProp(void *ptr) {
    m_ptr = ptr;
}

bool GCDynamicProp::GetCreateNavObstacle() const {
    return GetSchemaValue<bool>(m_ptr, "CDynamicProp", "m_bCreateNavObstacle");
}

void GCDynamicProp::SetCreateNavObstacle(bool value) {
    SetSchemaValue(m_ptr, "CDynamicProp", "m_bCreateNavObstacle", false, value);
}

bool GCDynamicProp::GetUseHitboxesForRenderBox() const {
    return GetSchemaValue<bool>(m_ptr, "CDynamicProp", "m_bUseHitboxesForRenderBox");
}

void GCDynamicProp::SetUseHitboxesForRenderBox(bool value) {
    SetSchemaValue(m_ptr, "CDynamicProp", "m_bUseHitboxesForRenderBox", false, value);
}

bool GCDynamicProp::GetUseAnimGraph() const {
    return GetSchemaValue<bool>(m_ptr, "CDynamicProp", "m_bUseAnimGraph");
}

void GCDynamicProp::SetUseAnimGraph(bool value) {
    SetSchemaValue(m_ptr, "CDynamicProp", "m_bUseAnimGraph", false, value);
}

GCEntityIOOutput GCDynamicProp::GetOutputAnimBegun() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CDynamicProp", "m_pOutputAnimBegun");
}

void GCDynamicProp::SetOutputAnimBegun(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CDynamicProp", "m_pOutputAnimBegun", false, value);
}

GCEntityIOOutput GCDynamicProp::GetOutputAnimOver() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CDynamicProp", "m_pOutputAnimOver");
}

void GCDynamicProp::SetOutputAnimOver(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CDynamicProp", "m_pOutputAnimOver", false, value);
}

GCEntityIOOutput GCDynamicProp::GetOutputAnimLoopCycleOver() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CDynamicProp", "m_pOutputAnimLoopCycleOver");
}

void GCDynamicProp::SetOutputAnimLoopCycleOver(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CDynamicProp", "m_pOutputAnimLoopCycleOver", false, value);
}

GCEntityIOOutput GCDynamicProp::GetOnAnimReachedStart() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CDynamicProp", "m_OnAnimReachedStart");
}

void GCDynamicProp::SetOnAnimReachedStart(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CDynamicProp", "m_OnAnimReachedStart", false, value);
}

GCEntityIOOutput GCDynamicProp::GetOnAnimReachedEnd() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CDynamicProp", "m_OnAnimReachedEnd");
}

void GCDynamicProp::SetOnAnimReachedEnd(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CDynamicProp", "m_OnAnimReachedEnd", false, value);
}

CUtlSymbolLarge GCDynamicProp::GetIdleAnim() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CDynamicProp", "m_iszIdleAnim");
}

void GCDynamicProp::SetIdleAnim(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CDynamicProp", "m_iszIdleAnim", false, value);
}

AnimLoopMode_t GCDynamicProp::GetIdleAnimLoopMode() const {
    return GetSchemaValue<AnimLoopMode_t>(m_ptr, "CDynamicProp", "m_nIdleAnimLoopMode");
}

void GCDynamicProp::SetIdleAnimLoopMode(AnimLoopMode_t value) {
    SetSchemaValue(m_ptr, "CDynamicProp", "m_nIdleAnimLoopMode", false, value);
}

bool GCDynamicProp::GetRandomizeCycle() const {
    return GetSchemaValue<bool>(m_ptr, "CDynamicProp", "m_bRandomizeCycle");
}

void GCDynamicProp::SetRandomizeCycle(bool value) {
    SetSchemaValue(m_ptr, "CDynamicProp", "m_bRandomizeCycle", false, value);
}

bool GCDynamicProp::GetStartDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CDynamicProp", "m_bStartDisabled");
}

void GCDynamicProp::SetStartDisabled(bool value) {
    SetSchemaValue(m_ptr, "CDynamicProp", "m_bStartDisabled", false, value);
}

bool GCDynamicProp::GetFiredStartEndOutput() const {
    return GetSchemaValue<bool>(m_ptr, "CDynamicProp", "m_bFiredStartEndOutput");
}

void GCDynamicProp::SetFiredStartEndOutput(bool value) {
    SetSchemaValue(m_ptr, "CDynamicProp", "m_bFiredStartEndOutput", false, value);
}

bool GCDynamicProp::GetForceNpcExclude() const {
    return GetSchemaValue<bool>(m_ptr, "CDynamicProp", "m_bForceNpcExclude");
}

void GCDynamicProp::SetForceNpcExclude(bool value) {
    SetSchemaValue(m_ptr, "CDynamicProp", "m_bForceNpcExclude", false, value);
}

bool GCDynamicProp::GetCreateNonSolid() const {
    return GetSchemaValue<bool>(m_ptr, "CDynamicProp", "m_bCreateNonSolid");
}

void GCDynamicProp::SetCreateNonSolid(bool value) {
    SetSchemaValue(m_ptr, "CDynamicProp", "m_bCreateNonSolid", false, value);
}

bool GCDynamicProp::GetIsOverrideProp() const {
    return GetSchemaValue<bool>(m_ptr, "CDynamicProp", "m_bIsOverrideProp");
}

void GCDynamicProp::SetIsOverrideProp(bool value) {
    SetSchemaValue(m_ptr, "CDynamicProp", "m_bIsOverrideProp", false, value);
}

int32_t GCDynamicProp::GetInitialGlowState() const {
    return GetSchemaValue<int32_t>(m_ptr, "CDynamicProp", "m_iInitialGlowState");
}

void GCDynamicProp::SetInitialGlowState(int32_t value) {
    SetSchemaValue(m_ptr, "CDynamicProp", "m_iInitialGlowState", false, value);
}

int32_t GCDynamicProp::GetGlowRange() const {
    return GetSchemaValue<int32_t>(m_ptr, "CDynamicProp", "m_nGlowRange");
}

void GCDynamicProp::SetGlowRange(int32_t value) {
    SetSchemaValue(m_ptr, "CDynamicProp", "m_nGlowRange", false, value);
}

int32_t GCDynamicProp::GetGlowRangeMin() const {
    return GetSchemaValue<int32_t>(m_ptr, "CDynamicProp", "m_nGlowRangeMin");
}

void GCDynamicProp::SetGlowRangeMin(int32_t value) {
    SetSchemaValue(m_ptr, "CDynamicProp", "m_nGlowRangeMin", false, value);
}

Color GCDynamicProp::GetGlowColor() const {
    return GetSchemaValue<Color>(m_ptr, "CDynamicProp", "m_glowColor");
}

void GCDynamicProp::SetGlowColor(Color value) {
    SetSchemaValue(m_ptr, "CDynamicProp", "m_glowColor", false, value);
}

int32_t GCDynamicProp::GetGlowTeam() const {
    return GetSchemaValue<int32_t>(m_ptr, "CDynamicProp", "m_nGlowTeam");
}

void GCDynamicProp::SetGlowTeam(int32_t value) {
    SetSchemaValue(m_ptr, "CDynamicProp", "m_nGlowTeam", false, value);
}

std::string GCDynamicProp::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCDynamicProp::IsValid() {
    return (m_ptr != nullptr);
}

GCRopeKeyframe::GCRopeKeyframe(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCRopeKeyframe::GCRopeKeyframe(void *ptr) {
    m_ptr = ptr;
}

uint16_t GCRopeKeyframe::GetRopeFlags() const {
    return GetSchemaValue<uint16_t>(m_ptr, "CRopeKeyframe", "m_RopeFlags");
}

void GCRopeKeyframe::SetRopeFlags(uint16_t value) {
    SetSchemaValue(m_ptr, "CRopeKeyframe", "m_RopeFlags", false, value);
}

CUtlSymbolLarge GCRopeKeyframe::GetNextLinkName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CRopeKeyframe", "m_iNextLinkName");
}

void GCRopeKeyframe::SetNextLinkName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CRopeKeyframe", "m_iNextLinkName", false, value);
}

int16_t GCRopeKeyframe::GetSlack() const {
    return GetSchemaValue<int16_t>(m_ptr, "CRopeKeyframe", "m_Slack");
}

void GCRopeKeyframe::SetSlack(int16_t value) {
    SetSchemaValue(m_ptr, "CRopeKeyframe", "m_Slack", false, value);
}

float GCRopeKeyframe::GetWidth() const {
    return GetSchemaValue<float>(m_ptr, "CRopeKeyframe", "m_Width");
}

void GCRopeKeyframe::SetWidth(float value) {
    SetSchemaValue(m_ptr, "CRopeKeyframe", "m_Width", false, value);
}

float GCRopeKeyframe::GetTextureScale() const {
    return GetSchemaValue<float>(m_ptr, "CRopeKeyframe", "m_TextureScale");
}

void GCRopeKeyframe::SetTextureScale(float value) {
    SetSchemaValue(m_ptr, "CRopeKeyframe", "m_TextureScale", false, value);
}

uint8_t GCRopeKeyframe::GetSegments() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CRopeKeyframe", "m_nSegments");
}

void GCRopeKeyframe::SetSegments(uint8_t value) {
    SetSchemaValue(m_ptr, "CRopeKeyframe", "m_nSegments", false, value);
}

bool GCRopeKeyframe::GetConstrainBetweenEndpoints() const {
    return GetSchemaValue<bool>(m_ptr, "CRopeKeyframe", "m_bConstrainBetweenEndpoints");
}

void GCRopeKeyframe::SetConstrainBetweenEndpoints(bool value) {
    SetSchemaValue(m_ptr, "CRopeKeyframe", "m_bConstrainBetweenEndpoints", false, value);
}

CUtlSymbolLarge GCRopeKeyframe::GetStrRopeMaterialModel() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CRopeKeyframe", "m_strRopeMaterialModel");
}

void GCRopeKeyframe::SetStrRopeMaterialModel(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CRopeKeyframe", "m_strRopeMaterialModel", false, value);
}

uint8_t GCRopeKeyframe::GetSubdiv() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CRopeKeyframe", "m_Subdiv");
}

void GCRopeKeyframe::SetSubdiv(uint8_t value) {
    SetSchemaValue(m_ptr, "CRopeKeyframe", "m_Subdiv", false, value);
}

uint8_t GCRopeKeyframe::GetChangeCount() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CRopeKeyframe", "m_nChangeCount");
}

void GCRopeKeyframe::SetChangeCount(uint8_t value) {
    SetSchemaValue(m_ptr, "CRopeKeyframe", "m_nChangeCount", false, value);
}

int16_t GCRopeKeyframe::GetRopeLength() const {
    return GetSchemaValue<int16_t>(m_ptr, "CRopeKeyframe", "m_RopeLength");
}

void GCRopeKeyframe::SetRopeLength(int16_t value) {
    SetSchemaValue(m_ptr, "CRopeKeyframe", "m_RopeLength", false, value);
}

uint8_t GCRopeKeyframe::GetLockedPoints() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CRopeKeyframe", "m_fLockedPoints");
}

void GCRopeKeyframe::SetLockedPoints(uint8_t value) {
    SetSchemaValue(m_ptr, "CRopeKeyframe", "m_fLockedPoints", false, value);
}

bool GCRopeKeyframe::GetCreatedFromMapFile() const {
    return GetSchemaValue<bool>(m_ptr, "CRopeKeyframe", "m_bCreatedFromMapFile");
}

void GCRopeKeyframe::SetCreatedFromMapFile(bool value) {
    SetSchemaValue(m_ptr, "CRopeKeyframe", "m_bCreatedFromMapFile", false, value);
}

float GCRopeKeyframe::GetScrollSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CRopeKeyframe", "m_flScrollSpeed");
}

void GCRopeKeyframe::SetScrollSpeed(float value) {
    SetSchemaValue(m_ptr, "CRopeKeyframe", "m_flScrollSpeed", false, value);
}

bool GCRopeKeyframe::GetStartPointValid() const {
    return GetSchemaValue<bool>(m_ptr, "CRopeKeyframe", "m_bStartPointValid");
}

void GCRopeKeyframe::SetStartPointValid(bool value) {
    SetSchemaValue(m_ptr, "CRopeKeyframe", "m_bStartPointValid", false, value);
}

bool GCRopeKeyframe::GetEndPointValid() const {
    return GetSchemaValue<bool>(m_ptr, "CRopeKeyframe", "m_bEndPointValid");
}

void GCRopeKeyframe::SetEndPointValid(bool value) {
    SetSchemaValue(m_ptr, "CRopeKeyframe", "m_bEndPointValid", false, value);
}

GCBaseEntity GCRopeKeyframe::GetStartPoint() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CRopeKeyframe", "m_hStartPoint"));
    return value;
}

void GCRopeKeyframe::SetStartPoint(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'StartPoint' is not possible.\n");
}

GCBaseEntity GCRopeKeyframe::GetEndPoint() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CRopeKeyframe", "m_hEndPoint"));
    return value;
}

void GCRopeKeyframe::SetEndPoint(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'EndPoint' is not possible.\n");
}

std::string GCRopeKeyframe::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCRopeKeyframe::IsValid() {
    return (m_ptr != nullptr);
}

GCBarnLight::GCBarnLight(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBarnLight::GCBarnLight(void *ptr) {
    m_ptr = ptr;
}

bool GCBarnLight::GetEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CBarnLight", "m_bEnabled");
}

void GCBarnLight::SetEnabled(bool value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_bEnabled", false, value);
}

int32_t GCBarnLight::GetColorMode() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBarnLight", "m_nColorMode");
}

void GCBarnLight::SetColorMode(int32_t value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_nColorMode", false, value);
}

Color GCBarnLight::GetColor() const {
    return GetSchemaValue<Color>(m_ptr, "CBarnLight", "m_Color");
}

void GCBarnLight::SetColor(Color value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_Color", false, value);
}

float GCBarnLight::GetColorTemperature() const {
    return GetSchemaValue<float>(m_ptr, "CBarnLight", "m_flColorTemperature");
}

void GCBarnLight::SetColorTemperature(float value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_flColorTemperature", false, value);
}

float GCBarnLight::GetBrightness() const {
    return GetSchemaValue<float>(m_ptr, "CBarnLight", "m_flBrightness");
}

void GCBarnLight::SetBrightness(float value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_flBrightness", false, value);
}

float GCBarnLight::GetBrightnessScale() const {
    return GetSchemaValue<float>(m_ptr, "CBarnLight", "m_flBrightnessScale");
}

void GCBarnLight::SetBrightnessScale(float value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_flBrightnessScale", false, value);
}

int32_t GCBarnLight::GetDirectLight() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBarnLight", "m_nDirectLight");
}

void GCBarnLight::SetDirectLight(int32_t value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_nDirectLight", false, value);
}

int32_t GCBarnLight::GetBakedShadowIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBarnLight", "m_nBakedShadowIndex");
}

void GCBarnLight::SetBakedShadowIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_nBakedShadowIndex", false, value);
}

int32_t GCBarnLight::GetLuminaireShape() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBarnLight", "m_nLuminaireShape");
}

void GCBarnLight::SetLuminaireShape(int32_t value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_nLuminaireShape", false, value);
}

float GCBarnLight::GetLuminaireSize() const {
    return GetSchemaValue<float>(m_ptr, "CBarnLight", "m_flLuminaireSize");
}

void GCBarnLight::SetLuminaireSize(float value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_flLuminaireSize", false, value);
}

float GCBarnLight::GetLuminaireAnisotropy() const {
    return GetSchemaValue<float>(m_ptr, "CBarnLight", "m_flLuminaireAnisotropy");
}

void GCBarnLight::SetLuminaireAnisotropy(float value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_flLuminaireAnisotropy", false, value);
}

CUtlString GCBarnLight::GetLightStyleString() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CBarnLight", "m_LightStyleString");
}

void GCBarnLight::SetLightStyleString(CUtlString value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_LightStyleString", false, value);
}

std::vector<CUtlString> GCBarnLight::GetQueuedLightStyleStrings() const {
    CUtlVector<CUtlString>* vec = GetSchemaValue<CUtlVector<CUtlString>*>(m_ptr, "CBarnLight", "m_QueuedLightStyleStrings"); std::vector<CUtlString> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCBarnLight::SetQueuedLightStyleStrings(std::vector<CUtlString> value) {
    SetSchemaValueCUtlVector<CUtlString>(m_ptr, "CBarnLight", "m_QueuedLightStyleStrings", false, value);
}

std::vector<CUtlString> GCBarnLight::GetLightStyleEvents() const {
    CUtlVector<CUtlString>* vec = GetSchemaValue<CUtlVector<CUtlString>*>(m_ptr, "CBarnLight", "m_LightStyleEvents"); std::vector<CUtlString> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCBarnLight::SetLightStyleEvents(std::vector<CUtlString> value) {
    SetSchemaValueCUtlVector<CUtlString>(m_ptr, "CBarnLight", "m_LightStyleEvents", false, value);
}

std::vector<GCBaseModelEntity*> GCBarnLight::GetLightStyleTargets() const {
    CUtlVector<GCBaseModelEntity*>* vec = GetSchemaValue<CUtlVector<GCBaseModelEntity*>*>(m_ptr, "CBarnLight", "m_LightStyleTargets"); std::vector<GCBaseModelEntity*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCBarnLight::SetLightStyleTargets(std::vector<GCBaseModelEntity*> value) {
    SetSchemaValueCUtlVector<GCBaseModelEntity*>(m_ptr, "CBarnLight", "m_LightStyleTargets", false, value);
}

std::vector<GCEntityIOOutput> GCBarnLight::GetStyleEvent() const {
    GCEntityIOOutput* outValue = GetSchemaValue<GCEntityIOOutput*>(m_ptr, "CBarnLight", "m_StyleEvent"); std::vector<GCEntityIOOutput> ret; for(int i = 0; i < 4; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCBarnLight::SetStyleEvent(std::vector<GCEntityIOOutput> value) {
    GCEntityIOOutput* outValue = GetSchemaValue<GCEntityIOOutput*>(m_ptr, "CBarnLight", "m_StyleEvent"); for(int i = 0; i < 4; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CBarnLight", "m_StyleEvent", false, outValue);
}

float GCBarnLight::GetShape() const {
    return GetSchemaValue<float>(m_ptr, "CBarnLight", "m_flShape");
}

void GCBarnLight::SetShape(float value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_flShape", false, value);
}

float GCBarnLight::GetSoftX() const {
    return GetSchemaValue<float>(m_ptr, "CBarnLight", "m_flSoftX");
}

void GCBarnLight::SetSoftX(float value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_flSoftX", false, value);
}

float GCBarnLight::GetSoftY() const {
    return GetSchemaValue<float>(m_ptr, "CBarnLight", "m_flSoftY");
}

void GCBarnLight::SetSoftY(float value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_flSoftY", false, value);
}

float GCBarnLight::GetSkirt() const {
    return GetSchemaValue<float>(m_ptr, "CBarnLight", "m_flSkirt");
}

void GCBarnLight::SetSkirt(float value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_flSkirt", false, value);
}

float GCBarnLight::GetSkirtNear() const {
    return GetSchemaValue<float>(m_ptr, "CBarnLight", "m_flSkirtNear");
}

void GCBarnLight::SetSkirtNear(float value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_flSkirtNear", false, value);
}

Vector GCBarnLight::GetSizeParams() const {
    return GetSchemaValue<Vector>(m_ptr, "CBarnLight", "m_vSizeParams");
}

void GCBarnLight::SetSizeParams(Vector value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_vSizeParams", false, value);
}

float GCBarnLight::GetRange() const {
    return GetSchemaValue<float>(m_ptr, "CBarnLight", "m_flRange");
}

void GCBarnLight::SetRange(float value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_flRange", false, value);
}

Vector GCBarnLight::GetShear() const {
    return GetSchemaValue<Vector>(m_ptr, "CBarnLight", "m_vShear");
}

void GCBarnLight::SetShear(Vector value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_vShear", false, value);
}

int32_t GCBarnLight::GetBakeSpecularToCubemaps() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBarnLight", "m_nBakeSpecularToCubemaps");
}

void GCBarnLight::SetBakeSpecularToCubemaps(int32_t value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_nBakeSpecularToCubemaps", false, value);
}

Vector GCBarnLight::GetBakeSpecularToCubemapsSize() const {
    return GetSchemaValue<Vector>(m_ptr, "CBarnLight", "m_vBakeSpecularToCubemapsSize");
}

void GCBarnLight::SetBakeSpecularToCubemapsSize(Vector value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_vBakeSpecularToCubemapsSize", false, value);
}

int32_t GCBarnLight::GetCastShadows() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBarnLight", "m_nCastShadows");
}

void GCBarnLight::SetCastShadows(int32_t value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_nCastShadows", false, value);
}

int32_t GCBarnLight::GetShadowMapSize() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBarnLight", "m_nShadowMapSize");
}

void GCBarnLight::SetShadowMapSize(int32_t value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_nShadowMapSize", false, value);
}

int32_t GCBarnLight::GetShadowPriority() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBarnLight", "m_nShadowPriority");
}

void GCBarnLight::SetShadowPriority(int32_t value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_nShadowPriority", false, value);
}

bool GCBarnLight::GetContactShadow() const {
    return GetSchemaValue<bool>(m_ptr, "CBarnLight", "m_bContactShadow");
}

void GCBarnLight::SetContactShadow(bool value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_bContactShadow", false, value);
}

int32_t GCBarnLight::GetBounceLight() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBarnLight", "m_nBounceLight");
}

void GCBarnLight::SetBounceLight(int32_t value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_nBounceLight", false, value);
}

float GCBarnLight::GetBounceScale() const {
    return GetSchemaValue<float>(m_ptr, "CBarnLight", "m_flBounceScale");
}

void GCBarnLight::SetBounceScale(float value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_flBounceScale", false, value);
}

float GCBarnLight::GetMinRoughness() const {
    return GetSchemaValue<float>(m_ptr, "CBarnLight", "m_flMinRoughness");
}

void GCBarnLight::SetMinRoughness(float value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_flMinRoughness", false, value);
}

Vector GCBarnLight::GetAlternateColor() const {
    return GetSchemaValue<Vector>(m_ptr, "CBarnLight", "m_vAlternateColor");
}

void GCBarnLight::SetAlternateColor(Vector value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_vAlternateColor", false, value);
}

float GCBarnLight::GetAlternateColorBrightness() const {
    return GetSchemaValue<float>(m_ptr, "CBarnLight", "m_fAlternateColorBrightness");
}

void GCBarnLight::SetAlternateColorBrightness(float value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_fAlternateColorBrightness", false, value);
}

int32_t GCBarnLight::GetFog() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBarnLight", "m_nFog");
}

void GCBarnLight::SetFog(int32_t value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_nFog", false, value);
}

float GCBarnLight::GetFogStrength() const {
    return GetSchemaValue<float>(m_ptr, "CBarnLight", "m_flFogStrength");
}

void GCBarnLight::SetFogStrength(float value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_flFogStrength", false, value);
}

int32_t GCBarnLight::GetFogShadows() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBarnLight", "m_nFogShadows");
}

void GCBarnLight::SetFogShadows(int32_t value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_nFogShadows", false, value);
}

float GCBarnLight::GetFogScale() const {
    return GetSchemaValue<float>(m_ptr, "CBarnLight", "m_flFogScale");
}

void GCBarnLight::SetFogScale(float value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_flFogScale", false, value);
}

float GCBarnLight::GetFadeSizeStart() const {
    return GetSchemaValue<float>(m_ptr, "CBarnLight", "m_flFadeSizeStart");
}

void GCBarnLight::SetFadeSizeStart(float value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_flFadeSizeStart", false, value);
}

float GCBarnLight::GetFadeSizeEnd() const {
    return GetSchemaValue<float>(m_ptr, "CBarnLight", "m_flFadeSizeEnd");
}

void GCBarnLight::SetFadeSizeEnd(float value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_flFadeSizeEnd", false, value);
}

float GCBarnLight::GetShadowFadeSizeStart() const {
    return GetSchemaValue<float>(m_ptr, "CBarnLight", "m_flShadowFadeSizeStart");
}

void GCBarnLight::SetShadowFadeSizeStart(float value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_flShadowFadeSizeStart", false, value);
}

float GCBarnLight::GetShadowFadeSizeEnd() const {
    return GetSchemaValue<float>(m_ptr, "CBarnLight", "m_flShadowFadeSizeEnd");
}

void GCBarnLight::SetShadowFadeSizeEnd(float value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_flShadowFadeSizeEnd", false, value);
}

bool GCBarnLight::GetPrecomputedFieldsValid() const {
    return GetSchemaValue<bool>(m_ptr, "CBarnLight", "m_bPrecomputedFieldsValid");
}

void GCBarnLight::SetPrecomputedFieldsValid(bool value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_bPrecomputedFieldsValid", false, value);
}

Vector GCBarnLight::GetPrecomputedBoundsMins() const {
    return GetSchemaValue<Vector>(m_ptr, "CBarnLight", "m_vPrecomputedBoundsMins");
}

void GCBarnLight::SetPrecomputedBoundsMins(Vector value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_vPrecomputedBoundsMins", false, value);
}

Vector GCBarnLight::GetPrecomputedBoundsMaxs() const {
    return GetSchemaValue<Vector>(m_ptr, "CBarnLight", "m_vPrecomputedBoundsMaxs");
}

void GCBarnLight::SetPrecomputedBoundsMaxs(Vector value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_vPrecomputedBoundsMaxs", false, value);
}

Vector GCBarnLight::GetPrecomputedOBBOrigin() const {
    return GetSchemaValue<Vector>(m_ptr, "CBarnLight", "m_vPrecomputedOBBOrigin");
}

void GCBarnLight::SetPrecomputedOBBOrigin(Vector value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_vPrecomputedOBBOrigin", false, value);
}

QAngle GCBarnLight::GetPrecomputedOBBAngles() const {
    return GetSchemaValue<QAngle>(m_ptr, "CBarnLight", "m_vPrecomputedOBBAngles");
}

void GCBarnLight::SetPrecomputedOBBAngles(QAngle value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_vPrecomputedOBBAngles", false, value);
}

Vector GCBarnLight::GetPrecomputedOBBExtent() const {
    return GetSchemaValue<Vector>(m_ptr, "CBarnLight", "m_vPrecomputedOBBExtent");
}

void GCBarnLight::SetPrecomputedOBBExtent(Vector value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_vPrecomputedOBBExtent", false, value);
}

bool GCBarnLight::GetPvsModifyEntity() const {
    return GetSchemaValue<bool>(m_ptr, "CBarnLight", "m_bPvsModifyEntity");
}

void GCBarnLight::SetPvsModifyEntity(bool value) {
    SetSchemaValue(m_ptr, "CBarnLight", "m_bPvsModifyEntity", false, value);
}

std::string GCBarnLight::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBarnLight::IsValid() {
    return (m_ptr != nullptr);
}

GSpawnPoint::GSpawnPoint(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GSpawnPoint::GSpawnPoint(void *ptr) {
    m_ptr = ptr;
}

int32_t GSpawnPoint::GetPriority() const {
    return GetSchemaValue<int32_t>(m_ptr, "SpawnPoint", "m_iPriority");
}

void GSpawnPoint::SetPriority(int32_t value) {
    SetSchemaValue(m_ptr, "SpawnPoint", "m_iPriority", false, value);
}

bool GSpawnPoint::GetEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "SpawnPoint", "m_bEnabled");
}

void GSpawnPoint::SetEnabled(bool value) {
    SetSchemaValue(m_ptr, "SpawnPoint", "m_bEnabled", false, value);
}

int32_t GSpawnPoint::GetType() const {
    return GetSchemaValue<int32_t>(m_ptr, "SpawnPoint", "m_nType");
}

void GSpawnPoint::SetType(int32_t value) {
    SetSchemaValue(m_ptr, "SpawnPoint", "m_nType", false, value);
}

std::string GSpawnPoint::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GSpawnPoint::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvViewPunch::GCEnvViewPunch(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvViewPunch::GCEnvViewPunch(void *ptr) {
    m_ptr = ptr;
}

float GCEnvViewPunch::GetRadius() const {
    return GetSchemaValue<float>(m_ptr, "CEnvViewPunch", "m_flRadius");
}

void GCEnvViewPunch::SetRadius(float value) {
    SetSchemaValue(m_ptr, "CEnvViewPunch", "m_flRadius", false, value);
}

QAngle GCEnvViewPunch::GetViewPunch() const {
    return GetSchemaValue<QAngle>(m_ptr, "CEnvViewPunch", "m_angViewPunch");
}

void GCEnvViewPunch::SetViewPunch(QAngle value) {
    SetSchemaValue(m_ptr, "CEnvViewPunch", "m_angViewPunch", false, value);
}

std::string GCEnvViewPunch::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvViewPunch::IsValid() {
    return (m_ptr != nullptr);
}

GCCSWeaponBase::GCCSWeaponBase(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSWeaponBase::GCCSWeaponBase(void *ptr) {
    m_ptr = ptr;
}

bool GCCSWeaponBase::GetRemoveable() const {
    return GetSchemaValue<bool>(m_ptr, "CCSWeaponBase", "m_bRemoveable");
}

void GCCSWeaponBase::SetRemoveable(bool value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_bRemoveable", false, value);
}

float GCCSWeaponBase::GetFireSequenceStartTime() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBase", "m_flFireSequenceStartTime");
}

void GCCSWeaponBase::SetFireSequenceStartTime(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_flFireSequenceStartTime", false, value);
}

int32_t GCCSWeaponBase::GetFireSequenceStartTimeChange() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBase", "m_nFireSequenceStartTimeChange");
}

void GCCSWeaponBase::SetFireSequenceStartTimeChange(int32_t value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_nFireSequenceStartTimeChange", false, value);
}

int32_t GCCSWeaponBase::GetFireSequenceStartTimeAck() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBase", "m_nFireSequenceStartTimeAck");
}

void GCCSWeaponBase::SetFireSequenceStartTimeAck(int32_t value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_nFireSequenceStartTimeAck", false, value);
}

PlayerAnimEvent_t GCCSWeaponBase::GetPlayerFireEvent() const {
    return GetSchemaValue<PlayerAnimEvent_t>(m_ptr, "CCSWeaponBase", "m_ePlayerFireEvent");
}

void GCCSWeaponBase::SetPlayerFireEvent(PlayerAnimEvent_t value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_ePlayerFireEvent", false, value);
}

WeaponAttackType_t GCCSWeaponBase::GetPlayerFireEventAttackType() const {
    return GetSchemaValue<WeaponAttackType_t>(m_ptr, "CCSWeaponBase", "m_ePlayerFireEventAttackType");
}

void GCCSWeaponBase::SetPlayerFireEventAttackType(WeaponAttackType_t value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_ePlayerFireEventAttackType", false, value);
}

int32_t GCCSWeaponBase::GetSilencerBoneIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBase", "m_nSilencerBoneIndex");
}

void GCCSWeaponBase::SetSilencerBoneIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_nSilencerBoneIndex", false, value);
}

bool GCCSWeaponBase::GetPlayerAmmoStockOnPickup() const {
    return GetSchemaValue<bool>(m_ptr, "CCSWeaponBase", "m_bPlayerAmmoStockOnPickup");
}

void GCCSWeaponBase::SetPlayerAmmoStockOnPickup(bool value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_bPlayerAmmoStockOnPickup", false, value);
}

bool GCCSWeaponBase::GetRequireUseToTouch() const {
    return GetSchemaValue<bool>(m_ptr, "CCSWeaponBase", "m_bRequireUseToTouch");
}

void GCCSWeaponBase::SetRequireUseToTouch(bool value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_bRequireUseToTouch", false, value);
}

CSWeaponState_t GCCSWeaponBase::GetState() const {
    return GetSchemaValue<CSWeaponState_t>(m_ptr, "CCSWeaponBase", "m_iState");
}

void GCCSWeaponBase::SetState(CSWeaponState_t value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_iState", false, value);
}

int32_t GCCSWeaponBase::GetLastEmptySoundCmdNum() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBase", "m_nLastEmptySoundCmdNum");
}

void GCCSWeaponBase::SetLastEmptySoundCmdNum(int32_t value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_nLastEmptySoundCmdNum", false, value);
}

uint32_t GCCSWeaponBase::GetViewModelIndex() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CCSWeaponBase", "m_nViewModelIndex");
}

void GCCSWeaponBase::SetViewModelIndex(uint32_t value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_nViewModelIndex", false, value);
}

bool GCCSWeaponBase::GetReloadsWithClips() const {
    return GetSchemaValue<bool>(m_ptr, "CCSWeaponBase", "m_bReloadsWithClips");
}

void GCCSWeaponBase::SetReloadsWithClips(bool value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_bReloadsWithClips", false, value);
}

bool GCCSWeaponBase::GetFireOnEmpty() const {
    return GetSchemaValue<bool>(m_ptr, "CCSWeaponBase", "m_bFireOnEmpty");
}

void GCCSWeaponBase::SetFireOnEmpty(bool value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_bFireOnEmpty", false, value);
}

GCEntityIOOutput GCCSWeaponBase::GetOnPlayerPickup() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CCSWeaponBase", "m_OnPlayerPickup");
}

void GCCSWeaponBase::SetOnPlayerPickup(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_OnPlayerPickup", false, value);
}

CSWeaponMode GCCSWeaponBase::GetWeaponMode() const {
    return GetSchemaValue<CSWeaponMode>(m_ptr, "CCSWeaponBase", "m_weaponMode");
}

void GCCSWeaponBase::SetWeaponMode(CSWeaponMode value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_weaponMode", false, value);
}

float GCCSWeaponBase::GetTurningInaccuracyDelta() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBase", "m_flTurningInaccuracyDelta");
}

void GCCSWeaponBase::SetTurningInaccuracyDelta(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_flTurningInaccuracyDelta", false, value);
}

Vector GCCSWeaponBase::GetTurningInaccuracyEyeDirLast() const {
    return GetSchemaValue<Vector>(m_ptr, "CCSWeaponBase", "m_vecTurningInaccuracyEyeDirLast");
}

void GCCSWeaponBase::SetTurningInaccuracyEyeDirLast(Vector value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_vecTurningInaccuracyEyeDirLast", false, value);
}

float GCCSWeaponBase::GetTurningInaccuracy() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBase", "m_flTurningInaccuracy");
}

void GCCSWeaponBase::SetTurningInaccuracy(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_flTurningInaccuracy", false, value);
}

float GCCSWeaponBase::GetAccuracyPenalty() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBase", "m_fAccuracyPenalty");
}

void GCCSWeaponBase::SetAccuracyPenalty(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_fAccuracyPenalty", false, value);
}

float GCCSWeaponBase::GetAccuracySmoothedForZoom() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBase", "m_fAccuracySmoothedForZoom");
}

void GCCSWeaponBase::SetAccuracySmoothedForZoom(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_fAccuracySmoothedForZoom", false, value);
}

int32_t GCCSWeaponBase::GetRecoilIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBase", "m_iRecoilIndex");
}

void GCCSWeaponBase::SetRecoilIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_iRecoilIndex", false, value);
}

float GCCSWeaponBase::GetRecoilIndex1() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBase", "m_flRecoilIndex");
}

void GCCSWeaponBase::SetRecoilIndex1(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_flRecoilIndex", false, value);
}

bool GCCSWeaponBase::GetBurstMode() const {
    return GetSchemaValue<bool>(m_ptr, "CCSWeaponBase", "m_bBurstMode");
}

void GCCSWeaponBase::SetBurstMode(bool value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_bBurstMode", false, value);
}

float GCCSWeaponBase::GetPostponeFireReadyFrac() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBase", "m_flPostponeFireReadyFrac");
}

void GCCSWeaponBase::SetPostponeFireReadyFrac(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_flPostponeFireReadyFrac", false, value);
}

bool GCCSWeaponBase::GetInReload() const {
    return GetSchemaValue<bool>(m_ptr, "CCSWeaponBase", "m_bInReload");
}

void GCCSWeaponBase::SetInReload(bool value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_bInReload", false, value);
}

bool GCCSWeaponBase::GetReloadVisuallyComplete() const {
    return GetSchemaValue<bool>(m_ptr, "CCSWeaponBase", "m_bReloadVisuallyComplete");
}

void GCCSWeaponBase::SetReloadVisuallyComplete(bool value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_bReloadVisuallyComplete", false, value);
}

bool GCCSWeaponBase::GetIsHauledBack() const {
    return GetSchemaValue<bool>(m_ptr, "CCSWeaponBase", "m_bIsHauledBack");
}

void GCCSWeaponBase::SetIsHauledBack(bool value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_bIsHauledBack", false, value);
}

bool GCCSWeaponBase::GetSilencerOn() const {
    return GetSchemaValue<bool>(m_ptr, "CCSWeaponBase", "m_bSilencerOn");
}

void GCCSWeaponBase::SetSilencerOn(bool value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_bSilencerOn", false, value);
}

int32_t GCCSWeaponBase::GetOriginalTeamNumber() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBase", "m_iOriginalTeamNumber");
}

void GCCSWeaponBase::SetOriginalTeamNumber(int32_t value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_iOriginalTeamNumber", false, value);
}

int32_t GCCSWeaponBase::GetMostRecentTeamNumber() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBase", "m_iMostRecentTeamNumber");
}

void GCCSWeaponBase::SetMostRecentTeamNumber(int32_t value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_iMostRecentTeamNumber", false, value);
}

bool GCCSWeaponBase::GetDroppedNearBuyZone() const {
    return GetSchemaValue<bool>(m_ptr, "CCSWeaponBase", "m_bDroppedNearBuyZone");
}

void GCCSWeaponBase::SetDroppedNearBuyZone(bool value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_bDroppedNearBuyZone", false, value);
}

float GCCSWeaponBase::GetNextAttackRenderTimeOffset() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBase", "m_flNextAttackRenderTimeOffset");
}

void GCCSWeaponBase::SetNextAttackRenderTimeOffset(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_flNextAttackRenderTimeOffset", false, value);
}

bool GCCSWeaponBase::GetCanBePickedUp() const {
    return GetSchemaValue<bool>(m_ptr, "CCSWeaponBase", "m_bCanBePickedUp");
}

void GCCSWeaponBase::SetCanBePickedUp(bool value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_bCanBePickedUp", false, value);
}

bool GCCSWeaponBase::GetUseCanOverrideNextOwnerTouchTime() const {
    return GetSchemaValue<bool>(m_ptr, "CCSWeaponBase", "m_bUseCanOverrideNextOwnerTouchTime");
}

void GCCSWeaponBase::SetUseCanOverrideNextOwnerTouchTime(bool value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_bUseCanOverrideNextOwnerTouchTime", false, value);
}

GCCSPlayerPawn GCCSWeaponBase::GetPrevOwner() const {
    GCCSPlayerPawn value(GetSchemaValuePtr<void>(m_ptr, "CCSWeaponBase", "m_hPrevOwner"));
    return value;
}

void GCCSWeaponBase::SetPrevOwner(GCCSPlayerPawn* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'PrevOwner' is not possible.\n");
}

bool GCCSWeaponBase::GetDonated() const {
    return GetSchemaValue<bool>(m_ptr, "CCSWeaponBase", "m_donated");
}

void GCCSWeaponBase::SetDonated(bool value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_donated", false, value);
}

bool GCCSWeaponBase::GetWasOwnedByCT() const {
    return GetSchemaValue<bool>(m_ptr, "CCSWeaponBase", "m_bWasOwnedByCT");
}

void GCCSWeaponBase::SetWasOwnedByCT(bool value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_bWasOwnedByCT", false, value);
}

bool GCCSWeaponBase::GetWasOwnedByTerrorist() const {
    return GetSchemaValue<bool>(m_ptr, "CCSWeaponBase", "m_bWasOwnedByTerrorist");
}

void GCCSWeaponBase::SetWasOwnedByTerrorist(bool value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_bWasOwnedByTerrorist", false, value);
}

bool GCCSWeaponBase::GetFiredOutOfAmmoEvent() const {
    return GetSchemaValue<bool>(m_ptr, "CCSWeaponBase", "m_bFiredOutOfAmmoEvent");
}

void GCCSWeaponBase::SetFiredOutOfAmmoEvent(bool value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_bFiredOutOfAmmoEvent", false, value);
}

int32_t GCCSWeaponBase::GetNumRemoveUnownedWeaponThink() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBase", "m_numRemoveUnownedWeaponThink");
}

void GCCSWeaponBase::SetNumRemoveUnownedWeaponThink(int32_t value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_numRemoveUnownedWeaponThink", false, value);
}

GCIronSightController GCCSWeaponBase::GetIronSightController() const {
    return GetSchemaValue<GCIronSightController>(m_ptr, "CCSWeaponBase", "m_IronSightController");
}

void GCCSWeaponBase::SetIronSightController(GCIronSightController value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_IronSightController", false, value);
}

int32_t GCCSWeaponBase::GetIronSightMode() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBase", "m_iIronSightMode");
}

void GCCSWeaponBase::SetIronSightMode(int32_t value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_iIronSightMode", false, value);
}

int32_t GCCSWeaponBase::GetNumEmptyAttacks() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBase", "m_iNumEmptyAttacks");
}

void GCCSWeaponBase::SetNumEmptyAttacks(int32_t value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_iNumEmptyAttacks", false, value);
}

float GCCSWeaponBase::GetWatTickOffset() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBase", "m_flWatTickOffset");
}

void GCCSWeaponBase::SetWatTickOffset(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBase", "m_flWatTickOffset", false, value);
}

std::string GCCSWeaponBase::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSWeaponBase::IsValid() {
    return (m_ptr != nullptr);
}

GCPathCorner::GCPathCorner(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPathCorner::GCPathCorner(void *ptr) {
    m_ptr = ptr;
}

float GCPathCorner::GetWait() const {
    return GetSchemaValue<float>(m_ptr, "CPathCorner", "m_flWait");
}

void GCPathCorner::SetWait(float value) {
    SetSchemaValue(m_ptr, "CPathCorner", "m_flWait", false, value);
}

float GCPathCorner::GetRadius() const {
    return GetSchemaValue<float>(m_ptr, "CPathCorner", "m_flRadius");
}

void GCPathCorner::SetRadius(float value) {
    SetSchemaValue(m_ptr, "CPathCorner", "m_flRadius", false, value);
}

GCEntityIOOutput GCPathCorner::GetOnPass() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPathCorner", "m_OnPass");
}

void GCPathCorner::SetOnPass(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPathCorner", "m_OnPass", false, value);
}

std::string GCPathCorner::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPathCorner::IsValid() {
    return (m_ptr != nullptr);
}

GCPlayerControllerComponent::GCPlayerControllerComponent(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPlayerControllerComponent::GCPlayerControllerComponent(void *ptr) {
    m_ptr = ptr;
}

GCNetworkVarChainer GCPlayerControllerComponent::Get__pChainEntity() const {
    return GetSchemaValue<GCNetworkVarChainer>(m_ptr, "CPlayerControllerComponent", "__m_pChainEntity");
}

void GCPlayerControllerComponent::Set__pChainEntity(GCNetworkVarChainer value) {
    SetSchemaValue(m_ptr, "CPlayerControllerComponent", "__m_pChainEntity", false, value);
}

std::string GCPlayerControllerComponent::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPlayerControllerComponent::IsValid() {
    return (m_ptr != nullptr);
}

GCWeaponBaseItem::GCWeaponBaseItem(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWeaponBaseItem::GCWeaponBaseItem(void *ptr) {
    m_ptr = ptr;
}

GCountdownTimer GCWeaponBaseItem::GetSequenceCompleteTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CWeaponBaseItem", "m_SequenceCompleteTimer");
}

void GCWeaponBaseItem::SetSequenceCompleteTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CWeaponBaseItem", "m_SequenceCompleteTimer", false, value);
}

bool GCWeaponBaseItem::GetRedraw() const {
    return GetSchemaValue<bool>(m_ptr, "CWeaponBaseItem", "m_bRedraw");
}

void GCWeaponBaseItem::SetRedraw(bool value) {
    SetSchemaValue(m_ptr, "CWeaponBaseItem", "m_bRedraw", false, value);
}

std::string GCWeaponBaseItem::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWeaponBaseItem::IsValid() {
    return (m_ptr != nullptr);
}

GCBaseCombatCharacter::GCBaseCombatCharacter(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBaseCombatCharacter::GCBaseCombatCharacter(void *ptr) {
    m_ptr = ptr;
}

bool GCBaseCombatCharacter::GetForceServerRagdoll() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseCombatCharacter", "m_bForceServerRagdoll");
}

void GCBaseCombatCharacter::SetForceServerRagdoll(bool value) {
    SetSchemaValue(m_ptr, "CBaseCombatCharacter", "m_bForceServerRagdoll", false, value);
}

std::vector<GCEconWearable*> GCBaseCombatCharacter::GetMyWearables() const {
    CUtlVector<GCEconWearable*>* vec = GetSchemaValue<CUtlVector<GCEconWearable*>*>(m_ptr, "CBaseCombatCharacter", "m_hMyWearables"); std::vector<GCEconWearable*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCBaseCombatCharacter::SetMyWearables(std::vector<GCEconWearable*> value) {
    SetSchemaValueCUtlVector<GCEconWearable*>(m_ptr, "CBaseCombatCharacter", "m_hMyWearables", false, value);
}

float GCBaseCombatCharacter::GetFieldOfView() const {
    return GetSchemaValue<float>(m_ptr, "CBaseCombatCharacter", "m_flFieldOfView");
}

void GCBaseCombatCharacter::SetFieldOfView(float value) {
    SetSchemaValue(m_ptr, "CBaseCombatCharacter", "m_flFieldOfView", false, value);
}

float GCBaseCombatCharacter::GetImpactEnergyScale() const {
    return GetSchemaValue<float>(m_ptr, "CBaseCombatCharacter", "m_impactEnergyScale");
}

void GCBaseCombatCharacter::SetImpactEnergyScale(float value) {
    SetSchemaValue(m_ptr, "CBaseCombatCharacter", "m_impactEnergyScale", false, value);
}

HitGroup_t GCBaseCombatCharacter::GetLastHitGroup() const {
    return GetSchemaValue<HitGroup_t>(m_ptr, "CBaseCombatCharacter", "m_LastHitGroup");
}

void GCBaseCombatCharacter::SetLastHitGroup(HitGroup_t value) {
    SetSchemaValue(m_ptr, "CBaseCombatCharacter", "m_LastHitGroup", false, value);
}

bool GCBaseCombatCharacter::GetApplyStressDamage() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseCombatCharacter", "m_bApplyStressDamage");
}

void GCBaseCombatCharacter::SetApplyStressDamage(bool value) {
    SetSchemaValue(m_ptr, "CBaseCombatCharacter", "m_bApplyStressDamage", false, value);
}

int32_t GCBaseCombatCharacter::GetDamageCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBaseCombatCharacter", "m_iDamageCount");
}

void GCBaseCombatCharacter::SetDamageCount(int32_t value) {
    SetSchemaValue(m_ptr, "CBaseCombatCharacter", "m_iDamageCount", false, value);
}

CUtlSymbolLarge GCBaseCombatCharacter::GetStrRelationships() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBaseCombatCharacter", "m_strRelationships");
}

void GCBaseCombatCharacter::SetStrRelationships(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBaseCombatCharacter", "m_strRelationships", false, value);
}

Hull_t GCBaseCombatCharacter::GetHull() const {
    return GetSchemaValue<Hull_t>(m_ptr, "CBaseCombatCharacter", "m_eHull");
}

void GCBaseCombatCharacter::SetHull(Hull_t value) {
    SetSchemaValue(m_ptr, "CBaseCombatCharacter", "m_eHull", false, value);
}

uint32_t GCBaseCombatCharacter::GetNavHullIdx() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CBaseCombatCharacter", "m_nNavHullIdx");
}

void GCBaseCombatCharacter::SetNavHullIdx(uint32_t value) {
    SetSchemaValue(m_ptr, "CBaseCombatCharacter", "m_nNavHullIdx", false, value);
}

std::string GCBaseCombatCharacter::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBaseCombatCharacter::IsValid() {
    return (m_ptr != nullptr);
}

GCMultiSource::GCMultiSource(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMultiSource::GCMultiSource(void *ptr) {
    m_ptr = ptr;
}

std::vector<GCBaseEntity*> GCMultiSource::GetRgEntities() const {
    GCBaseEntity** outValue = GetSchemaValue<GCBaseEntity**>(m_ptr, "CMultiSource", "m_rgEntities"); std::vector<GCBaseEntity*> ret; for(int i = 0; i < 32; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCMultiSource::SetRgEntities(std::vector<GCBaseEntity*> value) {
    GCBaseEntity** outValue = GetSchemaValue<GCBaseEntity**>(m_ptr, "CMultiSource", "m_rgEntities"); for(int i = 0; i < 32; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CMultiSource", "m_rgEntities", false, outValue);
}

std::vector<int32_t> GCMultiSource::GetRgTriggered() const {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CMultiSource", "m_rgTriggered"); std::vector<int32_t> ret; for(int i = 0; i < 32; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCMultiSource::SetRgTriggered(std::vector<int32_t> value) {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CMultiSource", "m_rgTriggered"); for(int i = 0; i < 32; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CMultiSource", "m_rgTriggered", false, outValue);
}

GCEntityIOOutput GCMultiSource::GetOnTrigger() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CMultiSource", "m_OnTrigger");
}

void GCMultiSource::SetOnTrigger(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CMultiSource", "m_OnTrigger", false, value);
}

int32_t GCMultiSource::GetTotal() const {
    return GetSchemaValue<int32_t>(m_ptr, "CMultiSource", "m_iTotal");
}

void GCMultiSource::SetTotal(int32_t value) {
    SetSchemaValue(m_ptr, "CMultiSource", "m_iTotal", false, value);
}

CUtlSymbolLarge GCMultiSource::GetGlobalstate() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CMultiSource", "m_globalstate");
}

void GCMultiSource::SetGlobalstate(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CMultiSource", "m_globalstate", false, value);
}

std::string GCMultiSource::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMultiSource::IsValid() {
    return (m_ptr != nullptr);
}

GCLogicNavigation::GCLogicNavigation(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCLogicNavigation::GCLogicNavigation(void *ptr) {
    m_ptr = ptr;
}

bool GCLogicNavigation::GetIsOn() const {
    return GetSchemaValue<bool>(m_ptr, "CLogicNavigation", "m_isOn");
}

void GCLogicNavigation::SetIsOn(bool value) {
    SetSchemaValue(m_ptr, "CLogicNavigation", "m_isOn", false, value);
}

navproperties_t GCLogicNavigation::GetNavProperty() const {
    return GetSchemaValue<navproperties_t>(m_ptr, "CLogicNavigation", "m_navProperty");
}

void GCLogicNavigation::SetNavProperty(navproperties_t value) {
    SetSchemaValue(m_ptr, "CLogicNavigation", "m_navProperty", false, value);
}

std::string GCLogicNavigation::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCLogicNavigation::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvEntityMaker::GCEnvEntityMaker(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvEntityMaker::GCEnvEntityMaker(void *ptr) {
    m_ptr = ptr;
}

Vector GCEnvEntityMaker::GetEntityMins() const {
    return GetSchemaValue<Vector>(m_ptr, "CEnvEntityMaker", "m_vecEntityMins");
}

void GCEnvEntityMaker::SetEntityMins(Vector value) {
    SetSchemaValue(m_ptr, "CEnvEntityMaker", "m_vecEntityMins", false, value);
}

Vector GCEnvEntityMaker::GetEntityMaxs() const {
    return GetSchemaValue<Vector>(m_ptr, "CEnvEntityMaker", "m_vecEntityMaxs");
}

void GCEnvEntityMaker::SetEntityMaxs(Vector value) {
    SetSchemaValue(m_ptr, "CEnvEntityMaker", "m_vecEntityMaxs", false, value);
}

GCBaseEntity GCEnvEntityMaker::GetCurrentInstance() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CEnvEntityMaker", "m_hCurrentInstance"));
    return value;
}

void GCEnvEntityMaker::SetCurrentInstance(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'CurrentInstance' is not possible.\n");
}

GCBaseEntity GCEnvEntityMaker::GetCurrentBlocker() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CEnvEntityMaker", "m_hCurrentBlocker"));
    return value;
}

void GCEnvEntityMaker::SetCurrentBlocker(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'CurrentBlocker' is not possible.\n");
}

Vector GCEnvEntityMaker::GetBlockerOrigin() const {
    return GetSchemaValue<Vector>(m_ptr, "CEnvEntityMaker", "m_vecBlockerOrigin");
}

void GCEnvEntityMaker::SetBlockerOrigin(Vector value) {
    SetSchemaValue(m_ptr, "CEnvEntityMaker", "m_vecBlockerOrigin", false, value);
}

QAngle GCEnvEntityMaker::GetPostSpawnDirection() const {
    return GetSchemaValue<QAngle>(m_ptr, "CEnvEntityMaker", "m_angPostSpawnDirection");
}

void GCEnvEntityMaker::SetPostSpawnDirection(QAngle value) {
    SetSchemaValue(m_ptr, "CEnvEntityMaker", "m_angPostSpawnDirection", false, value);
}

float GCEnvEntityMaker::GetPostSpawnDirectionVariance() const {
    return GetSchemaValue<float>(m_ptr, "CEnvEntityMaker", "m_flPostSpawnDirectionVariance");
}

void GCEnvEntityMaker::SetPostSpawnDirectionVariance(float value) {
    SetSchemaValue(m_ptr, "CEnvEntityMaker", "m_flPostSpawnDirectionVariance", false, value);
}

float GCEnvEntityMaker::GetPostSpawnSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CEnvEntityMaker", "m_flPostSpawnSpeed");
}

void GCEnvEntityMaker::SetPostSpawnSpeed(float value) {
    SetSchemaValue(m_ptr, "CEnvEntityMaker", "m_flPostSpawnSpeed", false, value);
}

bool GCEnvEntityMaker::GetPostSpawnUseAngles() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvEntityMaker", "m_bPostSpawnUseAngles");
}

void GCEnvEntityMaker::SetPostSpawnUseAngles(bool value) {
    SetSchemaValue(m_ptr, "CEnvEntityMaker", "m_bPostSpawnUseAngles", false, value);
}

CUtlSymbolLarge GCEnvEntityMaker::GetTemplate() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvEntityMaker", "m_iszTemplate");
}

void GCEnvEntityMaker::SetTemplate(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEnvEntityMaker", "m_iszTemplate", false, value);
}

GCEntityIOOutput GCEnvEntityMaker::GetOutputOnSpawned() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CEnvEntityMaker", "m_pOutputOnSpawned");
}

void GCEnvEntityMaker::SetOutputOnSpawned(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CEnvEntityMaker", "m_pOutputOnSpawned", false, value);
}

GCEntityIOOutput GCEnvEntityMaker::GetOutputOnFailedSpawn() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CEnvEntityMaker", "m_pOutputOnFailedSpawn");
}

void GCEnvEntityMaker::SetOutputOnFailedSpawn(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CEnvEntityMaker", "m_pOutputOnFailedSpawn", false, value);
}

std::string GCEnvEntityMaker::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvEntityMaker::IsValid() {
    return (m_ptr != nullptr);
}

GCProjectedDecal::GCProjectedDecal(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCProjectedDecal::GCProjectedDecal(void *ptr) {
    m_ptr = ptr;
}

int32_t GCProjectedDecal::GetTexture() const {
    return GetSchemaValue<int32_t>(m_ptr, "CProjectedDecal", "m_nTexture");
}

void GCProjectedDecal::SetTexture(int32_t value) {
    SetSchemaValue(m_ptr, "CProjectedDecal", "m_nTexture", false, value);
}

float GCProjectedDecal::GetDistance() const {
    return GetSchemaValue<float>(m_ptr, "CProjectedDecal", "m_flDistance");
}

void GCProjectedDecal::SetDistance(float value) {
    SetSchemaValue(m_ptr, "CProjectedDecal", "m_flDistance", false, value);
}

std::string GCProjectedDecal::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCProjectedDecal::IsValid() {
    return (m_ptr != nullptr);
}

GCLogicEventListener::GCLogicEventListener(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCLogicEventListener::GCLogicEventListener(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCLogicEventListener::GetStrEventName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CLogicEventListener", "m_strEventName");
}

void GCLogicEventListener::SetStrEventName(CUtlString value) {
    SetSchemaValue(m_ptr, "CLogicEventListener", "m_strEventName", false, value);
}

bool GCLogicEventListener::GetIsEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CLogicEventListener", "m_bIsEnabled");
}

void GCLogicEventListener::SetIsEnabled(bool value) {
    SetSchemaValue(m_ptr, "CLogicEventListener", "m_bIsEnabled", false, value);
}

int32_t GCLogicEventListener::GetTeam() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLogicEventListener", "m_nTeam");
}

void GCLogicEventListener::SetTeam(int32_t value) {
    SetSchemaValue(m_ptr, "CLogicEventListener", "m_nTeam", false, value);
}

GCEntityIOOutput GCLogicEventListener::GetOnEventFired() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CLogicEventListener", "m_OnEventFired");
}

void GCLogicEventListener::SetOnEventFired(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CLogicEventListener", "m_OnEventFired", false, value);
}

std::string GCLogicEventListener::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCLogicEventListener::IsValid() {
    return (m_ptr != nullptr);
}

GCFilterMultiple::GCFilterMultiple(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFilterMultiple::GCFilterMultiple(void *ptr) {
    m_ptr = ptr;
}

filter_t GCFilterMultiple::GetFilterType() const {
    return GetSchemaValue<filter_t>(m_ptr, "CFilterMultiple", "m_nFilterType");
}

void GCFilterMultiple::SetFilterType(filter_t value) {
    SetSchemaValue(m_ptr, "CFilterMultiple", "m_nFilterType", false, value);
}

std::vector<CUtlSymbolLarge> GCFilterMultiple::GetFilterName() const {
    CUtlSymbolLarge* outValue = GetSchemaValue<CUtlSymbolLarge*>(m_ptr, "CFilterMultiple", "m_iFilterName"); std::vector<CUtlSymbolLarge> ret; for(int i = 0; i < 10; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCFilterMultiple::SetFilterName(std::vector<CUtlSymbolLarge> value) {
    CUtlSymbolLarge* outValue = GetSchemaValue<CUtlSymbolLarge*>(m_ptr, "CFilterMultiple", "m_iFilterName"); for(int i = 0; i < 10; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CFilterMultiple", "m_iFilterName", false, outValue);
}

std::vector<GCBaseEntity*> GCFilterMultiple::GetFilter() const {
    GCBaseEntity** outValue = GetSchemaValue<GCBaseEntity**>(m_ptr, "CFilterMultiple", "m_hFilter"); std::vector<GCBaseEntity*> ret; for(int i = 0; i < 10; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCFilterMultiple::SetFilter(std::vector<GCBaseEntity*> value) {
    GCBaseEntity** outValue = GetSchemaValue<GCBaseEntity**>(m_ptr, "CFilterMultiple", "m_hFilter"); for(int i = 0; i < 10; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CFilterMultiple", "m_hFilter", false, outValue);
}

int32_t GCFilterMultiple::GetFilterCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CFilterMultiple", "m_nFilterCount");
}

void GCFilterMultiple::SetFilterCount(int32_t value) {
    SetSchemaValue(m_ptr, "CFilterMultiple", "m_nFilterCount", false, value);
}

std::string GCFilterMultiple::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFilterMultiple::IsValid() {
    return (m_ptr != nullptr);
}

GCPlayer_UseServices::GCPlayer_UseServices(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPlayer_UseServices::GCPlayer_UseServices(void *ptr) {
    m_ptr = ptr;
}

std::string GCPlayer_UseServices::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPlayer_UseServices::IsValid() {
    return (m_ptr != nullptr);
}

GCScriptComponent::GCScriptComponent(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCScriptComponent::GCScriptComponent(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCScriptComponent::GetScriptClassName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CScriptComponent", "m_scriptClassName");
}

void GCScriptComponent::SetScriptClassName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CScriptComponent", "m_scriptClassName", false, value);
}

std::string GCScriptComponent::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCScriptComponent::IsValid() {
    return (m_ptr != nullptr);
}

GCPhysicsWire::GCPhysicsWire(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPhysicsWire::GCPhysicsWire(void *ptr) {
    m_ptr = ptr;
}

int32_t GCPhysicsWire::GetDensity() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPhysicsWire", "m_nDensity");
}

void GCPhysicsWire::SetDensity(int32_t value) {
    SetSchemaValue(m_ptr, "CPhysicsWire", "m_nDensity", false, value);
}

std::string GCPhysicsWire::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPhysicsWire::IsValid() {
    return (m_ptr != nullptr);
}

Glocksound_t::Glocksound_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

Glocksound_t::Glocksound_t(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge Glocksound_t::GetLockedSound() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "locksound_t", "sLockedSound");
}

void Glocksound_t::SetLockedSound(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "locksound_t", "sLockedSound", true, value);
}

CUtlSymbolLarge Glocksound_t::GetUnlockedSound() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "locksound_t", "sUnlockedSound");
}

void Glocksound_t::SetUnlockedSound(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "locksound_t", "sUnlockedSound", true, value);
}

std::string Glocksound_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool Glocksound_t::IsValid() {
    return (m_ptr != nullptr);
}

GCCSPointScriptExtensions_player_controller::GCCSPointScriptExtensions_player_controller(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSPointScriptExtensions_player_controller::GCCSPointScriptExtensions_player_controller(void *ptr) {
    m_ptr = ptr;
}

std::string GCCSPointScriptExtensions_player_controller::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSPointScriptExtensions_player_controller::IsValid() {
    return (m_ptr != nullptr);
}

GCBaseFire::GCBaseFire(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBaseFire::GCBaseFire(void *ptr) {
    m_ptr = ptr;
}

float GCBaseFire::GetScale() const {
    return GetSchemaValue<float>(m_ptr, "CBaseFire", "m_flScale");
}

void GCBaseFire::SetScale(float value) {
    SetSchemaValue(m_ptr, "CBaseFire", "m_flScale", false, value);
}

float GCBaseFire::GetStartScale() const {
    return GetSchemaValue<float>(m_ptr, "CBaseFire", "m_flStartScale");
}

void GCBaseFire::SetStartScale(float value) {
    SetSchemaValue(m_ptr, "CBaseFire", "m_flStartScale", false, value);
}

float GCBaseFire::GetScaleTime() const {
    return GetSchemaValue<float>(m_ptr, "CBaseFire", "m_flScaleTime");
}

void GCBaseFire::SetScaleTime(float value) {
    SetSchemaValue(m_ptr, "CBaseFire", "m_flScaleTime", false, value);
}

uint32_t GCBaseFire::GetFlags() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CBaseFire", "m_nFlags");
}

void GCBaseFire::SetFlags(uint32_t value) {
    SetSchemaValue(m_ptr, "CBaseFire", "m_nFlags", false, value);
}

std::string GCBaseFire::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBaseFire::IsValid() {
    return (m_ptr != nullptr);
}

GCBumpMine::GCBumpMine(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBumpMine::GCBumpMine(void *ptr) {
    m_ptr = ptr;
}

std::string GCBumpMine::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBumpMine::IsValid() {
    return (m_ptr != nullptr);
}

GCLightGlow::GCLightGlow(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCLightGlow::GCLightGlow(void *ptr) {
    m_ptr = ptr;
}

uint32_t GCLightGlow::GetHorizontalSize() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CLightGlow", "m_nHorizontalSize");
}

void GCLightGlow::SetHorizontalSize(uint32_t value) {
    SetSchemaValue(m_ptr, "CLightGlow", "m_nHorizontalSize", false, value);
}

uint32_t GCLightGlow::GetVerticalSize() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CLightGlow", "m_nVerticalSize");
}

void GCLightGlow::SetVerticalSize(uint32_t value) {
    SetSchemaValue(m_ptr, "CLightGlow", "m_nVerticalSize", false, value);
}

uint32_t GCLightGlow::GetMinDist() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CLightGlow", "m_nMinDist");
}

void GCLightGlow::SetMinDist(uint32_t value) {
    SetSchemaValue(m_ptr, "CLightGlow", "m_nMinDist", false, value);
}

uint32_t GCLightGlow::GetMaxDist() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CLightGlow", "m_nMaxDist");
}

void GCLightGlow::SetMaxDist(uint32_t value) {
    SetSchemaValue(m_ptr, "CLightGlow", "m_nMaxDist", false, value);
}

uint32_t GCLightGlow::GetOuterMaxDist() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CLightGlow", "m_nOuterMaxDist");
}

void GCLightGlow::SetOuterMaxDist(uint32_t value) {
    SetSchemaValue(m_ptr, "CLightGlow", "m_nOuterMaxDist", false, value);
}

float GCLightGlow::GetGlowProxySize() const {
    return GetSchemaValue<float>(m_ptr, "CLightGlow", "m_flGlowProxySize");
}

void GCLightGlow::SetGlowProxySize(float value) {
    SetSchemaValue(m_ptr, "CLightGlow", "m_flGlowProxySize", false, value);
}

float GCLightGlow::GetHDRColorScale() const {
    return GetSchemaValue<float>(m_ptr, "CLightGlow", "m_flHDRColorScale");
}

void GCLightGlow::SetHDRColorScale(float value) {
    SetSchemaValue(m_ptr, "CLightGlow", "m_flHDRColorScale", false, value);
}

std::string GCLightGlow::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCLightGlow::IsValid() {
    return (m_ptr != nullptr);
}

GCSPerRoundStats_t::GCSPerRoundStats_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSPerRoundStats_t::GCSPerRoundStats_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GCSPerRoundStats_t::GetKills() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSPerRoundStats_t", "m_iKills");
}

void GCSPerRoundStats_t::SetKills(int32_t value) {
    SetSchemaValue(m_ptr, "CSPerRoundStats_t", "m_iKills", true, value);
}

int32_t GCSPerRoundStats_t::GetDeaths() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSPerRoundStats_t", "m_iDeaths");
}

void GCSPerRoundStats_t::SetDeaths(int32_t value) {
    SetSchemaValue(m_ptr, "CSPerRoundStats_t", "m_iDeaths", true, value);
}

int32_t GCSPerRoundStats_t::GetAssists() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSPerRoundStats_t", "m_iAssists");
}

void GCSPerRoundStats_t::SetAssists(int32_t value) {
    SetSchemaValue(m_ptr, "CSPerRoundStats_t", "m_iAssists", true, value);
}

int32_t GCSPerRoundStats_t::GetDamage() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSPerRoundStats_t", "m_iDamage");
}

void GCSPerRoundStats_t::SetDamage(int32_t value) {
    SetSchemaValue(m_ptr, "CSPerRoundStats_t", "m_iDamage", true, value);
}

int32_t GCSPerRoundStats_t::GetEquipmentValue() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSPerRoundStats_t", "m_iEquipmentValue");
}

void GCSPerRoundStats_t::SetEquipmentValue(int32_t value) {
    SetSchemaValue(m_ptr, "CSPerRoundStats_t", "m_iEquipmentValue", true, value);
}

int32_t GCSPerRoundStats_t::GetMoneySaved() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSPerRoundStats_t", "m_iMoneySaved");
}

void GCSPerRoundStats_t::SetMoneySaved(int32_t value) {
    SetSchemaValue(m_ptr, "CSPerRoundStats_t", "m_iMoneySaved", true, value);
}

int32_t GCSPerRoundStats_t::GetKillReward() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSPerRoundStats_t", "m_iKillReward");
}

void GCSPerRoundStats_t::SetKillReward(int32_t value) {
    SetSchemaValue(m_ptr, "CSPerRoundStats_t", "m_iKillReward", true, value);
}

int32_t GCSPerRoundStats_t::GetLiveTime() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSPerRoundStats_t", "m_iLiveTime");
}

void GCSPerRoundStats_t::SetLiveTime(int32_t value) {
    SetSchemaValue(m_ptr, "CSPerRoundStats_t", "m_iLiveTime", true, value);
}

int32_t GCSPerRoundStats_t::GetHeadShotKills() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSPerRoundStats_t", "m_iHeadShotKills");
}

void GCSPerRoundStats_t::SetHeadShotKills(int32_t value) {
    SetSchemaValue(m_ptr, "CSPerRoundStats_t", "m_iHeadShotKills", true, value);
}

int32_t GCSPerRoundStats_t::GetObjective() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSPerRoundStats_t", "m_iObjective");
}

void GCSPerRoundStats_t::SetObjective(int32_t value) {
    SetSchemaValue(m_ptr, "CSPerRoundStats_t", "m_iObjective", true, value);
}

int32_t GCSPerRoundStats_t::GetCashEarned() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSPerRoundStats_t", "m_iCashEarned");
}

void GCSPerRoundStats_t::SetCashEarned(int32_t value) {
    SetSchemaValue(m_ptr, "CSPerRoundStats_t", "m_iCashEarned", true, value);
}

int32_t GCSPerRoundStats_t::GetUtilityDamage() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSPerRoundStats_t", "m_iUtilityDamage");
}

void GCSPerRoundStats_t::SetUtilityDamage(int32_t value) {
    SetSchemaValue(m_ptr, "CSPerRoundStats_t", "m_iUtilityDamage", true, value);
}

int32_t GCSPerRoundStats_t::GetEnemiesFlashed() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSPerRoundStats_t", "m_iEnemiesFlashed");
}

void GCSPerRoundStats_t::SetEnemiesFlashed(int32_t value) {
    SetSchemaValue(m_ptr, "CSPerRoundStats_t", "m_iEnemiesFlashed", true, value);
}

std::string GCSPerRoundStats_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSPerRoundStats_t::IsValid() {
    return (m_ptr != nullptr);
}

GCBasePropDoor::GCBasePropDoor(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBasePropDoor::GCBasePropDoor(void *ptr) {
    m_ptr = ptr;
}

float GCBasePropDoor::GetAutoReturnDelay() const {
    return GetSchemaValue<float>(m_ptr, "CBasePropDoor", "m_flAutoReturnDelay");
}

void GCBasePropDoor::SetAutoReturnDelay(float value) {
    SetSchemaValue(m_ptr, "CBasePropDoor", "m_flAutoReturnDelay", false, value);
}

int32_t GCBasePropDoor::GetHardwareType() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBasePropDoor", "m_nHardwareType");
}

void GCBasePropDoor::SetHardwareType(int32_t value) {
    SetSchemaValue(m_ptr, "CBasePropDoor", "m_nHardwareType", false, value);
}

bool GCBasePropDoor::GetNeedsHardware() const {
    return GetSchemaValue<bool>(m_ptr, "CBasePropDoor", "m_bNeedsHardware");
}

void GCBasePropDoor::SetNeedsHardware(bool value) {
    SetSchemaValue(m_ptr, "CBasePropDoor", "m_bNeedsHardware", false, value);
}

DoorState_t GCBasePropDoor::GetDoorState() const {
    return GetSchemaValue<DoorState_t>(m_ptr, "CBasePropDoor", "m_eDoorState");
}

void GCBasePropDoor::SetDoorState(DoorState_t value) {
    SetSchemaValue(m_ptr, "CBasePropDoor", "m_eDoorState", false, value);
}

bool GCBasePropDoor::GetLocked() const {
    return GetSchemaValue<bool>(m_ptr, "CBasePropDoor", "m_bLocked");
}

void GCBasePropDoor::SetLocked(bool value) {
    SetSchemaValue(m_ptr, "CBasePropDoor", "m_bLocked", false, value);
}

Vector GCBasePropDoor::GetClosedPosition() const {
    return GetSchemaValue<Vector>(m_ptr, "CBasePropDoor", "m_closedPosition");
}

void GCBasePropDoor::SetClosedPosition(Vector value) {
    SetSchemaValue(m_ptr, "CBasePropDoor", "m_closedPosition", false, value);
}

QAngle GCBasePropDoor::GetClosedAngles() const {
    return GetSchemaValue<QAngle>(m_ptr, "CBasePropDoor", "m_closedAngles");
}

void GCBasePropDoor::SetClosedAngles(QAngle value) {
    SetSchemaValue(m_ptr, "CBasePropDoor", "m_closedAngles", false, value);
}

GCBaseEntity GCBasePropDoor::GetBlocker() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CBasePropDoor", "m_hBlocker"));
    return value;
}

void GCBasePropDoor::SetBlocker(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Blocker' is not possible.\n");
}

bool GCBasePropDoor::GetFirstBlocked() const {
    return GetSchemaValue<bool>(m_ptr, "CBasePropDoor", "m_bFirstBlocked");
}

void GCBasePropDoor::SetFirstBlocked(bool value) {
    SetSchemaValue(m_ptr, "CBasePropDoor", "m_bFirstBlocked", false, value);
}

Glocksound_t GCBasePropDoor::GetLs() const {
    return GetSchemaValue<Glocksound_t>(m_ptr, "CBasePropDoor", "m_ls");
}

void GCBasePropDoor::SetLs(Glocksound_t value) {
    SetSchemaValue(m_ptr, "CBasePropDoor", "m_ls", false, value);
}

bool GCBasePropDoor::GetForceClosed() const {
    return GetSchemaValue<bool>(m_ptr, "CBasePropDoor", "m_bForceClosed");
}

void GCBasePropDoor::SetForceClosed(bool value) {
    SetSchemaValue(m_ptr, "CBasePropDoor", "m_bForceClosed", false, value);
}

Vector GCBasePropDoor::GetLatchWorldPosition() const {
    return GetSchemaValue<Vector>(m_ptr, "CBasePropDoor", "m_vecLatchWorldPosition");
}

void GCBasePropDoor::SetLatchWorldPosition(Vector value) {
    SetSchemaValue(m_ptr, "CBasePropDoor", "m_vecLatchWorldPosition", false, value);
}

GCBaseEntity GCBasePropDoor::GetActivator() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CBasePropDoor", "m_hActivator"));
    return value;
}

void GCBasePropDoor::SetActivator(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Activator' is not possible.\n");
}

CUtlSymbolLarge GCBasePropDoor::GetSoundMoving() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBasePropDoor", "m_SoundMoving");
}

void GCBasePropDoor::SetSoundMoving(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBasePropDoor", "m_SoundMoving", false, value);
}

CUtlSymbolLarge GCBasePropDoor::GetSoundOpen() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBasePropDoor", "m_SoundOpen");
}

void GCBasePropDoor::SetSoundOpen(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBasePropDoor", "m_SoundOpen", false, value);
}

CUtlSymbolLarge GCBasePropDoor::GetSoundClose() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBasePropDoor", "m_SoundClose");
}

void GCBasePropDoor::SetSoundClose(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBasePropDoor", "m_SoundClose", false, value);
}

CUtlSymbolLarge GCBasePropDoor::GetSoundLock() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBasePropDoor", "m_SoundLock");
}

void GCBasePropDoor::SetSoundLock(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBasePropDoor", "m_SoundLock", false, value);
}

CUtlSymbolLarge GCBasePropDoor::GetSoundUnlock() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBasePropDoor", "m_SoundUnlock");
}

void GCBasePropDoor::SetSoundUnlock(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBasePropDoor", "m_SoundUnlock", false, value);
}

CUtlSymbolLarge GCBasePropDoor::GetSoundLatch() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBasePropDoor", "m_SoundLatch");
}

void GCBasePropDoor::SetSoundLatch(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBasePropDoor", "m_SoundLatch", false, value);
}

CUtlSymbolLarge GCBasePropDoor::GetSoundPound() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBasePropDoor", "m_SoundPound");
}

void GCBasePropDoor::SetSoundPound(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBasePropDoor", "m_SoundPound", false, value);
}

CUtlSymbolLarge GCBasePropDoor::GetSoundJiggle() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBasePropDoor", "m_SoundJiggle");
}

void GCBasePropDoor::SetSoundJiggle(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBasePropDoor", "m_SoundJiggle", false, value);
}

CUtlSymbolLarge GCBasePropDoor::GetSoundLockedAnim() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBasePropDoor", "m_SoundLockedAnim");
}

void GCBasePropDoor::SetSoundLockedAnim(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBasePropDoor", "m_SoundLockedAnim", false, value);
}

int32_t GCBasePropDoor::GetNumCloseAttempts() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBasePropDoor", "m_numCloseAttempts");
}

void GCBasePropDoor::SetNumCloseAttempts(int32_t value) {
    SetSchemaValue(m_ptr, "CBasePropDoor", "m_numCloseAttempts", false, value);
}

CUtlStringToken GCBasePropDoor::GetPhysicsMaterial() const {
    return GetSchemaValue<CUtlStringToken>(m_ptr, "CBasePropDoor", "m_nPhysicsMaterial");
}

void GCBasePropDoor::SetPhysicsMaterial(CUtlStringToken value) {
    SetSchemaValue(m_ptr, "CBasePropDoor", "m_nPhysicsMaterial", false, value);
}

CUtlSymbolLarge GCBasePropDoor::GetSlaveName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBasePropDoor", "m_SlaveName");
}

void GCBasePropDoor::SetSlaveName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBasePropDoor", "m_SlaveName", false, value);
}

GCBasePropDoor GCBasePropDoor::GetMaster() const {
    GCBasePropDoor value(GetSchemaValuePtr<void>(m_ptr, "CBasePropDoor", "m_hMaster"));
    return value;
}

void GCBasePropDoor::SetMaster(GCBasePropDoor* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Master' is not possible.\n");
}

GCEntityIOOutput GCBasePropDoor::GetOnBlockedClosing() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBasePropDoor", "m_OnBlockedClosing");
}

void GCBasePropDoor::SetOnBlockedClosing(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBasePropDoor", "m_OnBlockedClosing", false, value);
}

GCEntityIOOutput GCBasePropDoor::GetOnBlockedOpening() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBasePropDoor", "m_OnBlockedOpening");
}

void GCBasePropDoor::SetOnBlockedOpening(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBasePropDoor", "m_OnBlockedOpening", false, value);
}

GCEntityIOOutput GCBasePropDoor::GetOnUnblockedClosing() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBasePropDoor", "m_OnUnblockedClosing");
}

void GCBasePropDoor::SetOnUnblockedClosing(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBasePropDoor", "m_OnUnblockedClosing", false, value);
}

GCEntityIOOutput GCBasePropDoor::GetOnUnblockedOpening() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBasePropDoor", "m_OnUnblockedOpening");
}

void GCBasePropDoor::SetOnUnblockedOpening(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBasePropDoor", "m_OnUnblockedOpening", false, value);
}

GCEntityIOOutput GCBasePropDoor::GetOnFullyClosed() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBasePropDoor", "m_OnFullyClosed");
}

void GCBasePropDoor::SetOnFullyClosed(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBasePropDoor", "m_OnFullyClosed", false, value);
}

GCEntityIOOutput GCBasePropDoor::GetOnFullyOpen() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBasePropDoor", "m_OnFullyOpen");
}

void GCBasePropDoor::SetOnFullyOpen(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBasePropDoor", "m_OnFullyOpen", false, value);
}

GCEntityIOOutput GCBasePropDoor::GetOnClose() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBasePropDoor", "m_OnClose");
}

void GCBasePropDoor::SetOnClose(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBasePropDoor", "m_OnClose", false, value);
}

GCEntityIOOutput GCBasePropDoor::GetOnOpen() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBasePropDoor", "m_OnOpen");
}

void GCBasePropDoor::SetOnOpen(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBasePropDoor", "m_OnOpen", false, value);
}

GCEntityIOOutput GCBasePropDoor::GetOnLockedUse() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBasePropDoor", "m_OnLockedUse");
}

void GCBasePropDoor::SetOnLockedUse(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBasePropDoor", "m_OnLockedUse", false, value);
}

GCEntityIOOutput GCBasePropDoor::GetOnAjarOpen() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBasePropDoor", "m_OnAjarOpen");
}

void GCBasePropDoor::SetOnAjarOpen(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBasePropDoor", "m_OnAjarOpen", false, value);
}

std::string GCBasePropDoor::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBasePropDoor::IsValid() {
    return (m_ptr != nullptr);
}

GCRagdollManager::GCRagdollManager(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCRagdollManager::GCRagdollManager(void *ptr) {
    m_ptr = ptr;
}

int8_t GCRagdollManager::GetCurrentMaxRagdollCount() const {
    return GetSchemaValue<int8_t>(m_ptr, "CRagdollManager", "m_iCurrentMaxRagdollCount");
}

void GCRagdollManager::SetCurrentMaxRagdollCount(int8_t value) {
    SetSchemaValue(m_ptr, "CRagdollManager", "m_iCurrentMaxRagdollCount", false, value);
}

int32_t GCRagdollManager::GetMaxRagdollCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CRagdollManager", "m_iMaxRagdollCount");
}

void GCRagdollManager::SetMaxRagdollCount(int32_t value) {
    SetSchemaValue(m_ptr, "CRagdollManager", "m_iMaxRagdollCount", false, value);
}

bool GCRagdollManager::GetSaveImportant() const {
    return GetSchemaValue<bool>(m_ptr, "CRagdollManager", "m_bSaveImportant");
}

void GCRagdollManager::SetSaveImportant(bool value) {
    SetSchemaValue(m_ptr, "CRagdollManager", "m_bSaveImportant", false, value);
}

std::string GCRagdollManager::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCRagdollManager::IsValid() {
    return (m_ptr != nullptr);
}

GCTriggerFan::GCTriggerFan(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTriggerFan::GCTriggerFan(void *ptr) {
    m_ptr = ptr;
}

Vector GCTriggerFan::GetFanOrigin() const {
    return GetSchemaValue<Vector>(m_ptr, "CTriggerFan", "m_vFanOrigin");
}

void GCTriggerFan::SetFanOrigin(Vector value) {
    SetSchemaValue(m_ptr, "CTriggerFan", "m_vFanOrigin", false, value);
}

Vector GCTriggerFan::GetFanEnd() const {
    return GetSchemaValue<Vector>(m_ptr, "CTriggerFan", "m_vFanEnd");
}

void GCTriggerFan::SetFanEnd(Vector value) {
    SetSchemaValue(m_ptr, "CTriggerFan", "m_vFanEnd", false, value);
}

Vector GCTriggerFan::GetNoise() const {
    return GetSchemaValue<Vector>(m_ptr, "CTriggerFan", "m_vNoise");
}

void GCTriggerFan::SetNoise(Vector value) {
    SetSchemaValue(m_ptr, "CTriggerFan", "m_vNoise", false, value);
}

float GCTriggerFan::GetForce() const {
    return GetSchemaValue<float>(m_ptr, "CTriggerFan", "m_flForce");
}

void GCTriggerFan::SetForce(float value) {
    SetSchemaValue(m_ptr, "CTriggerFan", "m_flForce", false, value);
}

float GCTriggerFan::GetRopeForceScale() const {
    return GetSchemaValue<float>(m_ptr, "CTriggerFan", "m_flRopeForceScale");
}

void GCTriggerFan::SetRopeForceScale(float value) {
    SetSchemaValue(m_ptr, "CTriggerFan", "m_flRopeForceScale", false, value);
}

float GCTriggerFan::GetPlayerForce() const {
    return GetSchemaValue<float>(m_ptr, "CTriggerFan", "m_flPlayerForce");
}

void GCTriggerFan::SetPlayerForce(float value) {
    SetSchemaValue(m_ptr, "CTriggerFan", "m_flPlayerForce", false, value);
}

float GCTriggerFan::GetRampTime() const {
    return GetSchemaValue<float>(m_ptr, "CTriggerFan", "m_flRampTime");
}

void GCTriggerFan::SetRampTime(float value) {
    SetSchemaValue(m_ptr, "CTriggerFan", "m_flRampTime", false, value);
}

bool GCTriggerFan::GetFalloff() const {
    return GetSchemaValue<bool>(m_ptr, "CTriggerFan", "m_bFalloff");
}

void GCTriggerFan::SetFalloff(bool value) {
    SetSchemaValue(m_ptr, "CTriggerFan", "m_bFalloff", false, value);
}

bool GCTriggerFan::GetPushPlayer() const {
    return GetSchemaValue<bool>(m_ptr, "CTriggerFan", "m_bPushPlayer");
}

void GCTriggerFan::SetPushPlayer(bool value) {
    SetSchemaValue(m_ptr, "CTriggerFan", "m_bPushPlayer", false, value);
}

bool GCTriggerFan::GetRampDown() const {
    return GetSchemaValue<bool>(m_ptr, "CTriggerFan", "m_bRampDown");
}

void GCTriggerFan::SetRampDown(bool value) {
    SetSchemaValue(m_ptr, "CTriggerFan", "m_bRampDown", false, value);
}

bool GCTriggerFan::GetAddNoise() const {
    return GetSchemaValue<bool>(m_ptr, "CTriggerFan", "m_bAddNoise");
}

void GCTriggerFan::SetAddNoise(bool value) {
    SetSchemaValue(m_ptr, "CTriggerFan", "m_bAddNoise", false, value);
}

GCountdownTimer GCTriggerFan::GetRampTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CTriggerFan", "m_RampTimer");
}

void GCTriggerFan::SetRampTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CTriggerFan", "m_RampTimer", false, value);
}

std::string GCTriggerFan::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTriggerFan::IsValid() {
    return (m_ptr != nullptr);
}

GCBaseCSGrenade::GCBaseCSGrenade(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBaseCSGrenade::GCBaseCSGrenade(void *ptr) {
    m_ptr = ptr;
}

bool GCBaseCSGrenade::GetRedraw() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseCSGrenade", "m_bRedraw");
}

void GCBaseCSGrenade::SetRedraw(bool value) {
    SetSchemaValue(m_ptr, "CBaseCSGrenade", "m_bRedraw", false, value);
}

bool GCBaseCSGrenade::GetIsHeldByPlayer() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseCSGrenade", "m_bIsHeldByPlayer");
}

void GCBaseCSGrenade::SetIsHeldByPlayer(bool value) {
    SetSchemaValue(m_ptr, "CBaseCSGrenade", "m_bIsHeldByPlayer", false, value);
}

bool GCBaseCSGrenade::GetPinPulled() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseCSGrenade", "m_bPinPulled");
}

void GCBaseCSGrenade::SetPinPulled(bool value) {
    SetSchemaValue(m_ptr, "CBaseCSGrenade", "m_bPinPulled", false, value);
}

bool GCBaseCSGrenade::GetJumpThrow() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseCSGrenade", "m_bJumpThrow");
}

void GCBaseCSGrenade::SetJumpThrow(bool value) {
    SetSchemaValue(m_ptr, "CBaseCSGrenade", "m_bJumpThrow", false, value);
}

bool GCBaseCSGrenade::GetThrowAnimating() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseCSGrenade", "m_bThrowAnimating");
}

void GCBaseCSGrenade::SetThrowAnimating(bool value) {
    SetSchemaValue(m_ptr, "CBaseCSGrenade", "m_bThrowAnimating", false, value);
}

float GCBaseCSGrenade::GetThrowStrength() const {
    return GetSchemaValue<float>(m_ptr, "CBaseCSGrenade", "m_flThrowStrength");
}

void GCBaseCSGrenade::SetThrowStrength(float value) {
    SetSchemaValue(m_ptr, "CBaseCSGrenade", "m_flThrowStrength", false, value);
}

float GCBaseCSGrenade::GetThrowStrengthApproach() const {
    return GetSchemaValue<float>(m_ptr, "CBaseCSGrenade", "m_flThrowStrengthApproach");
}

void GCBaseCSGrenade::SetThrowStrengthApproach(float value) {
    SetSchemaValue(m_ptr, "CBaseCSGrenade", "m_flThrowStrengthApproach", false, value);
}

bool GCBaseCSGrenade::GetJustPulledPin() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseCSGrenade", "m_bJustPulledPin");
}

void GCBaseCSGrenade::SetJustPulledPin(bool value) {
    SetSchemaValue(m_ptr, "CBaseCSGrenade", "m_bJustPulledPin", false, value);
}

float GCBaseCSGrenade::GetNextHoldFrac() const {
    return GetSchemaValue<float>(m_ptr, "CBaseCSGrenade", "m_flNextHoldFrac");
}

void GCBaseCSGrenade::SetNextHoldFrac(float value) {
    SetSchemaValue(m_ptr, "CBaseCSGrenade", "m_flNextHoldFrac", false, value);
}

GCCSWeaponBase GCBaseCSGrenade::GetSwitchToWeaponAfterThrow() const {
    GCCSWeaponBase value(GetSchemaValuePtr<void>(m_ptr, "CBaseCSGrenade", "m_hSwitchToWeaponAfterThrow"));
    return value;
}

void GCBaseCSGrenade::SetSwitchToWeaponAfterThrow(GCCSWeaponBase* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'SwitchToWeaponAfterThrow' is not possible.\n");
}

std::string GCBaseCSGrenade::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBaseCSGrenade::IsValid() {
    return (m_ptr != nullptr);
}

GCPathCornerCrash::GCPathCornerCrash(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPathCornerCrash::GCPathCornerCrash(void *ptr) {
    m_ptr = ptr;
}

std::string GCPathCornerCrash::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPathCornerCrash::IsValid() {
    return (m_ptr != nullptr);
}

GCHandleTest::GCHandleTest(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCHandleTest::GCHandleTest(void *ptr) {
    m_ptr = ptr;
}

GCBaseEntity GCHandleTest::GetHandle() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CHandleTest", "m_Handle"));
    return value;
}

void GCHandleTest::SetHandle(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Handle' is not possible.\n");
}

bool GCHandleTest::GetSendHandle() const {
    return GetSchemaValue<bool>(m_ptr, "CHandleTest", "m_bSendHandle");
}

void GCHandleTest::SetSendHandle(bool value) {
    SetSchemaValue(m_ptr, "CHandleTest", "m_bSendHandle", false, value);
}

std::string GCHandleTest::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCHandleTest::IsValid() {
    return (m_ptr != nullptr);
}

GCSoundOpvarSetEntity::GCSoundOpvarSetEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSoundOpvarSetEntity::GCSoundOpvarSetEntity(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCSoundOpvarSetEntity::GetStackName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSoundOpvarSetEntity", "m_iszStackName");
}

void GCSoundOpvarSetEntity::SetStackName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetEntity", "m_iszStackName", false, value);
}

CUtlSymbolLarge GCSoundOpvarSetEntity::GetOperatorName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSoundOpvarSetEntity", "m_iszOperatorName");
}

void GCSoundOpvarSetEntity::SetOperatorName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetEntity", "m_iszOperatorName", false, value);
}

CUtlSymbolLarge GCSoundOpvarSetEntity::GetOpvarName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSoundOpvarSetEntity", "m_iszOpvarName");
}

void GCSoundOpvarSetEntity::SetOpvarName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetEntity", "m_iszOpvarName", false, value);
}

int32_t GCSoundOpvarSetEntity::GetOpvarType() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSoundOpvarSetEntity", "m_nOpvarType");
}

void GCSoundOpvarSetEntity::SetOpvarType(int32_t value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetEntity", "m_nOpvarType", false, value);
}

int32_t GCSoundOpvarSetEntity::GetOpvarIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSoundOpvarSetEntity", "m_nOpvarIndex");
}

void GCSoundOpvarSetEntity::SetOpvarIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetEntity", "m_nOpvarIndex", false, value);
}

float GCSoundOpvarSetEntity::GetOpvarValue() const {
    return GetSchemaValue<float>(m_ptr, "CSoundOpvarSetEntity", "m_flOpvarValue");
}

void GCSoundOpvarSetEntity::SetOpvarValue(float value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetEntity", "m_flOpvarValue", false, value);
}

CUtlSymbolLarge GCSoundOpvarSetEntity::GetOpvarValueString() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSoundOpvarSetEntity", "m_OpvarValueString");
}

void GCSoundOpvarSetEntity::SetOpvarValueString(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetEntity", "m_OpvarValueString", false, value);
}

bool GCSoundOpvarSetEntity::GetSetOnSpawn() const {
    return GetSchemaValue<bool>(m_ptr, "CSoundOpvarSetEntity", "m_bSetOnSpawn");
}

void GCSoundOpvarSetEntity::SetSetOnSpawn(bool value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetEntity", "m_bSetOnSpawn", false, value);
}

std::string GCSoundOpvarSetEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSoundOpvarSetEntity::IsValid() {
    return (m_ptr != nullptr);
}

GWeaponPurchaseCount_t::GWeaponPurchaseCount_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GWeaponPurchaseCount_t::GWeaponPurchaseCount_t(void *ptr) {
    m_ptr = ptr;
}

uint16_t GWeaponPurchaseCount_t::GetItemDefIndex() const {
    return GetSchemaValue<uint16_t>(m_ptr, "WeaponPurchaseCount_t", "m_nItemDefIndex");
}

void GWeaponPurchaseCount_t::SetItemDefIndex(uint16_t value) {
    SetSchemaValue(m_ptr, "WeaponPurchaseCount_t", "m_nItemDefIndex", true, value);
}

uint16_t GWeaponPurchaseCount_t::GetCount() const {
    return GetSchemaValue<uint16_t>(m_ptr, "WeaponPurchaseCount_t", "m_nCount");
}

void GWeaponPurchaseCount_t::SetCount(uint16_t value) {
    SetSchemaValue(m_ptr, "WeaponPurchaseCount_t", "m_nCount", true, value);
}

std::string GWeaponPurchaseCount_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GWeaponPurchaseCount_t::IsValid() {
    return (m_ptr != nullptr);
}

GCNavSpaceInfo::GCNavSpaceInfo(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNavSpaceInfo::GCNavSpaceInfo(void *ptr) {
    m_ptr = ptr;
}

bool GCNavSpaceInfo::GetCreateFlightSpace() const {
    return GetSchemaValue<bool>(m_ptr, "CNavSpaceInfo", "m_bCreateFlightSpace");
}

void GCNavSpaceInfo::SetCreateFlightSpace(bool value) {
    SetSchemaValue(m_ptr, "CNavSpaceInfo", "m_bCreateFlightSpace", false, value);
}

std::string GCNavSpaceInfo::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNavSpaceInfo::IsValid() {
    return (m_ptr != nullptr);
}

GCLogicAchievement::GCLogicAchievement(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCLogicAchievement::GCLogicAchievement(void *ptr) {
    m_ptr = ptr;
}

bool GCLogicAchievement::GetDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CLogicAchievement", "m_bDisabled");
}

void GCLogicAchievement::SetDisabled(bool value) {
    SetSchemaValue(m_ptr, "CLogicAchievement", "m_bDisabled", false, value);
}

CUtlSymbolLarge GCLogicAchievement::GetAchievementEventID() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CLogicAchievement", "m_iszAchievementEventID");
}

void GCLogicAchievement::SetAchievementEventID(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CLogicAchievement", "m_iszAchievementEventID", false, value);
}

GCEntityIOOutput GCLogicAchievement::GetOnFired() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CLogicAchievement", "m_OnFired");
}

void GCLogicAchievement::SetOnFired(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CLogicAchievement", "m_OnFired", false, value);
}

std::string GCLogicAchievement::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCLogicAchievement::IsValid() {
    return (m_ptr != nullptr);
}

GCPathSimple::GCPathSimple(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPathSimple::GCPathSimple(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCPathSimple::GetPathString() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CPathSimple", "m_pathString");
}

void GCPathSimple::SetPathString(CUtlString value) {
    SetSchemaValue(m_ptr, "CPathSimple", "m_pathString", false, value);
}

std::string GCPathSimple::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPathSimple::IsValid() {
    return (m_ptr != nullptr);
}

GCBtActionParachutePositioning::GCBtActionParachutePositioning(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBtActionParachutePositioning::GCBtActionParachutePositioning(void *ptr) {
    m_ptr = ptr;
}

GCountdownTimer GCBtActionParachutePositioning::GetActionTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CBtActionParachutePositioning", "m_ActionTimer");
}

void GCBtActionParachutePositioning::SetActionTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CBtActionParachutePositioning", "m_ActionTimer", false, value);
}

std::string GCBtActionParachutePositioning::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBtActionParachutePositioning::IsValid() {
    return (m_ptr != nullptr);
}

GCPlayer_CameraServices::GCPlayer_CameraServices(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPlayer_CameraServices::GCPlayer_CameraServices(void *ptr) {
    m_ptr = ptr;
}

QAngle GCPlayer_CameraServices::GetCsViewPunchAngle() const {
    return GetSchemaValue<QAngle>(m_ptr, "CPlayer_CameraServices", "m_vecCsViewPunchAngle");
}

void GCPlayer_CameraServices::SetCsViewPunchAngle(QAngle value) {
    SetSchemaValue(m_ptr, "CPlayer_CameraServices", "m_vecCsViewPunchAngle", false, value);
}

float GCPlayer_CameraServices::GetCsViewPunchAngleTickRatio() const {
    return GetSchemaValue<float>(m_ptr, "CPlayer_CameraServices", "m_flCsViewPunchAngleTickRatio");
}

void GCPlayer_CameraServices::SetCsViewPunchAngleTickRatio(float value) {
    SetSchemaValue(m_ptr, "CPlayer_CameraServices", "m_flCsViewPunchAngleTickRatio", false, value);
}

Gfogplayerparams_t GCPlayer_CameraServices::GetPlayerFog() const {
    return GetSchemaValue<Gfogplayerparams_t>(m_ptr, "CPlayer_CameraServices", "m_PlayerFog");
}

void GCPlayer_CameraServices::SetPlayerFog(Gfogplayerparams_t value) {
    SetSchemaValue(m_ptr, "CPlayer_CameraServices", "m_PlayerFog", false, value);
}

GCColorCorrection GCPlayer_CameraServices::GetColorCorrectionCtrl() const {
    GCColorCorrection value(GetSchemaValuePtr<void>(m_ptr, "CPlayer_CameraServices", "m_hColorCorrectionCtrl"));
    return value;
}

void GCPlayer_CameraServices::SetColorCorrectionCtrl(GCColorCorrection* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ColorCorrectionCtrl' is not possible.\n");
}

GCBaseEntity GCPlayer_CameraServices::GetViewEntity() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CPlayer_CameraServices", "m_hViewEntity"));
    return value;
}

void GCPlayer_CameraServices::SetViewEntity(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ViewEntity' is not possible.\n");
}

GCTonemapController2 GCPlayer_CameraServices::GetTonemapController() const {
    GCTonemapController2 value(GetSchemaValuePtr<void>(m_ptr, "CPlayer_CameraServices", "m_hTonemapController"));
    return value;
}

void GCPlayer_CameraServices::SetTonemapController(GCTonemapController2* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'TonemapController' is not possible.\n");
}

Gaudioparams_t GCPlayer_CameraServices::GetAudio() const {
    return GetSchemaValue<Gaudioparams_t>(m_ptr, "CPlayer_CameraServices", "m_audio");
}

void GCPlayer_CameraServices::SetAudio(Gaudioparams_t value) {
    SetSchemaValue(m_ptr, "CPlayer_CameraServices", "m_audio", false, value);
}

std::vector<GCPostProcessingVolume*> GCPlayer_CameraServices::GetPostProcessingVolumes() const {
    CUtlVector<GCPostProcessingVolume*>* vec = GetSchemaValue<CUtlVector<GCPostProcessingVolume*>*>(m_ptr, "CPlayer_CameraServices", "m_PostProcessingVolumes"); std::vector<GCPostProcessingVolume*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCPlayer_CameraServices::SetPostProcessingVolumes(std::vector<GCPostProcessingVolume*> value) {
    SetSchemaValueCUtlVector<GCPostProcessingVolume*>(m_ptr, "CPlayer_CameraServices", "m_PostProcessingVolumes", false, value);
}

float GCPlayer_CameraServices::GetOldPlayerZ() const {
    return GetSchemaValue<float>(m_ptr, "CPlayer_CameraServices", "m_flOldPlayerZ");
}

void GCPlayer_CameraServices::SetOldPlayerZ(float value) {
    SetSchemaValue(m_ptr, "CPlayer_CameraServices", "m_flOldPlayerZ", false, value);
}

float GCPlayer_CameraServices::GetOldPlayerViewOffsetZ() const {
    return GetSchemaValue<float>(m_ptr, "CPlayer_CameraServices", "m_flOldPlayerViewOffsetZ");
}

void GCPlayer_CameraServices::SetOldPlayerViewOffsetZ(float value) {
    SetSchemaValue(m_ptr, "CPlayer_CameraServices", "m_flOldPlayerViewOffsetZ", false, value);
}

std::string GCPlayer_CameraServices::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPlayer_CameraServices::IsValid() {
    return (m_ptr != nullptr);
}

GCTouchExpansionComponent::GCTouchExpansionComponent(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTouchExpansionComponent::GCTouchExpansionComponent(void *ptr) {
    m_ptr = ptr;
}

std::string GCTouchExpansionComponent::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTouchExpansionComponent::IsValid() {
    return (m_ptr != nullptr);
}

GEntitySpottedState_t::GEntitySpottedState_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEntitySpottedState_t::GEntitySpottedState_t(void *ptr) {
    m_ptr = ptr;
}

bool GEntitySpottedState_t::GetSpotted() const {
    return GetSchemaValue<bool>(m_ptr, "EntitySpottedState_t", "m_bSpotted");
}

void GEntitySpottedState_t::SetSpotted(bool value) {
    SetSchemaValue(m_ptr, "EntitySpottedState_t", "m_bSpotted", true, value);
}

std::vector<uint32_t> GEntitySpottedState_t::GetSpottedByMask() const {
    uint32_t* outValue = GetSchemaValue<uint32_t*>(m_ptr, "EntitySpottedState_t", "m_bSpottedByMask"); std::vector<uint32_t> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}

void GEntitySpottedState_t::SetSpottedByMask(std::vector<uint32_t> value) {
    uint32_t* outValue = GetSchemaValue<uint32_t*>(m_ptr, "EntitySpottedState_t", "m_bSpottedByMask"); for(int i = 0; i < 2; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "EntitySpottedState_t", "m_bSpottedByMask", true, outValue);
}

std::string GEntitySpottedState_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEntitySpottedState_t::IsValid() {
    return (m_ptr != nullptr);
}

GCBaseClientUIEntity::GCBaseClientUIEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBaseClientUIEntity::GCBaseClientUIEntity(void *ptr) {
    m_ptr = ptr;
}

bool GCBaseClientUIEntity::GetEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseClientUIEntity", "m_bEnabled");
}

void GCBaseClientUIEntity::SetEnabled(bool value) {
    SetSchemaValue(m_ptr, "CBaseClientUIEntity", "m_bEnabled", false, value);
}

CUtlSymbolLarge GCBaseClientUIEntity::GetDialogXMLName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBaseClientUIEntity", "m_DialogXMLName");
}

void GCBaseClientUIEntity::SetDialogXMLName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBaseClientUIEntity", "m_DialogXMLName", false, value);
}

CUtlSymbolLarge GCBaseClientUIEntity::GetPanelClassName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBaseClientUIEntity", "m_PanelClassName");
}

void GCBaseClientUIEntity::SetPanelClassName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBaseClientUIEntity", "m_PanelClassName", false, value);
}

CUtlSymbolLarge GCBaseClientUIEntity::GetPanelID() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBaseClientUIEntity", "m_PanelID");
}

void GCBaseClientUIEntity::SetPanelID(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBaseClientUIEntity", "m_PanelID", false, value);
}

GCEntityIOOutput GCBaseClientUIEntity::GetCustomOutput0() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseClientUIEntity", "m_CustomOutput0");
}

void GCBaseClientUIEntity::SetCustomOutput0(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseClientUIEntity", "m_CustomOutput0", false, value);
}

GCEntityIOOutput GCBaseClientUIEntity::GetCustomOutput1() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseClientUIEntity", "m_CustomOutput1");
}

void GCBaseClientUIEntity::SetCustomOutput1(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseClientUIEntity", "m_CustomOutput1", false, value);
}

GCEntityIOOutput GCBaseClientUIEntity::GetCustomOutput2() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseClientUIEntity", "m_CustomOutput2");
}

void GCBaseClientUIEntity::SetCustomOutput2(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseClientUIEntity", "m_CustomOutput2", false, value);
}

GCEntityIOOutput GCBaseClientUIEntity::GetCustomOutput3() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseClientUIEntity", "m_CustomOutput3");
}

void GCBaseClientUIEntity::SetCustomOutput3(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseClientUIEntity", "m_CustomOutput3", false, value);
}

GCEntityIOOutput GCBaseClientUIEntity::GetCustomOutput4() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseClientUIEntity", "m_CustomOutput4");
}

void GCBaseClientUIEntity::SetCustomOutput4(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseClientUIEntity", "m_CustomOutput4", false, value);
}

GCEntityIOOutput GCBaseClientUIEntity::GetCustomOutput5() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseClientUIEntity", "m_CustomOutput5");
}

void GCBaseClientUIEntity::SetCustomOutput5(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseClientUIEntity", "m_CustomOutput5", false, value);
}

GCEntityIOOutput GCBaseClientUIEntity::GetCustomOutput6() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseClientUIEntity", "m_CustomOutput6");
}

void GCBaseClientUIEntity::SetCustomOutput6(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseClientUIEntity", "m_CustomOutput6", false, value);
}

GCEntityIOOutput GCBaseClientUIEntity::GetCustomOutput7() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseClientUIEntity", "m_CustomOutput7");
}

void GCBaseClientUIEntity::SetCustomOutput7(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseClientUIEntity", "m_CustomOutput7", false, value);
}

GCEntityIOOutput GCBaseClientUIEntity::GetCustomOutput8() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseClientUIEntity", "m_CustomOutput8");
}

void GCBaseClientUIEntity::SetCustomOutput8(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseClientUIEntity", "m_CustomOutput8", false, value);
}

GCEntityIOOutput GCBaseClientUIEntity::GetCustomOutput9() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseClientUIEntity", "m_CustomOutput9");
}

void GCBaseClientUIEntity::SetCustomOutput9(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseClientUIEntity", "m_CustomOutput9", false, value);
}

std::string GCBaseClientUIEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBaseClientUIEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvDecal::GCEnvDecal(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvDecal::GCEnvDecal(void *ptr) {
    m_ptr = ptr;
}

float GCEnvDecal::GetWidth() const {
    return GetSchemaValue<float>(m_ptr, "CEnvDecal", "m_flWidth");
}

void GCEnvDecal::SetWidth(float value) {
    SetSchemaValue(m_ptr, "CEnvDecal", "m_flWidth", false, value);
}

float GCEnvDecal::GetHeight() const {
    return GetSchemaValue<float>(m_ptr, "CEnvDecal", "m_flHeight");
}

void GCEnvDecal::SetHeight(float value) {
    SetSchemaValue(m_ptr, "CEnvDecal", "m_flHeight", false, value);
}

float GCEnvDecal::GetDepth() const {
    return GetSchemaValue<float>(m_ptr, "CEnvDecal", "m_flDepth");
}

void GCEnvDecal::SetDepth(float value) {
    SetSchemaValue(m_ptr, "CEnvDecal", "m_flDepth", false, value);
}

uint32_t GCEnvDecal::GetRenderOrder() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CEnvDecal", "m_nRenderOrder");
}

void GCEnvDecal::SetRenderOrder(uint32_t value) {
    SetSchemaValue(m_ptr, "CEnvDecal", "m_nRenderOrder", false, value);
}

bool GCEnvDecal::GetProjectOnWorld() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvDecal", "m_bProjectOnWorld");
}

void GCEnvDecal::SetProjectOnWorld(bool value) {
    SetSchemaValue(m_ptr, "CEnvDecal", "m_bProjectOnWorld", false, value);
}

bool GCEnvDecal::GetProjectOnCharacters() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvDecal", "m_bProjectOnCharacters");
}

void GCEnvDecal::SetProjectOnCharacters(bool value) {
    SetSchemaValue(m_ptr, "CEnvDecal", "m_bProjectOnCharacters", false, value);
}

bool GCEnvDecal::GetProjectOnWater() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvDecal", "m_bProjectOnWater");
}

void GCEnvDecal::SetProjectOnWater(bool value) {
    SetSchemaValue(m_ptr, "CEnvDecal", "m_bProjectOnWater", false, value);
}

float GCEnvDecal::GetDepthSortBias() const {
    return GetSchemaValue<float>(m_ptr, "CEnvDecal", "m_flDepthSortBias");
}

void GCEnvDecal::SetDepthSortBias(float value) {
    SetSchemaValue(m_ptr, "CEnvDecal", "m_flDepthSortBias", false, value);
}

std::string GCEnvDecal::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvDecal::IsValid() {
    return (m_ptr != nullptr);
}

GCCSPointScriptExtensions_entity::GCCSPointScriptExtensions_entity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSPointScriptExtensions_entity::GCCSPointScriptExtensions_entity(void *ptr) {
    m_ptr = ptr;
}

std::string GCCSPointScriptExtensions_entity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSPointScriptExtensions_entity::IsValid() {
    return (m_ptr != nullptr);
}

GCGameSceneNode::GCGameSceneNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCGameSceneNode::GCGameSceneNode(void *ptr) {
    m_ptr = ptr;
}

GCEntityInstance GCGameSceneNode::GetOwner() const {
    GCEntityInstance value(GetSchemaValuePtr<void>(m_ptr, "CGameSceneNode", "m_pOwner"));
    return value;
}

void GCGameSceneNode::SetOwner(GCEntityInstance* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Owner' is not possible.\n");
}

GCGameSceneNode GCGameSceneNode::GetParent() const {
    GCGameSceneNode value(GetSchemaValuePtr<void>(m_ptr, "CGameSceneNode", "m_pParent"));
    return value;
}

void GCGameSceneNode::SetParent(GCGameSceneNode* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}

GCGameSceneNode GCGameSceneNode::GetChild() const {
    GCGameSceneNode value(GetSchemaValuePtr<void>(m_ptr, "CGameSceneNode", "m_pChild"));
    return value;
}

void GCGameSceneNode::SetChild(GCGameSceneNode* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Child' is not possible.\n");
}

GCGameSceneNode GCGameSceneNode::GetNextSibling() const {
    GCGameSceneNode value(GetSchemaValuePtr<void>(m_ptr, "CGameSceneNode", "m_pNextSibling"));
    return value;
}

void GCGameSceneNode::SetNextSibling(GCGameSceneNode* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'NextSibling' is not possible.\n");
}

GCNetworkOriginCellCoordQuantizedVector GCGameSceneNode::GetOrigin() const {
    return GetSchemaValue<GCNetworkOriginCellCoordQuantizedVector>(m_ptr, "CGameSceneNode", "m_vecOrigin");
}

void GCGameSceneNode::SetOrigin(GCNetworkOriginCellCoordQuantizedVector value) {
    SetSchemaValue(m_ptr, "CGameSceneNode", "m_vecOrigin", false, value);
}

QAngle GCGameSceneNode::GetRotation() const {
    return GetSchemaValue<QAngle>(m_ptr, "CGameSceneNode", "m_angRotation");
}

void GCGameSceneNode::SetRotation(QAngle value) {
    SetSchemaValue(m_ptr, "CGameSceneNode", "m_angRotation", false, value);
}

float GCGameSceneNode::GetScale() const {
    return GetSchemaValue<float>(m_ptr, "CGameSceneNode", "m_flScale");
}

void GCGameSceneNode::SetScale(float value) {
    SetSchemaValue(m_ptr, "CGameSceneNode", "m_flScale", false, value);
}

Vector GCGameSceneNode::GetAbsOrigin() const {
    return GetSchemaValue<Vector>(m_ptr, "CGameSceneNode", "m_vecAbsOrigin");
}

void GCGameSceneNode::SetAbsOrigin(Vector value) {
    SetSchemaValue(m_ptr, "CGameSceneNode", "m_vecAbsOrigin", false, value);
}

QAngle GCGameSceneNode::GetAbsRotation() const {
    return GetSchemaValue<QAngle>(m_ptr, "CGameSceneNode", "m_angAbsRotation");
}

void GCGameSceneNode::SetAbsRotation(QAngle value) {
    SetSchemaValue(m_ptr, "CGameSceneNode", "m_angAbsRotation", false, value);
}

float GCGameSceneNode::GetAbsScale() const {
    return GetSchemaValue<float>(m_ptr, "CGameSceneNode", "m_flAbsScale");
}

void GCGameSceneNode::SetAbsScale(float value) {
    SetSchemaValue(m_ptr, "CGameSceneNode", "m_flAbsScale", false, value);
}

int16_t GCGameSceneNode::GetParentAttachmentOrBone() const {
    return GetSchemaValue<int16_t>(m_ptr, "CGameSceneNode", "m_nParentAttachmentOrBone");
}

void GCGameSceneNode::SetParentAttachmentOrBone(int16_t value) {
    SetSchemaValue(m_ptr, "CGameSceneNode", "m_nParentAttachmentOrBone", false, value);
}

bool GCGameSceneNode::GetDebugAbsOriginChanges() const {
    return GetSchemaValue<bool>(m_ptr, "CGameSceneNode", "m_bDebugAbsOriginChanges");
}

void GCGameSceneNode::SetDebugAbsOriginChanges(bool value) {
    SetSchemaValue(m_ptr, "CGameSceneNode", "m_bDebugAbsOriginChanges", false, value);
}

bool GCGameSceneNode::GetDormant() const {
    return GetSchemaValue<bool>(m_ptr, "CGameSceneNode", "m_bDormant");
}

void GCGameSceneNode::SetDormant(bool value) {
    SetSchemaValue(m_ptr, "CGameSceneNode", "m_bDormant", false, value);
}

bool GCGameSceneNode::GetForceParentToBeNetworked() const {
    return GetSchemaValue<bool>(m_ptr, "CGameSceneNode", "m_bForceParentToBeNetworked");
}

void GCGameSceneNode::SetForceParentToBeNetworked(bool value) {
    SetSchemaValue(m_ptr, "CGameSceneNode", "m_bForceParentToBeNetworked", false, value);
}

uint8_t GCGameSceneNode::GetHierarchicalDepth() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CGameSceneNode", "m_nHierarchicalDepth");
}

void GCGameSceneNode::SetHierarchicalDepth(uint8_t value) {
    SetSchemaValue(m_ptr, "CGameSceneNode", "m_nHierarchicalDepth", false, value);
}

uint8_t GCGameSceneNode::GetHierarchyType() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CGameSceneNode", "m_nHierarchyType");
}

void GCGameSceneNode::SetHierarchyType(uint8_t value) {
    SetSchemaValue(m_ptr, "CGameSceneNode", "m_nHierarchyType", false, value);
}

uint8_t GCGameSceneNode::GetDoNotSetAnimTimeInInvalidatePhysicsCount() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CGameSceneNode", "m_nDoNotSetAnimTimeInInvalidatePhysicsCount");
}

void GCGameSceneNode::SetDoNotSetAnimTimeInInvalidatePhysicsCount(uint8_t value) {
    SetSchemaValue(m_ptr, "CGameSceneNode", "m_nDoNotSetAnimTimeInInvalidatePhysicsCount", false, value);
}

CUtlStringToken GCGameSceneNode::GetName() const {
    return GetSchemaValue<CUtlStringToken>(m_ptr, "CGameSceneNode", "m_name");
}

void GCGameSceneNode::SetName(CUtlStringToken value) {
    SetSchemaValue(m_ptr, "CGameSceneNode", "m_name", false, value);
}

CUtlStringToken GCGameSceneNode::GetHierarchyAttachName() const {
    return GetSchemaValue<CUtlStringToken>(m_ptr, "CGameSceneNode", "m_hierarchyAttachName");
}

void GCGameSceneNode::SetHierarchyAttachName(CUtlStringToken value) {
    SetSchemaValue(m_ptr, "CGameSceneNode", "m_hierarchyAttachName", false, value);
}

float GCGameSceneNode::GetZOffset() const {
    return GetSchemaValue<float>(m_ptr, "CGameSceneNode", "m_flZOffset");
}

void GCGameSceneNode::SetZOffset(float value) {
    SetSchemaValue(m_ptr, "CGameSceneNode", "m_flZOffset", false, value);
}

float GCGameSceneNode::GetClientLocalScale() const {
    return GetSchemaValue<float>(m_ptr, "CGameSceneNode", "m_flClientLocalScale");
}

void GCGameSceneNode::SetClientLocalScale(float value) {
    SetSchemaValue(m_ptr, "CGameSceneNode", "m_flClientLocalScale", false, value);
}

Vector GCGameSceneNode::GetRenderOrigin() const {
    return GetSchemaValue<Vector>(m_ptr, "CGameSceneNode", "m_vRenderOrigin");
}

void GCGameSceneNode::SetRenderOrigin(Vector value) {
    SetSchemaValue(m_ptr, "CGameSceneNode", "m_vRenderOrigin", false, value);
}

std::string GCGameSceneNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCGameSceneNode::IsValid() {
    return (m_ptr != nullptr);
}

GCLogicAuto::GCLogicAuto(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCLogicAuto::GCLogicAuto(void *ptr) {
    m_ptr = ptr;
}

GCEntityIOOutput GCLogicAuto::GetOnMapSpawn() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CLogicAuto", "m_OnMapSpawn");
}

void GCLogicAuto::SetOnMapSpawn(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CLogicAuto", "m_OnMapSpawn", false, value);
}

GCEntityIOOutput GCLogicAuto::GetOnDemoMapSpawn() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CLogicAuto", "m_OnDemoMapSpawn");
}

void GCLogicAuto::SetOnDemoMapSpawn(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CLogicAuto", "m_OnDemoMapSpawn", false, value);
}

GCEntityIOOutput GCLogicAuto::GetOnNewGame() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CLogicAuto", "m_OnNewGame");
}

void GCLogicAuto::SetOnNewGame(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CLogicAuto", "m_OnNewGame", false, value);
}

GCEntityIOOutput GCLogicAuto::GetOnLoadGame() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CLogicAuto", "m_OnLoadGame");
}

void GCLogicAuto::SetOnLoadGame(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CLogicAuto", "m_OnLoadGame", false, value);
}

GCEntityIOOutput GCLogicAuto::GetOnMapTransition() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CLogicAuto", "m_OnMapTransition");
}

void GCLogicAuto::SetOnMapTransition(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CLogicAuto", "m_OnMapTransition", false, value);
}

GCEntityIOOutput GCLogicAuto::GetOnBackgroundMap() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CLogicAuto", "m_OnBackgroundMap");
}

void GCLogicAuto::SetOnBackgroundMap(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CLogicAuto", "m_OnBackgroundMap", false, value);
}

GCEntityIOOutput GCLogicAuto::GetOnMultiNewMap() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CLogicAuto", "m_OnMultiNewMap");
}

void GCLogicAuto::SetOnMultiNewMap(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CLogicAuto", "m_OnMultiNewMap", false, value);
}

GCEntityIOOutput GCLogicAuto::GetOnMultiNewRound() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CLogicAuto", "m_OnMultiNewRound");
}

void GCLogicAuto::SetOnMultiNewRound(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CLogicAuto", "m_OnMultiNewRound", false, value);
}

GCEntityIOOutput GCLogicAuto::GetOnVREnabled() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CLogicAuto", "m_OnVREnabled");
}

void GCLogicAuto::SetOnVREnabled(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CLogicAuto", "m_OnVREnabled", false, value);
}

GCEntityIOOutput GCLogicAuto::GetOnVRNotEnabled() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CLogicAuto", "m_OnVRNotEnabled");
}

void GCLogicAuto::SetOnVRNotEnabled(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CLogicAuto", "m_OnVRNotEnabled", false, value);
}

CUtlSymbolLarge GCLogicAuto::GetGlobalstate() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CLogicAuto", "m_globalstate");
}

void GCLogicAuto::SetGlobalstate(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CLogicAuto", "m_globalstate", false, value);
}

std::string GCLogicAuto::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCLogicAuto::IsValid() {
    return (m_ptr != nullptr);
}

GCSoundOpvarSetOBBWindEntity::GCSoundOpvarSetOBBWindEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSoundOpvarSetOBBWindEntity::GCSoundOpvarSetOBBWindEntity(void *ptr) {
    m_ptr = ptr;
}

Vector GCSoundOpvarSetOBBWindEntity::GetMins() const {
    return GetSchemaValue<Vector>(m_ptr, "CSoundOpvarSetOBBWindEntity", "m_vMins");
}

void GCSoundOpvarSetOBBWindEntity::SetMins(Vector value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetOBBWindEntity", "m_vMins", false, value);
}

Vector GCSoundOpvarSetOBBWindEntity::GetMaxs() const {
    return GetSchemaValue<Vector>(m_ptr, "CSoundOpvarSetOBBWindEntity", "m_vMaxs");
}

void GCSoundOpvarSetOBBWindEntity::SetMaxs(Vector value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetOBBWindEntity", "m_vMaxs", false, value);
}

Vector GCSoundOpvarSetOBBWindEntity::GetDistanceMins() const {
    return GetSchemaValue<Vector>(m_ptr, "CSoundOpvarSetOBBWindEntity", "m_vDistanceMins");
}

void GCSoundOpvarSetOBBWindEntity::SetDistanceMins(Vector value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetOBBWindEntity", "m_vDistanceMins", false, value);
}

Vector GCSoundOpvarSetOBBWindEntity::GetDistanceMaxs() const {
    return GetSchemaValue<Vector>(m_ptr, "CSoundOpvarSetOBBWindEntity", "m_vDistanceMaxs");
}

void GCSoundOpvarSetOBBWindEntity::SetDistanceMaxs(Vector value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetOBBWindEntity", "m_vDistanceMaxs", false, value);
}

float GCSoundOpvarSetOBBWindEntity::GetWindMin() const {
    return GetSchemaValue<float>(m_ptr, "CSoundOpvarSetOBBWindEntity", "m_flWindMin");
}

void GCSoundOpvarSetOBBWindEntity::SetWindMin(float value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetOBBWindEntity", "m_flWindMin", false, value);
}

float GCSoundOpvarSetOBBWindEntity::GetWindMax() const {
    return GetSchemaValue<float>(m_ptr, "CSoundOpvarSetOBBWindEntity", "m_flWindMax");
}

void GCSoundOpvarSetOBBWindEntity::SetWindMax(float value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetOBBWindEntity", "m_flWindMax", false, value);
}

float GCSoundOpvarSetOBBWindEntity::GetWindMapMin() const {
    return GetSchemaValue<float>(m_ptr, "CSoundOpvarSetOBBWindEntity", "m_flWindMapMin");
}

void GCSoundOpvarSetOBBWindEntity::SetWindMapMin(float value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetOBBWindEntity", "m_flWindMapMin", false, value);
}

float GCSoundOpvarSetOBBWindEntity::GetWindMapMax() const {
    return GetSchemaValue<float>(m_ptr, "CSoundOpvarSetOBBWindEntity", "m_flWindMapMax");
}

void GCSoundOpvarSetOBBWindEntity::SetWindMapMax(float value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetOBBWindEntity", "m_flWindMapMax", false, value);
}

std::string GCSoundOpvarSetOBBWindEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSoundOpvarSetOBBWindEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCLightDirectionalEntity::GCLightDirectionalEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCLightDirectionalEntity::GCLightDirectionalEntity(void *ptr) {
    m_ptr = ptr;
}

std::string GCLightDirectionalEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCLightDirectionalEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCLogicNPCCounter::GCLogicNPCCounter(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCLogicNPCCounter::GCLogicNPCCounter(void *ptr) {
    m_ptr = ptr;
}

GCEntityIOOutput GCLogicNPCCounter::GetOnMinCountAll() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CLogicNPCCounter", "m_OnMinCountAll");
}

void GCLogicNPCCounter::SetOnMinCountAll(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_OnMinCountAll", false, value);
}

GCEntityIOOutput GCLogicNPCCounter::GetOnMaxCountAll() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CLogicNPCCounter", "m_OnMaxCountAll");
}

void GCLogicNPCCounter::SetOnMaxCountAll(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_OnMaxCountAll", false, value);
}

GCEntityIOOutput GCLogicNPCCounter::GetOnMinCount_1() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CLogicNPCCounter", "m_OnMinCount_1");
}

void GCLogicNPCCounter::SetOnMinCount_1(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_OnMinCount_1", false, value);
}

GCEntityIOOutput GCLogicNPCCounter::GetOnMaxCount_1() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CLogicNPCCounter", "m_OnMaxCount_1");
}

void GCLogicNPCCounter::SetOnMaxCount_1(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_OnMaxCount_1", false, value);
}

GCEntityIOOutput GCLogicNPCCounter::GetOnMinCount_2() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CLogicNPCCounter", "m_OnMinCount_2");
}

void GCLogicNPCCounter::SetOnMinCount_2(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_OnMinCount_2", false, value);
}

GCEntityIOOutput GCLogicNPCCounter::GetOnMaxCount_2() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CLogicNPCCounter", "m_OnMaxCount_2");
}

void GCLogicNPCCounter::SetOnMaxCount_2(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_OnMaxCount_2", false, value);
}

GCEntityIOOutput GCLogicNPCCounter::GetOnMinCount_3() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CLogicNPCCounter", "m_OnMinCount_3");
}

void GCLogicNPCCounter::SetOnMinCount_3(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_OnMinCount_3", false, value);
}

GCEntityIOOutput GCLogicNPCCounter::GetOnMaxCount_3() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CLogicNPCCounter", "m_OnMaxCount_3");
}

void GCLogicNPCCounter::SetOnMaxCount_3(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_OnMaxCount_3", false, value);
}

GCEntityInstance GCLogicNPCCounter::GetSource() const {
    GCEntityInstance value(GetSchemaValuePtr<void>(m_ptr, "CLogicNPCCounter", "m_hSource"));
    return value;
}

void GCLogicNPCCounter::SetSource(GCEntityInstance* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Source' is not possible.\n");
}

CUtlSymbolLarge GCLogicNPCCounter::GetSourceEntityName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CLogicNPCCounter", "m_iszSourceEntityName");
}

void GCLogicNPCCounter::SetSourceEntityName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_iszSourceEntityName", false, value);
}

float GCLogicNPCCounter::GetDistanceMax() const {
    return GetSchemaValue<float>(m_ptr, "CLogicNPCCounter", "m_flDistanceMax");
}

void GCLogicNPCCounter::SetDistanceMax(float value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_flDistanceMax", false, value);
}

bool GCLogicNPCCounter::GetDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CLogicNPCCounter", "m_bDisabled");
}

void GCLogicNPCCounter::SetDisabled(bool value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_bDisabled", false, value);
}

int32_t GCLogicNPCCounter::GetMinCountAll() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLogicNPCCounter", "m_nMinCountAll");
}

void GCLogicNPCCounter::SetMinCountAll(int32_t value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_nMinCountAll", false, value);
}

int32_t GCLogicNPCCounter::GetMaxCountAll() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLogicNPCCounter", "m_nMaxCountAll");
}

void GCLogicNPCCounter::SetMaxCountAll(int32_t value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_nMaxCountAll", false, value);
}

int32_t GCLogicNPCCounter::GetMinFactorAll() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLogicNPCCounter", "m_nMinFactorAll");
}

void GCLogicNPCCounter::SetMinFactorAll(int32_t value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_nMinFactorAll", false, value);
}

int32_t GCLogicNPCCounter::GetMaxFactorAll() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLogicNPCCounter", "m_nMaxFactorAll");
}

void GCLogicNPCCounter::SetMaxFactorAll(int32_t value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_nMaxFactorAll", false, value);
}

CUtlSymbolLarge GCLogicNPCCounter::GetNPCClassname_1() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CLogicNPCCounter", "m_iszNPCClassname_1");
}

void GCLogicNPCCounter::SetNPCClassname_1(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_iszNPCClassname_1", false, value);
}

int32_t GCLogicNPCCounter::GetNPCState_1() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLogicNPCCounter", "m_nNPCState_1");
}

void GCLogicNPCCounter::SetNPCState_1(int32_t value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_nNPCState_1", false, value);
}

bool GCLogicNPCCounter::GetInvertState_1() const {
    return GetSchemaValue<bool>(m_ptr, "CLogicNPCCounter", "m_bInvertState_1");
}

void GCLogicNPCCounter::SetInvertState_1(bool value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_bInvertState_1", false, value);
}

int32_t GCLogicNPCCounter::GetMinCount_1() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLogicNPCCounter", "m_nMinCount_1");
}

void GCLogicNPCCounter::SetMinCount_1(int32_t value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_nMinCount_1", false, value);
}

int32_t GCLogicNPCCounter::GetMaxCount_1() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLogicNPCCounter", "m_nMaxCount_1");
}

void GCLogicNPCCounter::SetMaxCount_1(int32_t value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_nMaxCount_1", false, value);
}

int32_t GCLogicNPCCounter::GetMinFactor_1() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLogicNPCCounter", "m_nMinFactor_1");
}

void GCLogicNPCCounter::SetMinFactor_1(int32_t value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_nMinFactor_1", false, value);
}

int32_t GCLogicNPCCounter::GetMaxFactor_1() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLogicNPCCounter", "m_nMaxFactor_1");
}

void GCLogicNPCCounter::SetMaxFactor_1(int32_t value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_nMaxFactor_1", false, value);
}

float GCLogicNPCCounter::GetDefaultDist_1() const {
    return GetSchemaValue<float>(m_ptr, "CLogicNPCCounter", "m_flDefaultDist_1");
}

void GCLogicNPCCounter::SetDefaultDist_1(float value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_flDefaultDist_1", false, value);
}

CUtlSymbolLarge GCLogicNPCCounter::GetNPCClassname_2() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CLogicNPCCounter", "m_iszNPCClassname_2");
}

void GCLogicNPCCounter::SetNPCClassname_2(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_iszNPCClassname_2", false, value);
}

int32_t GCLogicNPCCounter::GetNPCState_2() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLogicNPCCounter", "m_nNPCState_2");
}

void GCLogicNPCCounter::SetNPCState_2(int32_t value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_nNPCState_2", false, value);
}

bool GCLogicNPCCounter::GetInvertState_2() const {
    return GetSchemaValue<bool>(m_ptr, "CLogicNPCCounter", "m_bInvertState_2");
}

void GCLogicNPCCounter::SetInvertState_2(bool value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_bInvertState_2", false, value);
}

int32_t GCLogicNPCCounter::GetMinCount_2() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLogicNPCCounter", "m_nMinCount_2");
}

void GCLogicNPCCounter::SetMinCount_2(int32_t value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_nMinCount_2", false, value);
}

int32_t GCLogicNPCCounter::GetMaxCount_2() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLogicNPCCounter", "m_nMaxCount_2");
}

void GCLogicNPCCounter::SetMaxCount_2(int32_t value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_nMaxCount_2", false, value);
}

int32_t GCLogicNPCCounter::GetMinFactor_2() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLogicNPCCounter", "m_nMinFactor_2");
}

void GCLogicNPCCounter::SetMinFactor_2(int32_t value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_nMinFactor_2", false, value);
}

int32_t GCLogicNPCCounter::GetMaxFactor_2() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLogicNPCCounter", "m_nMaxFactor_2");
}

void GCLogicNPCCounter::SetMaxFactor_2(int32_t value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_nMaxFactor_2", false, value);
}

float GCLogicNPCCounter::GetDefaultDist_2() const {
    return GetSchemaValue<float>(m_ptr, "CLogicNPCCounter", "m_flDefaultDist_2");
}

void GCLogicNPCCounter::SetDefaultDist_2(float value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_flDefaultDist_2", false, value);
}

CUtlSymbolLarge GCLogicNPCCounter::GetNPCClassname_3() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CLogicNPCCounter", "m_iszNPCClassname_3");
}

void GCLogicNPCCounter::SetNPCClassname_3(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_iszNPCClassname_3", false, value);
}

int32_t GCLogicNPCCounter::GetNPCState_3() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLogicNPCCounter", "m_nNPCState_3");
}

void GCLogicNPCCounter::SetNPCState_3(int32_t value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_nNPCState_3", false, value);
}

bool GCLogicNPCCounter::GetInvertState_3() const {
    return GetSchemaValue<bool>(m_ptr, "CLogicNPCCounter", "m_bInvertState_3");
}

void GCLogicNPCCounter::SetInvertState_3(bool value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_bInvertState_3", false, value);
}

int32_t GCLogicNPCCounter::GetMinCount_3() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLogicNPCCounter", "m_nMinCount_3");
}

void GCLogicNPCCounter::SetMinCount_3(int32_t value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_nMinCount_3", false, value);
}

int32_t GCLogicNPCCounter::GetMaxCount_3() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLogicNPCCounter", "m_nMaxCount_3");
}

void GCLogicNPCCounter::SetMaxCount_3(int32_t value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_nMaxCount_3", false, value);
}

int32_t GCLogicNPCCounter::GetMinFactor_3() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLogicNPCCounter", "m_nMinFactor_3");
}

void GCLogicNPCCounter::SetMinFactor_3(int32_t value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_nMinFactor_3", false, value);
}

int32_t GCLogicNPCCounter::GetMaxFactor_3() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLogicNPCCounter", "m_nMaxFactor_3");
}

void GCLogicNPCCounter::SetMaxFactor_3(int32_t value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_nMaxFactor_3", false, value);
}

float GCLogicNPCCounter::GetDefaultDist_3() const {
    return GetSchemaValue<float>(m_ptr, "CLogicNPCCounter", "m_flDefaultDist_3");
}

void GCLogicNPCCounter::SetDefaultDist_3(float value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounter", "m_flDefaultDist_3", false, value);
}

std::string GCLogicNPCCounter::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCLogicNPCCounter::IsValid() {
    return (m_ptr != nullptr);
}

GCCSObserver_UseServices::GCCSObserver_UseServices(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSObserver_UseServices::GCCSObserver_UseServices(void *ptr) {
    m_ptr = ptr;
}

std::string GCCSObserver_UseServices::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSObserver_UseServices::IsValid() {
    return (m_ptr != nullptr);
}

GCFuncPlat::GCFuncPlat(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFuncPlat::GCFuncPlat(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCFuncPlat::GetNoise() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncPlat", "m_sNoise");
}

void GCFuncPlat::SetNoise(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFuncPlat", "m_sNoise", false, value);
}

std::string GCFuncPlat::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFuncPlat::IsValid() {
    return (m_ptr != nullptr);
}

GCRuleBrushEntity::GCRuleBrushEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCRuleBrushEntity::GCRuleBrushEntity(void *ptr) {
    m_ptr = ptr;
}

std::string GCRuleBrushEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCRuleBrushEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCRulePointEntity::GCRulePointEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCRulePointEntity::GCRulePointEntity(void *ptr) {
    m_ptr = ptr;
}

int32_t GCRulePointEntity::GetScore() const {
    return GetSchemaValue<int32_t>(m_ptr, "CRulePointEntity", "m_Score");
}

void GCRulePointEntity::SetScore(int32_t value) {
    SetSchemaValue(m_ptr, "CRulePointEntity", "m_Score", false, value);
}

std::string GCRulePointEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCRulePointEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCMessageEntity::GCMessageEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMessageEntity::GCMessageEntity(void *ptr) {
    m_ptr = ptr;
}

int32_t GCMessageEntity::GetRadius() const {
    return GetSchemaValue<int32_t>(m_ptr, "CMessageEntity", "m_radius");
}

void GCMessageEntity::SetRadius(int32_t value) {
    SetSchemaValue(m_ptr, "CMessageEntity", "m_radius", false, value);
}

CUtlSymbolLarge GCMessageEntity::GetMessageText() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CMessageEntity", "m_messageText");
}

void GCMessageEntity::SetMessageText(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CMessageEntity", "m_messageText", false, value);
}

bool GCMessageEntity::GetDrawText() const {
    return GetSchemaValue<bool>(m_ptr, "CMessageEntity", "m_drawText");
}

void GCMessageEntity::SetDrawText(bool value) {
    SetSchemaValue(m_ptr, "CMessageEntity", "m_drawText", false, value);
}

bool GCMessageEntity::GetDeveloperOnly() const {
    return GetSchemaValue<bool>(m_ptr, "CMessageEntity", "m_bDeveloperOnly");
}

void GCMessageEntity::SetDeveloperOnly(bool value) {
    SetSchemaValue(m_ptr, "CMessageEntity", "m_bDeveloperOnly", false, value);
}

bool GCMessageEntity::GetEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CMessageEntity", "m_bEnabled");
}

void GCMessageEntity::SetEnabled(bool value) {
    SetSchemaValue(m_ptr, "CMessageEntity", "m_bEnabled", false, value);
}

std::string GCMessageEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMessageEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCSmokeGrenade::GCSmokeGrenade(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSmokeGrenade::GCSmokeGrenade(void *ptr) {
    m_ptr = ptr;
}

std::string GCSmokeGrenade::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSmokeGrenade::IsValid() {
    return (m_ptr != nullptr);
}

GCBaseViewModel::GCBaseViewModel(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBaseViewModel::GCBaseViewModel(void *ptr) {
    m_ptr = ptr;
}

Vector GCBaseViewModel::GetLastFacing() const {
    return GetSchemaValue<Vector>(m_ptr, "CBaseViewModel", "m_vecLastFacing");
}

void GCBaseViewModel::SetLastFacing(Vector value) {
    SetSchemaValue(m_ptr, "CBaseViewModel", "m_vecLastFacing", false, value);
}

uint32_t GCBaseViewModel::GetViewModelIndex() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CBaseViewModel", "m_nViewModelIndex");
}

void GCBaseViewModel::SetViewModelIndex(uint32_t value) {
    SetSchemaValue(m_ptr, "CBaseViewModel", "m_nViewModelIndex", false, value);
}

uint32_t GCBaseViewModel::GetAnimationParity() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CBaseViewModel", "m_nAnimationParity");
}

void GCBaseViewModel::SetAnimationParity(uint32_t value) {
    SetSchemaValue(m_ptr, "CBaseViewModel", "m_nAnimationParity", false, value);
}

float GCBaseViewModel::GetAnimationStartTime() const {
    return GetSchemaValue<float>(m_ptr, "CBaseViewModel", "m_flAnimationStartTime");
}

void GCBaseViewModel::SetAnimationStartTime(float value) {
    SetSchemaValue(m_ptr, "CBaseViewModel", "m_flAnimationStartTime", false, value);
}

GCBasePlayerWeapon GCBaseViewModel::GetWeapon() const {
    GCBasePlayerWeapon value(GetSchemaValuePtr<void>(m_ptr, "CBaseViewModel", "m_hWeapon"));
    return value;
}

void GCBaseViewModel::SetWeapon(GCBasePlayerWeapon* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Weapon' is not possible.\n");
}

CUtlSymbolLarge GCBaseViewModel::GetVMName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBaseViewModel", "m_sVMName");
}

void GCBaseViewModel::SetVMName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBaseViewModel", "m_sVMName", false, value);
}

CUtlSymbolLarge GCBaseViewModel::GetAnimationPrefix() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBaseViewModel", "m_sAnimationPrefix");
}

void GCBaseViewModel::SetAnimationPrefix(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBaseViewModel", "m_sAnimationPrefix", false, value);
}

int32_t GCBaseViewModel::GetOldLayer() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBaseViewModel", "m_oldLayer");
}

void GCBaseViewModel::SetOldLayer(int32_t value) {
    SetSchemaValue(m_ptr, "CBaseViewModel", "m_oldLayer", false, value);
}

float GCBaseViewModel::GetOldLayerStartTime() const {
    return GetSchemaValue<float>(m_ptr, "CBaseViewModel", "m_oldLayerStartTime");
}

void GCBaseViewModel::SetOldLayerStartTime(float value) {
    SetSchemaValue(m_ptr, "CBaseViewModel", "m_oldLayerStartTime", false, value);
}

GCBaseEntity GCBaseViewModel::GetControlPanel() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CBaseViewModel", "m_hControlPanel"));
    return value;
}

void GCBaseViewModel::SetControlPanel(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ControlPanel' is not possible.\n");
}

std::string GCBaseViewModel::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBaseViewModel::IsValid() {
    return (m_ptr != nullptr);
}

GCCSPlayer_PingServices::GCCSPlayer_PingServices(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSPlayer_PingServices::GCCSPlayer_PingServices(void *ptr) {
    m_ptr = ptr;
}

GCBaseEntity GCCSPlayer_PingServices::GetPlayerPing() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CCSPlayer_PingServices", "m_hPlayerPing"));
    return value;
}

void GCCSPlayer_PingServices::SetPlayerPing(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'PlayerPing' is not possible.\n");
}

std::string GCCSPlayer_PingServices::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSPlayer_PingServices::IsValid() {
    return (m_ptr != nullptr);
}

GCPlayer_FlashlightServices::GCPlayer_FlashlightServices(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPlayer_FlashlightServices::GCPlayer_FlashlightServices(void *ptr) {
    m_ptr = ptr;
}

std::string GCPlayer_FlashlightServices::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPlayer_FlashlightServices::IsValid() {
    return (m_ptr != nullptr);
}

GCServerOnlyModelEntity::GCServerOnlyModelEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCServerOnlyModelEntity::GCServerOnlyModelEntity(void *ptr) {
    m_ptr = ptr;
}

std::string GCServerOnlyModelEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCServerOnlyModelEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCBtActionCombatPositioning::GCBtActionCombatPositioning(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBtActionCombatPositioning::GCBtActionCombatPositioning(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCBtActionCombatPositioning::GetSensorInputKey() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CBtActionCombatPositioning", "m_szSensorInputKey");
}

void GCBtActionCombatPositioning::SetSensorInputKey(CUtlString value) {
    SetSchemaValue(m_ptr, "CBtActionCombatPositioning", "m_szSensorInputKey", false, value);
}

CUtlString GCBtActionCombatPositioning::GetIsAttackingKey() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CBtActionCombatPositioning", "m_szIsAttackingKey");
}

void GCBtActionCombatPositioning::SetIsAttackingKey(CUtlString value) {
    SetSchemaValue(m_ptr, "CBtActionCombatPositioning", "m_szIsAttackingKey", false, value);
}

GCountdownTimer GCBtActionCombatPositioning::GetActionTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CBtActionCombatPositioning", "m_ActionTimer");
}

void GCBtActionCombatPositioning::SetActionTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CBtActionCombatPositioning", "m_ActionTimer", false, value);
}

bool GCBtActionCombatPositioning::GetCrouching() const {
    return GetSchemaValue<bool>(m_ptr, "CBtActionCombatPositioning", "m_bCrouching");
}

void GCBtActionCombatPositioning::SetCrouching(bool value) {
    SetSchemaValue(m_ptr, "CBtActionCombatPositioning", "m_bCrouching", false, value);
}

std::string GCBtActionCombatPositioning::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBtActionCombatPositioning::IsValid() {
    return (m_ptr != nullptr);
}

GCFireSmoke::GCFireSmoke(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFireSmoke::GCFireSmoke(void *ptr) {
    m_ptr = ptr;
}

int32_t GCFireSmoke::GetFlameModelIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CFireSmoke", "m_nFlameModelIndex");
}

void GCFireSmoke::SetFlameModelIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CFireSmoke", "m_nFlameModelIndex", false, value);
}

int32_t GCFireSmoke::GetFlameFromAboveModelIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CFireSmoke", "m_nFlameFromAboveModelIndex");
}

void GCFireSmoke::SetFlameFromAboveModelIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CFireSmoke", "m_nFlameFromAboveModelIndex", false, value);
}

std::string GCFireSmoke::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFireSmoke::IsValid() {
    return (m_ptr != nullptr);
}

GCCSWeaponBaseGun::GCCSWeaponBaseGun(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSWeaponBaseGun::GCCSWeaponBaseGun(void *ptr) {
    m_ptr = ptr;
}

int32_t GCCSWeaponBaseGun::GetZoomLevel() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBaseGun", "m_zoomLevel");
}

void GCCSWeaponBaseGun::SetZoomLevel(int32_t value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseGun", "m_zoomLevel", false, value);
}

int32_t GCCSWeaponBaseGun::GetBurstShotsRemaining() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBaseGun", "m_iBurstShotsRemaining");
}

void GCCSWeaponBaseGun::SetBurstShotsRemaining(int32_t value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseGun", "m_iBurstShotsRemaining", false, value);
}

int32_t GCCSWeaponBaseGun::GetSilencedModelIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBaseGun", "m_silencedModelIndex");
}

void GCCSWeaponBaseGun::SetSilencedModelIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseGun", "m_silencedModelIndex", false, value);
}

bool GCCSWeaponBaseGun::GetInPrecache() const {
    return GetSchemaValue<bool>(m_ptr, "CCSWeaponBaseGun", "m_inPrecache");
}

void GCCSWeaponBaseGun::SetInPrecache(bool value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseGun", "m_inPrecache", false, value);
}

bool GCCSWeaponBaseGun::GetNeedsBoltAction() const {
    return GetSchemaValue<bool>(m_ptr, "CCSWeaponBaseGun", "m_bNeedsBoltAction");
}

void GCCSWeaponBaseGun::SetNeedsBoltAction(bool value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseGun", "m_bNeedsBoltAction", false, value);
}

bool GCCSWeaponBaseGun::GetSkillReloadAvailable() const {
    return GetSchemaValue<bool>(m_ptr, "CCSWeaponBaseGun", "m_bSkillReloadAvailable");
}

void GCCSWeaponBaseGun::SetSkillReloadAvailable(bool value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseGun", "m_bSkillReloadAvailable", false, value);
}

bool GCCSWeaponBaseGun::GetSkillReloadLiftedReloadKey() const {
    return GetSchemaValue<bool>(m_ptr, "CCSWeaponBaseGun", "m_bSkillReloadLiftedReloadKey");
}

void GCCSWeaponBaseGun::SetSkillReloadLiftedReloadKey(bool value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseGun", "m_bSkillReloadLiftedReloadKey", false, value);
}

bool GCCSWeaponBaseGun::GetSkillBoltInterruptAvailable() const {
    return GetSchemaValue<bool>(m_ptr, "CCSWeaponBaseGun", "m_bSkillBoltInterruptAvailable");
}

void GCCSWeaponBaseGun::SetSkillBoltInterruptAvailable(bool value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseGun", "m_bSkillBoltInterruptAvailable", false, value);
}

bool GCCSWeaponBaseGun::GetSkillBoltLiftedFireKey() const {
    return GetSchemaValue<bool>(m_ptr, "CCSWeaponBaseGun", "m_bSkillBoltLiftedFireKey");
}

void GCCSWeaponBaseGun::SetSkillBoltLiftedFireKey(bool value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseGun", "m_bSkillBoltLiftedFireKey", false, value);
}

std::string GCCSWeaponBaseGun::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSWeaponBaseGun::IsValid() {
    return (m_ptr != nullptr);
}

GCWeaponGlock::GCWeaponGlock(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWeaponGlock::GCWeaponGlock(void *ptr) {
    m_ptr = ptr;
}

std::string GCWeaponGlock::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWeaponGlock::IsValid() {
    return (m_ptr != nullptr);
}

GCPredictedViewModel::GCPredictedViewModel(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPredictedViewModel::GCPredictedViewModel(void *ptr) {
    m_ptr = ptr;
}

std::string GCPredictedViewModel::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPredictedViewModel::IsValid() {
    return (m_ptr != nullptr);
}

GCTriggerActiveWeaponDetect::GCTriggerActiveWeaponDetect(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTriggerActiveWeaponDetect::GCTriggerActiveWeaponDetect(void *ptr) {
    m_ptr = ptr;
}

GCEntityIOOutput GCTriggerActiveWeaponDetect::GetOnTouchedActiveWeapon() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CTriggerActiveWeaponDetect", "m_OnTouchedActiveWeapon");
}

void GCTriggerActiveWeaponDetect::SetOnTouchedActiveWeapon(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CTriggerActiveWeaponDetect", "m_OnTouchedActiveWeapon", false, value);
}

CUtlSymbolLarge GCTriggerActiveWeaponDetect::GetWeaponClassName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CTriggerActiveWeaponDetect", "m_iszWeaponClassName");
}

void GCTriggerActiveWeaponDetect::SetWeaponClassName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CTriggerActiveWeaponDetect", "m_iszWeaponClassName", false, value);
}

std::string GCTriggerActiveWeaponDetect::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTriggerActiveWeaponDetect::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvMicrophone::GCEnvMicrophone(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvMicrophone::GCEnvMicrophone(void *ptr) {
    m_ptr = ptr;
}

bool GCEnvMicrophone::GetDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvMicrophone", "m_bDisabled");
}

void GCEnvMicrophone::SetDisabled(bool value) {
    SetSchemaValue(m_ptr, "CEnvMicrophone", "m_bDisabled", false, value);
}

GCBaseEntity GCEnvMicrophone::GetMeasureTarget() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CEnvMicrophone", "m_hMeasureTarget"));
    return value;
}

void GCEnvMicrophone::SetMeasureTarget(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'MeasureTarget' is not possible.\n");
}

SoundTypes_t GCEnvMicrophone::GetSoundType() const {
    return GetSchemaValue<SoundTypes_t>(m_ptr, "CEnvMicrophone", "m_nSoundType");
}

void GCEnvMicrophone::SetSoundType(SoundTypes_t value) {
    SetSchemaValue(m_ptr, "CEnvMicrophone", "m_nSoundType", false, value);
}

SoundFlags_t GCEnvMicrophone::GetSoundFlags() const {
    return GetSchemaValue<SoundFlags_t>(m_ptr, "CEnvMicrophone", "m_nSoundFlags");
}

void GCEnvMicrophone::SetSoundFlags(SoundFlags_t value) {
    SetSchemaValue(m_ptr, "CEnvMicrophone", "m_nSoundFlags", false, value);
}

float GCEnvMicrophone::GetSensitivity() const {
    return GetSchemaValue<float>(m_ptr, "CEnvMicrophone", "m_flSensitivity");
}

void GCEnvMicrophone::SetSensitivity(float value) {
    SetSchemaValue(m_ptr, "CEnvMicrophone", "m_flSensitivity", false, value);
}

float GCEnvMicrophone::GetSmoothFactor() const {
    return GetSchemaValue<float>(m_ptr, "CEnvMicrophone", "m_flSmoothFactor");
}

void GCEnvMicrophone::SetSmoothFactor(float value) {
    SetSchemaValue(m_ptr, "CEnvMicrophone", "m_flSmoothFactor", false, value);
}

float GCEnvMicrophone::GetMaxRange() const {
    return GetSchemaValue<float>(m_ptr, "CEnvMicrophone", "m_flMaxRange");
}

void GCEnvMicrophone::SetMaxRange(float value) {
    SetSchemaValue(m_ptr, "CEnvMicrophone", "m_flMaxRange", false, value);
}

CUtlSymbolLarge GCEnvMicrophone::GetSpeakerName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvMicrophone", "m_iszSpeakerName");
}

void GCEnvMicrophone::SetSpeakerName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEnvMicrophone", "m_iszSpeakerName", false, value);
}

GCBaseEntity GCEnvMicrophone::GetSpeaker() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CEnvMicrophone", "m_hSpeaker"));
    return value;
}

void GCEnvMicrophone::SetSpeaker(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Speaker' is not possible.\n");
}

bool GCEnvMicrophone::GetAvoidFeedback() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvMicrophone", "m_bAvoidFeedback");
}

void GCEnvMicrophone::SetAvoidFeedback(bool value) {
    SetSchemaValue(m_ptr, "CEnvMicrophone", "m_bAvoidFeedback", false, value);
}

int32_t GCEnvMicrophone::GetSpeakerDSPPreset() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvMicrophone", "m_iSpeakerDSPPreset");
}

void GCEnvMicrophone::SetSpeakerDSPPreset(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvMicrophone", "m_iSpeakerDSPPreset", false, value);
}

CUtlSymbolLarge GCEnvMicrophone::GetListenFilter() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvMicrophone", "m_iszListenFilter");
}

void GCEnvMicrophone::SetListenFilter(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEnvMicrophone", "m_iszListenFilter", false, value);
}

GCBaseFilter GCEnvMicrophone::GetListenFilter1() const {
    GCBaseFilter value(GetSchemaValuePtr<void>(m_ptr, "CEnvMicrophone", "m_hListenFilter"));
    return value;
}

void GCEnvMicrophone::SetListenFilter1(GCBaseFilter* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ListenFilter1' is not possible.\n");
}

GCEntityIOOutput GCEnvMicrophone::GetOnRoutedSound() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CEnvMicrophone", "m_OnRoutedSound");
}

void GCEnvMicrophone::SetOnRoutedSound(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CEnvMicrophone", "m_OnRoutedSound", false, value);
}

GCEntityIOOutput GCEnvMicrophone::GetOnHeardSound() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CEnvMicrophone", "m_OnHeardSound");
}

void GCEnvMicrophone::SetOnHeardSound(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CEnvMicrophone", "m_OnHeardSound", false, value);
}

std::string GCEnvMicrophone::GetLastSound() const {
    return GetSchemaValuePtr<char>(m_ptr, "CEnvMicrophone", "m_szLastSound");
}

void GCEnvMicrophone::SetLastSound(std::string value) {
    WriteSchemaPtrValue(m_ptr, "CEnvMicrophone", "m_szLastSound", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 256);
}

int32_t GCEnvMicrophone::GetLastRoutedFrame() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvMicrophone", "m_iLastRoutedFrame");
}

void GCEnvMicrophone::SetLastRoutedFrame(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvMicrophone", "m_iLastRoutedFrame", false, value);
}

std::string GCEnvMicrophone::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvMicrophone::IsValid() {
    return (m_ptr != nullptr);
}

GCInfoSpawnGroupLoadUnload::GCInfoSpawnGroupLoadUnload(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCInfoSpawnGroupLoadUnload::GCInfoSpawnGroupLoadUnload(void *ptr) {
    m_ptr = ptr;
}

GCEntityIOOutput GCInfoSpawnGroupLoadUnload::GetOnSpawnGroupLoadStarted() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CInfoSpawnGroupLoadUnload", "m_OnSpawnGroupLoadStarted");
}

void GCInfoSpawnGroupLoadUnload::SetOnSpawnGroupLoadStarted(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CInfoSpawnGroupLoadUnload", "m_OnSpawnGroupLoadStarted", false, value);
}

GCEntityIOOutput GCInfoSpawnGroupLoadUnload::GetOnSpawnGroupLoadFinished() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CInfoSpawnGroupLoadUnload", "m_OnSpawnGroupLoadFinished");
}

void GCInfoSpawnGroupLoadUnload::SetOnSpawnGroupLoadFinished(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CInfoSpawnGroupLoadUnload", "m_OnSpawnGroupLoadFinished", false, value);
}

GCEntityIOOutput GCInfoSpawnGroupLoadUnload::GetOnSpawnGroupUnloadStarted() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CInfoSpawnGroupLoadUnload", "m_OnSpawnGroupUnloadStarted");
}

void GCInfoSpawnGroupLoadUnload::SetOnSpawnGroupUnloadStarted(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CInfoSpawnGroupLoadUnload", "m_OnSpawnGroupUnloadStarted", false, value);
}

GCEntityIOOutput GCInfoSpawnGroupLoadUnload::GetOnSpawnGroupUnloadFinished() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CInfoSpawnGroupLoadUnload", "m_OnSpawnGroupUnloadFinished");
}

void GCInfoSpawnGroupLoadUnload::SetOnSpawnGroupUnloadFinished(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CInfoSpawnGroupLoadUnload", "m_OnSpawnGroupUnloadFinished", false, value);
}

CUtlSymbolLarge GCInfoSpawnGroupLoadUnload::GetSpawnGroupName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CInfoSpawnGroupLoadUnload", "m_iszSpawnGroupName");
}

void GCInfoSpawnGroupLoadUnload::SetSpawnGroupName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CInfoSpawnGroupLoadUnload", "m_iszSpawnGroupName", false, value);
}

CUtlSymbolLarge GCInfoSpawnGroupLoadUnload::GetSpawnGroupFilterName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CInfoSpawnGroupLoadUnload", "m_iszSpawnGroupFilterName");
}

void GCInfoSpawnGroupLoadUnload::SetSpawnGroupFilterName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CInfoSpawnGroupLoadUnload", "m_iszSpawnGroupFilterName", false, value);
}

CUtlSymbolLarge GCInfoSpawnGroupLoadUnload::GetLandmarkName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CInfoSpawnGroupLoadUnload", "m_iszLandmarkName");
}

void GCInfoSpawnGroupLoadUnload::SetLandmarkName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CInfoSpawnGroupLoadUnload", "m_iszLandmarkName", false, value);
}

CUtlString GCInfoSpawnGroupLoadUnload::GetFixedSpawnGroupName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CInfoSpawnGroupLoadUnload", "m_sFixedSpawnGroupName");
}

void GCInfoSpawnGroupLoadUnload::SetFixedSpawnGroupName(CUtlString value) {
    SetSchemaValue(m_ptr, "CInfoSpawnGroupLoadUnload", "m_sFixedSpawnGroupName", false, value);
}

float GCInfoSpawnGroupLoadUnload::GetTimeoutInterval() const {
    return GetSchemaValue<float>(m_ptr, "CInfoSpawnGroupLoadUnload", "m_flTimeoutInterval");
}

void GCInfoSpawnGroupLoadUnload::SetTimeoutInterval(float value) {
    SetSchemaValue(m_ptr, "CInfoSpawnGroupLoadUnload", "m_flTimeoutInterval", false, value);
}

bool GCInfoSpawnGroupLoadUnload::GetStreamingStarted() const {
    return GetSchemaValue<bool>(m_ptr, "CInfoSpawnGroupLoadUnload", "m_bStreamingStarted");
}

void GCInfoSpawnGroupLoadUnload::SetStreamingStarted(bool value) {
    SetSchemaValue(m_ptr, "CInfoSpawnGroupLoadUnload", "m_bStreamingStarted", false, value);
}

bool GCInfoSpawnGroupLoadUnload::GetUnloadingStarted() const {
    return GetSchemaValue<bool>(m_ptr, "CInfoSpawnGroupLoadUnload", "m_bUnloadingStarted");
}

void GCInfoSpawnGroupLoadUnload::SetUnloadingStarted(bool value) {
    SetSchemaValue(m_ptr, "CInfoSpawnGroupLoadUnload", "m_bUnloadingStarted", false, value);
}

std::string GCInfoSpawnGroupLoadUnload::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCInfoSpawnGroupLoadUnload::IsValid() {
    return (m_ptr != nullptr);
}

GCBasePlayerController::GCBasePlayerController(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBasePlayerController::GCBasePlayerController(void *ptr) {
    m_ptr = ptr;
}

uint64_t GCBasePlayerController::GetInButtonsWhichAreToggles() const {
    return GetSchemaValue<uint64_t>(m_ptr, "CBasePlayerController", "m_nInButtonsWhichAreToggles");
}

void GCBasePlayerController::SetInButtonsWhichAreToggles(uint64_t value) {
    SetSchemaValue(m_ptr, "CBasePlayerController", "m_nInButtonsWhichAreToggles", false, value);
}

uint32_t GCBasePlayerController::GetTickBase() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CBasePlayerController", "m_nTickBase");
}

void GCBasePlayerController::SetTickBase(uint32_t value) {
    SetSchemaValue(m_ptr, "CBasePlayerController", "m_nTickBase", false, value);
}

GCBasePlayerPawn GCBasePlayerController::GetPawn() const {
    GCBasePlayerPawn value(GetSchemaValuePtr<void>(m_ptr, "CBasePlayerController", "m_hPawn"));
    return value;
}

void GCBasePlayerController::SetPawn(GCBasePlayerPawn* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Pawn' is not possible.\n");
}

bool GCBasePlayerController::GetKnownTeamMismatch() const {
    return GetSchemaValue<bool>(m_ptr, "CBasePlayerController", "m_bKnownTeamMismatch");
}

void GCBasePlayerController::SetKnownTeamMismatch(bool value) {
    SetSchemaValue(m_ptr, "CBasePlayerController", "m_bKnownTeamMismatch", false, value);
}

int32_t GCBasePlayerController::GetSplitScreenSlot() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBasePlayerController", "m_nSplitScreenSlot");
}

void GCBasePlayerController::SetSplitScreenSlot(int32_t value) {
    SetSchemaValue(m_ptr, "CBasePlayerController", "m_nSplitScreenSlot", false, value);
}

GCBasePlayerController GCBasePlayerController::GetSplitOwner() const {
    GCBasePlayerController value(GetSchemaValuePtr<void>(m_ptr, "CBasePlayerController", "m_hSplitOwner"));
    return value;
}

void GCBasePlayerController::SetSplitOwner(GCBasePlayerController* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'SplitOwner' is not possible.\n");
}

bool GCBasePlayerController::GetIsHLTV() const {
    return GetSchemaValue<bool>(m_ptr, "CBasePlayerController", "m_bIsHLTV");
}

void GCBasePlayerController::SetIsHLTV(bool value) {
    SetSchemaValue(m_ptr, "CBasePlayerController", "m_bIsHLTV", false, value);
}

PlayerConnectedState GCBasePlayerController::GetConnected() const {
    return GetSchemaValue<PlayerConnectedState>(m_ptr, "CBasePlayerController", "m_iConnected");
}

void GCBasePlayerController::SetConnected(PlayerConnectedState value) {
    SetSchemaValue(m_ptr, "CBasePlayerController", "m_iConnected", false, value);
}

std::string GCBasePlayerController::GetPlayerName() const {
    return GetSchemaValuePtr<char>(m_ptr, "CBasePlayerController", "m_iszPlayerName");
}

void GCBasePlayerController::SetPlayerName(std::string value) {
    WriteSchemaPtrValue(m_ptr, "CBasePlayerController", "m_iszPlayerName", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 128);
}

CUtlString GCBasePlayerController::GetNetworkIDString() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CBasePlayerController", "m_szNetworkIDString");
}

void GCBasePlayerController::SetNetworkIDString(CUtlString value) {
    SetSchemaValue(m_ptr, "CBasePlayerController", "m_szNetworkIDString", false, value);
}

float GCBasePlayerController::GetLerpTime() const {
    return GetSchemaValue<float>(m_ptr, "CBasePlayerController", "m_fLerpTime");
}

void GCBasePlayerController::SetLerpTime(float value) {
    SetSchemaValue(m_ptr, "CBasePlayerController", "m_fLerpTime", false, value);
}

bool GCBasePlayerController::GetLagCompensation() const {
    return GetSchemaValue<bool>(m_ptr, "CBasePlayerController", "m_bLagCompensation");
}

void GCBasePlayerController::SetLagCompensation(bool value) {
    SetSchemaValue(m_ptr, "CBasePlayerController", "m_bLagCompensation", false, value);
}

bool GCBasePlayerController::GetPredict() const {
    return GetSchemaValue<bool>(m_ptr, "CBasePlayerController", "m_bPredict");
}

void GCBasePlayerController::SetPredict(bool value) {
    SetSchemaValue(m_ptr, "CBasePlayerController", "m_bPredict", false, value);
}

bool GCBasePlayerController::GetAutoKickDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CBasePlayerController", "m_bAutoKickDisabled");
}

void GCBasePlayerController::SetAutoKickDisabled(bool value) {
    SetSchemaValue(m_ptr, "CBasePlayerController", "m_bAutoKickDisabled", false, value);
}

bool GCBasePlayerController::GetIsLowViolence() const {
    return GetSchemaValue<bool>(m_ptr, "CBasePlayerController", "m_bIsLowViolence");
}

void GCBasePlayerController::SetIsLowViolence(bool value) {
    SetSchemaValue(m_ptr, "CBasePlayerController", "m_bIsLowViolence", false, value);
}

bool GCBasePlayerController::GetGamePaused() const {
    return GetSchemaValue<bool>(m_ptr, "CBasePlayerController", "m_bGamePaused");
}

void GCBasePlayerController::SetGamePaused(bool value) {
    SetSchemaValue(m_ptr, "CBasePlayerController", "m_bGamePaused", false, value);
}

int32_t GCBasePlayerController::GetLastRealCommandNumberExecuted() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBasePlayerController", "m_nLastRealCommandNumberExecuted");
}

void GCBasePlayerController::SetLastRealCommandNumberExecuted(int32_t value) {
    SetSchemaValue(m_ptr, "CBasePlayerController", "m_nLastRealCommandNumberExecuted", false, value);
}

int32_t GCBasePlayerController::GetLastLateCommandExecuted() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBasePlayerController", "m_nLastLateCommandExecuted");
}

void GCBasePlayerController::SetLastLateCommandExecuted(int32_t value) {
    SetSchemaValue(m_ptr, "CBasePlayerController", "m_nLastLateCommandExecuted", false, value);
}

ChatIgnoreType_t GCBasePlayerController::GetIgnoreGlobalChat() const {
    return GetSchemaValue<ChatIgnoreType_t>(m_ptr, "CBasePlayerController", "m_iIgnoreGlobalChat");
}

void GCBasePlayerController::SetIgnoreGlobalChat(ChatIgnoreType_t value) {
    SetSchemaValue(m_ptr, "CBasePlayerController", "m_iIgnoreGlobalChat", false, value);
}

float GCBasePlayerController::GetLastPlayerTalkTime() const {
    return GetSchemaValue<float>(m_ptr, "CBasePlayerController", "m_flLastPlayerTalkTime");
}

void GCBasePlayerController::SetLastPlayerTalkTime(float value) {
    SetSchemaValue(m_ptr, "CBasePlayerController", "m_flLastPlayerTalkTime", false, value);
}

float GCBasePlayerController::GetLastEntitySteadyState() const {
    return GetSchemaValue<float>(m_ptr, "CBasePlayerController", "m_flLastEntitySteadyState");
}

void GCBasePlayerController::SetLastEntitySteadyState(float value) {
    SetSchemaValue(m_ptr, "CBasePlayerController", "m_flLastEntitySteadyState", false, value);
}

int32_t GCBasePlayerController::GetAvailableEntitySteadyState() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBasePlayerController", "m_nAvailableEntitySteadyState");
}

void GCBasePlayerController::SetAvailableEntitySteadyState(int32_t value) {
    SetSchemaValue(m_ptr, "CBasePlayerController", "m_nAvailableEntitySteadyState", false, value);
}

bool GCBasePlayerController::GetHasAnySteadyStateEnts() const {
    return GetSchemaValue<bool>(m_ptr, "CBasePlayerController", "m_bHasAnySteadyStateEnts");
}

void GCBasePlayerController::SetHasAnySteadyStateEnts(bool value) {
    SetSchemaValue(m_ptr, "CBasePlayerController", "m_bHasAnySteadyStateEnts", false, value);
}

uint64_t GCBasePlayerController::GetSteamID() const {
    return GetSchemaValue<uint64_t>(m_ptr, "CBasePlayerController", "m_steamID");
}

void GCBasePlayerController::SetSteamID(uint64_t value) {
    SetSchemaValue(m_ptr, "CBasePlayerController", "m_steamID", false, value);
}

uint32_t GCBasePlayerController::GetDesiredFOV() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CBasePlayerController", "m_iDesiredFOV");
}

void GCBasePlayerController::SetDesiredFOV(uint32_t value) {
    SetSchemaValue(m_ptr, "CBasePlayerController", "m_iDesiredFOV", false, value);
}

std::string GCBasePlayerController::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBasePlayerController::IsValid() {
    return (m_ptr != nullptr);
}

GCPointTemplateAPI::GCPointTemplateAPI(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPointTemplateAPI::GCPointTemplateAPI(void *ptr) {
    m_ptr = ptr;
}

std::string GCPointTemplateAPI::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPointTemplateAPI::IsValid() {
    return (m_ptr != nullptr);
}

GCKnife::GCKnife(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCKnife::GCKnife(void *ptr) {
    m_ptr = ptr;
}

bool GCKnife::GetFirstAttack() const {
    return GetSchemaValue<bool>(m_ptr, "CKnife", "m_bFirstAttack");
}

void GCKnife::SetFirstAttack(bool value) {
    SetSchemaValue(m_ptr, "CKnife", "m_bFirstAttack", false, value);
}

std::string GCKnife::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCKnife::IsValid() {
    return (m_ptr != nullptr);
}

GCFuncTrackTrain::GCFuncTrackTrain(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFuncTrackTrain::GCFuncTrackTrain(void *ptr) {
    m_ptr = ptr;
}

GCPathTrack GCFuncTrackTrain::GetPpath() const {
    GCPathTrack value(GetSchemaValuePtr<void>(m_ptr, "CFuncTrackTrain", "m_ppath"));
    return value;
}

void GCFuncTrackTrain::SetPpath(GCPathTrack* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Ppath' is not possible.\n");
}

float GCFuncTrackTrain::GetLength() const {
    return GetSchemaValue<float>(m_ptr, "CFuncTrackTrain", "m_length");
}

void GCFuncTrackTrain::SetLength(float value) {
    SetSchemaValue(m_ptr, "CFuncTrackTrain", "m_length", false, value);
}

Vector GCFuncTrackTrain::GetPosPrev() const {
    return GetSchemaValue<Vector>(m_ptr, "CFuncTrackTrain", "m_vPosPrev");
}

void GCFuncTrackTrain::SetPosPrev(Vector value) {
    SetSchemaValue(m_ptr, "CFuncTrackTrain", "m_vPosPrev", false, value);
}

QAngle GCFuncTrackTrain::GetPrev() const {
    return GetSchemaValue<QAngle>(m_ptr, "CFuncTrackTrain", "m_angPrev");
}

void GCFuncTrackTrain::SetPrev(QAngle value) {
    SetSchemaValue(m_ptr, "CFuncTrackTrain", "m_angPrev", false, value);
}

Vector GCFuncTrackTrain::GetControlMins() const {
    return GetSchemaValue<Vector>(m_ptr, "CFuncTrackTrain", "m_controlMins");
}

void GCFuncTrackTrain::SetControlMins(Vector value) {
    SetSchemaValue(m_ptr, "CFuncTrackTrain", "m_controlMins", false, value);
}

Vector GCFuncTrackTrain::GetControlMaxs() const {
    return GetSchemaValue<Vector>(m_ptr, "CFuncTrackTrain", "m_controlMaxs");
}

void GCFuncTrackTrain::SetControlMaxs(Vector value) {
    SetSchemaValue(m_ptr, "CFuncTrackTrain", "m_controlMaxs", false, value);
}

Vector GCFuncTrackTrain::GetLastBlockPos() const {
    return GetSchemaValue<Vector>(m_ptr, "CFuncTrackTrain", "m_lastBlockPos");
}

void GCFuncTrackTrain::SetLastBlockPos(Vector value) {
    SetSchemaValue(m_ptr, "CFuncTrackTrain", "m_lastBlockPos", false, value);
}

int32_t GCFuncTrackTrain::GetLastBlockTick() const {
    return GetSchemaValue<int32_t>(m_ptr, "CFuncTrackTrain", "m_lastBlockTick");
}

void GCFuncTrackTrain::SetLastBlockTick(int32_t value) {
    SetSchemaValue(m_ptr, "CFuncTrackTrain", "m_lastBlockTick", false, value);
}

float GCFuncTrackTrain::GetVolume() const {
    return GetSchemaValue<float>(m_ptr, "CFuncTrackTrain", "m_flVolume");
}

void GCFuncTrackTrain::SetVolume(float value) {
    SetSchemaValue(m_ptr, "CFuncTrackTrain", "m_flVolume", false, value);
}

float GCFuncTrackTrain::GetBank() const {
    return GetSchemaValue<float>(m_ptr, "CFuncTrackTrain", "m_flBank");
}

void GCFuncTrackTrain::SetBank(float value) {
    SetSchemaValue(m_ptr, "CFuncTrackTrain", "m_flBank", false, value);
}

float GCFuncTrackTrain::GetOldSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CFuncTrackTrain", "m_oldSpeed");
}

void GCFuncTrackTrain::SetOldSpeed(float value) {
    SetSchemaValue(m_ptr, "CFuncTrackTrain", "m_oldSpeed", false, value);
}

float GCFuncTrackTrain::GetBlockDamage() const {
    return GetSchemaValue<float>(m_ptr, "CFuncTrackTrain", "m_flBlockDamage");
}

void GCFuncTrackTrain::SetBlockDamage(float value) {
    SetSchemaValue(m_ptr, "CFuncTrackTrain", "m_flBlockDamage", false, value);
}

float GCFuncTrackTrain::GetHeight() const {
    return GetSchemaValue<float>(m_ptr, "CFuncTrackTrain", "m_height");
}

void GCFuncTrackTrain::SetHeight(float value) {
    SetSchemaValue(m_ptr, "CFuncTrackTrain", "m_height", false, value);
}

float GCFuncTrackTrain::GetMaxSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CFuncTrackTrain", "m_maxSpeed");
}

void GCFuncTrackTrain::SetMaxSpeed(float value) {
    SetSchemaValue(m_ptr, "CFuncTrackTrain", "m_maxSpeed", false, value);
}

float GCFuncTrackTrain::GetDir() const {
    return GetSchemaValue<float>(m_ptr, "CFuncTrackTrain", "m_dir");
}

void GCFuncTrackTrain::SetDir(float value) {
    SetSchemaValue(m_ptr, "CFuncTrackTrain", "m_dir", false, value);
}

CUtlSymbolLarge GCFuncTrackTrain::GetSoundMove() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncTrackTrain", "m_iszSoundMove");
}

void GCFuncTrackTrain::SetSoundMove(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFuncTrackTrain", "m_iszSoundMove", false, value);
}

CUtlSymbolLarge GCFuncTrackTrain::GetSoundMovePing() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncTrackTrain", "m_iszSoundMovePing");
}

void GCFuncTrackTrain::SetSoundMovePing(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFuncTrackTrain", "m_iszSoundMovePing", false, value);
}

CUtlSymbolLarge GCFuncTrackTrain::GetSoundStart() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncTrackTrain", "m_iszSoundStart");
}

void GCFuncTrackTrain::SetSoundStart(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFuncTrackTrain", "m_iszSoundStart", false, value);
}

CUtlSymbolLarge GCFuncTrackTrain::GetSoundStop() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncTrackTrain", "m_iszSoundStop");
}

void GCFuncTrackTrain::SetSoundStop(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFuncTrackTrain", "m_iszSoundStop", false, value);
}

CUtlSymbolLarge GCFuncTrackTrain::GetStrPathTarget() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncTrackTrain", "m_strPathTarget");
}

void GCFuncTrackTrain::SetStrPathTarget(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFuncTrackTrain", "m_strPathTarget", false, value);
}

float GCFuncTrackTrain::GetMoveSoundMinDuration() const {
    return GetSchemaValue<float>(m_ptr, "CFuncTrackTrain", "m_flMoveSoundMinDuration");
}

void GCFuncTrackTrain::SetMoveSoundMinDuration(float value) {
    SetSchemaValue(m_ptr, "CFuncTrackTrain", "m_flMoveSoundMinDuration", false, value);
}

float GCFuncTrackTrain::GetMoveSoundMaxDuration() const {
    return GetSchemaValue<float>(m_ptr, "CFuncTrackTrain", "m_flMoveSoundMaxDuration");
}

void GCFuncTrackTrain::SetMoveSoundMaxDuration(float value) {
    SetSchemaValue(m_ptr, "CFuncTrackTrain", "m_flMoveSoundMaxDuration", false, value);
}

float GCFuncTrackTrain::GetMoveSoundMinPitch() const {
    return GetSchemaValue<float>(m_ptr, "CFuncTrackTrain", "m_flMoveSoundMinPitch");
}

void GCFuncTrackTrain::SetMoveSoundMinPitch(float value) {
    SetSchemaValue(m_ptr, "CFuncTrackTrain", "m_flMoveSoundMinPitch", false, value);
}

float GCFuncTrackTrain::GetMoveSoundMaxPitch() const {
    return GetSchemaValue<float>(m_ptr, "CFuncTrackTrain", "m_flMoveSoundMaxPitch");
}

void GCFuncTrackTrain::SetMoveSoundMaxPitch(float value) {
    SetSchemaValue(m_ptr, "CFuncTrackTrain", "m_flMoveSoundMaxPitch", false, value);
}

TrainOrientationType_t GCFuncTrackTrain::GetOrientationType() const {
    return GetSchemaValue<TrainOrientationType_t>(m_ptr, "CFuncTrackTrain", "m_eOrientationType");
}

void GCFuncTrackTrain::SetOrientationType(TrainOrientationType_t value) {
    SetSchemaValue(m_ptr, "CFuncTrackTrain", "m_eOrientationType", false, value);
}

TrainVelocityType_t GCFuncTrackTrain::GetVelocityType() const {
    return GetSchemaValue<TrainVelocityType_t>(m_ptr, "CFuncTrackTrain", "m_eVelocityType");
}

void GCFuncTrackTrain::SetVelocityType(TrainVelocityType_t value) {
    SetSchemaValue(m_ptr, "CFuncTrackTrain", "m_eVelocityType", false, value);
}

GCEntityIOOutput GCFuncTrackTrain::GetOnStart() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CFuncTrackTrain", "m_OnStart");
}

void GCFuncTrackTrain::SetOnStart(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CFuncTrackTrain", "m_OnStart", false, value);
}

GCEntityIOOutput GCFuncTrackTrain::GetOnNext() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CFuncTrackTrain", "m_OnNext");
}

void GCFuncTrackTrain::SetOnNext(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CFuncTrackTrain", "m_OnNext", false, value);
}

GCEntityIOOutput GCFuncTrackTrain::GetOnArrivedAtDestinationNode() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CFuncTrackTrain", "m_OnArrivedAtDestinationNode");
}

void GCFuncTrackTrain::SetOnArrivedAtDestinationNode(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CFuncTrackTrain", "m_OnArrivedAtDestinationNode", false, value);
}

bool GCFuncTrackTrain::GetManualSpeedChanges() const {
    return GetSchemaValue<bool>(m_ptr, "CFuncTrackTrain", "m_bManualSpeedChanges");
}

void GCFuncTrackTrain::SetManualSpeedChanges(bool value) {
    SetSchemaValue(m_ptr, "CFuncTrackTrain", "m_bManualSpeedChanges", false, value);
}

float GCFuncTrackTrain::GetDesiredSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CFuncTrackTrain", "m_flDesiredSpeed");
}

void GCFuncTrackTrain::SetDesiredSpeed(float value) {
    SetSchemaValue(m_ptr, "CFuncTrackTrain", "m_flDesiredSpeed", false, value);
}

float GCFuncTrackTrain::GetAccelSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CFuncTrackTrain", "m_flAccelSpeed");
}

void GCFuncTrackTrain::SetAccelSpeed(float value) {
    SetSchemaValue(m_ptr, "CFuncTrackTrain", "m_flAccelSpeed", false, value);
}

float GCFuncTrackTrain::GetDecelSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CFuncTrackTrain", "m_flDecelSpeed");
}

void GCFuncTrackTrain::SetDecelSpeed(float value) {
    SetSchemaValue(m_ptr, "CFuncTrackTrain", "m_flDecelSpeed", false, value);
}

bool GCFuncTrackTrain::GetAccelToSpeed() const {
    return GetSchemaValue<bool>(m_ptr, "CFuncTrackTrain", "m_bAccelToSpeed");
}

void GCFuncTrackTrain::SetAccelToSpeed(bool value) {
    SetSchemaValue(m_ptr, "CFuncTrackTrain", "m_bAccelToSpeed", false, value);
}

std::string GCFuncTrackTrain::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFuncTrackTrain::IsValid() {
    return (m_ptr != nullptr);
}

GCFogVolume::GCFogVolume(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFogVolume::GCFogVolume(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCFogVolume::GetFogName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFogVolume", "m_fogName");
}

void GCFogVolume::SetFogName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFogVolume", "m_fogName", false, value);
}

CUtlSymbolLarge GCFogVolume::GetPostProcessName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFogVolume", "m_postProcessName");
}

void GCFogVolume::SetPostProcessName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFogVolume", "m_postProcessName", false, value);
}

CUtlSymbolLarge GCFogVolume::GetColorCorrectionName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFogVolume", "m_colorCorrectionName");
}

void GCFogVolume::SetColorCorrectionName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFogVolume", "m_colorCorrectionName", false, value);
}

bool GCFogVolume::GetDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CFogVolume", "m_bDisabled");
}

void GCFogVolume::SetDisabled(bool value) {
    SetSchemaValue(m_ptr, "CFogVolume", "m_bDisabled", false, value);
}

bool GCFogVolume::GetInFogVolumesList() const {
    return GetSchemaValue<bool>(m_ptr, "CFogVolume", "m_bInFogVolumesList");
}

void GCFogVolume::SetInFogVolumesList(bool value) {
    SetSchemaValue(m_ptr, "CFogVolume", "m_bInFogVolumesList", false, value);
}

std::string GCFogVolume::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFogVolume::IsValid() {
    return (m_ptr != nullptr);
}

GCInfoPlayerCounterterrorist::GCInfoPlayerCounterterrorist(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCInfoPlayerCounterterrorist::GCInfoPlayerCounterterrorist(void *ptr) {
    m_ptr = ptr;
}

std::string GCInfoPlayerCounterterrorist::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCInfoPlayerCounterterrorist::IsValid() {
    return (m_ptr != nullptr);
}

GCFire::GCFire(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFire::GCFire(void *ptr) {
    m_ptr = ptr;
}

GCBaseFire GCFire::GetEffect() const {
    GCBaseFire value(GetSchemaValuePtr<void>(m_ptr, "CFire", "m_hEffect"));
    return value;
}

void GCFire::SetEffect(GCBaseFire* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Effect' is not possible.\n");
}

GCBaseEntity GCFire::GetOwner() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CFire", "m_hOwner"));
    return value;
}

void GCFire::SetOwner(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Owner' is not possible.\n");
}

int32_t GCFire::GetFireType() const {
    return GetSchemaValue<int32_t>(m_ptr, "CFire", "m_nFireType");
}

void GCFire::SetFireType(int32_t value) {
    SetSchemaValue(m_ptr, "CFire", "m_nFireType", false, value);
}

float GCFire::GetFuel() const {
    return GetSchemaValue<float>(m_ptr, "CFire", "m_flFuel");
}

void GCFire::SetFuel(float value) {
    SetSchemaValue(m_ptr, "CFire", "m_flFuel", false, value);
}

float GCFire::GetFireSize() const {
    return GetSchemaValue<float>(m_ptr, "CFire", "m_flFireSize");
}

void GCFire::SetFireSize(float value) {
    SetSchemaValue(m_ptr, "CFire", "m_flFireSize", false, value);
}

float GCFire::GetHeatLevel() const {
    return GetSchemaValue<float>(m_ptr, "CFire", "m_flHeatLevel");
}

void GCFire::SetHeatLevel(float value) {
    SetSchemaValue(m_ptr, "CFire", "m_flHeatLevel", false, value);
}

float GCFire::GetHeatAbsorb() const {
    return GetSchemaValue<float>(m_ptr, "CFire", "m_flHeatAbsorb");
}

void GCFire::SetHeatAbsorb(float value) {
    SetSchemaValue(m_ptr, "CFire", "m_flHeatAbsorb", false, value);
}

float GCFire::GetDamageScale() const {
    return GetSchemaValue<float>(m_ptr, "CFire", "m_flDamageScale");
}

void GCFire::SetDamageScale(float value) {
    SetSchemaValue(m_ptr, "CFire", "m_flDamageScale", false, value);
}

float GCFire::GetMaxHeat() const {
    return GetSchemaValue<float>(m_ptr, "CFire", "m_flMaxHeat");
}

void GCFire::SetMaxHeat(float value) {
    SetSchemaValue(m_ptr, "CFire", "m_flMaxHeat", false, value);
}

float GCFire::GetLastHeatLevel() const {
    return GetSchemaValue<float>(m_ptr, "CFire", "m_flLastHeatLevel");
}

void GCFire::SetLastHeatLevel(float value) {
    SetSchemaValue(m_ptr, "CFire", "m_flLastHeatLevel", false, value);
}

float GCFire::GetAttackTime() const {
    return GetSchemaValue<float>(m_ptr, "CFire", "m_flAttackTime");
}

void GCFire::SetAttackTime(float value) {
    SetSchemaValue(m_ptr, "CFire", "m_flAttackTime", false, value);
}

bool GCFire::GetEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CFire", "m_bEnabled");
}

void GCFire::SetEnabled(bool value) {
    SetSchemaValue(m_ptr, "CFire", "m_bEnabled", false, value);
}

bool GCFire::GetStartDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CFire", "m_bStartDisabled");
}

void GCFire::SetStartDisabled(bool value) {
    SetSchemaValue(m_ptr, "CFire", "m_bStartDisabled", false, value);
}

bool GCFire::GetDidActivate() const {
    return GetSchemaValue<bool>(m_ptr, "CFire", "m_bDidActivate");
}

void GCFire::SetDidActivate(bool value) {
    SetSchemaValue(m_ptr, "CFire", "m_bDidActivate", false, value);
}

GCEntityIOOutput GCFire::GetOnIgnited() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CFire", "m_OnIgnited");
}

void GCFire::SetOnIgnited(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CFire", "m_OnIgnited", false, value);
}

GCEntityIOOutput GCFire::GetOnExtinguished() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CFire", "m_OnExtinguished");
}

void GCFire::SetOnExtinguished(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CFire", "m_OnExtinguished", false, value);
}

std::string GCFire::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFire::IsValid() {
    return (m_ptr != nullptr);
}

GISkeletonAnimationController::GISkeletonAnimationController(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GISkeletonAnimationController::GISkeletonAnimationController(void *ptr) {
    m_ptr = ptr;
}

std::string GISkeletonAnimationController::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GISkeletonAnimationController::IsValid() {
    return (m_ptr != nullptr);
}

GCCSServerPointScriptEntity::GCCSServerPointScriptEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSServerPointScriptEntity::GCCSServerPointScriptEntity(void *ptr) {
    m_ptr = ptr;
}

std::string GCCSServerPointScriptEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSServerPointScriptEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCWeaponBizon::GCWeaponBizon(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWeaponBizon::GCWeaponBizon(void *ptr) {
    m_ptr = ptr;
}

std::string GCWeaponBizon::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWeaponBizon::IsValid() {
    return (m_ptr != nullptr);
}

GCFuncPlatRot::GCFuncPlatRot(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFuncPlatRot::GCFuncPlatRot(void *ptr) {
    m_ptr = ptr;
}

QAngle GCFuncPlatRot::GetEnd() const {
    return GetSchemaValue<QAngle>(m_ptr, "CFuncPlatRot", "m_end");
}

void GCFuncPlatRot::SetEnd(QAngle value) {
    SetSchemaValue(m_ptr, "CFuncPlatRot", "m_end", false, value);
}

QAngle GCFuncPlatRot::GetStart() const {
    return GetSchemaValue<QAngle>(m_ptr, "CFuncPlatRot", "m_start");
}

void GCFuncPlatRot::SetStart(QAngle value) {
    SetSchemaValue(m_ptr, "CFuncPlatRot", "m_start", false, value);
}

std::string GCFuncPlatRot::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFuncPlatRot::IsValid() {
    return (m_ptr != nullptr);
}

GCGenericConstraint::GCGenericConstraint(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCGenericConstraint::GCGenericConstraint(void *ptr) {
    m_ptr = ptr;
}

JointMotion_t GCGenericConstraint::GetLinearMotionX() const {
    return GetSchemaValue<JointMotion_t>(m_ptr, "CGenericConstraint", "m_nLinearMotionX");
}

void GCGenericConstraint::SetLinearMotionX(JointMotion_t value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_nLinearMotionX", false, value);
}

JointMotion_t GCGenericConstraint::GetLinearMotionY() const {
    return GetSchemaValue<JointMotion_t>(m_ptr, "CGenericConstraint", "m_nLinearMotionY");
}

void GCGenericConstraint::SetLinearMotionY(JointMotion_t value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_nLinearMotionY", false, value);
}

JointMotion_t GCGenericConstraint::GetLinearMotionZ() const {
    return GetSchemaValue<JointMotion_t>(m_ptr, "CGenericConstraint", "m_nLinearMotionZ");
}

void GCGenericConstraint::SetLinearMotionZ(JointMotion_t value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_nLinearMotionZ", false, value);
}

float GCGenericConstraint::GetLinearFrequencyX() const {
    return GetSchemaValue<float>(m_ptr, "CGenericConstraint", "m_flLinearFrequencyX");
}

void GCGenericConstraint::SetLinearFrequencyX(float value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_flLinearFrequencyX", false, value);
}

float GCGenericConstraint::GetLinearFrequencyY() const {
    return GetSchemaValue<float>(m_ptr, "CGenericConstraint", "m_flLinearFrequencyY");
}

void GCGenericConstraint::SetLinearFrequencyY(float value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_flLinearFrequencyY", false, value);
}

float GCGenericConstraint::GetLinearFrequencyZ() const {
    return GetSchemaValue<float>(m_ptr, "CGenericConstraint", "m_flLinearFrequencyZ");
}

void GCGenericConstraint::SetLinearFrequencyZ(float value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_flLinearFrequencyZ", false, value);
}

float GCGenericConstraint::GetLinearDampingRatioX() const {
    return GetSchemaValue<float>(m_ptr, "CGenericConstraint", "m_flLinearDampingRatioX");
}

void GCGenericConstraint::SetLinearDampingRatioX(float value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_flLinearDampingRatioX", false, value);
}

float GCGenericConstraint::GetLinearDampingRatioY() const {
    return GetSchemaValue<float>(m_ptr, "CGenericConstraint", "m_flLinearDampingRatioY");
}

void GCGenericConstraint::SetLinearDampingRatioY(float value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_flLinearDampingRatioY", false, value);
}

float GCGenericConstraint::GetLinearDampingRatioZ() const {
    return GetSchemaValue<float>(m_ptr, "CGenericConstraint", "m_flLinearDampingRatioZ");
}

void GCGenericConstraint::SetLinearDampingRatioZ(float value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_flLinearDampingRatioZ", false, value);
}

float GCGenericConstraint::GetMaxLinearImpulseX() const {
    return GetSchemaValue<float>(m_ptr, "CGenericConstraint", "m_flMaxLinearImpulseX");
}

void GCGenericConstraint::SetMaxLinearImpulseX(float value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_flMaxLinearImpulseX", false, value);
}

float GCGenericConstraint::GetMaxLinearImpulseY() const {
    return GetSchemaValue<float>(m_ptr, "CGenericConstraint", "m_flMaxLinearImpulseY");
}

void GCGenericConstraint::SetMaxLinearImpulseY(float value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_flMaxLinearImpulseY", false, value);
}

float GCGenericConstraint::GetMaxLinearImpulseZ() const {
    return GetSchemaValue<float>(m_ptr, "CGenericConstraint", "m_flMaxLinearImpulseZ");
}

void GCGenericConstraint::SetMaxLinearImpulseZ(float value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_flMaxLinearImpulseZ", false, value);
}

float GCGenericConstraint::GetBreakAfterTimeX() const {
    return GetSchemaValue<float>(m_ptr, "CGenericConstraint", "m_flBreakAfterTimeX");
}

void GCGenericConstraint::SetBreakAfterTimeX(float value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_flBreakAfterTimeX", false, value);
}

float GCGenericConstraint::GetBreakAfterTimeY() const {
    return GetSchemaValue<float>(m_ptr, "CGenericConstraint", "m_flBreakAfterTimeY");
}

void GCGenericConstraint::SetBreakAfterTimeY(float value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_flBreakAfterTimeY", false, value);
}

float GCGenericConstraint::GetBreakAfterTimeZ() const {
    return GetSchemaValue<float>(m_ptr, "CGenericConstraint", "m_flBreakAfterTimeZ");
}

void GCGenericConstraint::SetBreakAfterTimeZ(float value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_flBreakAfterTimeZ", false, value);
}

float GCGenericConstraint::GetBreakAfterTimeThresholdX() const {
    return GetSchemaValue<float>(m_ptr, "CGenericConstraint", "m_flBreakAfterTimeThresholdX");
}

void GCGenericConstraint::SetBreakAfterTimeThresholdX(float value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_flBreakAfterTimeThresholdX", false, value);
}

float GCGenericConstraint::GetBreakAfterTimeThresholdY() const {
    return GetSchemaValue<float>(m_ptr, "CGenericConstraint", "m_flBreakAfterTimeThresholdY");
}

void GCGenericConstraint::SetBreakAfterTimeThresholdY(float value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_flBreakAfterTimeThresholdY", false, value);
}

float GCGenericConstraint::GetBreakAfterTimeThresholdZ() const {
    return GetSchemaValue<float>(m_ptr, "CGenericConstraint", "m_flBreakAfterTimeThresholdZ");
}

void GCGenericConstraint::SetBreakAfterTimeThresholdZ(float value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_flBreakAfterTimeThresholdZ", false, value);
}

float GCGenericConstraint::GetNotifyForceX() const {
    return GetSchemaValue<float>(m_ptr, "CGenericConstraint", "m_flNotifyForceX");
}

void GCGenericConstraint::SetNotifyForceX(float value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_flNotifyForceX", false, value);
}

float GCGenericConstraint::GetNotifyForceY() const {
    return GetSchemaValue<float>(m_ptr, "CGenericConstraint", "m_flNotifyForceY");
}

void GCGenericConstraint::SetNotifyForceY(float value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_flNotifyForceY", false, value);
}

float GCGenericConstraint::GetNotifyForceZ() const {
    return GetSchemaValue<float>(m_ptr, "CGenericConstraint", "m_flNotifyForceZ");
}

void GCGenericConstraint::SetNotifyForceZ(float value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_flNotifyForceZ", false, value);
}

float GCGenericConstraint::GetNotifyForceMinTimeX() const {
    return GetSchemaValue<float>(m_ptr, "CGenericConstraint", "m_flNotifyForceMinTimeX");
}

void GCGenericConstraint::SetNotifyForceMinTimeX(float value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_flNotifyForceMinTimeX", false, value);
}

float GCGenericConstraint::GetNotifyForceMinTimeY() const {
    return GetSchemaValue<float>(m_ptr, "CGenericConstraint", "m_flNotifyForceMinTimeY");
}

void GCGenericConstraint::SetNotifyForceMinTimeY(float value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_flNotifyForceMinTimeY", false, value);
}

float GCGenericConstraint::GetNotifyForceMinTimeZ() const {
    return GetSchemaValue<float>(m_ptr, "CGenericConstraint", "m_flNotifyForceMinTimeZ");
}

void GCGenericConstraint::SetNotifyForceMinTimeZ(float value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_flNotifyForceMinTimeZ", false, value);
}

bool GCGenericConstraint::GetAxisNotifiedX() const {
    return GetSchemaValue<bool>(m_ptr, "CGenericConstraint", "m_bAxisNotifiedX");
}

void GCGenericConstraint::SetAxisNotifiedX(bool value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_bAxisNotifiedX", false, value);
}

bool GCGenericConstraint::GetAxisNotifiedY() const {
    return GetSchemaValue<bool>(m_ptr, "CGenericConstraint", "m_bAxisNotifiedY");
}

void GCGenericConstraint::SetAxisNotifiedY(bool value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_bAxisNotifiedY", false, value);
}

bool GCGenericConstraint::GetAxisNotifiedZ() const {
    return GetSchemaValue<bool>(m_ptr, "CGenericConstraint", "m_bAxisNotifiedZ");
}

void GCGenericConstraint::SetAxisNotifiedZ(bool value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_bAxisNotifiedZ", false, value);
}

JointMotion_t GCGenericConstraint::GetAngularMotionX() const {
    return GetSchemaValue<JointMotion_t>(m_ptr, "CGenericConstraint", "m_nAngularMotionX");
}

void GCGenericConstraint::SetAngularMotionX(JointMotion_t value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_nAngularMotionX", false, value);
}

JointMotion_t GCGenericConstraint::GetAngularMotionY() const {
    return GetSchemaValue<JointMotion_t>(m_ptr, "CGenericConstraint", "m_nAngularMotionY");
}

void GCGenericConstraint::SetAngularMotionY(JointMotion_t value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_nAngularMotionY", false, value);
}

JointMotion_t GCGenericConstraint::GetAngularMotionZ() const {
    return GetSchemaValue<JointMotion_t>(m_ptr, "CGenericConstraint", "m_nAngularMotionZ");
}

void GCGenericConstraint::SetAngularMotionZ(JointMotion_t value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_nAngularMotionZ", false, value);
}

float GCGenericConstraint::GetAngularFrequencyX() const {
    return GetSchemaValue<float>(m_ptr, "CGenericConstraint", "m_flAngularFrequencyX");
}

void GCGenericConstraint::SetAngularFrequencyX(float value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_flAngularFrequencyX", false, value);
}

float GCGenericConstraint::GetAngularFrequencyY() const {
    return GetSchemaValue<float>(m_ptr, "CGenericConstraint", "m_flAngularFrequencyY");
}

void GCGenericConstraint::SetAngularFrequencyY(float value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_flAngularFrequencyY", false, value);
}

float GCGenericConstraint::GetAngularFrequencyZ() const {
    return GetSchemaValue<float>(m_ptr, "CGenericConstraint", "m_flAngularFrequencyZ");
}

void GCGenericConstraint::SetAngularFrequencyZ(float value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_flAngularFrequencyZ", false, value);
}

float GCGenericConstraint::GetAngularDampingRatioX() const {
    return GetSchemaValue<float>(m_ptr, "CGenericConstraint", "m_flAngularDampingRatioX");
}

void GCGenericConstraint::SetAngularDampingRatioX(float value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_flAngularDampingRatioX", false, value);
}

float GCGenericConstraint::GetAngularDampingRatioY() const {
    return GetSchemaValue<float>(m_ptr, "CGenericConstraint", "m_flAngularDampingRatioY");
}

void GCGenericConstraint::SetAngularDampingRatioY(float value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_flAngularDampingRatioY", false, value);
}

float GCGenericConstraint::GetAngularDampingRatioZ() const {
    return GetSchemaValue<float>(m_ptr, "CGenericConstraint", "m_flAngularDampingRatioZ");
}

void GCGenericConstraint::SetAngularDampingRatioZ(float value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_flAngularDampingRatioZ", false, value);
}

float GCGenericConstraint::GetMaxAngularImpulseX() const {
    return GetSchemaValue<float>(m_ptr, "CGenericConstraint", "m_flMaxAngularImpulseX");
}

void GCGenericConstraint::SetMaxAngularImpulseX(float value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_flMaxAngularImpulseX", false, value);
}

float GCGenericConstraint::GetMaxAngularImpulseY() const {
    return GetSchemaValue<float>(m_ptr, "CGenericConstraint", "m_flMaxAngularImpulseY");
}

void GCGenericConstraint::SetMaxAngularImpulseY(float value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_flMaxAngularImpulseY", false, value);
}

float GCGenericConstraint::GetMaxAngularImpulseZ() const {
    return GetSchemaValue<float>(m_ptr, "CGenericConstraint", "m_flMaxAngularImpulseZ");
}

void GCGenericConstraint::SetMaxAngularImpulseZ(float value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_flMaxAngularImpulseZ", false, value);
}

GCEntityIOOutput GCGenericConstraint::GetNotifyForceReachedX() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CGenericConstraint", "m_NotifyForceReachedX");
}

void GCGenericConstraint::SetNotifyForceReachedX(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_NotifyForceReachedX", false, value);
}

GCEntityIOOutput GCGenericConstraint::GetNotifyForceReachedY() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CGenericConstraint", "m_NotifyForceReachedY");
}

void GCGenericConstraint::SetNotifyForceReachedY(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_NotifyForceReachedY", false, value);
}

GCEntityIOOutput GCGenericConstraint::GetNotifyForceReachedZ() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CGenericConstraint", "m_NotifyForceReachedZ");
}

void GCGenericConstraint::SetNotifyForceReachedZ(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CGenericConstraint", "m_NotifyForceReachedZ", false, value);
}

std::string GCGenericConstraint::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCGenericConstraint::IsValid() {
    return (m_ptr != nullptr);
}

GCDecoyGrenade::GCDecoyGrenade(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCDecoyGrenade::GCDecoyGrenade(void *ptr) {
    m_ptr = ptr;
}

std::string GCDecoyGrenade::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCDecoyGrenade::IsValid() {
    return (m_ptr != nullptr);
}

GCWeaponG3SG1::GCWeaponG3SG1(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWeaponG3SG1::GCWeaponG3SG1(void *ptr) {
    m_ptr = ptr;
}

std::string GCWeaponG3SG1::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWeaponG3SG1::IsValid() {
    return (m_ptr != nullptr);
}

GCItemDefuser::GCItemDefuser(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCItemDefuser::GCItemDefuser(void *ptr) {
    m_ptr = ptr;
}

GEntitySpottedState_t GCItemDefuser::GetEntitySpottedState() const {
    return GetSchemaValue<GEntitySpottedState_t>(m_ptr, "CItemDefuser", "m_entitySpottedState");
}

void GCItemDefuser::SetEntitySpottedState(GEntitySpottedState_t value) {
    SetSchemaValue(m_ptr, "CItemDefuser", "m_entitySpottedState", false, value);
}

int32_t GCItemDefuser::GetSpotRules() const {
    return GetSchemaValue<int32_t>(m_ptr, "CItemDefuser", "m_nSpotRules");
}

void GCItemDefuser::SetSpotRules(int32_t value) {
    SetSchemaValue(m_ptr, "CItemDefuser", "m_nSpotRules", false, value);
}

std::string GCItemDefuser::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCItemDefuser::IsValid() {
    return (m_ptr != nullptr);
}

GCConstantForceController::GCConstantForceController(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCConstantForceController::GCConstantForceController(void *ptr) {
    m_ptr = ptr;
}

Vector GCConstantForceController::GetLinear() const {
    return GetSchemaValue<Vector>(m_ptr, "CConstantForceController", "m_linear");
}

void GCConstantForceController::SetLinear(Vector value) {
    SetSchemaValue(m_ptr, "CConstantForceController", "m_linear", false, value);
}

Vector GCConstantForceController::GetAngular() const {
    return GetSchemaValue<Vector>(m_ptr, "CConstantForceController", "m_angular");
}

void GCConstantForceController::SetAngular(Vector value) {
    SetSchemaValue(m_ptr, "CConstantForceController", "m_angular", false, value);
}

Vector GCConstantForceController::GetLinearSave() const {
    return GetSchemaValue<Vector>(m_ptr, "CConstantForceController", "m_linearSave");
}

void GCConstantForceController::SetLinearSave(Vector value) {
    SetSchemaValue(m_ptr, "CConstantForceController", "m_linearSave", false, value);
}

Vector GCConstantForceController::GetAngularSave() const {
    return GetSchemaValue<Vector>(m_ptr, "CConstantForceController", "m_angularSave");
}

void GCConstantForceController::SetAngularSave(Vector value) {
    SetSchemaValue(m_ptr, "CConstantForceController", "m_angularSave", false, value);
}

std::string GCConstantForceController::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCConstantForceController::IsValid() {
    return (m_ptr != nullptr);
}

GCDEagle::GCDEagle(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCDEagle::GCDEagle(void *ptr) {
    m_ptr = ptr;
}

std::string GCDEagle::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCDEagle::IsValid() {
    return (m_ptr != nullptr);
}

GCRagdollProp::GCRagdollProp(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCRagdollProp::GCRagdollProp(void *ptr) {
    m_ptr = ptr;
}

Gragdoll_t GCRagdollProp::GetRagdoll() const {
    return GetSchemaValue<Gragdoll_t>(m_ptr, "CRagdollProp", "m_ragdoll");
}

void GCRagdollProp::SetRagdoll(Gragdoll_t value) {
    SetSchemaValue(m_ptr, "CRagdollProp", "m_ragdoll", false, value);
}

bool GCRagdollProp::GetStartDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CRagdollProp", "m_bStartDisabled");
}

void GCRagdollProp::SetStartDisabled(bool value) {
    SetSchemaValue(m_ptr, "CRagdollProp", "m_bStartDisabled", false, value);
}

std::vector<Vector> GCRagdollProp::GetRagPos() const {
    CUtlVector<Vector>* vec = GetSchemaValue<CUtlVector<Vector>*>(m_ptr, "CRagdollProp", "m_ragPos"); std::vector<Vector> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCRagdollProp::SetRagPos(std::vector<Vector> value) {
    SetSchemaValueCUtlVector<Vector>(m_ptr, "CRagdollProp", "m_ragPos", false, value);
}

std::vector<QAngle> GCRagdollProp::GetRagAngles() const {
    CUtlVector<QAngle>* vec = GetSchemaValue<CUtlVector<QAngle>*>(m_ptr, "CRagdollProp", "m_ragAngles"); std::vector<QAngle> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCRagdollProp::SetRagAngles(std::vector<QAngle> value) {
    SetSchemaValueCUtlVector<QAngle>(m_ptr, "CRagdollProp", "m_ragAngles", false, value);
}

GCBaseEntity GCRagdollProp::GetRagdollSource() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CRagdollProp", "m_hRagdollSource"));
    return value;
}

void GCRagdollProp::SetRagdollSource(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'RagdollSource' is not possible.\n");
}

uint32_t GCRagdollProp::GetLastUpdateTickCount() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CRagdollProp", "m_lastUpdateTickCount");
}

void GCRagdollProp::SetLastUpdateTickCount(uint32_t value) {
    SetSchemaValue(m_ptr, "CRagdollProp", "m_lastUpdateTickCount", false, value);
}

bool GCRagdollProp::GetAllAsleep() const {
    return GetSchemaValue<bool>(m_ptr, "CRagdollProp", "m_allAsleep");
}

void GCRagdollProp::SetAllAsleep(bool value) {
    SetSchemaValue(m_ptr, "CRagdollProp", "m_allAsleep", false, value);
}

bool GCRagdollProp::GetFirstCollisionAfterLaunch() const {
    return GetSchemaValue<bool>(m_ptr, "CRagdollProp", "m_bFirstCollisionAfterLaunch");
}

void GCRagdollProp::SetFirstCollisionAfterLaunch(bool value) {
    SetSchemaValue(m_ptr, "CRagdollProp", "m_bFirstCollisionAfterLaunch", false, value);
}

GCBaseEntity GCRagdollProp::GetDamageEntity() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CRagdollProp", "m_hDamageEntity"));
    return value;
}

void GCRagdollProp::SetDamageEntity(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'DamageEntity' is not possible.\n");
}

GCBaseEntity GCRagdollProp::GetKiller() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CRagdollProp", "m_hKiller"));
    return value;
}

void GCRagdollProp::SetKiller(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Killer' is not possible.\n");
}

GCBasePlayerPawn GCRagdollProp::GetPhysicsAttacker() const {
    GCBasePlayerPawn value(GetSchemaValuePtr<void>(m_ptr, "CRagdollProp", "m_hPhysicsAttacker"));
    return value;
}

void GCRagdollProp::SetPhysicsAttacker(GCBasePlayerPawn* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'PhysicsAttacker' is not possible.\n");
}

float GCRagdollProp::GetFadeTime() const {
    return GetSchemaValue<float>(m_ptr, "CRagdollProp", "m_flFadeTime");
}

void GCRagdollProp::SetFadeTime(float value) {
    SetSchemaValue(m_ptr, "CRagdollProp", "m_flFadeTime", false, value);
}

Vector GCRagdollProp::GetLastOrigin() const {
    return GetSchemaValue<Vector>(m_ptr, "CRagdollProp", "m_vecLastOrigin");
}

void GCRagdollProp::SetLastOrigin(Vector value) {
    SetSchemaValue(m_ptr, "CRagdollProp", "m_vecLastOrigin", false, value);
}

CUtlSymbolLarge GCRagdollProp::GetStrOriginClassName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CRagdollProp", "m_strOriginClassName");
}

void GCRagdollProp::SetStrOriginClassName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CRagdollProp", "m_strOriginClassName", false, value);
}

CUtlSymbolLarge GCRagdollProp::GetStrSourceClassName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CRagdollProp", "m_strSourceClassName");
}

void GCRagdollProp::SetStrSourceClassName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CRagdollProp", "m_strSourceClassName", false, value);
}

bool GCRagdollProp::GetHasBeenPhysgunned() const {
    return GetSchemaValue<bool>(m_ptr, "CRagdollProp", "m_bHasBeenPhysgunned");
}

void GCRagdollProp::SetHasBeenPhysgunned(bool value) {
    SetSchemaValue(m_ptr, "CRagdollProp", "m_bHasBeenPhysgunned", false, value);
}

bool GCRagdollProp::GetShouldTeleportPhysics() const {
    return GetSchemaValue<bool>(m_ptr, "CRagdollProp", "m_bShouldTeleportPhysics");
}

void GCRagdollProp::SetShouldTeleportPhysics(bool value) {
    SetSchemaValue(m_ptr, "CRagdollProp", "m_bShouldTeleportPhysics", false, value);
}

float GCRagdollProp::GetBlendWeight() const {
    return GetSchemaValue<float>(m_ptr, "CRagdollProp", "m_flBlendWeight");
}

void GCRagdollProp::SetBlendWeight(float value) {
    SetSchemaValue(m_ptr, "CRagdollProp", "m_flBlendWeight", false, value);
}

float GCRagdollProp::GetDefaultFadeScale() const {
    return GetSchemaValue<float>(m_ptr, "CRagdollProp", "m_flDefaultFadeScale");
}

void GCRagdollProp::SetDefaultFadeScale(float value) {
    SetSchemaValue(m_ptr, "CRagdollProp", "m_flDefaultFadeScale", false, value);
}

std::vector<Vector> GCRagdollProp::GetRagdollMins() const {
    CUtlVector<Vector>* vec = GetSchemaValue<CUtlVector<Vector>*>(m_ptr, "CRagdollProp", "m_ragdollMins"); std::vector<Vector> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCRagdollProp::SetRagdollMins(std::vector<Vector> value) {
    SetSchemaValueCUtlVector<Vector>(m_ptr, "CRagdollProp", "m_ragdollMins", false, value);
}

std::vector<Vector> GCRagdollProp::GetRagdollMaxs() const {
    CUtlVector<Vector>* vec = GetSchemaValue<CUtlVector<Vector>*>(m_ptr, "CRagdollProp", "m_ragdollMaxs"); std::vector<Vector> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCRagdollProp::SetRagdollMaxs(std::vector<Vector> value) {
    SetSchemaValueCUtlVector<Vector>(m_ptr, "CRagdollProp", "m_ragdollMaxs", false, value);
}

bool GCRagdollProp::GetShouldDeleteActivationRecord() const {
    return GetSchemaValue<bool>(m_ptr, "CRagdollProp", "m_bShouldDeleteActivationRecord");
}

void GCRagdollProp::SetShouldDeleteActivationRecord(bool value) {
    SetSchemaValue(m_ptr, "CRagdollProp", "m_bShouldDeleteActivationRecord", false, value);
}

bool GCRagdollProp::GetValidatePoweredRagdollPose() const {
    return GetSchemaValue<bool>(m_ptr, "CRagdollProp", "m_bValidatePoweredRagdollPose");
}

void GCRagdollProp::SetValidatePoweredRagdollPose(bool value) {
    SetSchemaValue(m_ptr, "CRagdollProp", "m_bValidatePoweredRagdollPose", false, value);
}

std::string GCRagdollProp::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCRagdollProp::IsValid() {
    return (m_ptr != nullptr);
}

GCItemSoda::GCItemSoda(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCItemSoda::GCItemSoda(void *ptr) {
    m_ptr = ptr;
}

std::string GCItemSoda::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCItemSoda::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvCubemap::GCEnvCubemap(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvCubemap::GCEnvCubemap(void *ptr) {
    m_ptr = ptr;
}

bool GCEnvCubemap::GetEntity_bCustomCubemapTexture() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvCubemap", "m_Entity_bCustomCubemapTexture");
}

void GCEnvCubemap::SetEntity_bCustomCubemapTexture(bool value) {
    SetSchemaValue(m_ptr, "CEnvCubemap", "m_Entity_bCustomCubemapTexture", false, value);
}

float GCEnvCubemap::GetEntity_flInfluenceRadius() const {
    return GetSchemaValue<float>(m_ptr, "CEnvCubemap", "m_Entity_flInfluenceRadius");
}

void GCEnvCubemap::SetEntity_flInfluenceRadius(float value) {
    SetSchemaValue(m_ptr, "CEnvCubemap", "m_Entity_flInfluenceRadius", false, value);
}

Vector GCEnvCubemap::GetEntity_vBoxProjectMins() const {
    return GetSchemaValue<Vector>(m_ptr, "CEnvCubemap", "m_Entity_vBoxProjectMins");
}

void GCEnvCubemap::SetEntity_vBoxProjectMins(Vector value) {
    SetSchemaValue(m_ptr, "CEnvCubemap", "m_Entity_vBoxProjectMins", false, value);
}

Vector GCEnvCubemap::GetEntity_vBoxProjectMaxs() const {
    return GetSchemaValue<Vector>(m_ptr, "CEnvCubemap", "m_Entity_vBoxProjectMaxs");
}

void GCEnvCubemap::SetEntity_vBoxProjectMaxs(Vector value) {
    SetSchemaValue(m_ptr, "CEnvCubemap", "m_Entity_vBoxProjectMaxs", false, value);
}

bool GCEnvCubemap::GetEntity_bMoveable() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvCubemap", "m_Entity_bMoveable");
}

void GCEnvCubemap::SetEntity_bMoveable(bool value) {
    SetSchemaValue(m_ptr, "CEnvCubemap", "m_Entity_bMoveable", false, value);
}

int32_t GCEnvCubemap::GetEntity_nHandshake() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvCubemap", "m_Entity_nHandshake");
}

void GCEnvCubemap::SetEntity_nHandshake(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvCubemap", "m_Entity_nHandshake", false, value);
}

int32_t GCEnvCubemap::GetEntity_nEnvCubeMapArrayIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvCubemap", "m_Entity_nEnvCubeMapArrayIndex");
}

void GCEnvCubemap::SetEntity_nEnvCubeMapArrayIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvCubemap", "m_Entity_nEnvCubeMapArrayIndex", false, value);
}

int32_t GCEnvCubemap::GetEntity_nPriority() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvCubemap", "m_Entity_nPriority");
}

void GCEnvCubemap::SetEntity_nPriority(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvCubemap", "m_Entity_nPriority", false, value);
}

float GCEnvCubemap::GetEntity_flEdgeFadeDist() const {
    return GetSchemaValue<float>(m_ptr, "CEnvCubemap", "m_Entity_flEdgeFadeDist");
}

void GCEnvCubemap::SetEntity_flEdgeFadeDist(float value) {
    SetSchemaValue(m_ptr, "CEnvCubemap", "m_Entity_flEdgeFadeDist", false, value);
}

Vector GCEnvCubemap::GetEntity_vEdgeFadeDists() const {
    return GetSchemaValue<Vector>(m_ptr, "CEnvCubemap", "m_Entity_vEdgeFadeDists");
}

void GCEnvCubemap::SetEntity_vEdgeFadeDists(Vector value) {
    SetSchemaValue(m_ptr, "CEnvCubemap", "m_Entity_vEdgeFadeDists", false, value);
}

float GCEnvCubemap::GetEntity_flDiffuseScale() const {
    return GetSchemaValue<float>(m_ptr, "CEnvCubemap", "m_Entity_flDiffuseScale");
}

void GCEnvCubemap::SetEntity_flDiffuseScale(float value) {
    SetSchemaValue(m_ptr, "CEnvCubemap", "m_Entity_flDiffuseScale", false, value);
}

bool GCEnvCubemap::GetEntity_bStartDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvCubemap", "m_Entity_bStartDisabled");
}

void GCEnvCubemap::SetEntity_bStartDisabled(bool value) {
    SetSchemaValue(m_ptr, "CEnvCubemap", "m_Entity_bStartDisabled", false, value);
}

bool GCEnvCubemap::GetEntity_bDefaultEnvMap() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvCubemap", "m_Entity_bDefaultEnvMap");
}

void GCEnvCubemap::SetEntity_bDefaultEnvMap(bool value) {
    SetSchemaValue(m_ptr, "CEnvCubemap", "m_Entity_bDefaultEnvMap", false, value);
}

bool GCEnvCubemap::GetEntity_bDefaultSpecEnvMap() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvCubemap", "m_Entity_bDefaultSpecEnvMap");
}

void GCEnvCubemap::SetEntity_bDefaultSpecEnvMap(bool value) {
    SetSchemaValue(m_ptr, "CEnvCubemap", "m_Entity_bDefaultSpecEnvMap", false, value);
}

bool GCEnvCubemap::GetEntity_bIndoorCubeMap() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvCubemap", "m_Entity_bIndoorCubeMap");
}

void GCEnvCubemap::SetEntity_bIndoorCubeMap(bool value) {
    SetSchemaValue(m_ptr, "CEnvCubemap", "m_Entity_bIndoorCubeMap", false, value);
}

bool GCEnvCubemap::GetEntity_bCopyDiffuseFromDefaultCubemap() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvCubemap", "m_Entity_bCopyDiffuseFromDefaultCubemap");
}

void GCEnvCubemap::SetEntity_bCopyDiffuseFromDefaultCubemap(bool value) {
    SetSchemaValue(m_ptr, "CEnvCubemap", "m_Entity_bCopyDiffuseFromDefaultCubemap", false, value);
}

bool GCEnvCubemap::GetEntity_bEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvCubemap", "m_Entity_bEnabled");
}

void GCEnvCubemap::SetEntity_bEnabled(bool value) {
    SetSchemaValue(m_ptr, "CEnvCubemap", "m_Entity_bEnabled", false, value);
}

std::string GCEnvCubemap::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvCubemap::IsValid() {
    return (m_ptr != nullptr);
}

GCBasePlayerControllerAPI::GCBasePlayerControllerAPI(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBasePlayerControllerAPI::GCBasePlayerControllerAPI(void *ptr) {
    m_ptr = ptr;
}

std::string GCBasePlayerControllerAPI::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBasePlayerControllerAPI::IsValid() {
    return (m_ptr != nullptr);
}

GCCSPointScriptExtensions_CCSWeaponBaseVData::GCCSPointScriptExtensions_CCSWeaponBaseVData(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSPointScriptExtensions_CCSWeaponBaseVData::GCCSPointScriptExtensions_CCSWeaponBaseVData(void *ptr) {
    m_ptr = ptr;
}

std::string GCCSPointScriptExtensions_CCSWeaponBaseVData::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSPointScriptExtensions_CCSWeaponBaseVData::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvDetailController::GCEnvDetailController(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvDetailController::GCEnvDetailController(void *ptr) {
    m_ptr = ptr;
}

float GCEnvDetailController::GetFadeStartDist() const {
    return GetSchemaValue<float>(m_ptr, "CEnvDetailController", "m_flFadeStartDist");
}

void GCEnvDetailController::SetFadeStartDist(float value) {
    SetSchemaValue(m_ptr, "CEnvDetailController", "m_flFadeStartDist", false, value);
}

float GCEnvDetailController::GetFadeEndDist() const {
    return GetSchemaValue<float>(m_ptr, "CEnvDetailController", "m_flFadeEndDist");
}

void GCEnvDetailController::SetFadeEndDist(float value) {
    SetSchemaValue(m_ptr, "CEnvDetailController", "m_flFadeEndDist", false, value);
}

std::string GCEnvDetailController::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvDetailController::IsValid() {
    return (m_ptr != nullptr);
}

GCTriggerOnce::GCTriggerOnce(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTriggerOnce::GCTriggerOnce(void *ptr) {
    m_ptr = ptr;
}

std::string GCTriggerOnce::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTriggerOnce::IsValid() {
    return (m_ptr != nullptr);
}

GCInfoTeleportDestination::GCInfoTeleportDestination(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCInfoTeleportDestination::GCInfoTeleportDestination(void *ptr) {
    m_ptr = ptr;
}

std::string GCInfoTeleportDestination::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCInfoTeleportDestination::IsValid() {
    return (m_ptr != nullptr);
}

GCMathRemap::GCMathRemap(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMathRemap::GCMathRemap(void *ptr) {
    m_ptr = ptr;
}

float GCMathRemap::GetInMin() const {
    return GetSchemaValue<float>(m_ptr, "CMathRemap", "m_flInMin");
}

void GCMathRemap::SetInMin(float value) {
    SetSchemaValue(m_ptr, "CMathRemap", "m_flInMin", false, value);
}

float GCMathRemap::GetInMax() const {
    return GetSchemaValue<float>(m_ptr, "CMathRemap", "m_flInMax");
}

void GCMathRemap::SetInMax(float value) {
    SetSchemaValue(m_ptr, "CMathRemap", "m_flInMax", false, value);
}

float GCMathRemap::GetOut1() const {
    return GetSchemaValue<float>(m_ptr, "CMathRemap", "m_flOut1");
}

void GCMathRemap::SetOut1(float value) {
    SetSchemaValue(m_ptr, "CMathRemap", "m_flOut1", false, value);
}

float GCMathRemap::GetOut2() const {
    return GetSchemaValue<float>(m_ptr, "CMathRemap", "m_flOut2");
}

void GCMathRemap::SetOut2(float value) {
    SetSchemaValue(m_ptr, "CMathRemap", "m_flOut2", false, value);
}

float GCMathRemap::GetOldInValue() const {
    return GetSchemaValue<float>(m_ptr, "CMathRemap", "m_flOldInValue");
}

void GCMathRemap::SetOldInValue(float value) {
    SetSchemaValue(m_ptr, "CMathRemap", "m_flOldInValue", false, value);
}

bool GCMathRemap::GetEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CMathRemap", "m_bEnabled");
}

void GCMathRemap::SetEnabled(bool value) {
    SetSchemaValue(m_ptr, "CMathRemap", "m_bEnabled", false, value);
}

GCEntityIOOutput GCMathRemap::GetOnRoseAboveMin() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CMathRemap", "m_OnRoseAboveMin");
}

void GCMathRemap::SetOnRoseAboveMin(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CMathRemap", "m_OnRoseAboveMin", false, value);
}

GCEntityIOOutput GCMathRemap::GetOnRoseAboveMax() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CMathRemap", "m_OnRoseAboveMax");
}

void GCMathRemap::SetOnRoseAboveMax(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CMathRemap", "m_OnRoseAboveMax", false, value);
}

GCEntityIOOutput GCMathRemap::GetOnFellBelowMin() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CMathRemap", "m_OnFellBelowMin");
}

void GCMathRemap::SetOnFellBelowMin(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CMathRemap", "m_OnFellBelowMin", false, value);
}

GCEntityIOOutput GCMathRemap::GetOnFellBelowMax() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CMathRemap", "m_OnFellBelowMax");
}

void GCMathRemap::SetOnFellBelowMax(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CMathRemap", "m_OnFellBelowMax", false, value);
}

std::string GCMathRemap::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMathRemap::IsValid() {
    return (m_ptr != nullptr);
}

GCInstructorEventEntity::GCInstructorEventEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCInstructorEventEntity::GCInstructorEventEntity(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCInstructorEventEntity::GetName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CInstructorEventEntity", "m_iszName");
}

void GCInstructorEventEntity::SetName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CInstructorEventEntity", "m_iszName", false, value);
}

CUtlSymbolLarge GCInstructorEventEntity::GetHintTargetEntity() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CInstructorEventEntity", "m_iszHintTargetEntity");
}

void GCInstructorEventEntity::SetHintTargetEntity(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CInstructorEventEntity", "m_iszHintTargetEntity", false, value);
}

GCBasePlayerPawn GCInstructorEventEntity::GetTargetPlayer() const {
    GCBasePlayerPawn value(GetSchemaValuePtr<void>(m_ptr, "CInstructorEventEntity", "m_hTargetPlayer"));
    return value;
}

void GCInstructorEventEntity::SetTargetPlayer(GCBasePlayerPawn* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'TargetPlayer' is not possible.\n");
}

std::string GCInstructorEventEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCInstructorEventEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCGradientFog::GCGradientFog(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCGradientFog::GCGradientFog(void *ptr) {
    m_ptr = ptr;
}

float GCGradientFog::GetFogStartDistance() const {
    return GetSchemaValue<float>(m_ptr, "CGradientFog", "m_flFogStartDistance");
}

void GCGradientFog::SetFogStartDistance(float value) {
    SetSchemaValue(m_ptr, "CGradientFog", "m_flFogStartDistance", false, value);
}

float GCGradientFog::GetFogEndDistance() const {
    return GetSchemaValue<float>(m_ptr, "CGradientFog", "m_flFogEndDistance");
}

void GCGradientFog::SetFogEndDistance(float value) {
    SetSchemaValue(m_ptr, "CGradientFog", "m_flFogEndDistance", false, value);
}

bool GCGradientFog::GetHeightFogEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CGradientFog", "m_bHeightFogEnabled");
}

void GCGradientFog::SetHeightFogEnabled(bool value) {
    SetSchemaValue(m_ptr, "CGradientFog", "m_bHeightFogEnabled", false, value);
}

float GCGradientFog::GetFogStartHeight() const {
    return GetSchemaValue<float>(m_ptr, "CGradientFog", "m_flFogStartHeight");
}

void GCGradientFog::SetFogStartHeight(float value) {
    SetSchemaValue(m_ptr, "CGradientFog", "m_flFogStartHeight", false, value);
}

float GCGradientFog::GetFogEndHeight() const {
    return GetSchemaValue<float>(m_ptr, "CGradientFog", "m_flFogEndHeight");
}

void GCGradientFog::SetFogEndHeight(float value) {
    SetSchemaValue(m_ptr, "CGradientFog", "m_flFogEndHeight", false, value);
}

float GCGradientFog::GetFarZ() const {
    return GetSchemaValue<float>(m_ptr, "CGradientFog", "m_flFarZ");
}

void GCGradientFog::SetFarZ(float value) {
    SetSchemaValue(m_ptr, "CGradientFog", "m_flFarZ", false, value);
}

float GCGradientFog::GetFogMaxOpacity() const {
    return GetSchemaValue<float>(m_ptr, "CGradientFog", "m_flFogMaxOpacity");
}

void GCGradientFog::SetFogMaxOpacity(float value) {
    SetSchemaValue(m_ptr, "CGradientFog", "m_flFogMaxOpacity", false, value);
}

float GCGradientFog::GetFogFalloffExponent() const {
    return GetSchemaValue<float>(m_ptr, "CGradientFog", "m_flFogFalloffExponent");
}

void GCGradientFog::SetFogFalloffExponent(float value) {
    SetSchemaValue(m_ptr, "CGradientFog", "m_flFogFalloffExponent", false, value);
}

float GCGradientFog::GetFogVerticalExponent() const {
    return GetSchemaValue<float>(m_ptr, "CGradientFog", "m_flFogVerticalExponent");
}

void GCGradientFog::SetFogVerticalExponent(float value) {
    SetSchemaValue(m_ptr, "CGradientFog", "m_flFogVerticalExponent", false, value);
}

Color GCGradientFog::GetFogColor() const {
    return GetSchemaValue<Color>(m_ptr, "CGradientFog", "m_fogColor");
}

void GCGradientFog::SetFogColor(Color value) {
    SetSchemaValue(m_ptr, "CGradientFog", "m_fogColor", false, value);
}

float GCGradientFog::GetFogStrength() const {
    return GetSchemaValue<float>(m_ptr, "CGradientFog", "m_flFogStrength");
}

void GCGradientFog::SetFogStrength(float value) {
    SetSchemaValue(m_ptr, "CGradientFog", "m_flFogStrength", false, value);
}

float GCGradientFog::GetFadeTime() const {
    return GetSchemaValue<float>(m_ptr, "CGradientFog", "m_flFadeTime");
}

void GCGradientFog::SetFadeTime(float value) {
    SetSchemaValue(m_ptr, "CGradientFog", "m_flFadeTime", false, value);
}

bool GCGradientFog::GetStartDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CGradientFog", "m_bStartDisabled");
}

void GCGradientFog::SetStartDisabled(bool value) {
    SetSchemaValue(m_ptr, "CGradientFog", "m_bStartDisabled", false, value);
}

bool GCGradientFog::GetIsEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CGradientFog", "m_bIsEnabled");
}

void GCGradientFog::SetIsEnabled(bool value) {
    SetSchemaValue(m_ptr, "CGradientFog", "m_bIsEnabled", false, value);
}

bool GCGradientFog::GetGradientFogNeedsTextures() const {
    return GetSchemaValue<bool>(m_ptr, "CGradientFog", "m_bGradientFogNeedsTextures");
}

void GCGradientFog::SetGradientFogNeedsTextures(bool value) {
    SetSchemaValue(m_ptr, "CGradientFog", "m_bGradientFogNeedsTextures", false, value);
}

std::string GCGradientFog::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCGradientFog::IsValid() {
    return (m_ptr != nullptr);
}

GCFootstepControl::GCFootstepControl(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFootstepControl::GCFootstepControl(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCFootstepControl::GetSource() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFootstepControl", "m_source");
}

void GCFootstepControl::SetSource(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFootstepControl", "m_source", false, value);
}

CUtlSymbolLarge GCFootstepControl::GetDestination() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFootstepControl", "m_destination");
}

void GCFootstepControl::SetDestination(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFootstepControl", "m_destination", false, value);
}

std::string GCFootstepControl::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFootstepControl::IsValid() {
    return (m_ptr != nullptr);
}

GCTriggerVolume::GCTriggerVolume(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTriggerVolume::GCTriggerVolume(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCTriggerVolume::GetFilterName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CTriggerVolume", "m_iFilterName");
}

void GCTriggerVolume::SetFilterName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CTriggerVolume", "m_iFilterName", false, value);
}

GCBaseFilter GCTriggerVolume::GetFilter() const {
    GCBaseFilter value(GetSchemaValuePtr<void>(m_ptr, "CTriggerVolume", "m_hFilter"));
    return value;
}

void GCTriggerVolume::SetFilter(GCBaseFilter* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Filter' is not possible.\n");
}

std::string GCTriggerVolume::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTriggerVolume::IsValid() {
    return (m_ptr != nullptr);
}

GCInfoInstructorHintHostageRescueZone::GCInfoInstructorHintHostageRescueZone(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCInfoInstructorHintHostageRescueZone::GCInfoInstructorHintHostageRescueZone(void *ptr) {
    m_ptr = ptr;
}

std::string GCInfoInstructorHintHostageRescueZone::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCInfoInstructorHintHostageRescueZone::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvSoundscapeAlias_snd_soundscape::GCEnvSoundscapeAlias_snd_soundscape(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvSoundscapeAlias_snd_soundscape::GCEnvSoundscapeAlias_snd_soundscape(void *ptr) {
    m_ptr = ptr;
}

std::string GCEnvSoundscapeAlias_snd_soundscape::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvSoundscapeAlias_snd_soundscape::IsValid() {
    return (m_ptr != nullptr);
}

GCFishPool::GCFishPool(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFishPool::GCFishPool(void *ptr) {
    m_ptr = ptr;
}

int32_t GCFishPool::GetFishCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CFishPool", "m_fishCount");
}

void GCFishPool::SetFishCount(int32_t value) {
    SetSchemaValue(m_ptr, "CFishPool", "m_fishCount", false, value);
}

float GCFishPool::GetMaxRange() const {
    return GetSchemaValue<float>(m_ptr, "CFishPool", "m_maxRange");
}

void GCFishPool::SetMaxRange(float value) {
    SetSchemaValue(m_ptr, "CFishPool", "m_maxRange", false, value);
}

float GCFishPool::GetSwimDepth() const {
    return GetSchemaValue<float>(m_ptr, "CFishPool", "m_swimDepth");
}

void GCFishPool::SetSwimDepth(float value) {
    SetSchemaValue(m_ptr, "CFishPool", "m_swimDepth", false, value);
}

float GCFishPool::GetWaterLevel() const {
    return GetSchemaValue<float>(m_ptr, "CFishPool", "m_waterLevel");
}

void GCFishPool::SetWaterLevel(float value) {
    SetSchemaValue(m_ptr, "CFishPool", "m_waterLevel", false, value);
}

bool GCFishPool::GetIsDormant() const {
    return GetSchemaValue<bool>(m_ptr, "CFishPool", "m_isDormant");
}

void GCFishPool::SetIsDormant(bool value) {
    SetSchemaValue(m_ptr, "CFishPool", "m_isDormant", false, value);
}

GCountdownTimer GCFishPool::GetVisTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CFishPool", "m_visTimer");
}

void GCFishPool::SetVisTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CFishPool", "m_visTimer", false, value);
}

std::string GCFishPool::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFishPool::IsValid() {
    return (m_ptr != nullptr);
}

GCPointClientCommand::GCPointClientCommand(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPointClientCommand::GCPointClientCommand(void *ptr) {
    m_ptr = ptr;
}

std::string GCPointClientCommand::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPointClientCommand::IsValid() {
    return (m_ptr != nullptr);
}

GCFuncVPhysicsClip::GCFuncVPhysicsClip(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFuncVPhysicsClip::GCFuncVPhysicsClip(void *ptr) {
    m_ptr = ptr;
}

bool GCFuncVPhysicsClip::GetDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CFuncVPhysicsClip", "m_bDisabled");
}

void GCFuncVPhysicsClip::SetDisabled(bool value) {
    SetSchemaValue(m_ptr, "CFuncVPhysicsClip", "m_bDisabled", false, value);
}

std::string GCFuncVPhysicsClip::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFuncVPhysicsClip::IsValid() {
    return (m_ptr != nullptr);
}

GCCSPlayer_RadioServices::GCCSPlayer_RadioServices(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSPlayer_RadioServices::GCCSPlayer_RadioServices(void *ptr) {
    m_ptr = ptr;
}

bool GCCSPlayer_RadioServices::GetIgnoreRadio() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_RadioServices", "m_bIgnoreRadio");
}

void GCCSPlayer_RadioServices::SetIgnoreRadio(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayer_RadioServices", "m_bIgnoreRadio", false, value);
}

std::string GCCSPlayer_RadioServices::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSPlayer_RadioServices::IsValid() {
    return (m_ptr != nullptr);
}

GCSceneEntity::GCSceneEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSceneEntity::GCSceneEntity(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCSceneEntity::GetSceneFile() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSceneEntity", "m_iszSceneFile");
}

void GCSceneEntity::SetSceneFile(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_iszSceneFile", false, value);
}

CUtlSymbolLarge GCSceneEntity::GetResumeSceneFile() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSceneEntity", "m_iszResumeSceneFile");
}

void GCSceneEntity::SetResumeSceneFile(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_iszResumeSceneFile", false, value);
}

CUtlSymbolLarge GCSceneEntity::GetTarget1() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSceneEntity", "m_iszTarget1");
}

void GCSceneEntity::SetTarget1(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_iszTarget1", false, value);
}

CUtlSymbolLarge GCSceneEntity::GetTarget2() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSceneEntity", "m_iszTarget2");
}

void GCSceneEntity::SetTarget2(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_iszTarget2", false, value);
}

CUtlSymbolLarge GCSceneEntity::GetTarget3() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSceneEntity", "m_iszTarget3");
}

void GCSceneEntity::SetTarget3(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_iszTarget3", false, value);
}

CUtlSymbolLarge GCSceneEntity::GetTarget4() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSceneEntity", "m_iszTarget4");
}

void GCSceneEntity::SetTarget4(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_iszTarget4", false, value);
}

CUtlSymbolLarge GCSceneEntity::GetTarget5() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSceneEntity", "m_iszTarget5");
}

void GCSceneEntity::SetTarget5(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_iszTarget5", false, value);
}

CUtlSymbolLarge GCSceneEntity::GetTarget6() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSceneEntity", "m_iszTarget6");
}

void GCSceneEntity::SetTarget6(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_iszTarget6", false, value);
}

CUtlSymbolLarge GCSceneEntity::GetTarget7() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSceneEntity", "m_iszTarget7");
}

void GCSceneEntity::SetTarget7(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_iszTarget7", false, value);
}

CUtlSymbolLarge GCSceneEntity::GetTarget8() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSceneEntity", "m_iszTarget8");
}

void GCSceneEntity::SetTarget8(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_iszTarget8", false, value);
}

GCBaseEntity GCSceneEntity::GetTarget11() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CSceneEntity", "m_hTarget1"));
    return value;
}

void GCSceneEntity::SetTarget11(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Target11' is not possible.\n");
}

GCBaseEntity GCSceneEntity::GetTarget21() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CSceneEntity", "m_hTarget2"));
    return value;
}

void GCSceneEntity::SetTarget21(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Target21' is not possible.\n");
}

GCBaseEntity GCSceneEntity::GetTarget31() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CSceneEntity", "m_hTarget3"));
    return value;
}

void GCSceneEntity::SetTarget31(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Target31' is not possible.\n");
}

GCBaseEntity GCSceneEntity::GetTarget41() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CSceneEntity", "m_hTarget4"));
    return value;
}

void GCSceneEntity::SetTarget41(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Target41' is not possible.\n");
}

GCBaseEntity GCSceneEntity::GetTarget51() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CSceneEntity", "m_hTarget5"));
    return value;
}

void GCSceneEntity::SetTarget51(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Target51' is not possible.\n");
}

GCBaseEntity GCSceneEntity::GetTarget61() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CSceneEntity", "m_hTarget6"));
    return value;
}

void GCSceneEntity::SetTarget61(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Target61' is not possible.\n");
}

GCBaseEntity GCSceneEntity::GetTarget71() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CSceneEntity", "m_hTarget7"));
    return value;
}

void GCSceneEntity::SetTarget71(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Target71' is not possible.\n");
}

GCBaseEntity GCSceneEntity::GetTarget81() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CSceneEntity", "m_hTarget8"));
    return value;
}

void GCSceneEntity::SetTarget81(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Target81' is not possible.\n");
}

CUtlSymbolLarge GCSceneEntity::GetTargetAttachment() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSceneEntity", "m_sTargetAttachment");
}

void GCSceneEntity::SetTargetAttachment(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_sTargetAttachment", false, value);
}

bool GCSceneEntity::GetIsPlayingBack() const {
    return GetSchemaValue<bool>(m_ptr, "CSceneEntity", "m_bIsPlayingBack");
}

void GCSceneEntity::SetIsPlayingBack(bool value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_bIsPlayingBack", false, value);
}

bool GCSceneEntity::GetPaused() const {
    return GetSchemaValue<bool>(m_ptr, "CSceneEntity", "m_bPaused");
}

void GCSceneEntity::SetPaused(bool value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_bPaused", false, value);
}

bool GCSceneEntity::GetMultiplayer() const {
    return GetSchemaValue<bool>(m_ptr, "CSceneEntity", "m_bMultiplayer");
}

void GCSceneEntity::SetMultiplayer(bool value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_bMultiplayer", false, value);
}

bool GCSceneEntity::GetAutogenerated() const {
    return GetSchemaValue<bool>(m_ptr, "CSceneEntity", "m_bAutogenerated");
}

void GCSceneEntity::SetAutogenerated(bool value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_bAutogenerated", false, value);
}

float GCSceneEntity::GetForceClientTime() const {
    return GetSchemaValue<float>(m_ptr, "CSceneEntity", "m_flForceClientTime");
}

void GCSceneEntity::SetForceClientTime(float value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_flForceClientTime", false, value);
}

float GCSceneEntity::GetCurrentTime() const {
    return GetSchemaValue<float>(m_ptr, "CSceneEntity", "m_flCurrentTime");
}

void GCSceneEntity::SetCurrentTime(float value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_flCurrentTime", false, value);
}

float GCSceneEntity::GetFrameTime() const {
    return GetSchemaValue<float>(m_ptr, "CSceneEntity", "m_flFrameTime");
}

void GCSceneEntity::SetFrameTime(float value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_flFrameTime", false, value);
}

bool GCSceneEntity::GetCancelAtNextInterrupt() const {
    return GetSchemaValue<bool>(m_ptr, "CSceneEntity", "m_bCancelAtNextInterrupt");
}

void GCSceneEntity::SetCancelAtNextInterrupt(bool value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_bCancelAtNextInterrupt", false, value);
}

float GCSceneEntity::GetPitch() const {
    return GetSchemaValue<float>(m_ptr, "CSceneEntity", "m_fPitch");
}

void GCSceneEntity::SetPitch(float value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_fPitch", false, value);
}

bool GCSceneEntity::GetAutomated() const {
    return GetSchemaValue<bool>(m_ptr, "CSceneEntity", "m_bAutomated");
}

void GCSceneEntity::SetAutomated(bool value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_bAutomated", false, value);
}

int32_t GCSceneEntity::GetAutomatedAction() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSceneEntity", "m_nAutomatedAction");
}

void GCSceneEntity::SetAutomatedAction(int32_t value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_nAutomatedAction", false, value);
}

float GCSceneEntity::GetAutomationDelay() const {
    return GetSchemaValue<float>(m_ptr, "CSceneEntity", "m_flAutomationDelay");
}

void GCSceneEntity::SetAutomationDelay(float value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_flAutomationDelay", false, value);
}

float GCSceneEntity::GetAutomationTime() const {
    return GetSchemaValue<float>(m_ptr, "CSceneEntity", "m_flAutomationTime");
}

void GCSceneEntity::SetAutomationTime(float value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_flAutomationTime", false, value);
}

GCBaseEntity GCSceneEntity::GetWaitingForThisResumeScene() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CSceneEntity", "m_hWaitingForThisResumeScene"));
    return value;
}

void GCSceneEntity::SetWaitingForThisResumeScene(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'WaitingForThisResumeScene' is not possible.\n");
}

bool GCSceneEntity::GetWaitingForResumeScene() const {
    return GetSchemaValue<bool>(m_ptr, "CSceneEntity", "m_bWaitingForResumeScene");
}

void GCSceneEntity::SetWaitingForResumeScene(bool value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_bWaitingForResumeScene", false, value);
}

bool GCSceneEntity::GetPausedViaInput() const {
    return GetSchemaValue<bool>(m_ptr, "CSceneEntity", "m_bPausedViaInput");
}

void GCSceneEntity::SetPausedViaInput(bool value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_bPausedViaInput", false, value);
}

bool GCSceneEntity::GetPauseAtNextInterrupt() const {
    return GetSchemaValue<bool>(m_ptr, "CSceneEntity", "m_bPauseAtNextInterrupt");
}

void GCSceneEntity::SetPauseAtNextInterrupt(bool value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_bPauseAtNextInterrupt", false, value);
}

bool GCSceneEntity::GetWaitingForActor() const {
    return GetSchemaValue<bool>(m_ptr, "CSceneEntity", "m_bWaitingForActor");
}

void GCSceneEntity::SetWaitingForActor(bool value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_bWaitingForActor", false, value);
}

bool GCSceneEntity::GetWaitingForInterrupt() const {
    return GetSchemaValue<bool>(m_ptr, "CSceneEntity", "m_bWaitingForInterrupt");
}

void GCSceneEntity::SetWaitingForInterrupt(bool value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_bWaitingForInterrupt", false, value);
}

bool GCSceneEntity::GetInterruptedActorsScenes() const {
    return GetSchemaValue<bool>(m_ptr, "CSceneEntity", "m_bInterruptedActorsScenes");
}

void GCSceneEntity::SetInterruptedActorsScenes(bool value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_bInterruptedActorsScenes", false, value);
}

bool GCSceneEntity::GetBreakOnNonIdle() const {
    return GetSchemaValue<bool>(m_ptr, "CSceneEntity", "m_bBreakOnNonIdle");
}

void GCSceneEntity::SetBreakOnNonIdle(bool value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_bBreakOnNonIdle", false, value);
}

bool GCSceneEntity::GetSceneFinished() const {
    return GetSchemaValue<bool>(m_ptr, "CSceneEntity", "m_bSceneFinished");
}

void GCSceneEntity::SetSceneFinished(bool value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_bSceneFinished", false, value);
}

std::vector<GCBaseFlex*> GCSceneEntity::GetActorList() const {
    CUtlVector<GCBaseFlex*>* vec = GetSchemaValue<CUtlVector<GCBaseFlex*>*>(m_ptr, "CSceneEntity", "m_hActorList"); std::vector<GCBaseFlex*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSceneEntity::SetActorList(std::vector<GCBaseFlex*> value) {
    SetSchemaValueCUtlVector<GCBaseFlex*>(m_ptr, "CSceneEntity", "m_hActorList", false, value);
}

int32_t GCSceneEntity::GetSceneFlushCounter() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSceneEntity", "m_nSceneFlushCounter");
}

void GCSceneEntity::SetSceneFlushCounter(int32_t value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_nSceneFlushCounter", false, value);
}

uint16_t GCSceneEntity::GetSceneStringIndex() const {
    return GetSchemaValue<uint16_t>(m_ptr, "CSceneEntity", "m_nSceneStringIndex");
}

void GCSceneEntity::SetSceneStringIndex(uint16_t value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_nSceneStringIndex", false, value);
}

GCEntityIOOutput GCSceneEntity::GetOnStart() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CSceneEntity", "m_OnStart");
}

void GCSceneEntity::SetOnStart(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_OnStart", false, value);
}

GCEntityIOOutput GCSceneEntity::GetOnCompletion() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CSceneEntity", "m_OnCompletion");
}

void GCSceneEntity::SetOnCompletion(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_OnCompletion", false, value);
}

GCEntityIOOutput GCSceneEntity::GetOnCanceled() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CSceneEntity", "m_OnCanceled");
}

void GCSceneEntity::SetOnCanceled(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_OnCanceled", false, value);
}

GCEntityIOOutput GCSceneEntity::GetOnPaused() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CSceneEntity", "m_OnPaused");
}

void GCSceneEntity::SetOnPaused(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_OnPaused", false, value);
}

GCEntityIOOutput GCSceneEntity::GetOnResumed() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CSceneEntity", "m_OnResumed");
}

void GCSceneEntity::SetOnResumed(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_OnResumed", false, value);
}

std::vector<GCEntityIOOutput> GCSceneEntity::GetOnTrigger() const {
    GCEntityIOOutput* outValue = GetSchemaValue<GCEntityIOOutput*>(m_ptr, "CSceneEntity", "m_OnTrigger"); std::vector<GCEntityIOOutput> ret; for(int i = 0; i < 16; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCSceneEntity::SetOnTrigger(std::vector<GCEntityIOOutput> value) {
    GCEntityIOOutput* outValue = GetSchemaValue<GCEntityIOOutput*>(m_ptr, "CSceneEntity", "m_OnTrigger"); for(int i = 0; i < 16; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CSceneEntity", "m_OnTrigger", false, outValue);
}

GCSceneEntity GCSceneEntity::GetInterruptScene() const {
    GCSceneEntity value(GetSchemaValuePtr<void>(m_ptr, "CSceneEntity", "m_hInterruptScene"));
    return value;
}

void GCSceneEntity::SetInterruptScene(GCSceneEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'InterruptScene' is not possible.\n");
}

int32_t GCSceneEntity::GetInterruptCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSceneEntity", "m_nInterruptCount");
}

void GCSceneEntity::SetInterruptCount(int32_t value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_nInterruptCount", false, value);
}

bool GCSceneEntity::GetSceneMissing() const {
    return GetSchemaValue<bool>(m_ptr, "CSceneEntity", "m_bSceneMissing");
}

void GCSceneEntity::SetSceneMissing(bool value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_bSceneMissing", false, value);
}

bool GCSceneEntity::GetInterrupted() const {
    return GetSchemaValue<bool>(m_ptr, "CSceneEntity", "m_bInterrupted");
}

void GCSceneEntity::SetInterrupted(bool value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_bInterrupted", false, value);
}

bool GCSceneEntity::GetCompletedEarly() const {
    return GetSchemaValue<bool>(m_ptr, "CSceneEntity", "m_bCompletedEarly");
}

void GCSceneEntity::SetCompletedEarly(bool value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_bCompletedEarly", false, value);
}

bool GCSceneEntity::GetInterruptSceneFinished() const {
    return GetSchemaValue<bool>(m_ptr, "CSceneEntity", "m_bInterruptSceneFinished");
}

void GCSceneEntity::SetInterruptSceneFinished(bool value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_bInterruptSceneFinished", false, value);
}

bool GCSceneEntity::GetRestoring() const {
    return GetSchemaValue<bool>(m_ptr, "CSceneEntity", "m_bRestoring");
}

void GCSceneEntity::SetRestoring(bool value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_bRestoring", false, value);
}

CUtlSymbolLarge GCSceneEntity::GetSoundName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSceneEntity", "m_iszSoundName");
}

void GCSceneEntity::SetSoundName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_iszSoundName", false, value);
}

CUtlSymbolLarge GCSceneEntity::GetSequenceName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSceneEntity", "m_iszSequenceName");
}

void GCSceneEntity::SetSequenceName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_iszSequenceName", false, value);
}

GCBaseFlex GCSceneEntity::GetActor() const {
    GCBaseFlex value(GetSchemaValuePtr<void>(m_ptr, "CSceneEntity", "m_hActor"));
    return value;
}

void GCSceneEntity::SetActor(GCBaseFlex* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Actor' is not possible.\n");
}

GCBaseEntity GCSceneEntity::GetActivator() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CSceneEntity", "m_hActivator"));
    return value;
}

void GCSceneEntity::SetActivator(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Activator' is not possible.\n");
}

int32_t GCSceneEntity::GetBusyActor() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSceneEntity", "m_BusyActor");
}

void GCSceneEntity::SetBusyActor(int32_t value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_BusyActor", false, value);
}

SceneOnPlayerDeath_t GCSceneEntity::GetPlayerDeathBehavior() const {
    return GetSchemaValue<SceneOnPlayerDeath_t>(m_ptr, "CSceneEntity", "m_iPlayerDeathBehavior");
}

void GCSceneEntity::SetPlayerDeathBehavior(SceneOnPlayerDeath_t value) {
    SetSchemaValue(m_ptr, "CSceneEntity", "m_iPlayerDeathBehavior", false, value);
}

std::string GCSceneEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSceneEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvHudHint::GCEnvHudHint(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvHudHint::GCEnvHudHint(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCEnvHudHint::GetMessage() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvHudHint", "m_iszMessage");
}

void GCEnvHudHint::SetMessage(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEnvHudHint", "m_iszMessage", false, value);
}

std::string GCEnvHudHint::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvHudHint::IsValid() {
    return (m_ptr != nullptr);
}

GCParticleSystem::GCParticleSystem(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCParticleSystem::GCParticleSystem(void *ptr) {
    m_ptr = ptr;
}

std::string GCParticleSystem::GetSnapshotFileName() const {
    return GetSchemaValuePtr<char>(m_ptr, "CParticleSystem", "m_szSnapshotFileName");
}

void GCParticleSystem::SetSnapshotFileName(std::string value) {
    WriteSchemaPtrValue(m_ptr, "CParticleSystem", "m_szSnapshotFileName", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 512);
}

bool GCParticleSystem::GetActive() const {
    return GetSchemaValue<bool>(m_ptr, "CParticleSystem", "m_bActive");
}

void GCParticleSystem::SetActive(bool value) {
    SetSchemaValue(m_ptr, "CParticleSystem", "m_bActive", false, value);
}

bool GCParticleSystem::GetFrozen() const {
    return GetSchemaValue<bool>(m_ptr, "CParticleSystem", "m_bFrozen");
}

void GCParticleSystem::SetFrozen(bool value) {
    SetSchemaValue(m_ptr, "CParticleSystem", "m_bFrozen", false, value);
}

float GCParticleSystem::GetFreezeTransitionDuration() const {
    return GetSchemaValue<float>(m_ptr, "CParticleSystem", "m_flFreezeTransitionDuration");
}

void GCParticleSystem::SetFreezeTransitionDuration(float value) {
    SetSchemaValue(m_ptr, "CParticleSystem", "m_flFreezeTransitionDuration", false, value);
}

int32_t GCParticleSystem::GetStopType() const {
    return GetSchemaValue<int32_t>(m_ptr, "CParticleSystem", "m_nStopType");
}

void GCParticleSystem::SetStopType(int32_t value) {
    SetSchemaValue(m_ptr, "CParticleSystem", "m_nStopType", false, value);
}

bool GCParticleSystem::GetAnimateDuringGameplayPause() const {
    return GetSchemaValue<bool>(m_ptr, "CParticleSystem", "m_bAnimateDuringGameplayPause");
}

void GCParticleSystem::SetAnimateDuringGameplayPause(bool value) {
    SetSchemaValue(m_ptr, "CParticleSystem", "m_bAnimateDuringGameplayPause", false, value);
}

float GCParticleSystem::GetPreSimTime() const {
    return GetSchemaValue<float>(m_ptr, "CParticleSystem", "m_flPreSimTime");
}

void GCParticleSystem::SetPreSimTime(float value) {
    SetSchemaValue(m_ptr, "CParticleSystem", "m_flPreSimTime", false, value);
}

std::vector<Vector> GCParticleSystem::GetServerControlPoints() const {
    Vector* outValue = GetSchemaValue<Vector*>(m_ptr, "CParticleSystem", "m_vServerControlPoints"); std::vector<Vector> ret; for(int i = 0; i < 4; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCParticleSystem::SetServerControlPoints(std::vector<Vector> value) {
    Vector* outValue = GetSchemaValue<Vector*>(m_ptr, "CParticleSystem", "m_vServerControlPoints"); for(int i = 0; i < 4; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CParticleSystem", "m_vServerControlPoints", false, outValue);
}

std::vector<uint8_t> GCParticleSystem::GetServerControlPointAssignments() const {
    uint8_t* outValue = GetSchemaValue<uint8_t*>(m_ptr, "CParticleSystem", "m_iServerControlPointAssignments"); std::vector<uint8_t> ret; for(int i = 0; i < 4; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCParticleSystem::SetServerControlPointAssignments(std::vector<uint8_t> value) {
    uint8_t* outValue = GetSchemaValue<uint8_t*>(m_ptr, "CParticleSystem", "m_iServerControlPointAssignments"); for(int i = 0; i < 4; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CParticleSystem", "m_iServerControlPointAssignments", false, outValue);
}

std::vector<GCBaseEntity*> GCParticleSystem::GetControlPointEnts() const {
    GCBaseEntity** outValue = GetSchemaValue<GCBaseEntity**>(m_ptr, "CParticleSystem", "m_hControlPointEnts"); std::vector<GCBaseEntity*> ret; for(int i = 0; i < 64; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCParticleSystem::SetControlPointEnts(std::vector<GCBaseEntity*> value) {
    GCBaseEntity** outValue = GetSchemaValue<GCBaseEntity**>(m_ptr, "CParticleSystem", "m_hControlPointEnts"); for(int i = 0; i < 64; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CParticleSystem", "m_hControlPointEnts", false, outValue);
}

bool GCParticleSystem::GetNoSave() const {
    return GetSchemaValue<bool>(m_ptr, "CParticleSystem", "m_bNoSave");
}

void GCParticleSystem::SetNoSave(bool value) {
    SetSchemaValue(m_ptr, "CParticleSystem", "m_bNoSave", false, value);
}

bool GCParticleSystem::GetNoFreeze() const {
    return GetSchemaValue<bool>(m_ptr, "CParticleSystem", "m_bNoFreeze");
}

void GCParticleSystem::SetNoFreeze(bool value) {
    SetSchemaValue(m_ptr, "CParticleSystem", "m_bNoFreeze", false, value);
}

bool GCParticleSystem::GetNoRamp() const {
    return GetSchemaValue<bool>(m_ptr, "CParticleSystem", "m_bNoRamp");
}

void GCParticleSystem::SetNoRamp(bool value) {
    SetSchemaValue(m_ptr, "CParticleSystem", "m_bNoRamp", false, value);
}

bool GCParticleSystem::GetStartActive() const {
    return GetSchemaValue<bool>(m_ptr, "CParticleSystem", "m_bStartActive");
}

void GCParticleSystem::SetStartActive(bool value) {
    SetSchemaValue(m_ptr, "CParticleSystem", "m_bStartActive", false, value);
}

CUtlSymbolLarge GCParticleSystem::GetEffectName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CParticleSystem", "m_iszEffectName");
}

void GCParticleSystem::SetEffectName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CParticleSystem", "m_iszEffectName", false, value);
}

std::vector<CUtlSymbolLarge> GCParticleSystem::GetControlPointNames() const {
    CUtlSymbolLarge* outValue = GetSchemaValue<CUtlSymbolLarge*>(m_ptr, "CParticleSystem", "m_iszControlPointNames"); std::vector<CUtlSymbolLarge> ret; for(int i = 0; i < 64; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCParticleSystem::SetControlPointNames(std::vector<CUtlSymbolLarge> value) {
    CUtlSymbolLarge* outValue = GetSchemaValue<CUtlSymbolLarge*>(m_ptr, "CParticleSystem", "m_iszControlPointNames"); for(int i = 0; i < 64; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CParticleSystem", "m_iszControlPointNames", false, outValue);
}

int32_t GCParticleSystem::GetDataCP() const {
    return GetSchemaValue<int32_t>(m_ptr, "CParticleSystem", "m_nDataCP");
}

void GCParticleSystem::SetDataCP(int32_t value) {
    SetSchemaValue(m_ptr, "CParticleSystem", "m_nDataCP", false, value);
}

Vector GCParticleSystem::GetDataCPValue() const {
    return GetSchemaValue<Vector>(m_ptr, "CParticleSystem", "m_vecDataCPValue");
}

void GCParticleSystem::SetDataCPValue(Vector value) {
    SetSchemaValue(m_ptr, "CParticleSystem", "m_vecDataCPValue", false, value);
}

int32_t GCParticleSystem::GetTintCP() const {
    return GetSchemaValue<int32_t>(m_ptr, "CParticleSystem", "m_nTintCP");
}

void GCParticleSystem::SetTintCP(int32_t value) {
    SetSchemaValue(m_ptr, "CParticleSystem", "m_nTintCP", false, value);
}

Color GCParticleSystem::GetTint() const {
    return GetSchemaValue<Color>(m_ptr, "CParticleSystem", "m_clrTint");
}

void GCParticleSystem::SetTint(Color value) {
    SetSchemaValue(m_ptr, "CParticleSystem", "m_clrTint", false, value);
}

std::string GCParticleSystem::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCParticleSystem::IsValid() {
    return (m_ptr != nullptr);
}

GAmmoIndex_t::GAmmoIndex_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GAmmoIndex_t::GAmmoIndex_t(void *ptr) {
    m_ptr = ptr;
}

int8_t GAmmoIndex_t::GetValue() const {
    return GetSchemaValue<int8_t>(m_ptr, "AmmoIndex_t", "m_Value");
}

void GAmmoIndex_t::SetValue(int8_t value) {
    SetSchemaValue(m_ptr, "AmmoIndex_t", "m_Value", true, value);
}

std::string GAmmoIndex_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GAmmoIndex_t::IsValid() {
    return (m_ptr != nullptr);
}

Gsky3dparams_t::Gsky3dparams_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

Gsky3dparams_t::Gsky3dparams_t(void *ptr) {
    m_ptr = ptr;
}

int16_t Gsky3dparams_t::GetScale() const {
    return GetSchemaValue<int16_t>(m_ptr, "sky3dparams_t", "scale");
}

void Gsky3dparams_t::SetScale(int16_t value) {
    SetSchemaValue(m_ptr, "sky3dparams_t", "scale", true, value);
}

Vector Gsky3dparams_t::GetOrigin() const {
    return GetSchemaValue<Vector>(m_ptr, "sky3dparams_t", "origin");
}

void Gsky3dparams_t::SetOrigin(Vector value) {
    SetSchemaValue(m_ptr, "sky3dparams_t", "origin", true, value);
}

bool Gsky3dparams_t::GetClip3DSkyBoxNearToWorldFar() const {
    return GetSchemaValue<bool>(m_ptr, "sky3dparams_t", "bClip3DSkyBoxNearToWorldFar");
}

void Gsky3dparams_t::SetClip3DSkyBoxNearToWorldFar(bool value) {
    SetSchemaValue(m_ptr, "sky3dparams_t", "bClip3DSkyBoxNearToWorldFar", true, value);
}

float Gsky3dparams_t::GetClip3DSkyBoxNearToWorldFarOffset() const {
    return GetSchemaValue<float>(m_ptr, "sky3dparams_t", "flClip3DSkyBoxNearToWorldFarOffset");
}

void Gsky3dparams_t::SetClip3DSkyBoxNearToWorldFarOffset(float value) {
    SetSchemaValue(m_ptr, "sky3dparams_t", "flClip3DSkyBoxNearToWorldFarOffset", true, value);
}

Gfogparams_t Gsky3dparams_t::GetFog() const {
    return GetSchemaValue<Gfogparams_t>(m_ptr, "sky3dparams_t", "fog");
}

void Gsky3dparams_t::SetFog(Gfogparams_t value) {
    SetSchemaValue(m_ptr, "sky3dparams_t", "fog", true, value);
}

WorldGroupId_t Gsky3dparams_t::GetWorldGroupID() const {
    return GetSchemaValue<WorldGroupId_t>(m_ptr, "sky3dparams_t", "m_nWorldGroupID");
}

void Gsky3dparams_t::SetWorldGroupID(WorldGroupId_t value) {
    SetSchemaValue(m_ptr, "sky3dparams_t", "m_nWorldGroupID", true, value);
}

std::string Gsky3dparams_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool Gsky3dparams_t::IsValid() {
    return (m_ptr != nullptr);
}

GCScriptItem::GCScriptItem(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCScriptItem::GCScriptItem(void *ptr) {
    m_ptr = ptr;
}

MoveType_t GCScriptItem::GetMoveTypeOverride() const {
    return GetSchemaValue<MoveType_t>(m_ptr, "CScriptItem", "m_MoveTypeOverride");
}

void GCScriptItem::SetMoveTypeOverride(MoveType_t value) {
    SetSchemaValue(m_ptr, "CScriptItem", "m_MoveTypeOverride", false, value);
}

std::string GCScriptItem::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCScriptItem::IsValid() {
    return (m_ptr != nullptr);
}

GIntervalTimer::GIntervalTimer(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GIntervalTimer::GIntervalTimer(void *ptr) {
    m_ptr = ptr;
}

WorldGroupId_t GIntervalTimer::GetWorldGroupId() const {
    return GetSchemaValue<WorldGroupId_t>(m_ptr, "IntervalTimer", "m_nWorldGroupId");
}

void GIntervalTimer::SetWorldGroupId(WorldGroupId_t value) {
    SetSchemaValue(m_ptr, "IntervalTimer", "m_nWorldGroupId", false, value);
}

std::string GIntervalTimer::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GIntervalTimer::IsValid() {
    return (m_ptr != nullptr);
}

GCWeaponSG556::GCWeaponSG556(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWeaponSG556::GCWeaponSG556(void *ptr) {
    m_ptr = ptr;
}

std::string GCWeaponSG556::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWeaponSG556::IsValid() {
    return (m_ptr != nullptr);
}

Gdynpitchvol_base_t::Gdynpitchvol_base_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

Gdynpitchvol_base_t::Gdynpitchvol_base_t(void *ptr) {
    m_ptr = ptr;
}

int32_t Gdynpitchvol_base_t::GetPreset() const {
    return GetSchemaValue<int32_t>(m_ptr, "dynpitchvol_base_t", "preset");
}

void Gdynpitchvol_base_t::SetPreset(int32_t value) {
    SetSchemaValue(m_ptr, "dynpitchvol_base_t", "preset", true, value);
}

int32_t Gdynpitchvol_base_t::GetPitchrun() const {
    return GetSchemaValue<int32_t>(m_ptr, "dynpitchvol_base_t", "pitchrun");
}

void Gdynpitchvol_base_t::SetPitchrun(int32_t value) {
    SetSchemaValue(m_ptr, "dynpitchvol_base_t", "pitchrun", true, value);
}

int32_t Gdynpitchvol_base_t::GetPitchstart() const {
    return GetSchemaValue<int32_t>(m_ptr, "dynpitchvol_base_t", "pitchstart");
}

void Gdynpitchvol_base_t::SetPitchstart(int32_t value) {
    SetSchemaValue(m_ptr, "dynpitchvol_base_t", "pitchstart", true, value);
}

int32_t Gdynpitchvol_base_t::GetSpinup() const {
    return GetSchemaValue<int32_t>(m_ptr, "dynpitchvol_base_t", "spinup");
}

void Gdynpitchvol_base_t::SetSpinup(int32_t value) {
    SetSchemaValue(m_ptr, "dynpitchvol_base_t", "spinup", true, value);
}

int32_t Gdynpitchvol_base_t::GetSpindown() const {
    return GetSchemaValue<int32_t>(m_ptr, "dynpitchvol_base_t", "spindown");
}

void Gdynpitchvol_base_t::SetSpindown(int32_t value) {
    SetSchemaValue(m_ptr, "dynpitchvol_base_t", "spindown", true, value);
}

int32_t Gdynpitchvol_base_t::GetVolrun() const {
    return GetSchemaValue<int32_t>(m_ptr, "dynpitchvol_base_t", "volrun");
}

void Gdynpitchvol_base_t::SetVolrun(int32_t value) {
    SetSchemaValue(m_ptr, "dynpitchvol_base_t", "volrun", true, value);
}

int32_t Gdynpitchvol_base_t::GetVolstart() const {
    return GetSchemaValue<int32_t>(m_ptr, "dynpitchvol_base_t", "volstart");
}

void Gdynpitchvol_base_t::SetVolstart(int32_t value) {
    SetSchemaValue(m_ptr, "dynpitchvol_base_t", "volstart", true, value);
}

int32_t Gdynpitchvol_base_t::GetFadein() const {
    return GetSchemaValue<int32_t>(m_ptr, "dynpitchvol_base_t", "fadein");
}

void Gdynpitchvol_base_t::SetFadein(int32_t value) {
    SetSchemaValue(m_ptr, "dynpitchvol_base_t", "fadein", true, value);
}

int32_t Gdynpitchvol_base_t::GetFadeout() const {
    return GetSchemaValue<int32_t>(m_ptr, "dynpitchvol_base_t", "fadeout");
}

void Gdynpitchvol_base_t::SetFadeout(int32_t value) {
    SetSchemaValue(m_ptr, "dynpitchvol_base_t", "fadeout", true, value);
}

int32_t Gdynpitchvol_base_t::GetLfotype() const {
    return GetSchemaValue<int32_t>(m_ptr, "dynpitchvol_base_t", "lfotype");
}

void Gdynpitchvol_base_t::SetLfotype(int32_t value) {
    SetSchemaValue(m_ptr, "dynpitchvol_base_t", "lfotype", true, value);
}

int32_t Gdynpitchvol_base_t::GetLforate() const {
    return GetSchemaValue<int32_t>(m_ptr, "dynpitchvol_base_t", "lforate");
}

void Gdynpitchvol_base_t::SetLforate(int32_t value) {
    SetSchemaValue(m_ptr, "dynpitchvol_base_t", "lforate", true, value);
}

int32_t Gdynpitchvol_base_t::GetLfomodpitch() const {
    return GetSchemaValue<int32_t>(m_ptr, "dynpitchvol_base_t", "lfomodpitch");
}

void Gdynpitchvol_base_t::SetLfomodpitch(int32_t value) {
    SetSchemaValue(m_ptr, "dynpitchvol_base_t", "lfomodpitch", true, value);
}

int32_t Gdynpitchvol_base_t::GetLfomodvol() const {
    return GetSchemaValue<int32_t>(m_ptr, "dynpitchvol_base_t", "lfomodvol");
}

void Gdynpitchvol_base_t::SetLfomodvol(int32_t value) {
    SetSchemaValue(m_ptr, "dynpitchvol_base_t", "lfomodvol", true, value);
}

int32_t Gdynpitchvol_base_t::GetCspinup() const {
    return GetSchemaValue<int32_t>(m_ptr, "dynpitchvol_base_t", "cspinup");
}

void Gdynpitchvol_base_t::SetCspinup(int32_t value) {
    SetSchemaValue(m_ptr, "dynpitchvol_base_t", "cspinup", true, value);
}

int32_t Gdynpitchvol_base_t::GetCspincount() const {
    return GetSchemaValue<int32_t>(m_ptr, "dynpitchvol_base_t", "cspincount");
}

void Gdynpitchvol_base_t::SetCspincount(int32_t value) {
    SetSchemaValue(m_ptr, "dynpitchvol_base_t", "cspincount", true, value);
}

int32_t Gdynpitchvol_base_t::GetPitch() const {
    return GetSchemaValue<int32_t>(m_ptr, "dynpitchvol_base_t", "pitch");
}

void Gdynpitchvol_base_t::SetPitch(int32_t value) {
    SetSchemaValue(m_ptr, "dynpitchvol_base_t", "pitch", true, value);
}

int32_t Gdynpitchvol_base_t::GetSpinupsav() const {
    return GetSchemaValue<int32_t>(m_ptr, "dynpitchvol_base_t", "spinupsav");
}

void Gdynpitchvol_base_t::SetSpinupsav(int32_t value) {
    SetSchemaValue(m_ptr, "dynpitchvol_base_t", "spinupsav", true, value);
}

int32_t Gdynpitchvol_base_t::GetSpindownsav() const {
    return GetSchemaValue<int32_t>(m_ptr, "dynpitchvol_base_t", "spindownsav");
}

void Gdynpitchvol_base_t::SetSpindownsav(int32_t value) {
    SetSchemaValue(m_ptr, "dynpitchvol_base_t", "spindownsav", true, value);
}

int32_t Gdynpitchvol_base_t::GetPitchfrac() const {
    return GetSchemaValue<int32_t>(m_ptr, "dynpitchvol_base_t", "pitchfrac");
}

void Gdynpitchvol_base_t::SetPitchfrac(int32_t value) {
    SetSchemaValue(m_ptr, "dynpitchvol_base_t", "pitchfrac", true, value);
}

int32_t Gdynpitchvol_base_t::GetVol() const {
    return GetSchemaValue<int32_t>(m_ptr, "dynpitchvol_base_t", "vol");
}

void Gdynpitchvol_base_t::SetVol(int32_t value) {
    SetSchemaValue(m_ptr, "dynpitchvol_base_t", "vol", true, value);
}

int32_t Gdynpitchvol_base_t::GetFadeinsav() const {
    return GetSchemaValue<int32_t>(m_ptr, "dynpitchvol_base_t", "fadeinsav");
}

void Gdynpitchvol_base_t::SetFadeinsav(int32_t value) {
    SetSchemaValue(m_ptr, "dynpitchvol_base_t", "fadeinsav", true, value);
}

int32_t Gdynpitchvol_base_t::GetFadeoutsav() const {
    return GetSchemaValue<int32_t>(m_ptr, "dynpitchvol_base_t", "fadeoutsav");
}

void Gdynpitchvol_base_t::SetFadeoutsav(int32_t value) {
    SetSchemaValue(m_ptr, "dynpitchvol_base_t", "fadeoutsav", true, value);
}

int32_t Gdynpitchvol_base_t::GetVolfrac() const {
    return GetSchemaValue<int32_t>(m_ptr, "dynpitchvol_base_t", "volfrac");
}

void Gdynpitchvol_base_t::SetVolfrac(int32_t value) {
    SetSchemaValue(m_ptr, "dynpitchvol_base_t", "volfrac", true, value);
}

int32_t Gdynpitchvol_base_t::GetLfofrac() const {
    return GetSchemaValue<int32_t>(m_ptr, "dynpitchvol_base_t", "lfofrac");
}

void Gdynpitchvol_base_t::SetLfofrac(int32_t value) {
    SetSchemaValue(m_ptr, "dynpitchvol_base_t", "lfofrac", true, value);
}

int32_t Gdynpitchvol_base_t::GetLfomult() const {
    return GetSchemaValue<int32_t>(m_ptr, "dynpitchvol_base_t", "lfomult");
}

void Gdynpitchvol_base_t::SetLfomult(int32_t value) {
    SetSchemaValue(m_ptr, "dynpitchvol_base_t", "lfomult", true, value);
}

std::string Gdynpitchvol_base_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool Gdynpitchvol_base_t::IsValid() {
    return (m_ptr != nullptr);
}

GCDynamicLight::GCDynamicLight(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCDynamicLight::GCDynamicLight(void *ptr) {
    m_ptr = ptr;
}

uint8_t GCDynamicLight::GetActualFlags() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CDynamicLight", "m_ActualFlags");
}

void GCDynamicLight::SetActualFlags(uint8_t value) {
    SetSchemaValue(m_ptr, "CDynamicLight", "m_ActualFlags", false, value);
}

uint8_t GCDynamicLight::GetFlags() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CDynamicLight", "m_Flags");
}

void GCDynamicLight::SetFlags(uint8_t value) {
    SetSchemaValue(m_ptr, "CDynamicLight", "m_Flags", false, value);
}

uint8_t GCDynamicLight::GetLightStyle() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CDynamicLight", "m_LightStyle");
}

void GCDynamicLight::SetLightStyle(uint8_t value) {
    SetSchemaValue(m_ptr, "CDynamicLight", "m_LightStyle", false, value);
}

bool GCDynamicLight::GetOn() const {
    return GetSchemaValue<bool>(m_ptr, "CDynamicLight", "m_On");
}

void GCDynamicLight::SetOn(bool value) {
    SetSchemaValue(m_ptr, "CDynamicLight", "m_On", false, value);
}

float GCDynamicLight::GetRadius() const {
    return GetSchemaValue<float>(m_ptr, "CDynamicLight", "m_Radius");
}

void GCDynamicLight::SetRadius(float value) {
    SetSchemaValue(m_ptr, "CDynamicLight", "m_Radius", false, value);
}

int32_t GCDynamicLight::GetExponent() const {
    return GetSchemaValue<int32_t>(m_ptr, "CDynamicLight", "m_Exponent");
}

void GCDynamicLight::SetExponent(int32_t value) {
    SetSchemaValue(m_ptr, "CDynamicLight", "m_Exponent", false, value);
}

float GCDynamicLight::GetInnerAngle() const {
    return GetSchemaValue<float>(m_ptr, "CDynamicLight", "m_InnerAngle");
}

void GCDynamicLight::SetInnerAngle(float value) {
    SetSchemaValue(m_ptr, "CDynamicLight", "m_InnerAngle", false, value);
}

float GCDynamicLight::GetOuterAngle() const {
    return GetSchemaValue<float>(m_ptr, "CDynamicLight", "m_OuterAngle");
}

void GCDynamicLight::SetOuterAngle(float value) {
    SetSchemaValue(m_ptr, "CDynamicLight", "m_OuterAngle", false, value);
}

float GCDynamicLight::GetSpotRadius() const {
    return GetSchemaValue<float>(m_ptr, "CDynamicLight", "m_SpotRadius");
}

void GCDynamicLight::SetSpotRadius(float value) {
    SetSchemaValue(m_ptr, "CDynamicLight", "m_SpotRadius", false, value);
}

std::string GCDynamicLight::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCDynamicLight::IsValid() {
    return (m_ptr != nullptr);
}

GCWeaponP90::GCWeaponP90(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWeaponP90::GCWeaponP90(void *ptr) {
    m_ptr = ptr;
}

std::string GCWeaponP90::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWeaponP90::IsValid() {
    return (m_ptr != nullptr);
}

GCTriggerToggleSave::GCTriggerToggleSave(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTriggerToggleSave::GCTriggerToggleSave(void *ptr) {
    m_ptr = ptr;
}

std::string GCTriggerToggleSave::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTriggerToggleSave::IsValid() {
    return (m_ptr != nullptr);
}

GCPrecipitation::GCPrecipitation(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPrecipitation::GCPrecipitation(void *ptr) {
    m_ptr = ptr;
}

std::string GCPrecipitation::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPrecipitation::IsValid() {
    return (m_ptr != nullptr);
}

GCPointServerCommand::GCPointServerCommand(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPointServerCommand::GCPointServerCommand(void *ptr) {
    m_ptr = ptr;
}

std::string GCPointServerCommand::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPointServerCommand::IsValid() {
    return (m_ptr != nullptr);
}

GCCSGO_TeamIntroCharacterPosition::GCCSGO_TeamIntroCharacterPosition(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSGO_TeamIntroCharacterPosition::GCCSGO_TeamIntroCharacterPosition(void *ptr) {
    m_ptr = ptr;
}

std::string GCCSGO_TeamIntroCharacterPosition::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSGO_TeamIntroCharacterPosition::IsValid() {
    return (m_ptr != nullptr);
}

GCLogicCollisionPair::GCLogicCollisionPair(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCLogicCollisionPair::GCLogicCollisionPair(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCLogicCollisionPair::GetNameAttach1() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CLogicCollisionPair", "m_nameAttach1");
}

void GCLogicCollisionPair::SetNameAttach1(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CLogicCollisionPair", "m_nameAttach1", false, value);
}

CUtlSymbolLarge GCLogicCollisionPair::GetNameAttach2() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CLogicCollisionPair", "m_nameAttach2");
}

void GCLogicCollisionPair::SetNameAttach2(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CLogicCollisionPair", "m_nameAttach2", false, value);
}

bool GCLogicCollisionPair::GetSupportMultipleEntitiesWithSameName() const {
    return GetSchemaValue<bool>(m_ptr, "CLogicCollisionPair", "m_supportMultipleEntitiesWithSameName");
}

void GCLogicCollisionPair::SetSupportMultipleEntitiesWithSameName(bool value) {
    SetSchemaValue(m_ptr, "CLogicCollisionPair", "m_supportMultipleEntitiesWithSameName", false, value);
}

bool GCLogicCollisionPair::GetDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CLogicCollisionPair", "m_disabled");
}

void GCLogicCollisionPair::SetDisabled(bool value) {
    SetSchemaValue(m_ptr, "CLogicCollisionPair", "m_disabled", false, value);
}

bool GCLogicCollisionPair::GetSucceeded() const {
    return GetSchemaValue<bool>(m_ptr, "CLogicCollisionPair", "m_succeeded");
}

void GCLogicCollisionPair::SetSucceeded(bool value) {
    SetSchemaValue(m_ptr, "CLogicCollisionPair", "m_succeeded", false, value);
}

std::string GCLogicCollisionPair::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCLogicCollisionPair::IsValid() {
    return (m_ptr != nullptr);
}

GCSkeletonInstance::GCSkeletonInstance(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSkeletonInstance::GCSkeletonInstance(void *ptr) {
    m_ptr = ptr;
}

GCModelState GCSkeletonInstance::GetModelState() const {
    return GetSchemaValue<GCModelState>(m_ptr, "CSkeletonInstance", "m_modelState");
}

void GCSkeletonInstance::SetModelState(GCModelState value) {
    SetSchemaValue(m_ptr, "CSkeletonInstance", "m_modelState", false, value);
}

bool GCSkeletonInstance::GetIsAnimationEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CSkeletonInstance", "m_bIsAnimationEnabled");
}

void GCSkeletonInstance::SetIsAnimationEnabled(bool value) {
    SetSchemaValue(m_ptr, "CSkeletonInstance", "m_bIsAnimationEnabled", false, value);
}

bool GCSkeletonInstance::GetUseParentRenderBounds() const {
    return GetSchemaValue<bool>(m_ptr, "CSkeletonInstance", "m_bUseParentRenderBounds");
}

void GCSkeletonInstance::SetUseParentRenderBounds(bool value) {
    SetSchemaValue(m_ptr, "CSkeletonInstance", "m_bUseParentRenderBounds", false, value);
}

bool GCSkeletonInstance::GetDisableSolidCollisionsForHierarchy() const {
    return GetSchemaValue<bool>(m_ptr, "CSkeletonInstance", "m_bDisableSolidCollisionsForHierarchy");
}

void GCSkeletonInstance::SetDisableSolidCollisionsForHierarchy(bool value) {
    SetSchemaValue(m_ptr, "CSkeletonInstance", "m_bDisableSolidCollisionsForHierarchy", false, value);
}

CUtlStringToken GCSkeletonInstance::GetMaterialGroup() const {
    return GetSchemaValue<CUtlStringToken>(m_ptr, "CSkeletonInstance", "m_materialGroup");
}

void GCSkeletonInstance::SetMaterialGroup(CUtlStringToken value) {
    SetSchemaValue(m_ptr, "CSkeletonInstance", "m_materialGroup", false, value);
}

uint8_t GCSkeletonInstance::GetHitboxSet() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CSkeletonInstance", "m_nHitboxSet");
}

void GCSkeletonInstance::SetHitboxSet(uint8_t value) {
    SetSchemaValue(m_ptr, "CSkeletonInstance", "m_nHitboxSet", false, value);
}

std::string GCSkeletonInstance::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSkeletonInstance::IsValid() {
    return (m_ptr != nullptr);
}

GCPhysicsProp::GCPhysicsProp(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPhysicsProp::GCPhysicsProp(void *ptr) {
    m_ptr = ptr;
}

GCEntityIOOutput GCPhysicsProp::GetMotionEnabled() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPhysicsProp", "m_MotionEnabled");
}

void GCPhysicsProp::SetMotionEnabled(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPhysicsProp", "m_MotionEnabled", false, value);
}

GCEntityIOOutput GCPhysicsProp::GetOnAwakened() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPhysicsProp", "m_OnAwakened");
}

void GCPhysicsProp::SetOnAwakened(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPhysicsProp", "m_OnAwakened", false, value);
}

GCEntityIOOutput GCPhysicsProp::GetOnAwake() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPhysicsProp", "m_OnAwake");
}

void GCPhysicsProp::SetOnAwake(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPhysicsProp", "m_OnAwake", false, value);
}

GCEntityIOOutput GCPhysicsProp::GetOnAsleep() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPhysicsProp", "m_OnAsleep");
}

void GCPhysicsProp::SetOnAsleep(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPhysicsProp", "m_OnAsleep", false, value);
}

GCEntityIOOutput GCPhysicsProp::GetOnPlayerUse() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPhysicsProp", "m_OnPlayerUse");
}

void GCPhysicsProp::SetOnPlayerUse(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPhysicsProp", "m_OnPlayerUse", false, value);
}

GCEntityIOOutput GCPhysicsProp::GetOnOutOfWorld() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPhysicsProp", "m_OnOutOfWorld");
}

void GCPhysicsProp::SetOnOutOfWorld(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPhysicsProp", "m_OnOutOfWorld", false, value);
}

GCEntityIOOutput GCPhysicsProp::GetOnPlayerPickup() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPhysicsProp", "m_OnPlayerPickup");
}

void GCPhysicsProp::SetOnPlayerPickup(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPhysicsProp", "m_OnPlayerPickup", false, value);
}

bool GCPhysicsProp::GetForceNavIgnore() const {
    return GetSchemaValue<bool>(m_ptr, "CPhysicsProp", "m_bForceNavIgnore");
}

void GCPhysicsProp::SetForceNavIgnore(bool value) {
    SetSchemaValue(m_ptr, "CPhysicsProp", "m_bForceNavIgnore", false, value);
}

bool GCPhysicsProp::GetNoNavmeshBlocker() const {
    return GetSchemaValue<bool>(m_ptr, "CPhysicsProp", "m_bNoNavmeshBlocker");
}

void GCPhysicsProp::SetNoNavmeshBlocker(bool value) {
    SetSchemaValue(m_ptr, "CPhysicsProp", "m_bNoNavmeshBlocker", false, value);
}

bool GCPhysicsProp::GetForceNpcExclude() const {
    return GetSchemaValue<bool>(m_ptr, "CPhysicsProp", "m_bForceNpcExclude");
}

void GCPhysicsProp::SetForceNpcExclude(bool value) {
    SetSchemaValue(m_ptr, "CPhysicsProp", "m_bForceNpcExclude", false, value);
}

float GCPhysicsProp::GetMassScale() const {
    return GetSchemaValue<float>(m_ptr, "CPhysicsProp", "m_massScale");
}

void GCPhysicsProp::SetMassScale(float value) {
    SetSchemaValue(m_ptr, "CPhysicsProp", "m_massScale", false, value);
}

float GCPhysicsProp::GetInertiaScale() const {
    return GetSchemaValue<float>(m_ptr, "CPhysicsProp", "m_inertiaScale");
}

void GCPhysicsProp::SetInertiaScale(float value) {
    SetSchemaValue(m_ptr, "CPhysicsProp", "m_inertiaScale", false, value);
}

float GCPhysicsProp::GetBuoyancyScale() const {
    return GetSchemaValue<float>(m_ptr, "CPhysicsProp", "m_buoyancyScale");
}

void GCPhysicsProp::SetBuoyancyScale(float value) {
    SetSchemaValue(m_ptr, "CPhysicsProp", "m_buoyancyScale", false, value);
}

int32_t GCPhysicsProp::GetDamageType() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPhysicsProp", "m_damageType");
}

void GCPhysicsProp::SetDamageType(int32_t value) {
    SetSchemaValue(m_ptr, "CPhysicsProp", "m_damageType", false, value);
}

int32_t GCPhysicsProp::GetDamageToEnableMotion() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPhysicsProp", "m_damageToEnableMotion");
}

void GCPhysicsProp::SetDamageToEnableMotion(int32_t value) {
    SetSchemaValue(m_ptr, "CPhysicsProp", "m_damageToEnableMotion", false, value);
}

float GCPhysicsProp::GetForceToEnableMotion() const {
    return GetSchemaValue<float>(m_ptr, "CPhysicsProp", "m_flForceToEnableMotion");
}

void GCPhysicsProp::SetForceToEnableMotion(float value) {
    SetSchemaValue(m_ptr, "CPhysicsProp", "m_flForceToEnableMotion", false, value);
}

bool GCPhysicsProp::GetThrownByPlayer() const {
    return GetSchemaValue<bool>(m_ptr, "CPhysicsProp", "m_bThrownByPlayer");
}

void GCPhysicsProp::SetThrownByPlayer(bool value) {
    SetSchemaValue(m_ptr, "CPhysicsProp", "m_bThrownByPlayer", false, value);
}

bool GCPhysicsProp::GetDroppedByPlayer() const {
    return GetSchemaValue<bool>(m_ptr, "CPhysicsProp", "m_bDroppedByPlayer");
}

void GCPhysicsProp::SetDroppedByPlayer(bool value) {
    SetSchemaValue(m_ptr, "CPhysicsProp", "m_bDroppedByPlayer", false, value);
}

bool GCPhysicsProp::GetTouchedByPlayer() const {
    return GetSchemaValue<bool>(m_ptr, "CPhysicsProp", "m_bTouchedByPlayer");
}

void GCPhysicsProp::SetTouchedByPlayer(bool value) {
    SetSchemaValue(m_ptr, "CPhysicsProp", "m_bTouchedByPlayer", false, value);
}

bool GCPhysicsProp::GetFirstCollisionAfterLaunch() const {
    return GetSchemaValue<bool>(m_ptr, "CPhysicsProp", "m_bFirstCollisionAfterLaunch");
}

void GCPhysicsProp::SetFirstCollisionAfterLaunch(bool value) {
    SetSchemaValue(m_ptr, "CPhysicsProp", "m_bFirstCollisionAfterLaunch", false, value);
}

int32_t GCPhysicsProp::GetExploitableByPlayer() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPhysicsProp", "m_iExploitableByPlayer");
}

void GCPhysicsProp::SetExploitableByPlayer(int32_t value) {
    SetSchemaValue(m_ptr, "CPhysicsProp", "m_iExploitableByPlayer", false, value);
}

bool GCPhysicsProp::GetHasBeenAwakened() const {
    return GetSchemaValue<bool>(m_ptr, "CPhysicsProp", "m_bHasBeenAwakened");
}

void GCPhysicsProp::SetHasBeenAwakened(bool value) {
    SetSchemaValue(m_ptr, "CPhysicsProp", "m_bHasBeenAwakened", false, value);
}

bool GCPhysicsProp::GetIsOverrideProp() const {
    return GetSchemaValue<bool>(m_ptr, "CPhysicsProp", "m_bIsOverrideProp");
}

void GCPhysicsProp::SetIsOverrideProp(bool value) {
    SetSchemaValue(m_ptr, "CPhysicsProp", "m_bIsOverrideProp", false, value);
}

int32_t GCPhysicsProp::GetInitialGlowState() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPhysicsProp", "m_iInitialGlowState");
}

void GCPhysicsProp::SetInitialGlowState(int32_t value) {
    SetSchemaValue(m_ptr, "CPhysicsProp", "m_iInitialGlowState", false, value);
}

int32_t GCPhysicsProp::GetGlowRange() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPhysicsProp", "m_nGlowRange");
}

void GCPhysicsProp::SetGlowRange(int32_t value) {
    SetSchemaValue(m_ptr, "CPhysicsProp", "m_nGlowRange", false, value);
}

int32_t GCPhysicsProp::GetGlowRangeMin() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPhysicsProp", "m_nGlowRangeMin");
}

void GCPhysicsProp::SetGlowRangeMin(int32_t value) {
    SetSchemaValue(m_ptr, "CPhysicsProp", "m_nGlowRangeMin", false, value);
}

Color GCPhysicsProp::GetGlowColor() const {
    return GetSchemaValue<Color>(m_ptr, "CPhysicsProp", "m_glowColor");
}

void GCPhysicsProp::SetGlowColor(Color value) {
    SetSchemaValue(m_ptr, "CPhysicsProp", "m_glowColor", false, value);
}

bool GCPhysicsProp::GetShouldAutoConvertBackFromDebris() const {
    return GetSchemaValue<bool>(m_ptr, "CPhysicsProp", "m_bShouldAutoConvertBackFromDebris");
}

void GCPhysicsProp::SetShouldAutoConvertBackFromDebris(bool value) {
    SetSchemaValue(m_ptr, "CPhysicsProp", "m_bShouldAutoConvertBackFromDebris", false, value);
}

bool GCPhysicsProp::GetMuteImpactEffects() const {
    return GetSchemaValue<bool>(m_ptr, "CPhysicsProp", "m_bMuteImpactEffects");
}

void GCPhysicsProp::SetMuteImpactEffects(bool value) {
    SetSchemaValue(m_ptr, "CPhysicsProp", "m_bMuteImpactEffects", false, value);
}

bool GCPhysicsProp::GetAcceptDamageFromHeldObjects() const {
    return GetSchemaValue<bool>(m_ptr, "CPhysicsProp", "m_bAcceptDamageFromHeldObjects");
}

void GCPhysicsProp::SetAcceptDamageFromHeldObjects(bool value) {
    SetSchemaValue(m_ptr, "CPhysicsProp", "m_bAcceptDamageFromHeldObjects", false, value);
}

bool GCPhysicsProp::GetEnableUseOutput() const {
    return GetSchemaValue<bool>(m_ptr, "CPhysicsProp", "m_bEnableUseOutput");
}

void GCPhysicsProp::SetEnableUseOutput(bool value) {
    SetSchemaValue(m_ptr, "CPhysicsProp", "m_bEnableUseOutput", false, value);
}

bool GCPhysicsProp::GetAwake() const {
    return GetSchemaValue<bool>(m_ptr, "CPhysicsProp", "m_bAwake");
}

void GCPhysicsProp::SetAwake(bool value) {
    SetSchemaValue(m_ptr, "CPhysicsProp", "m_bAwake", false, value);
}

std::string GCPhysicsProp::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPhysicsProp::IsValid() {
    return (m_ptr != nullptr);
}

GCFuncWall::GCFuncWall(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFuncWall::GCFuncWall(void *ptr) {
    m_ptr = ptr;
}

int32_t GCFuncWall::GetState() const {
    return GetSchemaValue<int32_t>(m_ptr, "CFuncWall", "m_nState");
}

void GCFuncWall::SetState(int32_t value) {
    SetSchemaValue(m_ptr, "CFuncWall", "m_nState", false, value);
}

std::string GCFuncWall::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFuncWall::IsValid() {
    return (m_ptr != nullptr);
}

GCItemDefuserAlias_item_defuser::GCItemDefuserAlias_item_defuser(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCItemDefuserAlias_item_defuser::GCItemDefuserAlias_item_defuser(void *ptr) {
    m_ptr = ptr;
}

std::string GCItemDefuserAlias_item_defuser::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCItemDefuserAlias_item_defuser::IsValid() {
    return (m_ptr != nullptr);
}

GCBaseGrenade::GCBaseGrenade(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBaseGrenade::GCBaseGrenade(void *ptr) {
    m_ptr = ptr;
}

GCEntityIOOutput GCBaseGrenade::GetOnPlayerPickup() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseGrenade", "m_OnPlayerPickup");
}

void GCBaseGrenade::SetOnPlayerPickup(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseGrenade", "m_OnPlayerPickup", false, value);
}

GCEntityIOOutput GCBaseGrenade::GetOnExplode() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseGrenade", "m_OnExplode");
}

void GCBaseGrenade::SetOnExplode(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseGrenade", "m_OnExplode", false, value);
}

bool GCBaseGrenade::GetHasWarnedAI() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseGrenade", "m_bHasWarnedAI");
}

void GCBaseGrenade::SetHasWarnedAI(bool value) {
    SetSchemaValue(m_ptr, "CBaseGrenade", "m_bHasWarnedAI", false, value);
}

bool GCBaseGrenade::GetIsSmokeGrenade() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseGrenade", "m_bIsSmokeGrenade");
}

void GCBaseGrenade::SetIsSmokeGrenade(bool value) {
    SetSchemaValue(m_ptr, "CBaseGrenade", "m_bIsSmokeGrenade", false, value);
}

bool GCBaseGrenade::GetIsLive() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseGrenade", "m_bIsLive");
}

void GCBaseGrenade::SetIsLive(bool value) {
    SetSchemaValue(m_ptr, "CBaseGrenade", "m_bIsLive", false, value);
}

float GCBaseGrenade::GetDmgRadius() const {
    return GetSchemaValue<float>(m_ptr, "CBaseGrenade", "m_DmgRadius");
}

void GCBaseGrenade::SetDmgRadius(float value) {
    SetSchemaValue(m_ptr, "CBaseGrenade", "m_DmgRadius", false, value);
}

float GCBaseGrenade::GetWarnAITime() const {
    return GetSchemaValue<float>(m_ptr, "CBaseGrenade", "m_flWarnAITime");
}

void GCBaseGrenade::SetWarnAITime(float value) {
    SetSchemaValue(m_ptr, "CBaseGrenade", "m_flWarnAITime", false, value);
}

float GCBaseGrenade::GetDamage() const {
    return GetSchemaValue<float>(m_ptr, "CBaseGrenade", "m_flDamage");
}

void GCBaseGrenade::SetDamage(float value) {
    SetSchemaValue(m_ptr, "CBaseGrenade", "m_flDamage", false, value);
}

CUtlSymbolLarge GCBaseGrenade::GetBounceSound() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBaseGrenade", "m_iszBounceSound");
}

void GCBaseGrenade::SetBounceSound(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBaseGrenade", "m_iszBounceSound", false, value);
}

CUtlString GCBaseGrenade::GetExplosionSound() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CBaseGrenade", "m_ExplosionSound");
}

void GCBaseGrenade::SetExplosionSound(CUtlString value) {
    SetSchemaValue(m_ptr, "CBaseGrenade", "m_ExplosionSound", false, value);
}

GCCSPlayerPawn GCBaseGrenade::GetThrower() const {
    GCCSPlayerPawn value(GetSchemaValuePtr<void>(m_ptr, "CBaseGrenade", "m_hThrower"));
    return value;
}

void GCBaseGrenade::SetThrower(GCCSPlayerPawn* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Thrower' is not possible.\n");
}

GCCSPlayerPawn GCBaseGrenade::GetOriginalThrower() const {
    GCCSPlayerPawn value(GetSchemaValuePtr<void>(m_ptr, "CBaseGrenade", "m_hOriginalThrower"));
    return value;
}

void GCBaseGrenade::SetOriginalThrower(GCCSPlayerPawn* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OriginalThrower' is not possible.\n");
}

std::string GCBaseGrenade::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBaseGrenade::IsValid() {
    return (m_ptr != nullptr);
}

GCCSPlayerBase_CameraServices::GCCSPlayerBase_CameraServices(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSPlayerBase_CameraServices::GCCSPlayerBase_CameraServices(void *ptr) {
    m_ptr = ptr;
}

uint32_t GCCSPlayerBase_CameraServices::GetFOV() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CCSPlayerBase_CameraServices", "m_iFOV");
}

void GCCSPlayerBase_CameraServices::SetFOV(uint32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerBase_CameraServices", "m_iFOV", false, value);
}

uint32_t GCCSPlayerBase_CameraServices::GetFOVStart() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CCSPlayerBase_CameraServices", "m_iFOVStart");
}

void GCCSPlayerBase_CameraServices::SetFOVStart(uint32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerBase_CameraServices", "m_iFOVStart", false, value);
}

float GCCSPlayerBase_CameraServices::GetFOVRate() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayerBase_CameraServices", "m_flFOVRate");
}

void GCCSPlayerBase_CameraServices::SetFOVRate(float value) {
    SetSchemaValue(m_ptr, "CCSPlayerBase_CameraServices", "m_flFOVRate", false, value);
}

GCBaseEntity GCCSPlayerBase_CameraServices::GetZoomOwner() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CCSPlayerBase_CameraServices", "m_hZoomOwner"));
    return value;
}

void GCCSPlayerBase_CameraServices::SetZoomOwner(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ZoomOwner' is not possible.\n");
}

GCBaseEntity GCCSPlayerBase_CameraServices::GetLastFogTrigger() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CCSPlayerBase_CameraServices", "m_hLastFogTrigger"));
    return value;
}

void GCCSPlayerBase_CameraServices::SetLastFogTrigger(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'LastFogTrigger' is not possible.\n");
}

std::string GCCSPlayerBase_CameraServices::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSPlayerBase_CameraServices::IsValid() {
    return (m_ptr != nullptr);
}

GCCSGO_WingmanIntroCharacterPosition::GCCSGO_WingmanIntroCharacterPosition(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSGO_WingmanIntroCharacterPosition::GCCSGO_WingmanIntroCharacterPosition(void *ptr) {
    m_ptr = ptr;
}

std::string GCCSGO_WingmanIntroCharacterPosition::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSGO_WingmanIntroCharacterPosition::IsValid() {
    return (m_ptr != nullptr);
}

GCSMatchStats_t::GCSMatchStats_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSMatchStats_t::GCSMatchStats_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GCSMatchStats_t::GetEnemy5Ks() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSMatchStats_t", "m_iEnemy5Ks");
}

void GCSMatchStats_t::SetEnemy5Ks(int32_t value) {
    SetSchemaValue(m_ptr, "CSMatchStats_t", "m_iEnemy5Ks", true, value);
}

int32_t GCSMatchStats_t::GetEnemy4Ks() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSMatchStats_t", "m_iEnemy4Ks");
}

void GCSMatchStats_t::SetEnemy4Ks(int32_t value) {
    SetSchemaValue(m_ptr, "CSMatchStats_t", "m_iEnemy4Ks", true, value);
}

int32_t GCSMatchStats_t::GetEnemy3Ks() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSMatchStats_t", "m_iEnemy3Ks");
}

void GCSMatchStats_t::SetEnemy3Ks(int32_t value) {
    SetSchemaValue(m_ptr, "CSMatchStats_t", "m_iEnemy3Ks", true, value);
}

int32_t GCSMatchStats_t::GetEnemyKnifeKills() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSMatchStats_t", "m_iEnemyKnifeKills");
}

void GCSMatchStats_t::SetEnemyKnifeKills(int32_t value) {
    SetSchemaValue(m_ptr, "CSMatchStats_t", "m_iEnemyKnifeKills", true, value);
}

int32_t GCSMatchStats_t::GetEnemyTaserKills() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSMatchStats_t", "m_iEnemyTaserKills");
}

void GCSMatchStats_t::SetEnemyTaserKills(int32_t value) {
    SetSchemaValue(m_ptr, "CSMatchStats_t", "m_iEnemyTaserKills", true, value);
}

int32_t GCSMatchStats_t::GetEnemy2Ks() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSMatchStats_t", "m_iEnemy2Ks");
}

void GCSMatchStats_t::SetEnemy2Ks(int32_t value) {
    SetSchemaValue(m_ptr, "CSMatchStats_t", "m_iEnemy2Ks", true, value);
}

int32_t GCSMatchStats_t::GetUtility_Count() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSMatchStats_t", "m_iUtility_Count");
}

void GCSMatchStats_t::SetUtility_Count(int32_t value) {
    SetSchemaValue(m_ptr, "CSMatchStats_t", "m_iUtility_Count", true, value);
}

int32_t GCSMatchStats_t::GetUtility_Successes() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSMatchStats_t", "m_iUtility_Successes");
}

void GCSMatchStats_t::SetUtility_Successes(int32_t value) {
    SetSchemaValue(m_ptr, "CSMatchStats_t", "m_iUtility_Successes", true, value);
}

int32_t GCSMatchStats_t::GetUtility_Enemies() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSMatchStats_t", "m_iUtility_Enemies");
}

void GCSMatchStats_t::SetUtility_Enemies(int32_t value) {
    SetSchemaValue(m_ptr, "CSMatchStats_t", "m_iUtility_Enemies", true, value);
}

int32_t GCSMatchStats_t::GetFlash_Count() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSMatchStats_t", "m_iFlash_Count");
}

void GCSMatchStats_t::SetFlash_Count(int32_t value) {
    SetSchemaValue(m_ptr, "CSMatchStats_t", "m_iFlash_Count", true, value);
}

int32_t GCSMatchStats_t::GetFlash_Successes() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSMatchStats_t", "m_iFlash_Successes");
}

void GCSMatchStats_t::SetFlash_Successes(int32_t value) {
    SetSchemaValue(m_ptr, "CSMatchStats_t", "m_iFlash_Successes", true, value);
}

int32_t GCSMatchStats_t::GetHealthPointsRemovedTotal() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSMatchStats_t", "m_nHealthPointsRemovedTotal");
}

void GCSMatchStats_t::SetHealthPointsRemovedTotal(int32_t value) {
    SetSchemaValue(m_ptr, "CSMatchStats_t", "m_nHealthPointsRemovedTotal", true, value);
}

int32_t GCSMatchStats_t::GetHealthPointsDealtTotal() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSMatchStats_t", "m_nHealthPointsDealtTotal");
}

void GCSMatchStats_t::SetHealthPointsDealtTotal(int32_t value) {
    SetSchemaValue(m_ptr, "CSMatchStats_t", "m_nHealthPointsDealtTotal", true, value);
}

int32_t GCSMatchStats_t::GetShotsFiredTotal() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSMatchStats_t", "m_nShotsFiredTotal");
}

void GCSMatchStats_t::SetShotsFiredTotal(int32_t value) {
    SetSchemaValue(m_ptr, "CSMatchStats_t", "m_nShotsFiredTotal", true, value);
}

int32_t GCSMatchStats_t::GetShotsOnTargetTotal() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSMatchStats_t", "m_nShotsOnTargetTotal");
}

void GCSMatchStats_t::SetShotsOnTargetTotal(int32_t value) {
    SetSchemaValue(m_ptr, "CSMatchStats_t", "m_nShotsOnTargetTotal", true, value);
}

int32_t GCSMatchStats_t::Get1v1Count() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSMatchStats_t", "m_i1v1Count");
}

void GCSMatchStats_t::Set1v1Count(int32_t value) {
    SetSchemaValue(m_ptr, "CSMatchStats_t", "m_i1v1Count", true, value);
}

int32_t GCSMatchStats_t::Get1v1Wins() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSMatchStats_t", "m_i1v1Wins");
}

void GCSMatchStats_t::Set1v1Wins(int32_t value) {
    SetSchemaValue(m_ptr, "CSMatchStats_t", "m_i1v1Wins", true, value);
}

int32_t GCSMatchStats_t::Get1v2Count() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSMatchStats_t", "m_i1v2Count");
}

void GCSMatchStats_t::Set1v2Count(int32_t value) {
    SetSchemaValue(m_ptr, "CSMatchStats_t", "m_i1v2Count", true, value);
}

int32_t GCSMatchStats_t::Get1v2Wins() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSMatchStats_t", "m_i1v2Wins");
}

void GCSMatchStats_t::Set1v2Wins(int32_t value) {
    SetSchemaValue(m_ptr, "CSMatchStats_t", "m_i1v2Wins", true, value);
}

int32_t GCSMatchStats_t::GetEntryCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSMatchStats_t", "m_iEntryCount");
}

void GCSMatchStats_t::SetEntryCount(int32_t value) {
    SetSchemaValue(m_ptr, "CSMatchStats_t", "m_iEntryCount", true, value);
}

int32_t GCSMatchStats_t::GetEntryWins() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSMatchStats_t", "m_iEntryWins");
}

void GCSMatchStats_t::SetEntryWins(int32_t value) {
    SetSchemaValue(m_ptr, "CSMatchStats_t", "m_iEntryWins", true, value);
}

std::string GCSMatchStats_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSMatchStats_t::IsValid() {
    return (m_ptr != nullptr);
}

GCFuncLadder::GCFuncLadder(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFuncLadder::GCFuncLadder(void *ptr) {
    m_ptr = ptr;
}

Vector GCFuncLadder::GetLadderDir() const {
    return GetSchemaValue<Vector>(m_ptr, "CFuncLadder", "m_vecLadderDir");
}

void GCFuncLadder::SetLadderDir(Vector value) {
    SetSchemaValue(m_ptr, "CFuncLadder", "m_vecLadderDir", false, value);
}

Vector GCFuncLadder::GetLocalTop() const {
    return GetSchemaValue<Vector>(m_ptr, "CFuncLadder", "m_vecLocalTop");
}

void GCFuncLadder::SetLocalTop(Vector value) {
    SetSchemaValue(m_ptr, "CFuncLadder", "m_vecLocalTop", false, value);
}

Vector GCFuncLadder::GetPlayerMountPositionTop() const {
    return GetSchemaValue<Vector>(m_ptr, "CFuncLadder", "m_vecPlayerMountPositionTop");
}

void GCFuncLadder::SetPlayerMountPositionTop(Vector value) {
    SetSchemaValue(m_ptr, "CFuncLadder", "m_vecPlayerMountPositionTop", false, value);
}

Vector GCFuncLadder::GetPlayerMountPositionBottom() const {
    return GetSchemaValue<Vector>(m_ptr, "CFuncLadder", "m_vecPlayerMountPositionBottom");
}

void GCFuncLadder::SetPlayerMountPositionBottom(Vector value) {
    SetSchemaValue(m_ptr, "CFuncLadder", "m_vecPlayerMountPositionBottom", false, value);
}

float GCFuncLadder::GetAutoRideSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CFuncLadder", "m_flAutoRideSpeed");
}

void GCFuncLadder::SetAutoRideSpeed(float value) {
    SetSchemaValue(m_ptr, "CFuncLadder", "m_flAutoRideSpeed", false, value);
}

bool GCFuncLadder::GetDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CFuncLadder", "m_bDisabled");
}

void GCFuncLadder::SetDisabled(bool value) {
    SetSchemaValue(m_ptr, "CFuncLadder", "m_bDisabled", false, value);
}

bool GCFuncLadder::GetFakeLadder() const {
    return GetSchemaValue<bool>(m_ptr, "CFuncLadder", "m_bFakeLadder");
}

void GCFuncLadder::SetFakeLadder(bool value) {
    SetSchemaValue(m_ptr, "CFuncLadder", "m_bFakeLadder", false, value);
}

bool GCFuncLadder::GetHasSlack() const {
    return GetSchemaValue<bool>(m_ptr, "CFuncLadder", "m_bHasSlack");
}

void GCFuncLadder::SetHasSlack(bool value) {
    SetSchemaValue(m_ptr, "CFuncLadder", "m_bHasSlack", false, value);
}

CUtlSymbolLarge GCFuncLadder::GetSurfacePropName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncLadder", "m_surfacePropName");
}

void GCFuncLadder::SetSurfacePropName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFuncLadder", "m_surfacePropName", false, value);
}

GCEntityIOOutput GCFuncLadder::GetOnPlayerGotOnLadder() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CFuncLadder", "m_OnPlayerGotOnLadder");
}

void GCFuncLadder::SetOnPlayerGotOnLadder(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CFuncLadder", "m_OnPlayerGotOnLadder", false, value);
}

GCEntityIOOutput GCFuncLadder::GetOnPlayerGotOffLadder() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CFuncLadder", "m_OnPlayerGotOffLadder");
}

void GCFuncLadder::SetOnPlayerGotOffLadder(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CFuncLadder", "m_OnPlayerGotOffLadder", false, value);
}

std::string GCFuncLadder::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFuncLadder::IsValid() {
    return (m_ptr != nullptr);
}

GCTriggerSndSosOpvar::GCTriggerSndSosOpvar(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTriggerSndSosOpvar::GCTriggerSndSosOpvar(void *ptr) {
    m_ptr = ptr;
}

Vector GCTriggerSndSosOpvar::GetPosition() const {
    return GetSchemaValue<Vector>(m_ptr, "CTriggerSndSosOpvar", "m_flPosition");
}

void GCTriggerSndSosOpvar::SetPosition(Vector value) {
    SetSchemaValue(m_ptr, "CTriggerSndSosOpvar", "m_flPosition", false, value);
}

float GCTriggerSndSosOpvar::GetCenterSize() const {
    return GetSchemaValue<float>(m_ptr, "CTriggerSndSosOpvar", "m_flCenterSize");
}

void GCTriggerSndSosOpvar::SetCenterSize(float value) {
    SetSchemaValue(m_ptr, "CTriggerSndSosOpvar", "m_flCenterSize", false, value);
}

float GCTriggerSndSosOpvar::GetMinVal() const {
    return GetSchemaValue<float>(m_ptr, "CTriggerSndSosOpvar", "m_flMinVal");
}

void GCTriggerSndSosOpvar::SetMinVal(float value) {
    SetSchemaValue(m_ptr, "CTriggerSndSosOpvar", "m_flMinVal", false, value);
}

float GCTriggerSndSosOpvar::GetMaxVal() const {
    return GetSchemaValue<float>(m_ptr, "CTriggerSndSosOpvar", "m_flMaxVal");
}

void GCTriggerSndSosOpvar::SetMaxVal(float value) {
    SetSchemaValue(m_ptr, "CTriggerSndSosOpvar", "m_flMaxVal", false, value);
}

CUtlSymbolLarge GCTriggerSndSosOpvar::GetOpvarName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CTriggerSndSosOpvar", "m_opvarName");
}

void GCTriggerSndSosOpvar::SetOpvarName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CTriggerSndSosOpvar", "m_opvarName", false, value);
}

CUtlSymbolLarge GCTriggerSndSosOpvar::GetStackName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CTriggerSndSosOpvar", "m_stackName");
}

void GCTriggerSndSosOpvar::SetStackName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CTriggerSndSosOpvar", "m_stackName", false, value);
}

CUtlSymbolLarge GCTriggerSndSosOpvar::GetOperatorName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CTriggerSndSosOpvar", "m_operatorName");
}

void GCTriggerSndSosOpvar::SetOperatorName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CTriggerSndSosOpvar", "m_operatorName", false, value);
}

bool GCTriggerSndSosOpvar::GetVolIs2D() const {
    return GetSchemaValue<bool>(m_ptr, "CTriggerSndSosOpvar", "m_bVolIs2D");
}

void GCTriggerSndSosOpvar::SetVolIs2D(bool value) {
    SetSchemaValue(m_ptr, "CTriggerSndSosOpvar", "m_bVolIs2D", false, value);
}

std::string GCTriggerSndSosOpvar::GetOpvarNameChar() const {
    return GetSchemaValuePtr<char>(m_ptr, "CTriggerSndSosOpvar", "m_opvarNameChar");
}

void GCTriggerSndSosOpvar::SetOpvarNameChar(std::string value) {
    WriteSchemaPtrValue(m_ptr, "CTriggerSndSosOpvar", "m_opvarNameChar", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 256);
}

std::string GCTriggerSndSosOpvar::GetStackNameChar() const {
    return GetSchemaValuePtr<char>(m_ptr, "CTriggerSndSosOpvar", "m_stackNameChar");
}

void GCTriggerSndSosOpvar::SetStackNameChar(std::string value) {
    WriteSchemaPtrValue(m_ptr, "CTriggerSndSosOpvar", "m_stackNameChar", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 256);
}

std::string GCTriggerSndSosOpvar::GetOperatorNameChar() const {
    return GetSchemaValuePtr<char>(m_ptr, "CTriggerSndSosOpvar", "m_operatorNameChar");
}

void GCTriggerSndSosOpvar::SetOperatorNameChar(std::string value) {
    WriteSchemaPtrValue(m_ptr, "CTriggerSndSosOpvar", "m_operatorNameChar", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 256);
}

Vector GCTriggerSndSosOpvar::GetVecNormPos() const {
    return GetSchemaValue<Vector>(m_ptr, "CTriggerSndSosOpvar", "m_VecNormPos");
}

void GCTriggerSndSosOpvar::SetVecNormPos(Vector value) {
    SetSchemaValue(m_ptr, "CTriggerSndSosOpvar", "m_VecNormPos", false, value);
}

float GCTriggerSndSosOpvar::GetNormCenterSize() const {
    return GetSchemaValue<float>(m_ptr, "CTriggerSndSosOpvar", "m_flNormCenterSize");
}

void GCTriggerSndSosOpvar::SetNormCenterSize(float value) {
    SetSchemaValue(m_ptr, "CTriggerSndSosOpvar", "m_flNormCenterSize", false, value);
}

std::string GCTriggerSndSosOpvar::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTriggerSndSosOpvar::IsValid() {
    return (m_ptr != nullptr);
}

GCItemHeavyAssaultSuit::GCItemHeavyAssaultSuit(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCItemHeavyAssaultSuit::GCItemHeavyAssaultSuit(void *ptr) {
    m_ptr = ptr;
}

std::string GCItemHeavyAssaultSuit::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCItemHeavyAssaultSuit::IsValid() {
    return (m_ptr != nullptr);
}

GCScriptedSequence::GCScriptedSequence(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCScriptedSequence::GCScriptedSequence(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCScriptedSequence::GetEntry() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CScriptedSequence", "m_iszEntry");
}

void GCScriptedSequence::SetEntry(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_iszEntry", false, value);
}

CUtlSymbolLarge GCScriptedSequence::GetPreIdle() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CScriptedSequence", "m_iszPreIdle");
}

void GCScriptedSequence::SetPreIdle(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_iszPreIdle", false, value);
}

CUtlSymbolLarge GCScriptedSequence::GetPlay() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CScriptedSequence", "m_iszPlay");
}

void GCScriptedSequence::SetPlay(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_iszPlay", false, value);
}

CUtlSymbolLarge GCScriptedSequence::GetPostIdle() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CScriptedSequence", "m_iszPostIdle");
}

void GCScriptedSequence::SetPostIdle(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_iszPostIdle", false, value);
}

CUtlSymbolLarge GCScriptedSequence::GetModifierToAddOnPlay() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CScriptedSequence", "m_iszModifierToAddOnPlay");
}

void GCScriptedSequence::SetModifierToAddOnPlay(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_iszModifierToAddOnPlay", false, value);
}

CUtlSymbolLarge GCScriptedSequence::GetNextScript() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CScriptedSequence", "m_iszNextScript");
}

void GCScriptedSequence::SetNextScript(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_iszNextScript", false, value);
}

CUtlSymbolLarge GCScriptedSequence::GetEntity() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CScriptedSequence", "m_iszEntity");
}

void GCScriptedSequence::SetEntity(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_iszEntity", false, value);
}

CUtlSymbolLarge GCScriptedSequence::GetSyncGroup() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CScriptedSequence", "m_iszSyncGroup");
}

void GCScriptedSequence::SetSyncGroup(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_iszSyncGroup", false, value);
}

ScriptedMoveTo_t GCScriptedSequence::GetMoveTo() const {
    return GetSchemaValue<ScriptedMoveTo_t>(m_ptr, "CScriptedSequence", "m_nMoveTo");
}

void GCScriptedSequence::SetMoveTo(ScriptedMoveTo_t value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_nMoveTo", false, value);
}

MovementGait_t GCScriptedSequence::GetMoveToGait() const {
    return GetSchemaValue<MovementGait_t>(m_ptr, "CScriptedSequence", "m_nMoveToGait");
}

void GCScriptedSequence::SetMoveToGait(MovementGait_t value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_nMoveToGait", false, value);
}

bool GCScriptedSequence::GetIsPlayingPreIdle() const {
    return GetSchemaValue<bool>(m_ptr, "CScriptedSequence", "m_bIsPlayingPreIdle");
}

void GCScriptedSequence::SetIsPlayingPreIdle(bool value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_bIsPlayingPreIdle", false, value);
}

bool GCScriptedSequence::GetIsPlayingEntry() const {
    return GetSchemaValue<bool>(m_ptr, "CScriptedSequence", "m_bIsPlayingEntry");
}

void GCScriptedSequence::SetIsPlayingEntry(bool value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_bIsPlayingEntry", false, value);
}

bool GCScriptedSequence::GetIsPlayingAction() const {
    return GetSchemaValue<bool>(m_ptr, "CScriptedSequence", "m_bIsPlayingAction");
}

void GCScriptedSequence::SetIsPlayingAction(bool value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_bIsPlayingAction", false, value);
}

bool GCScriptedSequence::GetIsPlayingPostIdle() const {
    return GetSchemaValue<bool>(m_ptr, "CScriptedSequence", "m_bIsPlayingPostIdle");
}

void GCScriptedSequence::SetIsPlayingPostIdle(bool value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_bIsPlayingPostIdle", false, value);
}

bool GCScriptedSequence::GetDontRotateOther() const {
    return GetSchemaValue<bool>(m_ptr, "CScriptedSequence", "m_bDontRotateOther");
}

void GCScriptedSequence::SetDontRotateOther(bool value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_bDontRotateOther", false, value);
}

bool GCScriptedSequence::GetIsRepeatable() const {
    return GetSchemaValue<bool>(m_ptr, "CScriptedSequence", "m_bIsRepeatable");
}

void GCScriptedSequence::SetIsRepeatable(bool value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_bIsRepeatable", false, value);
}

bool GCScriptedSequence::GetShouldLeaveCorpse() const {
    return GetSchemaValue<bool>(m_ptr, "CScriptedSequence", "m_bShouldLeaveCorpse");
}

void GCScriptedSequence::SetShouldLeaveCorpse(bool value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_bShouldLeaveCorpse", false, value);
}

bool GCScriptedSequence::GetStartOnSpawn() const {
    return GetSchemaValue<bool>(m_ptr, "CScriptedSequence", "m_bStartOnSpawn");
}

void GCScriptedSequence::SetStartOnSpawn(bool value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_bStartOnSpawn", false, value);
}

bool GCScriptedSequence::GetDisallowInterrupts() const {
    return GetSchemaValue<bool>(m_ptr, "CScriptedSequence", "m_bDisallowInterrupts");
}

void GCScriptedSequence::SetDisallowInterrupts(bool value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_bDisallowInterrupts", false, value);
}

bool GCScriptedSequence::GetCanOverrideNPCState() const {
    return GetSchemaValue<bool>(m_ptr, "CScriptedSequence", "m_bCanOverrideNPCState");
}

void GCScriptedSequence::SetCanOverrideNPCState(bool value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_bCanOverrideNPCState", false, value);
}

bool GCScriptedSequence::GetDontTeleportAtEnd() const {
    return GetSchemaValue<bool>(m_ptr, "CScriptedSequence", "m_bDontTeleportAtEnd");
}

void GCScriptedSequence::SetDontTeleportAtEnd(bool value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_bDontTeleportAtEnd", false, value);
}

bool GCScriptedSequence::GetHighPriority() const {
    return GetSchemaValue<bool>(m_ptr, "CScriptedSequence", "m_bHighPriority");
}

void GCScriptedSequence::SetHighPriority(bool value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_bHighPriority", false, value);
}

bool GCScriptedSequence::GetHideDebugComplaints() const {
    return GetSchemaValue<bool>(m_ptr, "CScriptedSequence", "m_bHideDebugComplaints");
}

void GCScriptedSequence::SetHideDebugComplaints(bool value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_bHideDebugComplaints", false, value);
}

bool GCScriptedSequence::GetContinueOnDeath() const {
    return GetSchemaValue<bool>(m_ptr, "CScriptedSequence", "m_bContinueOnDeath");
}

void GCScriptedSequence::SetContinueOnDeath(bool value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_bContinueOnDeath", false, value);
}

bool GCScriptedSequence::GetLoopPreIdleSequence() const {
    return GetSchemaValue<bool>(m_ptr, "CScriptedSequence", "m_bLoopPreIdleSequence");
}

void GCScriptedSequence::SetLoopPreIdleSequence(bool value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_bLoopPreIdleSequence", false, value);
}

bool GCScriptedSequence::GetLoopActionSequence() const {
    return GetSchemaValue<bool>(m_ptr, "CScriptedSequence", "m_bLoopActionSequence");
}

void GCScriptedSequence::SetLoopActionSequence(bool value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_bLoopActionSequence", false, value);
}

bool GCScriptedSequence::GetLoopPostIdleSequence() const {
    return GetSchemaValue<bool>(m_ptr, "CScriptedSequence", "m_bLoopPostIdleSequence");
}

void GCScriptedSequence::SetLoopPostIdleSequence(bool value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_bLoopPostIdleSequence", false, value);
}

bool GCScriptedSequence::GetSynchPostIdles() const {
    return GetSchemaValue<bool>(m_ptr, "CScriptedSequence", "m_bSynchPostIdles");
}

void GCScriptedSequence::SetSynchPostIdles(bool value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_bSynchPostIdles", false, value);
}

bool GCScriptedSequence::GetIgnoreLookAt() const {
    return GetSchemaValue<bool>(m_ptr, "CScriptedSequence", "m_bIgnoreLookAt");
}

void GCScriptedSequence::SetIgnoreLookAt(bool value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_bIgnoreLookAt", false, value);
}

bool GCScriptedSequence::GetIgnoreGravity() const {
    return GetSchemaValue<bool>(m_ptr, "CScriptedSequence", "m_bIgnoreGravity");
}

void GCScriptedSequence::SetIgnoreGravity(bool value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_bIgnoreGravity", false, value);
}

bool GCScriptedSequence::GetDisableNPCCollisions() const {
    return GetSchemaValue<bool>(m_ptr, "CScriptedSequence", "m_bDisableNPCCollisions");
}

void GCScriptedSequence::SetDisableNPCCollisions(bool value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_bDisableNPCCollisions", false, value);
}

bool GCScriptedSequence::GetKeepAnimgraphLockedPost() const {
    return GetSchemaValue<bool>(m_ptr, "CScriptedSequence", "m_bKeepAnimgraphLockedPost");
}

void GCScriptedSequence::SetKeepAnimgraphLockedPost(bool value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_bKeepAnimgraphLockedPost", false, value);
}

bool GCScriptedSequence::GetDontAddModifiers() const {
    return GetSchemaValue<bool>(m_ptr, "CScriptedSequence", "m_bDontAddModifiers");
}

void GCScriptedSequence::SetDontAddModifiers(bool value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_bDontAddModifiers", false, value);
}

float GCScriptedSequence::GetRadius() const {
    return GetSchemaValue<float>(m_ptr, "CScriptedSequence", "m_flRadius");
}

void GCScriptedSequence::SetRadius(float value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_flRadius", false, value);
}

float GCScriptedSequence::GetRepeat() const {
    return GetSchemaValue<float>(m_ptr, "CScriptedSequence", "m_flRepeat");
}

void GCScriptedSequence::SetRepeat(float value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_flRepeat", false, value);
}

float GCScriptedSequence::GetPlayAnimFadeInTime() const {
    return GetSchemaValue<float>(m_ptr, "CScriptedSequence", "m_flPlayAnimFadeInTime");
}

void GCScriptedSequence::SetPlayAnimFadeInTime(float value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_flPlayAnimFadeInTime", false, value);
}

float GCScriptedSequence::GetMoveInterpTime() const {
    return GetSchemaValue<float>(m_ptr, "CScriptedSequence", "m_flMoveInterpTime");
}

void GCScriptedSequence::SetMoveInterpTime(float value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_flMoveInterpTime", false, value);
}

float GCScriptedSequence::GetAngRate() const {
    return GetSchemaValue<float>(m_ptr, "CScriptedSequence", "m_flAngRate");
}

void GCScriptedSequence::SetAngRate(float value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_flAngRate", false, value);
}

int32_t GCScriptedSequence::GetNotReadySequenceCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CScriptedSequence", "m_nNotReadySequenceCount");
}

void GCScriptedSequence::SetNotReadySequenceCount(int32_t value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_nNotReadySequenceCount", false, value);
}

bool GCScriptedSequence::GetWaitForBeginSequence() const {
    return GetSchemaValue<bool>(m_ptr, "CScriptedSequence", "m_bWaitForBeginSequence");
}

void GCScriptedSequence::SetWaitForBeginSequence(bool value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_bWaitForBeginSequence", false, value);
}

int32_t GCScriptedSequence::GetSaved_effects() const {
    return GetSchemaValue<int32_t>(m_ptr, "CScriptedSequence", "m_saved_effects");
}

void GCScriptedSequence::SetSaved_effects(int32_t value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_saved_effects", false, value);
}

int32_t GCScriptedSequence::GetSavedFlags() const {
    return GetSchemaValue<int32_t>(m_ptr, "CScriptedSequence", "m_savedFlags");
}

void GCScriptedSequence::SetSavedFlags(int32_t value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_savedFlags", false, value);
}

int32_t GCScriptedSequence::GetSavedCollisionGroup() const {
    return GetSchemaValue<int32_t>(m_ptr, "CScriptedSequence", "m_savedCollisionGroup");
}

void GCScriptedSequence::SetSavedCollisionGroup(int32_t value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_savedCollisionGroup", false, value);
}

bool GCScriptedSequence::GetInterruptable() const {
    return GetSchemaValue<bool>(m_ptr, "CScriptedSequence", "m_bInterruptable");
}

void GCScriptedSequence::SetInterruptable(bool value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_bInterruptable", false, value);
}

bool GCScriptedSequence::GetSequenceStarted() const {
    return GetSchemaValue<bool>(m_ptr, "CScriptedSequence", "m_sequenceStarted");
}

void GCScriptedSequence::SetSequenceStarted(bool value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_sequenceStarted", false, value);
}

bool GCScriptedSequence::GetPositionRelativeToOtherEntity() const {
    return GetSchemaValue<bool>(m_ptr, "CScriptedSequence", "m_bPositionRelativeToOtherEntity");
}

void GCScriptedSequence::SetPositionRelativeToOtherEntity(bool value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_bPositionRelativeToOtherEntity", false, value);
}

GCBaseEntity GCScriptedSequence::GetTargetEnt() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CScriptedSequence", "m_hTargetEnt"));
    return value;
}

void GCScriptedSequence::SetTargetEnt(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'TargetEnt' is not possible.\n");
}

GCScriptedSequence GCScriptedSequence::GetNextCine() const {
    GCScriptedSequence value(GetSchemaValuePtr<void>(m_ptr, "CScriptedSequence", "m_hNextCine"));
    return value;
}

void GCScriptedSequence::SetNextCine(GCScriptedSequence* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'NextCine' is not possible.\n");
}

bool GCScriptedSequence::GetThinking() const {
    return GetSchemaValue<bool>(m_ptr, "CScriptedSequence", "m_bThinking");
}

void GCScriptedSequence::SetThinking(bool value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_bThinking", false, value);
}

bool GCScriptedSequence::GetInitiatedSelfDelete() const {
    return GetSchemaValue<bool>(m_ptr, "CScriptedSequence", "m_bInitiatedSelfDelete");
}

void GCScriptedSequence::SetInitiatedSelfDelete(bool value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_bInitiatedSelfDelete", false, value);
}

bool GCScriptedSequence::GetIsTeleportingDueToMoveTo() const {
    return GetSchemaValue<bool>(m_ptr, "CScriptedSequence", "m_bIsTeleportingDueToMoveTo");
}

void GCScriptedSequence::SetIsTeleportingDueToMoveTo(bool value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_bIsTeleportingDueToMoveTo", false, value);
}

bool GCScriptedSequence::GetAllowCustomInterruptConditions() const {
    return GetSchemaValue<bool>(m_ptr, "CScriptedSequence", "m_bAllowCustomInterruptConditions");
}

void GCScriptedSequence::SetAllowCustomInterruptConditions(bool value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_bAllowCustomInterruptConditions", false, value);
}

GCBaseAnimGraph GCScriptedSequence::GetForcedTarget() const {
    GCBaseAnimGraph value(GetSchemaValuePtr<void>(m_ptr, "CScriptedSequence", "m_hForcedTarget"));
    return value;
}

void GCScriptedSequence::SetForcedTarget(GCBaseAnimGraph* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ForcedTarget' is not possible.\n");
}

bool GCScriptedSequence::GetDontCancelOtherSequences() const {
    return GetSchemaValue<bool>(m_ptr, "CScriptedSequence", "m_bDontCancelOtherSequences");
}

void GCScriptedSequence::SetDontCancelOtherSequences(bool value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_bDontCancelOtherSequences", false, value);
}

bool GCScriptedSequence::GetForceSynch() const {
    return GetSchemaValue<bool>(m_ptr, "CScriptedSequence", "m_bForceSynch");
}

void GCScriptedSequence::SetForceSynch(bool value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_bForceSynch", false, value);
}

bool GCScriptedSequence::GetPreventUpdateYawOnFinish() const {
    return GetSchemaValue<bool>(m_ptr, "CScriptedSequence", "m_bPreventUpdateYawOnFinish");
}

void GCScriptedSequence::SetPreventUpdateYawOnFinish(bool value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_bPreventUpdateYawOnFinish", false, value);
}

bool GCScriptedSequence::GetEnsureOnNavmeshOnFinish() const {
    return GetSchemaValue<bool>(m_ptr, "CScriptedSequence", "m_bEnsureOnNavmeshOnFinish");
}

void GCScriptedSequence::SetEnsureOnNavmeshOnFinish(bool value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_bEnsureOnNavmeshOnFinish", false, value);
}

ScriptedOnDeath_t GCScriptedSequence::GetOnDeathBehavior() const {
    return GetSchemaValue<ScriptedOnDeath_t>(m_ptr, "CScriptedSequence", "m_onDeathBehavior");
}

void GCScriptedSequence::SetOnDeathBehavior(ScriptedOnDeath_t value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_onDeathBehavior", false, value);
}

ScriptedConflictResponse_t GCScriptedSequence::GetConflictResponse() const {
    return GetSchemaValue<ScriptedConflictResponse_t>(m_ptr, "CScriptedSequence", "m_ConflictResponse");
}

void GCScriptedSequence::SetConflictResponse(ScriptedConflictResponse_t value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_ConflictResponse", false, value);
}

GCEntityIOOutput GCScriptedSequence::GetOnBeginSequence() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CScriptedSequence", "m_OnBeginSequence");
}

void GCScriptedSequence::SetOnBeginSequence(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_OnBeginSequence", false, value);
}

GCEntityIOOutput GCScriptedSequence::GetOnActionStartOrLoop() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CScriptedSequence", "m_OnActionStartOrLoop");
}

void GCScriptedSequence::SetOnActionStartOrLoop(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_OnActionStartOrLoop", false, value);
}

GCEntityIOOutput GCScriptedSequence::GetOnEndSequence() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CScriptedSequence", "m_OnEndSequence");
}

void GCScriptedSequence::SetOnEndSequence(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_OnEndSequence", false, value);
}

GCEntityIOOutput GCScriptedSequence::GetOnPostIdleEndSequence() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CScriptedSequence", "m_OnPostIdleEndSequence");
}

void GCScriptedSequence::SetOnPostIdleEndSequence(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_OnPostIdleEndSequence", false, value);
}

GCEntityIOOutput GCScriptedSequence::GetOnCancelSequence() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CScriptedSequence", "m_OnCancelSequence");
}

void GCScriptedSequence::SetOnCancelSequence(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_OnCancelSequence", false, value);
}

GCEntityIOOutput GCScriptedSequence::GetOnCancelFailedSequence() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CScriptedSequence", "m_OnCancelFailedSequence");
}

void GCScriptedSequence::SetOnCancelFailedSequence(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_OnCancelFailedSequence", false, value);
}

std::vector<GCEntityIOOutput> GCScriptedSequence::GetOnScriptEvent() const {
    GCEntityIOOutput* outValue = GetSchemaValue<GCEntityIOOutput*>(m_ptr, "CScriptedSequence", "m_OnScriptEvent"); std::vector<GCEntityIOOutput> ret; for(int i = 0; i < 8; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCScriptedSequence::SetOnScriptEvent(std::vector<GCEntityIOOutput> value) {
    GCEntityIOOutput* outValue = GetSchemaValue<GCEntityIOOutput*>(m_ptr, "CScriptedSequence", "m_OnScriptEvent"); for(int i = 0; i < 8; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CScriptedSequence", "m_OnScriptEvent", false, outValue);
}

GCBaseEntity GCScriptedSequence::GetInteractionMainEntity() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CScriptedSequence", "m_hInteractionMainEntity"));
    return value;
}

void GCScriptedSequence::SetInteractionMainEntity(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'InteractionMainEntity' is not possible.\n");
}

int32_t GCScriptedSequence::GetPlayerDeathBehavior() const {
    return GetSchemaValue<int32_t>(m_ptr, "CScriptedSequence", "m_iPlayerDeathBehavior");
}

void GCScriptedSequence::SetPlayerDeathBehavior(int32_t value) {
    SetSchemaValue(m_ptr, "CScriptedSequence", "m_iPlayerDeathBehavior", false, value);
}

std::string GCScriptedSequence::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCScriptedSequence::IsValid() {
    return (m_ptr != nullptr);
}

GCWeaponNegev::GCWeaponNegev(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWeaponNegev::GCWeaponNegev(void *ptr) {
    m_ptr = ptr;
}

std::string GCWeaponNegev::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWeaponNegev::IsValid() {
    return (m_ptr != nullptr);
}

GCWeaponGalilAR::GCWeaponGalilAR(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWeaponGalilAR::GCWeaponGalilAR(void *ptr) {
    m_ptr = ptr;
}

std::string GCWeaponGalilAR::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWeaponGalilAR::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvProjectedTexture::GCEnvProjectedTexture(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvProjectedTexture::GCEnvProjectedTexture(void *ptr) {
    m_ptr = ptr;
}

GCBaseEntity GCEnvProjectedTexture::GetTargetEntity() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CEnvProjectedTexture", "m_hTargetEntity"));
    return value;
}

void GCEnvProjectedTexture::SetTargetEntity(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'TargetEntity' is not possible.\n");
}

bool GCEnvProjectedTexture::GetState() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvProjectedTexture", "m_bState");
}

void GCEnvProjectedTexture::SetState(bool value) {
    SetSchemaValue(m_ptr, "CEnvProjectedTexture", "m_bState", false, value);
}

bool GCEnvProjectedTexture::GetAlwaysUpdate() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvProjectedTexture", "m_bAlwaysUpdate");
}

void GCEnvProjectedTexture::SetAlwaysUpdate(bool value) {
    SetSchemaValue(m_ptr, "CEnvProjectedTexture", "m_bAlwaysUpdate", false, value);
}

float GCEnvProjectedTexture::GetLightFOV() const {
    return GetSchemaValue<float>(m_ptr, "CEnvProjectedTexture", "m_flLightFOV");
}

void GCEnvProjectedTexture::SetLightFOV(float value) {
    SetSchemaValue(m_ptr, "CEnvProjectedTexture", "m_flLightFOV", false, value);
}

bool GCEnvProjectedTexture::GetEnableShadows() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvProjectedTexture", "m_bEnableShadows");
}

void GCEnvProjectedTexture::SetEnableShadows(bool value) {
    SetSchemaValue(m_ptr, "CEnvProjectedTexture", "m_bEnableShadows", false, value);
}

bool GCEnvProjectedTexture::GetSimpleProjection() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvProjectedTexture", "m_bSimpleProjection");
}

void GCEnvProjectedTexture::SetSimpleProjection(bool value) {
    SetSchemaValue(m_ptr, "CEnvProjectedTexture", "m_bSimpleProjection", false, value);
}

bool GCEnvProjectedTexture::GetLightOnlyTarget() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvProjectedTexture", "m_bLightOnlyTarget");
}

void GCEnvProjectedTexture::SetLightOnlyTarget(bool value) {
    SetSchemaValue(m_ptr, "CEnvProjectedTexture", "m_bLightOnlyTarget", false, value);
}

bool GCEnvProjectedTexture::GetLightWorld() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvProjectedTexture", "m_bLightWorld");
}

void GCEnvProjectedTexture::SetLightWorld(bool value) {
    SetSchemaValue(m_ptr, "CEnvProjectedTexture", "m_bLightWorld", false, value);
}

bool GCEnvProjectedTexture::GetCameraSpace() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvProjectedTexture", "m_bCameraSpace");
}

void GCEnvProjectedTexture::SetCameraSpace(bool value) {
    SetSchemaValue(m_ptr, "CEnvProjectedTexture", "m_bCameraSpace", false, value);
}

float GCEnvProjectedTexture::GetBrightnessScale() const {
    return GetSchemaValue<float>(m_ptr, "CEnvProjectedTexture", "m_flBrightnessScale");
}

void GCEnvProjectedTexture::SetBrightnessScale(float value) {
    SetSchemaValue(m_ptr, "CEnvProjectedTexture", "m_flBrightnessScale", false, value);
}

Color GCEnvProjectedTexture::GetLightColor() const {
    return GetSchemaValue<Color>(m_ptr, "CEnvProjectedTexture", "m_LightColor");
}

void GCEnvProjectedTexture::SetLightColor(Color value) {
    SetSchemaValue(m_ptr, "CEnvProjectedTexture", "m_LightColor", false, value);
}

float GCEnvProjectedTexture::GetIntensity() const {
    return GetSchemaValue<float>(m_ptr, "CEnvProjectedTexture", "m_flIntensity");
}

void GCEnvProjectedTexture::SetIntensity(float value) {
    SetSchemaValue(m_ptr, "CEnvProjectedTexture", "m_flIntensity", false, value);
}

float GCEnvProjectedTexture::GetLinearAttenuation() const {
    return GetSchemaValue<float>(m_ptr, "CEnvProjectedTexture", "m_flLinearAttenuation");
}

void GCEnvProjectedTexture::SetLinearAttenuation(float value) {
    SetSchemaValue(m_ptr, "CEnvProjectedTexture", "m_flLinearAttenuation", false, value);
}

float GCEnvProjectedTexture::GetQuadraticAttenuation() const {
    return GetSchemaValue<float>(m_ptr, "CEnvProjectedTexture", "m_flQuadraticAttenuation");
}

void GCEnvProjectedTexture::SetQuadraticAttenuation(float value) {
    SetSchemaValue(m_ptr, "CEnvProjectedTexture", "m_flQuadraticAttenuation", false, value);
}

bool GCEnvProjectedTexture::GetVolumetric() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvProjectedTexture", "m_bVolumetric");
}

void GCEnvProjectedTexture::SetVolumetric(bool value) {
    SetSchemaValue(m_ptr, "CEnvProjectedTexture", "m_bVolumetric", false, value);
}

float GCEnvProjectedTexture::GetNoiseStrength() const {
    return GetSchemaValue<float>(m_ptr, "CEnvProjectedTexture", "m_flNoiseStrength");
}

void GCEnvProjectedTexture::SetNoiseStrength(float value) {
    SetSchemaValue(m_ptr, "CEnvProjectedTexture", "m_flNoiseStrength", false, value);
}

float GCEnvProjectedTexture::GetFlashlightTime() const {
    return GetSchemaValue<float>(m_ptr, "CEnvProjectedTexture", "m_flFlashlightTime");
}

void GCEnvProjectedTexture::SetFlashlightTime(float value) {
    SetSchemaValue(m_ptr, "CEnvProjectedTexture", "m_flFlashlightTime", false, value);
}

uint32_t GCEnvProjectedTexture::GetNumPlanes() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CEnvProjectedTexture", "m_nNumPlanes");
}

void GCEnvProjectedTexture::SetNumPlanes(uint32_t value) {
    SetSchemaValue(m_ptr, "CEnvProjectedTexture", "m_nNumPlanes", false, value);
}

float GCEnvProjectedTexture::GetPlaneOffset() const {
    return GetSchemaValue<float>(m_ptr, "CEnvProjectedTexture", "m_flPlaneOffset");
}

void GCEnvProjectedTexture::SetPlaneOffset(float value) {
    SetSchemaValue(m_ptr, "CEnvProjectedTexture", "m_flPlaneOffset", false, value);
}

float GCEnvProjectedTexture::GetVolumetricIntensity() const {
    return GetSchemaValue<float>(m_ptr, "CEnvProjectedTexture", "m_flVolumetricIntensity");
}

void GCEnvProjectedTexture::SetVolumetricIntensity(float value) {
    SetSchemaValue(m_ptr, "CEnvProjectedTexture", "m_flVolumetricIntensity", false, value);
}

float GCEnvProjectedTexture::GetColorTransitionTime() const {
    return GetSchemaValue<float>(m_ptr, "CEnvProjectedTexture", "m_flColorTransitionTime");
}

void GCEnvProjectedTexture::SetColorTransitionTime(float value) {
    SetSchemaValue(m_ptr, "CEnvProjectedTexture", "m_flColorTransitionTime", false, value);
}

float GCEnvProjectedTexture::GetAmbient() const {
    return GetSchemaValue<float>(m_ptr, "CEnvProjectedTexture", "m_flAmbient");
}

void GCEnvProjectedTexture::SetAmbient(float value) {
    SetSchemaValue(m_ptr, "CEnvProjectedTexture", "m_flAmbient", false, value);
}

std::string GCEnvProjectedTexture::GetSpotlightTextureName() const {
    return GetSchemaValuePtr<char>(m_ptr, "CEnvProjectedTexture", "m_SpotlightTextureName");
}

void GCEnvProjectedTexture::SetSpotlightTextureName(std::string value) {
    WriteSchemaPtrValue(m_ptr, "CEnvProjectedTexture", "m_SpotlightTextureName", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 512);
}

int32_t GCEnvProjectedTexture::GetSpotlightTextureFrame() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvProjectedTexture", "m_nSpotlightTextureFrame");
}

void GCEnvProjectedTexture::SetSpotlightTextureFrame(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvProjectedTexture", "m_nSpotlightTextureFrame", false, value);
}

uint32_t GCEnvProjectedTexture::GetShadowQuality() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CEnvProjectedTexture", "m_nShadowQuality");
}

void GCEnvProjectedTexture::SetShadowQuality(uint32_t value) {
    SetSchemaValue(m_ptr, "CEnvProjectedTexture", "m_nShadowQuality", false, value);
}

float GCEnvProjectedTexture::GetNearZ() const {
    return GetSchemaValue<float>(m_ptr, "CEnvProjectedTexture", "m_flNearZ");
}

void GCEnvProjectedTexture::SetNearZ(float value) {
    SetSchemaValue(m_ptr, "CEnvProjectedTexture", "m_flNearZ", false, value);
}

float GCEnvProjectedTexture::GetFarZ() const {
    return GetSchemaValue<float>(m_ptr, "CEnvProjectedTexture", "m_flFarZ");
}

void GCEnvProjectedTexture::SetFarZ(float value) {
    SetSchemaValue(m_ptr, "CEnvProjectedTexture", "m_flFarZ", false, value);
}

float GCEnvProjectedTexture::GetProjectionSize() const {
    return GetSchemaValue<float>(m_ptr, "CEnvProjectedTexture", "m_flProjectionSize");
}

void GCEnvProjectedTexture::SetProjectionSize(float value) {
    SetSchemaValue(m_ptr, "CEnvProjectedTexture", "m_flProjectionSize", false, value);
}

float GCEnvProjectedTexture::GetRotation() const {
    return GetSchemaValue<float>(m_ptr, "CEnvProjectedTexture", "m_flRotation");
}

void GCEnvProjectedTexture::SetRotation(float value) {
    SetSchemaValue(m_ptr, "CEnvProjectedTexture", "m_flRotation", false, value);
}

bool GCEnvProjectedTexture::GetFlipHorizontal() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvProjectedTexture", "m_bFlipHorizontal");
}

void GCEnvProjectedTexture::SetFlipHorizontal(bool value) {
    SetSchemaValue(m_ptr, "CEnvProjectedTexture", "m_bFlipHorizontal", false, value);
}

std::string GCEnvProjectedTexture::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvProjectedTexture::IsValid() {
    return (m_ptr != nullptr);
}

GCDynamicPropAlias_prop_dynamic_override::GCDynamicPropAlias_prop_dynamic_override(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCDynamicPropAlias_prop_dynamic_override::GCDynamicPropAlias_prop_dynamic_override(void *ptr) {
    m_ptr = ptr;
}

std::string GCDynamicPropAlias_prop_dynamic_override::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCDynamicPropAlias_prop_dynamic_override::IsValid() {
    return (m_ptr != nullptr);
}

GCSceneListManager::GCSceneListManager(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSceneListManager::GCSceneListManager(void *ptr) {
    m_ptr = ptr;
}

std::vector<CUtlSymbolLarge> GCSceneListManager::GetScenes() const {
    CUtlSymbolLarge* outValue = GetSchemaValue<CUtlSymbolLarge*>(m_ptr, "CSceneListManager", "m_iszScenes"); std::vector<CUtlSymbolLarge> ret; for(int i = 0; i < 16; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCSceneListManager::SetScenes(std::vector<CUtlSymbolLarge> value) {
    CUtlSymbolLarge* outValue = GetSchemaValue<CUtlSymbolLarge*>(m_ptr, "CSceneListManager", "m_iszScenes"); for(int i = 0; i < 16; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CSceneListManager", "m_iszScenes", false, outValue);
}

std::vector<GCBaseEntity*> GCSceneListManager::GetScenes1() const {
    GCBaseEntity** outValue = GetSchemaValue<GCBaseEntity**>(m_ptr, "CSceneListManager", "m_hScenes"); std::vector<GCBaseEntity*> ret; for(int i = 0; i < 16; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCSceneListManager::SetScenes1(std::vector<GCBaseEntity*> value) {
    GCBaseEntity** outValue = GetSchemaValue<GCBaseEntity**>(m_ptr, "CSceneListManager", "m_hScenes"); for(int i = 0; i < 16; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CSceneListManager", "m_hScenes", false, outValue);
}

std::string GCSceneListManager::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSceneListManager::IsValid() {
    return (m_ptr != nullptr);
}

GCSplineConstraint::GCSplineConstraint(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSplineConstraint::GCSplineConstraint(void *ptr) {
    m_ptr = ptr;
}

Vector GCSplineConstraint::GetAnchorOffsetRestore() const {
    return GetSchemaValue<Vector>(m_ptr, "CSplineConstraint", "m_vAnchorOffsetRestore");
}

void GCSplineConstraint::SetAnchorOffsetRestore(Vector value) {
    SetSchemaValue(m_ptr, "CSplineConstraint", "m_vAnchorOffsetRestore", false, value);
}

std::string GCSplineConstraint::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSplineConstraint::IsValid() {
    return (m_ptr != nullptr);
}

GCCSObserver_ViewModelServices::GCCSObserver_ViewModelServices(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSObserver_ViewModelServices::GCCSObserver_ViewModelServices(void *ptr) {
    m_ptr = ptr;
}

std::string GCCSObserver_ViewModelServices::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSObserver_ViewModelServices::IsValid() {
    return (m_ptr != nullptr);
}

GCDynamicPropAlias_dynamic_prop::GCDynamicPropAlias_dynamic_prop(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCDynamicPropAlias_dynamic_prop::GCDynamicPropAlias_dynamic_prop(void *ptr) {
    m_ptr = ptr;
}

std::string GCDynamicPropAlias_dynamic_prop::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCDynamicPropAlias_dynamic_prop::IsValid() {
    return (m_ptr != nullptr);
}

GModelConfigHandle_t::GModelConfigHandle_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GModelConfigHandle_t::GModelConfigHandle_t(void *ptr) {
    m_ptr = ptr;
}

uint32_t GModelConfigHandle_t::GetValue() const {
    return GetSchemaValue<uint32_t>(m_ptr, "ModelConfigHandle_t", "m_Value");
}

void GModelConfigHandle_t::SetValue(uint32_t value) {
    SetSchemaValue(m_ptr, "ModelConfigHandle_t", "m_Value", true, value);
}

std::string GModelConfigHandle_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GModelConfigHandle_t::IsValid() {
    return (m_ptr != nullptr);
}

GCPhysicsPropMultiplayer::GCPhysicsPropMultiplayer(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPhysicsPropMultiplayer::GCPhysicsPropMultiplayer(void *ptr) {
    m_ptr = ptr;
}

std::string GCPhysicsPropMultiplayer::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPhysicsPropMultiplayer::IsValid() {
    return (m_ptr != nullptr);
}

GCFuncTrackChange::GCFuncTrackChange(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFuncTrackChange::GCFuncTrackChange(void *ptr) {
    m_ptr = ptr;
}

GCPathTrack GCFuncTrackChange::GetTrackTop() const {
    GCPathTrack value(GetSchemaValuePtr<void>(m_ptr, "CFuncTrackChange", "m_trackTop"));
    return value;
}

void GCFuncTrackChange::SetTrackTop(GCPathTrack* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'TrackTop' is not possible.\n");
}

GCPathTrack GCFuncTrackChange::GetTrackBottom() const {
    GCPathTrack value(GetSchemaValuePtr<void>(m_ptr, "CFuncTrackChange", "m_trackBottom"));
    return value;
}

void GCFuncTrackChange::SetTrackBottom(GCPathTrack* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'TrackBottom' is not possible.\n");
}

GCFuncTrackTrain GCFuncTrackChange::GetTrain() const {
    GCFuncTrackTrain value(GetSchemaValuePtr<void>(m_ptr, "CFuncTrackChange", "m_train"));
    return value;
}

void GCFuncTrackChange::SetTrain(GCFuncTrackTrain* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Train' is not possible.\n");
}

CUtlSymbolLarge GCFuncTrackChange::GetTrackTopName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncTrackChange", "m_trackTopName");
}

void GCFuncTrackChange::SetTrackTopName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFuncTrackChange", "m_trackTopName", false, value);
}

CUtlSymbolLarge GCFuncTrackChange::GetTrackBottomName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncTrackChange", "m_trackBottomName");
}

void GCFuncTrackChange::SetTrackBottomName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFuncTrackChange", "m_trackBottomName", false, value);
}

CUtlSymbolLarge GCFuncTrackChange::GetTrainName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncTrackChange", "m_trainName");
}

void GCFuncTrackChange::SetTrainName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFuncTrackChange", "m_trainName", false, value);
}

TRAIN_CODE GCFuncTrackChange::GetCode() const {
    return GetSchemaValue<TRAIN_CODE>(m_ptr, "CFuncTrackChange", "m_code");
}

void GCFuncTrackChange::SetCode(TRAIN_CODE value) {
    SetSchemaValue(m_ptr, "CFuncTrackChange", "m_code", false, value);
}

int32_t GCFuncTrackChange::GetTargetState() const {
    return GetSchemaValue<int32_t>(m_ptr, "CFuncTrackChange", "m_targetState");
}

void GCFuncTrackChange::SetTargetState(int32_t value) {
    SetSchemaValue(m_ptr, "CFuncTrackChange", "m_targetState", false, value);
}

int32_t GCFuncTrackChange::GetUse() const {
    return GetSchemaValue<int32_t>(m_ptr, "CFuncTrackChange", "m_use");
}

void GCFuncTrackChange::SetUse(int32_t value) {
    SetSchemaValue(m_ptr, "CFuncTrackChange", "m_use", false, value);
}

std::string GCFuncTrackChange::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFuncTrackChange::IsValid() {
    return (m_ptr != nullptr);
}

GCMarkupVolume::GCMarkupVolume(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMarkupVolume::GCMarkupVolume(void *ptr) {
    m_ptr = ptr;
}

bool GCMarkupVolume::GetDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CMarkupVolume", "m_bDisabled");
}

void GCMarkupVolume::SetDisabled(bool value) {
    SetSchemaValue(m_ptr, "CMarkupVolume", "m_bDisabled", false, value);
}

std::string GCMarkupVolume::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMarkupVolume::IsValid() {
    return (m_ptr != nullptr);
}

GCInfoPlayerTerrorist::GCInfoPlayerTerrorist(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCInfoPlayerTerrorist::GCInfoPlayerTerrorist(void *ptr) {
    m_ptr = ptr;
}

std::string GCInfoPlayerTerrorist::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCInfoPlayerTerrorist::IsValid() {
    return (m_ptr != nullptr);
}

GVelocitySampler::GVelocitySampler(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVelocitySampler::GVelocitySampler(void *ptr) {
    m_ptr = ptr;
}

Vector GVelocitySampler::GetPrevSample() const {
    return GetSchemaValue<Vector>(m_ptr, "VelocitySampler", "m_prevSample");
}

void GVelocitySampler::SetPrevSample(Vector value) {
    SetSchemaValue(m_ptr, "VelocitySampler", "m_prevSample", false, value);
}

float GVelocitySampler::GetIdealSampleRate() const {
    return GetSchemaValue<float>(m_ptr, "VelocitySampler", "m_fIdealSampleRate");
}

void GVelocitySampler::SetIdealSampleRate(float value) {
    SetSchemaValue(m_ptr, "VelocitySampler", "m_fIdealSampleRate", false, value);
}

std::string GVelocitySampler::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVelocitySampler::IsValid() {
    return (m_ptr != nullptr);
}

GCTankTargetChange::GCTankTargetChange(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTankTargetChange::GCTankTargetChange(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCTankTargetChange::GetNewTargetName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CTankTargetChange", "m_newTargetName");
}

void GCTankTargetChange::SetNewTargetName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CTankTargetChange", "m_newTargetName", false, value);
}

std::string GCTankTargetChange::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTankTargetChange::IsValid() {
    return (m_ptr != nullptr);
}

GCLogicCompare::GCLogicCompare(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCLogicCompare::GCLogicCompare(void *ptr) {
    m_ptr = ptr;
}

float GCLogicCompare::GetInValue() const {
    return GetSchemaValue<float>(m_ptr, "CLogicCompare", "m_flInValue");
}

void GCLogicCompare::SetInValue(float value) {
    SetSchemaValue(m_ptr, "CLogicCompare", "m_flInValue", false, value);
}

float GCLogicCompare::GetCompareValue() const {
    return GetSchemaValue<float>(m_ptr, "CLogicCompare", "m_flCompareValue");
}

void GCLogicCompare::SetCompareValue(float value) {
    SetSchemaValue(m_ptr, "CLogicCompare", "m_flCompareValue", false, value);
}

std::string GCLogicCompare::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCLogicCompare::IsValid() {
    return (m_ptr != nullptr);
}

GCCSPlayer_BulletServices::GCCSPlayer_BulletServices(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSPlayer_BulletServices::GCCSPlayer_BulletServices(void *ptr) {
    m_ptr = ptr;
}

int32_t GCCSPlayer_BulletServices::GetTotalHitsOnServer() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayer_BulletServices", "m_totalHitsOnServer");
}

void GCCSPlayer_BulletServices::SetTotalHitsOnServer(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayer_BulletServices", "m_totalHitsOnServer", false, value);
}

std::string GCCSPlayer_BulletServices::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSPlayer_BulletServices::IsValid() {
    return (m_ptr != nullptr);
}

GCLogicRelay::GCLogicRelay(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCLogicRelay::GCLogicRelay(void *ptr) {
    m_ptr = ptr;
}

GCEntityIOOutput GCLogicRelay::GetOnTrigger() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CLogicRelay", "m_OnTrigger");
}

void GCLogicRelay::SetOnTrigger(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CLogicRelay", "m_OnTrigger", false, value);
}

GCEntityIOOutput GCLogicRelay::GetOnSpawn() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CLogicRelay", "m_OnSpawn");
}

void GCLogicRelay::SetOnSpawn(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CLogicRelay", "m_OnSpawn", false, value);
}

bool GCLogicRelay::GetDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CLogicRelay", "m_bDisabled");
}

void GCLogicRelay::SetDisabled(bool value) {
    SetSchemaValue(m_ptr, "CLogicRelay", "m_bDisabled", false, value);
}

bool GCLogicRelay::GetWaitForRefire() const {
    return GetSchemaValue<bool>(m_ptr, "CLogicRelay", "m_bWaitForRefire");
}

void GCLogicRelay::SetWaitForRefire(bool value) {
    SetSchemaValue(m_ptr, "CLogicRelay", "m_bWaitForRefire", false, value);
}

bool GCLogicRelay::GetTriggerOnce() const {
    return GetSchemaValue<bool>(m_ptr, "CLogicRelay", "m_bTriggerOnce");
}

void GCLogicRelay::SetTriggerOnce(bool value) {
    SetSchemaValue(m_ptr, "CLogicRelay", "m_bTriggerOnce", false, value);
}

bool GCLogicRelay::GetFastRetrigger() const {
    return GetSchemaValue<bool>(m_ptr, "CLogicRelay", "m_bFastRetrigger");
}

void GCLogicRelay::SetFastRetrigger(bool value) {
    SetSchemaValue(m_ptr, "CLogicRelay", "m_bFastRetrigger", false, value);
}

bool GCLogicRelay::GetPassthoughCaller() const {
    return GetSchemaValue<bool>(m_ptr, "CLogicRelay", "m_bPassthoughCaller");
}

void GCLogicRelay::SetPassthoughCaller(bool value) {
    SetSchemaValue(m_ptr, "CLogicRelay", "m_bPassthoughCaller", false, value);
}

std::string GCLogicRelay::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCLogicRelay::IsValid() {
    return (m_ptr != nullptr);
}

GCPlayer_ItemServices::GCPlayer_ItemServices(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPlayer_ItemServices::GCPlayer_ItemServices(void *ptr) {
    m_ptr = ptr;
}

std::string GCPlayer_ItemServices::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPlayer_ItemServices::IsValid() {
    return (m_ptr != nullptr);
}

GCKeepUpright::GCKeepUpright(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCKeepUpright::GCKeepUpright(void *ptr) {
    m_ptr = ptr;
}

Vector GCKeepUpright::GetWorldGoalAxis() const {
    return GetSchemaValue<Vector>(m_ptr, "CKeepUpright", "m_worldGoalAxis");
}

void GCKeepUpright::SetWorldGoalAxis(Vector value) {
    SetSchemaValue(m_ptr, "CKeepUpright", "m_worldGoalAxis", false, value);
}

Vector GCKeepUpright::GetLocalTestAxis() const {
    return GetSchemaValue<Vector>(m_ptr, "CKeepUpright", "m_localTestAxis");
}

void GCKeepUpright::SetLocalTestAxis(Vector value) {
    SetSchemaValue(m_ptr, "CKeepUpright", "m_localTestAxis", false, value);
}

CUtlSymbolLarge GCKeepUpright::GetNameAttach() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CKeepUpright", "m_nameAttach");
}

void GCKeepUpright::SetNameAttach(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CKeepUpright", "m_nameAttach", false, value);
}

GCBaseEntity GCKeepUpright::GetAttachedObject() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CKeepUpright", "m_attachedObject"));
    return value;
}

void GCKeepUpright::SetAttachedObject(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'AttachedObject' is not possible.\n");
}

float GCKeepUpright::GetAngularLimit() const {
    return GetSchemaValue<float>(m_ptr, "CKeepUpright", "m_angularLimit");
}

void GCKeepUpright::SetAngularLimit(float value) {
    SetSchemaValue(m_ptr, "CKeepUpright", "m_angularLimit", false, value);
}

bool GCKeepUpright::GetActive() const {
    return GetSchemaValue<bool>(m_ptr, "CKeepUpright", "m_bActive");
}

void GCKeepUpright::SetActive(bool value) {
    SetSchemaValue(m_ptr, "CKeepUpright", "m_bActive", false, value);
}

bool GCKeepUpright::GetDampAllRotation() const {
    return GetSchemaValue<bool>(m_ptr, "CKeepUpright", "m_bDampAllRotation");
}

void GCKeepUpright::SetDampAllRotation(bool value) {
    SetSchemaValue(m_ptr, "CKeepUpright", "m_bDampAllRotation", false, value);
}

std::string GCKeepUpright::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCKeepUpright::IsValid() {
    return (m_ptr != nullptr);
}

GCRevertSaved::GCRevertSaved(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCRevertSaved::GCRevertSaved(void *ptr) {
    m_ptr = ptr;
}

float GCRevertSaved::GetLoadTime() const {
    return GetSchemaValue<float>(m_ptr, "CRevertSaved", "m_loadTime");
}

void GCRevertSaved::SetLoadTime(float value) {
    SetSchemaValue(m_ptr, "CRevertSaved", "m_loadTime", false, value);
}

float GCRevertSaved::GetDuration() const {
    return GetSchemaValue<float>(m_ptr, "CRevertSaved", "m_Duration");
}

void GCRevertSaved::SetDuration(float value) {
    SetSchemaValue(m_ptr, "CRevertSaved", "m_Duration", false, value);
}

float GCRevertSaved::GetHoldTime() const {
    return GetSchemaValue<float>(m_ptr, "CRevertSaved", "m_HoldTime");
}

void GCRevertSaved::SetHoldTime(float value) {
    SetSchemaValue(m_ptr, "CRevertSaved", "m_HoldTime", false, value);
}

std::string GCRevertSaved::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCRevertSaved::IsValid() {
    return (m_ptr != nullptr);
}

GCFuncWater::GCFuncWater(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFuncWater::GCFuncWater(void *ptr) {
    m_ptr = ptr;
}

GCBuoyancyHelper GCFuncWater::GetBuoyancyHelper() const {
    return GetSchemaValue<GCBuoyancyHelper>(m_ptr, "CFuncWater", "m_BuoyancyHelper");
}

void GCFuncWater::SetBuoyancyHelper(GCBuoyancyHelper value) {
    SetSchemaValue(m_ptr, "CFuncWater", "m_BuoyancyHelper", false, value);
}

std::string GCFuncWater::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFuncWater::IsValid() {
    return (m_ptr != nullptr);
}

GCFuncTimescale::GCFuncTimescale(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFuncTimescale::GCFuncTimescale(void *ptr) {
    m_ptr = ptr;
}

float GCFuncTimescale::GetDesiredTimescale() const {
    return GetSchemaValue<float>(m_ptr, "CFuncTimescale", "m_flDesiredTimescale");
}

void GCFuncTimescale::SetDesiredTimescale(float value) {
    SetSchemaValue(m_ptr, "CFuncTimescale", "m_flDesiredTimescale", false, value);
}

float GCFuncTimescale::GetAcceleration() const {
    return GetSchemaValue<float>(m_ptr, "CFuncTimescale", "m_flAcceleration");
}

void GCFuncTimescale::SetAcceleration(float value) {
    SetSchemaValue(m_ptr, "CFuncTimescale", "m_flAcceleration", false, value);
}

float GCFuncTimescale::GetMinBlendRate() const {
    return GetSchemaValue<float>(m_ptr, "CFuncTimescale", "m_flMinBlendRate");
}

void GCFuncTimescale::SetMinBlendRate(float value) {
    SetSchemaValue(m_ptr, "CFuncTimescale", "m_flMinBlendRate", false, value);
}

float GCFuncTimescale::GetBlendDeltaMultiplier() const {
    return GetSchemaValue<float>(m_ptr, "CFuncTimescale", "m_flBlendDeltaMultiplier");
}

void GCFuncTimescale::SetBlendDeltaMultiplier(float value) {
    SetSchemaValue(m_ptr, "CFuncTimescale", "m_flBlendDeltaMultiplier", false, value);
}

bool GCFuncTimescale::GetIsStarted() const {
    return GetSchemaValue<bool>(m_ptr, "CFuncTimescale", "m_isStarted");
}

void GCFuncTimescale::SetIsStarted(bool value) {
    SetSchemaValue(m_ptr, "CFuncTimescale", "m_isStarted", false, value);
}

std::string GCFuncTimescale::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFuncTimescale::IsValid() {
    return (m_ptr != nullptr);
}

GCBtActionMoveTo::GCBtActionMoveTo(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBtActionMoveTo::GCBtActionMoveTo(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCBtActionMoveTo::GetDestinationInputKey() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CBtActionMoveTo", "m_szDestinationInputKey");
}

void GCBtActionMoveTo::SetDestinationInputKey(CUtlString value) {
    SetSchemaValue(m_ptr, "CBtActionMoveTo", "m_szDestinationInputKey", false, value);
}

CUtlString GCBtActionMoveTo::GetHidingSpotInputKey() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CBtActionMoveTo", "m_szHidingSpotInputKey");
}

void GCBtActionMoveTo::SetHidingSpotInputKey(CUtlString value) {
    SetSchemaValue(m_ptr, "CBtActionMoveTo", "m_szHidingSpotInputKey", false, value);
}

CUtlString GCBtActionMoveTo::GetThreatInputKey() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CBtActionMoveTo", "m_szThreatInputKey");
}

void GCBtActionMoveTo::SetThreatInputKey(CUtlString value) {
    SetSchemaValue(m_ptr, "CBtActionMoveTo", "m_szThreatInputKey", false, value);
}

Vector GCBtActionMoveTo::GetDestination() const {
    return GetSchemaValue<Vector>(m_ptr, "CBtActionMoveTo", "m_vecDestination");
}

void GCBtActionMoveTo::SetDestination(Vector value) {
    SetSchemaValue(m_ptr, "CBtActionMoveTo", "m_vecDestination", false, value);
}

bool GCBtActionMoveTo::GetAutoLookAdjust() const {
    return GetSchemaValue<bool>(m_ptr, "CBtActionMoveTo", "m_bAutoLookAdjust");
}

void GCBtActionMoveTo::SetAutoLookAdjust(bool value) {
    SetSchemaValue(m_ptr, "CBtActionMoveTo", "m_bAutoLookAdjust", false, value);
}

bool GCBtActionMoveTo::GetComputePath() const {
    return GetSchemaValue<bool>(m_ptr, "CBtActionMoveTo", "m_bComputePath");
}

void GCBtActionMoveTo::SetComputePath(bool value) {
    SetSchemaValue(m_ptr, "CBtActionMoveTo", "m_bComputePath", false, value);
}

float GCBtActionMoveTo::GetDamagingAreasPenaltyCost() const {
    return GetSchemaValue<float>(m_ptr, "CBtActionMoveTo", "m_flDamagingAreasPenaltyCost");
}

void GCBtActionMoveTo::SetDamagingAreasPenaltyCost(float value) {
    SetSchemaValue(m_ptr, "CBtActionMoveTo", "m_flDamagingAreasPenaltyCost", false, value);
}

GCountdownTimer GCBtActionMoveTo::GetCheckApproximateCornersTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CBtActionMoveTo", "m_CheckApproximateCornersTimer");
}

void GCBtActionMoveTo::SetCheckApproximateCornersTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CBtActionMoveTo", "m_CheckApproximateCornersTimer", false, value);
}

GCountdownTimer GCBtActionMoveTo::GetCheckHighPriorityItem() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CBtActionMoveTo", "m_CheckHighPriorityItem");
}

void GCBtActionMoveTo::SetCheckHighPriorityItem(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CBtActionMoveTo", "m_CheckHighPriorityItem", false, value);
}

GCountdownTimer GCBtActionMoveTo::GetRepathTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CBtActionMoveTo", "m_RepathTimer");
}

void GCBtActionMoveTo::SetRepathTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CBtActionMoveTo", "m_RepathTimer", false, value);
}

float GCBtActionMoveTo::GetArrivalEpsilon() const {
    return GetSchemaValue<float>(m_ptr, "CBtActionMoveTo", "m_flArrivalEpsilon");
}

void GCBtActionMoveTo::SetArrivalEpsilon(float value) {
    SetSchemaValue(m_ptr, "CBtActionMoveTo", "m_flArrivalEpsilon", false, value);
}

float GCBtActionMoveTo::GetAdditionalArrivalEpsilon2D() const {
    return GetSchemaValue<float>(m_ptr, "CBtActionMoveTo", "m_flAdditionalArrivalEpsilon2D");
}

void GCBtActionMoveTo::SetAdditionalArrivalEpsilon2D(float value) {
    SetSchemaValue(m_ptr, "CBtActionMoveTo", "m_flAdditionalArrivalEpsilon2D", false, value);
}

float GCBtActionMoveTo::GetHidingSpotCheckDistanceThreshold() const {
    return GetSchemaValue<float>(m_ptr, "CBtActionMoveTo", "m_flHidingSpotCheckDistanceThreshold");
}

void GCBtActionMoveTo::SetHidingSpotCheckDistanceThreshold(float value) {
    SetSchemaValue(m_ptr, "CBtActionMoveTo", "m_flHidingSpotCheckDistanceThreshold", false, value);
}

float GCBtActionMoveTo::GetNearestAreaDistanceThreshold() const {
    return GetSchemaValue<float>(m_ptr, "CBtActionMoveTo", "m_flNearestAreaDistanceThreshold");
}

void GCBtActionMoveTo::SetNearestAreaDistanceThreshold(float value) {
    SetSchemaValue(m_ptr, "CBtActionMoveTo", "m_flNearestAreaDistanceThreshold", false, value);
}

std::string GCBtActionMoveTo::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBtActionMoveTo::IsValid() {
    return (m_ptr != nullptr);
}

GCTonemapController2::GCTonemapController2(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTonemapController2::GCTonemapController2(void *ptr) {
    m_ptr = ptr;
}

float GCTonemapController2::GetAutoExposureMin() const {
    return GetSchemaValue<float>(m_ptr, "CTonemapController2", "m_flAutoExposureMin");
}

void GCTonemapController2::SetAutoExposureMin(float value) {
    SetSchemaValue(m_ptr, "CTonemapController2", "m_flAutoExposureMin", false, value);
}

float GCTonemapController2::GetAutoExposureMax() const {
    return GetSchemaValue<float>(m_ptr, "CTonemapController2", "m_flAutoExposureMax");
}

void GCTonemapController2::SetAutoExposureMax(float value) {
    SetSchemaValue(m_ptr, "CTonemapController2", "m_flAutoExposureMax", false, value);
}

float GCTonemapController2::GetTonemapPercentTarget() const {
    return GetSchemaValue<float>(m_ptr, "CTonemapController2", "m_flTonemapPercentTarget");
}

void GCTonemapController2::SetTonemapPercentTarget(float value) {
    SetSchemaValue(m_ptr, "CTonemapController2", "m_flTonemapPercentTarget", false, value);
}

float GCTonemapController2::GetTonemapPercentBrightPixels() const {
    return GetSchemaValue<float>(m_ptr, "CTonemapController2", "m_flTonemapPercentBrightPixels");
}

void GCTonemapController2::SetTonemapPercentBrightPixels(float value) {
    SetSchemaValue(m_ptr, "CTonemapController2", "m_flTonemapPercentBrightPixels", false, value);
}

float GCTonemapController2::GetTonemapMinAvgLum() const {
    return GetSchemaValue<float>(m_ptr, "CTonemapController2", "m_flTonemapMinAvgLum");
}

void GCTonemapController2::SetTonemapMinAvgLum(float value) {
    SetSchemaValue(m_ptr, "CTonemapController2", "m_flTonemapMinAvgLum", false, value);
}

float GCTonemapController2::GetExposureAdaptationSpeedUp() const {
    return GetSchemaValue<float>(m_ptr, "CTonemapController2", "m_flExposureAdaptationSpeedUp");
}

void GCTonemapController2::SetExposureAdaptationSpeedUp(float value) {
    SetSchemaValue(m_ptr, "CTonemapController2", "m_flExposureAdaptationSpeedUp", false, value);
}

float GCTonemapController2::GetExposureAdaptationSpeedDown() const {
    return GetSchemaValue<float>(m_ptr, "CTonemapController2", "m_flExposureAdaptationSpeedDown");
}

void GCTonemapController2::SetExposureAdaptationSpeedDown(float value) {
    SetSchemaValue(m_ptr, "CTonemapController2", "m_flExposureAdaptationSpeedDown", false, value);
}

float GCTonemapController2::GetTonemapEVSmoothingRange() const {
    return GetSchemaValue<float>(m_ptr, "CTonemapController2", "m_flTonemapEVSmoothingRange");
}

void GCTonemapController2::SetTonemapEVSmoothingRange(float value) {
    SetSchemaValue(m_ptr, "CTonemapController2", "m_flTonemapEVSmoothingRange", false, value);
}

std::string GCTonemapController2::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTonemapController2::IsValid() {
    return (m_ptr != nullptr);
}

GCRopeKeyframeAlias_move_rope::GCRopeKeyframeAlias_move_rope(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCRopeKeyframeAlias_move_rope::GCRopeKeyframeAlias_move_rope(void *ptr) {
    m_ptr = ptr;
}

std::string GCRopeKeyframeAlias_move_rope::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCRopeKeyframeAlias_move_rope::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvInstructorVRHint::GCEnvInstructorVRHint(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvInstructorVRHint::GCEnvInstructorVRHint(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCEnvInstructorVRHint::GetName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvInstructorVRHint", "m_iszName");
}

void GCEnvInstructorVRHint::SetName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEnvInstructorVRHint", "m_iszName", false, value);
}

CUtlSymbolLarge GCEnvInstructorVRHint::GetHintTargetEntity() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvInstructorVRHint", "m_iszHintTargetEntity");
}

void GCEnvInstructorVRHint::SetHintTargetEntity(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEnvInstructorVRHint", "m_iszHintTargetEntity", false, value);
}

int32_t GCEnvInstructorVRHint::GetTimeout() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvInstructorVRHint", "m_iTimeout");
}

void GCEnvInstructorVRHint::SetTimeout(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvInstructorVRHint", "m_iTimeout", false, value);
}

CUtlSymbolLarge GCEnvInstructorVRHint::GetCaption() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvInstructorVRHint", "m_iszCaption");
}

void GCEnvInstructorVRHint::SetCaption(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEnvInstructorVRHint", "m_iszCaption", false, value);
}

CUtlSymbolLarge GCEnvInstructorVRHint::GetStartSound() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvInstructorVRHint", "m_iszStartSound");
}

void GCEnvInstructorVRHint::SetStartSound(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEnvInstructorVRHint", "m_iszStartSound", false, value);
}

int32_t GCEnvInstructorVRHint::GetLayoutFileType() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvInstructorVRHint", "m_iLayoutFileType");
}

void GCEnvInstructorVRHint::SetLayoutFileType(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvInstructorVRHint", "m_iLayoutFileType", false, value);
}

CUtlSymbolLarge GCEnvInstructorVRHint::GetCustomLayoutFile() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvInstructorVRHint", "m_iszCustomLayoutFile");
}

void GCEnvInstructorVRHint::SetCustomLayoutFile(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEnvInstructorVRHint", "m_iszCustomLayoutFile", false, value);
}

int32_t GCEnvInstructorVRHint::GetAttachType() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvInstructorVRHint", "m_iAttachType");
}

void GCEnvInstructorVRHint::SetAttachType(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvInstructorVRHint", "m_iAttachType", false, value);
}

float GCEnvInstructorVRHint::GetHeightOffset() const {
    return GetSchemaValue<float>(m_ptr, "CEnvInstructorVRHint", "m_flHeightOffset");
}

void GCEnvInstructorVRHint::SetHeightOffset(float value) {
    SetSchemaValue(m_ptr, "CEnvInstructorVRHint", "m_flHeightOffset", false, value);
}

std::string GCEnvInstructorVRHint::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvInstructorVRHint::IsValid() {
    return (m_ptr != nullptr);
}

GCWeaponXM1014::GCWeaponXM1014(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWeaponXM1014::GCWeaponXM1014(void *ptr) {
    m_ptr = ptr;
}

std::string GCWeaponXM1014::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWeaponXM1014::IsValid() {
    return (m_ptr != nullptr);
}

GCPlatTrigger::GCPlatTrigger(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPlatTrigger::GCPlatTrigger(void *ptr) {
    m_ptr = ptr;
}

GCFuncPlat GCPlatTrigger::GetPlatform() const {
    GCFuncPlat value(GetSchemaValuePtr<void>(m_ptr, "CPlatTrigger", "m_pPlatform"));
    return value;
}

void GCPlatTrigger::SetPlatform(GCFuncPlat* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Platform' is not possible.\n");
}

std::string GCPlatTrigger::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPlatTrigger::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvWindShared::GCEnvWindShared(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvWindShared::GCEnvWindShared(void *ptr) {
    m_ptr = ptr;
}

uint32_t GCEnvWindShared::GetWindSeed() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CEnvWindShared", "m_iWindSeed");
}

void GCEnvWindShared::SetWindSeed(uint32_t value) {
    SetSchemaValue(m_ptr, "CEnvWindShared", "m_iWindSeed", false, value);
}

uint16_t GCEnvWindShared::GetMinWind() const {
    return GetSchemaValue<uint16_t>(m_ptr, "CEnvWindShared", "m_iMinWind");
}

void GCEnvWindShared::SetMinWind(uint16_t value) {
    SetSchemaValue(m_ptr, "CEnvWindShared", "m_iMinWind", false, value);
}

uint16_t GCEnvWindShared::GetMaxWind() const {
    return GetSchemaValue<uint16_t>(m_ptr, "CEnvWindShared", "m_iMaxWind");
}

void GCEnvWindShared::SetMaxWind(uint16_t value) {
    SetSchemaValue(m_ptr, "CEnvWindShared", "m_iMaxWind", false, value);
}

int32_t GCEnvWindShared::GetWindRadius() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvWindShared", "m_windRadius");
}

void GCEnvWindShared::SetWindRadius(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvWindShared", "m_windRadius", false, value);
}

uint16_t GCEnvWindShared::GetMinGust() const {
    return GetSchemaValue<uint16_t>(m_ptr, "CEnvWindShared", "m_iMinGust");
}

void GCEnvWindShared::SetMinGust(uint16_t value) {
    SetSchemaValue(m_ptr, "CEnvWindShared", "m_iMinGust", false, value);
}

uint16_t GCEnvWindShared::GetMaxGust() const {
    return GetSchemaValue<uint16_t>(m_ptr, "CEnvWindShared", "m_iMaxGust");
}

void GCEnvWindShared::SetMaxGust(uint16_t value) {
    SetSchemaValue(m_ptr, "CEnvWindShared", "m_iMaxGust", false, value);
}

float GCEnvWindShared::GetMinGustDelay() const {
    return GetSchemaValue<float>(m_ptr, "CEnvWindShared", "m_flMinGustDelay");
}

void GCEnvWindShared::SetMinGustDelay(float value) {
    SetSchemaValue(m_ptr, "CEnvWindShared", "m_flMinGustDelay", false, value);
}

float GCEnvWindShared::GetMaxGustDelay() const {
    return GetSchemaValue<float>(m_ptr, "CEnvWindShared", "m_flMaxGustDelay");
}

void GCEnvWindShared::SetMaxGustDelay(float value) {
    SetSchemaValue(m_ptr, "CEnvWindShared", "m_flMaxGustDelay", false, value);
}

float GCEnvWindShared::GetGustDuration() const {
    return GetSchemaValue<float>(m_ptr, "CEnvWindShared", "m_flGustDuration");
}

void GCEnvWindShared::SetGustDuration(float value) {
    SetSchemaValue(m_ptr, "CEnvWindShared", "m_flGustDuration", false, value);
}

uint16_t GCEnvWindShared::GetGustDirChange() const {
    return GetSchemaValue<uint16_t>(m_ptr, "CEnvWindShared", "m_iGustDirChange");
}

void GCEnvWindShared::SetGustDirChange(uint16_t value) {
    SetSchemaValue(m_ptr, "CEnvWindShared", "m_iGustDirChange", false, value);
}

Vector GCEnvWindShared::GetLocation() const {
    return GetSchemaValue<Vector>(m_ptr, "CEnvWindShared", "m_location");
}

void GCEnvWindShared::SetLocation(Vector value) {
    SetSchemaValue(m_ptr, "CEnvWindShared", "m_location", false, value);
}

int32_t GCEnvWindShared::GetGustSound() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvWindShared", "m_iszGustSound");
}

void GCEnvWindShared::SetGustSound(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvWindShared", "m_iszGustSound", false, value);
}

int32_t GCEnvWindShared::GetWindDir() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvWindShared", "m_iWindDir");
}

void GCEnvWindShared::SetWindDir(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvWindShared", "m_iWindDir", false, value);
}

float GCEnvWindShared::GetWindSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CEnvWindShared", "m_flWindSpeed");
}

void GCEnvWindShared::SetWindSpeed(float value) {
    SetSchemaValue(m_ptr, "CEnvWindShared", "m_flWindSpeed", false, value);
}

Vector GCEnvWindShared::GetCurrentWindVector() const {
    return GetSchemaValue<Vector>(m_ptr, "CEnvWindShared", "m_currentWindVector");
}

void GCEnvWindShared::SetCurrentWindVector(Vector value) {
    SetSchemaValue(m_ptr, "CEnvWindShared", "m_currentWindVector", false, value);
}

Vector GCEnvWindShared::GetCurrentSwayVector() const {
    return GetSchemaValue<Vector>(m_ptr, "CEnvWindShared", "m_CurrentSwayVector");
}

void GCEnvWindShared::SetCurrentSwayVector(Vector value) {
    SetSchemaValue(m_ptr, "CEnvWindShared", "m_CurrentSwayVector", false, value);
}

Vector GCEnvWindShared::GetPrevSwayVector() const {
    return GetSchemaValue<Vector>(m_ptr, "CEnvWindShared", "m_PrevSwayVector");
}

void GCEnvWindShared::SetPrevSwayVector(Vector value) {
    SetSchemaValue(m_ptr, "CEnvWindShared", "m_PrevSwayVector", false, value);
}

uint16_t GCEnvWindShared::GetInitialWindDir() const {
    return GetSchemaValue<uint16_t>(m_ptr, "CEnvWindShared", "m_iInitialWindDir");
}

void GCEnvWindShared::SetInitialWindDir(uint16_t value) {
    SetSchemaValue(m_ptr, "CEnvWindShared", "m_iInitialWindDir", false, value);
}

float GCEnvWindShared::GetInitialWindSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CEnvWindShared", "m_flInitialWindSpeed");
}

void GCEnvWindShared::SetInitialWindSpeed(float value) {
    SetSchemaValue(m_ptr, "CEnvWindShared", "m_flInitialWindSpeed", false, value);
}

GCEntityIOOutput GCEnvWindShared::GetOnGustStart() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CEnvWindShared", "m_OnGustStart");
}

void GCEnvWindShared::SetOnGustStart(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CEnvWindShared", "m_OnGustStart", false, value);
}

GCEntityIOOutput GCEnvWindShared::GetOnGustEnd() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CEnvWindShared", "m_OnGustEnd");
}

void GCEnvWindShared::SetOnGustEnd(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CEnvWindShared", "m_OnGustEnd", false, value);
}

float GCEnvWindShared::GetAveWindSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CEnvWindShared", "m_flAveWindSpeed");
}

void GCEnvWindShared::SetAveWindSpeed(float value) {
    SetSchemaValue(m_ptr, "CEnvWindShared", "m_flAveWindSpeed", false, value);
}

bool GCEnvWindShared::GetGusting() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvWindShared", "m_bGusting");
}

void GCEnvWindShared::SetGusting(bool value) {
    SetSchemaValue(m_ptr, "CEnvWindShared", "m_bGusting", false, value);
}

float GCEnvWindShared::GetWindAngleVariation() const {
    return GetSchemaValue<float>(m_ptr, "CEnvWindShared", "m_flWindAngleVariation");
}

void GCEnvWindShared::SetWindAngleVariation(float value) {
    SetSchemaValue(m_ptr, "CEnvWindShared", "m_flWindAngleVariation", false, value);
}

float GCEnvWindShared::GetWindSpeedVariation() const {
    return GetSchemaValue<float>(m_ptr, "CEnvWindShared", "m_flWindSpeedVariation");
}

void GCEnvWindShared::SetWindSpeedVariation(float value) {
    SetSchemaValue(m_ptr, "CEnvWindShared", "m_flWindSpeedVariation", false, value);
}

CEntityIndex GCEnvWindShared::GetEntIndex() const {
    return GetSchemaValue<CEntityIndex>(m_ptr, "CEnvWindShared", "m_iEntIndex");
}

void GCEnvWindShared::SetEntIndex(CEntityIndex value) {
    SetSchemaValue(m_ptr, "CEnvWindShared", "m_iEntIndex", false, value);
}

std::string GCEnvWindShared::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvWindShared::IsValid() {
    return (m_ptr != nullptr);
}

GCMolotovGrenade::GCMolotovGrenade(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMolotovGrenade::GCMolotovGrenade(void *ptr) {
    m_ptr = ptr;
}

std::string GCMolotovGrenade::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMolotovGrenade::IsValid() {
    return (m_ptr != nullptr);
}

GCPointHurt::GCPointHurt(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPointHurt::GCPointHurt(void *ptr) {
    m_ptr = ptr;
}

int32_t GCPointHurt::GetDamage() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPointHurt", "m_nDamage");
}

void GCPointHurt::SetDamage(int32_t value) {
    SetSchemaValue(m_ptr, "CPointHurt", "m_nDamage", false, value);
}

int32_t GCPointHurt::GetBitsDamageType() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPointHurt", "m_bitsDamageType");
}

void GCPointHurt::SetBitsDamageType(int32_t value) {
    SetSchemaValue(m_ptr, "CPointHurt", "m_bitsDamageType", false, value);
}

float GCPointHurt::GetRadius() const {
    return GetSchemaValue<float>(m_ptr, "CPointHurt", "m_flRadius");
}

void GCPointHurt::SetRadius(float value) {
    SetSchemaValue(m_ptr, "CPointHurt", "m_flRadius", false, value);
}

float GCPointHurt::GetDelay() const {
    return GetSchemaValue<float>(m_ptr, "CPointHurt", "m_flDelay");
}

void GCPointHurt::SetDelay(float value) {
    SetSchemaValue(m_ptr, "CPointHurt", "m_flDelay", false, value);
}

CUtlSymbolLarge GCPointHurt::GetStrTarget() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPointHurt", "m_strTarget");
}

void GCPointHurt::SetStrTarget(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPointHurt", "m_strTarget", false, value);
}

GCBaseEntity GCPointHurt::GetActivator() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CPointHurt", "m_pActivator"));
    return value;
}

void GCPointHurt::SetActivator(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Activator' is not possible.\n");
}

std::string GCPointHurt::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPointHurt::IsValid() {
    return (m_ptr != nullptr);
}

GCPointValueRemapper::GCPointValueRemapper(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPointValueRemapper::GCPointValueRemapper(void *ptr) {
    m_ptr = ptr;
}

bool GCPointValueRemapper::GetDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CPointValueRemapper", "m_bDisabled");
}

void GCPointValueRemapper::SetDisabled(bool value) {
    SetSchemaValue(m_ptr, "CPointValueRemapper", "m_bDisabled", false, value);
}

bool GCPointValueRemapper::GetUpdateOnClient() const {
    return GetSchemaValue<bool>(m_ptr, "CPointValueRemapper", "m_bUpdateOnClient");
}

void GCPointValueRemapper::SetUpdateOnClient(bool value) {
    SetSchemaValue(m_ptr, "CPointValueRemapper", "m_bUpdateOnClient", false, value);
}

ValueRemapperInputType_t GCPointValueRemapper::GetInputType() const {
    return GetSchemaValue<ValueRemapperInputType_t>(m_ptr, "CPointValueRemapper", "m_nInputType");
}

void GCPointValueRemapper::SetInputType(ValueRemapperInputType_t value) {
    SetSchemaValue(m_ptr, "CPointValueRemapper", "m_nInputType", false, value);
}

CUtlSymbolLarge GCPointValueRemapper::GetRemapLineStartName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPointValueRemapper", "m_iszRemapLineStartName");
}

void GCPointValueRemapper::SetRemapLineStartName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPointValueRemapper", "m_iszRemapLineStartName", false, value);
}

CUtlSymbolLarge GCPointValueRemapper::GetRemapLineEndName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPointValueRemapper", "m_iszRemapLineEndName");
}

void GCPointValueRemapper::SetRemapLineEndName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPointValueRemapper", "m_iszRemapLineEndName", false, value);
}

GCBaseEntity GCPointValueRemapper::GetRemapLineStart() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CPointValueRemapper", "m_hRemapLineStart"));
    return value;
}

void GCPointValueRemapper::SetRemapLineStart(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'RemapLineStart' is not possible.\n");
}

GCBaseEntity GCPointValueRemapper::GetRemapLineEnd() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CPointValueRemapper", "m_hRemapLineEnd"));
    return value;
}

void GCPointValueRemapper::SetRemapLineEnd(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'RemapLineEnd' is not possible.\n");
}

float GCPointValueRemapper::GetMaximumChangePerSecond() const {
    return GetSchemaValue<float>(m_ptr, "CPointValueRemapper", "m_flMaximumChangePerSecond");
}

void GCPointValueRemapper::SetMaximumChangePerSecond(float value) {
    SetSchemaValue(m_ptr, "CPointValueRemapper", "m_flMaximumChangePerSecond", false, value);
}

float GCPointValueRemapper::GetDisengageDistance() const {
    return GetSchemaValue<float>(m_ptr, "CPointValueRemapper", "m_flDisengageDistance");
}

void GCPointValueRemapper::SetDisengageDistance(float value) {
    SetSchemaValue(m_ptr, "CPointValueRemapper", "m_flDisengageDistance", false, value);
}

float GCPointValueRemapper::GetEngageDistance() const {
    return GetSchemaValue<float>(m_ptr, "CPointValueRemapper", "m_flEngageDistance");
}

void GCPointValueRemapper::SetEngageDistance(float value) {
    SetSchemaValue(m_ptr, "CPointValueRemapper", "m_flEngageDistance", false, value);
}

bool GCPointValueRemapper::GetRequiresUseKey() const {
    return GetSchemaValue<bool>(m_ptr, "CPointValueRemapper", "m_bRequiresUseKey");
}

void GCPointValueRemapper::SetRequiresUseKey(bool value) {
    SetSchemaValue(m_ptr, "CPointValueRemapper", "m_bRequiresUseKey", false, value);
}

ValueRemapperOutputType_t GCPointValueRemapper::GetOutputType() const {
    return GetSchemaValue<ValueRemapperOutputType_t>(m_ptr, "CPointValueRemapper", "m_nOutputType");
}

void GCPointValueRemapper::SetOutputType(ValueRemapperOutputType_t value) {
    SetSchemaValue(m_ptr, "CPointValueRemapper", "m_nOutputType", false, value);
}

CUtlSymbolLarge GCPointValueRemapper::GetOutputEntityName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPointValueRemapper", "m_iszOutputEntityName");
}

void GCPointValueRemapper::SetOutputEntityName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPointValueRemapper", "m_iszOutputEntityName", false, value);
}

CUtlSymbolLarge GCPointValueRemapper::GetOutputEntity2Name() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPointValueRemapper", "m_iszOutputEntity2Name");
}

void GCPointValueRemapper::SetOutputEntity2Name(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPointValueRemapper", "m_iszOutputEntity2Name", false, value);
}

CUtlSymbolLarge GCPointValueRemapper::GetOutputEntity3Name() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPointValueRemapper", "m_iszOutputEntity3Name");
}

void GCPointValueRemapper::SetOutputEntity3Name(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPointValueRemapper", "m_iszOutputEntity3Name", false, value);
}

CUtlSymbolLarge GCPointValueRemapper::GetOutputEntity4Name() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPointValueRemapper", "m_iszOutputEntity4Name");
}

void GCPointValueRemapper::SetOutputEntity4Name(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPointValueRemapper", "m_iszOutputEntity4Name", false, value);
}

std::vector<GCBaseEntity*> GCPointValueRemapper::GetOutputEntities() const {
    CUtlVector<GCBaseEntity*>* vec = GetSchemaValue<CUtlVector<GCBaseEntity*>*>(m_ptr, "CPointValueRemapper", "m_hOutputEntities"); std::vector<GCBaseEntity*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCPointValueRemapper::SetOutputEntities(std::vector<GCBaseEntity*> value) {
    SetSchemaValueCUtlVector<GCBaseEntity*>(m_ptr, "CPointValueRemapper", "m_hOutputEntities", false, value);
}

ValueRemapperHapticsType_t GCPointValueRemapper::GetHapticsType() const {
    return GetSchemaValue<ValueRemapperHapticsType_t>(m_ptr, "CPointValueRemapper", "m_nHapticsType");
}

void GCPointValueRemapper::SetHapticsType(ValueRemapperHapticsType_t value) {
    SetSchemaValue(m_ptr, "CPointValueRemapper", "m_nHapticsType", false, value);
}

ValueRemapperMomentumType_t GCPointValueRemapper::GetMomentumType() const {
    return GetSchemaValue<ValueRemapperMomentumType_t>(m_ptr, "CPointValueRemapper", "m_nMomentumType");
}

void GCPointValueRemapper::SetMomentumType(ValueRemapperMomentumType_t value) {
    SetSchemaValue(m_ptr, "CPointValueRemapper", "m_nMomentumType", false, value);
}

float GCPointValueRemapper::GetMomentumModifier() const {
    return GetSchemaValue<float>(m_ptr, "CPointValueRemapper", "m_flMomentumModifier");
}

void GCPointValueRemapper::SetMomentumModifier(float value) {
    SetSchemaValue(m_ptr, "CPointValueRemapper", "m_flMomentumModifier", false, value);
}

float GCPointValueRemapper::GetSnapValue() const {
    return GetSchemaValue<float>(m_ptr, "CPointValueRemapper", "m_flSnapValue");
}

void GCPointValueRemapper::SetSnapValue(float value) {
    SetSchemaValue(m_ptr, "CPointValueRemapper", "m_flSnapValue", false, value);
}

float GCPointValueRemapper::GetCurrentMomentum() const {
    return GetSchemaValue<float>(m_ptr, "CPointValueRemapper", "m_flCurrentMomentum");
}

void GCPointValueRemapper::SetCurrentMomentum(float value) {
    SetSchemaValue(m_ptr, "CPointValueRemapper", "m_flCurrentMomentum", false, value);
}

ValueRemapperRatchetType_t GCPointValueRemapper::GetRatchetType() const {
    return GetSchemaValue<ValueRemapperRatchetType_t>(m_ptr, "CPointValueRemapper", "m_nRatchetType");
}

void GCPointValueRemapper::SetRatchetType(ValueRemapperRatchetType_t value) {
    SetSchemaValue(m_ptr, "CPointValueRemapper", "m_nRatchetType", false, value);
}

float GCPointValueRemapper::GetRatchetOffset() const {
    return GetSchemaValue<float>(m_ptr, "CPointValueRemapper", "m_flRatchetOffset");
}

void GCPointValueRemapper::SetRatchetOffset(float value) {
    SetSchemaValue(m_ptr, "CPointValueRemapper", "m_flRatchetOffset", false, value);
}

float GCPointValueRemapper::GetInputOffset() const {
    return GetSchemaValue<float>(m_ptr, "CPointValueRemapper", "m_flInputOffset");
}

void GCPointValueRemapper::SetInputOffset(float value) {
    SetSchemaValue(m_ptr, "CPointValueRemapper", "m_flInputOffset", false, value);
}

bool GCPointValueRemapper::GetEngaged() const {
    return GetSchemaValue<bool>(m_ptr, "CPointValueRemapper", "m_bEngaged");
}

void GCPointValueRemapper::SetEngaged(bool value) {
    SetSchemaValue(m_ptr, "CPointValueRemapper", "m_bEngaged", false, value);
}

bool GCPointValueRemapper::GetFirstUpdate() const {
    return GetSchemaValue<bool>(m_ptr, "CPointValueRemapper", "m_bFirstUpdate");
}

void GCPointValueRemapper::SetFirstUpdate(bool value) {
    SetSchemaValue(m_ptr, "CPointValueRemapper", "m_bFirstUpdate", false, value);
}

float GCPointValueRemapper::GetPreviousValue() const {
    return GetSchemaValue<float>(m_ptr, "CPointValueRemapper", "m_flPreviousValue");
}

void GCPointValueRemapper::SetPreviousValue(float value) {
    SetSchemaValue(m_ptr, "CPointValueRemapper", "m_flPreviousValue", false, value);
}

Vector GCPointValueRemapper::GetPreviousTestPoint() const {
    return GetSchemaValue<Vector>(m_ptr, "CPointValueRemapper", "m_vecPreviousTestPoint");
}

void GCPointValueRemapper::SetPreviousTestPoint(Vector value) {
    SetSchemaValue(m_ptr, "CPointValueRemapper", "m_vecPreviousTestPoint", false, value);
}

GCBasePlayerPawn GCPointValueRemapper::GetUsingPlayer() const {
    GCBasePlayerPawn value(GetSchemaValuePtr<void>(m_ptr, "CPointValueRemapper", "m_hUsingPlayer"));
    return value;
}

void GCPointValueRemapper::SetUsingPlayer(GCBasePlayerPawn* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'UsingPlayer' is not possible.\n");
}

float GCPointValueRemapper::GetCustomOutputValue() const {
    return GetSchemaValue<float>(m_ptr, "CPointValueRemapper", "m_flCustomOutputValue");
}

void GCPointValueRemapper::SetCustomOutputValue(float value) {
    SetSchemaValue(m_ptr, "CPointValueRemapper", "m_flCustomOutputValue", false, value);
}

CUtlSymbolLarge GCPointValueRemapper::GetSoundEngage() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPointValueRemapper", "m_iszSoundEngage");
}

void GCPointValueRemapper::SetSoundEngage(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPointValueRemapper", "m_iszSoundEngage", false, value);
}

CUtlSymbolLarge GCPointValueRemapper::GetSoundDisengage() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPointValueRemapper", "m_iszSoundDisengage");
}

void GCPointValueRemapper::SetSoundDisengage(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPointValueRemapper", "m_iszSoundDisengage", false, value);
}

CUtlSymbolLarge GCPointValueRemapper::GetSoundReachedValueZero() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPointValueRemapper", "m_iszSoundReachedValueZero");
}

void GCPointValueRemapper::SetSoundReachedValueZero(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPointValueRemapper", "m_iszSoundReachedValueZero", false, value);
}

CUtlSymbolLarge GCPointValueRemapper::GetSoundReachedValueOne() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPointValueRemapper", "m_iszSoundReachedValueOne");
}

void GCPointValueRemapper::SetSoundReachedValueOne(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPointValueRemapper", "m_iszSoundReachedValueOne", false, value);
}

CUtlSymbolLarge GCPointValueRemapper::GetSoundMovingLoop() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPointValueRemapper", "m_iszSoundMovingLoop");
}

void GCPointValueRemapper::SetSoundMovingLoop(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPointValueRemapper", "m_iszSoundMovingLoop", false, value);
}

GCEntityIOOutput GCPointValueRemapper::GetOnReachedValueZero() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPointValueRemapper", "m_OnReachedValueZero");
}

void GCPointValueRemapper::SetOnReachedValueZero(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPointValueRemapper", "m_OnReachedValueZero", false, value);
}

GCEntityIOOutput GCPointValueRemapper::GetOnReachedValueOne() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPointValueRemapper", "m_OnReachedValueOne");
}

void GCPointValueRemapper::SetOnReachedValueOne(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPointValueRemapper", "m_OnReachedValueOne", false, value);
}

GCEntityIOOutput GCPointValueRemapper::GetOnReachedValueCustom() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPointValueRemapper", "m_OnReachedValueCustom");
}

void GCPointValueRemapper::SetOnReachedValueCustom(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPointValueRemapper", "m_OnReachedValueCustom", false, value);
}

GCEntityIOOutput GCPointValueRemapper::GetOnEngage() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPointValueRemapper", "m_OnEngage");
}

void GCPointValueRemapper::SetOnEngage(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPointValueRemapper", "m_OnEngage", false, value);
}

GCEntityIOOutput GCPointValueRemapper::GetOnDisengage() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPointValueRemapper", "m_OnDisengage");
}

void GCPointValueRemapper::SetOnDisengage(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPointValueRemapper", "m_OnDisengage", false, value);
}

std::string GCPointValueRemapper::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPointValueRemapper::IsValid() {
    return (m_ptr != nullptr);
}

GCLogicNPCCounterAABB::GCLogicNPCCounterAABB(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCLogicNPCCounterAABB::GCLogicNPCCounterAABB(void *ptr) {
    m_ptr = ptr;
}

Vector GCLogicNPCCounterAABB::GetDistanceOuterMins() const {
    return GetSchemaValue<Vector>(m_ptr, "CLogicNPCCounterAABB", "m_vDistanceOuterMins");
}

void GCLogicNPCCounterAABB::SetDistanceOuterMins(Vector value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounterAABB", "m_vDistanceOuterMins", false, value);
}

Vector GCLogicNPCCounterAABB::GetDistanceOuterMaxs() const {
    return GetSchemaValue<Vector>(m_ptr, "CLogicNPCCounterAABB", "m_vDistanceOuterMaxs");
}

void GCLogicNPCCounterAABB::SetDistanceOuterMaxs(Vector value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounterAABB", "m_vDistanceOuterMaxs", false, value);
}

Vector GCLogicNPCCounterAABB::GetOuterMins() const {
    return GetSchemaValue<Vector>(m_ptr, "CLogicNPCCounterAABB", "m_vOuterMins");
}

void GCLogicNPCCounterAABB::SetOuterMins(Vector value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounterAABB", "m_vOuterMins", false, value);
}

Vector GCLogicNPCCounterAABB::GetOuterMaxs() const {
    return GetSchemaValue<Vector>(m_ptr, "CLogicNPCCounterAABB", "m_vOuterMaxs");
}

void GCLogicNPCCounterAABB::SetOuterMaxs(Vector value) {
    SetSchemaValue(m_ptr, "CLogicNPCCounterAABB", "m_vOuterMaxs", false, value);
}

std::string GCLogicNPCCounterAABB::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCLogicNPCCounterAABB::IsValid() {
    return (m_ptr != nullptr);
}

GCLightOrthoEntity::GCLightOrthoEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCLightOrthoEntity::GCLightOrthoEntity(void *ptr) {
    m_ptr = ptr;
}

std::string GCLightOrthoEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCLightOrthoEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvSoundscapeTriggerable::GCEnvSoundscapeTriggerable(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvSoundscapeTriggerable::GCEnvSoundscapeTriggerable(void *ptr) {
    m_ptr = ptr;
}

std::string GCEnvSoundscapeTriggerable::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvSoundscapeTriggerable::IsValid() {
    return (m_ptr != nullptr);
}

GCSoundOpvarSetPointEntity::GCSoundOpvarSetPointEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSoundOpvarSetPointEntity::GCSoundOpvarSetPointEntity(void *ptr) {
    m_ptr = ptr;
}

GCEntityIOOutput GCSoundOpvarSetPointEntity::GetOnEnter() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CSoundOpvarSetPointEntity", "m_OnEnter");
}

void GCSoundOpvarSetPointEntity::SetOnEnter(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetPointEntity", "m_OnEnter", false, value);
}

GCEntityIOOutput GCSoundOpvarSetPointEntity::GetOnExit() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CSoundOpvarSetPointEntity", "m_OnExit");
}

void GCSoundOpvarSetPointEntity::SetOnExit(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetPointEntity", "m_OnExit", false, value);
}

bool GCSoundOpvarSetPointEntity::GetAutoDisable() const {
    return GetSchemaValue<bool>(m_ptr, "CSoundOpvarSetPointEntity", "m_bAutoDisable");
}

void GCSoundOpvarSetPointEntity::SetAutoDisable(bool value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetPointEntity", "m_bAutoDisable", false, value);
}

float GCSoundOpvarSetPointEntity::GetDistanceMin() const {
    return GetSchemaValue<float>(m_ptr, "CSoundOpvarSetPointEntity", "m_flDistanceMin");
}

void GCSoundOpvarSetPointEntity::SetDistanceMin(float value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetPointEntity", "m_flDistanceMin", false, value);
}

float GCSoundOpvarSetPointEntity::GetDistanceMax() const {
    return GetSchemaValue<float>(m_ptr, "CSoundOpvarSetPointEntity", "m_flDistanceMax");
}

void GCSoundOpvarSetPointEntity::SetDistanceMax(float value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetPointEntity", "m_flDistanceMax", false, value);
}

float GCSoundOpvarSetPointEntity::GetDistanceMapMin() const {
    return GetSchemaValue<float>(m_ptr, "CSoundOpvarSetPointEntity", "m_flDistanceMapMin");
}

void GCSoundOpvarSetPointEntity::SetDistanceMapMin(float value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetPointEntity", "m_flDistanceMapMin", false, value);
}

float GCSoundOpvarSetPointEntity::GetDistanceMapMax() const {
    return GetSchemaValue<float>(m_ptr, "CSoundOpvarSetPointEntity", "m_flDistanceMapMax");
}

void GCSoundOpvarSetPointEntity::SetDistanceMapMax(float value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetPointEntity", "m_flDistanceMapMax", false, value);
}

float GCSoundOpvarSetPointEntity::GetOcclusionRadius() const {
    return GetSchemaValue<float>(m_ptr, "CSoundOpvarSetPointEntity", "m_flOcclusionRadius");
}

void GCSoundOpvarSetPointEntity::SetOcclusionRadius(float value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetPointEntity", "m_flOcclusionRadius", false, value);
}

float GCSoundOpvarSetPointEntity::GetOcclusionMin() const {
    return GetSchemaValue<float>(m_ptr, "CSoundOpvarSetPointEntity", "m_flOcclusionMin");
}

void GCSoundOpvarSetPointEntity::SetOcclusionMin(float value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetPointEntity", "m_flOcclusionMin", false, value);
}

float GCSoundOpvarSetPointEntity::GetOcclusionMax() const {
    return GetSchemaValue<float>(m_ptr, "CSoundOpvarSetPointEntity", "m_flOcclusionMax");
}

void GCSoundOpvarSetPointEntity::SetOcclusionMax(float value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetPointEntity", "m_flOcclusionMax", false, value);
}

float GCSoundOpvarSetPointEntity::GetValSetOnDisable() const {
    return GetSchemaValue<float>(m_ptr, "CSoundOpvarSetPointEntity", "m_flValSetOnDisable");
}

void GCSoundOpvarSetPointEntity::SetValSetOnDisable(float value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetPointEntity", "m_flValSetOnDisable", false, value);
}

bool GCSoundOpvarSetPointEntity::GetSetValueOnDisable() const {
    return GetSchemaValue<bool>(m_ptr, "CSoundOpvarSetPointEntity", "m_bSetValueOnDisable");
}

void GCSoundOpvarSetPointEntity::SetSetValueOnDisable(bool value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetPointEntity", "m_bSetValueOnDisable", false, value);
}

int32_t GCSoundOpvarSetPointEntity::GetSimulationMode() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSoundOpvarSetPointEntity", "m_nSimulationMode");
}

void GCSoundOpvarSetPointEntity::SetSimulationMode(int32_t value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetPointEntity", "m_nSimulationMode", false, value);
}

int32_t GCSoundOpvarSetPointEntity::GetVisibilitySamples() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSoundOpvarSetPointEntity", "m_nVisibilitySamples");
}

void GCSoundOpvarSetPointEntity::SetVisibilitySamples(int32_t value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetPointEntity", "m_nVisibilitySamples", false, value);
}

Vector GCSoundOpvarSetPointEntity::GetDynamicProxyPoint() const {
    return GetSchemaValue<Vector>(m_ptr, "CSoundOpvarSetPointEntity", "m_vDynamicProxyPoint");
}

void GCSoundOpvarSetPointEntity::SetDynamicProxyPoint(Vector value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetPointEntity", "m_vDynamicProxyPoint", false, value);
}

float GCSoundOpvarSetPointEntity::GetDynamicMaximumOcclusion() const {
    return GetSchemaValue<float>(m_ptr, "CSoundOpvarSetPointEntity", "m_flDynamicMaximumOcclusion");
}

void GCSoundOpvarSetPointEntity::SetDynamicMaximumOcclusion(float value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetPointEntity", "m_flDynamicMaximumOcclusion", false, value);
}

GCEntityInstance GCSoundOpvarSetPointEntity::GetDynamicEntity() const {
    GCEntityInstance value(GetSchemaValuePtr<void>(m_ptr, "CSoundOpvarSetPointEntity", "m_hDynamicEntity"));
    return value;
}

void GCSoundOpvarSetPointEntity::SetDynamicEntity(GCEntityInstance* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'DynamicEntity' is not possible.\n");
}

CUtlSymbolLarge GCSoundOpvarSetPointEntity::GetDynamicEntityName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSoundOpvarSetPointEntity", "m_iszDynamicEntityName");
}

void GCSoundOpvarSetPointEntity::SetDynamicEntityName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetPointEntity", "m_iszDynamicEntityName", false, value);
}

float GCSoundOpvarSetPointEntity::GetPathingDistanceNormFactor() const {
    return GetSchemaValue<float>(m_ptr, "CSoundOpvarSetPointEntity", "m_flPathingDistanceNormFactor");
}

void GCSoundOpvarSetPointEntity::SetPathingDistanceNormFactor(float value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetPointEntity", "m_flPathingDistanceNormFactor", false, value);
}

Vector GCSoundOpvarSetPointEntity::GetPathingSourcePos() const {
    return GetSchemaValue<Vector>(m_ptr, "CSoundOpvarSetPointEntity", "m_vPathingSourcePos");
}

void GCSoundOpvarSetPointEntity::SetPathingSourcePos(Vector value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetPointEntity", "m_vPathingSourcePos", false, value);
}

Vector GCSoundOpvarSetPointEntity::GetPathingListenerPos() const {
    return GetSchemaValue<Vector>(m_ptr, "CSoundOpvarSetPointEntity", "m_vPathingListenerPos");
}

void GCSoundOpvarSetPointEntity::SetPathingListenerPos(Vector value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetPointEntity", "m_vPathingListenerPos", false, value);
}

Vector GCSoundOpvarSetPointEntity::GetPathingDirection() const {
    return GetSchemaValue<Vector>(m_ptr, "CSoundOpvarSetPointEntity", "m_vPathingDirection");
}

void GCSoundOpvarSetPointEntity::SetPathingDirection(Vector value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetPointEntity", "m_vPathingDirection", false, value);
}

int32_t GCSoundOpvarSetPointEntity::GetPathingSourceIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSoundOpvarSetPointEntity", "m_nPathingSourceIndex");
}

void GCSoundOpvarSetPointEntity::SetPathingSourceIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetPointEntity", "m_nPathingSourceIndex", false, value);
}

std::string GCSoundOpvarSetPointEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSoundOpvarSetPointEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCBasePlayerPawn::GCBasePlayerPawn(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBasePlayerPawn::GCBasePlayerPawn(void *ptr) {
    m_ptr = ptr;
}

GCPlayer_WeaponServices GCBasePlayerPawn::GetWeaponServices() const {
    GCPlayer_WeaponServices value(GetSchemaValuePtr<void>(m_ptr, "CBasePlayerPawn", "m_pWeaponServices"));
    return value;
}

void GCBasePlayerPawn::SetWeaponServices(GCPlayer_WeaponServices* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'WeaponServices' is not possible.\n");
}

GCPlayer_ItemServices GCBasePlayerPawn::GetItemServices() const {
    GCPlayer_ItemServices value(GetSchemaValuePtr<void>(m_ptr, "CBasePlayerPawn", "m_pItemServices"));
    return value;
}

void GCBasePlayerPawn::SetItemServices(GCPlayer_ItemServices* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ItemServices' is not possible.\n");
}

GCPlayer_AutoaimServices GCBasePlayerPawn::GetAutoaimServices() const {
    GCPlayer_AutoaimServices value(GetSchemaValuePtr<void>(m_ptr, "CBasePlayerPawn", "m_pAutoaimServices"));
    return value;
}

void GCBasePlayerPawn::SetAutoaimServices(GCPlayer_AutoaimServices* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'AutoaimServices' is not possible.\n");
}

GCPlayer_ObserverServices GCBasePlayerPawn::GetObserverServices() const {
    GCPlayer_ObserverServices value(GetSchemaValuePtr<void>(m_ptr, "CBasePlayerPawn", "m_pObserverServices"));
    return value;
}

void GCBasePlayerPawn::SetObserverServices(GCPlayer_ObserverServices* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ObserverServices' is not possible.\n");
}

GCPlayer_WaterServices GCBasePlayerPawn::GetWaterServices() const {
    GCPlayer_WaterServices value(GetSchemaValuePtr<void>(m_ptr, "CBasePlayerPawn", "m_pWaterServices"));
    return value;
}

void GCBasePlayerPawn::SetWaterServices(GCPlayer_WaterServices* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'WaterServices' is not possible.\n");
}

GCPlayer_UseServices GCBasePlayerPawn::GetUseServices() const {
    GCPlayer_UseServices value(GetSchemaValuePtr<void>(m_ptr, "CBasePlayerPawn", "m_pUseServices"));
    return value;
}

void GCBasePlayerPawn::SetUseServices(GCPlayer_UseServices* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'UseServices' is not possible.\n");
}

GCPlayer_FlashlightServices GCBasePlayerPawn::GetFlashlightServices() const {
    GCPlayer_FlashlightServices value(GetSchemaValuePtr<void>(m_ptr, "CBasePlayerPawn", "m_pFlashlightServices"));
    return value;
}

void GCBasePlayerPawn::SetFlashlightServices(GCPlayer_FlashlightServices* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'FlashlightServices' is not possible.\n");
}

GCPlayer_CameraServices GCBasePlayerPawn::GetCameraServices() const {
    GCPlayer_CameraServices value(GetSchemaValuePtr<void>(m_ptr, "CBasePlayerPawn", "m_pCameraServices"));
    return value;
}

void GCBasePlayerPawn::SetCameraServices(GCPlayer_CameraServices* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'CameraServices' is not possible.\n");
}

GCPlayer_MovementServices GCBasePlayerPawn::GetMovementServices() const {
    GCPlayer_MovementServices value(GetSchemaValuePtr<void>(m_ptr, "CBasePlayerPawn", "m_pMovementServices"));
    return value;
}

void GCBasePlayerPawn::SetMovementServices(GCPlayer_MovementServices* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'MovementServices' is not possible.\n");
}

std::vector<GViewAngleServerChange_t> GCBasePlayerPawn::GetServerViewAngleChanges() const {
    CUtlVector<GViewAngleServerChange_t>* vec = GetSchemaValue<CUtlVector<GViewAngleServerChange_t>*>(m_ptr, "CBasePlayerPawn", "m_ServerViewAngleChanges"); std::vector<GViewAngleServerChange_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCBasePlayerPawn::SetServerViewAngleChanges(std::vector<GViewAngleServerChange_t> value) {
    SetSchemaValueCUtlVector<GViewAngleServerChange_t>(m_ptr, "CBasePlayerPawn", "m_ServerViewAngleChanges", false, value);
}

uint32_t GCBasePlayerPawn::GetHighestGeneratedServerViewAngleChangeIndex() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CBasePlayerPawn", "m_nHighestGeneratedServerViewAngleChangeIndex");
}

void GCBasePlayerPawn::SetHighestGeneratedServerViewAngleChangeIndex(uint32_t value) {
    SetSchemaValue(m_ptr, "CBasePlayerPawn", "m_nHighestGeneratedServerViewAngleChangeIndex", false, value);
}

QAngle GCBasePlayerPawn::Get_angle() const {
    return GetSchemaValue<QAngle>(m_ptr, "CBasePlayerPawn", "v_angle");
}

void GCBasePlayerPawn::Set_angle(QAngle value) {
    SetSchemaValue(m_ptr, "CBasePlayerPawn", "v_angle", false, value);
}

QAngle GCBasePlayerPawn::Get_anglePrevious() const {
    return GetSchemaValue<QAngle>(m_ptr, "CBasePlayerPawn", "v_anglePrevious");
}

void GCBasePlayerPawn::Set_anglePrevious(QAngle value) {
    SetSchemaValue(m_ptr, "CBasePlayerPawn", "v_anglePrevious", false, value);
}

uint32_t GCBasePlayerPawn::GetHideHUD() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CBasePlayerPawn", "m_iHideHUD");
}

void GCBasePlayerPawn::SetHideHUD(uint32_t value) {
    SetSchemaValue(m_ptr, "CBasePlayerPawn", "m_iHideHUD", false, value);
}

Gsky3dparams_t GCBasePlayerPawn::GetSkybox3d() const {
    return GetSchemaValue<Gsky3dparams_t>(m_ptr, "CBasePlayerPawn", "m_skybox3d");
}

void GCBasePlayerPawn::SetSkybox3d(Gsky3dparams_t value) {
    SetSchemaValue(m_ptr, "CBasePlayerPawn", "m_skybox3d", false, value);
}

bool GCBasePlayerPawn::GetInitHUD() const {
    return GetSchemaValue<bool>(m_ptr, "CBasePlayerPawn", "m_fInitHUD");
}

void GCBasePlayerPawn::SetInitHUD(bool value) {
    SetSchemaValue(m_ptr, "CBasePlayerPawn", "m_fInitHUD", false, value);
}

GCAI_Expresser GCBasePlayerPawn::GetExpresser() const {
    GCAI_Expresser value(GetSchemaValuePtr<void>(m_ptr, "CBasePlayerPawn", "m_pExpresser"));
    return value;
}

void GCBasePlayerPawn::SetExpresser(GCAI_Expresser* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Expresser' is not possible.\n");
}

GCBasePlayerController GCBasePlayerPawn::GetController() const {
    GCBasePlayerController value(GetSchemaValuePtr<void>(m_ptr, "CBasePlayerPawn", "m_hController"));
    return value;
}

void GCBasePlayerPawn::SetController(GCBasePlayerController* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Controller' is not possible.\n");
}

float GCBasePlayerPawn::GetHltvReplayDelay() const {
    return GetSchemaValue<float>(m_ptr, "CBasePlayerPawn", "m_fHltvReplayDelay");
}

void GCBasePlayerPawn::SetHltvReplayDelay(float value) {
    SetSchemaValue(m_ptr, "CBasePlayerPawn", "m_fHltvReplayDelay", false, value);
}

float GCBasePlayerPawn::GetHltvReplayEnd() const {
    return GetSchemaValue<float>(m_ptr, "CBasePlayerPawn", "m_fHltvReplayEnd");
}

void GCBasePlayerPawn::SetHltvReplayEnd(float value) {
    SetSchemaValue(m_ptr, "CBasePlayerPawn", "m_fHltvReplayEnd", false, value);
}

CEntityIndex GCBasePlayerPawn::GetHltvReplayEntity() const {
    return GetSchemaValue<CEntityIndex>(m_ptr, "CBasePlayerPawn", "m_iHltvReplayEntity");
}

void GCBasePlayerPawn::SetHltvReplayEntity(CEntityIndex value) {
    SetSchemaValue(m_ptr, "CBasePlayerPawn", "m_iHltvReplayEntity", false, value);
}

std::vector<Gsndopvarlatchdata_t> GCBasePlayerPawn::GetSndOpvarLatchData() const {
    CUtlVector<Gsndopvarlatchdata_t>* vec = GetSchemaValue<CUtlVector<Gsndopvarlatchdata_t>*>(m_ptr, "CBasePlayerPawn", "m_sndOpvarLatchData"); std::vector<Gsndopvarlatchdata_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCBasePlayerPawn::SetSndOpvarLatchData(std::vector<Gsndopvarlatchdata_t> value) {
    SetSchemaValueCUtlVector<Gsndopvarlatchdata_t>(m_ptr, "CBasePlayerPawn", "m_sndOpvarLatchData", false, value);
}

std::string GCBasePlayerPawn::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBasePlayerPawn::IsValid() {
    return (m_ptr != nullptr);
}

GCGameMoney::GCGameMoney(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCGameMoney::GCGameMoney(void *ptr) {
    m_ptr = ptr;
}

GCEntityIOOutput GCGameMoney::GetOnMoneySpent() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CGameMoney", "m_OnMoneySpent");
}

void GCGameMoney::SetOnMoneySpent(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CGameMoney", "m_OnMoneySpent", false, value);
}

GCEntityIOOutput GCGameMoney::GetOnMoneySpentFail() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CGameMoney", "m_OnMoneySpentFail");
}

void GCGameMoney::SetOnMoneySpentFail(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CGameMoney", "m_OnMoneySpentFail", false, value);
}

int32_t GCGameMoney::GetMoney() const {
    return GetSchemaValue<int32_t>(m_ptr, "CGameMoney", "m_nMoney");
}

void GCGameMoney::SetMoney(int32_t value) {
    SetSchemaValue(m_ptr, "CGameMoney", "m_nMoney", false, value);
}

CUtlString GCGameMoney::GetStrAwardText() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CGameMoney", "m_strAwardText");
}

void GCGameMoney::SetStrAwardText(CUtlString value) {
    SetSchemaValue(m_ptr, "CGameMoney", "m_strAwardText", false, value);
}

std::string GCGameMoney::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCGameMoney::IsValid() {
    return (m_ptr != nullptr);
}

GCLogicPlayerProxy::GCLogicPlayerProxy(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCLogicPlayerProxy::GCLogicPlayerProxy(void *ptr) {
    m_ptr = ptr;
}

GCBaseEntity GCLogicPlayerProxy::GetPlayer() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CLogicPlayerProxy", "m_hPlayer"));
    return value;
}

void GCLogicPlayerProxy::SetPlayer(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Player' is not possible.\n");
}

GCEntityIOOutput GCLogicPlayerProxy::GetPlayerHasAmmo() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CLogicPlayerProxy", "m_PlayerHasAmmo");
}

void GCLogicPlayerProxy::SetPlayerHasAmmo(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CLogicPlayerProxy", "m_PlayerHasAmmo", false, value);
}

GCEntityIOOutput GCLogicPlayerProxy::GetPlayerHasNoAmmo() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CLogicPlayerProxy", "m_PlayerHasNoAmmo");
}

void GCLogicPlayerProxy::SetPlayerHasNoAmmo(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CLogicPlayerProxy", "m_PlayerHasNoAmmo", false, value);
}

GCEntityIOOutput GCLogicPlayerProxy::GetPlayerDied() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CLogicPlayerProxy", "m_PlayerDied");
}

void GCLogicPlayerProxy::SetPlayerDied(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CLogicPlayerProxy", "m_PlayerDied", false, value);
}

std::string GCLogicPlayerProxy::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCLogicPlayerProxy::IsValid() {
    return (m_ptr != nullptr);
}

GCPlayer_ObserverServices::GCPlayer_ObserverServices(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPlayer_ObserverServices::GCPlayer_ObserverServices(void *ptr) {
    m_ptr = ptr;
}

uint8_t GCPlayer_ObserverServices::GetObserverMode() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CPlayer_ObserverServices", "m_iObserverMode");
}

void GCPlayer_ObserverServices::SetObserverMode(uint8_t value) {
    SetSchemaValue(m_ptr, "CPlayer_ObserverServices", "m_iObserverMode", false, value);
}

GCBaseEntity GCPlayer_ObserverServices::GetObserverTarget() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CPlayer_ObserverServices", "m_hObserverTarget"));
    return value;
}

void GCPlayer_ObserverServices::SetObserverTarget(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ObserverTarget' is not possible.\n");
}

ObserverMode_t GCPlayer_ObserverServices::GetObserverLastMode() const {
    return GetSchemaValue<ObserverMode_t>(m_ptr, "CPlayer_ObserverServices", "m_iObserverLastMode");
}

void GCPlayer_ObserverServices::SetObserverLastMode(ObserverMode_t value) {
    SetSchemaValue(m_ptr, "CPlayer_ObserverServices", "m_iObserverLastMode", false, value);
}

bool GCPlayer_ObserverServices::GetForcedObserverMode() const {
    return GetSchemaValue<bool>(m_ptr, "CPlayer_ObserverServices", "m_bForcedObserverMode");
}

void GCPlayer_ObserverServices::SetForcedObserverMode(bool value) {
    SetSchemaValue(m_ptr, "CPlayer_ObserverServices", "m_bForcedObserverMode", false, value);
}

std::string GCPlayer_ObserverServices::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPlayer_ObserverServices::IsValid() {
    return (m_ptr != nullptr);
}

GCWeaponZoneRepulsor::GCWeaponZoneRepulsor(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWeaponZoneRepulsor::GCWeaponZoneRepulsor(void *ptr) {
    m_ptr = ptr;
}

std::string GCWeaponZoneRepulsor::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWeaponZoneRepulsor::IsValid() {
    return (m_ptr != nullptr);
}

GCPhysImpact::GCPhysImpact(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPhysImpact::GCPhysImpact(void *ptr) {
    m_ptr = ptr;
}

float GCPhysImpact::GetDamage() const {
    return GetSchemaValue<float>(m_ptr, "CPhysImpact", "m_damage");
}

void GCPhysImpact::SetDamage(float value) {
    SetSchemaValue(m_ptr, "CPhysImpact", "m_damage", false, value);
}

float GCPhysImpact::GetDistance() const {
    return GetSchemaValue<float>(m_ptr, "CPhysImpact", "m_distance");
}

void GCPhysImpact::SetDistance(float value) {
    SetSchemaValue(m_ptr, "CPhysImpact", "m_distance", false, value);
}

CUtlSymbolLarge GCPhysImpact::GetDirectionEntityName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPhysImpact", "m_directionEntityName");
}

void GCPhysImpact::SetDirectionEntityName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPhysImpact", "m_directionEntityName", false, value);
}

std::string GCPhysImpact::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPhysImpact::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvCombinedLightProbeVolume::GCEnvCombinedLightProbeVolume(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvCombinedLightProbeVolume::GCEnvCombinedLightProbeVolume(void *ptr) {
    m_ptr = ptr;
}

Color GCEnvCombinedLightProbeVolume::GetEntity_Color() const {
    return GetSchemaValue<Color>(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_Color");
}

void GCEnvCombinedLightProbeVolume::SetEntity_Color(Color value) {
    SetSchemaValue(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_Color", false, value);
}

float GCEnvCombinedLightProbeVolume::GetEntity_flBrightness() const {
    return GetSchemaValue<float>(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_flBrightness");
}

void GCEnvCombinedLightProbeVolume::SetEntity_flBrightness(float value) {
    SetSchemaValue(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_flBrightness", false, value);
}

bool GCEnvCombinedLightProbeVolume::GetEntity_bCustomCubemapTexture() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_bCustomCubemapTexture");
}

void GCEnvCombinedLightProbeVolume::SetEntity_bCustomCubemapTexture(bool value) {
    SetSchemaValue(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_bCustomCubemapTexture", false, value);
}

Vector GCEnvCombinedLightProbeVolume::GetEntity_vBoxMins() const {
    return GetSchemaValue<Vector>(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_vBoxMins");
}

void GCEnvCombinedLightProbeVolume::SetEntity_vBoxMins(Vector value) {
    SetSchemaValue(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_vBoxMins", false, value);
}

Vector GCEnvCombinedLightProbeVolume::GetEntity_vBoxMaxs() const {
    return GetSchemaValue<Vector>(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_vBoxMaxs");
}

void GCEnvCombinedLightProbeVolume::SetEntity_vBoxMaxs(Vector value) {
    SetSchemaValue(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_vBoxMaxs", false, value);
}

bool GCEnvCombinedLightProbeVolume::GetEntity_bMoveable() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_bMoveable");
}

void GCEnvCombinedLightProbeVolume::SetEntity_bMoveable(bool value) {
    SetSchemaValue(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_bMoveable", false, value);
}

int32_t GCEnvCombinedLightProbeVolume::GetEntity_nHandshake() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_nHandshake");
}

void GCEnvCombinedLightProbeVolume::SetEntity_nHandshake(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_nHandshake", false, value);
}

int32_t GCEnvCombinedLightProbeVolume::GetEntity_nEnvCubeMapArrayIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_nEnvCubeMapArrayIndex");
}

void GCEnvCombinedLightProbeVolume::SetEntity_nEnvCubeMapArrayIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_nEnvCubeMapArrayIndex", false, value);
}

int32_t GCEnvCombinedLightProbeVolume::GetEntity_nPriority() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_nPriority");
}

void GCEnvCombinedLightProbeVolume::SetEntity_nPriority(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_nPriority", false, value);
}

bool GCEnvCombinedLightProbeVolume::GetEntity_bStartDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_bStartDisabled");
}

void GCEnvCombinedLightProbeVolume::SetEntity_bStartDisabled(bool value) {
    SetSchemaValue(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_bStartDisabled", false, value);
}

float GCEnvCombinedLightProbeVolume::GetEntity_flEdgeFadeDist() const {
    return GetSchemaValue<float>(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_flEdgeFadeDist");
}

void GCEnvCombinedLightProbeVolume::SetEntity_flEdgeFadeDist(float value) {
    SetSchemaValue(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_flEdgeFadeDist", false, value);
}

Vector GCEnvCombinedLightProbeVolume::GetEntity_vEdgeFadeDists() const {
    return GetSchemaValue<Vector>(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_vEdgeFadeDists");
}

void GCEnvCombinedLightProbeVolume::SetEntity_vEdgeFadeDists(Vector value) {
    SetSchemaValue(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_vEdgeFadeDists", false, value);
}

int32_t GCEnvCombinedLightProbeVolume::GetEntity_nLightProbeSizeX() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_nLightProbeSizeX");
}

void GCEnvCombinedLightProbeVolume::SetEntity_nLightProbeSizeX(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_nLightProbeSizeX", false, value);
}

int32_t GCEnvCombinedLightProbeVolume::GetEntity_nLightProbeSizeY() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_nLightProbeSizeY");
}

void GCEnvCombinedLightProbeVolume::SetEntity_nLightProbeSizeY(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_nLightProbeSizeY", false, value);
}

int32_t GCEnvCombinedLightProbeVolume::GetEntity_nLightProbeSizeZ() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_nLightProbeSizeZ");
}

void GCEnvCombinedLightProbeVolume::SetEntity_nLightProbeSizeZ(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_nLightProbeSizeZ", false, value);
}

int32_t GCEnvCombinedLightProbeVolume::GetEntity_nLightProbeAtlasX() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_nLightProbeAtlasX");
}

void GCEnvCombinedLightProbeVolume::SetEntity_nLightProbeAtlasX(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_nLightProbeAtlasX", false, value);
}

int32_t GCEnvCombinedLightProbeVolume::GetEntity_nLightProbeAtlasY() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_nLightProbeAtlasY");
}

void GCEnvCombinedLightProbeVolume::SetEntity_nLightProbeAtlasY(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_nLightProbeAtlasY", false, value);
}

int32_t GCEnvCombinedLightProbeVolume::GetEntity_nLightProbeAtlasZ() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_nLightProbeAtlasZ");
}

void GCEnvCombinedLightProbeVolume::SetEntity_nLightProbeAtlasZ(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_nLightProbeAtlasZ", false, value);
}

bool GCEnvCombinedLightProbeVolume::GetEntity_bEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_bEnabled");
}

void GCEnvCombinedLightProbeVolume::SetEntity_bEnabled(bool value) {
    SetSchemaValue(m_ptr, "CEnvCombinedLightProbeVolume", "m_Entity_bEnabled", false, value);
}

std::string GCEnvCombinedLightProbeVolume::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvCombinedLightProbeVolume::IsValid() {
    return (m_ptr != nullptr);
}

GCCSPlayer_WaterServices::GCCSPlayer_WaterServices(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSPlayer_WaterServices::GCCSPlayer_WaterServices(void *ptr) {
    m_ptr = ptr;
}

float GCCSPlayer_WaterServices::GetNextDrownDamageTime() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayer_WaterServices", "m_NextDrownDamageTime");
}

void GCCSPlayer_WaterServices::SetNextDrownDamageTime(float value) {
    SetSchemaValue(m_ptr, "CCSPlayer_WaterServices", "m_NextDrownDamageTime", false, value);
}

int32_t GCCSPlayer_WaterServices::GetDrownDmgRate() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayer_WaterServices", "m_nDrownDmgRate");
}

void GCCSPlayer_WaterServices::SetDrownDmgRate(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayer_WaterServices", "m_nDrownDmgRate", false, value);
}

float GCCSPlayer_WaterServices::GetWaterJumpTime() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayer_WaterServices", "m_flWaterJumpTime");
}

void GCCSPlayer_WaterServices::SetWaterJumpTime(float value) {
    SetSchemaValue(m_ptr, "CCSPlayer_WaterServices", "m_flWaterJumpTime", false, value);
}

Vector GCCSPlayer_WaterServices::GetWaterJumpVel() const {
    return GetSchemaValue<Vector>(m_ptr, "CCSPlayer_WaterServices", "m_vecWaterJumpVel");
}

void GCCSPlayer_WaterServices::SetWaterJumpVel(Vector value) {
    SetSchemaValue(m_ptr, "CCSPlayer_WaterServices", "m_vecWaterJumpVel", false, value);
}

float GCCSPlayer_WaterServices::GetSwimSoundTime() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayer_WaterServices", "m_flSwimSoundTime");
}

void GCCSPlayer_WaterServices::SetSwimSoundTime(float value) {
    SetSchemaValue(m_ptr, "CCSPlayer_WaterServices", "m_flSwimSoundTime", false, value);
}

std::string GCCSPlayer_WaterServices::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSPlayer_WaterServices::IsValid() {
    return (m_ptr != nullptr);
}

GCWeaponM249::GCWeaponM249(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWeaponM249::GCWeaponM249(void *ptr) {
    m_ptr = ptr;
}

std::string GCWeaponM249::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWeaponM249::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvParticleGlow::GCEnvParticleGlow(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvParticleGlow::GCEnvParticleGlow(void *ptr) {
    m_ptr = ptr;
}

float GCEnvParticleGlow::GetAlphaScale() const {
    return GetSchemaValue<float>(m_ptr, "CEnvParticleGlow", "m_flAlphaScale");
}

void GCEnvParticleGlow::SetAlphaScale(float value) {
    SetSchemaValue(m_ptr, "CEnvParticleGlow", "m_flAlphaScale", false, value);
}

float GCEnvParticleGlow::GetRadiusScale() const {
    return GetSchemaValue<float>(m_ptr, "CEnvParticleGlow", "m_flRadiusScale");
}

void GCEnvParticleGlow::SetRadiusScale(float value) {
    SetSchemaValue(m_ptr, "CEnvParticleGlow", "m_flRadiusScale", false, value);
}

float GCEnvParticleGlow::GetSelfIllumScale() const {
    return GetSchemaValue<float>(m_ptr, "CEnvParticleGlow", "m_flSelfIllumScale");
}

void GCEnvParticleGlow::SetSelfIllumScale(float value) {
    SetSchemaValue(m_ptr, "CEnvParticleGlow", "m_flSelfIllumScale", false, value);
}

Color GCEnvParticleGlow::GetColorTint() const {
    return GetSchemaValue<Color>(m_ptr, "CEnvParticleGlow", "m_ColorTint");
}

void GCEnvParticleGlow::SetColorTint(Color value) {
    SetSchemaValue(m_ptr, "CEnvParticleGlow", "m_ColorTint", false, value);
}

std::string GCEnvParticleGlow::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvParticleGlow::IsValid() {
    return (m_ptr != nullptr);
}

GCFuncVehicleClip::GCFuncVehicleClip(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFuncVehicleClip::GCFuncVehicleClip(void *ptr) {
    m_ptr = ptr;
}

std::string GCFuncVehicleClip::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFuncVehicleClip::IsValid() {
    return (m_ptr != nullptr);
}

GCSoundAreaEntityBase::GCSoundAreaEntityBase(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSoundAreaEntityBase::GCSoundAreaEntityBase(void *ptr) {
    m_ptr = ptr;
}

bool GCSoundAreaEntityBase::GetDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CSoundAreaEntityBase", "m_bDisabled");
}

void GCSoundAreaEntityBase::SetDisabled(bool value) {
    SetSchemaValue(m_ptr, "CSoundAreaEntityBase", "m_bDisabled", false, value);
}

CUtlSymbolLarge GCSoundAreaEntityBase::GetSoundAreaType() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSoundAreaEntityBase", "m_iszSoundAreaType");
}

void GCSoundAreaEntityBase::SetSoundAreaType(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CSoundAreaEntityBase", "m_iszSoundAreaType", false, value);
}

Vector GCSoundAreaEntityBase::GetPos() const {
    return GetSchemaValue<Vector>(m_ptr, "CSoundAreaEntityBase", "m_vPos");
}

void GCSoundAreaEntityBase::SetPos(Vector value) {
    SetSchemaValue(m_ptr, "CSoundAreaEntityBase", "m_vPos", false, value);
}

std::string GCSoundAreaEntityBase::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSoundAreaEntityBase::IsValid() {
    return (m_ptr != nullptr);
}

GCFuncBrush::GCFuncBrush(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFuncBrush::GCFuncBrush(void *ptr) {
    m_ptr = ptr;
}

BrushSolidities_e GCFuncBrush::GetSolidity() const {
    return GetSchemaValue<BrushSolidities_e>(m_ptr, "CFuncBrush", "m_iSolidity");
}

void GCFuncBrush::SetSolidity(BrushSolidities_e value) {
    SetSchemaValue(m_ptr, "CFuncBrush", "m_iSolidity", false, value);
}

int32_t GCFuncBrush::GetDisabled() const {
    return GetSchemaValue<int32_t>(m_ptr, "CFuncBrush", "m_iDisabled");
}

void GCFuncBrush::SetDisabled(int32_t value) {
    SetSchemaValue(m_ptr, "CFuncBrush", "m_iDisabled", false, value);
}

bool GCFuncBrush::GetSolidBsp() const {
    return GetSchemaValue<bool>(m_ptr, "CFuncBrush", "m_bSolidBsp");
}

void GCFuncBrush::SetSolidBsp(bool value) {
    SetSchemaValue(m_ptr, "CFuncBrush", "m_bSolidBsp", false, value);
}

CUtlSymbolLarge GCFuncBrush::GetExcludedClass() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncBrush", "m_iszExcludedClass");
}

void GCFuncBrush::SetExcludedClass(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFuncBrush", "m_iszExcludedClass", false, value);
}

bool GCFuncBrush::GetInvertExclusion() const {
    return GetSchemaValue<bool>(m_ptr, "CFuncBrush", "m_bInvertExclusion");
}

void GCFuncBrush::SetInvertExclusion(bool value) {
    SetSchemaValue(m_ptr, "CFuncBrush", "m_bInvertExclusion", false, value);
}

bool GCFuncBrush::GetScriptedMovement() const {
    return GetSchemaValue<bool>(m_ptr, "CFuncBrush", "m_bScriptedMovement");
}

void GCFuncBrush::SetScriptedMovement(bool value) {
    SetSchemaValue(m_ptr, "CFuncBrush", "m_bScriptedMovement", false, value);
}

std::string GCFuncBrush::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFuncBrush::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvFunnel::GCEnvFunnel(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvFunnel::GCEnvFunnel(void *ptr) {
    m_ptr = ptr;
}

std::string GCEnvFunnel::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvFunnel::IsValid() {
    return (m_ptr != nullptr);
}

GSequenceHistory_t::GSequenceHistory_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GSequenceHistory_t::GSequenceHistory_t(void *ptr) {
    m_ptr = ptr;
}

float GSequenceHistory_t::GetSeqFixedCycle() const {
    return GetSchemaValue<float>(m_ptr, "SequenceHistory_t", "m_flSeqFixedCycle");
}

void GSequenceHistory_t::SetSeqFixedCycle(float value) {
    SetSchemaValue(m_ptr, "SequenceHistory_t", "m_flSeqFixedCycle", true, value);
}

AnimLoopMode_t GSequenceHistory_t::GetSeqLoopMode() const {
    return GetSchemaValue<AnimLoopMode_t>(m_ptr, "SequenceHistory_t", "m_nSeqLoopMode");
}

void GSequenceHistory_t::SetSeqLoopMode(AnimLoopMode_t value) {
    SetSchemaValue(m_ptr, "SequenceHistory_t", "m_nSeqLoopMode", true, value);
}

float GSequenceHistory_t::GetPlaybackRate() const {
    return GetSchemaValue<float>(m_ptr, "SequenceHistory_t", "m_flPlaybackRate");
}

void GSequenceHistory_t::SetPlaybackRate(float value) {
    SetSchemaValue(m_ptr, "SequenceHistory_t", "m_flPlaybackRate", true, value);
}

float GSequenceHistory_t::GetCyclesPerSecond() const {
    return GetSchemaValue<float>(m_ptr, "SequenceHistory_t", "m_flCyclesPerSecond");
}

void GSequenceHistory_t::SetCyclesPerSecond(float value) {
    SetSchemaValue(m_ptr, "SequenceHistory_t", "m_flCyclesPerSecond", true, value);
}

std::string GSequenceHistory_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GSequenceHistory_t::IsValid() {
    return (m_ptr != nullptr);
}

GCCSGameModeRules_Noop::GCCSGameModeRules_Noop(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSGameModeRules_Noop::GCCSGameModeRules_Noop(void *ptr) {
    m_ptr = ptr;
}

std::string GCCSGameModeRules_Noop::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSGameModeRules_Noop::IsValid() {
    return (m_ptr != nullptr);
}

GCPointAngularVelocitySensor::GCPointAngularVelocitySensor(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPointAngularVelocitySensor::GCPointAngularVelocitySensor(void *ptr) {
    m_ptr = ptr;
}

GCBaseEntity GCPointAngularVelocitySensor::GetTargetEntity() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CPointAngularVelocitySensor", "m_hTargetEntity"));
    return value;
}

void GCPointAngularVelocitySensor::SetTargetEntity(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'TargetEntity' is not possible.\n");
}

float GCPointAngularVelocitySensor::GetThreshold() const {
    return GetSchemaValue<float>(m_ptr, "CPointAngularVelocitySensor", "m_flThreshold");
}

void GCPointAngularVelocitySensor::SetThreshold(float value) {
    SetSchemaValue(m_ptr, "CPointAngularVelocitySensor", "m_flThreshold", false, value);
}

int32_t GCPointAngularVelocitySensor::GetLastCompareResult() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPointAngularVelocitySensor", "m_nLastCompareResult");
}

void GCPointAngularVelocitySensor::SetLastCompareResult(int32_t value) {
    SetSchemaValue(m_ptr, "CPointAngularVelocitySensor", "m_nLastCompareResult", false, value);
}

int32_t GCPointAngularVelocitySensor::GetLastFireResult() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPointAngularVelocitySensor", "m_nLastFireResult");
}

void GCPointAngularVelocitySensor::SetLastFireResult(int32_t value) {
    SetSchemaValue(m_ptr, "CPointAngularVelocitySensor", "m_nLastFireResult", false, value);
}

float GCPointAngularVelocitySensor::GetFireInterval() const {
    return GetSchemaValue<float>(m_ptr, "CPointAngularVelocitySensor", "m_flFireInterval");
}

void GCPointAngularVelocitySensor::SetFireInterval(float value) {
    SetSchemaValue(m_ptr, "CPointAngularVelocitySensor", "m_flFireInterval", false, value);
}

float GCPointAngularVelocitySensor::GetLastAngVelocity() const {
    return GetSchemaValue<float>(m_ptr, "CPointAngularVelocitySensor", "m_flLastAngVelocity");
}

void GCPointAngularVelocitySensor::SetLastAngVelocity(float value) {
    SetSchemaValue(m_ptr, "CPointAngularVelocitySensor", "m_flLastAngVelocity", false, value);
}

QAngle GCPointAngularVelocitySensor::GetLastOrientation() const {
    return GetSchemaValue<QAngle>(m_ptr, "CPointAngularVelocitySensor", "m_lastOrientation");
}

void GCPointAngularVelocitySensor::SetLastOrientation(QAngle value) {
    SetSchemaValue(m_ptr, "CPointAngularVelocitySensor", "m_lastOrientation", false, value);
}

Vector GCPointAngularVelocitySensor::GetAxis() const {
    return GetSchemaValue<Vector>(m_ptr, "CPointAngularVelocitySensor", "m_vecAxis");
}

void GCPointAngularVelocitySensor::SetAxis(Vector value) {
    SetSchemaValue(m_ptr, "CPointAngularVelocitySensor", "m_vecAxis", false, value);
}

bool GCPointAngularVelocitySensor::GetUseHelper() const {
    return GetSchemaValue<bool>(m_ptr, "CPointAngularVelocitySensor", "m_bUseHelper");
}

void GCPointAngularVelocitySensor::SetUseHelper(bool value) {
    SetSchemaValue(m_ptr, "CPointAngularVelocitySensor", "m_bUseHelper", false, value);
}

GCEntityIOOutput GCPointAngularVelocitySensor::GetOnLessThan() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPointAngularVelocitySensor", "m_OnLessThan");
}

void GCPointAngularVelocitySensor::SetOnLessThan(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPointAngularVelocitySensor", "m_OnLessThan", false, value);
}

GCEntityIOOutput GCPointAngularVelocitySensor::GetOnLessThanOrEqualTo() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPointAngularVelocitySensor", "m_OnLessThanOrEqualTo");
}

void GCPointAngularVelocitySensor::SetOnLessThanOrEqualTo(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPointAngularVelocitySensor", "m_OnLessThanOrEqualTo", false, value);
}

GCEntityIOOutput GCPointAngularVelocitySensor::GetOnGreaterThan() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPointAngularVelocitySensor", "m_OnGreaterThan");
}

void GCPointAngularVelocitySensor::SetOnGreaterThan(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPointAngularVelocitySensor", "m_OnGreaterThan", false, value);
}

GCEntityIOOutput GCPointAngularVelocitySensor::GetOnGreaterThanOrEqualTo() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPointAngularVelocitySensor", "m_OnGreaterThanOrEqualTo");
}

void GCPointAngularVelocitySensor::SetOnGreaterThanOrEqualTo(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPointAngularVelocitySensor", "m_OnGreaterThanOrEqualTo", false, value);
}

GCEntityIOOutput GCPointAngularVelocitySensor::GetOnEqualTo() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPointAngularVelocitySensor", "m_OnEqualTo");
}

void GCPointAngularVelocitySensor::SetOnEqualTo(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPointAngularVelocitySensor", "m_OnEqualTo", false, value);
}

std::string GCPointAngularVelocitySensor::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPointAngularVelocitySensor::IsValid() {
    return (m_ptr != nullptr);
}

GCBaseCSGrenadeProjectile::GCBaseCSGrenadeProjectile(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBaseCSGrenadeProjectile::GCBaseCSGrenadeProjectile(void *ptr) {
    m_ptr = ptr;
}

Vector GCBaseCSGrenadeProjectile::GetInitialPosition() const {
    return GetSchemaValue<Vector>(m_ptr, "CBaseCSGrenadeProjectile", "m_vInitialPosition");
}

void GCBaseCSGrenadeProjectile::SetInitialPosition(Vector value) {
    SetSchemaValue(m_ptr, "CBaseCSGrenadeProjectile", "m_vInitialPosition", false, value);
}

Vector GCBaseCSGrenadeProjectile::GetInitialVelocity() const {
    return GetSchemaValue<Vector>(m_ptr, "CBaseCSGrenadeProjectile", "m_vInitialVelocity");
}

void GCBaseCSGrenadeProjectile::SetInitialVelocity(Vector value) {
    SetSchemaValue(m_ptr, "CBaseCSGrenadeProjectile", "m_vInitialVelocity", false, value);
}

int32_t GCBaseCSGrenadeProjectile::GetBounces() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBaseCSGrenadeProjectile", "m_nBounces");
}

void GCBaseCSGrenadeProjectile::SetBounces(int32_t value) {
    SetSchemaValue(m_ptr, "CBaseCSGrenadeProjectile", "m_nBounces", false, value);
}

int32_t GCBaseCSGrenadeProjectile::GetExplodeEffectTickBegin() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBaseCSGrenadeProjectile", "m_nExplodeEffectTickBegin");
}

void GCBaseCSGrenadeProjectile::SetExplodeEffectTickBegin(int32_t value) {
    SetSchemaValue(m_ptr, "CBaseCSGrenadeProjectile", "m_nExplodeEffectTickBegin", false, value);
}

Vector GCBaseCSGrenadeProjectile::GetExplodeEffectOrigin() const {
    return GetSchemaValue<Vector>(m_ptr, "CBaseCSGrenadeProjectile", "m_vecExplodeEffectOrigin");
}

void GCBaseCSGrenadeProjectile::SetExplodeEffectOrigin(Vector value) {
    SetSchemaValue(m_ptr, "CBaseCSGrenadeProjectile", "m_vecExplodeEffectOrigin", false, value);
}

uint8_t GCBaseCSGrenadeProjectile::GetOGSExtraFlags() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CBaseCSGrenadeProjectile", "m_unOGSExtraFlags");
}

void GCBaseCSGrenadeProjectile::SetOGSExtraFlags(uint8_t value) {
    SetSchemaValue(m_ptr, "CBaseCSGrenadeProjectile", "m_unOGSExtraFlags", false, value);
}

bool GCBaseCSGrenadeProjectile::GetDetonationRecorded() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseCSGrenadeProjectile", "m_bDetonationRecorded");
}

void GCBaseCSGrenadeProjectile::SetDetonationRecorded(bool value) {
    SetSchemaValue(m_ptr, "CBaseCSGrenadeProjectile", "m_bDetonationRecorded", false, value);
}

uint16_t GCBaseCSGrenadeProjectile::GetItemIndex() const {
    return GetSchemaValue<uint16_t>(m_ptr, "CBaseCSGrenadeProjectile", "m_nItemIndex");
}

void GCBaseCSGrenadeProjectile::SetItemIndex(uint16_t value) {
    SetSchemaValue(m_ptr, "CBaseCSGrenadeProjectile", "m_nItemIndex", false, value);
}

Vector GCBaseCSGrenadeProjectile::GetOriginalSpawnLocation() const {
    return GetSchemaValue<Vector>(m_ptr, "CBaseCSGrenadeProjectile", "m_vecOriginalSpawnLocation");
}

void GCBaseCSGrenadeProjectile::SetOriginalSpawnLocation(Vector value) {
    SetSchemaValue(m_ptr, "CBaseCSGrenadeProjectile", "m_vecOriginalSpawnLocation", false, value);
}

Vector GCBaseCSGrenadeProjectile::GetGrenadeSpin() const {
    return GetSchemaValue<Vector>(m_ptr, "CBaseCSGrenadeProjectile", "m_vecGrenadeSpin");
}

void GCBaseCSGrenadeProjectile::SetGrenadeSpin(Vector value) {
    SetSchemaValue(m_ptr, "CBaseCSGrenadeProjectile", "m_vecGrenadeSpin", false, value);
}

Vector GCBaseCSGrenadeProjectile::GetLastHitSurfaceNormal() const {
    return GetSchemaValue<Vector>(m_ptr, "CBaseCSGrenadeProjectile", "m_vecLastHitSurfaceNormal");
}

void GCBaseCSGrenadeProjectile::SetLastHitSurfaceNormal(Vector value) {
    SetSchemaValue(m_ptr, "CBaseCSGrenadeProjectile", "m_vecLastHitSurfaceNormal", false, value);
}

int32_t GCBaseCSGrenadeProjectile::GetTicksAtZeroVelocity() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBaseCSGrenadeProjectile", "m_nTicksAtZeroVelocity");
}

void GCBaseCSGrenadeProjectile::SetTicksAtZeroVelocity(int32_t value) {
    SetSchemaValue(m_ptr, "CBaseCSGrenadeProjectile", "m_nTicksAtZeroVelocity", false, value);
}

bool GCBaseCSGrenadeProjectile::GetHasEverHitPlayer() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseCSGrenadeProjectile", "m_bHasEverHitPlayer");
}

void GCBaseCSGrenadeProjectile::SetHasEverHitPlayer(bool value) {
    SetSchemaValue(m_ptr, "CBaseCSGrenadeProjectile", "m_bHasEverHitPlayer", false, value);
}

bool GCBaseCSGrenadeProjectile::GetClearFromPlayers() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseCSGrenadeProjectile", "m_bClearFromPlayers");
}

void GCBaseCSGrenadeProjectile::SetClearFromPlayers(bool value) {
    SetSchemaValue(m_ptr, "CBaseCSGrenadeProjectile", "m_bClearFromPlayers", false, value);
}

std::string GCBaseCSGrenadeProjectile::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBaseCSGrenadeProjectile::IsValid() {
    return (m_ptr != nullptr);
}

GCHostageRescueZoneShim::GCHostageRescueZoneShim(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCHostageRescueZoneShim::GCHostageRescueZoneShim(void *ptr) {
    m_ptr = ptr;
}

std::string GCHostageRescueZoneShim::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCHostageRescueZoneShim::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvInstructorHint::GCEnvInstructorHint(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvInstructorHint::GCEnvInstructorHint(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCEnvInstructorHint::GetName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvInstructorHint", "m_iszName");
}

void GCEnvInstructorHint::SetName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEnvInstructorHint", "m_iszName", false, value);
}

CUtlSymbolLarge GCEnvInstructorHint::GetReplace_Key() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvInstructorHint", "m_iszReplace_Key");
}

void GCEnvInstructorHint::SetReplace_Key(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEnvInstructorHint", "m_iszReplace_Key", false, value);
}

CUtlSymbolLarge GCEnvInstructorHint::GetHintTargetEntity() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvInstructorHint", "m_iszHintTargetEntity");
}

void GCEnvInstructorHint::SetHintTargetEntity(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEnvInstructorHint", "m_iszHintTargetEntity", false, value);
}

int32_t GCEnvInstructorHint::GetTimeout() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvInstructorHint", "m_iTimeout");
}

void GCEnvInstructorHint::SetTimeout(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvInstructorHint", "m_iTimeout", false, value);
}

int32_t GCEnvInstructorHint::GetDisplayLimit() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvInstructorHint", "m_iDisplayLimit");
}

void GCEnvInstructorHint::SetDisplayLimit(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvInstructorHint", "m_iDisplayLimit", false, value);
}

CUtlSymbolLarge GCEnvInstructorHint::GetIcon_Onscreen() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvInstructorHint", "m_iszIcon_Onscreen");
}

void GCEnvInstructorHint::SetIcon_Onscreen(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEnvInstructorHint", "m_iszIcon_Onscreen", false, value);
}

CUtlSymbolLarge GCEnvInstructorHint::GetIcon_Offscreen() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvInstructorHint", "m_iszIcon_Offscreen");
}

void GCEnvInstructorHint::SetIcon_Offscreen(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEnvInstructorHint", "m_iszIcon_Offscreen", false, value);
}

CUtlSymbolLarge GCEnvInstructorHint::GetCaption() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvInstructorHint", "m_iszCaption");
}

void GCEnvInstructorHint::SetCaption(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEnvInstructorHint", "m_iszCaption", false, value);
}

CUtlSymbolLarge GCEnvInstructorHint::GetActivatorCaption() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvInstructorHint", "m_iszActivatorCaption");
}

void GCEnvInstructorHint::SetActivatorCaption(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEnvInstructorHint", "m_iszActivatorCaption", false, value);
}

Color GCEnvInstructorHint::GetColor() const {
    return GetSchemaValue<Color>(m_ptr, "CEnvInstructorHint", "m_Color");
}

void GCEnvInstructorHint::SetColor(Color value) {
    SetSchemaValue(m_ptr, "CEnvInstructorHint", "m_Color", false, value);
}

float GCEnvInstructorHint::GetIconOffset() const {
    return GetSchemaValue<float>(m_ptr, "CEnvInstructorHint", "m_fIconOffset");
}

void GCEnvInstructorHint::SetIconOffset(float value) {
    SetSchemaValue(m_ptr, "CEnvInstructorHint", "m_fIconOffset", false, value);
}

float GCEnvInstructorHint::GetRange() const {
    return GetSchemaValue<float>(m_ptr, "CEnvInstructorHint", "m_fRange");
}

void GCEnvInstructorHint::SetRange(float value) {
    SetSchemaValue(m_ptr, "CEnvInstructorHint", "m_fRange", false, value);
}

uint8_t GCEnvInstructorHint::GetPulseOption() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CEnvInstructorHint", "m_iPulseOption");
}

void GCEnvInstructorHint::SetPulseOption(uint8_t value) {
    SetSchemaValue(m_ptr, "CEnvInstructorHint", "m_iPulseOption", false, value);
}

uint8_t GCEnvInstructorHint::GetAlphaOption() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CEnvInstructorHint", "m_iAlphaOption");
}

void GCEnvInstructorHint::SetAlphaOption(uint8_t value) {
    SetSchemaValue(m_ptr, "CEnvInstructorHint", "m_iAlphaOption", false, value);
}

uint8_t GCEnvInstructorHint::GetShakeOption() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CEnvInstructorHint", "m_iShakeOption");
}

void GCEnvInstructorHint::SetShakeOption(uint8_t value) {
    SetSchemaValue(m_ptr, "CEnvInstructorHint", "m_iShakeOption", false, value);
}

bool GCEnvInstructorHint::GetStatic() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvInstructorHint", "m_bStatic");
}

void GCEnvInstructorHint::SetStatic(bool value) {
    SetSchemaValue(m_ptr, "CEnvInstructorHint", "m_bStatic", false, value);
}

bool GCEnvInstructorHint::GetNoOffscreen() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvInstructorHint", "m_bNoOffscreen");
}

void GCEnvInstructorHint::SetNoOffscreen(bool value) {
    SetSchemaValue(m_ptr, "CEnvInstructorHint", "m_bNoOffscreen", false, value);
}

bool GCEnvInstructorHint::GetForceCaption() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvInstructorHint", "m_bForceCaption");
}

void GCEnvInstructorHint::SetForceCaption(bool value) {
    SetSchemaValue(m_ptr, "CEnvInstructorHint", "m_bForceCaption", false, value);
}

int32_t GCEnvInstructorHint::GetInstanceType() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvInstructorHint", "m_iInstanceType");
}

void GCEnvInstructorHint::SetInstanceType(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvInstructorHint", "m_iInstanceType", false, value);
}

bool GCEnvInstructorHint::GetSuppressRest() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvInstructorHint", "m_bSuppressRest");
}

void GCEnvInstructorHint::SetSuppressRest(bool value) {
    SetSchemaValue(m_ptr, "CEnvInstructorHint", "m_bSuppressRest", false, value);
}

CUtlSymbolLarge GCEnvInstructorHint::GetBinding() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvInstructorHint", "m_iszBinding");
}

void GCEnvInstructorHint::SetBinding(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEnvInstructorHint", "m_iszBinding", false, value);
}

bool GCEnvInstructorHint::GetAllowNoDrawTarget() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvInstructorHint", "m_bAllowNoDrawTarget");
}

void GCEnvInstructorHint::SetAllowNoDrawTarget(bool value) {
    SetSchemaValue(m_ptr, "CEnvInstructorHint", "m_bAllowNoDrawTarget", false, value);
}

bool GCEnvInstructorHint::GetAutoStart() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvInstructorHint", "m_bAutoStart");
}

void GCEnvInstructorHint::SetAutoStart(bool value) {
    SetSchemaValue(m_ptr, "CEnvInstructorHint", "m_bAutoStart", false, value);
}

bool GCEnvInstructorHint::GetLocalPlayerOnly() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvInstructorHint", "m_bLocalPlayerOnly");
}

void GCEnvInstructorHint::SetLocalPlayerOnly(bool value) {
    SetSchemaValue(m_ptr, "CEnvInstructorHint", "m_bLocalPlayerOnly", false, value);
}

std::string GCEnvInstructorHint::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvInstructorHint::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvTracer::GCEnvTracer(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvTracer::GCEnvTracer(void *ptr) {
    m_ptr = ptr;
}

Vector GCEnvTracer::GetEnd() const {
    return GetSchemaValue<Vector>(m_ptr, "CEnvTracer", "m_vecEnd");
}

void GCEnvTracer::SetEnd(Vector value) {
    SetSchemaValue(m_ptr, "CEnvTracer", "m_vecEnd", false, value);
}

float GCEnvTracer::GetDelay() const {
    return GetSchemaValue<float>(m_ptr, "CEnvTracer", "m_flDelay");
}

void GCEnvTracer::SetDelay(float value) {
    SetSchemaValue(m_ptr, "CEnvTracer", "m_flDelay", false, value);
}

std::string GCEnvTracer::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvTracer::IsValid() {
    return (m_ptr != nullptr);
}

GCInfoGameEventProxy::GCInfoGameEventProxy(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCInfoGameEventProxy::GCInfoGameEventProxy(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCInfoGameEventProxy::GetEventName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CInfoGameEventProxy", "m_iszEventName");
}

void GCInfoGameEventProxy::SetEventName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CInfoGameEventProxy", "m_iszEventName", false, value);
}

float GCInfoGameEventProxy::GetRange() const {
    return GetSchemaValue<float>(m_ptr, "CInfoGameEventProxy", "m_flRange");
}

void GCInfoGameEventProxy::SetRange(float value) {
    SetSchemaValue(m_ptr, "CInfoGameEventProxy", "m_flRange", false, value);
}

std::string GCInfoGameEventProxy::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCInfoGameEventProxy::IsValid() {
    return (m_ptr != nullptr);
}

GCPointCamera::GCPointCamera(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPointCamera::GCPointCamera(void *ptr) {
    m_ptr = ptr;
}

float GCPointCamera::GetFOV() const {
    return GetSchemaValue<float>(m_ptr, "CPointCamera", "m_FOV");
}

void GCPointCamera::SetFOV(float value) {
    SetSchemaValue(m_ptr, "CPointCamera", "m_FOV", false, value);
}

float GCPointCamera::GetResolution() const {
    return GetSchemaValue<float>(m_ptr, "CPointCamera", "m_Resolution");
}

void GCPointCamera::SetResolution(float value) {
    SetSchemaValue(m_ptr, "CPointCamera", "m_Resolution", false, value);
}

bool GCPointCamera::GetFogEnable() const {
    return GetSchemaValue<bool>(m_ptr, "CPointCamera", "m_bFogEnable");
}

void GCPointCamera::SetFogEnable(bool value) {
    SetSchemaValue(m_ptr, "CPointCamera", "m_bFogEnable", false, value);
}

Color GCPointCamera::GetFogColor() const {
    return GetSchemaValue<Color>(m_ptr, "CPointCamera", "m_FogColor");
}

void GCPointCamera::SetFogColor(Color value) {
    SetSchemaValue(m_ptr, "CPointCamera", "m_FogColor", false, value);
}

float GCPointCamera::GetFogStart() const {
    return GetSchemaValue<float>(m_ptr, "CPointCamera", "m_flFogStart");
}

void GCPointCamera::SetFogStart(float value) {
    SetSchemaValue(m_ptr, "CPointCamera", "m_flFogStart", false, value);
}

float GCPointCamera::GetFogEnd() const {
    return GetSchemaValue<float>(m_ptr, "CPointCamera", "m_flFogEnd");
}

void GCPointCamera::SetFogEnd(float value) {
    SetSchemaValue(m_ptr, "CPointCamera", "m_flFogEnd", false, value);
}

float GCPointCamera::GetFogMaxDensity() const {
    return GetSchemaValue<float>(m_ptr, "CPointCamera", "m_flFogMaxDensity");
}

void GCPointCamera::SetFogMaxDensity(float value) {
    SetSchemaValue(m_ptr, "CPointCamera", "m_flFogMaxDensity", false, value);
}

bool GCPointCamera::GetActive() const {
    return GetSchemaValue<bool>(m_ptr, "CPointCamera", "m_bActive");
}

void GCPointCamera::SetActive(bool value) {
    SetSchemaValue(m_ptr, "CPointCamera", "m_bActive", false, value);
}

bool GCPointCamera::GetUseScreenAspectRatio() const {
    return GetSchemaValue<bool>(m_ptr, "CPointCamera", "m_bUseScreenAspectRatio");
}

void GCPointCamera::SetUseScreenAspectRatio(bool value) {
    SetSchemaValue(m_ptr, "CPointCamera", "m_bUseScreenAspectRatio", false, value);
}

float GCPointCamera::GetAspectRatio() const {
    return GetSchemaValue<float>(m_ptr, "CPointCamera", "m_flAspectRatio");
}

void GCPointCamera::SetAspectRatio(float value) {
    SetSchemaValue(m_ptr, "CPointCamera", "m_flAspectRatio", false, value);
}

bool GCPointCamera::GetNoSky() const {
    return GetSchemaValue<bool>(m_ptr, "CPointCamera", "m_bNoSky");
}

void GCPointCamera::SetNoSky(bool value) {
    SetSchemaValue(m_ptr, "CPointCamera", "m_bNoSky", false, value);
}

float GCPointCamera::GetBrightness() const {
    return GetSchemaValue<float>(m_ptr, "CPointCamera", "m_fBrightness");
}

void GCPointCamera::SetBrightness(float value) {
    SetSchemaValue(m_ptr, "CPointCamera", "m_fBrightness", false, value);
}

float GCPointCamera::GetZFar() const {
    return GetSchemaValue<float>(m_ptr, "CPointCamera", "m_flZFar");
}

void GCPointCamera::SetZFar(float value) {
    SetSchemaValue(m_ptr, "CPointCamera", "m_flZFar", false, value);
}

float GCPointCamera::GetZNear() const {
    return GetSchemaValue<float>(m_ptr, "CPointCamera", "m_flZNear");
}

void GCPointCamera::SetZNear(float value) {
    SetSchemaValue(m_ptr, "CPointCamera", "m_flZNear", false, value);
}

bool GCPointCamera::GetCanHLTVUse() const {
    return GetSchemaValue<bool>(m_ptr, "CPointCamera", "m_bCanHLTVUse");
}

void GCPointCamera::SetCanHLTVUse(bool value) {
    SetSchemaValue(m_ptr, "CPointCamera", "m_bCanHLTVUse", false, value);
}

bool GCPointCamera::GetDofEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CPointCamera", "m_bDofEnabled");
}

void GCPointCamera::SetDofEnabled(bool value) {
    SetSchemaValue(m_ptr, "CPointCamera", "m_bDofEnabled", false, value);
}

float GCPointCamera::GetDofNearBlurry() const {
    return GetSchemaValue<float>(m_ptr, "CPointCamera", "m_flDofNearBlurry");
}

void GCPointCamera::SetDofNearBlurry(float value) {
    SetSchemaValue(m_ptr, "CPointCamera", "m_flDofNearBlurry", false, value);
}

float GCPointCamera::GetDofNearCrisp() const {
    return GetSchemaValue<float>(m_ptr, "CPointCamera", "m_flDofNearCrisp");
}

void GCPointCamera::SetDofNearCrisp(float value) {
    SetSchemaValue(m_ptr, "CPointCamera", "m_flDofNearCrisp", false, value);
}

float GCPointCamera::GetDofFarCrisp() const {
    return GetSchemaValue<float>(m_ptr, "CPointCamera", "m_flDofFarCrisp");
}

void GCPointCamera::SetDofFarCrisp(float value) {
    SetSchemaValue(m_ptr, "CPointCamera", "m_flDofFarCrisp", false, value);
}

float GCPointCamera::GetDofFarBlurry() const {
    return GetSchemaValue<float>(m_ptr, "CPointCamera", "m_flDofFarBlurry");
}

void GCPointCamera::SetDofFarBlurry(float value) {
    SetSchemaValue(m_ptr, "CPointCamera", "m_flDofFarBlurry", false, value);
}

float GCPointCamera::GetDofTiltToGround() const {
    return GetSchemaValue<float>(m_ptr, "CPointCamera", "m_flDofTiltToGround");
}

void GCPointCamera::SetDofTiltToGround(float value) {
    SetSchemaValue(m_ptr, "CPointCamera", "m_flDofTiltToGround", false, value);
}

float GCPointCamera::GetTargetFOV() const {
    return GetSchemaValue<float>(m_ptr, "CPointCamera", "m_TargetFOV");
}

void GCPointCamera::SetTargetFOV(float value) {
    SetSchemaValue(m_ptr, "CPointCamera", "m_TargetFOV", false, value);
}

float GCPointCamera::GetDegreesPerSecond() const {
    return GetSchemaValue<float>(m_ptr, "CPointCamera", "m_DegreesPerSecond");
}

void GCPointCamera::SetDegreesPerSecond(float value) {
    SetSchemaValue(m_ptr, "CPointCamera", "m_DegreesPerSecond", false, value);
}

bool GCPointCamera::GetIsOn() const {
    return GetSchemaValue<bool>(m_ptr, "CPointCamera", "m_bIsOn");
}

void GCPointCamera::SetIsOn(bool value) {
    SetSchemaValue(m_ptr, "CPointCamera", "m_bIsOn", false, value);
}

GCPointCamera GCPointCamera::GetNext() const {
    GCPointCamera value(GetSchemaValuePtr<void>(m_ptr, "CPointCamera", "m_pNext"));
    return value;
}

void GCPointCamera::SetNext(GCPointCamera* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Next' is not possible.\n");
}

std::string GCPointCamera::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPointCamera::IsValid() {
    return (m_ptr != nullptr);
}

GCBodyComponentSkeletonInstance::GCBodyComponentSkeletonInstance(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBodyComponentSkeletonInstance::GCBodyComponentSkeletonInstance(void *ptr) {
    m_ptr = ptr;
}

GCSkeletonInstance GCBodyComponentSkeletonInstance::GetSkeletonInstance() const {
    return GetSchemaValue<GCSkeletonInstance>(m_ptr, "CBodyComponentSkeletonInstance", "m_skeletonInstance");
}

void GCBodyComponentSkeletonInstance::SetSkeletonInstance(GCSkeletonInstance value) {
    SetSchemaValue(m_ptr, "CBodyComponentSkeletonInstance", "m_skeletonInstance", false, value);
}

std::string GCBodyComponentSkeletonInstance::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBodyComponentSkeletonInstance::IsValid() {
    return (m_ptr != nullptr);
}

GCFuncLadderAlias_func_useableladder::GCFuncLadderAlias_func_useableladder(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFuncLadderAlias_func_useableladder::GCFuncLadderAlias_func_useableladder(void *ptr) {
    m_ptr = ptr;
}

std::string GCFuncLadderAlias_func_useableladder::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFuncLadderAlias_func_useableladder::IsValid() {
    return (m_ptr != nullptr);
}

GCBaseMoveBehavior::GCBaseMoveBehavior(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBaseMoveBehavior::GCBaseMoveBehavior(void *ptr) {
    m_ptr = ptr;
}

int32_t GCBaseMoveBehavior::GetPositionInterpolator() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBaseMoveBehavior", "m_iPositionInterpolator");
}

void GCBaseMoveBehavior::SetPositionInterpolator(int32_t value) {
    SetSchemaValue(m_ptr, "CBaseMoveBehavior", "m_iPositionInterpolator", false, value);
}

int32_t GCBaseMoveBehavior::GetRotationInterpolator() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBaseMoveBehavior", "m_iRotationInterpolator");
}

void GCBaseMoveBehavior::SetRotationInterpolator(int32_t value) {
    SetSchemaValue(m_ptr, "CBaseMoveBehavior", "m_iRotationInterpolator", false, value);
}

float GCBaseMoveBehavior::GetAnimStartTime() const {
    return GetSchemaValue<float>(m_ptr, "CBaseMoveBehavior", "m_flAnimStartTime");
}

void GCBaseMoveBehavior::SetAnimStartTime(float value) {
    SetSchemaValue(m_ptr, "CBaseMoveBehavior", "m_flAnimStartTime", false, value);
}

float GCBaseMoveBehavior::GetAnimEndTime() const {
    return GetSchemaValue<float>(m_ptr, "CBaseMoveBehavior", "m_flAnimEndTime");
}

void GCBaseMoveBehavior::SetAnimEndTime(float value) {
    SetSchemaValue(m_ptr, "CBaseMoveBehavior", "m_flAnimEndTime", false, value);
}

float GCBaseMoveBehavior::GetAverageSpeedAcrossFrame() const {
    return GetSchemaValue<float>(m_ptr, "CBaseMoveBehavior", "m_flAverageSpeedAcrossFrame");
}

void GCBaseMoveBehavior::SetAverageSpeedAcrossFrame(float value) {
    SetSchemaValue(m_ptr, "CBaseMoveBehavior", "m_flAverageSpeedAcrossFrame", false, value);
}

GCPathKeyFrame GCBaseMoveBehavior::GetCurrentKeyFrame() const {
    GCPathKeyFrame value(GetSchemaValuePtr<void>(m_ptr, "CBaseMoveBehavior", "m_pCurrentKeyFrame"));
    return value;
}

void GCBaseMoveBehavior::SetCurrentKeyFrame(GCPathKeyFrame* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'CurrentKeyFrame' is not possible.\n");
}

GCPathKeyFrame GCBaseMoveBehavior::GetTargetKeyFrame() const {
    GCPathKeyFrame value(GetSchemaValuePtr<void>(m_ptr, "CBaseMoveBehavior", "m_pTargetKeyFrame"));
    return value;
}

void GCBaseMoveBehavior::SetTargetKeyFrame(GCPathKeyFrame* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'TargetKeyFrame' is not possible.\n");
}

GCPathKeyFrame GCBaseMoveBehavior::GetPreKeyFrame() const {
    GCPathKeyFrame value(GetSchemaValuePtr<void>(m_ptr, "CBaseMoveBehavior", "m_pPreKeyFrame"));
    return value;
}

void GCBaseMoveBehavior::SetPreKeyFrame(GCPathKeyFrame* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'PreKeyFrame' is not possible.\n");
}

GCPathKeyFrame GCBaseMoveBehavior::GetPostKeyFrame() const {
    GCPathKeyFrame value(GetSchemaValuePtr<void>(m_ptr, "CBaseMoveBehavior", "m_pPostKeyFrame"));
    return value;
}

void GCBaseMoveBehavior::SetPostKeyFrame(GCPathKeyFrame* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'PostKeyFrame' is not possible.\n");
}

float GCBaseMoveBehavior::GetTimeIntoFrame() const {
    return GetSchemaValue<float>(m_ptr, "CBaseMoveBehavior", "m_flTimeIntoFrame");
}

void GCBaseMoveBehavior::SetTimeIntoFrame(float value) {
    SetSchemaValue(m_ptr, "CBaseMoveBehavior", "m_flTimeIntoFrame", false, value);
}

int32_t GCBaseMoveBehavior::GetDirection() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBaseMoveBehavior", "m_iDirection");
}

void GCBaseMoveBehavior::SetDirection(int32_t value) {
    SetSchemaValue(m_ptr, "CBaseMoveBehavior", "m_iDirection", false, value);
}

std::string GCBaseMoveBehavior::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBaseMoveBehavior::IsValid() {
    return (m_ptr != nullptr);
}

GCFuncInteractionLayerClip::GCFuncInteractionLayerClip(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFuncInteractionLayerClip::GCFuncInteractionLayerClip(void *ptr) {
    m_ptr = ptr;
}

bool GCFuncInteractionLayerClip::GetDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CFuncInteractionLayerClip", "m_bDisabled");
}

void GCFuncInteractionLayerClip::SetDisabled(bool value) {
    SetSchemaValue(m_ptr, "CFuncInteractionLayerClip", "m_bDisabled", false, value);
}

CUtlSymbolLarge GCFuncInteractionLayerClip::GetInteractsAs() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncInteractionLayerClip", "m_iszInteractsAs");
}

void GCFuncInteractionLayerClip::SetInteractsAs(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFuncInteractionLayerClip", "m_iszInteractsAs", false, value);
}

CUtlSymbolLarge GCFuncInteractionLayerClip::GetInteractsWith() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncInteractionLayerClip", "m_iszInteractsWith");
}

void GCFuncInteractionLayerClip::SetInteractsWith(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFuncInteractionLayerClip", "m_iszInteractsWith", false, value);
}

std::string GCFuncInteractionLayerClip::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFuncInteractionLayerClip::IsValid() {
    return (m_ptr != nullptr);
}

GCWeaponMAC10::GCWeaponMAC10(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWeaponMAC10::GCWeaponMAC10(void *ptr) {
    m_ptr = ptr;
}

std::string GCWeaponMAC10::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWeaponMAC10::IsValid() {
    return (m_ptr != nullptr);
}

GCGameRules::GCGameRules(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCGameRules::GCGameRules(void *ptr) {
    m_ptr = ptr;
}

GCNetworkVarChainer GCGameRules::Get__pChainEntity() const {
    return GetSchemaValue<GCNetworkVarChainer>(m_ptr, "CGameRules", "__m_pChainEntity");
}

void GCGameRules::Set__pChainEntity(GCNetworkVarChainer value) {
    SetSchemaValue(m_ptr, "CGameRules", "__m_pChainEntity", false, value);
}

std::string GCGameRules::GetQuestName() const {
    return GetSchemaValuePtr<char>(m_ptr, "CGameRules", "m_szQuestName");
}

void GCGameRules::SetQuestName(std::string value) {
    WriteSchemaPtrValue(m_ptr, "CGameRules", "m_szQuestName", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 128);
}

int32_t GCGameRules::GetQuestPhase() const {
    return GetSchemaValue<int32_t>(m_ptr, "CGameRules", "m_nQuestPhase");
}

void GCGameRules::SetQuestPhase(int32_t value) {
    SetSchemaValue(m_ptr, "CGameRules", "m_nQuestPhase", false, value);
}

int32_t GCGameRules::GetTotalPausedTicks() const {
    return GetSchemaValue<int32_t>(m_ptr, "CGameRules", "m_nTotalPausedTicks");
}

void GCGameRules::SetTotalPausedTicks(int32_t value) {
    SetSchemaValue(m_ptr, "CGameRules", "m_nTotalPausedTicks", false, value);
}

int32_t GCGameRules::GetPauseStartTick() const {
    return GetSchemaValue<int32_t>(m_ptr, "CGameRules", "m_nPauseStartTick");
}

void GCGameRules::SetPauseStartTick(int32_t value) {
    SetSchemaValue(m_ptr, "CGameRules", "m_nPauseStartTick", false, value);
}

bool GCGameRules::GetGamePaused() const {
    return GetSchemaValue<bool>(m_ptr, "CGameRules", "m_bGamePaused");
}

void GCGameRules::SetGamePaused(bool value) {
    SetSchemaValue(m_ptr, "CGameRules", "m_bGamePaused", false, value);
}

std::string GCGameRules::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCGameRules::IsValid() {
    return (m_ptr != nullptr);
}

GCWeaponRevolver::GCWeaponRevolver(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWeaponRevolver::GCWeaponRevolver(void *ptr) {
    m_ptr = ptr;
}

std::string GCWeaponRevolver::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWeaponRevolver::IsValid() {
    return (m_ptr != nullptr);
}

GCOrnamentProp::GCOrnamentProp(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCOrnamentProp::GCOrnamentProp(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCOrnamentProp::GetInitialOwner() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "COrnamentProp", "m_initialOwner");
}

void GCOrnamentProp::SetInitialOwner(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "COrnamentProp", "m_initialOwner", false, value);
}

std::string GCOrnamentProp::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCOrnamentProp::IsValid() {
    return (m_ptr != nullptr);
}

GCLogicGameEvent::GCLogicGameEvent(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCLogicGameEvent::GCLogicGameEvent(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCLogicGameEvent::GetEventName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CLogicGameEvent", "m_iszEventName");
}

void GCLogicGameEvent::SetEventName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CLogicGameEvent", "m_iszEventName", false, value);
}

std::string GCLogicGameEvent::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCLogicGameEvent::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvMuzzleFlash::GCEnvMuzzleFlash(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvMuzzleFlash::GCEnvMuzzleFlash(void *ptr) {
    m_ptr = ptr;
}

float GCEnvMuzzleFlash::GetScale() const {
    return GetSchemaValue<float>(m_ptr, "CEnvMuzzleFlash", "m_flScale");
}

void GCEnvMuzzleFlash::SetScale(float value) {
    SetSchemaValue(m_ptr, "CEnvMuzzleFlash", "m_flScale", false, value);
}

CUtlSymbolLarge GCEnvMuzzleFlash::GetParentAttachment() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvMuzzleFlash", "m_iszParentAttachment");
}

void GCEnvMuzzleFlash::SetParentAttachment(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEnvMuzzleFlash", "m_iszParentAttachment", false, value);
}

std::string GCEnvMuzzleFlash::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvMuzzleFlash::IsValid() {
    return (m_ptr != nullptr);
}

GCPlayerSprayDecal::GCPlayerSprayDecal(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPlayerSprayDecal::GCPlayerSprayDecal(void *ptr) {
    m_ptr = ptr;
}

int32_t GCPlayerSprayDecal::GetUniqueID() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPlayerSprayDecal", "m_nUniqueID");
}

void GCPlayerSprayDecal::SetUniqueID(int32_t value) {
    SetSchemaValue(m_ptr, "CPlayerSprayDecal", "m_nUniqueID", false, value);
}

uint32_t GCPlayerSprayDecal::GetAccountID() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CPlayerSprayDecal", "m_unAccountID");
}

void GCPlayerSprayDecal::SetAccountID(uint32_t value) {
    SetSchemaValue(m_ptr, "CPlayerSprayDecal", "m_unAccountID", false, value);
}

uint32_t GCPlayerSprayDecal::GetTraceID() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CPlayerSprayDecal", "m_unTraceID");
}

void GCPlayerSprayDecal::SetTraceID(uint32_t value) {
    SetSchemaValue(m_ptr, "CPlayerSprayDecal", "m_unTraceID", false, value);
}

uint32_t GCPlayerSprayDecal::GetRtGcTime() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CPlayerSprayDecal", "m_rtGcTime");
}

void GCPlayerSprayDecal::SetRtGcTime(uint32_t value) {
    SetSchemaValue(m_ptr, "CPlayerSprayDecal", "m_rtGcTime", false, value);
}

Vector GCPlayerSprayDecal::GetEndPos() const {
    return GetSchemaValue<Vector>(m_ptr, "CPlayerSprayDecal", "m_vecEndPos");
}

void GCPlayerSprayDecal::SetEndPos(Vector value) {
    SetSchemaValue(m_ptr, "CPlayerSprayDecal", "m_vecEndPos", false, value);
}

Vector GCPlayerSprayDecal::GetStart() const {
    return GetSchemaValue<Vector>(m_ptr, "CPlayerSprayDecal", "m_vecStart");
}

void GCPlayerSprayDecal::SetStart(Vector value) {
    SetSchemaValue(m_ptr, "CPlayerSprayDecal", "m_vecStart", false, value);
}

Vector GCPlayerSprayDecal::GetLeft() const {
    return GetSchemaValue<Vector>(m_ptr, "CPlayerSprayDecal", "m_vecLeft");
}

void GCPlayerSprayDecal::SetLeft(Vector value) {
    SetSchemaValue(m_ptr, "CPlayerSprayDecal", "m_vecLeft", false, value);
}

Vector GCPlayerSprayDecal::GetNormal() const {
    return GetSchemaValue<Vector>(m_ptr, "CPlayerSprayDecal", "m_vecNormal");
}

void GCPlayerSprayDecal::SetNormal(Vector value) {
    SetSchemaValue(m_ptr, "CPlayerSprayDecal", "m_vecNormal", false, value);
}

int32_t GCPlayerSprayDecal::GetPlayer() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPlayerSprayDecal", "m_nPlayer");
}

void GCPlayerSprayDecal::SetPlayer(int32_t value) {
    SetSchemaValue(m_ptr, "CPlayerSprayDecal", "m_nPlayer", false, value);
}

int32_t GCPlayerSprayDecal::GetEntity() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPlayerSprayDecal", "m_nEntity");
}

void GCPlayerSprayDecal::SetEntity(int32_t value) {
    SetSchemaValue(m_ptr, "CPlayerSprayDecal", "m_nEntity", false, value);
}

int32_t GCPlayerSprayDecal::GetHitbox() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPlayerSprayDecal", "m_nHitbox");
}

void GCPlayerSprayDecal::SetHitbox(int32_t value) {
    SetSchemaValue(m_ptr, "CPlayerSprayDecal", "m_nHitbox", false, value);
}

float GCPlayerSprayDecal::GetCreationTime() const {
    return GetSchemaValue<float>(m_ptr, "CPlayerSprayDecal", "m_flCreationTime");
}

void GCPlayerSprayDecal::SetCreationTime(float value) {
    SetSchemaValue(m_ptr, "CPlayerSprayDecal", "m_flCreationTime", false, value);
}

int32_t GCPlayerSprayDecal::GetTintID() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPlayerSprayDecal", "m_nTintID");
}

void GCPlayerSprayDecal::SetTintID(int32_t value) {
    SetSchemaValue(m_ptr, "CPlayerSprayDecal", "m_nTintID", false, value);
}

uint8_t GCPlayerSprayDecal::GetVersion() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CPlayerSprayDecal", "m_nVersion");
}

void GCPlayerSprayDecal::SetVersion(uint8_t value) {
    SetSchemaValue(m_ptr, "CPlayerSprayDecal", "m_nVersion", false, value);
}

std::vector<uint8_t> GCPlayerSprayDecal::GetSignature() const {
    uint8_t* outValue = GetSchemaValue<uint8_t*>(m_ptr, "CPlayerSprayDecal", "m_ubSignature"); std::vector<uint8_t> ret; for(int i = 0; i < 128; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCPlayerSprayDecal::SetSignature(std::vector<uint8_t> value) {
    uint8_t* outValue = GetSchemaValue<uint8_t*>(m_ptr, "CPlayerSprayDecal", "m_ubSignature"); for(int i = 0; i < 128; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CPlayerSprayDecal", "m_ubSignature", false, outValue);
}

std::string GCPlayerSprayDecal::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPlayerSprayDecal::IsValid() {
    return (m_ptr != nullptr);
}

GCBombTarget::GCBombTarget(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBombTarget::GCBombTarget(void *ptr) {
    m_ptr = ptr;
}

GCEntityIOOutput GCBombTarget::GetOnBombExplode() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBombTarget", "m_OnBombExplode");
}

void GCBombTarget::SetOnBombExplode(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBombTarget", "m_OnBombExplode", false, value);
}

GCEntityIOOutput GCBombTarget::GetOnBombPlanted() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBombTarget", "m_OnBombPlanted");
}

void GCBombTarget::SetOnBombPlanted(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBombTarget", "m_OnBombPlanted", false, value);
}

GCEntityIOOutput GCBombTarget::GetOnBombDefused() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBombTarget", "m_OnBombDefused");
}

void GCBombTarget::SetOnBombDefused(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBombTarget", "m_OnBombDefused", false, value);
}

bool GCBombTarget::GetIsBombSiteB() const {
    return GetSchemaValue<bool>(m_ptr, "CBombTarget", "m_bIsBombSiteB");
}

void GCBombTarget::SetIsBombSiteB(bool value) {
    SetSchemaValue(m_ptr, "CBombTarget", "m_bIsBombSiteB", false, value);
}

bool GCBombTarget::GetIsHeistBombTarget() const {
    return GetSchemaValue<bool>(m_ptr, "CBombTarget", "m_bIsHeistBombTarget");
}

void GCBombTarget::SetIsHeistBombTarget(bool value) {
    SetSchemaValue(m_ptr, "CBombTarget", "m_bIsHeistBombTarget", false, value);
}

bool GCBombTarget::GetBombPlantedHere() const {
    return GetSchemaValue<bool>(m_ptr, "CBombTarget", "m_bBombPlantedHere");
}

void GCBombTarget::SetBombPlantedHere(bool value) {
    SetSchemaValue(m_ptr, "CBombTarget", "m_bBombPlantedHere", false, value);
}

CUtlSymbolLarge GCBombTarget::GetMountTarget() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBombTarget", "m_szMountTarget");
}

void GCBombTarget::SetMountTarget(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBombTarget", "m_szMountTarget", false, value);
}

GCBaseEntity GCBombTarget::GetInstructorHint() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CBombTarget", "m_hInstructorHint"));
    return value;
}

void GCBombTarget::SetInstructorHint(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'InstructorHint' is not possible.\n");
}

int32_t GCBombTarget::GetBombSiteDesignation() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBombTarget", "m_nBombSiteDesignation");
}

void GCBombTarget::SetBombSiteDesignation(int32_t value) {
    SetSchemaValue(m_ptr, "CBombTarget", "m_nBombSiteDesignation", false, value);
}

std::string GCBombTarget::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBombTarget::IsValid() {
    return (m_ptr != nullptr);
}

GCPhysicsSpring::GCPhysicsSpring(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPhysicsSpring::GCPhysicsSpring(void *ptr) {
    m_ptr = ptr;
}

float GCPhysicsSpring::GetFrequency() const {
    return GetSchemaValue<float>(m_ptr, "CPhysicsSpring", "m_flFrequency");
}

void GCPhysicsSpring::SetFrequency(float value) {
    SetSchemaValue(m_ptr, "CPhysicsSpring", "m_flFrequency", false, value);
}

float GCPhysicsSpring::GetDampingRatio() const {
    return GetSchemaValue<float>(m_ptr, "CPhysicsSpring", "m_flDampingRatio");
}

void GCPhysicsSpring::SetDampingRatio(float value) {
    SetSchemaValue(m_ptr, "CPhysicsSpring", "m_flDampingRatio", false, value);
}

float GCPhysicsSpring::GetRestLength() const {
    return GetSchemaValue<float>(m_ptr, "CPhysicsSpring", "m_flRestLength");
}

void GCPhysicsSpring::SetRestLength(float value) {
    SetSchemaValue(m_ptr, "CPhysicsSpring", "m_flRestLength", false, value);
}

CUtlSymbolLarge GCPhysicsSpring::GetNameAttachStart() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPhysicsSpring", "m_nameAttachStart");
}

void GCPhysicsSpring::SetNameAttachStart(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPhysicsSpring", "m_nameAttachStart", false, value);
}

CUtlSymbolLarge GCPhysicsSpring::GetNameAttachEnd() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPhysicsSpring", "m_nameAttachEnd");
}

void GCPhysicsSpring::SetNameAttachEnd(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPhysicsSpring", "m_nameAttachEnd", false, value);
}

Vector GCPhysicsSpring::GetStart() const {
    return GetSchemaValue<Vector>(m_ptr, "CPhysicsSpring", "m_start");
}

void GCPhysicsSpring::SetStart(Vector value) {
    SetSchemaValue(m_ptr, "CPhysicsSpring", "m_start", false, value);
}

Vector GCPhysicsSpring::GetEnd() const {
    return GetSchemaValue<Vector>(m_ptr, "CPhysicsSpring", "m_end");
}

void GCPhysicsSpring::SetEnd(Vector value) {
    SetSchemaValue(m_ptr, "CPhysicsSpring", "m_end", false, value);
}

uint32_t GCPhysicsSpring::GetTeleportTick() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CPhysicsSpring", "m_teleportTick");
}

void GCPhysicsSpring::SetTeleportTick(uint32_t value) {
    SetSchemaValue(m_ptr, "CPhysicsSpring", "m_teleportTick", false, value);
}

std::string GCPhysicsSpring::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPhysicsSpring::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvLightProbeVolume::GCEnvLightProbeVolume(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvLightProbeVolume::GCEnvLightProbeVolume(void *ptr) {
    m_ptr = ptr;
}

Vector GCEnvLightProbeVolume::GetEntity_vBoxMins() const {
    return GetSchemaValue<Vector>(m_ptr, "CEnvLightProbeVolume", "m_Entity_vBoxMins");
}

void GCEnvLightProbeVolume::SetEntity_vBoxMins(Vector value) {
    SetSchemaValue(m_ptr, "CEnvLightProbeVolume", "m_Entity_vBoxMins", false, value);
}

Vector GCEnvLightProbeVolume::GetEntity_vBoxMaxs() const {
    return GetSchemaValue<Vector>(m_ptr, "CEnvLightProbeVolume", "m_Entity_vBoxMaxs");
}

void GCEnvLightProbeVolume::SetEntity_vBoxMaxs(Vector value) {
    SetSchemaValue(m_ptr, "CEnvLightProbeVolume", "m_Entity_vBoxMaxs", false, value);
}

bool GCEnvLightProbeVolume::GetEntity_bMoveable() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvLightProbeVolume", "m_Entity_bMoveable");
}

void GCEnvLightProbeVolume::SetEntity_bMoveable(bool value) {
    SetSchemaValue(m_ptr, "CEnvLightProbeVolume", "m_Entity_bMoveable", false, value);
}

int32_t GCEnvLightProbeVolume::GetEntity_nHandshake() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvLightProbeVolume", "m_Entity_nHandshake");
}

void GCEnvLightProbeVolume::SetEntity_nHandshake(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvLightProbeVolume", "m_Entity_nHandshake", false, value);
}

int32_t GCEnvLightProbeVolume::GetEntity_nPriority() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvLightProbeVolume", "m_Entity_nPriority");
}

void GCEnvLightProbeVolume::SetEntity_nPriority(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvLightProbeVolume", "m_Entity_nPriority", false, value);
}

bool GCEnvLightProbeVolume::GetEntity_bStartDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvLightProbeVolume", "m_Entity_bStartDisabled");
}

void GCEnvLightProbeVolume::SetEntity_bStartDisabled(bool value) {
    SetSchemaValue(m_ptr, "CEnvLightProbeVolume", "m_Entity_bStartDisabled", false, value);
}

int32_t GCEnvLightProbeVolume::GetEntity_nLightProbeSizeX() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvLightProbeVolume", "m_Entity_nLightProbeSizeX");
}

void GCEnvLightProbeVolume::SetEntity_nLightProbeSizeX(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvLightProbeVolume", "m_Entity_nLightProbeSizeX", false, value);
}

int32_t GCEnvLightProbeVolume::GetEntity_nLightProbeSizeY() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvLightProbeVolume", "m_Entity_nLightProbeSizeY");
}

void GCEnvLightProbeVolume::SetEntity_nLightProbeSizeY(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvLightProbeVolume", "m_Entity_nLightProbeSizeY", false, value);
}

int32_t GCEnvLightProbeVolume::GetEntity_nLightProbeSizeZ() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvLightProbeVolume", "m_Entity_nLightProbeSizeZ");
}

void GCEnvLightProbeVolume::SetEntity_nLightProbeSizeZ(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvLightProbeVolume", "m_Entity_nLightProbeSizeZ", false, value);
}

int32_t GCEnvLightProbeVolume::GetEntity_nLightProbeAtlasX() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvLightProbeVolume", "m_Entity_nLightProbeAtlasX");
}

void GCEnvLightProbeVolume::SetEntity_nLightProbeAtlasX(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvLightProbeVolume", "m_Entity_nLightProbeAtlasX", false, value);
}

int32_t GCEnvLightProbeVolume::GetEntity_nLightProbeAtlasY() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvLightProbeVolume", "m_Entity_nLightProbeAtlasY");
}

void GCEnvLightProbeVolume::SetEntity_nLightProbeAtlasY(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvLightProbeVolume", "m_Entity_nLightProbeAtlasY", false, value);
}

int32_t GCEnvLightProbeVolume::GetEntity_nLightProbeAtlasZ() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvLightProbeVolume", "m_Entity_nLightProbeAtlasZ");
}

void GCEnvLightProbeVolume::SetEntity_nLightProbeAtlasZ(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvLightProbeVolume", "m_Entity_nLightProbeAtlasZ", false, value);
}

bool GCEnvLightProbeVolume::GetEntity_bEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvLightProbeVolume", "m_Entity_bEnabled");
}

void GCEnvLightProbeVolume::SetEntity_bEnabled(bool value) {
    SetSchemaValue(m_ptr, "CEnvLightProbeVolume", "m_Entity_bEnabled", false, value);
}

std::string GCEnvLightProbeVolume::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvLightProbeVolume::IsValid() {
    return (m_ptr != nullptr);
}

GCCSGameModeRules_ArmsRace::GCCSGameModeRules_ArmsRace(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSGameModeRules_ArmsRace::GCCSGameModeRules_ArmsRace(void *ptr) {
    m_ptr = ptr;
}

std::vector<CUtlString> GCCSGameModeRules_ArmsRace::GetWeaponSequence() const {
    CUtlVector<CUtlString>* vec = GetSchemaValue<CUtlVector<CUtlString>*>(m_ptr, "CCSGameModeRules_ArmsRace", "m_WeaponSequence"); std::vector<CUtlString> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCCSGameModeRules_ArmsRace::SetWeaponSequence(std::vector<CUtlString> value) {
    SetSchemaValueCUtlVector<CUtlString>(m_ptr, "CCSGameModeRules_ArmsRace", "m_WeaponSequence", false, value);
}

std::string GCCSGameModeRules_ArmsRace::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSGameModeRules_ArmsRace::IsValid() {
    return (m_ptr != nullptr);
}

GCScriptTriggerPush::GCScriptTriggerPush(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCScriptTriggerPush::GCScriptTriggerPush(void *ptr) {
    m_ptr = ptr;
}

Vector GCScriptTriggerPush::GetExtent() const {
    return GetSchemaValue<Vector>(m_ptr, "CScriptTriggerPush", "m_vExtent");
}

void GCScriptTriggerPush::SetExtent(Vector value) {
    SetSchemaValue(m_ptr, "CScriptTriggerPush", "m_vExtent", false, value);
}

std::string GCScriptTriggerPush::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCScriptTriggerPush::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvEntityIgniter::GCEnvEntityIgniter(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvEntityIgniter::GCEnvEntityIgniter(void *ptr) {
    m_ptr = ptr;
}

float GCEnvEntityIgniter::GetLifetime() const {
    return GetSchemaValue<float>(m_ptr, "CEnvEntityIgniter", "m_flLifetime");
}

void GCEnvEntityIgniter::SetLifetime(float value) {
    SetSchemaValue(m_ptr, "CEnvEntityIgniter", "m_flLifetime", false, value);
}

std::string GCEnvEntityIgniter::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvEntityIgniter::IsValid() {
    return (m_ptr != nullptr);
}

GCFuncWallToggle::GCFuncWallToggle(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFuncWallToggle::GCFuncWallToggle(void *ptr) {
    m_ptr = ptr;
}

std::string GCFuncWallToggle::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFuncWallToggle::IsValid() {
    return (m_ptr != nullptr);
}

GCDamageRecord::GCDamageRecord(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCDamageRecord::GCDamageRecord(void *ptr) {
    m_ptr = ptr;
}

GCCSPlayerPawn GCDamageRecord::GetPlayerDamager() const {
    GCCSPlayerPawn value(GetSchemaValuePtr<void>(m_ptr, "CDamageRecord", "m_PlayerDamager"));
    return value;
}

void GCDamageRecord::SetPlayerDamager(GCCSPlayerPawn* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'PlayerDamager' is not possible.\n");
}

GCCSPlayerPawn GCDamageRecord::GetPlayerRecipient() const {
    GCCSPlayerPawn value(GetSchemaValuePtr<void>(m_ptr, "CDamageRecord", "m_PlayerRecipient"));
    return value;
}

void GCDamageRecord::SetPlayerRecipient(GCCSPlayerPawn* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'PlayerRecipient' is not possible.\n");
}

GCCSPlayerController GCDamageRecord::GetPlayerControllerDamager() const {
    GCCSPlayerController value(GetSchemaValuePtr<void>(m_ptr, "CDamageRecord", "m_hPlayerControllerDamager"));
    return value;
}

void GCDamageRecord::SetPlayerControllerDamager(GCCSPlayerController* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'PlayerControllerDamager' is not possible.\n");
}

GCCSPlayerController GCDamageRecord::GetPlayerControllerRecipient() const {
    GCCSPlayerController value(GetSchemaValuePtr<void>(m_ptr, "CDamageRecord", "m_hPlayerControllerRecipient"));
    return value;
}

void GCDamageRecord::SetPlayerControllerRecipient(GCCSPlayerController* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'PlayerControllerRecipient' is not possible.\n");
}

CUtlString GCDamageRecord::GetPlayerDamagerName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CDamageRecord", "m_szPlayerDamagerName");
}

void GCDamageRecord::SetPlayerDamagerName(CUtlString value) {
    SetSchemaValue(m_ptr, "CDamageRecord", "m_szPlayerDamagerName", false, value);
}

CUtlString GCDamageRecord::GetPlayerRecipientName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CDamageRecord", "m_szPlayerRecipientName");
}

void GCDamageRecord::SetPlayerRecipientName(CUtlString value) {
    SetSchemaValue(m_ptr, "CDamageRecord", "m_szPlayerRecipientName", false, value);
}

uint64_t GCDamageRecord::GetDamagerXuid() const {
    return GetSchemaValue<uint64_t>(m_ptr, "CDamageRecord", "m_DamagerXuid");
}

void GCDamageRecord::SetDamagerXuid(uint64_t value) {
    SetSchemaValue(m_ptr, "CDamageRecord", "m_DamagerXuid", false, value);
}

uint64_t GCDamageRecord::GetRecipientXuid() const {
    return GetSchemaValue<uint64_t>(m_ptr, "CDamageRecord", "m_RecipientXuid");
}

void GCDamageRecord::SetRecipientXuid(uint64_t value) {
    SetSchemaValue(m_ptr, "CDamageRecord", "m_RecipientXuid", false, value);
}

int32_t GCDamageRecord::GetDamage() const {
    return GetSchemaValue<int32_t>(m_ptr, "CDamageRecord", "m_iDamage");
}

void GCDamageRecord::SetDamage(int32_t value) {
    SetSchemaValue(m_ptr, "CDamageRecord", "m_iDamage", false, value);
}

int32_t GCDamageRecord::GetActualHealthRemoved() const {
    return GetSchemaValue<int32_t>(m_ptr, "CDamageRecord", "m_iActualHealthRemoved");
}

void GCDamageRecord::SetActualHealthRemoved(int32_t value) {
    SetSchemaValue(m_ptr, "CDamageRecord", "m_iActualHealthRemoved", false, value);
}

int32_t GCDamageRecord::GetNumHits() const {
    return GetSchemaValue<int32_t>(m_ptr, "CDamageRecord", "m_iNumHits");
}

void GCDamageRecord::SetNumHits(int32_t value) {
    SetSchemaValue(m_ptr, "CDamageRecord", "m_iNumHits", false, value);
}

int32_t GCDamageRecord::GetLastBulletUpdate() const {
    return GetSchemaValue<int32_t>(m_ptr, "CDamageRecord", "m_iLastBulletUpdate");
}

void GCDamageRecord::SetLastBulletUpdate(int32_t value) {
    SetSchemaValue(m_ptr, "CDamageRecord", "m_iLastBulletUpdate", false, value);
}

bool GCDamageRecord::GetIsOtherEnemy() const {
    return GetSchemaValue<bool>(m_ptr, "CDamageRecord", "m_bIsOtherEnemy");
}

void GCDamageRecord::SetIsOtherEnemy(bool value) {
    SetSchemaValue(m_ptr, "CDamageRecord", "m_bIsOtherEnemy", false, value);
}

EKillTypes_t GCDamageRecord::GetKillType() const {
    return GetSchemaValue<EKillTypes_t>(m_ptr, "CDamageRecord", "m_killType");
}

void GCDamageRecord::SetKillType(EKillTypes_t value) {
    SetSchemaValue(m_ptr, "CDamageRecord", "m_killType", false, value);
}

std::string GCDamageRecord::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCDamageRecord::IsValid() {
    return (m_ptr != nullptr);
}

GCLogicAutosave::GCLogicAutosave(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCLogicAutosave::GCLogicAutosave(void *ptr) {
    m_ptr = ptr;
}

bool GCLogicAutosave::GetForceNewLevelUnit() const {
    return GetSchemaValue<bool>(m_ptr, "CLogicAutosave", "m_bForceNewLevelUnit");
}

void GCLogicAutosave::SetForceNewLevelUnit(bool value) {
    SetSchemaValue(m_ptr, "CLogicAutosave", "m_bForceNewLevelUnit", false, value);
}

int32_t GCLogicAutosave::GetMinHitPoints() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLogicAutosave", "m_minHitPoints");
}

void GCLogicAutosave::SetMinHitPoints(int32_t value) {
    SetSchemaValue(m_ptr, "CLogicAutosave", "m_minHitPoints", false, value);
}

int32_t GCLogicAutosave::GetMinHitPointsToCommit() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLogicAutosave", "m_minHitPointsToCommit");
}

void GCLogicAutosave::SetMinHitPointsToCommit(int32_t value) {
    SetSchemaValue(m_ptr, "CLogicAutosave", "m_minHitPointsToCommit", false, value);
}

std::string GCLogicAutosave::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCLogicAutosave::IsValid() {
    return (m_ptr != nullptr);
}

GCCSPlayerController_DamageServices::GCCSPlayerController_DamageServices(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSPlayerController_DamageServices::GCCSPlayerController_DamageServices(void *ptr) {
    m_ptr = ptr;
}

int32_t GCCSPlayerController_DamageServices::GetSendUpdate() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController_DamageServices", "m_nSendUpdate");
}

void GCCSPlayerController_DamageServices::SetSendUpdate(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController_DamageServices", "m_nSendUpdate", false, value);
}

std::vector<GCDamageRecord> GCCSPlayerController_DamageServices::GetDamageList() const {
    CUtlVector<GCDamageRecord>* vec = GetSchemaValue<CUtlVector<GCDamageRecord>*>(m_ptr, "CCSPlayerController_DamageServices", "m_DamageList"); std::vector<GCDamageRecord> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCCSPlayerController_DamageServices::SetDamageList(std::vector<GCDamageRecord> value) {
    SetSchemaValueCUtlVector<GCDamageRecord>(m_ptr, "CCSPlayerController_DamageServices", "m_DamageList", false, value);
}

std::string GCCSPlayerController_DamageServices::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSPlayerController_DamageServices::IsValid() {
    return (m_ptr != nullptr);
}

GCRenderComponent::GCRenderComponent(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCRenderComponent::GCRenderComponent(void *ptr) {
    m_ptr = ptr;
}

GCNetworkVarChainer GCRenderComponent::Get__pChainEntity() const {
    return GetSchemaValue<GCNetworkVarChainer>(m_ptr, "CRenderComponent", "__m_pChainEntity");
}

void GCRenderComponent::Set__pChainEntity(GCNetworkVarChainer value) {
    SetSchemaValue(m_ptr, "CRenderComponent", "__m_pChainEntity", false, value);
}

bool GCRenderComponent::GetIsRenderingWithViewModels() const {
    return GetSchemaValue<bool>(m_ptr, "CRenderComponent", "m_bIsRenderingWithViewModels");
}

void GCRenderComponent::SetIsRenderingWithViewModels(bool value) {
    SetSchemaValue(m_ptr, "CRenderComponent", "m_bIsRenderingWithViewModels", false, value);
}

uint32_t GCRenderComponent::GetSplitscreenFlags() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CRenderComponent", "m_nSplitscreenFlags");
}

void GCRenderComponent::SetSplitscreenFlags(uint32_t value) {
    SetSchemaValue(m_ptr, "CRenderComponent", "m_nSplitscreenFlags", false, value);
}

bool GCRenderComponent::GetEnableRendering() const {
    return GetSchemaValue<bool>(m_ptr, "CRenderComponent", "m_bEnableRendering");
}

void GCRenderComponent::SetEnableRendering(bool value) {
    SetSchemaValue(m_ptr, "CRenderComponent", "m_bEnableRendering", false, value);
}

bool GCRenderComponent::GetInterpolationReadyToDraw() const {
    return GetSchemaValue<bool>(m_ptr, "CRenderComponent", "m_bInterpolationReadyToDraw");
}

void GCRenderComponent::SetInterpolationReadyToDraw(bool value) {
    SetSchemaValue(m_ptr, "CRenderComponent", "m_bInterpolationReadyToDraw", false, value);
}

std::string GCRenderComponent::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCRenderComponent::IsValid() {
    return (m_ptr != nullptr);
}

GCSoundEventPathCornerEntity::GCSoundEventPathCornerEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSoundEventPathCornerEntity::GCSoundEventPathCornerEntity(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCSoundEventPathCornerEntity::GetPathCorner() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSoundEventPathCornerEntity", "m_iszPathCorner");
}

void GCSoundEventPathCornerEntity::SetPathCorner(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CSoundEventPathCornerEntity", "m_iszPathCorner", false, value);
}

int32_t GCSoundEventPathCornerEntity::GetCountMax() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSoundEventPathCornerEntity", "m_iCountMax");
}

void GCSoundEventPathCornerEntity::SetCountMax(int32_t value) {
    SetSchemaValue(m_ptr, "CSoundEventPathCornerEntity", "m_iCountMax", false, value);
}

float GCSoundEventPathCornerEntity::GetDistanceMax() const {
    return GetSchemaValue<float>(m_ptr, "CSoundEventPathCornerEntity", "m_flDistanceMax");
}

void GCSoundEventPathCornerEntity::SetDistanceMax(float value) {
    SetSchemaValue(m_ptr, "CSoundEventPathCornerEntity", "m_flDistanceMax", false, value);
}

float GCSoundEventPathCornerEntity::GetDistMaxSqr() const {
    return GetSchemaValue<float>(m_ptr, "CSoundEventPathCornerEntity", "m_flDistMaxSqr");
}

void GCSoundEventPathCornerEntity::SetDistMaxSqr(float value) {
    SetSchemaValue(m_ptr, "CSoundEventPathCornerEntity", "m_flDistMaxSqr", false, value);
}

float GCSoundEventPathCornerEntity::GetDotProductMax() const {
    return GetSchemaValue<float>(m_ptr, "CSoundEventPathCornerEntity", "m_flDotProductMax");
}

void GCSoundEventPathCornerEntity::SetDotProductMax(float value) {
    SetSchemaValue(m_ptr, "CSoundEventPathCornerEntity", "m_flDotProductMax", false, value);
}

bool GCSoundEventPathCornerEntity::GetPlaying() const {
    return GetSchemaValue<bool>(m_ptr, "CSoundEventPathCornerEntity", "m_bPlaying");
}

void GCSoundEventPathCornerEntity::SetPlaying(bool value) {
    SetSchemaValue(m_ptr, "CSoundEventPathCornerEntity", "m_bPlaying", false, value);
}

std::string GCSoundEventPathCornerEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSoundEventPathCornerEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvSoundscapeProxyAlias_snd_soundscape_proxy::GCEnvSoundscapeProxyAlias_snd_soundscape_proxy(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvSoundscapeProxyAlias_snd_soundscape_proxy::GCEnvSoundscapeProxyAlias_snd_soundscape_proxy(void *ptr) {
    m_ptr = ptr;
}

std::string GCEnvSoundscapeProxyAlias_snd_soundscape_proxy::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvSoundscapeProxyAlias_snd_soundscape_proxy::IsValid() {
    return (m_ptr != nullptr);
}

GCLightComponent::GCLightComponent(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCLightComponent::GCLightComponent(void *ptr) {
    m_ptr = ptr;
}

GCNetworkVarChainer GCLightComponent::Get__pChainEntity() const {
    return GetSchemaValue<GCNetworkVarChainer>(m_ptr, "CLightComponent", "__m_pChainEntity");
}

void GCLightComponent::Set__pChainEntity(GCNetworkVarChainer value) {
    SetSchemaValue(m_ptr, "CLightComponent", "__m_pChainEntity", false, value);
}

Color GCLightComponent::GetColor() const {
    return GetSchemaValue<Color>(m_ptr, "CLightComponent", "m_Color");
}

void GCLightComponent::SetColor(Color value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_Color", false, value);
}

Color GCLightComponent::GetSecondaryColor() const {
    return GetSchemaValue<Color>(m_ptr, "CLightComponent", "m_SecondaryColor");
}

void GCLightComponent::SetSecondaryColor(Color value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_SecondaryColor", false, value);
}

float GCLightComponent::GetBrightness() const {
    return GetSchemaValue<float>(m_ptr, "CLightComponent", "m_flBrightness");
}

void GCLightComponent::SetBrightness(float value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_flBrightness", false, value);
}

float GCLightComponent::GetBrightnessScale() const {
    return GetSchemaValue<float>(m_ptr, "CLightComponent", "m_flBrightnessScale");
}

void GCLightComponent::SetBrightnessScale(float value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_flBrightnessScale", false, value);
}

float GCLightComponent::GetBrightnessMult() const {
    return GetSchemaValue<float>(m_ptr, "CLightComponent", "m_flBrightnessMult");
}

void GCLightComponent::SetBrightnessMult(float value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_flBrightnessMult", false, value);
}

float GCLightComponent::GetRange() const {
    return GetSchemaValue<float>(m_ptr, "CLightComponent", "m_flRange");
}

void GCLightComponent::SetRange(float value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_flRange", false, value);
}

float GCLightComponent::GetFalloff() const {
    return GetSchemaValue<float>(m_ptr, "CLightComponent", "m_flFalloff");
}

void GCLightComponent::SetFalloff(float value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_flFalloff", false, value);
}

float GCLightComponent::GetAttenuation0() const {
    return GetSchemaValue<float>(m_ptr, "CLightComponent", "m_flAttenuation0");
}

void GCLightComponent::SetAttenuation0(float value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_flAttenuation0", false, value);
}

float GCLightComponent::GetAttenuation1() const {
    return GetSchemaValue<float>(m_ptr, "CLightComponent", "m_flAttenuation1");
}

void GCLightComponent::SetAttenuation1(float value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_flAttenuation1", false, value);
}

float GCLightComponent::GetAttenuation2() const {
    return GetSchemaValue<float>(m_ptr, "CLightComponent", "m_flAttenuation2");
}

void GCLightComponent::SetAttenuation2(float value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_flAttenuation2", false, value);
}

float GCLightComponent::GetTheta() const {
    return GetSchemaValue<float>(m_ptr, "CLightComponent", "m_flTheta");
}

void GCLightComponent::SetTheta(float value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_flTheta", false, value);
}

float GCLightComponent::GetPhi() const {
    return GetSchemaValue<float>(m_ptr, "CLightComponent", "m_flPhi");
}

void GCLightComponent::SetPhi(float value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_flPhi", false, value);
}

int32_t GCLightComponent::GetCascades() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLightComponent", "m_nCascades");
}

void GCLightComponent::SetCascades(int32_t value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_nCascades", false, value);
}

int32_t GCLightComponent::GetCastShadows() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLightComponent", "m_nCastShadows");
}

void GCLightComponent::SetCastShadows(int32_t value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_nCastShadows", false, value);
}

int32_t GCLightComponent::GetShadowWidth() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLightComponent", "m_nShadowWidth");
}

void GCLightComponent::SetShadowWidth(int32_t value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_nShadowWidth", false, value);
}

int32_t GCLightComponent::GetShadowHeight() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLightComponent", "m_nShadowHeight");
}

void GCLightComponent::SetShadowHeight(int32_t value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_nShadowHeight", false, value);
}

bool GCLightComponent::GetRenderDiffuse() const {
    return GetSchemaValue<bool>(m_ptr, "CLightComponent", "m_bRenderDiffuse");
}

void GCLightComponent::SetRenderDiffuse(bool value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_bRenderDiffuse", false, value);
}

int32_t GCLightComponent::GetRenderSpecular() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLightComponent", "m_nRenderSpecular");
}

void GCLightComponent::SetRenderSpecular(int32_t value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_nRenderSpecular", false, value);
}

bool GCLightComponent::GetRenderTransmissive() const {
    return GetSchemaValue<bool>(m_ptr, "CLightComponent", "m_bRenderTransmissive");
}

void GCLightComponent::SetRenderTransmissive(bool value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_bRenderTransmissive", false, value);
}

float GCLightComponent::GetOrthoLightWidth() const {
    return GetSchemaValue<float>(m_ptr, "CLightComponent", "m_flOrthoLightWidth");
}

void GCLightComponent::SetOrthoLightWidth(float value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_flOrthoLightWidth", false, value);
}

float GCLightComponent::GetOrthoLightHeight() const {
    return GetSchemaValue<float>(m_ptr, "CLightComponent", "m_flOrthoLightHeight");
}

void GCLightComponent::SetOrthoLightHeight(float value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_flOrthoLightHeight", false, value);
}

int32_t GCLightComponent::GetStyle() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLightComponent", "m_nStyle");
}

void GCLightComponent::SetStyle(int32_t value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_nStyle", false, value);
}

CUtlString GCLightComponent::GetPattern() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CLightComponent", "m_Pattern");
}

void GCLightComponent::SetPattern(CUtlString value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_Pattern", false, value);
}

int32_t GCLightComponent::GetCascadeRenderStaticObjects() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLightComponent", "m_nCascadeRenderStaticObjects");
}

void GCLightComponent::SetCascadeRenderStaticObjects(int32_t value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_nCascadeRenderStaticObjects", false, value);
}

float GCLightComponent::GetShadowCascadeCrossFade() const {
    return GetSchemaValue<float>(m_ptr, "CLightComponent", "m_flShadowCascadeCrossFade");
}

void GCLightComponent::SetShadowCascadeCrossFade(float value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_flShadowCascadeCrossFade", false, value);
}

float GCLightComponent::GetShadowCascadeDistanceFade() const {
    return GetSchemaValue<float>(m_ptr, "CLightComponent", "m_flShadowCascadeDistanceFade");
}

void GCLightComponent::SetShadowCascadeDistanceFade(float value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_flShadowCascadeDistanceFade", false, value);
}

float GCLightComponent::GetShadowCascadeDistance0() const {
    return GetSchemaValue<float>(m_ptr, "CLightComponent", "m_flShadowCascadeDistance0");
}

void GCLightComponent::SetShadowCascadeDistance0(float value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_flShadowCascadeDistance0", false, value);
}

float GCLightComponent::GetShadowCascadeDistance1() const {
    return GetSchemaValue<float>(m_ptr, "CLightComponent", "m_flShadowCascadeDistance1");
}

void GCLightComponent::SetShadowCascadeDistance1(float value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_flShadowCascadeDistance1", false, value);
}

float GCLightComponent::GetShadowCascadeDistance2() const {
    return GetSchemaValue<float>(m_ptr, "CLightComponent", "m_flShadowCascadeDistance2");
}

void GCLightComponent::SetShadowCascadeDistance2(float value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_flShadowCascadeDistance2", false, value);
}

float GCLightComponent::GetShadowCascadeDistance3() const {
    return GetSchemaValue<float>(m_ptr, "CLightComponent", "m_flShadowCascadeDistance3");
}

void GCLightComponent::SetShadowCascadeDistance3(float value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_flShadowCascadeDistance3", false, value);
}

int32_t GCLightComponent::GetShadowCascadeResolution0() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLightComponent", "m_nShadowCascadeResolution0");
}

void GCLightComponent::SetShadowCascadeResolution0(int32_t value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_nShadowCascadeResolution0", false, value);
}

int32_t GCLightComponent::GetShadowCascadeResolution1() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLightComponent", "m_nShadowCascadeResolution1");
}

void GCLightComponent::SetShadowCascadeResolution1(int32_t value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_nShadowCascadeResolution1", false, value);
}

int32_t GCLightComponent::GetShadowCascadeResolution2() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLightComponent", "m_nShadowCascadeResolution2");
}

void GCLightComponent::SetShadowCascadeResolution2(int32_t value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_nShadowCascadeResolution2", false, value);
}

int32_t GCLightComponent::GetShadowCascadeResolution3() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLightComponent", "m_nShadowCascadeResolution3");
}

void GCLightComponent::SetShadowCascadeResolution3(int32_t value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_nShadowCascadeResolution3", false, value);
}

bool GCLightComponent::GetUsesBakedShadowing() const {
    return GetSchemaValue<bool>(m_ptr, "CLightComponent", "m_bUsesBakedShadowing");
}

void GCLightComponent::SetUsesBakedShadowing(bool value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_bUsesBakedShadowing", false, value);
}

int32_t GCLightComponent::GetShadowPriority() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLightComponent", "m_nShadowPriority");
}

void GCLightComponent::SetShadowPriority(int32_t value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_nShadowPriority", false, value);
}

int32_t GCLightComponent::GetBakedShadowIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLightComponent", "m_nBakedShadowIndex");
}

void GCLightComponent::SetBakedShadowIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_nBakedShadowIndex", false, value);
}

bool GCLightComponent::GetRenderToCubemaps() const {
    return GetSchemaValue<bool>(m_ptr, "CLightComponent", "m_bRenderToCubemaps");
}

void GCLightComponent::SetRenderToCubemaps(bool value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_bRenderToCubemaps", false, value);
}

int32_t GCLightComponent::GetDirectLight() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLightComponent", "m_nDirectLight");
}

void GCLightComponent::SetDirectLight(int32_t value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_nDirectLight", false, value);
}

int32_t GCLightComponent::GetIndirectLight() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLightComponent", "m_nIndirectLight");
}

void GCLightComponent::SetIndirectLight(int32_t value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_nIndirectLight", false, value);
}

float GCLightComponent::GetFadeMinDist() const {
    return GetSchemaValue<float>(m_ptr, "CLightComponent", "m_flFadeMinDist");
}

void GCLightComponent::SetFadeMinDist(float value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_flFadeMinDist", false, value);
}

float GCLightComponent::GetFadeMaxDist() const {
    return GetSchemaValue<float>(m_ptr, "CLightComponent", "m_flFadeMaxDist");
}

void GCLightComponent::SetFadeMaxDist(float value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_flFadeMaxDist", false, value);
}

float GCLightComponent::GetShadowFadeMinDist() const {
    return GetSchemaValue<float>(m_ptr, "CLightComponent", "m_flShadowFadeMinDist");
}

void GCLightComponent::SetShadowFadeMinDist(float value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_flShadowFadeMinDist", false, value);
}

float GCLightComponent::GetShadowFadeMaxDist() const {
    return GetSchemaValue<float>(m_ptr, "CLightComponent", "m_flShadowFadeMaxDist");
}

void GCLightComponent::SetShadowFadeMaxDist(float value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_flShadowFadeMaxDist", false, value);
}

bool GCLightComponent::GetEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CLightComponent", "m_bEnabled");
}

void GCLightComponent::SetEnabled(bool value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_bEnabled", false, value);
}

bool GCLightComponent::GetFlicker() const {
    return GetSchemaValue<bool>(m_ptr, "CLightComponent", "m_bFlicker");
}

void GCLightComponent::SetFlicker(bool value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_bFlicker", false, value);
}

bool GCLightComponent::GetPrecomputedFieldsValid() const {
    return GetSchemaValue<bool>(m_ptr, "CLightComponent", "m_bPrecomputedFieldsValid");
}

void GCLightComponent::SetPrecomputedFieldsValid(bool value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_bPrecomputedFieldsValid", false, value);
}

Vector GCLightComponent::GetPrecomputedBoundsMins() const {
    return GetSchemaValue<Vector>(m_ptr, "CLightComponent", "m_vPrecomputedBoundsMins");
}

void GCLightComponent::SetPrecomputedBoundsMins(Vector value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_vPrecomputedBoundsMins", false, value);
}

Vector GCLightComponent::GetPrecomputedBoundsMaxs() const {
    return GetSchemaValue<Vector>(m_ptr, "CLightComponent", "m_vPrecomputedBoundsMaxs");
}

void GCLightComponent::SetPrecomputedBoundsMaxs(Vector value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_vPrecomputedBoundsMaxs", false, value);
}

Vector GCLightComponent::GetPrecomputedOBBOrigin() const {
    return GetSchemaValue<Vector>(m_ptr, "CLightComponent", "m_vPrecomputedOBBOrigin");
}

void GCLightComponent::SetPrecomputedOBBOrigin(Vector value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_vPrecomputedOBBOrigin", false, value);
}

QAngle GCLightComponent::GetPrecomputedOBBAngles() const {
    return GetSchemaValue<QAngle>(m_ptr, "CLightComponent", "m_vPrecomputedOBBAngles");
}

void GCLightComponent::SetPrecomputedOBBAngles(QAngle value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_vPrecomputedOBBAngles", false, value);
}

Vector GCLightComponent::GetPrecomputedOBBExtent() const {
    return GetSchemaValue<Vector>(m_ptr, "CLightComponent", "m_vPrecomputedOBBExtent");
}

void GCLightComponent::SetPrecomputedOBBExtent(Vector value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_vPrecomputedOBBExtent", false, value);
}

float GCLightComponent::GetPrecomputedMaxRange() const {
    return GetSchemaValue<float>(m_ptr, "CLightComponent", "m_flPrecomputedMaxRange");
}

void GCLightComponent::SetPrecomputedMaxRange(float value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_flPrecomputedMaxRange", false, value);
}

int32_t GCLightComponent::GetFogLightingMode() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLightComponent", "m_nFogLightingMode");
}

void GCLightComponent::SetFogLightingMode(int32_t value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_nFogLightingMode", false, value);
}

float GCLightComponent::GetFogContributionStength() const {
    return GetSchemaValue<float>(m_ptr, "CLightComponent", "m_flFogContributionStength");
}

void GCLightComponent::SetFogContributionStength(float value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_flFogContributionStength", false, value);
}

float GCLightComponent::GetNearClipPlane() const {
    return GetSchemaValue<float>(m_ptr, "CLightComponent", "m_flNearClipPlane");
}

void GCLightComponent::SetNearClipPlane(float value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_flNearClipPlane", false, value);
}

Color GCLightComponent::GetSkyColor() const {
    return GetSchemaValue<Color>(m_ptr, "CLightComponent", "m_SkyColor");
}

void GCLightComponent::SetSkyColor(Color value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_SkyColor", false, value);
}

float GCLightComponent::GetSkyIntensity() const {
    return GetSchemaValue<float>(m_ptr, "CLightComponent", "m_flSkyIntensity");
}

void GCLightComponent::SetSkyIntensity(float value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_flSkyIntensity", false, value);
}

Color GCLightComponent::GetSkyAmbientBounce() const {
    return GetSchemaValue<Color>(m_ptr, "CLightComponent", "m_SkyAmbientBounce");
}

void GCLightComponent::SetSkyAmbientBounce(Color value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_SkyAmbientBounce", false, value);
}

bool GCLightComponent::GetUseSecondaryColor() const {
    return GetSchemaValue<bool>(m_ptr, "CLightComponent", "m_bUseSecondaryColor");
}

void GCLightComponent::SetUseSecondaryColor(bool value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_bUseSecondaryColor", false, value);
}

bool GCLightComponent::GetMixedShadows() const {
    return GetSchemaValue<bool>(m_ptr, "CLightComponent", "m_bMixedShadows");
}

void GCLightComponent::SetMixedShadows(bool value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_bMixedShadows", false, value);
}

float GCLightComponent::GetCapsuleLength() const {
    return GetSchemaValue<float>(m_ptr, "CLightComponent", "m_flCapsuleLength");
}

void GCLightComponent::SetCapsuleLength(float value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_flCapsuleLength", false, value);
}

float GCLightComponent::GetMinRoughness() const {
    return GetSchemaValue<float>(m_ptr, "CLightComponent", "m_flMinRoughness");
}

void GCLightComponent::SetMinRoughness(float value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_flMinRoughness", false, value);
}

bool GCLightComponent::GetPvsModifyEntity() const {
    return GetSchemaValue<bool>(m_ptr, "CLightComponent", "m_bPvsModifyEntity");
}

void GCLightComponent::SetPvsModifyEntity(bool value) {
    SetSchemaValue(m_ptr, "CLightComponent", "m_bPvsModifyEntity", false, value);
}

std::string GCLightComponent::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCLightComponent::IsValid() {
    return (m_ptr != nullptr);
}

GCSmokeGrenadeProjectile::GCSmokeGrenadeProjectile(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSmokeGrenadeProjectile::GCSmokeGrenadeProjectile(void *ptr) {
    m_ptr = ptr;
}

int32_t GCSmokeGrenadeProjectile::GetSmokeEffectTickBegin() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSmokeGrenadeProjectile", "m_nSmokeEffectTickBegin");
}

void GCSmokeGrenadeProjectile::SetSmokeEffectTickBegin(int32_t value) {
    SetSchemaValue(m_ptr, "CSmokeGrenadeProjectile", "m_nSmokeEffectTickBegin", false, value);
}

bool GCSmokeGrenadeProjectile::GetDidSmokeEffect() const {
    return GetSchemaValue<bool>(m_ptr, "CSmokeGrenadeProjectile", "m_bDidSmokeEffect");
}

void GCSmokeGrenadeProjectile::SetDidSmokeEffect(bool value) {
    SetSchemaValue(m_ptr, "CSmokeGrenadeProjectile", "m_bDidSmokeEffect", false, value);
}

int32_t GCSmokeGrenadeProjectile::GetRandomSeed() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSmokeGrenadeProjectile", "m_nRandomSeed");
}

void GCSmokeGrenadeProjectile::SetRandomSeed(int32_t value) {
    SetSchemaValue(m_ptr, "CSmokeGrenadeProjectile", "m_nRandomSeed", false, value);
}

Vector GCSmokeGrenadeProjectile::GetSmokeColor() const {
    return GetSchemaValue<Vector>(m_ptr, "CSmokeGrenadeProjectile", "m_vSmokeColor");
}

void GCSmokeGrenadeProjectile::SetSmokeColor(Vector value) {
    SetSchemaValue(m_ptr, "CSmokeGrenadeProjectile", "m_vSmokeColor", false, value);
}

Vector GCSmokeGrenadeProjectile::GetSmokeDetonationPos() const {
    return GetSchemaValue<Vector>(m_ptr, "CSmokeGrenadeProjectile", "m_vSmokeDetonationPos");
}

void GCSmokeGrenadeProjectile::SetSmokeDetonationPos(Vector value) {
    SetSchemaValue(m_ptr, "CSmokeGrenadeProjectile", "m_vSmokeDetonationPos", false, value);
}

std::vector<uint8> GCSmokeGrenadeProjectile::GetVoxelFrameData() const {
    CUtlVector<uint8>* vec = GetSchemaValue<CUtlVector<uint8>*>(m_ptr, "CSmokeGrenadeProjectile", "m_VoxelFrameData"); std::vector<uint8> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSmokeGrenadeProjectile::SetVoxelFrameData(std::vector<uint8> value) {
    SetSchemaValueCUtlVector<uint8>(m_ptr, "CSmokeGrenadeProjectile", "m_VoxelFrameData", false, value);
}

std::string GCSmokeGrenadeProjectile::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSmokeGrenadeProjectile::IsValid() {
    return (m_ptr != nullptr);
}

GCScriptTriggerMultiple::GCScriptTriggerMultiple(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCScriptTriggerMultiple::GCScriptTriggerMultiple(void *ptr) {
    m_ptr = ptr;
}

Vector GCScriptTriggerMultiple::GetExtent() const {
    return GetSchemaValue<Vector>(m_ptr, "CScriptTriggerMultiple", "m_vExtent");
}

void GCScriptTriggerMultiple::SetExtent(Vector value) {
    SetSchemaValue(m_ptr, "CScriptTriggerMultiple", "m_vExtent", false, value);
}

std::string GCScriptTriggerMultiple::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCScriptTriggerMultiple::IsValid() {
    return (m_ptr != nullptr);
}

GCSoundOpvarSetAutoRoomEntity::GCSoundOpvarSetAutoRoomEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSoundOpvarSetAutoRoomEntity::GCSoundOpvarSetAutoRoomEntity(void *ptr) {
    m_ptr = ptr;
}

std::vector<GSoundOpvarTraceResult_t> GCSoundOpvarSetAutoRoomEntity::GetTraceResults() const {
    CUtlVector<GSoundOpvarTraceResult_t>* vec = GetSchemaValue<CUtlVector<GSoundOpvarTraceResult_t>*>(m_ptr, "CSoundOpvarSetAutoRoomEntity", "m_traceResults"); std::vector<GSoundOpvarTraceResult_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSoundOpvarSetAutoRoomEntity::SetTraceResults(std::vector<GSoundOpvarTraceResult_t> value) {
    SetSchemaValueCUtlVector<GSoundOpvarTraceResult_t>(m_ptr, "CSoundOpvarSetAutoRoomEntity", "m_traceResults", false, value);
}

float GCSoundOpvarSetAutoRoomEntity::GetSize() const {
    return GetSchemaValue<float>(m_ptr, "CSoundOpvarSetAutoRoomEntity", "m_flSize");
}

void GCSoundOpvarSetAutoRoomEntity::SetSize(float value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetAutoRoomEntity", "m_flSize", false, value);
}

float GCSoundOpvarSetAutoRoomEntity::GetHeightTolerance() const {
    return GetSchemaValue<float>(m_ptr, "CSoundOpvarSetAutoRoomEntity", "m_flHeightTolerance");
}

void GCSoundOpvarSetAutoRoomEntity::SetHeightTolerance(float value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetAutoRoomEntity", "m_flHeightTolerance", false, value);
}

float GCSoundOpvarSetAutoRoomEntity::GetSizeSqr() const {
    return GetSchemaValue<float>(m_ptr, "CSoundOpvarSetAutoRoomEntity", "m_flSizeSqr");
}

void GCSoundOpvarSetAutoRoomEntity::SetSizeSqr(float value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetAutoRoomEntity", "m_flSizeSqr", false, value);
}

std::string GCSoundOpvarSetAutoRoomEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSoundOpvarSetAutoRoomEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCBodyComponentPoint::GCBodyComponentPoint(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBodyComponentPoint::GCBodyComponentPoint(void *ptr) {
    m_ptr = ptr;
}

GCGameSceneNode GCBodyComponentPoint::GetSceneNode() const {
    return GetSchemaValue<GCGameSceneNode>(m_ptr, "CBodyComponentPoint", "m_sceneNode");
}

void GCBodyComponentPoint::SetSceneNode(GCGameSceneNode value) {
    SetSchemaValue(m_ptr, "CBodyComponentPoint", "m_sceneNode", false, value);
}

std::string GCBodyComponentPoint::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBodyComponentPoint::IsValid() {
    return (m_ptr != nullptr);
}

GFilterDamageType::GFilterDamageType(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFilterDamageType::GFilterDamageType(void *ptr) {
    m_ptr = ptr;
}

int32_t GFilterDamageType::GetDamageType() const {
    return GetSchemaValue<int32_t>(m_ptr, "FilterDamageType", "m_iDamageType");
}

void GFilterDamageType::SetDamageType(int32_t value) {
    SetSchemaValue(m_ptr, "FilterDamageType", "m_iDamageType", false, value);
}

std::string GFilterDamageType::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFilterDamageType::IsValid() {
    return (m_ptr != nullptr);
}

GCBot::GCBot(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBot::GCBot(void *ptr) {
    m_ptr = ptr;
}

GCCSPlayerController GCBot::GetController() const {
    GCCSPlayerController value(GetSchemaValuePtr<void>(m_ptr, "CBot", "m_pController"));
    return value;
}

void GCBot::SetController(GCCSPlayerController* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Controller' is not possible.\n");
}

GCCSPlayerPawn GCBot::GetPlayer() const {
    GCCSPlayerPawn value(GetSchemaValuePtr<void>(m_ptr, "CBot", "m_pPlayer"));
    return value;
}

void GCBot::SetPlayer(GCCSPlayerPawn* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Player' is not possible.\n");
}

bool GCBot::GetHasSpawned() const {
    return GetSchemaValue<bool>(m_ptr, "CBot", "m_bHasSpawned");
}

void GCBot::SetHasSpawned(bool value) {
    SetSchemaValue(m_ptr, "CBot", "m_bHasSpawned", false, value);
}

uint32_t GCBot::GetId() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CBot", "m_id");
}

void GCBot::SetId(uint32_t value) {
    SetSchemaValue(m_ptr, "CBot", "m_id", false, value);
}

bool GCBot::GetIsRunning() const {
    return GetSchemaValue<bool>(m_ptr, "CBot", "m_isRunning");
}

void GCBot::SetIsRunning(bool value) {
    SetSchemaValue(m_ptr, "CBot", "m_isRunning", false, value);
}

bool GCBot::GetIsCrouching() const {
    return GetSchemaValue<bool>(m_ptr, "CBot", "m_isCrouching");
}

void GCBot::SetIsCrouching(bool value) {
    SetSchemaValue(m_ptr, "CBot", "m_isCrouching", false, value);
}

float GCBot::GetForwardSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CBot", "m_forwardSpeed");
}

void GCBot::SetForwardSpeed(float value) {
    SetSchemaValue(m_ptr, "CBot", "m_forwardSpeed", false, value);
}

float GCBot::GetLeftSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CBot", "m_leftSpeed");
}

void GCBot::SetLeftSpeed(float value) {
    SetSchemaValue(m_ptr, "CBot", "m_leftSpeed", false, value);
}

float GCBot::GetVerticalSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CBot", "m_verticalSpeed");
}

void GCBot::SetVerticalSpeed(float value) {
    SetSchemaValue(m_ptr, "CBot", "m_verticalSpeed", false, value);
}

uint64_t GCBot::GetButtonFlags() const {
    return GetSchemaValue<uint64_t>(m_ptr, "CBot", "m_buttonFlags");
}

void GCBot::SetButtonFlags(uint64_t value) {
    SetSchemaValue(m_ptr, "CBot", "m_buttonFlags", false, value);
}

float GCBot::GetJumpTimestamp() const {
    return GetSchemaValue<float>(m_ptr, "CBot", "m_jumpTimestamp");
}

void GCBot::SetJumpTimestamp(float value) {
    SetSchemaValue(m_ptr, "CBot", "m_jumpTimestamp", false, value);
}

Vector GCBot::GetViewForward() const {
    return GetSchemaValue<Vector>(m_ptr, "CBot", "m_viewForward");
}

void GCBot::SetViewForward(Vector value) {
    SetSchemaValue(m_ptr, "CBot", "m_viewForward", false, value);
}

int32_t GCBot::GetPostureStackIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBot", "m_postureStackIndex");
}

void GCBot::SetPostureStackIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CBot", "m_postureStackIndex", false, value);
}

std::string GCBot::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBot::IsValid() {
    return (m_ptr != nullptr);
}

GCMotorController::GCMotorController(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMotorController::GCMotorController(void *ptr) {
    m_ptr = ptr;
}

float GCMotorController::GetSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CMotorController", "m_speed");
}

void GCMotorController::SetSpeed(float value) {
    SetSchemaValue(m_ptr, "CMotorController", "m_speed", false, value);
}

float GCMotorController::GetMaxTorque() const {
    return GetSchemaValue<float>(m_ptr, "CMotorController", "m_maxTorque");
}

void GCMotorController::SetMaxTorque(float value) {
    SetSchemaValue(m_ptr, "CMotorController", "m_maxTorque", false, value);
}

Vector GCMotorController::GetAxis() const {
    return GetSchemaValue<Vector>(m_ptr, "CMotorController", "m_axis");
}

void GCMotorController::SetAxis(Vector value) {
    SetSchemaValue(m_ptr, "CMotorController", "m_axis", false, value);
}

float GCMotorController::GetInertiaFactor() const {
    return GetSchemaValue<float>(m_ptr, "CMotorController", "m_inertiaFactor");
}

void GCMotorController::SetInertiaFactor(float value) {
    SetSchemaValue(m_ptr, "CMotorController", "m_inertiaFactor", false, value);
}

std::string GCMotorController::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMotorController::IsValid() {
    return (m_ptr != nullptr);
}

GCSoundAreaEntitySphere::GCSoundAreaEntitySphere(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSoundAreaEntitySphere::GCSoundAreaEntitySphere(void *ptr) {
    m_ptr = ptr;
}

float GCSoundAreaEntitySphere::GetRadius() const {
    return GetSchemaValue<float>(m_ptr, "CSoundAreaEntitySphere", "m_flRadius");
}

void GCSoundAreaEntitySphere::SetRadius(float value) {
    SetSchemaValue(m_ptr, "CSoundAreaEntitySphere", "m_flRadius", false, value);
}

std::string GCSoundAreaEntitySphere::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSoundAreaEntitySphere::IsValid() {
    return (m_ptr != nullptr);
}

GCCSPlayer_UseServices::GCCSPlayer_UseServices(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSPlayer_UseServices::GCCSPlayer_UseServices(void *ptr) {
    m_ptr = ptr;
}

GCBaseEntity GCCSPlayer_UseServices::GetLastKnownUseEntity() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CCSPlayer_UseServices", "m_hLastKnownUseEntity"));
    return value;
}

void GCCSPlayer_UseServices::SetLastKnownUseEntity(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'LastKnownUseEntity' is not possible.\n");
}

std::string GCCSPlayer_UseServices::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSPlayer_UseServices::IsValid() {
    return (m_ptr != nullptr);
}

GCCSGO_WingmanIntroCounterTerroristPosition::GCCSGO_WingmanIntroCounterTerroristPosition(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSGO_WingmanIntroCounterTerroristPosition::GCCSGO_WingmanIntroCounterTerroristPosition(void *ptr) {
    m_ptr = ptr;
}

std::string GCCSGO_WingmanIntroCounterTerroristPosition::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSGO_WingmanIntroCounterTerroristPosition::IsValid() {
    return (m_ptr != nullptr);
}

GCItemKevlar::GCItemKevlar(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCItemKevlar::GCItemKevlar(void *ptr) {
    m_ptr = ptr;
}

std::string GCItemKevlar::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCItemKevlar::IsValid() {
    return (m_ptr != nullptr);
}

GCTriggerHurt::GCTriggerHurt(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTriggerHurt::GCTriggerHurt(void *ptr) {
    m_ptr = ptr;
}

float GCTriggerHurt::GetOriginalDamage() const {
    return GetSchemaValue<float>(m_ptr, "CTriggerHurt", "m_flOriginalDamage");
}

void GCTriggerHurt::SetOriginalDamage(float value) {
    SetSchemaValue(m_ptr, "CTriggerHurt", "m_flOriginalDamage", false, value);
}

float GCTriggerHurt::GetDamage() const {
    return GetSchemaValue<float>(m_ptr, "CTriggerHurt", "m_flDamage");
}

void GCTriggerHurt::SetDamage(float value) {
    SetSchemaValue(m_ptr, "CTriggerHurt", "m_flDamage", false, value);
}

float GCTriggerHurt::GetDamageCap() const {
    return GetSchemaValue<float>(m_ptr, "CTriggerHurt", "m_flDamageCap");
}

void GCTriggerHurt::SetDamageCap(float value) {
    SetSchemaValue(m_ptr, "CTriggerHurt", "m_flDamageCap", false, value);
}

float GCTriggerHurt::GetForgivenessDelay() const {
    return GetSchemaValue<float>(m_ptr, "CTriggerHurt", "m_flForgivenessDelay");
}

void GCTriggerHurt::SetForgivenessDelay(float value) {
    SetSchemaValue(m_ptr, "CTriggerHurt", "m_flForgivenessDelay", false, value);
}

int32_t GCTriggerHurt::GetBitsDamageInflict() const {
    return GetSchemaValue<int32_t>(m_ptr, "CTriggerHurt", "m_bitsDamageInflict");
}

void GCTriggerHurt::SetBitsDamageInflict(int32_t value) {
    SetSchemaValue(m_ptr, "CTriggerHurt", "m_bitsDamageInflict", false, value);
}

int32_t GCTriggerHurt::GetDamageModel() const {
    return GetSchemaValue<int32_t>(m_ptr, "CTriggerHurt", "m_damageModel");
}

void GCTriggerHurt::SetDamageModel(int32_t value) {
    SetSchemaValue(m_ptr, "CTriggerHurt", "m_damageModel", false, value);
}

bool GCTriggerHurt::GetNoDmgForce() const {
    return GetSchemaValue<bool>(m_ptr, "CTriggerHurt", "m_bNoDmgForce");
}

void GCTriggerHurt::SetNoDmgForce(bool value) {
    SetSchemaValue(m_ptr, "CTriggerHurt", "m_bNoDmgForce", false, value);
}

Vector GCTriggerHurt::GetDamageForce() const {
    return GetSchemaValue<Vector>(m_ptr, "CTriggerHurt", "m_vDamageForce");
}

void GCTriggerHurt::SetDamageForce(Vector value) {
    SetSchemaValue(m_ptr, "CTriggerHurt", "m_vDamageForce", false, value);
}

bool GCTriggerHurt::GetThinkAlways() const {
    return GetSchemaValue<bool>(m_ptr, "CTriggerHurt", "m_thinkAlways");
}

void GCTriggerHurt::SetThinkAlways(bool value) {
    SetSchemaValue(m_ptr, "CTriggerHurt", "m_thinkAlways", false, value);
}

float GCTriggerHurt::GetHurtThinkPeriod() const {
    return GetSchemaValue<float>(m_ptr, "CTriggerHurt", "m_hurtThinkPeriod");
}

void GCTriggerHurt::SetHurtThinkPeriod(float value) {
    SetSchemaValue(m_ptr, "CTriggerHurt", "m_hurtThinkPeriod", false, value);
}

GCEntityIOOutput GCTriggerHurt::GetOnHurt() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CTriggerHurt", "m_OnHurt");
}

void GCTriggerHurt::SetOnHurt(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CTriggerHurt", "m_OnHurt", false, value);
}

GCEntityIOOutput GCTriggerHurt::GetOnHurtPlayer() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CTriggerHurt", "m_OnHurtPlayer");
}

void GCTriggerHurt::SetOnHurtPlayer(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CTriggerHurt", "m_OnHurtPlayer", false, value);
}

std::string GCTriggerHurt::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTriggerHurt::IsValid() {
    return (m_ptr != nullptr);
}

GCPhysBallSocket::GCPhysBallSocket(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPhysBallSocket::GCPhysBallSocket(void *ptr) {
    m_ptr = ptr;
}

float GCPhysBallSocket::GetJointFriction() const {
    return GetSchemaValue<float>(m_ptr, "CPhysBallSocket", "m_flJointFriction");
}

void GCPhysBallSocket::SetJointFriction(float value) {
    SetSchemaValue(m_ptr, "CPhysBallSocket", "m_flJointFriction", false, value);
}

bool GCPhysBallSocket::GetEnableSwingLimit() const {
    return GetSchemaValue<bool>(m_ptr, "CPhysBallSocket", "m_bEnableSwingLimit");
}

void GCPhysBallSocket::SetEnableSwingLimit(bool value) {
    SetSchemaValue(m_ptr, "CPhysBallSocket", "m_bEnableSwingLimit", false, value);
}

float GCPhysBallSocket::GetSwingLimit() const {
    return GetSchemaValue<float>(m_ptr, "CPhysBallSocket", "m_flSwingLimit");
}

void GCPhysBallSocket::SetSwingLimit(float value) {
    SetSchemaValue(m_ptr, "CPhysBallSocket", "m_flSwingLimit", false, value);
}

bool GCPhysBallSocket::GetEnableTwistLimit() const {
    return GetSchemaValue<bool>(m_ptr, "CPhysBallSocket", "m_bEnableTwistLimit");
}

void GCPhysBallSocket::SetEnableTwistLimit(bool value) {
    SetSchemaValue(m_ptr, "CPhysBallSocket", "m_bEnableTwistLimit", false, value);
}

float GCPhysBallSocket::GetMinTwistAngle() const {
    return GetSchemaValue<float>(m_ptr, "CPhysBallSocket", "m_flMinTwistAngle");
}

void GCPhysBallSocket::SetMinTwistAngle(float value) {
    SetSchemaValue(m_ptr, "CPhysBallSocket", "m_flMinTwistAngle", false, value);
}

float GCPhysBallSocket::GetMaxTwistAngle() const {
    return GetSchemaValue<float>(m_ptr, "CPhysBallSocket", "m_flMaxTwistAngle");
}

void GCPhysBallSocket::SetMaxTwistAngle(float value) {
    SetSchemaValue(m_ptr, "CPhysBallSocket", "m_flMaxTwistAngle", false, value);
}

std::string GCPhysBallSocket::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPhysBallSocket::IsValid() {
    return (m_ptr != nullptr);
}

GCMapVetoPickController::GCMapVetoPickController(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMapVetoPickController::GCMapVetoPickController(void *ptr) {
    m_ptr = ptr;
}

bool GCMapVetoPickController::GetPlayedIntroVcd() const {
    return GetSchemaValue<bool>(m_ptr, "CMapVetoPickController", "m_bPlayedIntroVcd");
}

void GCMapVetoPickController::SetPlayedIntroVcd(bool value) {
    SetSchemaValue(m_ptr, "CMapVetoPickController", "m_bPlayedIntroVcd", false, value);
}

bool GCMapVetoPickController::GetNeedToPlayFiveSecondsRemaining() const {
    return GetSchemaValue<bool>(m_ptr, "CMapVetoPickController", "m_bNeedToPlayFiveSecondsRemaining");
}

void GCMapVetoPickController::SetNeedToPlayFiveSecondsRemaining(bool value) {
    SetSchemaValue(m_ptr, "CMapVetoPickController", "m_bNeedToPlayFiveSecondsRemaining", false, value);
}

double GCMapVetoPickController::GetDblPreMatchDraftSequenceTime() const {
    return GetSchemaValue<double>(m_ptr, "CMapVetoPickController", "m_dblPreMatchDraftSequenceTime");
}

void GCMapVetoPickController::SetDblPreMatchDraftSequenceTime(double value) {
    SetSchemaValue(m_ptr, "CMapVetoPickController", "m_dblPreMatchDraftSequenceTime", false, value);
}

bool GCMapVetoPickController::GetPreMatchDraftStateChanged() const {
    return GetSchemaValue<bool>(m_ptr, "CMapVetoPickController", "m_bPreMatchDraftStateChanged");
}

void GCMapVetoPickController::SetPreMatchDraftStateChanged(bool value) {
    SetSchemaValue(m_ptr, "CMapVetoPickController", "m_bPreMatchDraftStateChanged", false, value);
}

int32_t GCMapVetoPickController::GetDraftType() const {
    return GetSchemaValue<int32_t>(m_ptr, "CMapVetoPickController", "m_nDraftType");
}

void GCMapVetoPickController::SetDraftType(int32_t value) {
    SetSchemaValue(m_ptr, "CMapVetoPickController", "m_nDraftType", false, value);
}

int32_t GCMapVetoPickController::GetTeamWinningCoinToss() const {
    return GetSchemaValue<int32_t>(m_ptr, "CMapVetoPickController", "m_nTeamWinningCoinToss");
}

void GCMapVetoPickController::SetTeamWinningCoinToss(int32_t value) {
    SetSchemaValue(m_ptr, "CMapVetoPickController", "m_nTeamWinningCoinToss", false, value);
}

std::vector<int32_t> GCMapVetoPickController::GetTeamWithFirstChoice() const {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CMapVetoPickController", "m_nTeamWithFirstChoice"); std::vector<int32_t> ret; for(int i = 0; i < 64; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCMapVetoPickController::SetTeamWithFirstChoice(std::vector<int32_t> value) {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CMapVetoPickController", "m_nTeamWithFirstChoice"); for(int i = 0; i < 64; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CMapVetoPickController", "m_nTeamWithFirstChoice", false, outValue);
}

std::vector<int32_t> GCMapVetoPickController::GetVoteMapIdsList() const {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CMapVetoPickController", "m_nVoteMapIdsList"); std::vector<int32_t> ret; for(int i = 0; i < 7; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCMapVetoPickController::SetVoteMapIdsList(std::vector<int32_t> value) {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CMapVetoPickController", "m_nVoteMapIdsList"); for(int i = 0; i < 7; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CMapVetoPickController", "m_nVoteMapIdsList", false, outValue);
}

std::vector<int32_t> GCMapVetoPickController::GetAccountIDs() const {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CMapVetoPickController", "m_nAccountIDs"); std::vector<int32_t> ret; for(int i = 0; i < 64; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCMapVetoPickController::SetAccountIDs(std::vector<int32_t> value) {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CMapVetoPickController", "m_nAccountIDs"); for(int i = 0; i < 64; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CMapVetoPickController", "m_nAccountIDs", false, outValue);
}

std::vector<int32_t> GCMapVetoPickController::GetMapId0() const {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CMapVetoPickController", "m_nMapId0"); std::vector<int32_t> ret; for(int i = 0; i < 64; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCMapVetoPickController::SetMapId0(std::vector<int32_t> value) {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CMapVetoPickController", "m_nMapId0"); for(int i = 0; i < 64; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CMapVetoPickController", "m_nMapId0", false, outValue);
}

std::vector<int32_t> GCMapVetoPickController::GetMapId1() const {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CMapVetoPickController", "m_nMapId1"); std::vector<int32_t> ret; for(int i = 0; i < 64; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCMapVetoPickController::SetMapId1(std::vector<int32_t> value) {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CMapVetoPickController", "m_nMapId1"); for(int i = 0; i < 64; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CMapVetoPickController", "m_nMapId1", false, outValue);
}

std::vector<int32_t> GCMapVetoPickController::GetMapId2() const {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CMapVetoPickController", "m_nMapId2"); std::vector<int32_t> ret; for(int i = 0; i < 64; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCMapVetoPickController::SetMapId2(std::vector<int32_t> value) {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CMapVetoPickController", "m_nMapId2"); for(int i = 0; i < 64; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CMapVetoPickController", "m_nMapId2", false, outValue);
}

std::vector<int32_t> GCMapVetoPickController::GetMapId3() const {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CMapVetoPickController", "m_nMapId3"); std::vector<int32_t> ret; for(int i = 0; i < 64; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCMapVetoPickController::SetMapId3(std::vector<int32_t> value) {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CMapVetoPickController", "m_nMapId3"); for(int i = 0; i < 64; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CMapVetoPickController", "m_nMapId3", false, outValue);
}

std::vector<int32_t> GCMapVetoPickController::GetMapId4() const {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CMapVetoPickController", "m_nMapId4"); std::vector<int32_t> ret; for(int i = 0; i < 64; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCMapVetoPickController::SetMapId4(std::vector<int32_t> value) {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CMapVetoPickController", "m_nMapId4"); for(int i = 0; i < 64; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CMapVetoPickController", "m_nMapId4", false, outValue);
}

std::vector<int32_t> GCMapVetoPickController::GetMapId5() const {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CMapVetoPickController", "m_nMapId5"); std::vector<int32_t> ret; for(int i = 0; i < 64; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCMapVetoPickController::SetMapId5(std::vector<int32_t> value) {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CMapVetoPickController", "m_nMapId5"); for(int i = 0; i < 64; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CMapVetoPickController", "m_nMapId5", false, outValue);
}

std::vector<int32_t> GCMapVetoPickController::GetStartingSide0() const {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CMapVetoPickController", "m_nStartingSide0"); std::vector<int32_t> ret; for(int i = 0; i < 64; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCMapVetoPickController::SetStartingSide0(std::vector<int32_t> value) {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CMapVetoPickController", "m_nStartingSide0"); for(int i = 0; i < 64; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CMapVetoPickController", "m_nStartingSide0", false, outValue);
}

int32_t GCMapVetoPickController::GetCurrentPhase() const {
    return GetSchemaValue<int32_t>(m_ptr, "CMapVetoPickController", "m_nCurrentPhase");
}

void GCMapVetoPickController::SetCurrentPhase(int32_t value) {
    SetSchemaValue(m_ptr, "CMapVetoPickController", "m_nCurrentPhase", false, value);
}

int32_t GCMapVetoPickController::GetPhaseStartTick() const {
    return GetSchemaValue<int32_t>(m_ptr, "CMapVetoPickController", "m_nPhaseStartTick");
}

void GCMapVetoPickController::SetPhaseStartTick(int32_t value) {
    SetSchemaValue(m_ptr, "CMapVetoPickController", "m_nPhaseStartTick", false, value);
}

int32_t GCMapVetoPickController::GetPhaseDurationTicks() const {
    return GetSchemaValue<int32_t>(m_ptr, "CMapVetoPickController", "m_nPhaseDurationTicks");
}

void GCMapVetoPickController::SetPhaseDurationTicks(int32_t value) {
    SetSchemaValue(m_ptr, "CMapVetoPickController", "m_nPhaseDurationTicks", false, value);
}

std::string GCMapVetoPickController::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMapVetoPickController::IsValid() {
    return (m_ptr != nullptr);
}

GCCSMinimapBoundary::GCCSMinimapBoundary(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSMinimapBoundary::GCCSMinimapBoundary(void *ptr) {
    m_ptr = ptr;
}

std::string GCCSMinimapBoundary::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSMinimapBoundary::IsValid() {
    return (m_ptr != nullptr);
}

GCSoundEnt::GCSoundEnt(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSoundEnt::GCSoundEnt(void *ptr) {
    m_ptr = ptr;
}

int32_t GCSoundEnt::GetFreeSound() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSoundEnt", "m_iFreeSound");
}

void GCSoundEnt::SetFreeSound(int32_t value) {
    SetSchemaValue(m_ptr, "CSoundEnt", "m_iFreeSound", false, value);
}

int32_t GCSoundEnt::GetActiveSound() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSoundEnt", "m_iActiveSound");
}

void GCSoundEnt::SetActiveSound(int32_t value) {
    SetSchemaValue(m_ptr, "CSoundEnt", "m_iActiveSound", false, value);
}

int32_t GCSoundEnt::GetCLastActiveSounds() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSoundEnt", "m_cLastActiveSounds");
}

void GCSoundEnt::SetCLastActiveSounds(int32_t value) {
    SetSchemaValue(m_ptr, "CSoundEnt", "m_cLastActiveSounds", false, value);
}

std::vector<GCSound> GCSoundEnt::GetSoundPool() const {
    GCSound* outValue = GetSchemaValue<GCSound*>(m_ptr, "CSoundEnt", "m_SoundPool"); std::vector<GCSound> ret; for(int i = 0; i < 128; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCSoundEnt::SetSoundPool(std::vector<GCSound> value) {
    GCSound* outValue = GetSchemaValue<GCSound*>(m_ptr, "CSoundEnt", "m_SoundPool"); for(int i = 0; i < 128; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CSoundEnt", "m_SoundPool", false, outValue);
}

std::string GCSoundEnt::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSoundEnt::IsValid() {
    return (m_ptr != nullptr);
}

GCInfoSpawnGroupLandmark::GCInfoSpawnGroupLandmark(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCInfoSpawnGroupLandmark::GCInfoSpawnGroupLandmark(void *ptr) {
    m_ptr = ptr;
}

std::string GCInfoSpawnGroupLandmark::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCInfoSpawnGroupLandmark::IsValid() {
    return (m_ptr != nullptr);
}

GCPlayer_MovementServices_Humanoid::GCPlayer_MovementServices_Humanoid(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPlayer_MovementServices_Humanoid::GCPlayer_MovementServices_Humanoid(void *ptr) {
    m_ptr = ptr;
}

float GCPlayer_MovementServices_Humanoid::GetStepSoundTime() const {
    return GetSchemaValue<float>(m_ptr, "CPlayer_MovementServices_Humanoid", "m_flStepSoundTime");
}

void GCPlayer_MovementServices_Humanoid::SetStepSoundTime(float value) {
    SetSchemaValue(m_ptr, "CPlayer_MovementServices_Humanoid", "m_flStepSoundTime", false, value);
}

float GCPlayer_MovementServices_Humanoid::GetFallVelocity() const {
    return GetSchemaValue<float>(m_ptr, "CPlayer_MovementServices_Humanoid", "m_flFallVelocity");
}

void GCPlayer_MovementServices_Humanoid::SetFallVelocity(float value) {
    SetSchemaValue(m_ptr, "CPlayer_MovementServices_Humanoid", "m_flFallVelocity", false, value);
}

bool GCPlayer_MovementServices_Humanoid::GetInCrouch() const {
    return GetSchemaValue<bool>(m_ptr, "CPlayer_MovementServices_Humanoid", "m_bInCrouch");
}

void GCPlayer_MovementServices_Humanoid::SetInCrouch(bool value) {
    SetSchemaValue(m_ptr, "CPlayer_MovementServices_Humanoid", "m_bInCrouch", false, value);
}

uint32_t GCPlayer_MovementServices_Humanoid::GetCrouchState() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CPlayer_MovementServices_Humanoid", "m_nCrouchState");
}

void GCPlayer_MovementServices_Humanoid::SetCrouchState(uint32_t value) {
    SetSchemaValue(m_ptr, "CPlayer_MovementServices_Humanoid", "m_nCrouchState", false, value);
}

bool GCPlayer_MovementServices_Humanoid::GetDucked() const {
    return GetSchemaValue<bool>(m_ptr, "CPlayer_MovementServices_Humanoid", "m_bDucked");
}

void GCPlayer_MovementServices_Humanoid::SetDucked(bool value) {
    SetSchemaValue(m_ptr, "CPlayer_MovementServices_Humanoid", "m_bDucked", false, value);
}

bool GCPlayer_MovementServices_Humanoid::GetDucking() const {
    return GetSchemaValue<bool>(m_ptr, "CPlayer_MovementServices_Humanoid", "m_bDucking");
}

void GCPlayer_MovementServices_Humanoid::SetDucking(bool value) {
    SetSchemaValue(m_ptr, "CPlayer_MovementServices_Humanoid", "m_bDucking", false, value);
}

bool GCPlayer_MovementServices_Humanoid::GetInDuckJump() const {
    return GetSchemaValue<bool>(m_ptr, "CPlayer_MovementServices_Humanoid", "m_bInDuckJump");
}

void GCPlayer_MovementServices_Humanoid::SetInDuckJump(bool value) {
    SetSchemaValue(m_ptr, "CPlayer_MovementServices_Humanoid", "m_bInDuckJump", false, value);
}

Vector GCPlayer_MovementServices_Humanoid::GetGroundNormal() const {
    return GetSchemaValue<Vector>(m_ptr, "CPlayer_MovementServices_Humanoid", "m_groundNormal");
}

void GCPlayer_MovementServices_Humanoid::SetGroundNormal(Vector value) {
    SetSchemaValue(m_ptr, "CPlayer_MovementServices_Humanoid", "m_groundNormal", false, value);
}

float GCPlayer_MovementServices_Humanoid::GetSurfaceFriction() const {
    return GetSchemaValue<float>(m_ptr, "CPlayer_MovementServices_Humanoid", "m_flSurfaceFriction");
}

void GCPlayer_MovementServices_Humanoid::SetSurfaceFriction(float value) {
    SetSchemaValue(m_ptr, "CPlayer_MovementServices_Humanoid", "m_flSurfaceFriction", false, value);
}

CUtlStringToken GCPlayer_MovementServices_Humanoid::GetSurfaceProps() const {
    return GetSchemaValue<CUtlStringToken>(m_ptr, "CPlayer_MovementServices_Humanoid", "m_surfaceProps");
}

void GCPlayer_MovementServices_Humanoid::SetSurfaceProps(CUtlStringToken value) {
    SetSchemaValue(m_ptr, "CPlayer_MovementServices_Humanoid", "m_surfaceProps", false, value);
}

int32_t GCPlayer_MovementServices_Humanoid::GetStepside() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPlayer_MovementServices_Humanoid", "m_nStepside");
}

void GCPlayer_MovementServices_Humanoid::SetStepside(int32_t value) {
    SetSchemaValue(m_ptr, "CPlayer_MovementServices_Humanoid", "m_nStepside", false, value);
}

int32_t GCPlayer_MovementServices_Humanoid::GetTargetVolume() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPlayer_MovementServices_Humanoid", "m_iTargetVolume");
}

void GCPlayer_MovementServices_Humanoid::SetTargetVolume(int32_t value) {
    SetSchemaValue(m_ptr, "CPlayer_MovementServices_Humanoid", "m_iTargetVolume", false, value);
}

Vector GCPlayer_MovementServices_Humanoid::GetSmoothedVelocity() const {
    return GetSchemaValue<Vector>(m_ptr, "CPlayer_MovementServices_Humanoid", "m_vecSmoothedVelocity");
}

void GCPlayer_MovementServices_Humanoid::SetSmoothedVelocity(Vector value) {
    SetSchemaValue(m_ptr, "CPlayer_MovementServices_Humanoid", "m_vecSmoothedVelocity", false, value);
}

std::string GCPlayer_MovementServices_Humanoid::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPlayer_MovementServices_Humanoid::IsValid() {
    return (m_ptr != nullptr);
}

GCTriggerSave::GCTriggerSave(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTriggerSave::GCTriggerSave(void *ptr) {
    m_ptr = ptr;
}

bool GCTriggerSave::GetForceNewLevelUnit() const {
    return GetSchemaValue<bool>(m_ptr, "CTriggerSave", "m_bForceNewLevelUnit");
}

void GCTriggerSave::SetForceNewLevelUnit(bool value) {
    SetSchemaValue(m_ptr, "CTriggerSave", "m_bForceNewLevelUnit", false, value);
}

float GCTriggerSave::GetDangerousTimer() const {
    return GetSchemaValue<float>(m_ptr, "CTriggerSave", "m_fDangerousTimer");
}

void GCTriggerSave::SetDangerousTimer(float value) {
    SetSchemaValue(m_ptr, "CTriggerSave", "m_fDangerousTimer", false, value);
}

int32_t GCTriggerSave::GetMinHitPoints() const {
    return GetSchemaValue<int32_t>(m_ptr, "CTriggerSave", "m_minHitPoints");
}

void GCTriggerSave::SetMinHitPoints(int32_t value) {
    SetSchemaValue(m_ptr, "CTriggerSave", "m_minHitPoints", false, value);
}

std::string GCTriggerSave::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTriggerSave::IsValid() {
    return (m_ptr != nullptr);
}

GCPhysWheelConstraint::GCPhysWheelConstraint(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPhysWheelConstraint::GCPhysWheelConstraint(void *ptr) {
    m_ptr = ptr;
}

float GCPhysWheelConstraint::GetSuspensionFrequency() const {
    return GetSchemaValue<float>(m_ptr, "CPhysWheelConstraint", "m_flSuspensionFrequency");
}

void GCPhysWheelConstraint::SetSuspensionFrequency(float value) {
    SetSchemaValue(m_ptr, "CPhysWheelConstraint", "m_flSuspensionFrequency", false, value);
}

float GCPhysWheelConstraint::GetSuspensionDampingRatio() const {
    return GetSchemaValue<float>(m_ptr, "CPhysWheelConstraint", "m_flSuspensionDampingRatio");
}

void GCPhysWheelConstraint::SetSuspensionDampingRatio(float value) {
    SetSchemaValue(m_ptr, "CPhysWheelConstraint", "m_flSuspensionDampingRatio", false, value);
}

float GCPhysWheelConstraint::GetSuspensionHeightOffset() const {
    return GetSchemaValue<float>(m_ptr, "CPhysWheelConstraint", "m_flSuspensionHeightOffset");
}

void GCPhysWheelConstraint::SetSuspensionHeightOffset(float value) {
    SetSchemaValue(m_ptr, "CPhysWheelConstraint", "m_flSuspensionHeightOffset", false, value);
}

bool GCPhysWheelConstraint::GetEnableSuspensionLimit() const {
    return GetSchemaValue<bool>(m_ptr, "CPhysWheelConstraint", "m_bEnableSuspensionLimit");
}

void GCPhysWheelConstraint::SetEnableSuspensionLimit(bool value) {
    SetSchemaValue(m_ptr, "CPhysWheelConstraint", "m_bEnableSuspensionLimit", false, value);
}

float GCPhysWheelConstraint::GetMinSuspensionOffset() const {
    return GetSchemaValue<float>(m_ptr, "CPhysWheelConstraint", "m_flMinSuspensionOffset");
}

void GCPhysWheelConstraint::SetMinSuspensionOffset(float value) {
    SetSchemaValue(m_ptr, "CPhysWheelConstraint", "m_flMinSuspensionOffset", false, value);
}

float GCPhysWheelConstraint::GetMaxSuspensionOffset() const {
    return GetSchemaValue<float>(m_ptr, "CPhysWheelConstraint", "m_flMaxSuspensionOffset");
}

void GCPhysWheelConstraint::SetMaxSuspensionOffset(float value) {
    SetSchemaValue(m_ptr, "CPhysWheelConstraint", "m_flMaxSuspensionOffset", false, value);
}

bool GCPhysWheelConstraint::GetEnableSteeringLimit() const {
    return GetSchemaValue<bool>(m_ptr, "CPhysWheelConstraint", "m_bEnableSteeringLimit");
}

void GCPhysWheelConstraint::SetEnableSteeringLimit(bool value) {
    SetSchemaValue(m_ptr, "CPhysWheelConstraint", "m_bEnableSteeringLimit", false, value);
}

float GCPhysWheelConstraint::GetMinSteeringAngle() const {
    return GetSchemaValue<float>(m_ptr, "CPhysWheelConstraint", "m_flMinSteeringAngle");
}

void GCPhysWheelConstraint::SetMinSteeringAngle(float value) {
    SetSchemaValue(m_ptr, "CPhysWheelConstraint", "m_flMinSteeringAngle", false, value);
}

float GCPhysWheelConstraint::GetMaxSteeringAngle() const {
    return GetSchemaValue<float>(m_ptr, "CPhysWheelConstraint", "m_flMaxSteeringAngle");
}

void GCPhysWheelConstraint::SetMaxSteeringAngle(float value) {
    SetSchemaValue(m_ptr, "CPhysWheelConstraint", "m_flMaxSteeringAngle", false, value);
}

float GCPhysWheelConstraint::GetSteeringAxisFriction() const {
    return GetSchemaValue<float>(m_ptr, "CPhysWheelConstraint", "m_flSteeringAxisFriction");
}

void GCPhysWheelConstraint::SetSteeringAxisFriction(float value) {
    SetSchemaValue(m_ptr, "CPhysWheelConstraint", "m_flSteeringAxisFriction", false, value);
}

float GCPhysWheelConstraint::GetSpinAxisFriction() const {
    return GetSchemaValue<float>(m_ptr, "CPhysWheelConstraint", "m_flSpinAxisFriction");
}

void GCPhysWheelConstraint::SetSpinAxisFriction(float value) {
    SetSchemaValue(m_ptr, "CPhysWheelConstraint", "m_flSpinAxisFriction", false, value);
}

std::string GCPhysWheelConstraint::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPhysWheelConstraint::IsValid() {
    return (m_ptr != nullptr);
}

GCPhysFixed::GCPhysFixed(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPhysFixed::GCPhysFixed(void *ptr) {
    m_ptr = ptr;
}

float GCPhysFixed::GetLinearFrequency() const {
    return GetSchemaValue<float>(m_ptr, "CPhysFixed", "m_flLinearFrequency");
}

void GCPhysFixed::SetLinearFrequency(float value) {
    SetSchemaValue(m_ptr, "CPhysFixed", "m_flLinearFrequency", false, value);
}

float GCPhysFixed::GetLinearDampingRatio() const {
    return GetSchemaValue<float>(m_ptr, "CPhysFixed", "m_flLinearDampingRatio");
}

void GCPhysFixed::SetLinearDampingRatio(float value) {
    SetSchemaValue(m_ptr, "CPhysFixed", "m_flLinearDampingRatio", false, value);
}

float GCPhysFixed::GetAngularFrequency() const {
    return GetSchemaValue<float>(m_ptr, "CPhysFixed", "m_flAngularFrequency");
}

void GCPhysFixed::SetAngularFrequency(float value) {
    SetSchemaValue(m_ptr, "CPhysFixed", "m_flAngularFrequency", false, value);
}

float GCPhysFixed::GetAngularDampingRatio() const {
    return GetSchemaValue<float>(m_ptr, "CPhysFixed", "m_flAngularDampingRatio");
}

void GCPhysFixed::SetAngularDampingRatio(float value) {
    SetSchemaValue(m_ptr, "CPhysFixed", "m_flAngularDampingRatio", false, value);
}

bool GCPhysFixed::GetEnableLinearConstraint() const {
    return GetSchemaValue<bool>(m_ptr, "CPhysFixed", "m_bEnableLinearConstraint");
}

void GCPhysFixed::SetEnableLinearConstraint(bool value) {
    SetSchemaValue(m_ptr, "CPhysFixed", "m_bEnableLinearConstraint", false, value);
}

bool GCPhysFixed::GetEnableAngularConstraint() const {
    return GetSchemaValue<bool>(m_ptr, "CPhysFixed", "m_bEnableAngularConstraint");
}

void GCPhysFixed::SetEnableAngularConstraint(bool value) {
    SetSchemaValue(m_ptr, "CPhysFixed", "m_bEnableAngularConstraint", false, value);
}

std::string GCPhysFixed::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPhysFixed::IsValid() {
    return (m_ptr != nullptr);
}

GCSkillFloat::GCSkillFloat(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSkillFloat::GCSkillFloat(void *ptr) {
    m_ptr = ptr;
}

std::vector<float> GCSkillFloat::GetValue() const {
    float* outValue = GetSchemaValue<float*>(m_ptr, "CSkillFloat", "m_pValue"); std::vector<float> ret; for(int i = 0; i < 4; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCSkillFloat::SetValue(std::vector<float> value) {
    float* outValue = GetSchemaValue<float*>(m_ptr, "CSkillFloat", "m_pValue"); for(int i = 0; i < 4; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CSkillFloat", "m_pValue", false, outValue);
}

std::string GCSkillFloat::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSkillFloat::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvSoundscapeTriggerableAlias_snd_soundscape_triggerable::GCEnvSoundscapeTriggerableAlias_snd_soundscape_triggerable(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvSoundscapeTriggerableAlias_snd_soundscape_triggerable::GCEnvSoundscapeTriggerableAlias_snd_soundscape_triggerable(void *ptr) {
    m_ptr = ptr;
}

std::string GCEnvSoundscapeTriggerableAlias_snd_soundscape_triggerable::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvSoundscapeTriggerableAlias_snd_soundscape_triggerable::IsValid() {
    return (m_ptr != nullptr);
}

GCCSPlayerController_InGameMoneyServices::GCCSPlayerController_InGameMoneyServices(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSPlayerController_InGameMoneyServices::GCCSPlayerController_InGameMoneyServices(void *ptr) {
    m_ptr = ptr;
}

bool GCCSPlayerController_InGameMoneyServices::GetReceivesMoneyNextRound() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController_InGameMoneyServices", "m_bReceivesMoneyNextRound");
}

void GCCSPlayerController_InGameMoneyServices::SetReceivesMoneyNextRound(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerController_InGameMoneyServices", "m_bReceivesMoneyNextRound", false, value);
}

int32_t GCCSPlayerController_InGameMoneyServices::GetMoneyEarnedForNextRound() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController_InGameMoneyServices", "m_iMoneyEarnedForNextRound");
}

void GCCSPlayerController_InGameMoneyServices::SetMoneyEarnedForNextRound(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController_InGameMoneyServices", "m_iMoneyEarnedForNextRound", false, value);
}

int32_t GCCSPlayerController_InGameMoneyServices::GetAccount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController_InGameMoneyServices", "m_iAccount");
}

void GCCSPlayerController_InGameMoneyServices::SetAccount(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController_InGameMoneyServices", "m_iAccount", false, value);
}

int32_t GCCSPlayerController_InGameMoneyServices::GetStartAccount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController_InGameMoneyServices", "m_iStartAccount");
}

void GCCSPlayerController_InGameMoneyServices::SetStartAccount(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController_InGameMoneyServices", "m_iStartAccount", false, value);
}

int32_t GCCSPlayerController_InGameMoneyServices::GetTotalCashSpent() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController_InGameMoneyServices", "m_iTotalCashSpent");
}

void GCCSPlayerController_InGameMoneyServices::SetTotalCashSpent(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController_InGameMoneyServices", "m_iTotalCashSpent", false, value);
}

int32_t GCCSPlayerController_InGameMoneyServices::GetCashSpentThisRound() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController_InGameMoneyServices", "m_iCashSpentThisRound");
}

void GCCSPlayerController_InGameMoneyServices::SetCashSpentThisRound(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController_InGameMoneyServices", "m_iCashSpentThisRound", false, value);
}

std::string GCCSPlayerController_InGameMoneyServices::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSPlayerController_InGameMoneyServices::IsValid() {
    return (m_ptr != nullptr);
}

GCSprite::GCSprite(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSprite::GCSprite(void *ptr) {
    m_ptr = ptr;
}

GCBaseEntity GCSprite::GetAttachedToEntity() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CSprite", "m_hAttachedToEntity"));
    return value;
}

void GCSprite::SetAttachedToEntity(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'AttachedToEntity' is not possible.\n");
}

float GCSprite::GetSpriteFramerate() const {
    return GetSchemaValue<float>(m_ptr, "CSprite", "m_flSpriteFramerate");
}

void GCSprite::SetSpriteFramerate(float value) {
    SetSchemaValue(m_ptr, "CSprite", "m_flSpriteFramerate", false, value);
}

float GCSprite::GetFrame() const {
    return GetSchemaValue<float>(m_ptr, "CSprite", "m_flFrame");
}

void GCSprite::SetFrame(float value) {
    SetSchemaValue(m_ptr, "CSprite", "m_flFrame", false, value);
}

uint32_t GCSprite::GetBrightness() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CSprite", "m_nBrightness");
}

void GCSprite::SetBrightness(uint32_t value) {
    SetSchemaValue(m_ptr, "CSprite", "m_nBrightness", false, value);
}

float GCSprite::GetBrightnessDuration() const {
    return GetSchemaValue<float>(m_ptr, "CSprite", "m_flBrightnessDuration");
}

void GCSprite::SetBrightnessDuration(float value) {
    SetSchemaValue(m_ptr, "CSprite", "m_flBrightnessDuration", false, value);
}

float GCSprite::GetSpriteScale() const {
    return GetSchemaValue<float>(m_ptr, "CSprite", "m_flSpriteScale");
}

void GCSprite::SetSpriteScale(float value) {
    SetSchemaValue(m_ptr, "CSprite", "m_flSpriteScale", false, value);
}

float GCSprite::GetScaleDuration() const {
    return GetSchemaValue<float>(m_ptr, "CSprite", "m_flScaleDuration");
}

void GCSprite::SetScaleDuration(float value) {
    SetSchemaValue(m_ptr, "CSprite", "m_flScaleDuration", false, value);
}

bool GCSprite::GetWorldSpaceScale() const {
    return GetSchemaValue<bool>(m_ptr, "CSprite", "m_bWorldSpaceScale");
}

void GCSprite::SetWorldSpaceScale(bool value) {
    SetSchemaValue(m_ptr, "CSprite", "m_bWorldSpaceScale", false, value);
}

float GCSprite::GetGlowProxySize() const {
    return GetSchemaValue<float>(m_ptr, "CSprite", "m_flGlowProxySize");
}

void GCSprite::SetGlowProxySize(float value) {
    SetSchemaValue(m_ptr, "CSprite", "m_flGlowProxySize", false, value);
}

float GCSprite::GetHDRColorScale() const {
    return GetSchemaValue<float>(m_ptr, "CSprite", "m_flHDRColorScale");
}

void GCSprite::SetHDRColorScale(float value) {
    SetSchemaValue(m_ptr, "CSprite", "m_flHDRColorScale", false, value);
}

float GCSprite::GetMaxFrame() const {
    return GetSchemaValue<float>(m_ptr, "CSprite", "m_flMaxFrame");
}

void GCSprite::SetMaxFrame(float value) {
    SetSchemaValue(m_ptr, "CSprite", "m_flMaxFrame", false, value);
}

float GCSprite::GetStartScale() const {
    return GetSchemaValue<float>(m_ptr, "CSprite", "m_flStartScale");
}

void GCSprite::SetStartScale(float value) {
    SetSchemaValue(m_ptr, "CSprite", "m_flStartScale", false, value);
}

float GCSprite::GetDestScale() const {
    return GetSchemaValue<float>(m_ptr, "CSprite", "m_flDestScale");
}

void GCSprite::SetDestScale(float value) {
    SetSchemaValue(m_ptr, "CSprite", "m_flDestScale", false, value);
}

int32_t GCSprite::GetStartBrightness() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSprite", "m_nStartBrightness");
}

void GCSprite::SetStartBrightness(int32_t value) {
    SetSchemaValue(m_ptr, "CSprite", "m_nStartBrightness", false, value);
}

int32_t GCSprite::GetDestBrightness() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSprite", "m_nDestBrightness");
}

void GCSprite::SetDestBrightness(int32_t value) {
    SetSchemaValue(m_ptr, "CSprite", "m_nDestBrightness", false, value);
}

int32_t GCSprite::GetSpriteWidth() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSprite", "m_nSpriteWidth");
}

void GCSprite::SetSpriteWidth(int32_t value) {
    SetSchemaValue(m_ptr, "CSprite", "m_nSpriteWidth", false, value);
}

int32_t GCSprite::GetSpriteHeight() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSprite", "m_nSpriteHeight");
}

void GCSprite::SetSpriteHeight(int32_t value) {
    SetSchemaValue(m_ptr, "CSprite", "m_nSpriteHeight", false, value);
}

std::string GCSprite::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSprite::IsValid() {
    return (m_ptr != nullptr);
}

GCSoundOpvarSetAABBEntity::GCSoundOpvarSetAABBEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSoundOpvarSetAABBEntity::GCSoundOpvarSetAABBEntity(void *ptr) {
    m_ptr = ptr;
}

Vector GCSoundOpvarSetAABBEntity::GetDistanceInnerMins() const {
    return GetSchemaValue<Vector>(m_ptr, "CSoundOpvarSetAABBEntity", "m_vDistanceInnerMins");
}

void GCSoundOpvarSetAABBEntity::SetDistanceInnerMins(Vector value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetAABBEntity", "m_vDistanceInnerMins", false, value);
}

Vector GCSoundOpvarSetAABBEntity::GetDistanceInnerMaxs() const {
    return GetSchemaValue<Vector>(m_ptr, "CSoundOpvarSetAABBEntity", "m_vDistanceInnerMaxs");
}

void GCSoundOpvarSetAABBEntity::SetDistanceInnerMaxs(Vector value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetAABBEntity", "m_vDistanceInnerMaxs", false, value);
}

Vector GCSoundOpvarSetAABBEntity::GetDistanceOuterMins() const {
    return GetSchemaValue<Vector>(m_ptr, "CSoundOpvarSetAABBEntity", "m_vDistanceOuterMins");
}

void GCSoundOpvarSetAABBEntity::SetDistanceOuterMins(Vector value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetAABBEntity", "m_vDistanceOuterMins", false, value);
}

Vector GCSoundOpvarSetAABBEntity::GetDistanceOuterMaxs() const {
    return GetSchemaValue<Vector>(m_ptr, "CSoundOpvarSetAABBEntity", "m_vDistanceOuterMaxs");
}

void GCSoundOpvarSetAABBEntity::SetDistanceOuterMaxs(Vector value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetAABBEntity", "m_vDistanceOuterMaxs", false, value);
}

int32_t GCSoundOpvarSetAABBEntity::GetAABBDirection() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSoundOpvarSetAABBEntity", "m_nAABBDirection");
}

void GCSoundOpvarSetAABBEntity::SetAABBDirection(int32_t value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetAABBEntity", "m_nAABBDirection", false, value);
}

Vector GCSoundOpvarSetAABBEntity::GetInnerMins() const {
    return GetSchemaValue<Vector>(m_ptr, "CSoundOpvarSetAABBEntity", "m_vInnerMins");
}

void GCSoundOpvarSetAABBEntity::SetInnerMins(Vector value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetAABBEntity", "m_vInnerMins", false, value);
}

Vector GCSoundOpvarSetAABBEntity::GetInnerMaxs() const {
    return GetSchemaValue<Vector>(m_ptr, "CSoundOpvarSetAABBEntity", "m_vInnerMaxs");
}

void GCSoundOpvarSetAABBEntity::SetInnerMaxs(Vector value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetAABBEntity", "m_vInnerMaxs", false, value);
}

Vector GCSoundOpvarSetAABBEntity::GetOuterMins() const {
    return GetSchemaValue<Vector>(m_ptr, "CSoundOpvarSetAABBEntity", "m_vOuterMins");
}

void GCSoundOpvarSetAABBEntity::SetOuterMins(Vector value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetAABBEntity", "m_vOuterMins", false, value);
}

Vector GCSoundOpvarSetAABBEntity::GetOuterMaxs() const {
    return GetSchemaValue<Vector>(m_ptr, "CSoundOpvarSetAABBEntity", "m_vOuterMaxs");
}

void GCSoundOpvarSetAABBEntity::SetOuterMaxs(Vector value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetAABBEntity", "m_vOuterMaxs", false, value);
}

std::string GCSoundOpvarSetAABBEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSoundOpvarSetAABBEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCWeaponM4A1::GCWeaponM4A1(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWeaponM4A1::GCWeaponM4A1(void *ptr) {
    m_ptr = ptr;
}

std::string GCWeaponM4A1::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWeaponM4A1::IsValid() {
    return (m_ptr != nullptr);
}

GCBeam::GCBeam(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBeam::GCBeam(void *ptr) {
    m_ptr = ptr;
}

float GCBeam::GetFrameRate() const {
    return GetSchemaValue<float>(m_ptr, "CBeam", "m_flFrameRate");
}

void GCBeam::SetFrameRate(float value) {
    SetSchemaValue(m_ptr, "CBeam", "m_flFrameRate", false, value);
}

float GCBeam::GetHDRColorScale() const {
    return GetSchemaValue<float>(m_ptr, "CBeam", "m_flHDRColorScale");
}

void GCBeam::SetHDRColorScale(float value) {
    SetSchemaValue(m_ptr, "CBeam", "m_flHDRColorScale", false, value);
}

float GCBeam::GetDamage() const {
    return GetSchemaValue<float>(m_ptr, "CBeam", "m_flDamage");
}

void GCBeam::SetDamage(float value) {
    SetSchemaValue(m_ptr, "CBeam", "m_flDamage", false, value);
}

uint8_t GCBeam::GetNumBeamEnts() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CBeam", "m_nNumBeamEnts");
}

void GCBeam::SetNumBeamEnts(uint8_t value) {
    SetSchemaValue(m_ptr, "CBeam", "m_nNumBeamEnts", false, value);
}

BeamType_t GCBeam::GetBeamType() const {
    return GetSchemaValue<BeamType_t>(m_ptr, "CBeam", "m_nBeamType");
}

void GCBeam::SetBeamType(BeamType_t value) {
    SetSchemaValue(m_ptr, "CBeam", "m_nBeamType", false, value);
}

uint32_t GCBeam::GetBeamFlags() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CBeam", "m_nBeamFlags");
}

void GCBeam::SetBeamFlags(uint32_t value) {
    SetSchemaValue(m_ptr, "CBeam", "m_nBeamFlags", false, value);
}

std::vector<GCBaseEntity*> GCBeam::GetAttachEntity() const {
    GCBaseEntity** outValue = GetSchemaValue<GCBaseEntity**>(m_ptr, "CBeam", "m_hAttachEntity"); std::vector<GCBaseEntity*> ret; for(int i = 0; i < 10; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCBeam::SetAttachEntity(std::vector<GCBaseEntity*> value) {
    GCBaseEntity** outValue = GetSchemaValue<GCBaseEntity**>(m_ptr, "CBeam", "m_hAttachEntity"); for(int i = 0; i < 10; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CBeam", "m_hAttachEntity", false, outValue);
}

float GCBeam::GetWidth() const {
    return GetSchemaValue<float>(m_ptr, "CBeam", "m_fWidth");
}

void GCBeam::SetWidth(float value) {
    SetSchemaValue(m_ptr, "CBeam", "m_fWidth", false, value);
}

float GCBeam::GetEndWidth() const {
    return GetSchemaValue<float>(m_ptr, "CBeam", "m_fEndWidth");
}

void GCBeam::SetEndWidth(float value) {
    SetSchemaValue(m_ptr, "CBeam", "m_fEndWidth", false, value);
}

float GCBeam::GetFadeLength() const {
    return GetSchemaValue<float>(m_ptr, "CBeam", "m_fFadeLength");
}

void GCBeam::SetFadeLength(float value) {
    SetSchemaValue(m_ptr, "CBeam", "m_fFadeLength", false, value);
}

float GCBeam::GetHaloScale() const {
    return GetSchemaValue<float>(m_ptr, "CBeam", "m_fHaloScale");
}

void GCBeam::SetHaloScale(float value) {
    SetSchemaValue(m_ptr, "CBeam", "m_fHaloScale", false, value);
}

float GCBeam::GetAmplitude() const {
    return GetSchemaValue<float>(m_ptr, "CBeam", "m_fAmplitude");
}

void GCBeam::SetAmplitude(float value) {
    SetSchemaValue(m_ptr, "CBeam", "m_fAmplitude", false, value);
}

float GCBeam::GetStartFrame() const {
    return GetSchemaValue<float>(m_ptr, "CBeam", "m_fStartFrame");
}

void GCBeam::SetStartFrame(float value) {
    SetSchemaValue(m_ptr, "CBeam", "m_fStartFrame", false, value);
}

float GCBeam::GetSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CBeam", "m_fSpeed");
}

void GCBeam::SetSpeed(float value) {
    SetSchemaValue(m_ptr, "CBeam", "m_fSpeed", false, value);
}

float GCBeam::GetFrame() const {
    return GetSchemaValue<float>(m_ptr, "CBeam", "m_flFrame");
}

void GCBeam::SetFrame(float value) {
    SetSchemaValue(m_ptr, "CBeam", "m_flFrame", false, value);
}

BeamClipStyle_t GCBeam::GetClipStyle() const {
    return GetSchemaValue<BeamClipStyle_t>(m_ptr, "CBeam", "m_nClipStyle");
}

void GCBeam::SetClipStyle(BeamClipStyle_t value) {
    SetSchemaValue(m_ptr, "CBeam", "m_nClipStyle", false, value);
}

bool GCBeam::GetTurnedOff() const {
    return GetSchemaValue<bool>(m_ptr, "CBeam", "m_bTurnedOff");
}

void GCBeam::SetTurnedOff(bool value) {
    SetSchemaValue(m_ptr, "CBeam", "m_bTurnedOff", false, value);
}

Vector GCBeam::GetEndPos() const {
    return GetSchemaValue<Vector>(m_ptr, "CBeam", "m_vecEndPos");
}

void GCBeam::SetEndPos(Vector value) {
    SetSchemaValue(m_ptr, "CBeam", "m_vecEndPos", false, value);
}

GCBaseEntity GCBeam::GetEndEntity() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CBeam", "m_hEndEntity"));
    return value;
}

void GCBeam::SetEndEntity(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'EndEntity' is not possible.\n");
}

int32_t GCBeam::GetDissolveType() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBeam", "m_nDissolveType");
}

void GCBeam::SetDissolveType(int32_t value) {
    SetSchemaValue(m_ptr, "CBeam", "m_nDissolveType", false, value);
}

std::string GCBeam::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBeam::IsValid() {
    return (m_ptr != nullptr);
}

GCCommentaryViewPosition::GCCommentaryViewPosition(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCommentaryViewPosition::GCCommentaryViewPosition(void *ptr) {
    m_ptr = ptr;
}

std::string GCCommentaryViewPosition::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCommentaryViewPosition::IsValid() {
    return (m_ptr != nullptr);
}

GCTonemapController2Alias_env_tonemap_controller2::GCTonemapController2Alias_env_tonemap_controller2(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTonemapController2Alias_env_tonemap_controller2::GCTonemapController2Alias_env_tonemap_controller2(void *ptr) {
    m_ptr = ptr;
}

std::string GCTonemapController2Alias_env_tonemap_controller2::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTonemapController2Alias_env_tonemap_controller2::IsValid() {
    return (m_ptr != nullptr);
}

GCPhysPulley::GCPhysPulley(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPhysPulley::GCPhysPulley(void *ptr) {
    m_ptr = ptr;
}

Vector GCPhysPulley::GetPosition2() const {
    return GetSchemaValue<Vector>(m_ptr, "CPhysPulley", "m_position2");
}

void GCPhysPulley::SetPosition2(Vector value) {
    SetSchemaValue(m_ptr, "CPhysPulley", "m_position2", false, value);
}

std::vector<Vector> GCPhysPulley::GetOffset() const {
    Vector* outValue = GetSchemaValue<Vector*>(m_ptr, "CPhysPulley", "m_offset"); std::vector<Vector> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCPhysPulley::SetOffset(std::vector<Vector> value) {
    Vector* outValue = GetSchemaValue<Vector*>(m_ptr, "CPhysPulley", "m_offset"); for(int i = 0; i < 2; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CPhysPulley", "m_offset", false, outValue);
}

float GCPhysPulley::GetAddLength() const {
    return GetSchemaValue<float>(m_ptr, "CPhysPulley", "m_addLength");
}

void GCPhysPulley::SetAddLength(float value) {
    SetSchemaValue(m_ptr, "CPhysPulley", "m_addLength", false, value);
}

float GCPhysPulley::GetGearRatio() const {
    return GetSchemaValue<float>(m_ptr, "CPhysPulley", "m_gearRatio");
}

void GCPhysPulley::SetGearRatio(float value) {
    SetSchemaValue(m_ptr, "CPhysPulley", "m_gearRatio", false, value);
}

std::string GCPhysPulley::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPhysPulley::IsValid() {
    return (m_ptr != nullptr);
}

GCGameRulesProxy::GCGameRulesProxy(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCGameRulesProxy::GCGameRulesProxy(void *ptr) {
    m_ptr = ptr;
}

std::string GCGameRulesProxy::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCGameRulesProxy::IsValid() {
    return (m_ptr != nullptr);
}

GCWeaponMP7::GCWeaponMP7(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWeaponMP7::GCWeaponMP7(void *ptr) {
    m_ptr = ptr;
}

std::string GCWeaponMP7::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWeaponMP7::IsValid() {
    return (m_ptr != nullptr);
}

GCCSPlayerController_ActionTrackingServices::GCCSPlayerController_ActionTrackingServices(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSPlayerController_ActionTrackingServices::GCCSPlayerController_ActionTrackingServices(void *ptr) {
    m_ptr = ptr;
}

std::vector<GCSPerRoundStats_t> GCCSPlayerController_ActionTrackingServices::GetPerRoundStats() const {
    CUtlVector<GCSPerRoundStats_t>* vec = GetSchemaValue<CUtlVector<GCSPerRoundStats_t>*>(m_ptr, "CCSPlayerController_ActionTrackingServices", "m_perRoundStats"); std::vector<GCSPerRoundStats_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCCSPlayerController_ActionTrackingServices::SetPerRoundStats(std::vector<GCSPerRoundStats_t> value) {
    SetSchemaValueCUtlVector<GCSPerRoundStats_t>(m_ptr, "CCSPlayerController_ActionTrackingServices", "m_perRoundStats", false, value);
}

GCSMatchStats_t GCCSPlayerController_ActionTrackingServices::GetMatchStats() const {
    return GetSchemaValue<GCSMatchStats_t>(m_ptr, "CCSPlayerController_ActionTrackingServices", "m_matchStats");
}

void GCCSPlayerController_ActionTrackingServices::SetMatchStats(GCSMatchStats_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController_ActionTrackingServices", "m_matchStats", false, value);
}

int32_t GCCSPlayerController_ActionTrackingServices::GetNumRoundKills() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController_ActionTrackingServices", "m_iNumRoundKills");
}

void GCCSPlayerController_ActionTrackingServices::SetNumRoundKills(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController_ActionTrackingServices", "m_iNumRoundKills", false, value);
}

int32_t GCCSPlayerController_ActionTrackingServices::GetNumRoundKillsHeadshots() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController_ActionTrackingServices", "m_iNumRoundKillsHeadshots");
}

void GCCSPlayerController_ActionTrackingServices::SetNumRoundKillsHeadshots(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController_ActionTrackingServices", "m_iNumRoundKillsHeadshots", false, value);
}

uint32_t GCCSPlayerController_ActionTrackingServices::GetTotalRoundDamageDealt() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CCSPlayerController_ActionTrackingServices", "m_unTotalRoundDamageDealt");
}

void GCCSPlayerController_ActionTrackingServices::SetTotalRoundDamageDealt(uint32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController_ActionTrackingServices", "m_unTotalRoundDamageDealt", false, value);
}

std::string GCCSPlayerController_ActionTrackingServices::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSPlayerController_ActionTrackingServices::IsValid() {
    return (m_ptr != nullptr);
}

GCPrecipitationBlocker::GCPrecipitationBlocker(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPrecipitationBlocker::GCPrecipitationBlocker(void *ptr) {
    m_ptr = ptr;
}

std::string GCPrecipitationBlocker::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPrecipitationBlocker::IsValid() {
    return (m_ptr != nullptr);
}

GCBaseFlexAlias_funCBaseFlex::GCBaseFlexAlias_funCBaseFlex(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBaseFlexAlias_funCBaseFlex::GCBaseFlexAlias_funCBaseFlex(void *ptr) {
    m_ptr = ptr;
}

std::string GCBaseFlexAlias_funCBaseFlex::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBaseFlexAlias_funCBaseFlex::IsValid() {
    return (m_ptr != nullptr);
}

GCFish::GCFish(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFish::GCFish(void *ptr) {
    m_ptr = ptr;
}

GCFishPool GCFish::GetPool() const {
    GCFishPool value(GetSchemaValuePtr<void>(m_ptr, "CFish", "m_pool"));
    return value;
}

void GCFish::SetPool(GCFishPool* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Pool' is not possible.\n");
}

uint32_t GCFish::GetId() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CFish", "m_id");
}

void GCFish::SetId(uint32_t value) {
    SetSchemaValue(m_ptr, "CFish", "m_id", false, value);
}

float GCFish::GetX() const {
    return GetSchemaValue<float>(m_ptr, "CFish", "m_x");
}

void GCFish::SetX(float value) {
    SetSchemaValue(m_ptr, "CFish", "m_x", false, value);
}

float GCFish::GetY() const {
    return GetSchemaValue<float>(m_ptr, "CFish", "m_y");
}

void GCFish::SetY(float value) {
    SetSchemaValue(m_ptr, "CFish", "m_y", false, value);
}

float GCFish::GetZ() const {
    return GetSchemaValue<float>(m_ptr, "CFish", "m_z");
}

void GCFish::SetZ(float value) {
    SetSchemaValue(m_ptr, "CFish", "m_z", false, value);
}

float GCFish::GetAngle() const {
    return GetSchemaValue<float>(m_ptr, "CFish", "m_angle");
}

void GCFish::SetAngle(float value) {
    SetSchemaValue(m_ptr, "CFish", "m_angle", false, value);
}

float GCFish::GetAngleChange() const {
    return GetSchemaValue<float>(m_ptr, "CFish", "m_angleChange");
}

void GCFish::SetAngleChange(float value) {
    SetSchemaValue(m_ptr, "CFish", "m_angleChange", false, value);
}

Vector GCFish::GetForward() const {
    return GetSchemaValue<Vector>(m_ptr, "CFish", "m_forward");
}

void GCFish::SetForward(Vector value) {
    SetSchemaValue(m_ptr, "CFish", "m_forward", false, value);
}

Vector GCFish::GetPerp() const {
    return GetSchemaValue<Vector>(m_ptr, "CFish", "m_perp");
}

void GCFish::SetPerp(Vector value) {
    SetSchemaValue(m_ptr, "CFish", "m_perp", false, value);
}

Vector GCFish::GetPoolOrigin() const {
    return GetSchemaValue<Vector>(m_ptr, "CFish", "m_poolOrigin");
}

void GCFish::SetPoolOrigin(Vector value) {
    SetSchemaValue(m_ptr, "CFish", "m_poolOrigin", false, value);
}

float GCFish::GetWaterLevel() const {
    return GetSchemaValue<float>(m_ptr, "CFish", "m_waterLevel");
}

void GCFish::SetWaterLevel(float value) {
    SetSchemaValue(m_ptr, "CFish", "m_waterLevel", false, value);
}

float GCFish::GetSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CFish", "m_speed");
}

void GCFish::SetSpeed(float value) {
    SetSchemaValue(m_ptr, "CFish", "m_speed", false, value);
}

float GCFish::GetDesiredSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CFish", "m_desiredSpeed");
}

void GCFish::SetDesiredSpeed(float value) {
    SetSchemaValue(m_ptr, "CFish", "m_desiredSpeed", false, value);
}

float GCFish::GetCalmSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CFish", "m_calmSpeed");
}

void GCFish::SetCalmSpeed(float value) {
    SetSchemaValue(m_ptr, "CFish", "m_calmSpeed", false, value);
}

float GCFish::GetPanicSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CFish", "m_panicSpeed");
}

void GCFish::SetPanicSpeed(float value) {
    SetSchemaValue(m_ptr, "CFish", "m_panicSpeed", false, value);
}

float GCFish::GetAvoidRange() const {
    return GetSchemaValue<float>(m_ptr, "CFish", "m_avoidRange");
}

void GCFish::SetAvoidRange(float value) {
    SetSchemaValue(m_ptr, "CFish", "m_avoidRange", false, value);
}

GCountdownTimer GCFish::GetTurnTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CFish", "m_turnTimer");
}

void GCFish::SetTurnTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CFish", "m_turnTimer", false, value);
}

bool GCFish::GetTurnClockwise() const {
    return GetSchemaValue<bool>(m_ptr, "CFish", "m_turnClockwise");
}

void GCFish::SetTurnClockwise(bool value) {
    SetSchemaValue(m_ptr, "CFish", "m_turnClockwise", false, value);
}

GCountdownTimer GCFish::GetGoTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CFish", "m_goTimer");
}

void GCFish::SetGoTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CFish", "m_goTimer", false, value);
}

GCountdownTimer GCFish::GetMoveTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CFish", "m_moveTimer");
}

void GCFish::SetMoveTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CFish", "m_moveTimer", false, value);
}

GCountdownTimer GCFish::GetPanicTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CFish", "m_panicTimer");
}

void GCFish::SetPanicTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CFish", "m_panicTimer", false, value);
}

GCountdownTimer GCFish::GetDisperseTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CFish", "m_disperseTimer");
}

void GCFish::SetDisperseTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CFish", "m_disperseTimer", false, value);
}

GCountdownTimer GCFish::GetProximityTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CFish", "m_proximityTimer");
}

void GCFish::SetProximityTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CFish", "m_proximityTimer", false, value);
}

std::vector<GCFish*> GCFish::GetVisible() const {
    CUtlVector<GCFish*>* vec = GetSchemaValue<CUtlVector<GCFish*>*>(m_ptr, "CFish", "m_visible"); std::vector<GCFish*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCFish::SetVisible(std::vector<GCFish*> value) {
    SetSchemaValueCUtlVector<GCFish*>(m_ptr, "CFish", "m_visible", false, value);
}

std::string GCFish::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFish::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvFireSource::GCEnvFireSource(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvFireSource::GCEnvFireSource(void *ptr) {
    m_ptr = ptr;
}

bool GCEnvFireSource::GetEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvFireSource", "m_bEnabled");
}

void GCEnvFireSource::SetEnabled(bool value) {
    SetSchemaValue(m_ptr, "CEnvFireSource", "m_bEnabled", false, value);
}

float GCEnvFireSource::GetRadius() const {
    return GetSchemaValue<float>(m_ptr, "CEnvFireSource", "m_radius");
}

void GCEnvFireSource::SetRadius(float value) {
    SetSchemaValue(m_ptr, "CEnvFireSource", "m_radius", false, value);
}

float GCEnvFireSource::GetDamage() const {
    return GetSchemaValue<float>(m_ptr, "CEnvFireSource", "m_damage");
}

void GCEnvFireSource::SetDamage(float value) {
    SetSchemaValue(m_ptr, "CEnvFireSource", "m_damage", false, value);
}

std::string GCEnvFireSource::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvFireSource::IsValid() {
    return (m_ptr != nullptr);
}

GCInfoLadderDismount::GCInfoLadderDismount(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCInfoLadderDismount::GCInfoLadderDismount(void *ptr) {
    m_ptr = ptr;
}

std::string GCInfoLadderDismount::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCInfoLadderDismount::IsValid() {
    return (m_ptr != nullptr);
}

GCTriggerGameEvent::GCTriggerGameEvent(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTriggerGameEvent::GCTriggerGameEvent(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCTriggerGameEvent::GetStrStartTouchEventName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CTriggerGameEvent", "m_strStartTouchEventName");
}

void GCTriggerGameEvent::SetStrStartTouchEventName(CUtlString value) {
    SetSchemaValue(m_ptr, "CTriggerGameEvent", "m_strStartTouchEventName", false, value);
}

CUtlString GCTriggerGameEvent::GetStrEndTouchEventName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CTriggerGameEvent", "m_strEndTouchEventName");
}

void GCTriggerGameEvent::SetStrEndTouchEventName(CUtlString value) {
    SetSchemaValue(m_ptr, "CTriggerGameEvent", "m_strEndTouchEventName", false, value);
}

CUtlString GCTriggerGameEvent::GetStrTriggerID() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CTriggerGameEvent", "m_strTriggerID");
}

void GCTriggerGameEvent::SetStrTriggerID(CUtlString value) {
    SetSchemaValue(m_ptr, "CTriggerGameEvent", "m_strTriggerID", false, value);
}

std::string GCTriggerGameEvent::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTriggerGameEvent::IsValid() {
    return (m_ptr != nullptr);
}

GSimpleConstraintSoundProfile::GSimpleConstraintSoundProfile(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GSimpleConstraintSoundProfile::GSimpleConstraintSoundProfile(void *ptr) {
    m_ptr = ptr;
}

GSimpleConstraintSoundProfile GSimpleConstraintSoundProfile::GetKeypoints() const {
    return GetSchemaValue<GSimpleConstraintSoundProfile>(m_ptr, "SimpleConstraintSoundProfile", "eKeypoints");
}

void GSimpleConstraintSoundProfile::SetKeypoints(GSimpleConstraintSoundProfile value) {
    SetSchemaValue(m_ptr, "SimpleConstraintSoundProfile", "eKeypoints", false, value);
}

std::vector<float> GSimpleConstraintSoundProfile::GetKeyPoints() const {
    float* outValue = GetSchemaValue<float*>(m_ptr, "SimpleConstraintSoundProfile", "m_keyPoints"); std::vector<float> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}

void GSimpleConstraintSoundProfile::SetKeyPoints(std::vector<float> value) {
    float* outValue = GetSchemaValue<float*>(m_ptr, "SimpleConstraintSoundProfile", "m_keyPoints"); for(int i = 0; i < 2; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "SimpleConstraintSoundProfile", "m_keyPoints", false, outValue);
}

std::vector<float> GSimpleConstraintSoundProfile::GetReversalSoundThresholds() const {
    float* outValue = GetSchemaValue<float*>(m_ptr, "SimpleConstraintSoundProfile", "m_reversalSoundThresholds"); std::vector<float> ret; for(int i = 0; i < 3; i++) { ret.push_back(outValue[i]); } return ret;
}

void GSimpleConstraintSoundProfile::SetReversalSoundThresholds(std::vector<float> value) {
    float* outValue = GetSchemaValue<float*>(m_ptr, "SimpleConstraintSoundProfile", "m_reversalSoundThresholds"); for(int i = 0; i < 3; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "SimpleConstraintSoundProfile", "m_reversalSoundThresholds", false, outValue);
}

std::string GSimpleConstraintSoundProfile::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GSimpleConstraintSoundProfile::IsValid() {
    return (m_ptr != nullptr);
}

GCDebugHistory::GCDebugHistory(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCDebugHistory::GCDebugHistory(void *ptr) {
    m_ptr = ptr;
}

int32_t GCDebugHistory::GetNpcEvents() const {
    return GetSchemaValue<int32_t>(m_ptr, "CDebugHistory", "m_nNpcEvents");
}

void GCDebugHistory::SetNpcEvents(int32_t value) {
    SetSchemaValue(m_ptr, "CDebugHistory", "m_nNpcEvents", false, value);
}

std::string GCDebugHistory::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCDebugHistory::IsValid() {
    return (m_ptr != nullptr);
}

GCInfoData::GCInfoData(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCInfoData::GCInfoData(void *ptr) {
    m_ptr = ptr;
}

std::string GCInfoData::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCInfoData::IsValid() {
    return (m_ptr != nullptr);
}

GCHostageCarriableProp::GCHostageCarriableProp(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCHostageCarriableProp::GCHostageCarriableProp(void *ptr) {
    m_ptr = ptr;
}

std::string GCHostageCarriableProp::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCHostageCarriableProp::IsValid() {
    return (m_ptr != nullptr);
}

GCLightSpotEntity::GCLightSpotEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCLightSpotEntity::GCLightSpotEntity(void *ptr) {
    m_ptr = ptr;
}

std::string GCLightSpotEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCLightSpotEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCFuncRotating::GCFuncRotating(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFuncRotating::GCFuncRotating(void *ptr) {
    m_ptr = ptr;
}

GCEntityIOOutput GCFuncRotating::GetOnStopped() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CFuncRotating", "m_OnStopped");
}

void GCFuncRotating::SetOnStopped(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CFuncRotating", "m_OnStopped", false, value);
}

GCEntityIOOutput GCFuncRotating::GetOnStarted() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CFuncRotating", "m_OnStarted");
}

void GCFuncRotating::SetOnStarted(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CFuncRotating", "m_OnStarted", false, value);
}

GCEntityIOOutput GCFuncRotating::GetOnReachedStart() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CFuncRotating", "m_OnReachedStart");
}

void GCFuncRotating::SetOnReachedStart(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CFuncRotating", "m_OnReachedStart", false, value);
}

Vector GCFuncRotating::GetLocalRotationVector() const {
    return GetSchemaValue<Vector>(m_ptr, "CFuncRotating", "m_localRotationVector");
}

void GCFuncRotating::SetLocalRotationVector(Vector value) {
    SetSchemaValue(m_ptr, "CFuncRotating", "m_localRotationVector", false, value);
}

float GCFuncRotating::GetFanFriction() const {
    return GetSchemaValue<float>(m_ptr, "CFuncRotating", "m_flFanFriction");
}

void GCFuncRotating::SetFanFriction(float value) {
    SetSchemaValue(m_ptr, "CFuncRotating", "m_flFanFriction", false, value);
}

float GCFuncRotating::GetAttenuation() const {
    return GetSchemaValue<float>(m_ptr, "CFuncRotating", "m_flAttenuation");
}

void GCFuncRotating::SetAttenuation(float value) {
    SetSchemaValue(m_ptr, "CFuncRotating", "m_flAttenuation", false, value);
}

float GCFuncRotating::GetVolume() const {
    return GetSchemaValue<float>(m_ptr, "CFuncRotating", "m_flVolume");
}

void GCFuncRotating::SetVolume(float value) {
    SetSchemaValue(m_ptr, "CFuncRotating", "m_flVolume", false, value);
}

float GCFuncRotating::GetTargetSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CFuncRotating", "m_flTargetSpeed");
}

void GCFuncRotating::SetTargetSpeed(float value) {
    SetSchemaValue(m_ptr, "CFuncRotating", "m_flTargetSpeed", false, value);
}

float GCFuncRotating::GetMaxSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CFuncRotating", "m_flMaxSpeed");
}

void GCFuncRotating::SetMaxSpeed(float value) {
    SetSchemaValue(m_ptr, "CFuncRotating", "m_flMaxSpeed", false, value);
}

float GCFuncRotating::GetBlockDamage() const {
    return GetSchemaValue<float>(m_ptr, "CFuncRotating", "m_flBlockDamage");
}

void GCFuncRotating::SetBlockDamage(float value) {
    SetSchemaValue(m_ptr, "CFuncRotating", "m_flBlockDamage", false, value);
}

CUtlSymbolLarge GCFuncRotating::GetNoiseRunning() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncRotating", "m_NoiseRunning");
}

void GCFuncRotating::SetNoiseRunning(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFuncRotating", "m_NoiseRunning", false, value);
}

bool GCFuncRotating::GetReversed() const {
    return GetSchemaValue<bool>(m_ptr, "CFuncRotating", "m_bReversed");
}

void GCFuncRotating::SetReversed(bool value) {
    SetSchemaValue(m_ptr, "CFuncRotating", "m_bReversed", false, value);
}

bool GCFuncRotating::GetAccelDecel() const {
    return GetSchemaValue<bool>(m_ptr, "CFuncRotating", "m_bAccelDecel");
}

void GCFuncRotating::SetAccelDecel(bool value) {
    SetSchemaValue(m_ptr, "CFuncRotating", "m_bAccelDecel", false, value);
}

QAngle GCFuncRotating::GetPrevLocalAngles() const {
    return GetSchemaValue<QAngle>(m_ptr, "CFuncRotating", "m_prevLocalAngles");
}

void GCFuncRotating::SetPrevLocalAngles(QAngle value) {
    SetSchemaValue(m_ptr, "CFuncRotating", "m_prevLocalAngles", false, value);
}

QAngle GCFuncRotating::GetStart() const {
    return GetSchemaValue<QAngle>(m_ptr, "CFuncRotating", "m_angStart");
}

void GCFuncRotating::SetStart(QAngle value) {
    SetSchemaValue(m_ptr, "CFuncRotating", "m_angStart", false, value);
}

bool GCFuncRotating::GetStopAtStartPos() const {
    return GetSchemaValue<bool>(m_ptr, "CFuncRotating", "m_bStopAtStartPos");
}

void GCFuncRotating::SetStopAtStartPos(bool value) {
    SetSchemaValue(m_ptr, "CFuncRotating", "m_bStopAtStartPos", false, value);
}

Vector GCFuncRotating::GetClientOrigin() const {
    return GetSchemaValue<Vector>(m_ptr, "CFuncRotating", "m_vecClientOrigin");
}

void GCFuncRotating::SetClientOrigin(Vector value) {
    SetSchemaValue(m_ptr, "CFuncRotating", "m_vecClientOrigin", false, value);
}

QAngle GCFuncRotating::GetClientAngles() const {
    return GetSchemaValue<QAngle>(m_ptr, "CFuncRotating", "m_vecClientAngles");
}

void GCFuncRotating::SetClientAngles(QAngle value) {
    SetSchemaValue(m_ptr, "CFuncRotating", "m_vecClientAngles", false, value);
}

std::string GCFuncRotating::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFuncRotating::IsValid() {
    return (m_ptr != nullptr);
}

GCDecoyProjectile::GCDecoyProjectile(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCDecoyProjectile::GCDecoyProjectile(void *ptr) {
    m_ptr = ptr;
}

int32_t GCDecoyProjectile::GetDecoyShotTick() const {
    return GetSchemaValue<int32_t>(m_ptr, "CDecoyProjectile", "m_nDecoyShotTick");
}

void GCDecoyProjectile::SetDecoyShotTick(int32_t value) {
    SetSchemaValue(m_ptr, "CDecoyProjectile", "m_nDecoyShotTick", false, value);
}

int32_t GCDecoyProjectile::GetShotsRemaining() const {
    return GetSchemaValue<int32_t>(m_ptr, "CDecoyProjectile", "m_shotsRemaining");
}

void GCDecoyProjectile::SetShotsRemaining(int32_t value) {
    SetSchemaValue(m_ptr, "CDecoyProjectile", "m_shotsRemaining", false, value);
}

uint16_t GCDecoyProjectile::GetDecoyWeaponDefIndex() const {
    return GetSchemaValue<uint16_t>(m_ptr, "CDecoyProjectile", "m_decoyWeaponDefIndex");
}

void GCDecoyProjectile::SetDecoyWeaponDefIndex(uint16_t value) {
    SetSchemaValue(m_ptr, "CDecoyProjectile", "m_decoyWeaponDefIndex", false, value);
}

std::string GCDecoyProjectile::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCDecoyProjectile::IsValid() {
    return (m_ptr != nullptr);
}

GCCSPlace::GCCSPlace(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSPlace::GCCSPlace(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCCSPlace::GetName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CCSPlace", "m_name");
}

void GCCSPlace::SetName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CCSPlace", "m_name", false, value);
}

std::string GCCSPlace::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSPlace::IsValid() {
    return (m_ptr != nullptr);
}

GCFuncTrainControls::GCFuncTrainControls(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFuncTrainControls::GCFuncTrainControls(void *ptr) {
    m_ptr = ptr;
}

std::string GCFuncTrainControls::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFuncTrainControls::IsValid() {
    return (m_ptr != nullptr);
}

GCEntityDissolve::GCEntityDissolve(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEntityDissolve::GCEntityDissolve(void *ptr) {
    m_ptr = ptr;
}

float GCEntityDissolve::GetFadeInStart() const {
    return GetSchemaValue<float>(m_ptr, "CEntityDissolve", "m_flFadeInStart");
}

void GCEntityDissolve::SetFadeInStart(float value) {
    SetSchemaValue(m_ptr, "CEntityDissolve", "m_flFadeInStart", false, value);
}

float GCEntityDissolve::GetFadeInLength() const {
    return GetSchemaValue<float>(m_ptr, "CEntityDissolve", "m_flFadeInLength");
}

void GCEntityDissolve::SetFadeInLength(float value) {
    SetSchemaValue(m_ptr, "CEntityDissolve", "m_flFadeInLength", false, value);
}

float GCEntityDissolve::GetFadeOutModelStart() const {
    return GetSchemaValue<float>(m_ptr, "CEntityDissolve", "m_flFadeOutModelStart");
}

void GCEntityDissolve::SetFadeOutModelStart(float value) {
    SetSchemaValue(m_ptr, "CEntityDissolve", "m_flFadeOutModelStart", false, value);
}

float GCEntityDissolve::GetFadeOutModelLength() const {
    return GetSchemaValue<float>(m_ptr, "CEntityDissolve", "m_flFadeOutModelLength");
}

void GCEntityDissolve::SetFadeOutModelLength(float value) {
    SetSchemaValue(m_ptr, "CEntityDissolve", "m_flFadeOutModelLength", false, value);
}

float GCEntityDissolve::GetFadeOutStart() const {
    return GetSchemaValue<float>(m_ptr, "CEntityDissolve", "m_flFadeOutStart");
}

void GCEntityDissolve::SetFadeOutStart(float value) {
    SetSchemaValue(m_ptr, "CEntityDissolve", "m_flFadeOutStart", false, value);
}

float GCEntityDissolve::GetFadeOutLength() const {
    return GetSchemaValue<float>(m_ptr, "CEntityDissolve", "m_flFadeOutLength");
}

void GCEntityDissolve::SetFadeOutLength(float value) {
    SetSchemaValue(m_ptr, "CEntityDissolve", "m_flFadeOutLength", false, value);
}

EntityDisolveType_t GCEntityDissolve::GetDissolveType() const {
    return GetSchemaValue<EntityDisolveType_t>(m_ptr, "CEntityDissolve", "m_nDissolveType");
}

void GCEntityDissolve::SetDissolveType(EntityDisolveType_t value) {
    SetSchemaValue(m_ptr, "CEntityDissolve", "m_nDissolveType", false, value);
}

Vector GCEntityDissolve::GetDissolverOrigin() const {
    return GetSchemaValue<Vector>(m_ptr, "CEntityDissolve", "m_vDissolverOrigin");
}

void GCEntityDissolve::SetDissolverOrigin(Vector value) {
    SetSchemaValue(m_ptr, "CEntityDissolve", "m_vDissolverOrigin", false, value);
}

uint32_t GCEntityDissolve::GetMagnitude() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CEntityDissolve", "m_nMagnitude");
}

void GCEntityDissolve::SetMagnitude(uint32_t value) {
    SetSchemaValue(m_ptr, "CEntityDissolve", "m_nMagnitude", false, value);
}

std::string GCEntityDissolve::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEntityDissolve::IsValid() {
    return (m_ptr != nullptr);
}

GCPointAngleSensor::GCPointAngleSensor(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPointAngleSensor::GCPointAngleSensor(void *ptr) {
    m_ptr = ptr;
}

bool GCPointAngleSensor::GetDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CPointAngleSensor", "m_bDisabled");
}

void GCPointAngleSensor::SetDisabled(bool value) {
    SetSchemaValue(m_ptr, "CPointAngleSensor", "m_bDisabled", false, value);
}

CUtlSymbolLarge GCPointAngleSensor::GetLookAtName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPointAngleSensor", "m_nLookAtName");
}

void GCPointAngleSensor::SetLookAtName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPointAngleSensor", "m_nLookAtName", false, value);
}

GCBaseEntity GCPointAngleSensor::GetTargetEntity() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CPointAngleSensor", "m_hTargetEntity"));
    return value;
}

void GCPointAngleSensor::SetTargetEntity(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'TargetEntity' is not possible.\n");
}

GCBaseEntity GCPointAngleSensor::GetLookAtEntity() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CPointAngleSensor", "m_hLookAtEntity"));
    return value;
}

void GCPointAngleSensor::SetLookAtEntity(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'LookAtEntity' is not possible.\n");
}

float GCPointAngleSensor::GetDuration() const {
    return GetSchemaValue<float>(m_ptr, "CPointAngleSensor", "m_flDuration");
}

void GCPointAngleSensor::SetDuration(float value) {
    SetSchemaValue(m_ptr, "CPointAngleSensor", "m_flDuration", false, value);
}

float GCPointAngleSensor::GetDotTolerance() const {
    return GetSchemaValue<float>(m_ptr, "CPointAngleSensor", "m_flDotTolerance");
}

void GCPointAngleSensor::SetDotTolerance(float value) {
    SetSchemaValue(m_ptr, "CPointAngleSensor", "m_flDotTolerance", false, value);
}

bool GCPointAngleSensor::GetFired() const {
    return GetSchemaValue<bool>(m_ptr, "CPointAngleSensor", "m_bFired");
}

void GCPointAngleSensor::SetFired(bool value) {
    SetSchemaValue(m_ptr, "CPointAngleSensor", "m_bFired", false, value);
}

GCEntityIOOutput GCPointAngleSensor::GetOnFacingLookat() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPointAngleSensor", "m_OnFacingLookat");
}

void GCPointAngleSensor::SetOnFacingLookat(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPointAngleSensor", "m_OnFacingLookat", false, value);
}

GCEntityIOOutput GCPointAngleSensor::GetOnNotFacingLookat() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPointAngleSensor", "m_OnNotFacingLookat");
}

void GCPointAngleSensor::SetOnNotFacingLookat(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPointAngleSensor", "m_OnNotFacingLookat", false, value);
}

std::string GCPointAngleSensor::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPointAngleSensor::IsValid() {
    return (m_ptr != nullptr);
}

GCSoundEventOBBEntity::GCSoundEventOBBEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSoundEventOBBEntity::GCSoundEventOBBEntity(void *ptr) {
    m_ptr = ptr;
}

Vector GCSoundEventOBBEntity::GetMins() const {
    return GetSchemaValue<Vector>(m_ptr, "CSoundEventOBBEntity", "m_vMins");
}

void GCSoundEventOBBEntity::SetMins(Vector value) {
    SetSchemaValue(m_ptr, "CSoundEventOBBEntity", "m_vMins", false, value);
}

Vector GCSoundEventOBBEntity::GetMaxs() const {
    return GetSchemaValue<Vector>(m_ptr, "CSoundEventOBBEntity", "m_vMaxs");
}

void GCSoundEventOBBEntity::SetMaxs(Vector value) {
    SetSchemaValue(m_ptr, "CSoundEventOBBEntity", "m_vMaxs", false, value);
}

std::string GCSoundEventOBBEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSoundEventOBBEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCBtNodeCondition::GCBtNodeCondition(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBtNodeCondition::GCBtNodeCondition(void *ptr) {
    m_ptr = ptr;
}

bool GCBtNodeCondition::GetNegated() const {
    return GetSchemaValue<bool>(m_ptr, "CBtNodeCondition", "m_bNegated");
}

void GCBtNodeCondition::SetNegated(bool value) {
    SetSchemaValue(m_ptr, "CBtNodeCondition", "m_bNegated", false, value);
}

std::string GCBtNodeCondition::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBtNodeCondition::IsValid() {
    return (m_ptr != nullptr);
}

GCSharedGapTypeQueryRegistration::GCSharedGapTypeQueryRegistration(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSharedGapTypeQueryRegistration::GCSharedGapTypeQueryRegistration(void *ptr) {
    m_ptr = ptr;
}

std::string GCSharedGapTypeQueryRegistration::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSharedGapTypeQueryRegistration::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvVolumetricFogVolume::GCEnvVolumetricFogVolume(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvVolumetricFogVolume::GCEnvVolumetricFogVolume(void *ptr) {
    m_ptr = ptr;
}

bool GCEnvVolumetricFogVolume::GetActive() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvVolumetricFogVolume", "m_bActive");
}

void GCEnvVolumetricFogVolume::SetActive(bool value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogVolume", "m_bActive", false, value);
}

Vector GCEnvVolumetricFogVolume::GetBoxMins() const {
    return GetSchemaValue<Vector>(m_ptr, "CEnvVolumetricFogVolume", "m_vBoxMins");
}

void GCEnvVolumetricFogVolume::SetBoxMins(Vector value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogVolume", "m_vBoxMins", false, value);
}

Vector GCEnvVolumetricFogVolume::GetBoxMaxs() const {
    return GetSchemaValue<Vector>(m_ptr, "CEnvVolumetricFogVolume", "m_vBoxMaxs");
}

void GCEnvVolumetricFogVolume::SetBoxMaxs(Vector value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogVolume", "m_vBoxMaxs", false, value);
}

bool GCEnvVolumetricFogVolume::GetStartDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvVolumetricFogVolume", "m_bStartDisabled");
}

void GCEnvVolumetricFogVolume::SetStartDisabled(bool value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogVolume", "m_bStartDisabled", false, value);
}

float GCEnvVolumetricFogVolume::GetStrength() const {
    return GetSchemaValue<float>(m_ptr, "CEnvVolumetricFogVolume", "m_flStrength");
}

void GCEnvVolumetricFogVolume::SetStrength(float value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogVolume", "m_flStrength", false, value);
}

int32_t GCEnvVolumetricFogVolume::GetFalloffShape() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvVolumetricFogVolume", "m_nFalloffShape");
}

void GCEnvVolumetricFogVolume::SetFalloffShape(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogVolume", "m_nFalloffShape", false, value);
}

float GCEnvVolumetricFogVolume::GetFalloffExponent() const {
    return GetSchemaValue<float>(m_ptr, "CEnvVolumetricFogVolume", "m_flFalloffExponent");
}

void GCEnvVolumetricFogVolume::SetFalloffExponent(float value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogVolume", "m_flFalloffExponent", false, value);
}

float GCEnvVolumetricFogVolume::GetHeightFogDepth() const {
    return GetSchemaValue<float>(m_ptr, "CEnvVolumetricFogVolume", "m_flHeightFogDepth");
}

void GCEnvVolumetricFogVolume::SetHeightFogDepth(float value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogVolume", "m_flHeightFogDepth", false, value);
}

float GCEnvVolumetricFogVolume::GetHeightFogEdgeWidth() const {
    return GetSchemaValue<float>(m_ptr, "CEnvVolumetricFogVolume", "m_fHeightFogEdgeWidth");
}

void GCEnvVolumetricFogVolume::SetHeightFogEdgeWidth(float value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogVolume", "m_fHeightFogEdgeWidth", false, value);
}

float GCEnvVolumetricFogVolume::GetIndirectLightStrength() const {
    return GetSchemaValue<float>(m_ptr, "CEnvVolumetricFogVolume", "m_fIndirectLightStrength");
}

void GCEnvVolumetricFogVolume::SetIndirectLightStrength(float value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogVolume", "m_fIndirectLightStrength", false, value);
}

float GCEnvVolumetricFogVolume::GetSunLightStrength() const {
    return GetSchemaValue<float>(m_ptr, "CEnvVolumetricFogVolume", "m_fSunLightStrength");
}

void GCEnvVolumetricFogVolume::SetSunLightStrength(float value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogVolume", "m_fSunLightStrength", false, value);
}

float GCEnvVolumetricFogVolume::GetNoiseStrength() const {
    return GetSchemaValue<float>(m_ptr, "CEnvVolumetricFogVolume", "m_fNoiseStrength");
}

void GCEnvVolumetricFogVolume::SetNoiseStrength(float value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogVolume", "m_fNoiseStrength", false, value);
}

bool GCEnvVolumetricFogVolume::GetOverrideIndirectLightStrength() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvVolumetricFogVolume", "m_bOverrideIndirectLightStrength");
}

void GCEnvVolumetricFogVolume::SetOverrideIndirectLightStrength(bool value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogVolume", "m_bOverrideIndirectLightStrength", false, value);
}

bool GCEnvVolumetricFogVolume::GetOverrideSunLightStrength() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvVolumetricFogVolume", "m_bOverrideSunLightStrength");
}

void GCEnvVolumetricFogVolume::SetOverrideSunLightStrength(bool value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogVolume", "m_bOverrideSunLightStrength", false, value);
}

bool GCEnvVolumetricFogVolume::GetOverrideNoiseStrength() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvVolumetricFogVolume", "m_bOverrideNoiseStrength");
}

void GCEnvVolumetricFogVolume::SetOverrideNoiseStrength(bool value) {
    SetSchemaValue(m_ptr, "CEnvVolumetricFogVolume", "m_bOverrideNoiseStrength", false, value);
}

std::string GCEnvVolumetricFogVolume::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvVolumetricFogVolume::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvBeam::GCEnvBeam(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvBeam::GCEnvBeam(void *ptr) {
    m_ptr = ptr;
}

int32_t GCEnvBeam::GetActive() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvBeam", "m_active");
}

void GCEnvBeam::SetActive(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvBeam", "m_active", false, value);
}

CUtlSymbolLarge GCEnvBeam::GetStartEntity() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvBeam", "m_iszStartEntity");
}

void GCEnvBeam::SetStartEntity(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEnvBeam", "m_iszStartEntity", false, value);
}

CUtlSymbolLarge GCEnvBeam::GetEndEntity() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvBeam", "m_iszEndEntity");
}

void GCEnvBeam::SetEndEntity(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEnvBeam", "m_iszEndEntity", false, value);
}

float GCEnvBeam::GetLife() const {
    return GetSchemaValue<float>(m_ptr, "CEnvBeam", "m_life");
}

void GCEnvBeam::SetLife(float value) {
    SetSchemaValue(m_ptr, "CEnvBeam", "m_life", false, value);
}

float GCEnvBeam::GetBoltWidth() const {
    return GetSchemaValue<float>(m_ptr, "CEnvBeam", "m_boltWidth");
}

void GCEnvBeam::SetBoltWidth(float value) {
    SetSchemaValue(m_ptr, "CEnvBeam", "m_boltWidth", false, value);
}

float GCEnvBeam::GetNoiseAmplitude() const {
    return GetSchemaValue<float>(m_ptr, "CEnvBeam", "m_noiseAmplitude");
}

void GCEnvBeam::SetNoiseAmplitude(float value) {
    SetSchemaValue(m_ptr, "CEnvBeam", "m_noiseAmplitude", false, value);
}

int32_t GCEnvBeam::GetSpeed() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvBeam", "m_speed");
}

void GCEnvBeam::SetSpeed(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvBeam", "m_speed", false, value);
}

float GCEnvBeam::GetRestrike() const {
    return GetSchemaValue<float>(m_ptr, "CEnvBeam", "m_restrike");
}

void GCEnvBeam::SetRestrike(float value) {
    SetSchemaValue(m_ptr, "CEnvBeam", "m_restrike", false, value);
}

CUtlSymbolLarge GCEnvBeam::GetSpriteName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvBeam", "m_iszSpriteName");
}

void GCEnvBeam::SetSpriteName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEnvBeam", "m_iszSpriteName", false, value);
}

int32_t GCEnvBeam::GetFrameStart() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvBeam", "m_frameStart");
}

void GCEnvBeam::SetFrameStart(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvBeam", "m_frameStart", false, value);
}

Vector GCEnvBeam::GetEndPointWorld() const {
    return GetSchemaValue<Vector>(m_ptr, "CEnvBeam", "m_vEndPointWorld");
}

void GCEnvBeam::SetEndPointWorld(Vector value) {
    SetSchemaValue(m_ptr, "CEnvBeam", "m_vEndPointWorld", false, value);
}

Vector GCEnvBeam::GetEndPointRelative() const {
    return GetSchemaValue<Vector>(m_ptr, "CEnvBeam", "m_vEndPointRelative");
}

void GCEnvBeam::SetEndPointRelative(Vector value) {
    SetSchemaValue(m_ptr, "CEnvBeam", "m_vEndPointRelative", false, value);
}

float GCEnvBeam::GetRadius() const {
    return GetSchemaValue<float>(m_ptr, "CEnvBeam", "m_radius");
}

void GCEnvBeam::SetRadius(float value) {
    SetSchemaValue(m_ptr, "CEnvBeam", "m_radius", false, value);
}

Touch_t GCEnvBeam::GetTouchType() const {
    return GetSchemaValue<Touch_t>(m_ptr, "CEnvBeam", "m_TouchType");
}

void GCEnvBeam::SetTouchType(Touch_t value) {
    SetSchemaValue(m_ptr, "CEnvBeam", "m_TouchType", false, value);
}

CUtlSymbolLarge GCEnvBeam::GetFilterName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvBeam", "m_iFilterName");
}

void GCEnvBeam::SetFilterName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEnvBeam", "m_iFilterName", false, value);
}

GCBaseEntity GCEnvBeam::GetFilter() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CEnvBeam", "m_hFilter"));
    return value;
}

void GCEnvBeam::SetFilter(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Filter' is not possible.\n");
}

CUtlSymbolLarge GCEnvBeam::GetDecal() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvBeam", "m_iszDecal");
}

void GCEnvBeam::SetDecal(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEnvBeam", "m_iszDecal", false, value);
}

GCEntityIOOutput GCEnvBeam::GetOnTouchedByEntity() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CEnvBeam", "m_OnTouchedByEntity");
}

void GCEnvBeam::SetOnTouchedByEntity(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CEnvBeam", "m_OnTouchedByEntity", false, value);
}

std::string GCEnvBeam::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvBeam::IsValid() {
    return (m_ptr != nullptr);
}

GCFuncIllusionary::GCFuncIllusionary(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFuncIllusionary::GCFuncIllusionary(void *ptr) {
    m_ptr = ptr;
}

std::string GCFuncIllusionary::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFuncIllusionary::IsValid() {
    return (m_ptr != nullptr);
}

GCPhysMagnet::GCPhysMagnet(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPhysMagnet::GCPhysMagnet(void *ptr) {
    m_ptr = ptr;
}

GCEntityIOOutput GCPhysMagnet::GetOnMagnetAttach() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPhysMagnet", "m_OnMagnetAttach");
}

void GCPhysMagnet::SetOnMagnetAttach(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPhysMagnet", "m_OnMagnetAttach", false, value);
}

GCEntityIOOutput GCPhysMagnet::GetOnMagnetDetach() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPhysMagnet", "m_OnMagnetDetach");
}

void GCPhysMagnet::SetOnMagnetDetach(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPhysMagnet", "m_OnMagnetDetach", false, value);
}

float GCPhysMagnet::GetMassScale() const {
    return GetSchemaValue<float>(m_ptr, "CPhysMagnet", "m_massScale");
}

void GCPhysMagnet::SetMassScale(float value) {
    SetSchemaValue(m_ptr, "CPhysMagnet", "m_massScale", false, value);
}

float GCPhysMagnet::GetForceLimit() const {
    return GetSchemaValue<float>(m_ptr, "CPhysMagnet", "m_forceLimit");
}

void GCPhysMagnet::SetForceLimit(float value) {
    SetSchemaValue(m_ptr, "CPhysMagnet", "m_forceLimit", false, value);
}

float GCPhysMagnet::GetTorqueLimit() const {
    return GetSchemaValue<float>(m_ptr, "CPhysMagnet", "m_torqueLimit");
}

void GCPhysMagnet::SetTorqueLimit(float value) {
    SetSchemaValue(m_ptr, "CPhysMagnet", "m_torqueLimit", false, value);
}

std::vector<Gmagnetted_objects_t> GCPhysMagnet::GetMagnettedEntities() const {
    CUtlVector<Gmagnetted_objects_t>* vec = GetSchemaValue<CUtlVector<Gmagnetted_objects_t>*>(m_ptr, "CPhysMagnet", "m_MagnettedEntities"); std::vector<Gmagnetted_objects_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCPhysMagnet::SetMagnettedEntities(std::vector<Gmagnetted_objects_t> value) {
    SetSchemaValueCUtlVector<Gmagnetted_objects_t>(m_ptr, "CPhysMagnet", "m_MagnettedEntities", false, value);
}

bool GCPhysMagnet::GetActive() const {
    return GetSchemaValue<bool>(m_ptr, "CPhysMagnet", "m_bActive");
}

void GCPhysMagnet::SetActive(bool value) {
    SetSchemaValue(m_ptr, "CPhysMagnet", "m_bActive", false, value);
}

bool GCPhysMagnet::GetHasHitSomething() const {
    return GetSchemaValue<bool>(m_ptr, "CPhysMagnet", "m_bHasHitSomething");
}

void GCPhysMagnet::SetHasHitSomething(bool value) {
    SetSchemaValue(m_ptr, "CPhysMagnet", "m_bHasHitSomething", false, value);
}

float GCPhysMagnet::GetTotalMass() const {
    return GetSchemaValue<float>(m_ptr, "CPhysMagnet", "m_flTotalMass");
}

void GCPhysMagnet::SetTotalMass(float value) {
    SetSchemaValue(m_ptr, "CPhysMagnet", "m_flTotalMass", false, value);
}

float GCPhysMagnet::GetRadius() const {
    return GetSchemaValue<float>(m_ptr, "CPhysMagnet", "m_flRadius");
}

void GCPhysMagnet::SetRadius(float value) {
    SetSchemaValue(m_ptr, "CPhysMagnet", "m_flRadius", false, value);
}

int32_t GCPhysMagnet::GetMaxObjectsAttached() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPhysMagnet", "m_iMaxObjectsAttached");
}

void GCPhysMagnet::SetMaxObjectsAttached(int32_t value) {
    SetSchemaValue(m_ptr, "CPhysMagnet", "m_iMaxObjectsAttached", false, value);
}

std::string GCPhysMagnet::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPhysMagnet::IsValid() {
    return (m_ptr != nullptr);
}

GCSceneEntityAlias_logic_choreographed_scene::GCSceneEntityAlias_logic_choreographed_scene(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSceneEntityAlias_logic_choreographed_scene::GCSceneEntityAlias_logic_choreographed_scene(void *ptr) {
    m_ptr = ptr;
}

std::string GCSceneEntityAlias_logic_choreographed_scene::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSceneEntityAlias_logic_choreographed_scene::IsValid() {
    return (m_ptr != nullptr);
}

GCFuncNavBlocker::GCFuncNavBlocker(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFuncNavBlocker::GCFuncNavBlocker(void *ptr) {
    m_ptr = ptr;
}

bool GCFuncNavBlocker::GetDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CFuncNavBlocker", "m_bDisabled");
}

void GCFuncNavBlocker::SetDisabled(bool value) {
    SetSchemaValue(m_ptr, "CFuncNavBlocker", "m_bDisabled", false, value);
}

int32_t GCFuncNavBlocker::GetBlockedTeamNumber() const {
    return GetSchemaValue<int32_t>(m_ptr, "CFuncNavBlocker", "m_nBlockedTeamNumber");
}

void GCFuncNavBlocker::SetBlockedTeamNumber(int32_t value) {
    SetSchemaValue(m_ptr, "CFuncNavBlocker", "m_nBlockedTeamNumber", false, value);
}

std::string GCFuncNavBlocker::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFuncNavBlocker::IsValid() {
    return (m_ptr != nullptr);
}

GCRagdollMagnet::GCRagdollMagnet(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCRagdollMagnet::GCRagdollMagnet(void *ptr) {
    m_ptr = ptr;
}

bool GCRagdollMagnet::GetDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CRagdollMagnet", "m_bDisabled");
}

void GCRagdollMagnet::SetDisabled(bool value) {
    SetSchemaValue(m_ptr, "CRagdollMagnet", "m_bDisabled", false, value);
}

float GCRagdollMagnet::GetRadius() const {
    return GetSchemaValue<float>(m_ptr, "CRagdollMagnet", "m_radius");
}

void GCRagdollMagnet::SetRadius(float value) {
    SetSchemaValue(m_ptr, "CRagdollMagnet", "m_radius", false, value);
}

float GCRagdollMagnet::GetForce() const {
    return GetSchemaValue<float>(m_ptr, "CRagdollMagnet", "m_force");
}

void GCRagdollMagnet::SetForce(float value) {
    SetSchemaValue(m_ptr, "CRagdollMagnet", "m_force", false, value);
}

Vector GCRagdollMagnet::GetAxis() const {
    return GetSchemaValue<Vector>(m_ptr, "CRagdollMagnet", "m_axis");
}

void GCRagdollMagnet::SetAxis(Vector value) {
    SetSchemaValue(m_ptr, "CRagdollMagnet", "m_axis", false, value);
}

std::string GCRagdollMagnet::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCRagdollMagnet::IsValid() {
    return (m_ptr != nullptr);
}

GCFuncElectrifiedVolume::GCFuncElectrifiedVolume(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFuncElectrifiedVolume::GCFuncElectrifiedVolume(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCFuncElectrifiedVolume::GetEffectName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncElectrifiedVolume", "m_EffectName");
}

void GCFuncElectrifiedVolume::SetEffectName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFuncElectrifiedVolume", "m_EffectName", false, value);
}

CUtlSymbolLarge GCFuncElectrifiedVolume::GetEffectInterpenetrateName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncElectrifiedVolume", "m_EffectInterpenetrateName");
}

void GCFuncElectrifiedVolume::SetEffectInterpenetrateName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFuncElectrifiedVolume", "m_EffectInterpenetrateName", false, value);
}

CUtlSymbolLarge GCFuncElectrifiedVolume::GetEffectZapName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncElectrifiedVolume", "m_EffectZapName");
}

void GCFuncElectrifiedVolume::SetEffectZapName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFuncElectrifiedVolume", "m_EffectZapName", false, value);
}

CUtlSymbolLarge GCFuncElectrifiedVolume::GetEffectSource() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncElectrifiedVolume", "m_iszEffectSource");
}

void GCFuncElectrifiedVolume::SetEffectSource(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFuncElectrifiedVolume", "m_iszEffectSource", false, value);
}

std::string GCFuncElectrifiedVolume::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFuncElectrifiedVolume::IsValid() {
    return (m_ptr != nullptr);
}

GCPointProximitySensor::GCPointProximitySensor(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPointProximitySensor::GCPointProximitySensor(void *ptr) {
    m_ptr = ptr;
}

bool GCPointProximitySensor::GetDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CPointProximitySensor", "m_bDisabled");
}

void GCPointProximitySensor::SetDisabled(bool value) {
    SetSchemaValue(m_ptr, "CPointProximitySensor", "m_bDisabled", false, value);
}

GCBaseEntity GCPointProximitySensor::GetTargetEntity() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CPointProximitySensor", "m_hTargetEntity"));
    return value;
}

void GCPointProximitySensor::SetTargetEntity(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'TargetEntity' is not possible.\n");
}

std::string GCPointProximitySensor::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPointProximitySensor::IsValid() {
    return (m_ptr != nullptr);
}

GWeaponPurchaseTracker_t::GWeaponPurchaseTracker_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GWeaponPurchaseTracker_t::GWeaponPurchaseTracker_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<GWeaponPurchaseCount_t> GWeaponPurchaseTracker_t::GetWeaponPurchases() const {
    CUtlVector<GWeaponPurchaseCount_t>* vec = GetSchemaValue<CUtlVector<GWeaponPurchaseCount_t>*>(m_ptr, "WeaponPurchaseTracker_t", "m_weaponPurchases"); std::vector<GWeaponPurchaseCount_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GWeaponPurchaseTracker_t::SetWeaponPurchases(std::vector<GWeaponPurchaseCount_t> value) {
    SetSchemaValueCUtlVector<GWeaponPurchaseCount_t>(m_ptr, "WeaponPurchaseTracker_t", "m_weaponPurchases", true, value);
}

std::string GWeaponPurchaseTracker_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GWeaponPurchaseTracker_t::IsValid() {
    return (m_ptr != nullptr);
}

GCFilterClass::GCFilterClass(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFilterClass::GCFilterClass(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCFilterClass::GetFilterClass() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFilterClass", "m_iFilterClass");
}

void GCFilterClass::SetFilterClass(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFilterClass", "m_iFilterClass", false, value);
}

std::string GCFilterClass::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFilterClass::IsValid() {
    return (m_ptr != nullptr);
}

GCMelee::GCMelee(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMelee::GCMelee(void *ptr) {
    m_ptr = ptr;
}

std::string GCMelee::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMelee::IsValid() {
    return (m_ptr != nullptr);
}

GCMultiplayRules::GCMultiplayRules(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMultiplayRules::GCMultiplayRules(void *ptr) {
    m_ptr = ptr;
}

std::string GCMultiplayRules::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMultiplayRules::IsValid() {
    return (m_ptr != nullptr);
}

GCFilterLOS::GCFilterLOS(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFilterLOS::GCFilterLOS(void *ptr) {
    m_ptr = ptr;
}

std::string GCFilterLOS::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFilterLOS::IsValid() {
    return (m_ptr != nullptr);
}

GEngineCountdownTimer::GEngineCountdownTimer(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEngineCountdownTimer::GEngineCountdownTimer(void *ptr) {
    m_ptr = ptr;
}

float GEngineCountdownTimer::GetDuration() const {
    return GetSchemaValue<float>(m_ptr, "EngineCountdownTimer", "m_duration");
}

void GEngineCountdownTimer::SetDuration(float value) {
    SetSchemaValue(m_ptr, "EngineCountdownTimer", "m_duration", false, value);
}

float GEngineCountdownTimer::GetTimestamp() const {
    return GetSchemaValue<float>(m_ptr, "EngineCountdownTimer", "m_timestamp");
}

void GEngineCountdownTimer::SetTimestamp(float value) {
    SetSchemaValue(m_ptr, "EngineCountdownTimer", "m_timestamp", false, value);
}

float GEngineCountdownTimer::GetTimescale() const {
    return GetSchemaValue<float>(m_ptr, "EngineCountdownTimer", "m_timescale");
}

void GEngineCountdownTimer::SetTimescale(float value) {
    SetSchemaValue(m_ptr, "EngineCountdownTimer", "m_timescale", false, value);
}

std::string GEngineCountdownTimer::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEngineCountdownTimer::IsValid() {
    return (m_ptr != nullptr);
}

GCPhysBox::GCPhysBox(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPhysBox::GCPhysBox(void *ptr) {
    m_ptr = ptr;
}

int32_t GCPhysBox::GetDamageType() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPhysBox", "m_damageType");
}

void GCPhysBox::SetDamageType(int32_t value) {
    SetSchemaValue(m_ptr, "CPhysBox", "m_damageType", false, value);
}

float GCPhysBox::GetMassScale() const {
    return GetSchemaValue<float>(m_ptr, "CPhysBox", "m_massScale");
}

void GCPhysBox::SetMassScale(float value) {
    SetSchemaValue(m_ptr, "CPhysBox", "m_massScale", false, value);
}

int32_t GCPhysBox::GetDamageToEnableMotion() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPhysBox", "m_damageToEnableMotion");
}

void GCPhysBox::SetDamageToEnableMotion(int32_t value) {
    SetSchemaValue(m_ptr, "CPhysBox", "m_damageToEnableMotion", false, value);
}

float GCPhysBox::GetForceToEnableMotion() const {
    return GetSchemaValue<float>(m_ptr, "CPhysBox", "m_flForceToEnableMotion");
}

void GCPhysBox::SetForceToEnableMotion(float value) {
    SetSchemaValue(m_ptr, "CPhysBox", "m_flForceToEnableMotion", false, value);
}

QAngle GCPhysBox::GetPreferredCarryAngles() const {
    return GetSchemaValue<QAngle>(m_ptr, "CPhysBox", "m_angPreferredCarryAngles");
}

void GCPhysBox::SetPreferredCarryAngles(QAngle value) {
    SetSchemaValue(m_ptr, "CPhysBox", "m_angPreferredCarryAngles", false, value);
}

bool GCPhysBox::GetNotSolidToWorld() const {
    return GetSchemaValue<bool>(m_ptr, "CPhysBox", "m_bNotSolidToWorld");
}

void GCPhysBox::SetNotSolidToWorld(bool value) {
    SetSchemaValue(m_ptr, "CPhysBox", "m_bNotSolidToWorld", false, value);
}

bool GCPhysBox::GetEnableUseOutput() const {
    return GetSchemaValue<bool>(m_ptr, "CPhysBox", "m_bEnableUseOutput");
}

void GCPhysBox::SetEnableUseOutput(bool value) {
    SetSchemaValue(m_ptr, "CPhysBox", "m_bEnableUseOutput", false, value);
}

int32_t GCPhysBox::GetExploitableByPlayer() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPhysBox", "m_iExploitableByPlayer");
}

void GCPhysBox::SetExploitableByPlayer(int32_t value) {
    SetSchemaValue(m_ptr, "CPhysBox", "m_iExploitableByPlayer", false, value);
}

float GCPhysBox::GetTouchOutputPerEntityDelay() const {
    return GetSchemaValue<float>(m_ptr, "CPhysBox", "m_flTouchOutputPerEntityDelay");
}

void GCPhysBox::SetTouchOutputPerEntityDelay(float value) {
    SetSchemaValue(m_ptr, "CPhysBox", "m_flTouchOutputPerEntityDelay", false, value);
}

GCEntityIOOutput GCPhysBox::GetOnDamaged() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPhysBox", "m_OnDamaged");
}

void GCPhysBox::SetOnDamaged(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPhysBox", "m_OnDamaged", false, value);
}

GCEntityIOOutput GCPhysBox::GetOnAwakened() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPhysBox", "m_OnAwakened");
}

void GCPhysBox::SetOnAwakened(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPhysBox", "m_OnAwakened", false, value);
}

GCEntityIOOutput GCPhysBox::GetOnMotionEnabled() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPhysBox", "m_OnMotionEnabled");
}

void GCPhysBox::SetOnMotionEnabled(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPhysBox", "m_OnMotionEnabled", false, value);
}

GCEntityIOOutput GCPhysBox::GetOnPlayerUse() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPhysBox", "m_OnPlayerUse");
}

void GCPhysBox::SetOnPlayerUse(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPhysBox", "m_OnPlayerUse", false, value);
}

GCEntityIOOutput GCPhysBox::GetOnStartTouch() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPhysBox", "m_OnStartTouch");
}

void GCPhysBox::SetOnStartTouch(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPhysBox", "m_OnStartTouch", false, value);
}

GCBasePlayerPawn GCPhysBox::GetCarryingPlayer() const {
    GCBasePlayerPawn value(GetSchemaValuePtr<void>(m_ptr, "CPhysBox", "m_hCarryingPlayer"));
    return value;
}

void GCPhysBox::SetCarryingPlayer(GCBasePlayerPawn* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'CarryingPlayer' is not possible.\n");
}

std::string GCPhysBox::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPhysBox::IsValid() {
    return (m_ptr != nullptr);
}

GCSensorGrenadeProjectile::GCSensorGrenadeProjectile(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSensorGrenadeProjectile::GCSensorGrenadeProjectile(void *ptr) {
    m_ptr = ptr;
}

GCBaseEntity GCSensorGrenadeProjectile::GetDisplayGrenade() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CSensorGrenadeProjectile", "m_hDisplayGrenade"));
    return value;
}

void GCSensorGrenadeProjectile::SetDisplayGrenade(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'DisplayGrenade' is not possible.\n");
}

std::string GCSensorGrenadeProjectile::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSensorGrenadeProjectile::IsValid() {
    return (m_ptr != nullptr);
}

GCTimerEntity::GCTimerEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTimerEntity::GCTimerEntity(void *ptr) {
    m_ptr = ptr;
}

GCEntityIOOutput GCTimerEntity::GetOnTimer() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CTimerEntity", "m_OnTimer");
}

void GCTimerEntity::SetOnTimer(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CTimerEntity", "m_OnTimer", false, value);
}

GCEntityIOOutput GCTimerEntity::GetOnTimerHigh() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CTimerEntity", "m_OnTimerHigh");
}

void GCTimerEntity::SetOnTimerHigh(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CTimerEntity", "m_OnTimerHigh", false, value);
}

GCEntityIOOutput GCTimerEntity::GetOnTimerLow() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CTimerEntity", "m_OnTimerLow");
}

void GCTimerEntity::SetOnTimerLow(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CTimerEntity", "m_OnTimerLow", false, value);
}

int32_t GCTimerEntity::GetDisabled() const {
    return GetSchemaValue<int32_t>(m_ptr, "CTimerEntity", "m_iDisabled");
}

void GCTimerEntity::SetDisabled(int32_t value) {
    SetSchemaValue(m_ptr, "CTimerEntity", "m_iDisabled", false, value);
}

float GCTimerEntity::GetInitialDelay() const {
    return GetSchemaValue<float>(m_ptr, "CTimerEntity", "m_flInitialDelay");
}

void GCTimerEntity::SetInitialDelay(float value) {
    SetSchemaValue(m_ptr, "CTimerEntity", "m_flInitialDelay", false, value);
}

float GCTimerEntity::GetRefireTime() const {
    return GetSchemaValue<float>(m_ptr, "CTimerEntity", "m_flRefireTime");
}

void GCTimerEntity::SetRefireTime(float value) {
    SetSchemaValue(m_ptr, "CTimerEntity", "m_flRefireTime", false, value);
}

bool GCTimerEntity::GetUpDownState() const {
    return GetSchemaValue<bool>(m_ptr, "CTimerEntity", "m_bUpDownState");
}

void GCTimerEntity::SetUpDownState(bool value) {
    SetSchemaValue(m_ptr, "CTimerEntity", "m_bUpDownState", false, value);
}

int32_t GCTimerEntity::GetUseRandomTime() const {
    return GetSchemaValue<int32_t>(m_ptr, "CTimerEntity", "m_iUseRandomTime");
}

void GCTimerEntity::SetUseRandomTime(int32_t value) {
    SetSchemaValue(m_ptr, "CTimerEntity", "m_iUseRandomTime", false, value);
}

bool GCTimerEntity::GetPauseAfterFiring() const {
    return GetSchemaValue<bool>(m_ptr, "CTimerEntity", "m_bPauseAfterFiring");
}

void GCTimerEntity::SetPauseAfterFiring(bool value) {
    SetSchemaValue(m_ptr, "CTimerEntity", "m_bPauseAfterFiring", false, value);
}

float GCTimerEntity::GetLowerRandomBound() const {
    return GetSchemaValue<float>(m_ptr, "CTimerEntity", "m_flLowerRandomBound");
}

void GCTimerEntity::SetLowerRandomBound(float value) {
    SetSchemaValue(m_ptr, "CTimerEntity", "m_flLowerRandomBound", false, value);
}

float GCTimerEntity::GetUpperRandomBound() const {
    return GetSchemaValue<float>(m_ptr, "CTimerEntity", "m_flUpperRandomBound");
}

void GCTimerEntity::SetUpperRandomBound(float value) {
    SetSchemaValue(m_ptr, "CTimerEntity", "m_flUpperRandomBound", false, value);
}

float GCTimerEntity::GetRemainingTime() const {
    return GetSchemaValue<float>(m_ptr, "CTimerEntity", "m_flRemainingTime");
}

void GCTimerEntity::SetRemainingTime(float value) {
    SetSchemaValue(m_ptr, "CTimerEntity", "m_flRemainingTime", false, value);
}

bool GCTimerEntity::GetPaused() const {
    return GetSchemaValue<bool>(m_ptr, "CTimerEntity", "m_bPaused");
}

void GCTimerEntity::SetPaused(bool value) {
    SetSchemaValue(m_ptr, "CTimerEntity", "m_bPaused", false, value);
}

std::string GCTimerEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTimerEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCCSGO_TeamIntroCounterTerroristPosition::GCCSGO_TeamIntroCounterTerroristPosition(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSGO_TeamIntroCounterTerroristPosition::GCCSGO_TeamIntroCounterTerroristPosition(void *ptr) {
    m_ptr = ptr;
}

std::string GCCSGO_TeamIntroCounterTerroristPosition::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSGO_TeamIntroCounterTerroristPosition::IsValid() {
    return (m_ptr != nullptr);
}

GCHEGrenadeProjectile::GCHEGrenadeProjectile(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCHEGrenadeProjectile::GCHEGrenadeProjectile(void *ptr) {
    m_ptr = ptr;
}

std::string GCHEGrenadeProjectile::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCHEGrenadeProjectile::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvWind::GCEnvWind(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvWind::GCEnvWind(void *ptr) {
    m_ptr = ptr;
}

GCEnvWindShared GCEnvWind::GetEnvWindShared() const {
    return GetSchemaValue<GCEnvWindShared>(m_ptr, "CEnvWind", "m_EnvWindShared");
}

void GCEnvWind::SetEnvWindShared(GCEnvWindShared value) {
    SetSchemaValue(m_ptr, "CEnvWind", "m_EnvWindShared", false, value);
}

std::string GCEnvWind::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvWind::IsValid() {
    return (m_ptr != nullptr);
}

GCTimeline::GCTimeline(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTimeline::GCTimeline(void *ptr) {
    m_ptr = ptr;
}

std::vector<float> GCTimeline::GetValues() const {
    float* outValue = GetSchemaValue<float*>(m_ptr, "CTimeline", "m_flValues"); std::vector<float> ret; for(int i = 0; i < 64; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCTimeline::SetValues(std::vector<float> value) {
    float* outValue = GetSchemaValue<float*>(m_ptr, "CTimeline", "m_flValues"); for(int i = 0; i < 64; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CTimeline", "m_flValues", false, outValue);
}

std::vector<int32_t> GCTimeline::GetValueCounts() const {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CTimeline", "m_nValueCounts"); std::vector<int32_t> ret; for(int i = 0; i < 64; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCTimeline::SetValueCounts(std::vector<int32_t> value) {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CTimeline", "m_nValueCounts"); for(int i = 0; i < 64; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CTimeline", "m_nValueCounts", false, outValue);
}

int32_t GCTimeline::GetBucketCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CTimeline", "m_nBucketCount");
}

void GCTimeline::SetBucketCount(int32_t value) {
    SetSchemaValue(m_ptr, "CTimeline", "m_nBucketCount", false, value);
}

float GCTimeline::GetInterval() const {
    return GetSchemaValue<float>(m_ptr, "CTimeline", "m_flInterval");
}

void GCTimeline::SetInterval(float value) {
    SetSchemaValue(m_ptr, "CTimeline", "m_flInterval", false, value);
}

float GCTimeline::GetFinalValue() const {
    return GetSchemaValue<float>(m_ptr, "CTimeline", "m_flFinalValue");
}

void GCTimeline::SetFinalValue(float value) {
    SetSchemaValue(m_ptr, "CTimeline", "m_flFinalValue", false, value);
}

TimelineCompression_t GCTimeline::GetCompressionType() const {
    return GetSchemaValue<TimelineCompression_t>(m_ptr, "CTimeline", "m_nCompressionType");
}

void GCTimeline::SetCompressionType(TimelineCompression_t value) {
    SetSchemaValue(m_ptr, "CTimeline", "m_nCompressionType", false, value);
}

bool GCTimeline::GetStopped() const {
    return GetSchemaValue<bool>(m_ptr, "CTimeline", "m_bStopped");
}

void GCTimeline::SetStopped(bool value) {
    SetSchemaValue(m_ptr, "CTimeline", "m_bStopped", false, value);
}

std::string GCTimeline::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTimeline::IsValid() {
    return (m_ptr != nullptr);
}

GCFists::GCFists(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFists::GCFists(void *ptr) {
    m_ptr = ptr;
}

bool GCFists::GetPlayingUninterruptableAct() const {
    return GetSchemaValue<bool>(m_ptr, "CFists", "m_bPlayingUninterruptableAct");
}

void GCFists::SetPlayingUninterruptableAct(bool value) {
    SetSchemaValue(m_ptr, "CFists", "m_bPlayingUninterruptableAct", false, value);
}

PlayerAnimEvent_t GCFists::GetUninterruptableActivity() const {
    return GetSchemaValue<PlayerAnimEvent_t>(m_ptr, "CFists", "m_nUninterruptableActivity");
}

void GCFists::SetUninterruptableActivity(PlayerAnimEvent_t value) {
    SetSchemaValue(m_ptr, "CFists", "m_nUninterruptableActivity", false, value);
}

bool GCFists::GetRestorePrevWep() const {
    return GetSchemaValue<bool>(m_ptr, "CFists", "m_bRestorePrevWep");
}

void GCFists::SetRestorePrevWep(bool value) {
    SetSchemaValue(m_ptr, "CFists", "m_bRestorePrevWep", false, value);
}

GCBasePlayerWeapon GCFists::GetWeaponBeforePrevious() const {
    GCBasePlayerWeapon value(GetSchemaValuePtr<void>(m_ptr, "CFists", "m_hWeaponBeforePrevious"));
    return value;
}

void GCFists::SetWeaponBeforePrevious(GCBasePlayerWeapon* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'WeaponBeforePrevious' is not possible.\n");
}

GCBasePlayerWeapon GCFists::GetWeaponPrevious() const {
    GCBasePlayerWeapon value(GetSchemaValuePtr<void>(m_ptr, "CFists", "m_hWeaponPrevious"));
    return value;
}

void GCFists::SetWeaponPrevious(GCBasePlayerWeapon* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'WeaponPrevious' is not possible.\n");
}

bool GCFists::GetDelayedHardPunchIncoming() const {
    return GetSchemaValue<bool>(m_ptr, "CFists", "m_bDelayedHardPunchIncoming");
}

void GCFists::SetDelayedHardPunchIncoming(bool value) {
    SetSchemaValue(m_ptr, "CFists", "m_bDelayedHardPunchIncoming", false, value);
}

bool GCFists::GetDestroyAfterTaunt() const {
    return GetSchemaValue<bool>(m_ptr, "CFists", "m_bDestroyAfterTaunt");
}

void GCFists::SetDestroyAfterTaunt(bool value) {
    SetSchemaValue(m_ptr, "CFists", "m_bDestroyAfterTaunt", false, value);
}

std::string GCFists::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFists::IsValid() {
    return (m_ptr != nullptr);
}

GCHandleDummy::GCHandleDummy(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCHandleDummy::GCHandleDummy(void *ptr) {
    m_ptr = ptr;
}

std::string GCHandleDummy::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCHandleDummy::IsValid() {
    return (m_ptr != nullptr);
}

GCRagdollConstraint::GCRagdollConstraint(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCRagdollConstraint::GCRagdollConstraint(void *ptr) {
    m_ptr = ptr;
}

float GCRagdollConstraint::GetXmin() const {
    return GetSchemaValue<float>(m_ptr, "CRagdollConstraint", "m_xmin");
}

void GCRagdollConstraint::SetXmin(float value) {
    SetSchemaValue(m_ptr, "CRagdollConstraint", "m_xmin", false, value);
}

float GCRagdollConstraint::GetXmax() const {
    return GetSchemaValue<float>(m_ptr, "CRagdollConstraint", "m_xmax");
}

void GCRagdollConstraint::SetXmax(float value) {
    SetSchemaValue(m_ptr, "CRagdollConstraint", "m_xmax", false, value);
}

float GCRagdollConstraint::GetYmin() const {
    return GetSchemaValue<float>(m_ptr, "CRagdollConstraint", "m_ymin");
}

void GCRagdollConstraint::SetYmin(float value) {
    SetSchemaValue(m_ptr, "CRagdollConstraint", "m_ymin", false, value);
}

float GCRagdollConstraint::GetYmax() const {
    return GetSchemaValue<float>(m_ptr, "CRagdollConstraint", "m_ymax");
}

void GCRagdollConstraint::SetYmax(float value) {
    SetSchemaValue(m_ptr, "CRagdollConstraint", "m_ymax", false, value);
}

float GCRagdollConstraint::GetZmin() const {
    return GetSchemaValue<float>(m_ptr, "CRagdollConstraint", "m_zmin");
}

void GCRagdollConstraint::SetZmin(float value) {
    SetSchemaValue(m_ptr, "CRagdollConstraint", "m_zmin", false, value);
}

float GCRagdollConstraint::GetZmax() const {
    return GetSchemaValue<float>(m_ptr, "CRagdollConstraint", "m_zmax");
}

void GCRagdollConstraint::SetZmax(float value) {
    SetSchemaValue(m_ptr, "CRagdollConstraint", "m_zmax", false, value);
}

float GCRagdollConstraint::GetXfriction() const {
    return GetSchemaValue<float>(m_ptr, "CRagdollConstraint", "m_xfriction");
}

void GCRagdollConstraint::SetXfriction(float value) {
    SetSchemaValue(m_ptr, "CRagdollConstraint", "m_xfriction", false, value);
}

float GCRagdollConstraint::GetYfriction() const {
    return GetSchemaValue<float>(m_ptr, "CRagdollConstraint", "m_yfriction");
}

void GCRagdollConstraint::SetYfriction(float value) {
    SetSchemaValue(m_ptr, "CRagdollConstraint", "m_yfriction", false, value);
}

float GCRagdollConstraint::GetZfriction() const {
    return GetSchemaValue<float>(m_ptr, "CRagdollConstraint", "m_zfriction");
}

void GCRagdollConstraint::SetZfriction(float value) {
    SetSchemaValue(m_ptr, "CRagdollConstraint", "m_zfriction", false, value);
}

std::string GCRagdollConstraint::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCRagdollConstraint::IsValid() {
    return (m_ptr != nullptr);
}

GCPhysExplosion::GCPhysExplosion(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPhysExplosion::GCPhysExplosion(void *ptr) {
    m_ptr = ptr;
}

bool GCPhysExplosion::GetExplodeOnSpawn() const {
    return GetSchemaValue<bool>(m_ptr, "CPhysExplosion", "m_bExplodeOnSpawn");
}

void GCPhysExplosion::SetExplodeOnSpawn(bool value) {
    SetSchemaValue(m_ptr, "CPhysExplosion", "m_bExplodeOnSpawn", false, value);
}

float GCPhysExplosion::GetMagnitude() const {
    return GetSchemaValue<float>(m_ptr, "CPhysExplosion", "m_flMagnitude");
}

void GCPhysExplosion::SetMagnitude(float value) {
    SetSchemaValue(m_ptr, "CPhysExplosion", "m_flMagnitude", false, value);
}

float GCPhysExplosion::GetDamage() const {
    return GetSchemaValue<float>(m_ptr, "CPhysExplosion", "m_flDamage");
}

void GCPhysExplosion::SetDamage(float value) {
    SetSchemaValue(m_ptr, "CPhysExplosion", "m_flDamage", false, value);
}

float GCPhysExplosion::GetRadius() const {
    return GetSchemaValue<float>(m_ptr, "CPhysExplosion", "m_radius");
}

void GCPhysExplosion::SetRadius(float value) {
    SetSchemaValue(m_ptr, "CPhysExplosion", "m_radius", false, value);
}

CUtlSymbolLarge GCPhysExplosion::GetTargetEntityName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPhysExplosion", "m_targetEntityName");
}

void GCPhysExplosion::SetTargetEntityName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPhysExplosion", "m_targetEntityName", false, value);
}

float GCPhysExplosion::GetInnerRadius() const {
    return GetSchemaValue<float>(m_ptr, "CPhysExplosion", "m_flInnerRadius");
}

void GCPhysExplosion::SetInnerRadius(float value) {
    SetSchemaValue(m_ptr, "CPhysExplosion", "m_flInnerRadius", false, value);
}

float GCPhysExplosion::GetPushScale() const {
    return GetSchemaValue<float>(m_ptr, "CPhysExplosion", "m_flPushScale");
}

void GCPhysExplosion::SetPushScale(float value) {
    SetSchemaValue(m_ptr, "CPhysExplosion", "m_flPushScale", false, value);
}

bool GCPhysExplosion::GetConvertToDebrisWhenPossible() const {
    return GetSchemaValue<bool>(m_ptr, "CPhysExplosion", "m_bConvertToDebrisWhenPossible");
}

void GCPhysExplosion::SetConvertToDebrisWhenPossible(bool value) {
    SetSchemaValue(m_ptr, "CPhysExplosion", "m_bConvertToDebrisWhenPossible", false, value);
}

GCEntityIOOutput GCPhysExplosion::GetOnPushedPlayer() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPhysExplosion", "m_OnPushedPlayer");
}

void GCPhysExplosion::SetOnPushedPlayer(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPhysExplosion", "m_OnPushedPlayer", false, value);
}

std::string GCPhysExplosion::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPhysExplosion::IsValid() {
    return (m_ptr != nullptr);
}

GCPointPush::GCPointPush(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPointPush::GCPointPush(void *ptr) {
    m_ptr = ptr;
}

bool GCPointPush::GetEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CPointPush", "m_bEnabled");
}

void GCPointPush::SetEnabled(bool value) {
    SetSchemaValue(m_ptr, "CPointPush", "m_bEnabled", false, value);
}

float GCPointPush::GetMagnitude() const {
    return GetSchemaValue<float>(m_ptr, "CPointPush", "m_flMagnitude");
}

void GCPointPush::SetMagnitude(float value) {
    SetSchemaValue(m_ptr, "CPointPush", "m_flMagnitude", false, value);
}

float GCPointPush::GetRadius() const {
    return GetSchemaValue<float>(m_ptr, "CPointPush", "m_flRadius");
}

void GCPointPush::SetRadius(float value) {
    SetSchemaValue(m_ptr, "CPointPush", "m_flRadius", false, value);
}

float GCPointPush::GetInnerRadius() const {
    return GetSchemaValue<float>(m_ptr, "CPointPush", "m_flInnerRadius");
}

void GCPointPush::SetInnerRadius(float value) {
    SetSchemaValue(m_ptr, "CPointPush", "m_flInnerRadius", false, value);
}

float GCPointPush::GetConeOfInfluence() const {
    return GetSchemaValue<float>(m_ptr, "CPointPush", "m_flConeOfInfluence");
}

void GCPointPush::SetConeOfInfluence(float value) {
    SetSchemaValue(m_ptr, "CPointPush", "m_flConeOfInfluence", false, value);
}

CUtlSymbolLarge GCPointPush::GetFilterName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPointPush", "m_iszFilterName");
}

void GCPointPush::SetFilterName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPointPush", "m_iszFilterName", false, value);
}

GCBaseFilter GCPointPush::GetFilter() const {
    GCBaseFilter value(GetSchemaValuePtr<void>(m_ptr, "CPointPush", "m_hFilter"));
    return value;
}

void GCPointPush::SetFilter(GCBaseFilter* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Filter' is not possible.\n");
}

std::string GCPointPush::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPointPush::IsValid() {
    return (m_ptr != nullptr);
}

GCCredits::GCCredits(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCredits::GCCredits(void *ptr) {
    m_ptr = ptr;
}

GCEntityIOOutput GCCredits::GetOnCreditsDone() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CCredits", "m_OnCreditsDone");
}

void GCCredits::SetOnCreditsDone(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CCredits", "m_OnCreditsDone", false, value);
}

bool GCCredits::GetRolledOutroCredits() const {
    return GetSchemaValue<bool>(m_ptr, "CCredits", "m_bRolledOutroCredits");
}

void GCCredits::SetRolledOutroCredits(bool value) {
    SetSchemaValue(m_ptr, "CCredits", "m_bRolledOutroCredits", false, value);
}

float GCCredits::GetLogoLength() const {
    return GetSchemaValue<float>(m_ptr, "CCredits", "m_flLogoLength");
}

void GCCredits::SetLogoLength(float value) {
    SetSchemaValue(m_ptr, "CCredits", "m_flLogoLength", false, value);
}

std::string GCCredits::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCredits::IsValid() {
    return (m_ptr != nullptr);
}

GCCSPlayerResource::GCCSPlayerResource(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSPlayerResource::GCCSPlayerResource(void *ptr) {
    m_ptr = ptr;
}

std::vector<bool> GCCSPlayerResource::GetHostageAlive() const {
    bool* outValue = GetSchemaValue<bool*>(m_ptr, "CCSPlayerResource", "m_bHostageAlive"); std::vector<bool> ret; for(int i = 0; i < 12; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCCSPlayerResource::SetHostageAlive(std::vector<bool> value) {
    bool* outValue = GetSchemaValue<bool*>(m_ptr, "CCSPlayerResource", "m_bHostageAlive"); for(int i = 0; i < 12; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CCSPlayerResource", "m_bHostageAlive", false, outValue);
}

std::vector<bool> GCCSPlayerResource::GetIsHostageFollowingSomeone() const {
    bool* outValue = GetSchemaValue<bool*>(m_ptr, "CCSPlayerResource", "m_isHostageFollowingSomeone"); std::vector<bool> ret; for(int i = 0; i < 12; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCCSPlayerResource::SetIsHostageFollowingSomeone(std::vector<bool> value) {
    bool* outValue = GetSchemaValue<bool*>(m_ptr, "CCSPlayerResource", "m_isHostageFollowingSomeone"); for(int i = 0; i < 12; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CCSPlayerResource", "m_isHostageFollowingSomeone", false, outValue);
}

std::vector<CEntityIndex> GCCSPlayerResource::GetHostageEntityIDs() const {
    CEntityIndex* outValue = GetSchemaValue<CEntityIndex*>(m_ptr, "CCSPlayerResource", "m_iHostageEntityIDs"); std::vector<CEntityIndex> ret; for(int i = 0; i < 12; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCCSPlayerResource::SetHostageEntityIDs(std::vector<CEntityIndex> value) {
    CEntityIndex* outValue = GetSchemaValue<CEntityIndex*>(m_ptr, "CCSPlayerResource", "m_iHostageEntityIDs"); for(int i = 0; i < 12; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CCSPlayerResource", "m_iHostageEntityIDs", false, outValue);
}

Vector GCCSPlayerResource::GetBombsiteCenterA() const {
    return GetSchemaValue<Vector>(m_ptr, "CCSPlayerResource", "m_bombsiteCenterA");
}

void GCCSPlayerResource::SetBombsiteCenterA(Vector value) {
    SetSchemaValue(m_ptr, "CCSPlayerResource", "m_bombsiteCenterA", false, value);
}

Vector GCCSPlayerResource::GetBombsiteCenterB() const {
    return GetSchemaValue<Vector>(m_ptr, "CCSPlayerResource", "m_bombsiteCenterB");
}

void GCCSPlayerResource::SetBombsiteCenterB(Vector value) {
    SetSchemaValue(m_ptr, "CCSPlayerResource", "m_bombsiteCenterB", false, value);
}

std::vector<int32_t> GCCSPlayerResource::GetHostageRescueX() const {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CCSPlayerResource", "m_hostageRescueX"); std::vector<int32_t> ret; for(int i = 0; i < 4; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCCSPlayerResource::SetHostageRescueX(std::vector<int32_t> value) {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CCSPlayerResource", "m_hostageRescueX"); for(int i = 0; i < 4; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CCSPlayerResource", "m_hostageRescueX", false, outValue);
}

std::vector<int32_t> GCCSPlayerResource::GetHostageRescueY() const {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CCSPlayerResource", "m_hostageRescueY"); std::vector<int32_t> ret; for(int i = 0; i < 4; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCCSPlayerResource::SetHostageRescueY(std::vector<int32_t> value) {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CCSPlayerResource", "m_hostageRescueY"); for(int i = 0; i < 4; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CCSPlayerResource", "m_hostageRescueY", false, outValue);
}

std::vector<int32_t> GCCSPlayerResource::GetHostageRescueZ() const {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CCSPlayerResource", "m_hostageRescueZ"); std::vector<int32_t> ret; for(int i = 0; i < 4; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCCSPlayerResource::SetHostageRescueZ(std::vector<int32_t> value) {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CCSPlayerResource", "m_hostageRescueZ"); for(int i = 0; i < 4; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CCSPlayerResource", "m_hostageRescueZ", false, outValue);
}

bool GCCSPlayerResource::GetEndMatchNextMapAllVoted() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerResource", "m_bEndMatchNextMapAllVoted");
}

void GCCSPlayerResource::SetEndMatchNextMapAllVoted(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerResource", "m_bEndMatchNextMapAllVoted", false, value);
}

bool GCCSPlayerResource::GetFoundGoalPositions() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerResource", "m_foundGoalPositions");
}

void GCCSPlayerResource::SetFoundGoalPositions(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerResource", "m_foundGoalPositions", false, value);
}

std::string GCCSPlayerResource::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSPlayerResource::IsValid() {
    return (m_ptr != nullptr);
}

GCPlayer_WeaponServices::GCPlayer_WeaponServices(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPlayer_WeaponServices::GCPlayer_WeaponServices(void *ptr) {
    m_ptr = ptr;
}

std::vector<GCBasePlayerWeapon*> GCPlayer_WeaponServices::GetMyWeapons() const {
    CUtlVector<GCBasePlayerWeapon*>* vec = GetSchemaValue<CUtlVector<GCBasePlayerWeapon*>*>(m_ptr, "CPlayer_WeaponServices", "m_hMyWeapons"); std::vector<GCBasePlayerWeapon*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCPlayer_WeaponServices::SetMyWeapons(std::vector<GCBasePlayerWeapon*> value) {
    SetSchemaValueCUtlVector<GCBasePlayerWeapon*>(m_ptr, "CPlayer_WeaponServices", "m_hMyWeapons", false, value);
}

GCBasePlayerWeapon GCPlayer_WeaponServices::GetActiveWeapon() const {
    GCBasePlayerWeapon value(GetSchemaValuePtr<void>(m_ptr, "CPlayer_WeaponServices", "m_hActiveWeapon"));
    return value;
}

void GCPlayer_WeaponServices::SetActiveWeapon(GCBasePlayerWeapon* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ActiveWeapon' is not possible.\n");
}

GCBasePlayerWeapon GCPlayer_WeaponServices::GetLastWeapon() const {
    GCBasePlayerWeapon value(GetSchemaValuePtr<void>(m_ptr, "CPlayer_WeaponServices", "m_hLastWeapon"));
    return value;
}

void GCPlayer_WeaponServices::SetLastWeapon(GCBasePlayerWeapon* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'LastWeapon' is not possible.\n");
}

std::vector<uint16_t> GCPlayer_WeaponServices::GetAmmo() const {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "CPlayer_WeaponServices", "m_iAmmo"); std::vector<uint16_t> ret; for(int i = 0; i < 32; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCPlayer_WeaponServices::SetAmmo(std::vector<uint16_t> value) {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "CPlayer_WeaponServices", "m_iAmmo"); for(int i = 0; i < 32; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CPlayer_WeaponServices", "m_iAmmo", false, outValue);
}

bool GCPlayer_WeaponServices::GetPreventWeaponPickup() const {
    return GetSchemaValue<bool>(m_ptr, "CPlayer_WeaponServices", "m_bPreventWeaponPickup");
}

void GCPlayer_WeaponServices::SetPreventWeaponPickup(bool value) {
    SetSchemaValue(m_ptr, "CPlayer_WeaponServices", "m_bPreventWeaponPickup", false, value);
}

std::string GCPlayer_WeaponServices::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPlayer_WeaponServices::IsValid() {
    return (m_ptr != nullptr);
}

GCAttributeManager__cached_attribute_float_t::GCAttributeManager__cached_attribute_float_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAttributeManager__cached_attribute_float_t::GCAttributeManager__cached_attribute_float_t(void *ptr) {
    m_ptr = ptr;
}

float GCAttributeManager__cached_attribute_float_t::GetIn() const {
    return GetSchemaValue<float>(m_ptr, "CAttributeManager__cached_attribute_float_t", "flIn");
}

void GCAttributeManager__cached_attribute_float_t::SetIn(float value) {
    SetSchemaValue(m_ptr, "CAttributeManager__cached_attribute_float_t", "flIn", true, value);
}

CUtlSymbolLarge GCAttributeManager__cached_attribute_float_t::GetAttribHook() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CAttributeManager__cached_attribute_float_t", "iAttribHook");
}

void GCAttributeManager__cached_attribute_float_t::SetAttribHook(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CAttributeManager__cached_attribute_float_t", "iAttribHook", true, value);
}

float GCAttributeManager__cached_attribute_float_t::GetOut() const {
    return GetSchemaValue<float>(m_ptr, "CAttributeManager__cached_attribute_float_t", "flOut");
}

void GCAttributeManager__cached_attribute_float_t::SetOut(float value) {
    SetSchemaValue(m_ptr, "CAttributeManager__cached_attribute_float_t", "flOut", true, value);
}

std::string GCAttributeManager__cached_attribute_float_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAttributeManager__cached_attribute_float_t::IsValid() {
    return (m_ptr != nullptr);
}

GCTeam::GCTeam(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTeam::GCTeam(void *ptr) {
    m_ptr = ptr;
}

std::vector<GCBasePlayerController*> GCTeam::GetPlayerControllers() const {
    CUtlVector<GCBasePlayerController*>* vec = GetSchemaValue<CUtlVector<GCBasePlayerController*>*>(m_ptr, "CTeam", "m_aPlayerControllers"); std::vector<GCBasePlayerController*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCTeam::SetPlayerControllers(std::vector<GCBasePlayerController*> value) {
    SetSchemaValueCUtlVector<GCBasePlayerController*>(m_ptr, "CTeam", "m_aPlayerControllers", false, value);
}

std::vector<GCBasePlayerPawn*> GCTeam::GetPlayers() const {
    CUtlVector<GCBasePlayerPawn*>* vec = GetSchemaValue<CUtlVector<GCBasePlayerPawn*>*>(m_ptr, "CTeam", "m_aPlayers"); std::vector<GCBasePlayerPawn*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCTeam::SetPlayers(std::vector<GCBasePlayerPawn*> value) {
    SetSchemaValueCUtlVector<GCBasePlayerPawn*>(m_ptr, "CTeam", "m_aPlayers", false, value);
}

int32_t GCTeam::GetScore() const {
    return GetSchemaValue<int32_t>(m_ptr, "CTeam", "m_iScore");
}

void GCTeam::SetScore(int32_t value) {
    SetSchemaValue(m_ptr, "CTeam", "m_iScore", false, value);
}

std::string GCTeam::GetTeamname() const {
    return GetSchemaValuePtr<char>(m_ptr, "CTeam", "m_szTeamname");
}

void GCTeam::SetTeamname(std::string value) {
    WriteSchemaPtrValue(m_ptr, "CTeam", "m_szTeamname", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 129);
}

std::string GCTeam::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTeam::IsValid() {
    return (m_ptr != nullptr);
}

GCCSGameModeRules_Deathmatch::GCCSGameModeRules_Deathmatch(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSGameModeRules_Deathmatch::GCCSGameModeRules_Deathmatch(void *ptr) {
    m_ptr = ptr;
}

float GCCSGameModeRules_Deathmatch::GetDMBonusTimeLength() const {
    return GetSchemaValue<float>(m_ptr, "CCSGameModeRules_Deathmatch", "m_flDMBonusTimeLength");
}

void GCCSGameModeRules_Deathmatch::SetDMBonusTimeLength(float value) {
    SetSchemaValue(m_ptr, "CCSGameModeRules_Deathmatch", "m_flDMBonusTimeLength", false, value);
}

CUtlString GCCSGameModeRules_Deathmatch::GetDMBonusWeapon() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CCSGameModeRules_Deathmatch", "m_sDMBonusWeapon");
}

void GCCSGameModeRules_Deathmatch::SetDMBonusWeapon(CUtlString value) {
    SetSchemaValue(m_ptr, "CCSGameModeRules_Deathmatch", "m_sDMBonusWeapon", false, value);
}

std::string GCCSGameModeRules_Deathmatch::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSGameModeRules_Deathmatch::IsValid() {
    return (m_ptr != nullptr);
}

GCFuncNavObstruction::GCFuncNavObstruction(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFuncNavObstruction::GCFuncNavObstruction(void *ptr) {
    m_ptr = ptr;
}

bool GCFuncNavObstruction::GetDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CFuncNavObstruction", "m_bDisabled");
}

void GCFuncNavObstruction::SetDisabled(bool value) {
    SetSchemaValue(m_ptr, "CFuncNavObstruction", "m_bDisabled", false, value);
}

std::string GCFuncNavObstruction::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFuncNavObstruction::IsValid() {
    return (m_ptr != nullptr);
}

GCTriggerImpact::GCTriggerImpact(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTriggerImpact::GCTriggerImpact(void *ptr) {
    m_ptr = ptr;
}

float GCTriggerImpact::GetMagnitude() const {
    return GetSchemaValue<float>(m_ptr, "CTriggerImpact", "m_flMagnitude");
}

void GCTriggerImpact::SetMagnitude(float value) {
    SetSchemaValue(m_ptr, "CTriggerImpact", "m_flMagnitude", false, value);
}

float GCTriggerImpact::GetNoise() const {
    return GetSchemaValue<float>(m_ptr, "CTriggerImpact", "m_flNoise");
}

void GCTriggerImpact::SetNoise(float value) {
    SetSchemaValue(m_ptr, "CTriggerImpact", "m_flNoise", false, value);
}

float GCTriggerImpact::GetViewkick() const {
    return GetSchemaValue<float>(m_ptr, "CTriggerImpact", "m_flViewkick");
}

void GCTriggerImpact::SetViewkick(float value) {
    SetSchemaValue(m_ptr, "CTriggerImpact", "m_flViewkick", false, value);
}

std::string GCTriggerImpact::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTriggerImpact::IsValid() {
    return (m_ptr != nullptr);
}

GCSun::GCSun(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSun::GCSun(void *ptr) {
    m_ptr = ptr;
}

Vector GCSun::GetDirection() const {
    return GetSchemaValue<Vector>(m_ptr, "CSun", "m_vDirection");
}

void GCSun::SetDirection(Vector value) {
    SetSchemaValue(m_ptr, "CSun", "m_vDirection", false, value);
}

Color GCSun::GetOverlay() const {
    return GetSchemaValue<Color>(m_ptr, "CSun", "m_clrOverlay");
}

void GCSun::SetOverlay(Color value) {
    SetSchemaValue(m_ptr, "CSun", "m_clrOverlay", false, value);
}

CUtlSymbolLarge GCSun::GetEffectName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSun", "m_iszEffectName");
}

void GCSun::SetEffectName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CSun", "m_iszEffectName", false, value);
}

CUtlSymbolLarge GCSun::GetSSEffectName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSun", "m_iszSSEffectName");
}

void GCSun::SetSSEffectName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CSun", "m_iszSSEffectName", false, value);
}

bool GCSun::GetOn() const {
    return GetSchemaValue<bool>(m_ptr, "CSun", "m_bOn");
}

void GCSun::SetOn(bool value) {
    SetSchemaValue(m_ptr, "CSun", "m_bOn", false, value);
}

bool GCSun::GetBmaxColor() const {
    return GetSchemaValue<bool>(m_ptr, "CSun", "m_bmaxColor");
}

void GCSun::SetBmaxColor(bool value) {
    SetSchemaValue(m_ptr, "CSun", "m_bmaxColor", false, value);
}

float GCSun::GetSize() const {
    return GetSchemaValue<float>(m_ptr, "CSun", "m_flSize");
}

void GCSun::SetSize(float value) {
    SetSchemaValue(m_ptr, "CSun", "m_flSize", false, value);
}

float GCSun::GetRotation() const {
    return GetSchemaValue<float>(m_ptr, "CSun", "m_flRotation");
}

void GCSun::SetRotation(float value) {
    SetSchemaValue(m_ptr, "CSun", "m_flRotation", false, value);
}

float GCSun::GetHazeScale() const {
    return GetSchemaValue<float>(m_ptr, "CSun", "m_flHazeScale");
}

void GCSun::SetHazeScale(float value) {
    SetSchemaValue(m_ptr, "CSun", "m_flHazeScale", false, value);
}

float GCSun::GetAlphaHaze() const {
    return GetSchemaValue<float>(m_ptr, "CSun", "m_flAlphaHaze");
}

void GCSun::SetAlphaHaze(float value) {
    SetSchemaValue(m_ptr, "CSun", "m_flAlphaHaze", false, value);
}

float GCSun::GetAlphaHdr() const {
    return GetSchemaValue<float>(m_ptr, "CSun", "m_flAlphaHdr");
}

void GCSun::SetAlphaHdr(float value) {
    SetSchemaValue(m_ptr, "CSun", "m_flAlphaHdr", false, value);
}

float GCSun::GetAlphaScale() const {
    return GetSchemaValue<float>(m_ptr, "CSun", "m_flAlphaScale");
}

void GCSun::SetAlphaScale(float value) {
    SetSchemaValue(m_ptr, "CSun", "m_flAlphaScale", false, value);
}

float GCSun::GetHDRColorScale() const {
    return GetSchemaValue<float>(m_ptr, "CSun", "m_flHDRColorScale");
}

void GCSun::SetHDRColorScale(float value) {
    SetSchemaValue(m_ptr, "CSun", "m_flHDRColorScale", false, value);
}

float GCSun::GetFarZScale() const {
    return GetSchemaValue<float>(m_ptr, "CSun", "m_flFarZScale");
}

void GCSun::SetFarZScale(float value) {
    SetSchemaValue(m_ptr, "CSun", "m_flFarZScale", false, value);
}

std::string GCSun::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSun::IsValid() {
    return (m_ptr != nullptr);
}

GCTriggerDetectBulletFire::GCTriggerDetectBulletFire(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTriggerDetectBulletFire::GCTriggerDetectBulletFire(void *ptr) {
    m_ptr = ptr;
}

bool GCTriggerDetectBulletFire::GetPlayerFireOnly() const {
    return GetSchemaValue<bool>(m_ptr, "CTriggerDetectBulletFire", "m_bPlayerFireOnly");
}

void GCTriggerDetectBulletFire::SetPlayerFireOnly(bool value) {
    SetSchemaValue(m_ptr, "CTriggerDetectBulletFire", "m_bPlayerFireOnly", false, value);
}

GCEntityIOOutput GCTriggerDetectBulletFire::GetOnDetectedBulletFire() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CTriggerDetectBulletFire", "m_OnDetectedBulletFire");
}

void GCTriggerDetectBulletFire::SetOnDetectedBulletFire(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CTriggerDetectBulletFire", "m_OnDetectedBulletFire", false, value);
}

std::string GCTriggerDetectBulletFire::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTriggerDetectBulletFire::IsValid() {
    return (m_ptr != nullptr);
}

GCWorld::GCWorld(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWorld::GCWorld(void *ptr) {
    m_ptr = ptr;
}

std::string GCWorld::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWorld::IsValid() {
    return (m_ptr != nullptr);
}

GCPointGiveAmmo::GCPointGiveAmmo(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPointGiveAmmo::GCPointGiveAmmo(void *ptr) {
    m_ptr = ptr;
}

GCBaseEntity GCPointGiveAmmo::GetActivator() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CPointGiveAmmo", "m_pActivator"));
    return value;
}

void GCPointGiveAmmo::SetActivator(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Activator' is not possible.\n");
}

std::string GCPointGiveAmmo::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPointGiveAmmo::IsValid() {
    return (m_ptr != nullptr);
}

GCFuncMoveLinear::GCFuncMoveLinear(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFuncMoveLinear::GCFuncMoveLinear(void *ptr) {
    m_ptr = ptr;
}

MoveLinearAuthoredPos_t GCFuncMoveLinear::GetAuthoredPosition() const {
    return GetSchemaValue<MoveLinearAuthoredPos_t>(m_ptr, "CFuncMoveLinear", "m_authoredPosition");
}

void GCFuncMoveLinear::SetAuthoredPosition(MoveLinearAuthoredPos_t value) {
    SetSchemaValue(m_ptr, "CFuncMoveLinear", "m_authoredPosition", false, value);
}

QAngle GCFuncMoveLinear::GetMoveEntitySpace() const {
    return GetSchemaValue<QAngle>(m_ptr, "CFuncMoveLinear", "m_angMoveEntitySpace");
}

void GCFuncMoveLinear::SetMoveEntitySpace(QAngle value) {
    SetSchemaValue(m_ptr, "CFuncMoveLinear", "m_angMoveEntitySpace", false, value);
}

Vector GCFuncMoveLinear::GetMoveDirParentSpace() const {
    return GetSchemaValue<Vector>(m_ptr, "CFuncMoveLinear", "m_vecMoveDirParentSpace");
}

void GCFuncMoveLinear::SetMoveDirParentSpace(Vector value) {
    SetSchemaValue(m_ptr, "CFuncMoveLinear", "m_vecMoveDirParentSpace", false, value);
}

CUtlSymbolLarge GCFuncMoveLinear::GetSoundStart() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncMoveLinear", "m_soundStart");
}

void GCFuncMoveLinear::SetSoundStart(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFuncMoveLinear", "m_soundStart", false, value);
}

CUtlSymbolLarge GCFuncMoveLinear::GetSoundStop() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncMoveLinear", "m_soundStop");
}

void GCFuncMoveLinear::SetSoundStop(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFuncMoveLinear", "m_soundStop", false, value);
}

CUtlSymbolLarge GCFuncMoveLinear::GetCurrentSound() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncMoveLinear", "m_currentSound");
}

void GCFuncMoveLinear::SetCurrentSound(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFuncMoveLinear", "m_currentSound", false, value);
}

float GCFuncMoveLinear::GetBlockDamage() const {
    return GetSchemaValue<float>(m_ptr, "CFuncMoveLinear", "m_flBlockDamage");
}

void GCFuncMoveLinear::SetBlockDamage(float value) {
    SetSchemaValue(m_ptr, "CFuncMoveLinear", "m_flBlockDamage", false, value);
}

float GCFuncMoveLinear::GetStartPosition() const {
    return GetSchemaValue<float>(m_ptr, "CFuncMoveLinear", "m_flStartPosition");
}

void GCFuncMoveLinear::SetStartPosition(float value) {
    SetSchemaValue(m_ptr, "CFuncMoveLinear", "m_flStartPosition", false, value);
}

GCEntityIOOutput GCFuncMoveLinear::GetOnFullyOpen() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CFuncMoveLinear", "m_OnFullyOpen");
}

void GCFuncMoveLinear::SetOnFullyOpen(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CFuncMoveLinear", "m_OnFullyOpen", false, value);
}

GCEntityIOOutput GCFuncMoveLinear::GetOnFullyClosed() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CFuncMoveLinear", "m_OnFullyClosed");
}

void GCFuncMoveLinear::SetOnFullyClosed(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CFuncMoveLinear", "m_OnFullyClosed", false, value);
}

bool GCFuncMoveLinear::GetCreateMovableNavMesh() const {
    return GetSchemaValue<bool>(m_ptr, "CFuncMoveLinear", "m_bCreateMovableNavMesh");
}

void GCFuncMoveLinear::SetCreateMovableNavMesh(bool value) {
    SetSchemaValue(m_ptr, "CFuncMoveLinear", "m_bCreateMovableNavMesh", false, value);
}

bool GCFuncMoveLinear::GetCreateNavObstacle() const {
    return GetSchemaValue<bool>(m_ptr, "CFuncMoveLinear", "m_bCreateNavObstacle");
}

void GCFuncMoveLinear::SetCreateNavObstacle(bool value) {
    SetSchemaValue(m_ptr, "CFuncMoveLinear", "m_bCreateNavObstacle", false, value);
}

std::string GCFuncMoveLinear::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFuncMoveLinear::IsValid() {
    return (m_ptr != nullptr);
}

GCPathParticleRope::GCPathParticleRope(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPathParticleRope::GCPathParticleRope(void *ptr) {
    m_ptr = ptr;
}

bool GCPathParticleRope::GetStartActive() const {
    return GetSchemaValue<bool>(m_ptr, "CPathParticleRope", "m_bStartActive");
}

void GCPathParticleRope::SetStartActive(bool value) {
    SetSchemaValue(m_ptr, "CPathParticleRope", "m_bStartActive", false, value);
}

float GCPathParticleRope::GetMaxSimulationTime() const {
    return GetSchemaValue<float>(m_ptr, "CPathParticleRope", "m_flMaxSimulationTime");
}

void GCPathParticleRope::SetMaxSimulationTime(float value) {
    SetSchemaValue(m_ptr, "CPathParticleRope", "m_flMaxSimulationTime", false, value);
}

CUtlSymbolLarge GCPathParticleRope::GetEffectName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPathParticleRope", "m_iszEffectName");
}

void GCPathParticleRope::SetEffectName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPathParticleRope", "m_iszEffectName", false, value);
}

std::vector<CUtlSymbolLarge> GCPathParticleRope::GetPathNodes_Name() const {
    CUtlVector<CUtlSymbolLarge>* vec = GetSchemaValue<CUtlVector<CUtlSymbolLarge>*>(m_ptr, "CPathParticleRope", "m_PathNodes_Name"); std::vector<CUtlSymbolLarge> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCPathParticleRope::SetPathNodes_Name(std::vector<CUtlSymbolLarge> value) {
    SetSchemaValueCUtlVector<CUtlSymbolLarge>(m_ptr, "CPathParticleRope", "m_PathNodes_Name", false, value);
}

float GCPathParticleRope::GetParticleSpacing() const {
    return GetSchemaValue<float>(m_ptr, "CPathParticleRope", "m_flParticleSpacing");
}

void GCPathParticleRope::SetParticleSpacing(float value) {
    SetSchemaValue(m_ptr, "CPathParticleRope", "m_flParticleSpacing", false, value);
}

float GCPathParticleRope::GetSlack() const {
    return GetSchemaValue<float>(m_ptr, "CPathParticleRope", "m_flSlack");
}

void GCPathParticleRope::SetSlack(float value) {
    SetSchemaValue(m_ptr, "CPathParticleRope", "m_flSlack", false, value);
}

float GCPathParticleRope::GetRadius() const {
    return GetSchemaValue<float>(m_ptr, "CPathParticleRope", "m_flRadius");
}

void GCPathParticleRope::SetRadius(float value) {
    SetSchemaValue(m_ptr, "CPathParticleRope", "m_flRadius", false, value);
}

Color GCPathParticleRope::GetColorTint() const {
    return GetSchemaValue<Color>(m_ptr, "CPathParticleRope", "m_ColorTint");
}

void GCPathParticleRope::SetColorTint(Color value) {
    SetSchemaValue(m_ptr, "CPathParticleRope", "m_ColorTint", false, value);
}

int32_t GCPathParticleRope::GetEffectState() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPathParticleRope", "m_nEffectState");
}

void GCPathParticleRope::SetEffectState(int32_t value) {
    SetSchemaValue(m_ptr, "CPathParticleRope", "m_nEffectState", false, value);
}

std::vector<Vector> GCPathParticleRope::GetPathNodes_Position() const {
    CUtlVector<Vector>* vec = GetSchemaValue<CUtlVector<Vector>*>(m_ptr, "CPathParticleRope", "m_PathNodes_Position"); std::vector<Vector> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCPathParticleRope::SetPathNodes_Position(std::vector<Vector> value) {
    SetSchemaValueCUtlVector<Vector>(m_ptr, "CPathParticleRope", "m_PathNodes_Position", false, value);
}

std::vector<Vector> GCPathParticleRope::GetPathNodes_TangentIn() const {
    CUtlVector<Vector>* vec = GetSchemaValue<CUtlVector<Vector>*>(m_ptr, "CPathParticleRope", "m_PathNodes_TangentIn"); std::vector<Vector> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCPathParticleRope::SetPathNodes_TangentIn(std::vector<Vector> value) {
    SetSchemaValueCUtlVector<Vector>(m_ptr, "CPathParticleRope", "m_PathNodes_TangentIn", false, value);
}

std::vector<Vector> GCPathParticleRope::GetPathNodes_TangentOut() const {
    CUtlVector<Vector>* vec = GetSchemaValue<CUtlVector<Vector>*>(m_ptr, "CPathParticleRope", "m_PathNodes_TangentOut"); std::vector<Vector> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCPathParticleRope::SetPathNodes_TangentOut(std::vector<Vector> value) {
    SetSchemaValueCUtlVector<Vector>(m_ptr, "CPathParticleRope", "m_PathNodes_TangentOut", false, value);
}

std::vector<Vector> GCPathParticleRope::GetPathNodes_Color() const {
    CUtlVector<Vector>* vec = GetSchemaValue<CUtlVector<Vector>*>(m_ptr, "CPathParticleRope", "m_PathNodes_Color"); std::vector<Vector> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCPathParticleRope::SetPathNodes_Color(std::vector<Vector> value) {
    SetSchemaValueCUtlVector<Vector>(m_ptr, "CPathParticleRope", "m_PathNodes_Color", false, value);
}

std::vector<bool> GCPathParticleRope::GetPathNodes_PinEnabled() const {
    CUtlVector<bool>* vec = GetSchemaValue<CUtlVector<bool>*>(m_ptr, "CPathParticleRope", "m_PathNodes_PinEnabled"); std::vector<bool> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCPathParticleRope::SetPathNodes_PinEnabled(std::vector<bool> value) {
    SetSchemaValueCUtlVector<bool>(m_ptr, "CPathParticleRope", "m_PathNodes_PinEnabled", false, value);
}

std::vector<float32> GCPathParticleRope::GetPathNodes_RadiusScale() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "CPathParticleRope", "m_PathNodes_RadiusScale"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCPathParticleRope::SetPathNodes_RadiusScale(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "CPathParticleRope", "m_PathNodes_RadiusScale", false, value);
}

std::string GCPathParticleRope::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPathParticleRope::IsValid() {
    return (m_ptr != nullptr);
}

GCPlayerVisibility::GCPlayerVisibility(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPlayerVisibility::GCPlayerVisibility(void *ptr) {
    m_ptr = ptr;
}

float GCPlayerVisibility::GetVisibilityStrength() const {
    return GetSchemaValue<float>(m_ptr, "CPlayerVisibility", "m_flVisibilityStrength");
}

void GCPlayerVisibility::SetVisibilityStrength(float value) {
    SetSchemaValue(m_ptr, "CPlayerVisibility", "m_flVisibilityStrength", false, value);
}

float GCPlayerVisibility::GetFogDistanceMultiplier() const {
    return GetSchemaValue<float>(m_ptr, "CPlayerVisibility", "m_flFogDistanceMultiplier");
}

void GCPlayerVisibility::SetFogDistanceMultiplier(float value) {
    SetSchemaValue(m_ptr, "CPlayerVisibility", "m_flFogDistanceMultiplier", false, value);
}

float GCPlayerVisibility::GetFogMaxDensityMultiplier() const {
    return GetSchemaValue<float>(m_ptr, "CPlayerVisibility", "m_flFogMaxDensityMultiplier");
}

void GCPlayerVisibility::SetFogMaxDensityMultiplier(float value) {
    SetSchemaValue(m_ptr, "CPlayerVisibility", "m_flFogMaxDensityMultiplier", false, value);
}

float GCPlayerVisibility::GetFadeTime() const {
    return GetSchemaValue<float>(m_ptr, "CPlayerVisibility", "m_flFadeTime");
}

void GCPlayerVisibility::SetFadeTime(float value) {
    SetSchemaValue(m_ptr, "CPlayerVisibility", "m_flFadeTime", false, value);
}

bool GCPlayerVisibility::GetStartDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CPlayerVisibility", "m_bStartDisabled");
}

void GCPlayerVisibility::SetStartDisabled(bool value) {
    SetSchemaValue(m_ptr, "CPlayerVisibility", "m_bStartDisabled", false, value);
}

bool GCPlayerVisibility::GetIsEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CPlayerVisibility", "m_bIsEnabled");
}

void GCPlayerVisibility::SetIsEnabled(bool value) {
    SetSchemaValue(m_ptr, "CPlayerVisibility", "m_bIsEnabled", false, value);
}

std::string GCPlayerVisibility::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPlayerVisibility::IsValid() {
    return (m_ptr != nullptr);
}

GCPointTeleport::GCPointTeleport(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPointTeleport::GCPointTeleport(void *ptr) {
    m_ptr = ptr;
}

Vector GCPointTeleport::GetSaveOrigin() const {
    return GetSchemaValue<Vector>(m_ptr, "CPointTeleport", "m_vSaveOrigin");
}

void GCPointTeleport::SetSaveOrigin(Vector value) {
    SetSchemaValue(m_ptr, "CPointTeleport", "m_vSaveOrigin", false, value);
}

QAngle GCPointTeleport::GetSaveAngles() const {
    return GetSchemaValue<QAngle>(m_ptr, "CPointTeleport", "m_vSaveAngles");
}

void GCPointTeleport::SetSaveAngles(QAngle value) {
    SetSchemaValue(m_ptr, "CPointTeleport", "m_vSaveAngles", false, value);
}

bool GCPointTeleport::GetTeleportParentedEntities() const {
    return GetSchemaValue<bool>(m_ptr, "CPointTeleport", "m_bTeleportParentedEntities");
}

void GCPointTeleport::SetTeleportParentedEntities(bool value) {
    SetSchemaValue(m_ptr, "CPointTeleport", "m_bTeleportParentedEntities", false, value);
}

bool GCPointTeleport::GetTeleportUseCurrentAngle() const {
    return GetSchemaValue<bool>(m_ptr, "CPointTeleport", "m_bTeleportUseCurrentAngle");
}

void GCPointTeleport::SetTeleportUseCurrentAngle(bool value) {
    SetSchemaValue(m_ptr, "CPointTeleport", "m_bTeleportUseCurrentAngle", false, value);
}

std::string GCPointTeleport::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPointTeleport::IsValid() {
    return (m_ptr != nullptr);
}

GCAK47::GCAK47(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAK47::GCAK47(void *ptr) {
    m_ptr = ptr;
}

std::string GCAK47::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAK47::IsValid() {
    return (m_ptr != nullptr);
}

GCTriggerTeleport::GCTriggerTeleport(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTriggerTeleport::GCTriggerTeleport(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCTriggerTeleport::GetLandmark() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CTriggerTeleport", "m_iLandmark");
}

void GCTriggerTeleport::SetLandmark(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CTriggerTeleport", "m_iLandmark", false, value);
}

bool GCTriggerTeleport::GetUseLandmarkAngles() const {
    return GetSchemaValue<bool>(m_ptr, "CTriggerTeleport", "m_bUseLandmarkAngles");
}

void GCTriggerTeleport::SetUseLandmarkAngles(bool value) {
    SetSchemaValue(m_ptr, "CTriggerTeleport", "m_bUseLandmarkAngles", false, value);
}

bool GCTriggerTeleport::GetMirrorPlayer() const {
    return GetSchemaValue<bool>(m_ptr, "CTriggerTeleport", "m_bMirrorPlayer");
}

void GCTriggerTeleport::SetMirrorPlayer(bool value) {
    SetSchemaValue(m_ptr, "CTriggerTeleport", "m_bMirrorPlayer", false, value);
}

std::string GCTriggerTeleport::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTriggerTeleport::IsValid() {
    return (m_ptr != nullptr);
}

GCCSObserver_CameraServices::GCCSObserver_CameraServices(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSObserver_CameraServices::GCCSObserver_CameraServices(void *ptr) {
    m_ptr = ptr;
}

std::string GCCSObserver_CameraServices::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSObserver_CameraServices::IsValid() {
    return (m_ptr != nullptr);
}

GCCSGO_TeamIntroTerroristPosition::GCCSGO_TeamIntroTerroristPosition(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSGO_TeamIntroTerroristPosition::GCCSGO_TeamIntroTerroristPosition(void *ptr) {
    m_ptr = ptr;
}

std::string GCCSGO_TeamIntroTerroristPosition::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSGO_TeamIntroTerroristPosition::IsValid() {
    return (m_ptr != nullptr);
}

GCFuncMover::GCFuncMover(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFuncMover::GCFuncMover(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCFuncMover::GetPathName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncMover", "m_iszPathName");
}

void GCFuncMover::SetPathName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFuncMover", "m_iszPathName", false, value);
}

GCPathMover GCFuncMover::GetPathMover() const {
    GCPathMover value(GetSchemaValuePtr<void>(m_ptr, "CFuncMover", "m_hPathMover"));
    return value;
}

void GCFuncMover::SetPathMover(GCPathMover* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'PathMover' is not possible.\n");
}

CUtlSymbolLarge GCFuncMover::GetPathNodeStart() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncMover", "m_iszPathNodeStart");
}

void GCFuncMover::SetPathNodeStart(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFuncMover", "m_iszPathNodeStart", false, value);
}

GCFuncMover GCFuncMover::GetMoveType() const {
    return GetSchemaValue<GCFuncMover>(m_ptr, "CFuncMover", "m_eMoveType");
}

void GCFuncMover::SetMoveType(GCFuncMover value) {
    SetSchemaValue(m_ptr, "CFuncMover", "m_eMoveType", false, value);
}

bool GCFuncMover::GetIsReversing() const {
    return GetSchemaValue<bool>(m_ptr, "CFuncMover", "m_bIsReversing");
}

void GCFuncMover::SetIsReversing(bool value) {
    SetSchemaValue(m_ptr, "CFuncMover", "m_bIsReversing", false, value);
}

Vector GCFuncMover::GetTarget() const {
    return GetSchemaValue<Vector>(m_ptr, "CFuncMover", "m_vTarget");
}

void GCFuncMover::SetTarget(Vector value) {
    SetSchemaValue(m_ptr, "CFuncMover", "m_vTarget", false, value);
}

float GCFuncMover::GetStartSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CFuncMover", "m_flStartSpeed");
}

void GCFuncMover::SetStartSpeed(float value) {
    SetSchemaValue(m_ptr, "CFuncMover", "m_flStartSpeed", false, value);
}

float GCFuncMover::GetPathLocation() const {
    return GetSchemaValue<float>(m_ptr, "CFuncMover", "m_flPathLocation");
}

void GCFuncMover::SetPathLocation(float value) {
    SetSchemaValue(m_ptr, "CFuncMover", "m_flPathLocation", false, value);
}

float GCFuncMover::GetT() const {
    return GetSchemaValue<float>(m_ptr, "CFuncMover", "m_flT");
}

void GCFuncMover::SetT(float value) {
    SetSchemaValue(m_ptr, "CFuncMover", "m_flT", false, value);
}

int32_t GCFuncMover::GetCurrentNodeIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CFuncMover", "m_nCurrentNodeIndex");
}

void GCFuncMover::SetCurrentNodeIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CFuncMover", "m_nCurrentNodeIndex", false, value);
}

int32_t GCFuncMover::GetPreviousNodeIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CFuncMover", "m_nPreviousNodeIndex");
}

void GCFuncMover::SetPreviousNodeIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CFuncMover", "m_nPreviousNodeIndex", false, value);
}

bool GCFuncMover::GetFixedOrientation() const {
    return GetSchemaValue<bool>(m_ptr, "CFuncMover", "m_bFixedOrientation");
}

void GCFuncMover::SetFixedOrientation(bool value) {
    SetSchemaValue(m_ptr, "CFuncMover", "m_bFixedOrientation", false, value);
}

bool GCFuncMover::GetFixedPitch() const {
    return GetSchemaValue<bool>(m_ptr, "CFuncMover", "m_bFixedPitch");
}

void GCFuncMover::SetFixedPitch(bool value) {
    SetSchemaValue(m_ptr, "CFuncMover", "m_bFixedPitch", false, value);
}

SolidType_t GCFuncMover::GetSolidType() const {
    return GetSchemaValue<SolidType_t>(m_ptr, "CFuncMover", "m_eSolidType");
}

void GCFuncMover::SetSolidType(SolidType_t value) {
    SetSchemaValue(m_ptr, "CFuncMover", "m_eSolidType", false, value);
}

bool GCFuncMover::GetIsMoving() const {
    return GetSchemaValue<bool>(m_ptr, "CFuncMover", "m_bIsMoving");
}

void GCFuncMover::SetIsMoving(bool value) {
    SetSchemaValue(m_ptr, "CFuncMover", "m_bIsMoving", false, value);
}

float GCFuncMover::GetTimeToReachMaxSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CFuncMover", "m_flTimeToReachMaxSpeed");
}

void GCFuncMover::SetTimeToReachMaxSpeed(float value) {
    SetSchemaValue(m_ptr, "CFuncMover", "m_flTimeToReachMaxSpeed", false, value);
}

float GCFuncMover::GetTimeToReachZeroSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CFuncMover", "m_flTimeToReachZeroSpeed");
}

void GCFuncMover::SetTimeToReachZeroSpeed(float value) {
    SetSchemaValue(m_ptr, "CFuncMover", "m_flTimeToReachZeroSpeed", false, value);
}

GCMoverPathNode GCFuncMover::GetStopAtNode() const {
    GCMoverPathNode value(GetSchemaValuePtr<void>(m_ptr, "CFuncMover", "m_hStopAtNode"));
    return value;
}

void GCFuncMover::SetStopAtNode(GCMoverPathNode* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'StopAtNode' is not possible.\n");
}

float GCFuncMover::GetPathLocationToBeginStop() const {
    return GetSchemaValue<float>(m_ptr, "CFuncMover", "m_flPathLocationToBeginStop");
}

void GCFuncMover::SetPathLocationToBeginStop(float value) {
    SetSchemaValue(m_ptr, "CFuncMover", "m_flPathLocationToBeginStop", false, value);
}

bool GCFuncMover::GetMatchPathNodeUp() const {
    return GetSchemaValue<bool>(m_ptr, "CFuncMover", "m_bMatchPathNodeUp");
}

void GCFuncMover::SetMatchPathNodeUp(bool value) {
    SetSchemaValue(m_ptr, "CFuncMover", "m_bMatchPathNodeUp", false, value);
}

bool GCFuncMover::GetFacePlayer() const {
    return GetSchemaValue<bool>(m_ptr, "CFuncMover", "m_bFacePlayer");
}

void GCFuncMover::SetFacePlayer(bool value) {
    SetSchemaValue(m_ptr, "CFuncMover", "m_bFacePlayer", false, value);
}

Vector GCFuncMover::GetOriginalUp() const {
    return GetSchemaValue<Vector>(m_ptr, "CFuncMover", "m_vOriginalUp");
}

void GCFuncMover::SetOriginalUp(Vector value) {
    SetSchemaValue(m_ptr, "CFuncMover", "m_vOriginalUp", false, value);
}

float GCFuncMover::GetTimeToRollToNewUp() const {
    return GetSchemaValue<float>(m_ptr, "CFuncMover", "m_flTimeToRollToNewUp");
}

void GCFuncMover::SetTimeToRollToNewUp(float value) {
    SetSchemaValue(m_ptr, "CFuncMover", "m_flTimeToRollToNewUp", false, value);
}

std::string GCFuncMover::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFuncMover::IsValid() {
    return (m_ptr != nullptr);
}

GCCSPlayer_CameraServices::GCCSPlayer_CameraServices(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSPlayer_CameraServices::GCCSPlayer_CameraServices(void *ptr) {
    m_ptr = ptr;
}

std::string GCCSPlayer_CameraServices::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSPlayer_CameraServices::IsValid() {
    return (m_ptr != nullptr);
}

GCHEGrenade::GCHEGrenade(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCHEGrenade::GCHEGrenade(void *ptr) {
    m_ptr = ptr;
}

std::string GCHEGrenade::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCHEGrenade::IsValid() {
    return (m_ptr != nullptr);
}

GCGameEnd::GCGameEnd(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCGameEnd::GCGameEnd(void *ptr) {
    m_ptr = ptr;
}

std::string GCGameEnd::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCGameEnd::IsValid() {
    return (m_ptr != nullptr);
}

GCTriggerCallback::GCTriggerCallback(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTriggerCallback::GCTriggerCallback(void *ptr) {
    m_ptr = ptr;
}

std::string GCTriggerCallback::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTriggerCallback::IsValid() {
    return (m_ptr != nullptr);
}

GCBubbling::GCBubbling(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBubbling::GCBubbling(void *ptr) {
    m_ptr = ptr;
}

int32_t GCBubbling::GetDensity() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBubbling", "m_density");
}

void GCBubbling::SetDensity(int32_t value) {
    SetSchemaValue(m_ptr, "CBubbling", "m_density", false, value);
}

int32_t GCBubbling::GetFrequency() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBubbling", "m_frequency");
}

void GCBubbling::SetFrequency(int32_t value) {
    SetSchemaValue(m_ptr, "CBubbling", "m_frequency", false, value);
}

int32_t GCBubbling::GetState() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBubbling", "m_state");
}

void GCBubbling::SetState(int32_t value) {
    SetSchemaValue(m_ptr, "CBubbling", "m_state", false, value);
}

std::string GCBubbling::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBubbling::IsValid() {
    return (m_ptr != nullptr);
}

GCTeamplayRules::GCTeamplayRules(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTeamplayRules::GCTeamplayRules(void *ptr) {
    m_ptr = ptr;
}

std::string GCTeamplayRules::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTeamplayRules::IsValid() {
    return (m_ptr != nullptr);
}

GCPhysicsPropOverride::GCPhysicsPropOverride(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPhysicsPropOverride::GCPhysicsPropOverride(void *ptr) {
    m_ptr = ptr;
}

std::string GCPhysicsPropOverride::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPhysicsPropOverride::IsValid() {
    return (m_ptr != nullptr);
}

GCAI_ChangeHintGroup::GCAI_ChangeHintGroup(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAI_ChangeHintGroup::GCAI_ChangeHintGroup(void *ptr) {
    m_ptr = ptr;
}

int32_t GCAI_ChangeHintGroup::GetSearchType() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAI_ChangeHintGroup", "m_iSearchType");
}

void GCAI_ChangeHintGroup::SetSearchType(int32_t value) {
    SetSchemaValue(m_ptr, "CAI_ChangeHintGroup", "m_iSearchType", false, value);
}

CUtlSymbolLarge GCAI_ChangeHintGroup::GetStrSearchName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CAI_ChangeHintGroup", "m_strSearchName");
}

void GCAI_ChangeHintGroup::SetStrSearchName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CAI_ChangeHintGroup", "m_strSearchName", false, value);
}

CUtlSymbolLarge GCAI_ChangeHintGroup::GetStrNewHintGroup() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CAI_ChangeHintGroup", "m_strNewHintGroup");
}

void GCAI_ChangeHintGroup::SetStrNewHintGroup(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CAI_ChangeHintGroup", "m_strNewHintGroup", false, value);
}

float GCAI_ChangeHintGroup::GetRadius() const {
    return GetSchemaValue<float>(m_ptr, "CAI_ChangeHintGroup", "m_flRadius");
}

void GCAI_ChangeHintGroup::SetRadius(float value) {
    SetSchemaValue(m_ptr, "CAI_ChangeHintGroup", "m_flRadius", false, value);
}

std::string GCAI_ChangeHintGroup::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAI_ChangeHintGroup::IsValid() {
    return (m_ptr != nullptr);
}

GCColorCorrectionVolume::GCColorCorrectionVolume(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCColorCorrectionVolume::GCColorCorrectionVolume(void *ptr) {
    m_ptr = ptr;
}

bool GCColorCorrectionVolume::GetEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CColorCorrectionVolume", "m_bEnabled");
}

void GCColorCorrectionVolume::SetEnabled(bool value) {
    SetSchemaValue(m_ptr, "CColorCorrectionVolume", "m_bEnabled", false, value);
}

float GCColorCorrectionVolume::GetMaxWeight() const {
    return GetSchemaValue<float>(m_ptr, "CColorCorrectionVolume", "m_MaxWeight");
}

void GCColorCorrectionVolume::SetMaxWeight(float value) {
    SetSchemaValue(m_ptr, "CColorCorrectionVolume", "m_MaxWeight", false, value);
}

float GCColorCorrectionVolume::GetFadeDuration() const {
    return GetSchemaValue<float>(m_ptr, "CColorCorrectionVolume", "m_FadeDuration");
}

void GCColorCorrectionVolume::SetFadeDuration(float value) {
    SetSchemaValue(m_ptr, "CColorCorrectionVolume", "m_FadeDuration", false, value);
}

bool GCColorCorrectionVolume::GetStartDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CColorCorrectionVolume", "m_bStartDisabled");
}

void GCColorCorrectionVolume::SetStartDisabled(bool value) {
    SetSchemaValue(m_ptr, "CColorCorrectionVolume", "m_bStartDisabled", false, value);
}

float GCColorCorrectionVolume::GetWeight() const {
    return GetSchemaValue<float>(m_ptr, "CColorCorrectionVolume", "m_Weight");
}

void GCColorCorrectionVolume::SetWeight(float value) {
    SetSchemaValue(m_ptr, "CColorCorrectionVolume", "m_Weight", false, value);
}

std::string GCColorCorrectionVolume::GetLookupFilename() const {
    return GetSchemaValuePtr<char>(m_ptr, "CColorCorrectionVolume", "m_lookupFilename");
}

void GCColorCorrectionVolume::SetLookupFilename(std::string value) {
    WriteSchemaPtrValue(m_ptr, "CColorCorrectionVolume", "m_lookupFilename", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 512);
}

float GCColorCorrectionVolume::GetLastEnterWeight() const {
    return GetSchemaValue<float>(m_ptr, "CColorCorrectionVolume", "m_LastEnterWeight");
}

void GCColorCorrectionVolume::SetLastEnterWeight(float value) {
    SetSchemaValue(m_ptr, "CColorCorrectionVolume", "m_LastEnterWeight", false, value);
}

float GCColorCorrectionVolume::GetLastExitWeight() const {
    return GetSchemaValue<float>(m_ptr, "CColorCorrectionVolume", "m_LastExitWeight");
}

void GCColorCorrectionVolume::SetLastExitWeight(float value) {
    SetSchemaValue(m_ptr, "CColorCorrectionVolume", "m_LastExitWeight", false, value);
}

std::string GCColorCorrectionVolume::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCColorCorrectionVolume::IsValid() {
    return (m_ptr != nullptr);
}

GCFilterEnemy::GCFilterEnemy(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFilterEnemy::GCFilterEnemy(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCFilterEnemy::GetEnemyName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFilterEnemy", "m_iszEnemyName");
}

void GCFilterEnemy::SetEnemyName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFilterEnemy", "m_iszEnemyName", false, value);
}

float GCFilterEnemy::GetRadius() const {
    return GetSchemaValue<float>(m_ptr, "CFilterEnemy", "m_flRadius");
}

void GCFilterEnemy::SetRadius(float value) {
    SetSchemaValue(m_ptr, "CFilterEnemy", "m_flRadius", false, value);
}

float GCFilterEnemy::GetOuterRadius() const {
    return GetSchemaValue<float>(m_ptr, "CFilterEnemy", "m_flOuterRadius");
}

void GCFilterEnemy::SetOuterRadius(float value) {
    SetSchemaValue(m_ptr, "CFilterEnemy", "m_flOuterRadius", false, value);
}

int32_t GCFilterEnemy::GetMaxSquadmatesPerEnemy() const {
    return GetSchemaValue<int32_t>(m_ptr, "CFilterEnemy", "m_nMaxSquadmatesPerEnemy");
}

void GCFilterEnemy::SetMaxSquadmatesPerEnemy(int32_t value) {
    SetSchemaValue(m_ptr, "CFilterEnemy", "m_nMaxSquadmatesPerEnemy", false, value);
}

CUtlSymbolLarge GCFilterEnemy::GetPlayerName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFilterEnemy", "m_iszPlayerName");
}

void GCFilterEnemy::SetPlayerName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFilterEnemy", "m_iszPlayerName", false, value);
}

std::string GCFilterEnemy::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFilterEnemy::IsValid() {
    return (m_ptr != nullptr);
}

GCShower::GCShower(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCShower::GCShower(void *ptr) {
    m_ptr = ptr;
}

std::string GCShower::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCShower::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvCubemapFog::GCEnvCubemapFog(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvCubemapFog::GCEnvCubemapFog(void *ptr) {
    m_ptr = ptr;
}

float GCEnvCubemapFog::GetEndDistance() const {
    return GetSchemaValue<float>(m_ptr, "CEnvCubemapFog", "m_flEndDistance");
}

void GCEnvCubemapFog::SetEndDistance(float value) {
    SetSchemaValue(m_ptr, "CEnvCubemapFog", "m_flEndDistance", false, value);
}

float GCEnvCubemapFog::GetStartDistance() const {
    return GetSchemaValue<float>(m_ptr, "CEnvCubemapFog", "m_flStartDistance");
}

void GCEnvCubemapFog::SetStartDistance(float value) {
    SetSchemaValue(m_ptr, "CEnvCubemapFog", "m_flStartDistance", false, value);
}

float GCEnvCubemapFog::GetFogFalloffExponent() const {
    return GetSchemaValue<float>(m_ptr, "CEnvCubemapFog", "m_flFogFalloffExponent");
}

void GCEnvCubemapFog::SetFogFalloffExponent(float value) {
    SetSchemaValue(m_ptr, "CEnvCubemapFog", "m_flFogFalloffExponent", false, value);
}

bool GCEnvCubemapFog::GetHeightFogEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvCubemapFog", "m_bHeightFogEnabled");
}

void GCEnvCubemapFog::SetHeightFogEnabled(bool value) {
    SetSchemaValue(m_ptr, "CEnvCubemapFog", "m_bHeightFogEnabled", false, value);
}

float GCEnvCubemapFog::GetFogHeightWidth() const {
    return GetSchemaValue<float>(m_ptr, "CEnvCubemapFog", "m_flFogHeightWidth");
}

void GCEnvCubemapFog::SetFogHeightWidth(float value) {
    SetSchemaValue(m_ptr, "CEnvCubemapFog", "m_flFogHeightWidth", false, value);
}

float GCEnvCubemapFog::GetFogHeightEnd() const {
    return GetSchemaValue<float>(m_ptr, "CEnvCubemapFog", "m_flFogHeightEnd");
}

void GCEnvCubemapFog::SetFogHeightEnd(float value) {
    SetSchemaValue(m_ptr, "CEnvCubemapFog", "m_flFogHeightEnd", false, value);
}

float GCEnvCubemapFog::GetFogHeightStart() const {
    return GetSchemaValue<float>(m_ptr, "CEnvCubemapFog", "m_flFogHeightStart");
}

void GCEnvCubemapFog::SetFogHeightStart(float value) {
    SetSchemaValue(m_ptr, "CEnvCubemapFog", "m_flFogHeightStart", false, value);
}

float GCEnvCubemapFog::GetFogHeightExponent() const {
    return GetSchemaValue<float>(m_ptr, "CEnvCubemapFog", "m_flFogHeightExponent");
}

void GCEnvCubemapFog::SetFogHeightExponent(float value) {
    SetSchemaValue(m_ptr, "CEnvCubemapFog", "m_flFogHeightExponent", false, value);
}

float GCEnvCubemapFog::GetLODBias() const {
    return GetSchemaValue<float>(m_ptr, "CEnvCubemapFog", "m_flLODBias");
}

void GCEnvCubemapFog::SetLODBias(float value) {
    SetSchemaValue(m_ptr, "CEnvCubemapFog", "m_flLODBias", false, value);
}

bool GCEnvCubemapFog::GetActive() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvCubemapFog", "m_bActive");
}

void GCEnvCubemapFog::SetActive(bool value) {
    SetSchemaValue(m_ptr, "CEnvCubemapFog", "m_bActive", false, value);
}

bool GCEnvCubemapFog::GetStartDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvCubemapFog", "m_bStartDisabled");
}

void GCEnvCubemapFog::SetStartDisabled(bool value) {
    SetSchemaValue(m_ptr, "CEnvCubemapFog", "m_bStartDisabled", false, value);
}

float GCEnvCubemapFog::GetFogMaxOpacity() const {
    return GetSchemaValue<float>(m_ptr, "CEnvCubemapFog", "m_flFogMaxOpacity");
}

void GCEnvCubemapFog::SetFogMaxOpacity(float value) {
    SetSchemaValue(m_ptr, "CEnvCubemapFog", "m_flFogMaxOpacity", false, value);
}

int32_t GCEnvCubemapFog::GetCubemapSourceType() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvCubemapFog", "m_nCubemapSourceType");
}

void GCEnvCubemapFog::SetCubemapSourceType(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvCubemapFog", "m_nCubemapSourceType", false, value);
}

CUtlSymbolLarge GCEnvCubemapFog::GetSkyEntity() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvCubemapFog", "m_iszSkyEntity");
}

void GCEnvCubemapFog::SetSkyEntity(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEnvCubemapFog", "m_iszSkyEntity", false, value);
}

bool GCEnvCubemapFog::GetHasHeightFogEnd() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvCubemapFog", "m_bHasHeightFogEnd");
}

void GCEnvCubemapFog::SetHasHeightFogEnd(bool value) {
    SetSchemaValue(m_ptr, "CEnvCubemapFog", "m_bHasHeightFogEnd", false, value);
}

bool GCEnvCubemapFog::GetFirstTime() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvCubemapFog", "m_bFirstTime");
}

void GCEnvCubemapFog::SetFirstTime(bool value) {
    SetSchemaValue(m_ptr, "CEnvCubemapFog", "m_bFirstTime", false, value);
}

std::string GCEnvCubemapFog::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvCubemapFog::IsValid() {
    return (m_ptr != nullptr);
}

GCBaseButton::GCBaseButton(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBaseButton::GCBaseButton(void *ptr) {
    m_ptr = ptr;
}

QAngle GCBaseButton::GetMoveEntitySpace() const {
    return GetSchemaValue<QAngle>(m_ptr, "CBaseButton", "m_angMoveEntitySpace");
}

void GCBaseButton::SetMoveEntitySpace(QAngle value) {
    SetSchemaValue(m_ptr, "CBaseButton", "m_angMoveEntitySpace", false, value);
}

bool GCBaseButton::GetStayPushed() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseButton", "m_fStayPushed");
}

void GCBaseButton::SetStayPushed(bool value) {
    SetSchemaValue(m_ptr, "CBaseButton", "m_fStayPushed", false, value);
}

bool GCBaseButton::GetRotating() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseButton", "m_fRotating");
}

void GCBaseButton::SetRotating(bool value) {
    SetSchemaValue(m_ptr, "CBaseButton", "m_fRotating", false, value);
}

Glocksound_t GCBaseButton::GetLs() const {
    return GetSchemaValue<Glocksound_t>(m_ptr, "CBaseButton", "m_ls");
}

void GCBaseButton::SetLs(Glocksound_t value) {
    SetSchemaValue(m_ptr, "CBaseButton", "m_ls", false, value);
}

CUtlSymbolLarge GCBaseButton::GetUseSound() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBaseButton", "m_sUseSound");
}

void GCBaseButton::SetUseSound(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBaseButton", "m_sUseSound", false, value);
}

CUtlSymbolLarge GCBaseButton::GetLockedSound() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBaseButton", "m_sLockedSound");
}

void GCBaseButton::SetLockedSound(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBaseButton", "m_sLockedSound", false, value);
}

CUtlSymbolLarge GCBaseButton::GetUnlockedSound() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBaseButton", "m_sUnlockedSound");
}

void GCBaseButton::SetUnlockedSound(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBaseButton", "m_sUnlockedSound", false, value);
}

CUtlSymbolLarge GCBaseButton::GetOverrideAnticipationName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBaseButton", "m_sOverrideAnticipationName");
}

void GCBaseButton::SetOverrideAnticipationName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBaseButton", "m_sOverrideAnticipationName", false, value);
}

bool GCBaseButton::GetLocked() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseButton", "m_bLocked");
}

void GCBaseButton::SetLocked(bool value) {
    SetSchemaValue(m_ptr, "CBaseButton", "m_bLocked", false, value);
}

bool GCBaseButton::GetDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseButton", "m_bDisabled");
}

void GCBaseButton::SetDisabled(bool value) {
    SetSchemaValue(m_ptr, "CBaseButton", "m_bDisabled", false, value);
}

bool GCBaseButton::GetSolidBsp() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseButton", "m_bSolidBsp");
}

void GCBaseButton::SetSolidBsp(bool value) {
    SetSchemaValue(m_ptr, "CBaseButton", "m_bSolidBsp", false, value);
}

GCEntityIOOutput GCBaseButton::GetOnDamaged() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseButton", "m_OnDamaged");
}

void GCBaseButton::SetOnDamaged(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseButton", "m_OnDamaged", false, value);
}

GCEntityIOOutput GCBaseButton::GetOnPressed() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseButton", "m_OnPressed");
}

void GCBaseButton::SetOnPressed(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseButton", "m_OnPressed", false, value);
}

GCEntityIOOutput GCBaseButton::GetOnUseLocked() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseButton", "m_OnUseLocked");
}

void GCBaseButton::SetOnUseLocked(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseButton", "m_OnUseLocked", false, value);
}

GCEntityIOOutput GCBaseButton::GetOnIn() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseButton", "m_OnIn");
}

void GCBaseButton::SetOnIn(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseButton", "m_OnIn", false, value);
}

GCEntityIOOutput GCBaseButton::GetOnOut() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseButton", "m_OnOut");
}

void GCBaseButton::SetOnOut(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseButton", "m_OnOut", false, value);
}

int32_t GCBaseButton::GetState() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBaseButton", "m_nState");
}

void GCBaseButton::SetState(int32_t value) {
    SetSchemaValue(m_ptr, "CBaseButton", "m_nState", false, value);
}

GCEntityInstance GCBaseButton::GetConstraint() const {
    GCEntityInstance value(GetSchemaValuePtr<void>(m_ptr, "CBaseButton", "m_hConstraint"));
    return value;
}

void GCBaseButton::SetConstraint(GCEntityInstance* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Constraint' is not possible.\n");
}

GCEntityInstance GCBaseButton::GetConstraintParent() const {
    GCEntityInstance value(GetSchemaValuePtr<void>(m_ptr, "CBaseButton", "m_hConstraintParent"));
    return value;
}

void GCBaseButton::SetConstraintParent(GCEntityInstance* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ConstraintParent' is not possible.\n");
}

bool GCBaseButton::GetForceNpcExclude() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseButton", "m_bForceNpcExclude");
}

void GCBaseButton::SetForceNpcExclude(bool value) {
    SetSchemaValue(m_ptr, "CBaseButton", "m_bForceNpcExclude", false, value);
}

CUtlSymbolLarge GCBaseButton::GetGlowEntity() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBaseButton", "m_sGlowEntity");
}

void GCBaseButton::SetGlowEntity(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBaseButton", "m_sGlowEntity", false, value);
}

GCBaseModelEntity GCBaseButton::GetGlowEntity1() const {
    GCBaseModelEntity value(GetSchemaValuePtr<void>(m_ptr, "CBaseButton", "m_glowEntity"));
    return value;
}

void GCBaseButton::SetGlowEntity1(GCBaseModelEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'GlowEntity1' is not possible.\n");
}

bool GCBaseButton::GetUsable() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseButton", "m_usable");
}

void GCBaseButton::SetUsable(bool value) {
    SetSchemaValue(m_ptr, "CBaseButton", "m_usable", false, value);
}

CUtlSymbolLarge GCBaseButton::GetDisplayText() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBaseButton", "m_szDisplayText");
}

void GCBaseButton::SetDisplayText(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBaseButton", "m_szDisplayText", false, value);
}

std::string GCBaseButton::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBaseButton::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvExplosion::GCEnvExplosion(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvExplosion::GCEnvExplosion(void *ptr) {
    m_ptr = ptr;
}

int32_t GCEnvExplosion::GetMagnitude() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvExplosion", "m_iMagnitude");
}

void GCEnvExplosion::SetMagnitude(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvExplosion", "m_iMagnitude", false, value);
}

float GCEnvExplosion::GetPlayerDamage() const {
    return GetSchemaValue<float>(m_ptr, "CEnvExplosion", "m_flPlayerDamage");
}

void GCEnvExplosion::SetPlayerDamage(float value) {
    SetSchemaValue(m_ptr, "CEnvExplosion", "m_flPlayerDamage", false, value);
}

int32_t GCEnvExplosion::GetRadiusOverride() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvExplosion", "m_iRadiusOverride");
}

void GCEnvExplosion::SetRadiusOverride(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvExplosion", "m_iRadiusOverride", false, value);
}

float GCEnvExplosion::GetInnerRadius() const {
    return GetSchemaValue<float>(m_ptr, "CEnvExplosion", "m_flInnerRadius");
}

void GCEnvExplosion::SetInnerRadius(float value) {
    SetSchemaValue(m_ptr, "CEnvExplosion", "m_flInnerRadius", false, value);
}

int32_t GCEnvExplosion::GetSpriteScale() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvExplosion", "m_spriteScale");
}

void GCEnvExplosion::SetSpriteScale(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvExplosion", "m_spriteScale", false, value);
}

float GCEnvExplosion::GetDamageForce() const {
    return GetSchemaValue<float>(m_ptr, "CEnvExplosion", "m_flDamageForce");
}

void GCEnvExplosion::SetDamageForce(float value) {
    SetSchemaValue(m_ptr, "CEnvExplosion", "m_flDamageForce", false, value);
}

GCBaseEntity GCEnvExplosion::GetInflictor() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CEnvExplosion", "m_hInflictor"));
    return value;
}

void GCEnvExplosion::SetInflictor(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Inflictor' is not possible.\n");
}

int32_t GCEnvExplosion::GetCustomDamageType() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvExplosion", "m_iCustomDamageType");
}

void GCEnvExplosion::SetCustomDamageType(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvExplosion", "m_iCustomDamageType", false, value);
}

CUtlSymbolLarge GCEnvExplosion::GetExplosionType() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvExplosion", "m_iszExplosionType");
}

void GCEnvExplosion::SetExplosionType(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEnvExplosion", "m_iszExplosionType", false, value);
}

CUtlSymbolLarge GCEnvExplosion::GetCustomEffectName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvExplosion", "m_iszCustomEffectName");
}

void GCEnvExplosion::SetCustomEffectName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEnvExplosion", "m_iszCustomEffectName", false, value);
}

CUtlSymbolLarge GCEnvExplosion::GetCustomSoundName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvExplosion", "m_iszCustomSoundName");
}

void GCEnvExplosion::SetCustomSoundName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEnvExplosion", "m_iszCustomSoundName", false, value);
}

Class_T GCEnvExplosion::GetClassIgnore() const {
    return GetSchemaValue<Class_T>(m_ptr, "CEnvExplosion", "m_iClassIgnore");
}

void GCEnvExplosion::SetClassIgnore(Class_T value) {
    SetSchemaValue(m_ptr, "CEnvExplosion", "m_iClassIgnore", false, value);
}

Class_T GCEnvExplosion::GetClassIgnore2() const {
    return GetSchemaValue<Class_T>(m_ptr, "CEnvExplosion", "m_iClassIgnore2");
}

void GCEnvExplosion::SetClassIgnore2(Class_T value) {
    SetSchemaValue(m_ptr, "CEnvExplosion", "m_iClassIgnore2", false, value);
}

CUtlSymbolLarge GCEnvExplosion::GetEntityIgnoreName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvExplosion", "m_iszEntityIgnoreName");
}

void GCEnvExplosion::SetEntityIgnoreName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEnvExplosion", "m_iszEntityIgnoreName", false, value);
}

GCBaseEntity GCEnvExplosion::GetEntityIgnore() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CEnvExplosion", "m_hEntityIgnore"));
    return value;
}

void GCEnvExplosion::SetEntityIgnore(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'EntityIgnore' is not possible.\n");
}

std::string GCEnvExplosion::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvExplosion::IsValid() {
    return (m_ptr != nullptr);
}

GCSoundEventAABBEntity::GCSoundEventAABBEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSoundEventAABBEntity::GCSoundEventAABBEntity(void *ptr) {
    m_ptr = ptr;
}

Vector GCSoundEventAABBEntity::GetMins() const {
    return GetSchemaValue<Vector>(m_ptr, "CSoundEventAABBEntity", "m_vMins");
}

void GCSoundEventAABBEntity::SetMins(Vector value) {
    SetSchemaValue(m_ptr, "CSoundEventAABBEntity", "m_vMins", false, value);
}

Vector GCSoundEventAABBEntity::GetMaxs() const {
    return GetSchemaValue<Vector>(m_ptr, "CSoundEventAABBEntity", "m_vMaxs");
}

void GCSoundEventAABBEntity::SetMaxs(Vector value) {
    SetSchemaValue(m_ptr, "CSoundEventAABBEntity", "m_vMaxs", false, value);
}

std::string GCSoundEventAABBEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSoundEventAABBEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCTriggerLook::GCTriggerLook(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTriggerLook::GCTriggerLook(void *ptr) {
    m_ptr = ptr;
}

GCBaseEntity GCTriggerLook::GetLookTarget() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CTriggerLook", "m_hLookTarget"));
    return value;
}

void GCTriggerLook::SetLookTarget(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'LookTarget' is not possible.\n");
}

float GCTriggerLook::GetFieldOfView() const {
    return GetSchemaValue<float>(m_ptr, "CTriggerLook", "m_flFieldOfView");
}

void GCTriggerLook::SetFieldOfView(float value) {
    SetSchemaValue(m_ptr, "CTriggerLook", "m_flFieldOfView", false, value);
}

float GCTriggerLook::GetLookTime() const {
    return GetSchemaValue<float>(m_ptr, "CTriggerLook", "m_flLookTime");
}

void GCTriggerLook::SetLookTime(float value) {
    SetSchemaValue(m_ptr, "CTriggerLook", "m_flLookTime", false, value);
}

float GCTriggerLook::GetLookTimeTotal() const {
    return GetSchemaValue<float>(m_ptr, "CTriggerLook", "m_flLookTimeTotal");
}

void GCTriggerLook::SetLookTimeTotal(float value) {
    SetSchemaValue(m_ptr, "CTriggerLook", "m_flLookTimeTotal", false, value);
}

float GCTriggerLook::GetTimeoutDuration() const {
    return GetSchemaValue<float>(m_ptr, "CTriggerLook", "m_flTimeoutDuration");
}

void GCTriggerLook::SetTimeoutDuration(float value) {
    SetSchemaValue(m_ptr, "CTriggerLook", "m_flTimeoutDuration", false, value);
}

bool GCTriggerLook::GetTimeoutFired() const {
    return GetSchemaValue<bool>(m_ptr, "CTriggerLook", "m_bTimeoutFired");
}

void GCTriggerLook::SetTimeoutFired(bool value) {
    SetSchemaValue(m_ptr, "CTriggerLook", "m_bTimeoutFired", false, value);
}

bool GCTriggerLook::GetIsLooking() const {
    return GetSchemaValue<bool>(m_ptr, "CTriggerLook", "m_bIsLooking");
}

void GCTriggerLook::SetIsLooking(bool value) {
    SetSchemaValue(m_ptr, "CTriggerLook", "m_bIsLooking", false, value);
}

bool GCTriggerLook::Get2DFOV() const {
    return GetSchemaValue<bool>(m_ptr, "CTriggerLook", "m_b2DFOV");
}

void GCTriggerLook::Set2DFOV(bool value) {
    SetSchemaValue(m_ptr, "CTriggerLook", "m_b2DFOV", false, value);
}

bool GCTriggerLook::GetUseVelocity() const {
    return GetSchemaValue<bool>(m_ptr, "CTriggerLook", "m_bUseVelocity");
}

void GCTriggerLook::SetUseVelocity(bool value) {
    SetSchemaValue(m_ptr, "CTriggerLook", "m_bUseVelocity", false, value);
}

bool GCTriggerLook::GetTestOcclusion() const {
    return GetSchemaValue<bool>(m_ptr, "CTriggerLook", "m_bTestOcclusion");
}

void GCTriggerLook::SetTestOcclusion(bool value) {
    SetSchemaValue(m_ptr, "CTriggerLook", "m_bTestOcclusion", false, value);
}

GCEntityIOOutput GCTriggerLook::GetOnTimeout() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CTriggerLook", "m_OnTimeout");
}

void GCTriggerLook::SetOnTimeout(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CTriggerLook", "m_OnTimeout", false, value);
}

GCEntityIOOutput GCTriggerLook::GetOnStartLook() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CTriggerLook", "m_OnStartLook");
}

void GCTriggerLook::SetOnStartLook(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CTriggerLook", "m_OnStartLook", false, value);
}

GCEntityIOOutput GCTriggerLook::GetOnEndLook() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CTriggerLook", "m_OnEndLook");
}

void GCTriggerLook::SetOnEndLook(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CTriggerLook", "m_OnEndLook", false, value);
}

std::string GCTriggerLook::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTriggerLook::IsValid() {
    return (m_ptr != nullptr);
}

GCEntitySubclassVDataBase::GCEntitySubclassVDataBase(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEntitySubclassVDataBase::GCEntitySubclassVDataBase(void *ptr) {
    m_ptr = ptr;
}

std::string GCEntitySubclassVDataBase::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEntitySubclassVDataBase::IsValid() {
    return (m_ptr != nullptr);
}

GCLogicProximity::GCLogicProximity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCLogicProximity::GCLogicProximity(void *ptr) {
    m_ptr = ptr;
}

std::string GCLogicProximity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCLogicProximity::IsValid() {
    return (m_ptr != nullptr);
}

GCPointClientUIWorldPanel::GCPointClientUIWorldPanel(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPointClientUIWorldPanel::GCPointClientUIWorldPanel(void *ptr) {
    m_ptr = ptr;
}

bool GCPointClientUIWorldPanel::GetIgnoreInput() const {
    return GetSchemaValue<bool>(m_ptr, "CPointClientUIWorldPanel", "m_bIgnoreInput");
}

void GCPointClientUIWorldPanel::SetIgnoreInput(bool value) {
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_bIgnoreInput", false, value);
}

bool GCPointClientUIWorldPanel::GetLit() const {
    return GetSchemaValue<bool>(m_ptr, "CPointClientUIWorldPanel", "m_bLit");
}

void GCPointClientUIWorldPanel::SetLit(bool value) {
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_bLit", false, value);
}

bool GCPointClientUIWorldPanel::GetFollowPlayerAcrossTeleport() const {
    return GetSchemaValue<bool>(m_ptr, "CPointClientUIWorldPanel", "m_bFollowPlayerAcrossTeleport");
}

void GCPointClientUIWorldPanel::SetFollowPlayerAcrossTeleport(bool value) {
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_bFollowPlayerAcrossTeleport", false, value);
}

float GCPointClientUIWorldPanel::GetWidth() const {
    return GetSchemaValue<float>(m_ptr, "CPointClientUIWorldPanel", "m_flWidth");
}

void GCPointClientUIWorldPanel::SetWidth(float value) {
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_flWidth", false, value);
}

float GCPointClientUIWorldPanel::GetHeight() const {
    return GetSchemaValue<float>(m_ptr, "CPointClientUIWorldPanel", "m_flHeight");
}

void GCPointClientUIWorldPanel::SetHeight(float value) {
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_flHeight", false, value);
}

float GCPointClientUIWorldPanel::GetDPI() const {
    return GetSchemaValue<float>(m_ptr, "CPointClientUIWorldPanel", "m_flDPI");
}

void GCPointClientUIWorldPanel::SetDPI(float value) {
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_flDPI", false, value);
}

float GCPointClientUIWorldPanel::GetInteractDistance() const {
    return GetSchemaValue<float>(m_ptr, "CPointClientUIWorldPanel", "m_flInteractDistance");
}

void GCPointClientUIWorldPanel::SetInteractDistance(float value) {
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_flInteractDistance", false, value);
}

float GCPointClientUIWorldPanel::GetDepthOffset() const {
    return GetSchemaValue<float>(m_ptr, "CPointClientUIWorldPanel", "m_flDepthOffset");
}

void GCPointClientUIWorldPanel::SetDepthOffset(float value) {
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_flDepthOffset", false, value);
}

uint32_t GCPointClientUIWorldPanel::GetOwnerContext() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CPointClientUIWorldPanel", "m_unOwnerContext");
}

void GCPointClientUIWorldPanel::SetOwnerContext(uint32_t value) {
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_unOwnerContext", false, value);
}

uint32_t GCPointClientUIWorldPanel::GetHorizontalAlign() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CPointClientUIWorldPanel", "m_unHorizontalAlign");
}

void GCPointClientUIWorldPanel::SetHorizontalAlign(uint32_t value) {
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_unHorizontalAlign", false, value);
}

uint32_t GCPointClientUIWorldPanel::GetVerticalAlign() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CPointClientUIWorldPanel", "m_unVerticalAlign");
}

void GCPointClientUIWorldPanel::SetVerticalAlign(uint32_t value) {
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_unVerticalAlign", false, value);
}

uint32_t GCPointClientUIWorldPanel::GetOrientation() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CPointClientUIWorldPanel", "m_unOrientation");
}

void GCPointClientUIWorldPanel::SetOrientation(uint32_t value) {
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_unOrientation", false, value);
}

bool GCPointClientUIWorldPanel::GetAllowInteractionFromAllSceneWorlds() const {
    return GetSchemaValue<bool>(m_ptr, "CPointClientUIWorldPanel", "m_bAllowInteractionFromAllSceneWorlds");
}

void GCPointClientUIWorldPanel::SetAllowInteractionFromAllSceneWorlds(bool value) {
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_bAllowInteractionFromAllSceneWorlds", false, value);
}

std::vector<CUtlSymbolLarge> GCPointClientUIWorldPanel::GetCSSClasses() const {
    CUtlVector<CUtlSymbolLarge>* vec = GetSchemaValue<CUtlVector<CUtlSymbolLarge>*>(m_ptr, "CPointClientUIWorldPanel", "m_vecCSSClasses"); std::vector<CUtlSymbolLarge> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCPointClientUIWorldPanel::SetCSSClasses(std::vector<CUtlSymbolLarge> value) {
    SetSchemaValueCUtlVector<CUtlSymbolLarge>(m_ptr, "CPointClientUIWorldPanel", "m_vecCSSClasses", false, value);
}

bool GCPointClientUIWorldPanel::GetOpaque() const {
    return GetSchemaValue<bool>(m_ptr, "CPointClientUIWorldPanel", "m_bOpaque");
}

void GCPointClientUIWorldPanel::SetOpaque(bool value) {
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_bOpaque", false, value);
}

bool GCPointClientUIWorldPanel::GetNoDepth() const {
    return GetSchemaValue<bool>(m_ptr, "CPointClientUIWorldPanel", "m_bNoDepth");
}

void GCPointClientUIWorldPanel::SetNoDepth(bool value) {
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_bNoDepth", false, value);
}

bool GCPointClientUIWorldPanel::GetRenderBackface() const {
    return GetSchemaValue<bool>(m_ptr, "CPointClientUIWorldPanel", "m_bRenderBackface");
}

void GCPointClientUIWorldPanel::SetRenderBackface(bool value) {
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_bRenderBackface", false, value);
}

bool GCPointClientUIWorldPanel::GetUseOffScreenIndicator() const {
    return GetSchemaValue<bool>(m_ptr, "CPointClientUIWorldPanel", "m_bUseOffScreenIndicator");
}

void GCPointClientUIWorldPanel::SetUseOffScreenIndicator(bool value) {
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_bUseOffScreenIndicator", false, value);
}

bool GCPointClientUIWorldPanel::GetExcludeFromSaveGames() const {
    return GetSchemaValue<bool>(m_ptr, "CPointClientUIWorldPanel", "m_bExcludeFromSaveGames");
}

void GCPointClientUIWorldPanel::SetExcludeFromSaveGames(bool value) {
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_bExcludeFromSaveGames", false, value);
}

bool GCPointClientUIWorldPanel::GetGrabbable() const {
    return GetSchemaValue<bool>(m_ptr, "CPointClientUIWorldPanel", "m_bGrabbable");
}

void GCPointClientUIWorldPanel::SetGrabbable(bool value) {
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_bGrabbable", false, value);
}

bool GCPointClientUIWorldPanel::GetOnlyRenderToTexture() const {
    return GetSchemaValue<bool>(m_ptr, "CPointClientUIWorldPanel", "m_bOnlyRenderToTexture");
}

void GCPointClientUIWorldPanel::SetOnlyRenderToTexture(bool value) {
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_bOnlyRenderToTexture", false, value);
}

bool GCPointClientUIWorldPanel::GetDisableMipGen() const {
    return GetSchemaValue<bool>(m_ptr, "CPointClientUIWorldPanel", "m_bDisableMipGen");
}

void GCPointClientUIWorldPanel::SetDisableMipGen(bool value) {
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_bDisableMipGen", false, value);
}

int32_t GCPointClientUIWorldPanel::GetExplicitImageLayout() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPointClientUIWorldPanel", "m_nExplicitImageLayout");
}

void GCPointClientUIWorldPanel::SetExplicitImageLayout(int32_t value) {
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_nExplicitImageLayout", false, value);
}

std::string GCPointClientUIWorldPanel::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPointClientUIWorldPanel::IsValid() {
    return (m_ptr != nullptr);
}

GCFilterContext::GCFilterContext(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFilterContext::GCFilterContext(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCFilterContext::GetFilterContext() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFilterContext", "m_iFilterContext");
}

void GCFilterContext::SetFilterContext(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFilterContext", "m_iFilterContext", false, value);
}

std::string GCFilterContext::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFilterContext::IsValid() {
    return (m_ptr != nullptr);
}

GCPathParticleRopeAlias_path_particle_rope_clientside::GCPathParticleRopeAlias_path_particle_rope_clientside(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPathParticleRopeAlias_path_particle_rope_clientside::GCPathParticleRopeAlias_path_particle_rope_clientside(void *ptr) {
    m_ptr = ptr;
}

std::string GCPathParticleRopeAlias_path_particle_rope_clientside::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPathParticleRopeAlias_path_particle_rope_clientside::IsValid() {
    return (m_ptr != nullptr);
}

GCTriggerBuoyancy::GCTriggerBuoyancy(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTriggerBuoyancy::GCTriggerBuoyancy(void *ptr) {
    m_ptr = ptr;
}

GCBuoyancyHelper GCTriggerBuoyancy::GetBuoyancyHelper() const {
    return GetSchemaValue<GCBuoyancyHelper>(m_ptr, "CTriggerBuoyancy", "m_BuoyancyHelper");
}

void GCTriggerBuoyancy::SetBuoyancyHelper(GCBuoyancyHelper value) {
    SetSchemaValue(m_ptr, "CTriggerBuoyancy", "m_BuoyancyHelper", false, value);
}

float GCTriggerBuoyancy::GetFluidDensity() const {
    return GetSchemaValue<float>(m_ptr, "CTriggerBuoyancy", "m_flFluidDensity");
}

void GCTriggerBuoyancy::SetFluidDensity(float value) {
    SetSchemaValue(m_ptr, "CTriggerBuoyancy", "m_flFluidDensity", false, value);
}

std::string GCTriggerBuoyancy::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTriggerBuoyancy::IsValid() {
    return (m_ptr != nullptr);
}

GCFilterAttributeInt::GCFilterAttributeInt(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFilterAttributeInt::GCFilterAttributeInt(void *ptr) {
    m_ptr = ptr;
}

CUtlStringToken GCFilterAttributeInt::GetAttributeName() const {
    return GetSchemaValue<CUtlStringToken>(m_ptr, "CFilterAttributeInt", "m_sAttributeName");
}

void GCFilterAttributeInt::SetAttributeName(CUtlStringToken value) {
    SetSchemaValue(m_ptr, "CFilterAttributeInt", "m_sAttributeName", false, value);
}

std::string GCFilterAttributeInt::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFilterAttributeInt::IsValid() {
    return (m_ptr != nullptr);
}

GCCSPlayer_ActionTrackingServices::GCCSPlayer_ActionTrackingServices(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSPlayer_ActionTrackingServices::GCCSPlayer_ActionTrackingServices(void *ptr) {
    m_ptr = ptr;
}

GCBasePlayerWeapon GCCSPlayer_ActionTrackingServices::GetLastWeaponBeforeC4AutoSwitch() const {
    GCBasePlayerWeapon value(GetSchemaValuePtr<void>(m_ptr, "CCSPlayer_ActionTrackingServices", "m_hLastWeaponBeforeC4AutoSwitch"));
    return value;
}

void GCCSPlayer_ActionTrackingServices::SetLastWeaponBeforeC4AutoSwitch(GCBasePlayerWeapon* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'LastWeaponBeforeC4AutoSwitch' is not possible.\n");
}

bool GCCSPlayer_ActionTrackingServices::GetIsRescuing() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_ActionTrackingServices", "m_bIsRescuing");
}

void GCCSPlayer_ActionTrackingServices::SetIsRescuing(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayer_ActionTrackingServices", "m_bIsRescuing", false, value);
}

GWeaponPurchaseTracker_t GCCSPlayer_ActionTrackingServices::GetWeaponPurchasesThisMatch() const {
    return GetSchemaValue<GWeaponPurchaseTracker_t>(m_ptr, "CCSPlayer_ActionTrackingServices", "m_weaponPurchasesThisMatch");
}

void GCCSPlayer_ActionTrackingServices::SetWeaponPurchasesThisMatch(GWeaponPurchaseTracker_t value) {
    SetSchemaValue(m_ptr, "CCSPlayer_ActionTrackingServices", "m_weaponPurchasesThisMatch", false, value);
}

GWeaponPurchaseTracker_t GCCSPlayer_ActionTrackingServices::GetWeaponPurchasesThisRound() const {
    return GetSchemaValue<GWeaponPurchaseTracker_t>(m_ptr, "CCSPlayer_ActionTrackingServices", "m_weaponPurchasesThisRound");
}

void GCCSPlayer_ActionTrackingServices::SetWeaponPurchasesThisRound(GWeaponPurchaseTracker_t value) {
    SetSchemaValue(m_ptr, "CCSPlayer_ActionTrackingServices", "m_weaponPurchasesThisRound", false, value);
}

std::string GCCSPlayer_ActionTrackingServices::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSPlayer_ActionTrackingServices::IsValid() {
    return (m_ptr != nullptr);
}

GCAISound::GCAISound(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAISound::GCAISound(void *ptr) {
    m_ptr = ptr;
}

SoundTypes_t GCAISound::GetSoundType() const {
    return GetSchemaValue<SoundTypes_t>(m_ptr, "CAISound", "m_iSoundType");
}

void GCAISound::SetSoundType(SoundTypes_t value) {
    SetSchemaValue(m_ptr, "CAISound", "m_iSoundType", false, value);
}

SoundFlags_t GCAISound::GetSoundFlags() const {
    return GetSchemaValue<SoundFlags_t>(m_ptr, "CAISound", "m_iSoundFlags");
}

void GCAISound::SetSoundFlags(SoundFlags_t value) {
    SetSchemaValue(m_ptr, "CAISound", "m_iSoundFlags", false, value);
}

int32_t GCAISound::GetVolume() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAISound", "m_iVolume");
}

void GCAISound::SetVolume(int32_t value) {
    SetSchemaValue(m_ptr, "CAISound", "m_iVolume", false, value);
}

int32_t GCAISound::GetSoundIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAISound", "m_iSoundIndex");
}

void GCAISound::SetSoundIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CAISound", "m_iSoundIndex", false, value);
}

float GCAISound::GetDuration() const {
    return GetSchemaValue<float>(m_ptr, "CAISound", "m_flDuration");
}

void GCAISound::SetDuration(float value) {
    SetSchemaValue(m_ptr, "CAISound", "m_flDuration", false, value);
}

CUtlSymbolLarge GCAISound::GetProxyEntityName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CAISound", "m_iszProxyEntityName");
}

void GCAISound::SetProxyEntityName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CAISound", "m_iszProxyEntityName", false, value);
}

std::string GCAISound::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAISound::IsValid() {
    return (m_ptr != nullptr);
}

GCPointEntityFinder::GCPointEntityFinder(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPointEntityFinder::GCPointEntityFinder(void *ptr) {
    m_ptr = ptr;
}

GCBaseEntity GCPointEntityFinder::GetEntity() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CPointEntityFinder", "m_hEntity"));
    return value;
}

void GCPointEntityFinder::SetEntity(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Entity' is not possible.\n");
}

CUtlSymbolLarge GCPointEntityFinder::GetFilterName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPointEntityFinder", "m_iFilterName");
}

void GCPointEntityFinder::SetFilterName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPointEntityFinder", "m_iFilterName", false, value);
}

GCBaseFilter GCPointEntityFinder::GetFilter() const {
    GCBaseFilter value(GetSchemaValuePtr<void>(m_ptr, "CPointEntityFinder", "m_hFilter"));
    return value;
}

void GCPointEntityFinder::SetFilter(GCBaseFilter* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Filter' is not possible.\n");
}

CUtlSymbolLarge GCPointEntityFinder::GetRefName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPointEntityFinder", "m_iRefName");
}

void GCPointEntityFinder::SetRefName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPointEntityFinder", "m_iRefName", false, value);
}

GCBaseEntity GCPointEntityFinder::GetReference() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CPointEntityFinder", "m_hReference"));
    return value;
}

void GCPointEntityFinder::SetReference(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Reference' is not possible.\n");
}

EntFinderMethod_t GCPointEntityFinder::GetFindMethod() const {
    return GetSchemaValue<EntFinderMethod_t>(m_ptr, "CPointEntityFinder", "m_FindMethod");
}

void GCPointEntityFinder::SetFindMethod(EntFinderMethod_t value) {
    SetSchemaValue(m_ptr, "CPointEntityFinder", "m_FindMethod", false, value);
}

GCEntityIOOutput GCPointEntityFinder::GetOnFoundEntity() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPointEntityFinder", "m_OnFoundEntity");
}

void GCPointEntityFinder::SetOnFoundEntity(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPointEntityFinder", "m_OnFoundEntity", false, value);
}

std::string GCPointEntityFinder::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPointEntityFinder::IsValid() {
    return (m_ptr != nullptr);
}

Gshard_model_desc_t::Gshard_model_desc_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

Gshard_model_desc_t::Gshard_model_desc_t(void *ptr) {
    m_ptr = ptr;
}

int32_t Gshard_model_desc_t::GetModelID() const {
    return GetSchemaValue<int32_t>(m_ptr, "shard_model_desc_t", "m_nModelID");
}

void Gshard_model_desc_t::SetModelID(int32_t value) {
    SetSchemaValue(m_ptr, "shard_model_desc_t", "m_nModelID", true, value);
}

ShardSolid_t Gshard_model_desc_t::GetSolid() const {
    return GetSchemaValue<ShardSolid_t>(m_ptr, "shard_model_desc_t", "m_solid");
}

void Gshard_model_desc_t::SetSolid(ShardSolid_t value) {
    SetSchemaValue(m_ptr, "shard_model_desc_t", "m_solid", true, value);
}

ShatterPanelMode Gshard_model_desc_t::GetShatterPanelMode() const {
    return GetSchemaValue<ShatterPanelMode>(m_ptr, "shard_model_desc_t", "m_ShatterPanelMode");
}

void Gshard_model_desc_t::SetShatterPanelMode(ShatterPanelMode value) {
    SetSchemaValue(m_ptr, "shard_model_desc_t", "m_ShatterPanelMode", true, value);
}

Vector2D Gshard_model_desc_t::GetPanelSize() const {
    return GetSchemaValue<Vector2D>(m_ptr, "shard_model_desc_t", "m_vecPanelSize");
}

void Gshard_model_desc_t::SetPanelSize(Vector2D value) {
    SetSchemaValue(m_ptr, "shard_model_desc_t", "m_vecPanelSize", true, value);
}

Vector2D Gshard_model_desc_t::GetStressPositionA() const {
    return GetSchemaValue<Vector2D>(m_ptr, "shard_model_desc_t", "m_vecStressPositionA");
}

void Gshard_model_desc_t::SetStressPositionA(Vector2D value) {
    SetSchemaValue(m_ptr, "shard_model_desc_t", "m_vecStressPositionA", true, value);
}

Vector2D Gshard_model_desc_t::GetStressPositionB() const {
    return GetSchemaValue<Vector2D>(m_ptr, "shard_model_desc_t", "m_vecStressPositionB");
}

void Gshard_model_desc_t::SetStressPositionB(Vector2D value) {
    SetSchemaValue(m_ptr, "shard_model_desc_t", "m_vecStressPositionB", true, value);
}

std::vector<Vector2D> Gshard_model_desc_t::GetPanelVertices() const {
    CUtlVector<Vector2D>* vec = GetSchemaValue<CUtlVector<Vector2D>*>(m_ptr, "shard_model_desc_t", "m_vecPanelVertices"); std::vector<Vector2D> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void Gshard_model_desc_t::SetPanelVertices(std::vector<Vector2D> value) {
    SetSchemaValueCUtlVector<Vector2D>(m_ptr, "shard_model_desc_t", "m_vecPanelVertices", true, value);
}

float Gshard_model_desc_t::GetGlassHalfThickness() const {
    return GetSchemaValue<float>(m_ptr, "shard_model_desc_t", "m_flGlassHalfThickness");
}

void Gshard_model_desc_t::SetGlassHalfThickness(float value) {
    SetSchemaValue(m_ptr, "shard_model_desc_t", "m_flGlassHalfThickness", true, value);
}

bool Gshard_model_desc_t::GetHasParent() const {
    return GetSchemaValue<bool>(m_ptr, "shard_model_desc_t", "m_bHasParent");
}

void Gshard_model_desc_t::SetHasParent(bool value) {
    SetSchemaValue(m_ptr, "shard_model_desc_t", "m_bHasParent", true, value);
}

bool Gshard_model_desc_t::GetParentFrozen() const {
    return GetSchemaValue<bool>(m_ptr, "shard_model_desc_t", "m_bParentFrozen");
}

void Gshard_model_desc_t::SetParentFrozen(bool value) {
    SetSchemaValue(m_ptr, "shard_model_desc_t", "m_bParentFrozen", true, value);
}

CUtlStringToken Gshard_model_desc_t::GetSurfacePropStringToken() const {
    return GetSchemaValue<CUtlStringToken>(m_ptr, "shard_model_desc_t", "m_SurfacePropStringToken");
}

void Gshard_model_desc_t::SetSurfacePropStringToken(CUtlStringToken value) {
    SetSchemaValue(m_ptr, "shard_model_desc_t", "m_SurfacePropStringToken", true, value);
}

std::string Gshard_model_desc_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool Gshard_model_desc_t::IsValid() {
    return (m_ptr != nullptr);
}

GCPhysicsPropRespawnable::GCPhysicsPropRespawnable(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPhysicsPropRespawnable::GCPhysicsPropRespawnable(void *ptr) {
    m_ptr = ptr;
}

Vector GCPhysicsPropRespawnable::GetOriginalSpawnOrigin() const {
    return GetSchemaValue<Vector>(m_ptr, "CPhysicsPropRespawnable", "m_vOriginalSpawnOrigin");
}

void GCPhysicsPropRespawnable::SetOriginalSpawnOrigin(Vector value) {
    SetSchemaValue(m_ptr, "CPhysicsPropRespawnable", "m_vOriginalSpawnOrigin", false, value);
}

QAngle GCPhysicsPropRespawnable::GetOriginalSpawnAngles() const {
    return GetSchemaValue<QAngle>(m_ptr, "CPhysicsPropRespawnable", "m_vOriginalSpawnAngles");
}

void GCPhysicsPropRespawnable::SetOriginalSpawnAngles(QAngle value) {
    SetSchemaValue(m_ptr, "CPhysicsPropRespawnable", "m_vOriginalSpawnAngles", false, value);
}

Vector GCPhysicsPropRespawnable::GetOriginalMins() const {
    return GetSchemaValue<Vector>(m_ptr, "CPhysicsPropRespawnable", "m_vOriginalMins");
}

void GCPhysicsPropRespawnable::SetOriginalMins(Vector value) {
    SetSchemaValue(m_ptr, "CPhysicsPropRespawnable", "m_vOriginalMins", false, value);
}

Vector GCPhysicsPropRespawnable::GetOriginalMaxs() const {
    return GetSchemaValue<Vector>(m_ptr, "CPhysicsPropRespawnable", "m_vOriginalMaxs");
}

void GCPhysicsPropRespawnable::SetOriginalMaxs(Vector value) {
    SetSchemaValue(m_ptr, "CPhysicsPropRespawnable", "m_vOriginalMaxs", false, value);
}

float GCPhysicsPropRespawnable::GetRespawnDuration() const {
    return GetSchemaValue<float>(m_ptr, "CPhysicsPropRespawnable", "m_flRespawnDuration");
}

void GCPhysicsPropRespawnable::SetRespawnDuration(float value) {
    SetSchemaValue(m_ptr, "CPhysicsPropRespawnable", "m_flRespawnDuration", false, value);
}

std::string GCPhysicsPropRespawnable::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPhysicsPropRespawnable::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvSky::GCEnvSky(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvSky::GCEnvSky(void *ptr) {
    m_ptr = ptr;
}

bool GCEnvSky::GetStartDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvSky", "m_bStartDisabled");
}

void GCEnvSky::SetStartDisabled(bool value) {
    SetSchemaValue(m_ptr, "CEnvSky", "m_bStartDisabled", false, value);
}

Color GCEnvSky::GetTintColor() const {
    return GetSchemaValue<Color>(m_ptr, "CEnvSky", "m_vTintColor");
}

void GCEnvSky::SetTintColor(Color value) {
    SetSchemaValue(m_ptr, "CEnvSky", "m_vTintColor", false, value);
}

Color GCEnvSky::GetTintColorLightingOnly() const {
    return GetSchemaValue<Color>(m_ptr, "CEnvSky", "m_vTintColorLightingOnly");
}

void GCEnvSky::SetTintColorLightingOnly(Color value) {
    SetSchemaValue(m_ptr, "CEnvSky", "m_vTintColorLightingOnly", false, value);
}

float GCEnvSky::GetBrightnessScale() const {
    return GetSchemaValue<float>(m_ptr, "CEnvSky", "m_flBrightnessScale");
}

void GCEnvSky::SetBrightnessScale(float value) {
    SetSchemaValue(m_ptr, "CEnvSky", "m_flBrightnessScale", false, value);
}

int32_t GCEnvSky::GetFogType() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvSky", "m_nFogType");
}

void GCEnvSky::SetFogType(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvSky", "m_nFogType", false, value);
}

float GCEnvSky::GetFogMinStart() const {
    return GetSchemaValue<float>(m_ptr, "CEnvSky", "m_flFogMinStart");
}

void GCEnvSky::SetFogMinStart(float value) {
    SetSchemaValue(m_ptr, "CEnvSky", "m_flFogMinStart", false, value);
}

float GCEnvSky::GetFogMinEnd() const {
    return GetSchemaValue<float>(m_ptr, "CEnvSky", "m_flFogMinEnd");
}

void GCEnvSky::SetFogMinEnd(float value) {
    SetSchemaValue(m_ptr, "CEnvSky", "m_flFogMinEnd", false, value);
}

float GCEnvSky::GetFogMaxStart() const {
    return GetSchemaValue<float>(m_ptr, "CEnvSky", "m_flFogMaxStart");
}

void GCEnvSky::SetFogMaxStart(float value) {
    SetSchemaValue(m_ptr, "CEnvSky", "m_flFogMaxStart", false, value);
}

float GCEnvSky::GetFogMaxEnd() const {
    return GetSchemaValue<float>(m_ptr, "CEnvSky", "m_flFogMaxEnd");
}

void GCEnvSky::SetFogMaxEnd(float value) {
    SetSchemaValue(m_ptr, "CEnvSky", "m_flFogMaxEnd", false, value);
}

bool GCEnvSky::GetEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvSky", "m_bEnabled");
}

void GCEnvSky::SetEnabled(bool value) {
    SetSchemaValue(m_ptr, "CEnvSky", "m_bEnabled", false, value);
}

std::string GCEnvSky::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvSky::IsValid() {
    return (m_ptr != nullptr);
}

GCPointVelocitySensor::GCPointVelocitySensor(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPointVelocitySensor::GCPointVelocitySensor(void *ptr) {
    m_ptr = ptr;
}

GCBaseEntity GCPointVelocitySensor::GetTargetEntity() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CPointVelocitySensor", "m_hTargetEntity"));
    return value;
}

void GCPointVelocitySensor::SetTargetEntity(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'TargetEntity' is not possible.\n");
}

Vector GCPointVelocitySensor::GetAxis() const {
    return GetSchemaValue<Vector>(m_ptr, "CPointVelocitySensor", "m_vecAxis");
}

void GCPointVelocitySensor::SetAxis(Vector value) {
    SetSchemaValue(m_ptr, "CPointVelocitySensor", "m_vecAxis", false, value);
}

bool GCPointVelocitySensor::GetEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CPointVelocitySensor", "m_bEnabled");
}

void GCPointVelocitySensor::SetEnabled(bool value) {
    SetSchemaValue(m_ptr, "CPointVelocitySensor", "m_bEnabled", false, value);
}

float GCPointVelocitySensor::GetPrevVelocity() const {
    return GetSchemaValue<float>(m_ptr, "CPointVelocitySensor", "m_fPrevVelocity");
}

void GCPointVelocitySensor::SetPrevVelocity(float value) {
    SetSchemaValue(m_ptr, "CPointVelocitySensor", "m_fPrevVelocity", false, value);
}

float GCPointVelocitySensor::GetAvgInterval() const {
    return GetSchemaValue<float>(m_ptr, "CPointVelocitySensor", "m_flAvgInterval");
}

void GCPointVelocitySensor::SetAvgInterval(float value) {
    SetSchemaValue(m_ptr, "CPointVelocitySensor", "m_flAvgInterval", false, value);
}

std::string GCPointVelocitySensor::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPointVelocitySensor::IsValid() {
    return (m_ptr != nullptr);
}

GCFilterMassGreater::GCFilterMassGreater(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFilterMassGreater::GCFilterMassGreater(void *ptr) {
    m_ptr = ptr;
}

float GCFilterMassGreater::GetFilterMass() const {
    return GetSchemaValue<float>(m_ptr, "CFilterMassGreater", "m_fFilterMass");
}

void GCFilterMassGreater::SetFilterMass(float value) {
    SetSchemaValue(m_ptr, "CFilterMassGreater", "m_fFilterMass", false, value);
}

std::string GCFilterMassGreater::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFilterMassGreater::IsValid() {
    return (m_ptr != nullptr);
}

GFilterTeam::GFilterTeam(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFilterTeam::GFilterTeam(void *ptr) {
    m_ptr = ptr;
}

int32_t GFilterTeam::GetFilterTeam() const {
    return GetSchemaValue<int32_t>(m_ptr, "FilterTeam", "m_iFilterTeam");
}

void GFilterTeam::SetFilterTeam(int32_t value) {
    SetSchemaValue(m_ptr, "FilterTeam", "m_iFilterTeam", false, value);
}

std::string GFilterTeam::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFilterTeam::IsValid() {
    return (m_ptr != nullptr);
}

GCFuncTankTrain::GCFuncTankTrain(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFuncTankTrain::GCFuncTankTrain(void *ptr) {
    m_ptr = ptr;
}

GCEntityIOOutput GCFuncTankTrain::GetOnDeath() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CFuncTankTrain", "m_OnDeath");
}

void GCFuncTankTrain::SetOnDeath(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CFuncTankTrain", "m_OnDeath", false, value);
}

std::string GCFuncTankTrain::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFuncTankTrain::IsValid() {
    return (m_ptr != nullptr);
}

GCNullEntity::GCNullEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNullEntity::GCNullEntity(void *ptr) {
    m_ptr = ptr;
}

std::string GCNullEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNullEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCCSPointScriptExtensions_observer::GCCSPointScriptExtensions_observer(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSPointScriptExtensions_observer::GCCSPointScriptExtensions_observer(void *ptr) {
    m_ptr = ptr;
}

std::string GCCSPointScriptExtensions_observer::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSPointScriptExtensions_observer::IsValid() {
    return (m_ptr != nullptr);
}

GCMarkupVolumeTagged::GCMarkupVolumeTagged(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMarkupVolumeTagged::GCMarkupVolumeTagged(void *ptr) {
    m_ptr = ptr;
}

bool GCMarkupVolumeTagged::GetIsGroup() const {
    return GetSchemaValue<bool>(m_ptr, "CMarkupVolumeTagged", "m_bIsGroup");
}

void GCMarkupVolumeTagged::SetIsGroup(bool value) {
    SetSchemaValue(m_ptr, "CMarkupVolumeTagged", "m_bIsGroup", false, value);
}

bool GCMarkupVolumeTagged::GetGroupByPrefab() const {
    return GetSchemaValue<bool>(m_ptr, "CMarkupVolumeTagged", "m_bGroupByPrefab");
}

void GCMarkupVolumeTagged::SetGroupByPrefab(bool value) {
    SetSchemaValue(m_ptr, "CMarkupVolumeTagged", "m_bGroupByPrefab", false, value);
}

bool GCMarkupVolumeTagged::GetGroupByVolume() const {
    return GetSchemaValue<bool>(m_ptr, "CMarkupVolumeTagged", "m_bGroupByVolume");
}

void GCMarkupVolumeTagged::SetGroupByVolume(bool value) {
    SetSchemaValue(m_ptr, "CMarkupVolumeTagged", "m_bGroupByVolume", false, value);
}

bool GCMarkupVolumeTagged::GetGroupOtherGroups() const {
    return GetSchemaValue<bool>(m_ptr, "CMarkupVolumeTagged", "m_bGroupOtherGroups");
}

void GCMarkupVolumeTagged::SetGroupOtherGroups(bool value) {
    SetSchemaValue(m_ptr, "CMarkupVolumeTagged", "m_bGroupOtherGroups", false, value);
}

bool GCMarkupVolumeTagged::GetIsInGroup() const {
    return GetSchemaValue<bool>(m_ptr, "CMarkupVolumeTagged", "m_bIsInGroup");
}

void GCMarkupVolumeTagged::SetIsInGroup(bool value) {
    SetSchemaValue(m_ptr, "CMarkupVolumeTagged", "m_bIsInGroup", false, value);
}

std::string GCMarkupVolumeTagged::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMarkupVolumeTagged::IsValid() {
    return (m_ptr != nullptr);
}

GCBuyZone::GCBuyZone(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBuyZone::GCBuyZone(void *ptr) {
    m_ptr = ptr;
}

int32_t GCBuyZone::GetLegacyTeamNum() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBuyZone", "m_LegacyTeamNum");
}

void GCBuyZone::SetLegacyTeamNum(int32_t value) {
    SetSchemaValue(m_ptr, "CBuyZone", "m_LegacyTeamNum", false, value);
}

std::string GCBuyZone::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBuyZone::IsValid() {
    return (m_ptr != nullptr);
}

GCPointTemplate::GCPointTemplate(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPointTemplate::GCPointTemplate(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCPointTemplate::GetWorldName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPointTemplate", "m_iszWorldName");
}

void GCPointTemplate::SetWorldName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPointTemplate", "m_iszWorldName", false, value);
}

CUtlSymbolLarge GCPointTemplate::GetSource2EntityLumpName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPointTemplate", "m_iszSource2EntityLumpName");
}

void GCPointTemplate::SetSource2EntityLumpName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPointTemplate", "m_iszSource2EntityLumpName", false, value);
}

CUtlSymbolLarge GCPointTemplate::GetEntityFilterName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPointTemplate", "m_iszEntityFilterName");
}

void GCPointTemplate::SetEntityFilterName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPointTemplate", "m_iszEntityFilterName", false, value);
}

float GCPointTemplate::GetTimeoutInterval() const {
    return GetSchemaValue<float>(m_ptr, "CPointTemplate", "m_flTimeoutInterval");
}

void GCPointTemplate::SetTimeoutInterval(float value) {
    SetSchemaValue(m_ptr, "CPointTemplate", "m_flTimeoutInterval", false, value);
}

bool GCPointTemplate::GetAsynchronouslySpawnEntities() const {
    return GetSchemaValue<bool>(m_ptr, "CPointTemplate", "m_bAsynchronouslySpawnEntities");
}

void GCPointTemplate::SetAsynchronouslySpawnEntities(bool value) {
    SetSchemaValue(m_ptr, "CPointTemplate", "m_bAsynchronouslySpawnEntities", false, value);
}

GCEntityIOOutput GCPointTemplate::GetOutputOnSpawned() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPointTemplate", "m_pOutputOnSpawned");
}

void GCPointTemplate::SetOutputOnSpawned(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPointTemplate", "m_pOutputOnSpawned", false, value);
}

PointTemplateClientOnlyEntityBehavior_t GCPointTemplate::GetClientOnlyEntityBehavior() const {
    return GetSchemaValue<PointTemplateClientOnlyEntityBehavior_t>(m_ptr, "CPointTemplate", "m_clientOnlyEntityBehavior");
}

void GCPointTemplate::SetClientOnlyEntityBehavior(PointTemplateClientOnlyEntityBehavior_t value) {
    SetSchemaValue(m_ptr, "CPointTemplate", "m_clientOnlyEntityBehavior", false, value);
}

PointTemplateOwnerSpawnGroupType_t GCPointTemplate::GetOwnerSpawnGroupType() const {
    return GetSchemaValue<PointTemplateOwnerSpawnGroupType_t>(m_ptr, "CPointTemplate", "m_ownerSpawnGroupType");
}

void GCPointTemplate::SetOwnerSpawnGroupType(PointTemplateOwnerSpawnGroupType_t value) {
    SetSchemaValue(m_ptr, "CPointTemplate", "m_ownerSpawnGroupType", false, value);
}

std::vector<uint32> GCPointTemplate::GetCreatedSpawnGroupHandles() const {
    CUtlVector<uint32>* vec = GetSchemaValue<CUtlVector<uint32>*>(m_ptr, "CPointTemplate", "m_createdSpawnGroupHandles"); std::vector<uint32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCPointTemplate::SetCreatedSpawnGroupHandles(std::vector<uint32> value) {
    SetSchemaValueCUtlVector<uint32>(m_ptr, "CPointTemplate", "m_createdSpawnGroupHandles", false, value);
}

std::vector<GCEntityInstance*> GCPointTemplate::GetSpawnedEntityHandles() const {
    CUtlVector<GCEntityInstance*>* vec = GetSchemaValue<CUtlVector<GCEntityInstance*>*>(m_ptr, "CPointTemplate", "m_SpawnedEntityHandles"); std::vector<GCEntityInstance*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCPointTemplate::SetSpawnedEntityHandles(std::vector<GCEntityInstance*> value) {
    SetSchemaValueCUtlVector<GCEntityInstance*>(m_ptr, "CPointTemplate", "m_SpawnedEntityHandles", false, value);
}

std::string GCPointTemplate::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPointTemplate::IsValid() {
    return (m_ptr != nullptr);
}

GCTripWireFire::GCTripWireFire(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTripWireFire::GCTripWireFire(void *ptr) {
    m_ptr = ptr;
}

std::string GCTripWireFire::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTripWireFire::IsValid() {
    return (m_ptr != nullptr);
}

GCPhysForce::GCPhysForce(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPhysForce::GCPhysForce(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCPhysForce::GetNameAttach() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPhysForce", "m_nameAttach");
}

void GCPhysForce::SetNameAttach(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPhysForce", "m_nameAttach", false, value);
}

float GCPhysForce::GetForce() const {
    return GetSchemaValue<float>(m_ptr, "CPhysForce", "m_force");
}

void GCPhysForce::SetForce(float value) {
    SetSchemaValue(m_ptr, "CPhysForce", "m_force", false, value);
}

float GCPhysForce::GetForceTime() const {
    return GetSchemaValue<float>(m_ptr, "CPhysForce", "m_forceTime");
}

void GCPhysForce::SetForceTime(float value) {
    SetSchemaValue(m_ptr, "CPhysForce", "m_forceTime", false, value);
}

GCBaseEntity GCPhysForce::GetAttachedObject() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CPhysForce", "m_attachedObject"));
    return value;
}

void GCPhysForce::SetAttachedObject(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'AttachedObject' is not possible.\n");
}

bool GCPhysForce::GetWasRestored() const {
    return GetSchemaValue<bool>(m_ptr, "CPhysForce", "m_wasRestored");
}

void GCPhysForce::SetWasRestored(bool value) {
    SetSchemaValue(m_ptr, "CPhysForce", "m_wasRestored", false, value);
}

GCConstantForceController GCPhysForce::GetIntegrator() const {
    return GetSchemaValue<GCConstantForceController>(m_ptr, "CPhysForce", "m_integrator");
}

void GCPhysForce::SetIntegrator(GCConstantForceController value) {
    SetSchemaValue(m_ptr, "CPhysForce", "m_integrator", false, value);
}

std::string GCPhysForce::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPhysForce::IsValid() {
    return (m_ptr != nullptr);
}

GCLogicDistanceAutosave::GCLogicDistanceAutosave(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCLogicDistanceAutosave::GCLogicDistanceAutosave(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCLogicDistanceAutosave::GetTargetEntity() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CLogicDistanceAutosave", "m_iszTargetEntity");
}

void GCLogicDistanceAutosave::SetTargetEntity(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CLogicDistanceAutosave", "m_iszTargetEntity", false, value);
}

float GCLogicDistanceAutosave::GetDistanceToPlayer() const {
    return GetSchemaValue<float>(m_ptr, "CLogicDistanceAutosave", "m_flDistanceToPlayer");
}

void GCLogicDistanceAutosave::SetDistanceToPlayer(float value) {
    SetSchemaValue(m_ptr, "CLogicDistanceAutosave", "m_flDistanceToPlayer", false, value);
}

bool GCLogicDistanceAutosave::GetForceNewLevelUnit() const {
    return GetSchemaValue<bool>(m_ptr, "CLogicDistanceAutosave", "m_bForceNewLevelUnit");
}

void GCLogicDistanceAutosave::SetForceNewLevelUnit(bool value) {
    SetSchemaValue(m_ptr, "CLogicDistanceAutosave", "m_bForceNewLevelUnit", false, value);
}

bool GCLogicDistanceAutosave::GetCheckCough() const {
    return GetSchemaValue<bool>(m_ptr, "CLogicDistanceAutosave", "m_bCheckCough");
}

void GCLogicDistanceAutosave::SetCheckCough(bool value) {
    SetSchemaValue(m_ptr, "CLogicDistanceAutosave", "m_bCheckCough", false, value);
}

bool GCLogicDistanceAutosave::GetThinkDangerous() const {
    return GetSchemaValue<bool>(m_ptr, "CLogicDistanceAutosave", "m_bThinkDangerous");
}

void GCLogicDistanceAutosave::SetThinkDangerous(bool value) {
    SetSchemaValue(m_ptr, "CLogicDistanceAutosave", "m_bThinkDangerous", false, value);
}

float GCLogicDistanceAutosave::GetDangerousTime() const {
    return GetSchemaValue<float>(m_ptr, "CLogicDistanceAutosave", "m_flDangerousTime");
}

void GCLogicDistanceAutosave::SetDangerousTime(float value) {
    SetSchemaValue(m_ptr, "CLogicDistanceAutosave", "m_flDangerousTime", false, value);
}

std::string GCLogicDistanceAutosave::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCLogicDistanceAutosave::IsValid() {
    return (m_ptr != nullptr);
}

GCInfoDynamicShadowHint::GCInfoDynamicShadowHint(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCInfoDynamicShadowHint::GCInfoDynamicShadowHint(void *ptr) {
    m_ptr = ptr;
}

bool GCInfoDynamicShadowHint::GetDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CInfoDynamicShadowHint", "m_bDisabled");
}

void GCInfoDynamicShadowHint::SetDisabled(bool value) {
    SetSchemaValue(m_ptr, "CInfoDynamicShadowHint", "m_bDisabled", false, value);
}

float GCInfoDynamicShadowHint::GetRange() const {
    return GetSchemaValue<float>(m_ptr, "CInfoDynamicShadowHint", "m_flRange");
}

void GCInfoDynamicShadowHint::SetRange(float value) {
    SetSchemaValue(m_ptr, "CInfoDynamicShadowHint", "m_flRange", false, value);
}

int32_t GCInfoDynamicShadowHint::GetImportance() const {
    return GetSchemaValue<int32_t>(m_ptr, "CInfoDynamicShadowHint", "m_nImportance");
}

void GCInfoDynamicShadowHint::SetImportance(int32_t value) {
    SetSchemaValue(m_ptr, "CInfoDynamicShadowHint", "m_nImportance", false, value);
}

int32_t GCInfoDynamicShadowHint::GetLightChoice() const {
    return GetSchemaValue<int32_t>(m_ptr, "CInfoDynamicShadowHint", "m_nLightChoice");
}

void GCInfoDynamicShadowHint::SetLightChoice(int32_t value) {
    SetSchemaValue(m_ptr, "CInfoDynamicShadowHint", "m_nLightChoice", false, value);
}

GCBaseEntity GCInfoDynamicShadowHint::GetLight() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CInfoDynamicShadowHint", "m_hLight"));
    return value;
}

void GCInfoDynamicShadowHint::SetLight(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Light' is not possible.\n");
}

std::string GCInfoDynamicShadowHint::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCInfoDynamicShadowHint::IsValid() {
    return (m_ptr != nullptr);
}

GCSoundOpvarSetOBBEntity::GCSoundOpvarSetOBBEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSoundOpvarSetOBBEntity::GCSoundOpvarSetOBBEntity(void *ptr) {
    m_ptr = ptr;
}

std::string GCSoundOpvarSetOBBEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSoundOpvarSetOBBEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvWindShared__WindVariationEvent_t::GCEnvWindShared__WindVariationEvent_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvWindShared__WindVariationEvent_t::GCEnvWindShared__WindVariationEvent_t(void *ptr) {
    m_ptr = ptr;
}

float GCEnvWindShared__WindVariationEvent_t::GetWindAngleVariation() const {
    return GetSchemaValue<float>(m_ptr, "CEnvWindShared__WindVariationEvent_t", "m_flWindAngleVariation");
}

void GCEnvWindShared__WindVariationEvent_t::SetWindAngleVariation(float value) {
    SetSchemaValue(m_ptr, "CEnvWindShared__WindVariationEvent_t", "m_flWindAngleVariation", true, value);
}

float GCEnvWindShared__WindVariationEvent_t::GetWindSpeedVariation() const {
    return GetSchemaValue<float>(m_ptr, "CEnvWindShared__WindVariationEvent_t", "m_flWindSpeedVariation");
}

void GCEnvWindShared__WindVariationEvent_t::SetWindSpeedVariation(float value) {
    SetSchemaValue(m_ptr, "CEnvWindShared__WindVariationEvent_t", "m_flWindSpeedVariation", true, value);
}

std::string GCEnvWindShared__WindVariationEvent_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvWindShared__WindVariationEvent_t::IsValid() {
    return (m_ptr != nullptr);
}

GCTakeDamageInfoAPI::GCTakeDamageInfoAPI(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTakeDamageInfoAPI::GCTakeDamageInfoAPI(void *ptr) {
    m_ptr = ptr;
}

std::string GCTakeDamageInfoAPI::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTakeDamageInfoAPI::IsValid() {
    return (m_ptr != nullptr);
}

GCScriptTriggerOnce::GCScriptTriggerOnce(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCScriptTriggerOnce::GCScriptTriggerOnce(void *ptr) {
    m_ptr = ptr;
}

Vector GCScriptTriggerOnce::GetExtent() const {
    return GetSchemaValue<Vector>(m_ptr, "CScriptTriggerOnce", "m_vExtent");
}

void GCScriptTriggerOnce::SetExtent(Vector value) {
    SetSchemaValue(m_ptr, "CScriptTriggerOnce", "m_vExtent", false, value);
}

std::string GCScriptTriggerOnce::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCScriptTriggerOnce::IsValid() {
    return (m_ptr != nullptr);
}

GCNavWalkable::GCNavWalkable(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNavWalkable::GCNavWalkable(void *ptr) {
    m_ptr = ptr;
}

std::string GCNavWalkable::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNavWalkable::IsValid() {
    return (m_ptr != nullptr);
}

GCFuncMonitor::GCFuncMonitor(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFuncMonitor::GCFuncMonitor(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCFuncMonitor::GetTargetCamera() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CFuncMonitor", "m_targetCamera");
}

void GCFuncMonitor::SetTargetCamera(CUtlString value) {
    SetSchemaValue(m_ptr, "CFuncMonitor", "m_targetCamera", false, value);
}

int32_t GCFuncMonitor::GetResolutionEnum() const {
    return GetSchemaValue<int32_t>(m_ptr, "CFuncMonitor", "m_nResolutionEnum");
}

void GCFuncMonitor::SetResolutionEnum(int32_t value) {
    SetSchemaValue(m_ptr, "CFuncMonitor", "m_nResolutionEnum", false, value);
}

bool GCFuncMonitor::GetRenderShadows() const {
    return GetSchemaValue<bool>(m_ptr, "CFuncMonitor", "m_bRenderShadows");
}

void GCFuncMonitor::SetRenderShadows(bool value) {
    SetSchemaValue(m_ptr, "CFuncMonitor", "m_bRenderShadows", false, value);
}

bool GCFuncMonitor::GetUseUniqueColorTarget() const {
    return GetSchemaValue<bool>(m_ptr, "CFuncMonitor", "m_bUseUniqueColorTarget");
}

void GCFuncMonitor::SetUseUniqueColorTarget(bool value) {
    SetSchemaValue(m_ptr, "CFuncMonitor", "m_bUseUniqueColorTarget", false, value);
}

CUtlString GCFuncMonitor::GetBrushModelName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CFuncMonitor", "m_brushModelName");
}

void GCFuncMonitor::SetBrushModelName(CUtlString value) {
    SetSchemaValue(m_ptr, "CFuncMonitor", "m_brushModelName", false, value);
}

GCBaseEntity GCFuncMonitor::GetTargetCamera1() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CFuncMonitor", "m_hTargetCamera"));
    return value;
}

void GCFuncMonitor::SetTargetCamera1(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'TargetCamera1' is not possible.\n");
}

bool GCFuncMonitor::GetEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CFuncMonitor", "m_bEnabled");
}

void GCFuncMonitor::SetEnabled(bool value) {
    SetSchemaValue(m_ptr, "CFuncMonitor", "m_bEnabled", false, value);
}

bool GCFuncMonitor::GetDraw3DSkybox() const {
    return GetSchemaValue<bool>(m_ptr, "CFuncMonitor", "m_bDraw3DSkybox");
}

void GCFuncMonitor::SetDraw3DSkybox(bool value) {
    SetSchemaValue(m_ptr, "CFuncMonitor", "m_bDraw3DSkybox", false, value);
}

bool GCFuncMonitor::GetStartEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CFuncMonitor", "m_bStartEnabled");
}

void GCFuncMonitor::SetStartEnabled(bool value) {
    SetSchemaValue(m_ptr, "CFuncMonitor", "m_bStartEnabled", false, value);
}

std::string GCFuncMonitor::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFuncMonitor::IsValid() {
    return (m_ptr != nullptr);
}

GCFlashbangProjectile::GCFlashbangProjectile(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFlashbangProjectile::GCFlashbangProjectile(void *ptr) {
    m_ptr = ptr;
}

float GCFlashbangProjectile::GetTimeToDetonate() const {
    return GetSchemaValue<float>(m_ptr, "CFlashbangProjectile", "m_flTimeToDetonate");
}

void GCFlashbangProjectile::SetTimeToDetonate(float value) {
    SetSchemaValue(m_ptr, "CFlashbangProjectile", "m_flTimeToDetonate", false, value);
}

uint8_t GCFlashbangProjectile::GetNumOpponentsHit() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CFlashbangProjectile", "m_numOpponentsHit");
}

void GCFlashbangProjectile::SetNumOpponentsHit(uint8_t value) {
    SetSchemaValue(m_ptr, "CFlashbangProjectile", "m_numOpponentsHit", false, value);
}

uint8_t GCFlashbangProjectile::GetNumTeammatesHit() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CFlashbangProjectile", "m_numTeammatesHit");
}

void GCFlashbangProjectile::SetNumTeammatesHit(uint8_t value) {
    SetSchemaValue(m_ptr, "CFlashbangProjectile", "m_numTeammatesHit", false, value);
}

std::string GCFlashbangProjectile::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFlashbangProjectile::IsValid() {
    return (m_ptr != nullptr);
}

GCPointClientUIWorldTextPanel::GCPointClientUIWorldTextPanel(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPointClientUIWorldTextPanel::GCPointClientUIWorldTextPanel(void *ptr) {
    m_ptr = ptr;
}

std::string GCPointClientUIWorldTextPanel::GetMessageText() const {
    return GetSchemaValuePtr<char>(m_ptr, "CPointClientUIWorldTextPanel", "m_messageText");
}

void GCPointClientUIWorldTextPanel::SetMessageText(std::string value) {
    WriteSchemaPtrValue(m_ptr, "CPointClientUIWorldTextPanel", "m_messageText", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 512);
}

std::string GCPointClientUIWorldTextPanel::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPointClientUIWorldTextPanel::IsValid() {
    return (m_ptr != nullptr);
}

GCInfoInstructorHintTarget::GCInfoInstructorHintTarget(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCInfoInstructorHintTarget::GCInfoInstructorHintTarget(void *ptr) {
    m_ptr = ptr;
}

std::string GCInfoInstructorHintTarget::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCInfoInstructorHintTarget::IsValid() {
    return (m_ptr != nullptr);
}

GCCSPlayer_HostageServices::GCCSPlayer_HostageServices(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSPlayer_HostageServices::GCCSPlayer_HostageServices(void *ptr) {
    m_ptr = ptr;
}

GCBaseEntity GCCSPlayer_HostageServices::GetCarriedHostage() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CCSPlayer_HostageServices", "m_hCarriedHostage"));
    return value;
}

void GCCSPlayer_HostageServices::SetCarriedHostage(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'CarriedHostage' is not possible.\n");
}

GCBaseEntity GCCSPlayer_HostageServices::GetCarriedHostageProp() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CCSPlayer_HostageServices", "m_hCarriedHostageProp"));
    return value;
}

void GCCSPlayer_HostageServices::SetCarriedHostageProp(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'CarriedHostageProp' is not possible.\n");
}

std::string GCCSPlayer_HostageServices::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSPlayer_HostageServices::IsValid() {
    return (m_ptr != nullptr);
}

GCWeaponSSG08::GCWeaponSSG08(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWeaponSSG08::GCWeaponSSG08(void *ptr) {
    m_ptr = ptr;
}

std::string GCWeaponSSG08::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWeaponSSG08::IsValid() {
    return (m_ptr != nullptr);
}

GCBreachCharge::GCBreachCharge(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBreachCharge::GCBreachCharge(void *ptr) {
    m_ptr = ptr;
}

std::string GCBreachCharge::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBreachCharge::IsValid() {
    return (m_ptr != nullptr);
}

GCLogicBranch::GCLogicBranch(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCLogicBranch::GCLogicBranch(void *ptr) {
    m_ptr = ptr;
}

bool GCLogicBranch::GetInValue() const {
    return GetSchemaValue<bool>(m_ptr, "CLogicBranch", "m_bInValue");
}

void GCLogicBranch::SetInValue(bool value) {
    SetSchemaValue(m_ptr, "CLogicBranch", "m_bInValue", false, value);
}

GCEntityIOOutput GCLogicBranch::GetOnTrue() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CLogicBranch", "m_OnTrue");
}

void GCLogicBranch::SetOnTrue(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CLogicBranch", "m_OnTrue", false, value);
}

GCEntityIOOutput GCLogicBranch::GetOnFalse() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CLogicBranch", "m_OnFalse");
}

void GCLogicBranch::SetOnFalse(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CLogicBranch", "m_OnFalse", false, value);
}

std::string GCLogicBranch::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCLogicBranch::IsValid() {
    return (m_ptr != nullptr);
}

GCWeaponUMP45::GCWeaponUMP45(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWeaponUMP45::GCWeaponUMP45(void *ptr) {
    m_ptr = ptr;
}

std::string GCWeaponUMP45::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWeaponUMP45::IsValid() {
    return (m_ptr != nullptr);
}

GCSpriteAlias_env_glow::GCSpriteAlias_env_glow(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSpriteAlias_env_glow::GCSpriteAlias_env_glow(void *ptr) {
    m_ptr = ptr;
}

std::string GCSpriteAlias_env_glow::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSpriteAlias_env_glow::IsValid() {
    return (m_ptr != nullptr);
}

GCPhysicalButton::GCPhysicalButton(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPhysicalButton::GCPhysicalButton(void *ptr) {
    m_ptr = ptr;
}

std::string GCPhysicalButton::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPhysicalButton::IsValid() {
    return (m_ptr != nullptr);
}

GCPhysLength::GCPhysLength(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPhysLength::GCPhysLength(void *ptr) {
    m_ptr = ptr;
}

std::vector<Vector> GCPhysLength::GetOffset() const {
    Vector* outValue = GetSchemaValue<Vector*>(m_ptr, "CPhysLength", "m_offset"); std::vector<Vector> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCPhysLength::SetOffset(std::vector<Vector> value) {
    Vector* outValue = GetSchemaValue<Vector*>(m_ptr, "CPhysLength", "m_offset"); for(int i = 0; i < 2; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CPhysLength", "m_offset", false, outValue);
}

Vector GCPhysLength::GetAttach() const {
    return GetSchemaValue<Vector>(m_ptr, "CPhysLength", "m_vecAttach");
}

void GCPhysLength::SetAttach(Vector value) {
    SetSchemaValue(m_ptr, "CPhysLength", "m_vecAttach", false, value);
}

float GCPhysLength::GetAddLength() const {
    return GetSchemaValue<float>(m_ptr, "CPhysLength", "m_addLength");
}

void GCPhysLength::SetAddLength(float value) {
    SetSchemaValue(m_ptr, "CPhysLength", "m_addLength", false, value);
}

float GCPhysLength::GetMinLength() const {
    return GetSchemaValue<float>(m_ptr, "CPhysLength", "m_minLength");
}

void GCPhysLength::SetMinLength(float value) {
    SetSchemaValue(m_ptr, "CPhysLength", "m_minLength", false, value);
}

float GCPhysLength::GetTotalLength() const {
    return GetSchemaValue<float>(m_ptr, "CPhysLength", "m_totalLength");
}

void GCPhysLength::SetTotalLength(float value) {
    SetSchemaValue(m_ptr, "CPhysLength", "m_totalLength", false, value);
}

bool GCPhysLength::GetEnableCollision() const {
    return GetSchemaValue<bool>(m_ptr, "CPhysLength", "m_bEnableCollision");
}

void GCPhysLength::SetEnableCollision(bool value) {
    SetSchemaValue(m_ptr, "CPhysLength", "m_bEnableCollision", false, value);
}

std::string GCPhysLength::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPhysLength::IsValid() {
    return (m_ptr != nullptr);
}

GCLogicNPCCounterOBB::GCLogicNPCCounterOBB(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCLogicNPCCounterOBB::GCLogicNPCCounterOBB(void *ptr) {
    m_ptr = ptr;
}

std::string GCLogicNPCCounterOBB::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCLogicNPCCounterOBB::IsValid() {
    return (m_ptr != nullptr);
}

GCCSGOViewModel::GCCSGOViewModel(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSGOViewModel::GCCSGOViewModel(void *ptr) {
    m_ptr = ptr;
}

bool GCCSGOViewModel::GetShouldIgnoreOffsetAndAccuracy() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGOViewModel", "m_bShouldIgnoreOffsetAndAccuracy");
}

void GCCSGOViewModel::SetShouldIgnoreOffsetAndAccuracy(bool value) {
    SetSchemaValue(m_ptr, "CCSGOViewModel", "m_bShouldIgnoreOffsetAndAccuracy", false, value);
}

uint32_t GCCSGOViewModel::GetWeaponParity() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CCSGOViewModel", "m_nWeaponParity");
}

void GCCSGOViewModel::SetWeaponParity(uint32_t value) {
    SetSchemaValue(m_ptr, "CCSGOViewModel", "m_nWeaponParity", false, value);
}

uint32_t GCCSGOViewModel::GetOldWeaponParity() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CCSGOViewModel", "m_nOldWeaponParity");
}

void GCCSGOViewModel::SetOldWeaponParity(uint32_t value) {
    SetSchemaValue(m_ptr, "CCSGOViewModel", "m_nOldWeaponParity", false, value);
}

std::string GCCSGOViewModel::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSGOViewModel::IsValid() {
    return (m_ptr != nullptr);
}

GCWeaponShield::GCWeaponShield(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWeaponShield::GCWeaponShield(void *ptr) {
    m_ptr = ptr;
}

float GCWeaponShield::GetBulletDamageAbsorbed() const {
    return GetSchemaValue<float>(m_ptr, "CWeaponShield", "m_flBulletDamageAbsorbed");
}

void GCWeaponShield::SetBulletDamageAbsorbed(float value) {
    SetSchemaValue(m_ptr, "CWeaponShield", "m_flBulletDamageAbsorbed", false, value);
}

float GCWeaponShield::GetDisplayHealth() const {
    return GetSchemaValue<float>(m_ptr, "CWeaponShield", "m_flDisplayHealth");
}

void GCWeaponShield::SetDisplayHealth(float value) {
    SetSchemaValue(m_ptr, "CWeaponShield", "m_flDisplayHealth", false, value);
}

std::string GCWeaponShield::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWeaponShield::IsValid() {
    return (m_ptr != nullptr);
}

GCBlood::GCBlood(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBlood::GCBlood(void *ptr) {
    m_ptr = ptr;
}

QAngle GCBlood::GetSprayAngles() const {
    return GetSchemaValue<QAngle>(m_ptr, "CBlood", "m_vecSprayAngles");
}

void GCBlood::SetSprayAngles(QAngle value) {
    SetSchemaValue(m_ptr, "CBlood", "m_vecSprayAngles", false, value);
}

Vector GCBlood::GetSprayDir() const {
    return GetSchemaValue<Vector>(m_ptr, "CBlood", "m_vecSprayDir");
}

void GCBlood::SetSprayDir(Vector value) {
    SetSchemaValue(m_ptr, "CBlood", "m_vecSprayDir", false, value);
}

float GCBlood::GetAmount() const {
    return GetSchemaValue<float>(m_ptr, "CBlood", "m_flAmount");
}

void GCBlood::SetAmount(float value) {
    SetSchemaValue(m_ptr, "CBlood", "m_flAmount", false, value);
}

BloodType GCBlood::GetColor() const {
    return GetSchemaValue<BloodType>(m_ptr, "CBlood", "m_Color");
}

void GCBlood::SetColor(BloodType value) {
    SetSchemaValue(m_ptr, "CBlood", "m_Color", false, value);
}

std::string GCBlood::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBlood::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvFade::GCEnvFade(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvFade::GCEnvFade(void *ptr) {
    m_ptr = ptr;
}

Color GCEnvFade::GetFadeColor() const {
    return GetSchemaValue<Color>(m_ptr, "CEnvFade", "m_fadeColor");
}

void GCEnvFade::SetFadeColor(Color value) {
    SetSchemaValue(m_ptr, "CEnvFade", "m_fadeColor", false, value);
}

float GCEnvFade::GetDuration() const {
    return GetSchemaValue<float>(m_ptr, "CEnvFade", "m_Duration");
}

void GCEnvFade::SetDuration(float value) {
    SetSchemaValue(m_ptr, "CEnvFade", "m_Duration", false, value);
}

float GCEnvFade::GetHoldDuration() const {
    return GetSchemaValue<float>(m_ptr, "CEnvFade", "m_HoldDuration");
}

void GCEnvFade::SetHoldDuration(float value) {
    SetSchemaValue(m_ptr, "CEnvFade", "m_HoldDuration", false, value);
}

GCEntityIOOutput GCEnvFade::GetOnBeginFade() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CEnvFade", "m_OnBeginFade");
}

void GCEnvFade::SetOnBeginFade(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CEnvFade", "m_OnBeginFade", false, value);
}

std::string GCEnvFade::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvFade::IsValid() {
    return (m_ptr != nullptr);
}

GCDynamicPropAlias_cable_dynamic::GCDynamicPropAlias_cable_dynamic(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCDynamicPropAlias_cable_dynamic::GCDynamicPropAlias_cable_dynamic(void *ptr) {
    m_ptr = ptr;
}

std::string GCDynamicPropAlias_cable_dynamic::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCDynamicPropAlias_cable_dynamic::IsValid() {
    return (m_ptr != nullptr);
}

GCCSPlayer_BuyServices::GCCSPlayer_BuyServices(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSPlayer_BuyServices::GCCSPlayer_BuyServices(void *ptr) {
    m_ptr = ptr;
}

std::vector<GSellbackPurchaseEntry_t> GCCSPlayer_BuyServices::GetSellbackPurchaseEntries() const {
    CUtlVector<GSellbackPurchaseEntry_t>* vec = GetSchemaValue<CUtlVector<GSellbackPurchaseEntry_t>*>(m_ptr, "CCSPlayer_BuyServices", "m_vecSellbackPurchaseEntries"); std::vector<GSellbackPurchaseEntry_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCCSPlayer_BuyServices::SetSellbackPurchaseEntries(std::vector<GSellbackPurchaseEntry_t> value) {
    SetSchemaValueCUtlVector<GSellbackPurchaseEntry_t>(m_ptr, "CCSPlayer_BuyServices", "m_vecSellbackPurchaseEntries", false, value);
}

std::string GCCSPlayer_BuyServices::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSPlayer_BuyServices::IsValid() {
    return (m_ptr != nullptr);
}

GCHostageExpresserShim::GCHostageExpresserShim(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCHostageExpresserShim::GCHostageExpresserShim(void *ptr) {
    m_ptr = ptr;
}

GCAI_Expresser GCHostageExpresserShim::GetExpresser() const {
    GCAI_Expresser value(GetSchemaValuePtr<void>(m_ptr, "CHostageExpresserShim", "m_pExpresser"));
    return value;
}

void GCHostageExpresserShim::SetExpresser(GCAI_Expresser* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Expresser' is not possible.\n");
}

std::string GCHostageExpresserShim::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCHostageExpresserShim::IsValid() {
    return (m_ptr != nullptr);
}

GCInferno::GCInferno(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCInferno::GCInferno(void *ptr) {
    m_ptr = ptr;
}

std::vector<Vector> GCInferno::GetFirePositions() const {
    Vector* outValue = GetSchemaValue<Vector*>(m_ptr, "CInferno", "m_firePositions"); std::vector<Vector> ret; for(int i = 0; i < 64; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCInferno::SetFirePositions(std::vector<Vector> value) {
    Vector* outValue = GetSchemaValue<Vector*>(m_ptr, "CInferno", "m_firePositions"); for(int i = 0; i < 64; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CInferno", "m_firePositions", false, outValue);
}

std::vector<Vector> GCInferno::GetFireParentPositions() const {
    Vector* outValue = GetSchemaValue<Vector*>(m_ptr, "CInferno", "m_fireParentPositions"); std::vector<Vector> ret; for(int i = 0; i < 64; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCInferno::SetFireParentPositions(std::vector<Vector> value) {
    Vector* outValue = GetSchemaValue<Vector*>(m_ptr, "CInferno", "m_fireParentPositions"); for(int i = 0; i < 64; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CInferno", "m_fireParentPositions", false, outValue);
}

std::vector<bool> GCInferno::GetFireIsBurning() const {
    bool* outValue = GetSchemaValue<bool*>(m_ptr, "CInferno", "m_bFireIsBurning"); std::vector<bool> ret; for(int i = 0; i < 64; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCInferno::SetFireIsBurning(std::vector<bool> value) {
    bool* outValue = GetSchemaValue<bool*>(m_ptr, "CInferno", "m_bFireIsBurning"); for(int i = 0; i < 64; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CInferno", "m_bFireIsBurning", false, outValue);
}

std::vector<Vector> GCInferno::GetBurnNormal() const {
    Vector* outValue = GetSchemaValue<Vector*>(m_ptr, "CInferno", "m_BurnNormal"); std::vector<Vector> ret; for(int i = 0; i < 64; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCInferno::SetBurnNormal(std::vector<Vector> value) {
    Vector* outValue = GetSchemaValue<Vector*>(m_ptr, "CInferno", "m_BurnNormal"); for(int i = 0; i < 64; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CInferno", "m_BurnNormal", false, outValue);
}

int32_t GCInferno::GetFireCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CInferno", "m_fireCount");
}

void GCInferno::SetFireCount(int32_t value) {
    SetSchemaValue(m_ptr, "CInferno", "m_fireCount", false, value);
}

int32_t GCInferno::GetInfernoType() const {
    return GetSchemaValue<int32_t>(m_ptr, "CInferno", "m_nInfernoType");
}

void GCInferno::SetInfernoType(int32_t value) {
    SetSchemaValue(m_ptr, "CInferno", "m_nInfernoType", false, value);
}

int32_t GCInferno::GetFireEffectTickBegin() const {
    return GetSchemaValue<int32_t>(m_ptr, "CInferno", "m_nFireEffectTickBegin");
}

void GCInferno::SetFireEffectTickBegin(int32_t value) {
    SetSchemaValue(m_ptr, "CInferno", "m_nFireEffectTickBegin", false, value);
}

float GCInferno::GetFireLifetime() const {
    return GetSchemaValue<float>(m_ptr, "CInferno", "m_nFireLifetime");
}

void GCInferno::SetFireLifetime(float value) {
    SetSchemaValue(m_ptr, "CInferno", "m_nFireLifetime", false, value);
}

bool GCInferno::GetInPostEffectTime() const {
    return GetSchemaValue<bool>(m_ptr, "CInferno", "m_bInPostEffectTime");
}

void GCInferno::SetInPostEffectTime(bool value) {
    SetSchemaValue(m_ptr, "CInferno", "m_bInPostEffectTime", false, value);
}

int32_t GCInferno::GetFiresExtinguishCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CInferno", "m_nFiresExtinguishCount");
}

void GCInferno::SetFiresExtinguishCount(int32_t value) {
    SetSchemaValue(m_ptr, "CInferno", "m_nFiresExtinguishCount", false, value);
}

bool GCInferno::GetWasCreatedInSmoke() const {
    return GetSchemaValue<bool>(m_ptr, "CInferno", "m_bWasCreatedInSmoke");
}

void GCInferno::SetWasCreatedInSmoke(bool value) {
    SetSchemaValue(m_ptr, "CInferno", "m_bWasCreatedInSmoke", false, value);
}

GExtent GCInferno::GetExtent() const {
    return GetSchemaValue<GExtent>(m_ptr, "CInferno", "m_extent");
}

void GCInferno::SetExtent(GExtent value) {
    SetSchemaValue(m_ptr, "CInferno", "m_extent", false, value);
}

GCountdownTimer GCInferno::GetDamageTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CInferno", "m_damageTimer");
}

void GCInferno::SetDamageTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CInferno", "m_damageTimer", false, value);
}

GCountdownTimer GCInferno::GetDamageRampTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CInferno", "m_damageRampTimer");
}

void GCInferno::SetDamageRampTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CInferno", "m_damageRampTimer", false, value);
}

Vector GCInferno::GetSplashVelocity() const {
    return GetSchemaValue<Vector>(m_ptr, "CInferno", "m_splashVelocity");
}

void GCInferno::SetSplashVelocity(Vector value) {
    SetSchemaValue(m_ptr, "CInferno", "m_splashVelocity", false, value);
}

Vector GCInferno::GetInitialSplashVelocity() const {
    return GetSchemaValue<Vector>(m_ptr, "CInferno", "m_InitialSplashVelocity");
}

void GCInferno::SetInitialSplashVelocity(Vector value) {
    SetSchemaValue(m_ptr, "CInferno", "m_InitialSplashVelocity", false, value);
}

Vector GCInferno::GetStartPos() const {
    return GetSchemaValue<Vector>(m_ptr, "CInferno", "m_startPos");
}

void GCInferno::SetStartPos(Vector value) {
    SetSchemaValue(m_ptr, "CInferno", "m_startPos", false, value);
}

Vector GCInferno::GetOriginalSpawnLocation() const {
    return GetSchemaValue<Vector>(m_ptr, "CInferno", "m_vecOriginalSpawnLocation");
}

void GCInferno::SetOriginalSpawnLocation(Vector value) {
    SetSchemaValue(m_ptr, "CInferno", "m_vecOriginalSpawnLocation", false, value);
}

GIntervalTimer GCInferno::GetActiveTimer() const {
    return GetSchemaValue<GIntervalTimer>(m_ptr, "CInferno", "m_activeTimer");
}

void GCInferno::SetActiveTimer(GIntervalTimer value) {
    SetSchemaValue(m_ptr, "CInferno", "m_activeTimer", false, value);
}

int32_t GCInferno::GetFireSpawnOffset() const {
    return GetSchemaValue<int32_t>(m_ptr, "CInferno", "m_fireSpawnOffset");
}

void GCInferno::SetFireSpawnOffset(int32_t value) {
    SetSchemaValue(m_ptr, "CInferno", "m_fireSpawnOffset", false, value);
}

int32_t GCInferno::GetMaxFlames() const {
    return GetSchemaValue<int32_t>(m_ptr, "CInferno", "m_nMaxFlames");
}

void GCInferno::SetMaxFlames(int32_t value) {
    SetSchemaValue(m_ptr, "CInferno", "m_nMaxFlames", false, value);
}

int32_t GCInferno::GetSpreadCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CInferno", "m_nSpreadCount");
}

void GCInferno::SetSpreadCount(int32_t value) {
    SetSchemaValue(m_ptr, "CInferno", "m_nSpreadCount", false, value);
}

GCountdownTimer GCInferno::GetBookkeepingTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CInferno", "m_BookkeepingTimer");
}

void GCInferno::SetBookkeepingTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CInferno", "m_BookkeepingTimer", false, value);
}

GCountdownTimer GCInferno::GetNextSpreadTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CInferno", "m_NextSpreadTimer");
}

void GCInferno::SetNextSpreadTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CInferno", "m_NextSpreadTimer", false, value);
}

uint16_t GCInferno::GetSourceItemDefIndex() const {
    return GetSchemaValue<uint16_t>(m_ptr, "CInferno", "m_nSourceItemDefIndex");
}

void GCInferno::SetSourceItemDefIndex(uint16_t value) {
    SetSchemaValue(m_ptr, "CInferno", "m_nSourceItemDefIndex", false, value);
}

std::string GCInferno::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCInferno::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvGlobal::GCEnvGlobal(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvGlobal::GCEnvGlobal(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCEnvGlobal::GetGlobalstate() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvGlobal", "m_globalstate");
}

void GCEnvGlobal::SetGlobalstate(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEnvGlobal", "m_globalstate", false, value);
}

int32_t GCEnvGlobal::GetTriggermode() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvGlobal", "m_triggermode");
}

void GCEnvGlobal::SetTriggermode(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvGlobal", "m_triggermode", false, value);
}

int32_t GCEnvGlobal::GetInitialstate() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvGlobal", "m_initialstate");
}

void GCEnvGlobal::SetInitialstate(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvGlobal", "m_initialstate", false, value);
}

int32_t GCEnvGlobal::GetCounter() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvGlobal", "m_counter");
}

void GCEnvGlobal::SetCounter(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvGlobal", "m_counter", false, value);
}

std::string GCEnvGlobal::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvGlobal::IsValid() {
    return (m_ptr != nullptr);
}

GCFilterName::GCFilterName(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFilterName::GCFilterName(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCFilterName::GetFilterName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFilterName", "m_iFilterName");
}

void GCFilterName::SetFilterName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFilterName", "m_iFilterName", false, value);
}

std::string GCFilterName::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFilterName::IsValid() {
    return (m_ptr != nullptr);
}

GCCSTeam::GCCSTeam(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSTeam::GCCSTeam(void *ptr) {
    m_ptr = ptr;
}

int32_t GCCSTeam::GetLastRecievedShorthandedRoundBonus() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSTeam", "m_nLastRecievedShorthandedRoundBonus");
}

void GCCSTeam::SetLastRecievedShorthandedRoundBonus(int32_t value) {
    SetSchemaValue(m_ptr, "CCSTeam", "m_nLastRecievedShorthandedRoundBonus", false, value);
}

int32_t GCCSTeam::GetShorthandedRoundBonusStartRound() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSTeam", "m_nShorthandedRoundBonusStartRound");
}

void GCCSTeam::SetShorthandedRoundBonusStartRound(int32_t value) {
    SetSchemaValue(m_ptr, "CCSTeam", "m_nShorthandedRoundBonusStartRound", false, value);
}

bool GCCSTeam::GetSurrendered() const {
    return GetSchemaValue<bool>(m_ptr, "CCSTeam", "m_bSurrendered");
}

void GCCSTeam::SetSurrendered(bool value) {
    SetSchemaValue(m_ptr, "CCSTeam", "m_bSurrendered", false, value);
}

std::string GCCSTeam::GetTeamMatchStat() const {
    return GetSchemaValuePtr<char>(m_ptr, "CCSTeam", "m_szTeamMatchStat");
}

void GCCSTeam::SetTeamMatchStat(std::string value) {
    WriteSchemaPtrValue(m_ptr, "CCSTeam", "m_szTeamMatchStat", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 512);
}

int32_t GCCSTeam::GetNumMapVictories() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSTeam", "m_numMapVictories");
}

void GCCSTeam::SetNumMapVictories(int32_t value) {
    SetSchemaValue(m_ptr, "CCSTeam", "m_numMapVictories", false, value);
}

int32_t GCCSTeam::GetScoreFirstHalf() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSTeam", "m_scoreFirstHalf");
}

void GCCSTeam::SetScoreFirstHalf(int32_t value) {
    SetSchemaValue(m_ptr, "CCSTeam", "m_scoreFirstHalf", false, value);
}

int32_t GCCSTeam::GetScoreSecondHalf() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSTeam", "m_scoreSecondHalf");
}

void GCCSTeam::SetScoreSecondHalf(int32_t value) {
    SetSchemaValue(m_ptr, "CCSTeam", "m_scoreSecondHalf", false, value);
}

int32_t GCCSTeam::GetScoreOvertime() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSTeam", "m_scoreOvertime");
}

void GCCSTeam::SetScoreOvertime(int32_t value) {
    SetSchemaValue(m_ptr, "CCSTeam", "m_scoreOvertime", false, value);
}

std::string GCCSTeam::GetClanTeamname() const {
    return GetSchemaValuePtr<char>(m_ptr, "CCSTeam", "m_szClanTeamname");
}

void GCCSTeam::SetClanTeamname(std::string value) {
    WriteSchemaPtrValue(m_ptr, "CCSTeam", "m_szClanTeamname", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 129);
}

uint32_t GCCSTeam::GetClanID() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CCSTeam", "m_iClanID");
}

void GCCSTeam::SetClanID(uint32_t value) {
    SetSchemaValue(m_ptr, "CCSTeam", "m_iClanID", false, value);
}

std::string GCCSTeam::GetTeamFlagImage() const {
    return GetSchemaValuePtr<char>(m_ptr, "CCSTeam", "m_szTeamFlagImage");
}

void GCCSTeam::SetTeamFlagImage(std::string value) {
    WriteSchemaPtrValue(m_ptr, "CCSTeam", "m_szTeamFlagImage", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 8);
}

std::string GCCSTeam::GetTeamLogoImage() const {
    return GetSchemaValuePtr<char>(m_ptr, "CCSTeam", "m_szTeamLogoImage");
}

void GCCSTeam::SetTeamLogoImage(std::string value) {
    WriteSchemaPtrValue(m_ptr, "CCSTeam", "m_szTeamLogoImage", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 8);
}

float GCCSTeam::GetNextResourceTime() const {
    return GetSchemaValue<float>(m_ptr, "CCSTeam", "m_flNextResourceTime");
}

void GCCSTeam::SetNextResourceTime(float value) {
    SetSchemaValue(m_ptr, "CCSTeam", "m_flNextResourceTime", false, value);
}

int32_t GCCSTeam::GetLastUpdateSentAt() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSTeam", "m_iLastUpdateSentAt");
}

void GCCSTeam::SetLastUpdateSentAt(int32_t value) {
    SetSchemaValue(m_ptr, "CCSTeam", "m_iLastUpdateSentAt", false, value);
}

std::string GCCSTeam::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSTeam::IsValid() {
    return (m_ptr != nullptr);
}

GCWeaponUSPSilencer::GCWeaponUSPSilencer(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWeaponUSPSilencer::GCWeaponUSPSilencer(void *ptr) {
    m_ptr = ptr;
}

std::string GCWeaponUSPSilencer::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWeaponUSPSilencer::IsValid() {
    return (m_ptr != nullptr);
}

GCSpriteOriented::GCSpriteOriented(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSpriteOriented::GCSpriteOriented(void *ptr) {
    m_ptr = ptr;
}

std::string GCSpriteOriented::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSpriteOriented::IsValid() {
    return (m_ptr != nullptr);
}

GCTriggerGravity::GCTriggerGravity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTriggerGravity::GCTriggerGravity(void *ptr) {
    m_ptr = ptr;
}

std::string GCTriggerGravity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTriggerGravity::IsValid() {
    return (m_ptr != nullptr);
}

GCServerRagdollTrigger::GCServerRagdollTrigger(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCServerRagdollTrigger::GCServerRagdollTrigger(void *ptr) {
    m_ptr = ptr;
}

std::string GCServerRagdollTrigger::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCServerRagdollTrigger::IsValid() {
    return (m_ptr != nullptr);
}

GCInfoDynamicShadowHintBox::GCInfoDynamicShadowHintBox(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCInfoDynamicShadowHintBox::GCInfoDynamicShadowHintBox(void *ptr) {
    m_ptr = ptr;
}

Vector GCInfoDynamicShadowHintBox::GetBoxMins() const {
    return GetSchemaValue<Vector>(m_ptr, "CInfoDynamicShadowHintBox", "m_vBoxMins");
}

void GCInfoDynamicShadowHintBox::SetBoxMins(Vector value) {
    SetSchemaValue(m_ptr, "CInfoDynamicShadowHintBox", "m_vBoxMins", false, value);
}

Vector GCInfoDynamicShadowHintBox::GetBoxMaxs() const {
    return GetSchemaValue<Vector>(m_ptr, "CInfoDynamicShadowHintBox", "m_vBoxMaxs");
}

void GCInfoDynamicShadowHintBox::SetBoxMaxs(Vector value) {
    SetSchemaValue(m_ptr, "CInfoDynamicShadowHintBox", "m_vBoxMaxs", false, value);
}

std::string GCInfoDynamicShadowHintBox::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCInfoDynamicShadowHintBox::IsValid() {
    return (m_ptr != nullptr);
}

GCPathMover::GCPathMover(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPathMover::GCPathMover(void *ptr) {
    m_ptr = ptr;
}

float GCPathMover::GetPathLength() const {
    return GetSchemaValue<float>(m_ptr, "CPathMover", "m_flPathLength");
}

void GCPathMover::SetPathLength(float value) {
    SetSchemaValue(m_ptr, "CPathMover", "m_flPathLength", false, value);
}

bool GCPathMover::GetClosedLoop() const {
    return GetSchemaValue<bool>(m_ptr, "CPathMover", "m_bClosedLoop");
}

void GCPathMover::SetClosedLoop(bool value) {
    SetSchemaValue(m_ptr, "CPathMover", "m_bClosedLoop", false, value);
}

std::string GCPathMover::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPathMover::IsValid() {
    return (m_ptr != nullptr);
}

GCFlashbang::GCFlashbang(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFlashbang::GCFlashbang(void *ptr) {
    m_ptr = ptr;
}

std::string GCFlashbang::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFlashbang::IsValid() {
    return (m_ptr != nullptr);
}

GCWeaponAug::GCWeaponAug(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWeaponAug::GCWeaponAug(void *ptr) {
    m_ptr = ptr;
}

std::string GCWeaponAug::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWeaponAug::IsValid() {
    return (m_ptr != nullptr);
}

GCIncendiaryGrenade::GCIncendiaryGrenade(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCIncendiaryGrenade::GCIncendiaryGrenade(void *ptr) {
    m_ptr = ptr;
}

std::string GCIncendiaryGrenade::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCIncendiaryGrenade::IsValid() {
    return (m_ptr != nullptr);
}

GCChangeLevel::GCChangeLevel(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCChangeLevel::GCChangeLevel(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCChangeLevel::GetMapName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CChangeLevel", "m_sMapName");
}

void GCChangeLevel::SetMapName(CUtlString value) {
    SetSchemaValue(m_ptr, "CChangeLevel", "m_sMapName", false, value);
}

CUtlString GCChangeLevel::GetLandmarkName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CChangeLevel", "m_sLandmarkName");
}

void GCChangeLevel::SetLandmarkName(CUtlString value) {
    SetSchemaValue(m_ptr, "CChangeLevel", "m_sLandmarkName", false, value);
}

GCEntityIOOutput GCChangeLevel::GetOnChangeLevel() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CChangeLevel", "m_OnChangeLevel");
}

void GCChangeLevel::SetOnChangeLevel(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CChangeLevel", "m_OnChangeLevel", false, value);
}

bool GCChangeLevel::GetTouched() const {
    return GetSchemaValue<bool>(m_ptr, "CChangeLevel", "m_bTouched");
}

void GCChangeLevel::SetTouched(bool value) {
    SetSchemaValue(m_ptr, "CChangeLevel", "m_bTouched", false, value);
}

bool GCChangeLevel::GetNoTouch() const {
    return GetSchemaValue<bool>(m_ptr, "CChangeLevel", "m_bNoTouch");
}

void GCChangeLevel::SetNoTouch(bool value) {
    SetSchemaValue(m_ptr, "CChangeLevel", "m_bNoTouch", false, value);
}

bool GCChangeLevel::GetNewChapter() const {
    return GetSchemaValue<bool>(m_ptr, "CChangeLevel", "m_bNewChapter");
}

void GCChangeLevel::SetNewChapter(bool value) {
    SetSchemaValue(m_ptr, "CChangeLevel", "m_bNewChapter", false, value);
}

bool GCChangeLevel::GetOnChangeLevelFired() const {
    return GetSchemaValue<bool>(m_ptr, "CChangeLevel", "m_bOnChangeLevelFired");
}

void GCChangeLevel::SetOnChangeLevelFired(bool value) {
    SetSchemaValue(m_ptr, "CChangeLevel", "m_bOnChangeLevelFired", false, value);
}

std::string GCChangeLevel::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCChangeLevel::IsValid() {
    return (m_ptr != nullptr);
}

GCTriggerLerpObject::GCTriggerLerpObject(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTriggerLerpObject::GCTriggerLerpObject(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCTriggerLerpObject::GetLerpTarget() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CTriggerLerpObject", "m_iszLerpTarget");
}

void GCTriggerLerpObject::SetLerpTarget(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CTriggerLerpObject", "m_iszLerpTarget", false, value);
}

GCBaseEntity GCTriggerLerpObject::GetLerpTarget1() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CTriggerLerpObject", "m_hLerpTarget"));
    return value;
}

void GCTriggerLerpObject::SetLerpTarget1(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'LerpTarget1' is not possible.\n");
}

CUtlSymbolLarge GCTriggerLerpObject::GetLerpTargetAttachment() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CTriggerLerpObject", "m_iszLerpTargetAttachment");
}

void GCTriggerLerpObject::SetLerpTargetAttachment(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CTriggerLerpObject", "m_iszLerpTargetAttachment", false, value);
}

float GCTriggerLerpObject::GetLerpDuration() const {
    return GetSchemaValue<float>(m_ptr, "CTriggerLerpObject", "m_flLerpDuration");
}

void GCTriggerLerpObject::SetLerpDuration(float value) {
    SetSchemaValue(m_ptr, "CTriggerLerpObject", "m_flLerpDuration", false, value);
}

bool GCTriggerLerpObject::GetLerpRestoreMoveType() const {
    return GetSchemaValue<bool>(m_ptr, "CTriggerLerpObject", "m_bLerpRestoreMoveType");
}

void GCTriggerLerpObject::SetLerpRestoreMoveType(bool value) {
    SetSchemaValue(m_ptr, "CTriggerLerpObject", "m_bLerpRestoreMoveType", false, value);
}

bool GCTriggerLerpObject::GetSingleLerpObject() const {
    return GetSchemaValue<bool>(m_ptr, "CTriggerLerpObject", "m_bSingleLerpObject");
}

void GCTriggerLerpObject::SetSingleLerpObject(bool value) {
    SetSchemaValue(m_ptr, "CTriggerLerpObject", "m_bSingleLerpObject", false, value);
}

std::vector<Glerpdata_t> GCTriggerLerpObject::GetLerpingObjects() const {
    CUtlVector<Glerpdata_t>* vec = GetSchemaValue<CUtlVector<Glerpdata_t>*>(m_ptr, "CTriggerLerpObject", "m_vecLerpingObjects"); std::vector<Glerpdata_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCTriggerLerpObject::SetLerpingObjects(std::vector<Glerpdata_t> value) {
    SetSchemaValueCUtlVector<Glerpdata_t>(m_ptr, "CTriggerLerpObject", "m_vecLerpingObjects", false, value);
}

CUtlSymbolLarge GCTriggerLerpObject::GetLerpEffect() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CTriggerLerpObject", "m_iszLerpEffect");
}

void GCTriggerLerpObject::SetLerpEffect(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CTriggerLerpObject", "m_iszLerpEffect", false, value);
}

CUtlSymbolLarge GCTriggerLerpObject::GetLerpSound() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CTriggerLerpObject", "m_iszLerpSound");
}

void GCTriggerLerpObject::SetLerpSound(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CTriggerLerpObject", "m_iszLerpSound", false, value);
}

bool GCTriggerLerpObject::GetAttachTouchingObject() const {
    return GetSchemaValue<bool>(m_ptr, "CTriggerLerpObject", "m_bAttachTouchingObject");
}

void GCTriggerLerpObject::SetAttachTouchingObject(bool value) {
    SetSchemaValue(m_ptr, "CTriggerLerpObject", "m_bAttachTouchingObject", false, value);
}

GCBaseEntity GCTriggerLerpObject::GetEntityToWaitForDisconnect() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CTriggerLerpObject", "m_hEntityToWaitForDisconnect"));
    return value;
}

void GCTriggerLerpObject::SetEntityToWaitForDisconnect(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'EntityToWaitForDisconnect' is not possible.\n");
}

GCEntityIOOutput GCTriggerLerpObject::GetOnLerpStarted() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CTriggerLerpObject", "m_OnLerpStarted");
}

void GCTriggerLerpObject::SetOnLerpStarted(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CTriggerLerpObject", "m_OnLerpStarted", false, value);
}

GCEntityIOOutput GCTriggerLerpObject::GetOnLerpFinished() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CTriggerLerpObject", "m_OnLerpFinished");
}

void GCTriggerLerpObject::SetOnLerpFinished(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CTriggerLerpObject", "m_OnLerpFinished", false, value);
}

std::string GCTriggerLerpObject::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTriggerLerpObject::IsValid() {
    return (m_ptr != nullptr);
}

GCTriggerSoundscape::GCTriggerSoundscape(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTriggerSoundscape::GCTriggerSoundscape(void *ptr) {
    m_ptr = ptr;
}

GCEnvSoundscapeTriggerable GCTriggerSoundscape::GetSoundscape() const {
    GCEnvSoundscapeTriggerable value(GetSchemaValuePtr<void>(m_ptr, "CTriggerSoundscape", "m_hSoundscape"));
    return value;
}

void GCTriggerSoundscape::SetSoundscape(GCEnvSoundscapeTriggerable* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Soundscape' is not possible.\n");
}

CUtlSymbolLarge GCTriggerSoundscape::GetSoundscapeName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CTriggerSoundscape", "m_SoundscapeName");
}

void GCTriggerSoundscape::SetSoundscapeName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CTriggerSoundscape", "m_SoundscapeName", false, value);
}

std::string GCTriggerSoundscape::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTriggerSoundscape::IsValid() {
    return (m_ptr != nullptr);
}

GCLogicScript::GCLogicScript(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCLogicScript::GCLogicScript(void *ptr) {
    m_ptr = ptr;
}

std::string GCLogicScript::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCLogicScript::IsValid() {
    return (m_ptr != nullptr);
}

GCWeaponFiveSeven::GCWeaponFiveSeven(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWeaponFiveSeven::GCWeaponFiveSeven(void *ptr) {
    m_ptr = ptr;
}

std::string GCWeaponFiveSeven::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWeaponFiveSeven::IsValid() {
    return (m_ptr != nullptr);
}

GCTriggerBrush::GCTriggerBrush(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTriggerBrush::GCTriggerBrush(void *ptr) {
    m_ptr = ptr;
}

GCEntityIOOutput GCTriggerBrush::GetOnStartTouch() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CTriggerBrush", "m_OnStartTouch");
}

void GCTriggerBrush::SetOnStartTouch(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CTriggerBrush", "m_OnStartTouch", false, value);
}

GCEntityIOOutput GCTriggerBrush::GetOnEndTouch() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CTriggerBrush", "m_OnEndTouch");
}

void GCTriggerBrush::SetOnEndTouch(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CTriggerBrush", "m_OnEndTouch", false, value);
}

GCEntityIOOutput GCTriggerBrush::GetOnUse() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CTriggerBrush", "m_OnUse");
}

void GCTriggerBrush::SetOnUse(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CTriggerBrush", "m_OnUse", false, value);
}

int32_t GCTriggerBrush::GetInputFilter() const {
    return GetSchemaValue<int32_t>(m_ptr, "CTriggerBrush", "m_iInputFilter");
}

void GCTriggerBrush::SetInputFilter(int32_t value) {
    SetSchemaValue(m_ptr, "CTriggerBrush", "m_iInputFilter", false, value);
}

int32_t GCTriggerBrush::GetDontMessageParent() const {
    return GetSchemaValue<int32_t>(m_ptr, "CTriggerBrush", "m_iDontMessageParent");
}

void GCTriggerBrush::SetDontMessageParent(int32_t value) {
    SetSchemaValue(m_ptr, "CTriggerBrush", "m_iDontMessageParent", false, value);
}

std::string GCTriggerBrush::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTriggerBrush::IsValid() {
    return (m_ptr != nullptr);
}

GCPhysicsEntitySolver::GCPhysicsEntitySolver(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPhysicsEntitySolver::GCPhysicsEntitySolver(void *ptr) {
    m_ptr = ptr;
}

GCBaseEntity GCPhysicsEntitySolver::GetMovingEntity() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CPhysicsEntitySolver", "m_hMovingEntity"));
    return value;
}

void GCPhysicsEntitySolver::SetMovingEntity(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'MovingEntity' is not possible.\n");
}

GCBaseEntity GCPhysicsEntitySolver::GetPhysicsBlocker() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CPhysicsEntitySolver", "m_hPhysicsBlocker"));
    return value;
}

void GCPhysicsEntitySolver::SetPhysicsBlocker(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'PhysicsBlocker' is not possible.\n");
}

float GCPhysicsEntitySolver::GetSeparationDuration() const {
    return GetSchemaValue<float>(m_ptr, "CPhysicsEntitySolver", "m_separationDuration");
}

void GCPhysicsEntitySolver::SetSeparationDuration(float value) {
    SetSchemaValue(m_ptr, "CPhysicsEntitySolver", "m_separationDuration", false, value);
}

std::string GCPhysicsEntitySolver::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPhysicsEntitySolver::IsValid() {
    return (m_ptr != nullptr);
}

GCNetworkedSequenceOperation::GCNetworkedSequenceOperation(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNetworkedSequenceOperation::GCNetworkedSequenceOperation(void *ptr) {
    m_ptr = ptr;
}

float GCNetworkedSequenceOperation::GetPrevCycle() const {
    return GetSchemaValue<float>(m_ptr, "CNetworkedSequenceOperation", "m_flPrevCycle");
}

void GCNetworkedSequenceOperation::SetPrevCycle(float value) {
    SetSchemaValue(m_ptr, "CNetworkedSequenceOperation", "m_flPrevCycle", false, value);
}

float GCNetworkedSequenceOperation::GetCycle() const {
    return GetSchemaValue<float>(m_ptr, "CNetworkedSequenceOperation", "m_flCycle");
}

void GCNetworkedSequenceOperation::SetCycle(float value) {
    SetSchemaValue(m_ptr, "CNetworkedSequenceOperation", "m_flCycle", false, value);
}

float GCNetworkedSequenceOperation::GetWeight() const {
    return GetSchemaValue<float>(m_ptr, "CNetworkedSequenceOperation", "m_flWeight");
}

void GCNetworkedSequenceOperation::SetWeight(float value) {
    SetSchemaValue(m_ptr, "CNetworkedSequenceOperation", "m_flWeight", false, value);
}

bool GCNetworkedSequenceOperation::GetSequenceChangeNetworked() const {
    return GetSchemaValue<bool>(m_ptr, "CNetworkedSequenceOperation", "m_bSequenceChangeNetworked");
}

void GCNetworkedSequenceOperation::SetSequenceChangeNetworked(bool value) {
    SetSchemaValue(m_ptr, "CNetworkedSequenceOperation", "m_bSequenceChangeNetworked", false, value);
}

bool GCNetworkedSequenceOperation::GetDiscontinuity() const {
    return GetSchemaValue<bool>(m_ptr, "CNetworkedSequenceOperation", "m_bDiscontinuity");
}

void GCNetworkedSequenceOperation::SetDiscontinuity(bool value) {
    SetSchemaValue(m_ptr, "CNetworkedSequenceOperation", "m_bDiscontinuity", false, value);
}

float GCNetworkedSequenceOperation::GetPrevCycleFromDiscontinuity() const {
    return GetSchemaValue<float>(m_ptr, "CNetworkedSequenceOperation", "m_flPrevCycleFromDiscontinuity");
}

void GCNetworkedSequenceOperation::SetPrevCycleFromDiscontinuity(float value) {
    SetSchemaValue(m_ptr, "CNetworkedSequenceOperation", "m_flPrevCycleFromDiscontinuity", false, value);
}

float GCNetworkedSequenceOperation::GetPrevCycleForAnimEventDetection() const {
    return GetSchemaValue<float>(m_ptr, "CNetworkedSequenceOperation", "m_flPrevCycleForAnimEventDetection");
}

void GCNetworkedSequenceOperation::SetPrevCycleForAnimEventDetection(float value) {
    SetSchemaValue(m_ptr, "CNetworkedSequenceOperation", "m_flPrevCycleForAnimEventDetection", false, value);
}

std::string GCNetworkedSequenceOperation::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNetworkedSequenceOperation::IsValid() {
    return (m_ptr != nullptr);
}

GCPointWorldText::GCPointWorldText(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPointWorldText::GCPointWorldText(void *ptr) {
    m_ptr = ptr;
}

std::string GCPointWorldText::GetMessageText() const {
    return GetSchemaValuePtr<char>(m_ptr, "CPointWorldText", "m_messageText");
}

void GCPointWorldText::SetMessageText(std::string value) {
    WriteSchemaPtrValue(m_ptr, "CPointWorldText", "m_messageText", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 512);
}

std::string GCPointWorldText::GetFontName() const {
    return GetSchemaValuePtr<char>(m_ptr, "CPointWorldText", "m_FontName");
}

void GCPointWorldText::SetFontName(std::string value) {
    WriteSchemaPtrValue(m_ptr, "CPointWorldText", "m_FontName", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 64);
}

bool GCPointWorldText::GetEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CPointWorldText", "m_bEnabled");
}

void GCPointWorldText::SetEnabled(bool value) {
    SetSchemaValue(m_ptr, "CPointWorldText", "m_bEnabled", false, value);
}

bool GCPointWorldText::GetFullbright() const {
    return GetSchemaValue<bool>(m_ptr, "CPointWorldText", "m_bFullbright");
}

void GCPointWorldText::SetFullbright(bool value) {
    SetSchemaValue(m_ptr, "CPointWorldText", "m_bFullbright", false, value);
}

float GCPointWorldText::GetWorldUnitsPerPx() const {
    return GetSchemaValue<float>(m_ptr, "CPointWorldText", "m_flWorldUnitsPerPx");
}

void GCPointWorldText::SetWorldUnitsPerPx(float value) {
    SetSchemaValue(m_ptr, "CPointWorldText", "m_flWorldUnitsPerPx", false, value);
}

float GCPointWorldText::GetFontSize() const {
    return GetSchemaValue<float>(m_ptr, "CPointWorldText", "m_flFontSize");
}

void GCPointWorldText::SetFontSize(float value) {
    SetSchemaValue(m_ptr, "CPointWorldText", "m_flFontSize", false, value);
}

float GCPointWorldText::GetDepthOffset() const {
    return GetSchemaValue<float>(m_ptr, "CPointWorldText", "m_flDepthOffset");
}

void GCPointWorldText::SetDepthOffset(float value) {
    SetSchemaValue(m_ptr, "CPointWorldText", "m_flDepthOffset", false, value);
}

Color GCPointWorldText::GetColor() const {
    return GetSchemaValue<Color>(m_ptr, "CPointWorldText", "m_Color");
}

void GCPointWorldText::SetColor(Color value) {
    SetSchemaValue(m_ptr, "CPointWorldText", "m_Color", false, value);
}

PointWorldTextJustifyHorizontal_t GCPointWorldText::GetJustifyHorizontal() const {
    return GetSchemaValue<PointWorldTextJustifyHorizontal_t>(m_ptr, "CPointWorldText", "m_nJustifyHorizontal");
}

void GCPointWorldText::SetJustifyHorizontal(PointWorldTextJustifyHorizontal_t value) {
    SetSchemaValue(m_ptr, "CPointWorldText", "m_nJustifyHorizontal", false, value);
}

PointWorldTextJustifyVertical_t GCPointWorldText::GetJustifyVertical() const {
    return GetSchemaValue<PointWorldTextJustifyVertical_t>(m_ptr, "CPointWorldText", "m_nJustifyVertical");
}

void GCPointWorldText::SetJustifyVertical(PointWorldTextJustifyVertical_t value) {
    SetSchemaValue(m_ptr, "CPointWorldText", "m_nJustifyVertical", false, value);
}

PointWorldTextReorientMode_t GCPointWorldText::GetReorientMode() const {
    return GetSchemaValue<PointWorldTextReorientMode_t>(m_ptr, "CPointWorldText", "m_nReorientMode");
}

void GCPointWorldText::SetReorientMode(PointWorldTextReorientMode_t value) {
    SetSchemaValue(m_ptr, "CPointWorldText", "m_nReorientMode", false, value);
}

std::string GCPointWorldText::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPointWorldText::IsValid() {
    return (m_ptr != nullptr);
}

GCSoundAreaEntityOrientedBox::GCSoundAreaEntityOrientedBox(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSoundAreaEntityOrientedBox::GCSoundAreaEntityOrientedBox(void *ptr) {
    m_ptr = ptr;
}

Vector GCSoundAreaEntityOrientedBox::GetMin() const {
    return GetSchemaValue<Vector>(m_ptr, "CSoundAreaEntityOrientedBox", "m_vMin");
}

void GCSoundAreaEntityOrientedBox::SetMin(Vector value) {
    SetSchemaValue(m_ptr, "CSoundAreaEntityOrientedBox", "m_vMin", false, value);
}

Vector GCSoundAreaEntityOrientedBox::GetMax() const {
    return GetSchemaValue<Vector>(m_ptr, "CSoundAreaEntityOrientedBox", "m_vMax");
}

void GCSoundAreaEntityOrientedBox::SetMax(Vector value) {
    SetSchemaValue(m_ptr, "CSoundAreaEntityOrientedBox", "m_vMax", false, value);
}

std::string GCSoundAreaEntityOrientedBox::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSoundAreaEntityOrientedBox::IsValid() {
    return (m_ptr != nullptr);
}

GCTriggerPhysics::GCTriggerPhysics(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTriggerPhysics::GCTriggerPhysics(void *ptr) {
    m_ptr = ptr;
}

float GCTriggerPhysics::GetGravityScale() const {
    return GetSchemaValue<float>(m_ptr, "CTriggerPhysics", "m_gravityScale");
}

void GCTriggerPhysics::SetGravityScale(float value) {
    SetSchemaValue(m_ptr, "CTriggerPhysics", "m_gravityScale", false, value);
}

float GCTriggerPhysics::GetLinearLimit() const {
    return GetSchemaValue<float>(m_ptr, "CTriggerPhysics", "m_linearLimit");
}

void GCTriggerPhysics::SetLinearLimit(float value) {
    SetSchemaValue(m_ptr, "CTriggerPhysics", "m_linearLimit", false, value);
}

float GCTriggerPhysics::GetLinearDamping() const {
    return GetSchemaValue<float>(m_ptr, "CTriggerPhysics", "m_linearDamping");
}

void GCTriggerPhysics::SetLinearDamping(float value) {
    SetSchemaValue(m_ptr, "CTriggerPhysics", "m_linearDamping", false, value);
}

float GCTriggerPhysics::GetAngularLimit() const {
    return GetSchemaValue<float>(m_ptr, "CTriggerPhysics", "m_angularLimit");
}

void GCTriggerPhysics::SetAngularLimit(float value) {
    SetSchemaValue(m_ptr, "CTriggerPhysics", "m_angularLimit", false, value);
}

float GCTriggerPhysics::GetAngularDamping() const {
    return GetSchemaValue<float>(m_ptr, "CTriggerPhysics", "m_angularDamping");
}

void GCTriggerPhysics::SetAngularDamping(float value) {
    SetSchemaValue(m_ptr, "CTriggerPhysics", "m_angularDamping", false, value);
}

float GCTriggerPhysics::GetLinearForce() const {
    return GetSchemaValue<float>(m_ptr, "CTriggerPhysics", "m_linearForce");
}

void GCTriggerPhysics::SetLinearForce(float value) {
    SetSchemaValue(m_ptr, "CTriggerPhysics", "m_linearForce", false, value);
}

float GCTriggerPhysics::GetFrequency() const {
    return GetSchemaValue<float>(m_ptr, "CTriggerPhysics", "m_flFrequency");
}

void GCTriggerPhysics::SetFrequency(float value) {
    SetSchemaValue(m_ptr, "CTriggerPhysics", "m_flFrequency", false, value);
}

float GCTriggerPhysics::GetDampingRatio() const {
    return GetSchemaValue<float>(m_ptr, "CTriggerPhysics", "m_flDampingRatio");
}

void GCTriggerPhysics::SetDampingRatio(float value) {
    SetSchemaValue(m_ptr, "CTriggerPhysics", "m_flDampingRatio", false, value);
}

Vector GCTriggerPhysics::GetLinearForcePointAt() const {
    return GetSchemaValue<Vector>(m_ptr, "CTriggerPhysics", "m_vecLinearForcePointAt");
}

void GCTriggerPhysics::SetLinearForcePointAt(Vector value) {
    SetSchemaValue(m_ptr, "CTriggerPhysics", "m_vecLinearForcePointAt", false, value);
}

bool GCTriggerPhysics::GetCollapseToForcePoint() const {
    return GetSchemaValue<bool>(m_ptr, "CTriggerPhysics", "m_bCollapseToForcePoint");
}

void GCTriggerPhysics::SetCollapseToForcePoint(bool value) {
    SetSchemaValue(m_ptr, "CTriggerPhysics", "m_bCollapseToForcePoint", false, value);
}

Vector GCTriggerPhysics::GetLinearForcePointAtWorld() const {
    return GetSchemaValue<Vector>(m_ptr, "CTriggerPhysics", "m_vecLinearForcePointAtWorld");
}

void GCTriggerPhysics::SetLinearForcePointAtWorld(Vector value) {
    SetSchemaValue(m_ptr, "CTriggerPhysics", "m_vecLinearForcePointAtWorld", false, value);
}

Vector GCTriggerPhysics::GetLinearForceDirection() const {
    return GetSchemaValue<Vector>(m_ptr, "CTriggerPhysics", "m_vecLinearForceDirection");
}

void GCTriggerPhysics::SetLinearForceDirection(Vector value) {
    SetSchemaValue(m_ptr, "CTriggerPhysics", "m_vecLinearForceDirection", false, value);
}

bool GCTriggerPhysics::GetConvertToDebrisWhenPossible() const {
    return GetSchemaValue<bool>(m_ptr, "CTriggerPhysics", "m_bConvertToDebrisWhenPossible");
}

void GCTriggerPhysics::SetConvertToDebrisWhenPossible(bool value) {
    SetSchemaValue(m_ptr, "CTriggerPhysics", "m_bConvertToDebrisWhenPossible", false, value);
}

std::string GCTriggerPhysics::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTriggerPhysics::IsValid() {
    return (m_ptr != nullptr);
}

GEntityRenderAttribute_t::GEntityRenderAttribute_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEntityRenderAttribute_t::GEntityRenderAttribute_t(void *ptr) {
    m_ptr = ptr;
}

CUtlStringToken GEntityRenderAttribute_t::GetID() const {
    return GetSchemaValue<CUtlStringToken>(m_ptr, "EntityRenderAttribute_t", "m_ID");
}

void GEntityRenderAttribute_t::SetID(CUtlStringToken value) {
    SetSchemaValue(m_ptr, "EntityRenderAttribute_t", "m_ID", true, value);
}

Vector4D GEntityRenderAttribute_t::GetValues() const {
    return GetSchemaValue<Vector4D>(m_ptr, "EntityRenderAttribute_t", "m_Values");
}

void GEntityRenderAttribute_t::SetValues(Vector4D value) {
    SetSchemaValue(m_ptr, "EntityRenderAttribute_t", "m_Values", true, value);
}

std::string GEntityRenderAttribute_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEntityRenderAttribute_t::IsValid() {
    return (m_ptr != nullptr);
}

GCPointBroadcastClientCommand::GCPointBroadcastClientCommand(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPointBroadcastClientCommand::GCPointBroadcastClientCommand(void *ptr) {
    m_ptr = ptr;
}

std::string GCPointBroadcastClientCommand::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPointBroadcastClientCommand::IsValid() {
    return (m_ptr != nullptr);
}

GCFuncShatterglass::GCFuncShatterglass(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFuncShatterglass::GCFuncShatterglass(void *ptr) {
    m_ptr = ptr;
}

matrix3x4_t GCFuncShatterglass::GetMatPanelTransform() const {
    return GetSchemaValue<matrix3x4_t>(m_ptr, "CFuncShatterglass", "m_matPanelTransform");
}

void GCFuncShatterglass::SetMatPanelTransform(matrix3x4_t value) {
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_matPanelTransform", false, value);
}

matrix3x4_t GCFuncShatterglass::GetMatPanelTransformWsTemp() const {
    return GetSchemaValue<matrix3x4_t>(m_ptr, "CFuncShatterglass", "m_matPanelTransformWsTemp");
}

void GCFuncShatterglass::SetMatPanelTransformWsTemp(matrix3x4_t value) {
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_matPanelTransformWsTemp", false, value);
}

std::vector<uint32> GCFuncShatterglass::GetShatterGlassShards() const {
    CUtlVector<uint32>* vec = GetSchemaValue<CUtlVector<uint32>*>(m_ptr, "CFuncShatterglass", "m_vecShatterGlassShards"); std::vector<uint32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCFuncShatterglass::SetShatterGlassShards(std::vector<uint32> value) {
    SetSchemaValueCUtlVector<uint32>(m_ptr, "CFuncShatterglass", "m_vecShatterGlassShards", false, value);
}

Vector2D GCFuncShatterglass::GetPanelSize() const {
    return GetSchemaValue<Vector2D>(m_ptr, "CFuncShatterglass", "m_PanelSize");
}

void GCFuncShatterglass::SetPanelSize(Vector2D value) {
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_PanelSize", false, value);
}

Vector GCFuncShatterglass::GetPanelNormalWs() const {
    return GetSchemaValue<Vector>(m_ptr, "CFuncShatterglass", "m_vecPanelNormalWs");
}

void GCFuncShatterglass::SetPanelNormalWs(Vector value) {
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_vecPanelNormalWs", false, value);
}

int32_t GCFuncShatterglass::GetNumShardsEverCreated() const {
    return GetSchemaValue<int32_t>(m_ptr, "CFuncShatterglass", "m_nNumShardsEverCreated");
}

void GCFuncShatterglass::SetNumShardsEverCreated(int32_t value) {
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_nNumShardsEverCreated", false, value);
}

float GCFuncShatterglass::GetGlassThickness() const {
    return GetSchemaValue<float>(m_ptr, "CFuncShatterglass", "m_flGlassThickness");
}

void GCFuncShatterglass::SetGlassThickness(float value) {
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_flGlassThickness", false, value);
}

float GCFuncShatterglass::GetSpawnInvulnerability() const {
    return GetSchemaValue<float>(m_ptr, "CFuncShatterglass", "m_flSpawnInvulnerability");
}

void GCFuncShatterglass::SetSpawnInvulnerability(float value) {
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_flSpawnInvulnerability", false, value);
}

bool GCFuncShatterglass::GetBreakSilent() const {
    return GetSchemaValue<bool>(m_ptr, "CFuncShatterglass", "m_bBreakSilent");
}

void GCFuncShatterglass::SetBreakSilent(bool value) {
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_bBreakSilent", false, value);
}

bool GCFuncShatterglass::GetBreakShardless() const {
    return GetSchemaValue<bool>(m_ptr, "CFuncShatterglass", "m_bBreakShardless");
}

void GCFuncShatterglass::SetBreakShardless(bool value) {
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_bBreakShardless", false, value);
}

bool GCFuncShatterglass::GetBroken() const {
    return GetSchemaValue<bool>(m_ptr, "CFuncShatterglass", "m_bBroken");
}

void GCFuncShatterglass::SetBroken(bool value) {
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_bBroken", false, value);
}

bool GCFuncShatterglass::GetHasRateLimitedShards() const {
    return GetSchemaValue<bool>(m_ptr, "CFuncShatterglass", "m_bHasRateLimitedShards");
}

void GCFuncShatterglass::SetHasRateLimitedShards(bool value) {
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_bHasRateLimitedShards", false, value);
}

bool GCFuncShatterglass::GetGlassNavIgnore() const {
    return GetSchemaValue<bool>(m_ptr, "CFuncShatterglass", "m_bGlassNavIgnore");
}

void GCFuncShatterglass::SetGlassNavIgnore(bool value) {
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_bGlassNavIgnore", false, value);
}

bool GCFuncShatterglass::GetGlassInFrame() const {
    return GetSchemaValue<bool>(m_ptr, "CFuncShatterglass", "m_bGlassInFrame");
}

void GCFuncShatterglass::SetGlassInFrame(bool value) {
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_bGlassInFrame", false, value);
}

bool GCFuncShatterglass::GetStartBroken() const {
    return GetSchemaValue<bool>(m_ptr, "CFuncShatterglass", "m_bStartBroken");
}

void GCFuncShatterglass::SetStartBroken(bool value) {
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_bStartBroken", false, value);
}

uint8_t GCFuncShatterglass::GetInitialDamageType() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CFuncShatterglass", "m_iInitialDamageType");
}

void GCFuncShatterglass::SetInitialDamageType(uint8_t value) {
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_iInitialDamageType", false, value);
}

CUtlSymbolLarge GCFuncShatterglass::GetDamagePositioningEntityName01() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncShatterglass", "m_szDamagePositioningEntityName01");
}

void GCFuncShatterglass::SetDamagePositioningEntityName01(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_szDamagePositioningEntityName01", false, value);
}

CUtlSymbolLarge GCFuncShatterglass::GetDamagePositioningEntityName02() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncShatterglass", "m_szDamagePositioningEntityName02");
}

void GCFuncShatterglass::SetDamagePositioningEntityName02(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_szDamagePositioningEntityName02", false, value);
}

CUtlSymbolLarge GCFuncShatterglass::GetDamagePositioningEntityName03() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncShatterglass", "m_szDamagePositioningEntityName03");
}

void GCFuncShatterglass::SetDamagePositioningEntityName03(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_szDamagePositioningEntityName03", false, value);
}

CUtlSymbolLarge GCFuncShatterglass::GetDamagePositioningEntityName04() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncShatterglass", "m_szDamagePositioningEntityName04");
}

void GCFuncShatterglass::SetDamagePositioningEntityName04(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_szDamagePositioningEntityName04", false, value);
}

std::vector<Vector> GCFuncShatterglass::GetInitialDamagePositions() const {
    CUtlVector<Vector>* vec = GetSchemaValue<CUtlVector<Vector>*>(m_ptr, "CFuncShatterglass", "m_vInitialDamagePositions"); std::vector<Vector> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCFuncShatterglass::SetInitialDamagePositions(std::vector<Vector> value) {
    SetSchemaValueCUtlVector<Vector>(m_ptr, "CFuncShatterglass", "m_vInitialDamagePositions", false, value);
}

std::vector<Vector> GCFuncShatterglass::GetExtraDamagePositions() const {
    CUtlVector<Vector>* vec = GetSchemaValue<CUtlVector<Vector>*>(m_ptr, "CFuncShatterglass", "m_vExtraDamagePositions"); std::vector<Vector> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCFuncShatterglass::SetExtraDamagePositions(std::vector<Vector> value) {
    SetSchemaValueCUtlVector<Vector>(m_ptr, "CFuncShatterglass", "m_vExtraDamagePositions", false, value);
}

GCEntityIOOutput GCFuncShatterglass::GetOnBroken() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CFuncShatterglass", "m_OnBroken");
}

void GCFuncShatterglass::SetOnBroken(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_OnBroken", false, value);
}

uint8_t GCFuncShatterglass::GetSurfaceType() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CFuncShatterglass", "m_iSurfaceType");
}

void GCFuncShatterglass::SetSurfaceType(uint8_t value) {
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_iSurfaceType", false, value);
}

std::string GCFuncShatterglass::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFuncShatterglass::IsValid() {
    return (m_ptr != nullptr);
}

GCRotButton::GCRotButton(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCRotButton::GCRotButton(void *ptr) {
    m_ptr = ptr;
}

std::string GCRotButton::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCRotButton::IsValid() {
    return (m_ptr != nullptr);
}

GCSoundEventSphereEntity::GCSoundEventSphereEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSoundEventSphereEntity::GCSoundEventSphereEntity(void *ptr) {
    m_ptr = ptr;
}

float GCSoundEventSphereEntity::GetRadius() const {
    return GetSchemaValue<float>(m_ptr, "CSoundEventSphereEntity", "m_flRadius");
}

void GCSoundEventSphereEntity::SetRadius(float value) {
    SetSchemaValue(m_ptr, "CSoundEventSphereEntity", "m_flRadius", false, value);
}

std::string GCSoundEventSphereEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSoundEventSphereEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCWeaponHKP2000::GCWeaponHKP2000(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWeaponHKP2000::GCWeaponHKP2000(void *ptr) {
    m_ptr = ptr;
}

std::string GCWeaponHKP2000::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWeaponHKP2000::IsValid() {
    return (m_ptr != nullptr);
}

GCPlantedC4::GCPlantedC4(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPlantedC4::GCPlantedC4(void *ptr) {
    m_ptr = ptr;
}

bool GCPlantedC4::GetBombTicking() const {
    return GetSchemaValue<bool>(m_ptr, "CPlantedC4", "m_bBombTicking");
}

void GCPlantedC4::SetBombTicking(bool value) {
    SetSchemaValue(m_ptr, "CPlantedC4", "m_bBombTicking", false, value);
}

int32_t GCPlantedC4::GetBombSite() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPlantedC4", "m_nBombSite");
}

void GCPlantedC4::SetBombSite(int32_t value) {
    SetSchemaValue(m_ptr, "CPlantedC4", "m_nBombSite", false, value);
}

int32_t GCPlantedC4::GetSourceSoundscapeHash() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPlantedC4", "m_nSourceSoundscapeHash");
}

void GCPlantedC4::SetSourceSoundscapeHash(int32_t value) {
    SetSchemaValue(m_ptr, "CPlantedC4", "m_nSourceSoundscapeHash", false, value);
}

GCEntityIOOutput GCPlantedC4::GetOnBombDefused() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPlantedC4", "m_OnBombDefused");
}

void GCPlantedC4::SetOnBombDefused(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPlantedC4", "m_OnBombDefused", false, value);
}

GCEntityIOOutput GCPlantedC4::GetOnBombBeginDefuse() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPlantedC4", "m_OnBombBeginDefuse");
}

void GCPlantedC4::SetOnBombBeginDefuse(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPlantedC4", "m_OnBombBeginDefuse", false, value);
}

GCEntityIOOutput GCPlantedC4::GetOnBombDefuseAborted() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPlantedC4", "m_OnBombDefuseAborted");
}

void GCPlantedC4::SetOnBombDefuseAborted(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPlantedC4", "m_OnBombDefuseAborted", false, value);
}

bool GCPlantedC4::GetCannotBeDefused() const {
    return GetSchemaValue<bool>(m_ptr, "CPlantedC4", "m_bCannotBeDefused");
}

void GCPlantedC4::SetCannotBeDefused(bool value) {
    SetSchemaValue(m_ptr, "CPlantedC4", "m_bCannotBeDefused", false, value);
}

GEntitySpottedState_t GCPlantedC4::GetEntitySpottedState() const {
    return GetSchemaValue<GEntitySpottedState_t>(m_ptr, "CPlantedC4", "m_entitySpottedState");
}

void GCPlantedC4::SetEntitySpottedState(GEntitySpottedState_t value) {
    SetSchemaValue(m_ptr, "CPlantedC4", "m_entitySpottedState", false, value);
}

int32_t GCPlantedC4::GetSpotRules() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPlantedC4", "m_nSpotRules");
}

void GCPlantedC4::SetSpotRules(int32_t value) {
    SetSchemaValue(m_ptr, "CPlantedC4", "m_nSpotRules", false, value);
}

bool GCPlantedC4::GetTrainingPlacedByPlayer() const {
    return GetSchemaValue<bool>(m_ptr, "CPlantedC4", "m_bTrainingPlacedByPlayer");
}

void GCPlantedC4::SetTrainingPlacedByPlayer(bool value) {
    SetSchemaValue(m_ptr, "CPlantedC4", "m_bTrainingPlacedByPlayer", false, value);
}

bool GCPlantedC4::GetHasExploded() const {
    return GetSchemaValue<bool>(m_ptr, "CPlantedC4", "m_bHasExploded");
}

void GCPlantedC4::SetHasExploded(bool value) {
    SetSchemaValue(m_ptr, "CPlantedC4", "m_bHasExploded", false, value);
}

float GCPlantedC4::GetTimerLength() const {
    return GetSchemaValue<float>(m_ptr, "CPlantedC4", "m_flTimerLength");
}

void GCPlantedC4::SetTimerLength(float value) {
    SetSchemaValue(m_ptr, "CPlantedC4", "m_flTimerLength", false, value);
}

bool GCPlantedC4::GetBeingDefused() const {
    return GetSchemaValue<bool>(m_ptr, "CPlantedC4", "m_bBeingDefused");
}

void GCPlantedC4::SetBeingDefused(bool value) {
    SetSchemaValue(m_ptr, "CPlantedC4", "m_bBeingDefused", false, value);
}

float GCPlantedC4::GetDefuseLength() const {
    return GetSchemaValue<float>(m_ptr, "CPlantedC4", "m_flDefuseLength");
}

void GCPlantedC4::SetDefuseLength(float value) {
    SetSchemaValue(m_ptr, "CPlantedC4", "m_flDefuseLength", false, value);
}

bool GCPlantedC4::GetBombDefused() const {
    return GetSchemaValue<bool>(m_ptr, "CPlantedC4", "m_bBombDefused");
}

void GCPlantedC4::SetBombDefused(bool value) {
    SetSchemaValue(m_ptr, "CPlantedC4", "m_bBombDefused", false, value);
}

GCCSPlayerPawn GCPlantedC4::GetBombDefuser() const {
    GCCSPlayerPawn value(GetSchemaValuePtr<void>(m_ptr, "CPlantedC4", "m_hBombDefuser"));
    return value;
}

void GCPlantedC4::SetBombDefuser(GCCSPlayerPawn* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'BombDefuser' is not possible.\n");
}

GCBaseEntity GCPlantedC4::GetControlPanel() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CPlantedC4", "m_hControlPanel"));
    return value;
}

void GCPlantedC4::SetControlPanel(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ControlPanel' is not possible.\n");
}

int32_t GCPlantedC4::GetProgressBarTime() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPlantedC4", "m_iProgressBarTime");
}

void GCPlantedC4::SetProgressBarTime(int32_t value) {
    SetSchemaValue(m_ptr, "CPlantedC4", "m_iProgressBarTime", false, value);
}

bool GCPlantedC4::GetVoiceAlertFired() const {
    return GetSchemaValue<bool>(m_ptr, "CPlantedC4", "m_bVoiceAlertFired");
}

void GCPlantedC4::SetVoiceAlertFired(bool value) {
    SetSchemaValue(m_ptr, "CPlantedC4", "m_bVoiceAlertFired", false, value);
}

std::vector<bool> GCPlantedC4::GetVoiceAlertPlayed() const {
    bool* outValue = GetSchemaValue<bool*>(m_ptr, "CPlantedC4", "m_bVoiceAlertPlayed"); std::vector<bool> ret; for(int i = 0; i < 4; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCPlantedC4::SetVoiceAlertPlayed(std::vector<bool> value) {
    bool* outValue = GetSchemaValue<bool*>(m_ptr, "CPlantedC4", "m_bVoiceAlertPlayed"); for(int i = 0; i < 4; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CPlantedC4", "m_bVoiceAlertPlayed", false, outValue);
}

QAngle GCPlantedC4::GetCatchUpToPlayerEye() const {
    return GetSchemaValue<QAngle>(m_ptr, "CPlantedC4", "m_angCatchUpToPlayerEye");
}

void GCPlantedC4::SetCatchUpToPlayerEye(QAngle value) {
    SetSchemaValue(m_ptr, "CPlantedC4", "m_angCatchUpToPlayerEye", false, value);
}

std::string GCPlantedC4::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPlantedC4::IsValid() {
    return (m_ptr != nullptr);
}

GCPointClientUIDialog::GCPointClientUIDialog(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPointClientUIDialog::GCPointClientUIDialog(void *ptr) {
    m_ptr = ptr;
}

GCBaseEntity GCPointClientUIDialog::GetActivator() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CPointClientUIDialog", "m_hActivator"));
    return value;
}

void GCPointClientUIDialog::SetActivator(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Activator' is not possible.\n");
}

bool GCPointClientUIDialog::GetStartEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CPointClientUIDialog", "m_bStartEnabled");
}

void GCPointClientUIDialog::SetStartEnabled(bool value) {
    SetSchemaValue(m_ptr, "CPointClientUIDialog", "m_bStartEnabled", false, value);
}

std::string GCPointClientUIDialog::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPointClientUIDialog::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvSplash::GCEnvSplash(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvSplash::GCEnvSplash(void *ptr) {
    m_ptr = ptr;
}

float GCEnvSplash::GetScale() const {
    return GetSchemaValue<float>(m_ptr, "CEnvSplash", "m_flScale");
}

void GCEnvSplash::SetScale(float value) {
    SetSchemaValue(m_ptr, "CEnvSplash", "m_flScale", false, value);
}

std::string GCEnvSplash::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvSplash::IsValid() {
    return (m_ptr != nullptr);
}

GCSkyCamera::GCSkyCamera(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSkyCamera::GCSkyCamera(void *ptr) {
    m_ptr = ptr;
}

Gsky3dparams_t GCSkyCamera::GetSkyboxData() const {
    return GetSchemaValue<Gsky3dparams_t>(m_ptr, "CSkyCamera", "m_skyboxData");
}

void GCSkyCamera::SetSkyboxData(Gsky3dparams_t value) {
    SetSchemaValue(m_ptr, "CSkyCamera", "m_skyboxData", false, value);
}

CUtlStringToken GCSkyCamera::GetSkyboxSlotToken() const {
    return GetSchemaValue<CUtlStringToken>(m_ptr, "CSkyCamera", "m_skyboxSlotToken");
}

void GCSkyCamera::SetSkyboxSlotToken(CUtlStringToken value) {
    SetSchemaValue(m_ptr, "CSkyCamera", "m_skyboxSlotToken", false, value);
}

bool GCSkyCamera::GetUseAngles() const {
    return GetSchemaValue<bool>(m_ptr, "CSkyCamera", "m_bUseAngles");
}

void GCSkyCamera::SetUseAngles(bool value) {
    SetSchemaValue(m_ptr, "CSkyCamera", "m_bUseAngles", false, value);
}

GCSkyCamera GCSkyCamera::GetNext() const {
    GCSkyCamera value(GetSchemaValuePtr<void>(m_ptr, "CSkyCamera", "m_pNext"));
    return value;
}

void GCSkyCamera::SetNext(GCSkyCamera* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Next' is not possible.\n");
}

std::string GCSkyCamera::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSkyCamera::IsValid() {
    return (m_ptr != nullptr);
}

GCWeaponNOVA::GCWeaponNOVA(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWeaponNOVA::GCWeaponNOVA(void *ptr) {
    m_ptr = ptr;
}

std::string GCWeaponNOVA::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWeaponNOVA::IsValid() {
    return (m_ptr != nullptr);
}

GCPointCameraVFOV::GCPointCameraVFOV(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPointCameraVFOV::GCPointCameraVFOV(void *ptr) {
    m_ptr = ptr;
}

float GCPointCameraVFOV::GetVerticalFOV() const {
    return GetSchemaValue<float>(m_ptr, "CPointCameraVFOV", "m_flVerticalFOV");
}

void GCPointCameraVFOV::SetVerticalFOV(float value) {
    SetSchemaValue(m_ptr, "CPointCameraVFOV", "m_flVerticalFOV", false, value);
}

std::string GCPointCameraVFOV::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPointCameraVFOV::IsValid() {
    return (m_ptr != nullptr);
}

GCWeaponTaser::GCWeaponTaser(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWeaponTaser::GCWeaponTaser(void *ptr) {
    m_ptr = ptr;
}

int32_t GCWeaponTaser::GetLastAttackTick() const {
    return GetSchemaValue<int32_t>(m_ptr, "CWeaponTaser", "m_nLastAttackTick");
}

void GCWeaponTaser::SetLastAttackTick(int32_t value) {
    SetSchemaValue(m_ptr, "CWeaponTaser", "m_nLastAttackTick", false, value);
}

std::string GCWeaponTaser::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWeaponTaser::IsValid() {
    return (m_ptr != nullptr);
}

GCWaterBullet::GCWaterBullet(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWaterBullet::GCWaterBullet(void *ptr) {
    m_ptr = ptr;
}

std::string GCWaterBullet::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWaterBullet::IsValid() {
    return (m_ptr != nullptr);
}

GCMarkupVolumeWithRef::GCMarkupVolumeWithRef(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMarkupVolumeWithRef::GCMarkupVolumeWithRef(void *ptr) {
    m_ptr = ptr;
}

bool GCMarkupVolumeWithRef::GetUseRef() const {
    return GetSchemaValue<bool>(m_ptr, "CMarkupVolumeWithRef", "m_bUseRef");
}

void GCMarkupVolumeWithRef::SetUseRef(bool value) {
    SetSchemaValue(m_ptr, "CMarkupVolumeWithRef", "m_bUseRef", false, value);
}

Vector GCMarkupVolumeWithRef::GetRefPos() const {
    return GetSchemaValue<Vector>(m_ptr, "CMarkupVolumeWithRef", "m_vRefPos");
}

void GCMarkupVolumeWithRef::SetRefPos(Vector value) {
    SetSchemaValue(m_ptr, "CMarkupVolumeWithRef", "m_vRefPos", false, value);
}

float GCMarkupVolumeWithRef::GetRefDot() const {
    return GetSchemaValue<float>(m_ptr, "CMarkupVolumeWithRef", "m_flRefDot");
}

void GCMarkupVolumeWithRef::SetRefDot(float value) {
    SetSchemaValue(m_ptr, "CMarkupVolumeWithRef", "m_flRefDot", false, value);
}

std::string GCMarkupVolumeWithRef::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMarkupVolumeWithRef::IsValid() {
    return (m_ptr != nullptr);
}

GCMessage::GCMessage(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMessage::GCMessage(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCMessage::GetMessage() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CMessage", "m_iszMessage");
}

void GCMessage::SetMessage(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CMessage", "m_iszMessage", false, value);
}

float GCMessage::GetMessageVolume() const {
    return GetSchemaValue<float>(m_ptr, "CMessage", "m_MessageVolume");
}

void GCMessage::SetMessageVolume(float value) {
    SetSchemaValue(m_ptr, "CMessage", "m_MessageVolume", false, value);
}

int32_t GCMessage::GetMessageAttenuation() const {
    return GetSchemaValue<int32_t>(m_ptr, "CMessage", "m_MessageAttenuation");
}

void GCMessage::SetMessageAttenuation(int32_t value) {
    SetSchemaValue(m_ptr, "CMessage", "m_MessageAttenuation", false, value);
}

float GCMessage::GetRadius() const {
    return GetSchemaValue<float>(m_ptr, "CMessage", "m_Radius");
}

void GCMessage::SetRadius(float value) {
    SetSchemaValue(m_ptr, "CMessage", "m_Radius", false, value);
}

CUtlSymbolLarge GCMessage::GetNoise() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CMessage", "m_sNoise");
}

void GCMessage::SetNoise(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CMessage", "m_sNoise", false, value);
}

GCEntityIOOutput GCMessage::GetOnShowMessage() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CMessage", "m_OnShowMessage");
}

void GCMessage::SetOnShowMessage(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CMessage", "m_OnShowMessage", false, value);
}

std::string GCMessage::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMessage::IsValid() {
    return (m_ptr != nullptr);
}

GCLogicGameEventListener::GCLogicGameEventListener(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCLogicGameEventListener::GCLogicGameEventListener(void *ptr) {
    m_ptr = ptr;
}

GCEntityIOOutput GCLogicGameEventListener::GetOnEventFired() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CLogicGameEventListener", "m_OnEventFired");
}

void GCLogicGameEventListener::SetOnEventFired(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CLogicGameEventListener", "m_OnEventFired", false, value);
}

CUtlSymbolLarge GCLogicGameEventListener::GetGameEventName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CLogicGameEventListener", "m_iszGameEventName");
}

void GCLogicGameEventListener::SetGameEventName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CLogicGameEventListener", "m_iszGameEventName", false, value);
}

CUtlSymbolLarge GCLogicGameEventListener::GetGameEventItem() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CLogicGameEventListener", "m_iszGameEventItem");
}

void GCLogicGameEventListener::SetGameEventItem(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CLogicGameEventListener", "m_iszGameEventItem", false, value);
}

bool GCLogicGameEventListener::GetEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CLogicGameEventListener", "m_bEnabled");
}

void GCLogicGameEventListener::SetEnabled(bool value) {
    SetSchemaValue(m_ptr, "CLogicGameEventListener", "m_bEnabled", false, value);
}

bool GCLogicGameEventListener::GetStartDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CLogicGameEventListener", "m_bStartDisabled");
}

void GCLogicGameEventListener::SetStartDisabled(bool value) {
    SetSchemaValue(m_ptr, "CLogicGameEventListener", "m_bStartDisabled", false, value);
}

std::string GCLogicGameEventListener::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCLogicGameEventListener::IsValid() {
    return (m_ptr != nullptr);
}

GCPushable::GCPushable(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPushable::GCPushable(void *ptr) {
    m_ptr = ptr;
}

std::string GCPushable::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPushable::IsValid() {
    return (m_ptr != nullptr);
}

GCTriggerRemove::GCTriggerRemove(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTriggerRemove::GCTriggerRemove(void *ptr) {
    m_ptr = ptr;
}

GCEntityIOOutput GCTriggerRemove::GetOnRemove() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CTriggerRemove", "m_OnRemove");
}

void GCTriggerRemove::SetOnRemove(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CTriggerRemove", "m_OnRemove", false, value);
}

std::string GCTriggerRemove::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTriggerRemove::IsValid() {
    return (m_ptr != nullptr);
}

GCInfoTarget::GCInfoTarget(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCInfoTarget::GCInfoTarget(void *ptr) {
    m_ptr = ptr;
}

std::string GCInfoTarget::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCInfoTarget::IsValid() {
    return (m_ptr != nullptr);
}

GCMomentaryRotButton::GCMomentaryRotButton(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMomentaryRotButton::GCMomentaryRotButton(void *ptr) {
    m_ptr = ptr;
}

GCEntityIOOutput GCMomentaryRotButton::GetOnUnpressed() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CMomentaryRotButton", "m_OnUnpressed");
}

void GCMomentaryRotButton::SetOnUnpressed(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CMomentaryRotButton", "m_OnUnpressed", false, value);
}

GCEntityIOOutput GCMomentaryRotButton::GetOnFullyOpen() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CMomentaryRotButton", "m_OnFullyOpen");
}

void GCMomentaryRotButton::SetOnFullyOpen(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CMomentaryRotButton", "m_OnFullyOpen", false, value);
}

GCEntityIOOutput GCMomentaryRotButton::GetOnFullyClosed() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CMomentaryRotButton", "m_OnFullyClosed");
}

void GCMomentaryRotButton::SetOnFullyClosed(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CMomentaryRotButton", "m_OnFullyClosed", false, value);
}

GCEntityIOOutput GCMomentaryRotButton::GetOnReachedPosition() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CMomentaryRotButton", "m_OnReachedPosition");
}

void GCMomentaryRotButton::SetOnReachedPosition(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CMomentaryRotButton", "m_OnReachedPosition", false, value);
}

int32_t GCMomentaryRotButton::GetLastUsed() const {
    return GetSchemaValue<int32_t>(m_ptr, "CMomentaryRotButton", "m_lastUsed");
}

void GCMomentaryRotButton::SetLastUsed(int32_t value) {
    SetSchemaValue(m_ptr, "CMomentaryRotButton", "m_lastUsed", false, value);
}

QAngle GCMomentaryRotButton::GetStart() const {
    return GetSchemaValue<QAngle>(m_ptr, "CMomentaryRotButton", "m_start");
}

void GCMomentaryRotButton::SetStart(QAngle value) {
    SetSchemaValue(m_ptr, "CMomentaryRotButton", "m_start", false, value);
}

QAngle GCMomentaryRotButton::GetEnd() const {
    return GetSchemaValue<QAngle>(m_ptr, "CMomentaryRotButton", "m_end");
}

void GCMomentaryRotButton::SetEnd(QAngle value) {
    SetSchemaValue(m_ptr, "CMomentaryRotButton", "m_end", false, value);
}

float GCMomentaryRotButton::GetIdealYaw() const {
    return GetSchemaValue<float>(m_ptr, "CMomentaryRotButton", "m_IdealYaw");
}

void GCMomentaryRotButton::SetIdealYaw(float value) {
    SetSchemaValue(m_ptr, "CMomentaryRotButton", "m_IdealYaw", false, value);
}

CUtlSymbolLarge GCMomentaryRotButton::GetNoise() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CMomentaryRotButton", "m_sNoise");
}

void GCMomentaryRotButton::SetNoise(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CMomentaryRotButton", "m_sNoise", false, value);
}

bool GCMomentaryRotButton::GetUpdateTarget() const {
    return GetSchemaValue<bool>(m_ptr, "CMomentaryRotButton", "m_bUpdateTarget");
}

void GCMomentaryRotButton::SetUpdateTarget(bool value) {
    SetSchemaValue(m_ptr, "CMomentaryRotButton", "m_bUpdateTarget", false, value);
}

int32_t GCMomentaryRotButton::GetDirection() const {
    return GetSchemaValue<int32_t>(m_ptr, "CMomentaryRotButton", "m_direction");
}

void GCMomentaryRotButton::SetDirection(int32_t value) {
    SetSchemaValue(m_ptr, "CMomentaryRotButton", "m_direction", false, value);
}

float GCMomentaryRotButton::GetReturnSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CMomentaryRotButton", "m_returnSpeed");
}

void GCMomentaryRotButton::SetReturnSpeed(float value) {
    SetSchemaValue(m_ptr, "CMomentaryRotButton", "m_returnSpeed", false, value);
}

float GCMomentaryRotButton::GetStartPosition() const {
    return GetSchemaValue<float>(m_ptr, "CMomentaryRotButton", "m_flStartPosition");
}

void GCMomentaryRotButton::SetStartPosition(float value) {
    SetSchemaValue(m_ptr, "CMomentaryRotButton", "m_flStartPosition", false, value);
}

std::string GCMomentaryRotButton::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMomentaryRotButton::IsValid() {
    return (m_ptr != nullptr);
}

GCPropDoorRotating::GCPropDoorRotating(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPropDoorRotating::GCPropDoorRotating(void *ptr) {
    m_ptr = ptr;
}

Vector GCPropDoorRotating::GetAxis() const {
    return GetSchemaValue<Vector>(m_ptr, "CPropDoorRotating", "m_vecAxis");
}

void GCPropDoorRotating::SetAxis(Vector value) {
    SetSchemaValue(m_ptr, "CPropDoorRotating", "m_vecAxis", false, value);
}

float GCPropDoorRotating::GetDistance() const {
    return GetSchemaValue<float>(m_ptr, "CPropDoorRotating", "m_flDistance");
}

void GCPropDoorRotating::SetDistance(float value) {
    SetSchemaValue(m_ptr, "CPropDoorRotating", "m_flDistance", false, value);
}

PropDoorRotatingSpawnPos_t GCPropDoorRotating::GetSpawnPosition() const {
    return GetSchemaValue<PropDoorRotatingSpawnPos_t>(m_ptr, "CPropDoorRotating", "m_eSpawnPosition");
}

void GCPropDoorRotating::SetSpawnPosition(PropDoorRotatingSpawnPos_t value) {
    SetSchemaValue(m_ptr, "CPropDoorRotating", "m_eSpawnPosition", false, value);
}

PropDoorRotatingOpenDirection_e GCPropDoorRotating::GetOpenDirection() const {
    return GetSchemaValue<PropDoorRotatingOpenDirection_e>(m_ptr, "CPropDoorRotating", "m_eOpenDirection");
}

void GCPropDoorRotating::SetOpenDirection(PropDoorRotatingOpenDirection_e value) {
    SetSchemaValue(m_ptr, "CPropDoorRotating", "m_eOpenDirection", false, value);
}

PropDoorRotatingOpenDirection_e GCPropDoorRotating::GetCurrentOpenDirection() const {
    return GetSchemaValue<PropDoorRotatingOpenDirection_e>(m_ptr, "CPropDoorRotating", "m_eCurrentOpenDirection");
}

void GCPropDoorRotating::SetCurrentOpenDirection(PropDoorRotatingOpenDirection_e value) {
    SetSchemaValue(m_ptr, "CPropDoorRotating", "m_eCurrentOpenDirection", false, value);
}

float GCPropDoorRotating::GetAjarAngle() const {
    return GetSchemaValue<float>(m_ptr, "CPropDoorRotating", "m_flAjarAngle");
}

void GCPropDoorRotating::SetAjarAngle(float value) {
    SetSchemaValue(m_ptr, "CPropDoorRotating", "m_flAjarAngle", false, value);
}

QAngle GCPropDoorRotating::GetRotationAjarDeprecated() const {
    return GetSchemaValue<QAngle>(m_ptr, "CPropDoorRotating", "m_angRotationAjarDeprecated");
}

void GCPropDoorRotating::SetRotationAjarDeprecated(QAngle value) {
    SetSchemaValue(m_ptr, "CPropDoorRotating", "m_angRotationAjarDeprecated", false, value);
}

QAngle GCPropDoorRotating::GetRotationClosed() const {
    return GetSchemaValue<QAngle>(m_ptr, "CPropDoorRotating", "m_angRotationClosed");
}

void GCPropDoorRotating::SetRotationClosed(QAngle value) {
    SetSchemaValue(m_ptr, "CPropDoorRotating", "m_angRotationClosed", false, value);
}

QAngle GCPropDoorRotating::GetRotationOpenForward() const {
    return GetSchemaValue<QAngle>(m_ptr, "CPropDoorRotating", "m_angRotationOpenForward");
}

void GCPropDoorRotating::SetRotationOpenForward(QAngle value) {
    SetSchemaValue(m_ptr, "CPropDoorRotating", "m_angRotationOpenForward", false, value);
}

QAngle GCPropDoorRotating::GetRotationOpenBack() const {
    return GetSchemaValue<QAngle>(m_ptr, "CPropDoorRotating", "m_angRotationOpenBack");
}

void GCPropDoorRotating::SetRotationOpenBack(QAngle value) {
    SetSchemaValue(m_ptr, "CPropDoorRotating", "m_angRotationOpenBack", false, value);
}

QAngle GCPropDoorRotating::GetGoal() const {
    return GetSchemaValue<QAngle>(m_ptr, "CPropDoorRotating", "m_angGoal");
}

void GCPropDoorRotating::SetGoal(QAngle value) {
    SetSchemaValue(m_ptr, "CPropDoorRotating", "m_angGoal", false, value);
}

Vector GCPropDoorRotating::GetForwardBoundsMin() const {
    return GetSchemaValue<Vector>(m_ptr, "CPropDoorRotating", "m_vecForwardBoundsMin");
}

void GCPropDoorRotating::SetForwardBoundsMin(Vector value) {
    SetSchemaValue(m_ptr, "CPropDoorRotating", "m_vecForwardBoundsMin", false, value);
}

Vector GCPropDoorRotating::GetForwardBoundsMax() const {
    return GetSchemaValue<Vector>(m_ptr, "CPropDoorRotating", "m_vecForwardBoundsMax");
}

void GCPropDoorRotating::SetForwardBoundsMax(Vector value) {
    SetSchemaValue(m_ptr, "CPropDoorRotating", "m_vecForwardBoundsMax", false, value);
}

Vector GCPropDoorRotating::GetBackBoundsMin() const {
    return GetSchemaValue<Vector>(m_ptr, "CPropDoorRotating", "m_vecBackBoundsMin");
}

void GCPropDoorRotating::SetBackBoundsMin(Vector value) {
    SetSchemaValue(m_ptr, "CPropDoorRotating", "m_vecBackBoundsMin", false, value);
}

Vector GCPropDoorRotating::GetBackBoundsMax() const {
    return GetSchemaValue<Vector>(m_ptr, "CPropDoorRotating", "m_vecBackBoundsMax");
}

void GCPropDoorRotating::SetBackBoundsMax(Vector value) {
    SetSchemaValue(m_ptr, "CPropDoorRotating", "m_vecBackBoundsMax", false, value);
}

bool GCPropDoorRotating::GetAjarDoorShouldntAlwaysOpen() const {
    return GetSchemaValue<bool>(m_ptr, "CPropDoorRotating", "m_bAjarDoorShouldntAlwaysOpen");
}

void GCPropDoorRotating::SetAjarDoorShouldntAlwaysOpen(bool value) {
    SetSchemaValue(m_ptr, "CPropDoorRotating", "m_bAjarDoorShouldntAlwaysOpen", false, value);
}

GCEntityBlocker GCPropDoorRotating::GetEntityBlocker() const {
    GCEntityBlocker value(GetSchemaValuePtr<void>(m_ptr, "CPropDoorRotating", "m_hEntityBlocker"));
    return value;
}

void GCPropDoorRotating::SetEntityBlocker(GCEntityBlocker* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'EntityBlocker' is not possible.\n");
}

std::string GCPropDoorRotating::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPropDoorRotating::IsValid() {
    return (m_ptr != nullptr);
}

Ghudtextparms_t::Ghudtextparms_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

Ghudtextparms_t::Ghudtextparms_t(void *ptr) {
    m_ptr = ptr;
}

Color Ghudtextparms_t::GetColor1() const {
    return GetSchemaValue<Color>(m_ptr, "hudtextparms_t", "color1");
}

void Ghudtextparms_t::SetColor1(Color value) {
    SetSchemaValue(m_ptr, "hudtextparms_t", "color1", true, value);
}

Color Ghudtextparms_t::GetColor2() const {
    return GetSchemaValue<Color>(m_ptr, "hudtextparms_t", "color2");
}

void Ghudtextparms_t::SetColor2(Color value) {
    SetSchemaValue(m_ptr, "hudtextparms_t", "color2", true, value);
}

uint8_t Ghudtextparms_t::GetEffect() const {
    return GetSchemaValue<uint8_t>(m_ptr, "hudtextparms_t", "effect");
}

void Ghudtextparms_t::SetEffect(uint8_t value) {
    SetSchemaValue(m_ptr, "hudtextparms_t", "effect", true, value);
}

uint8_t Ghudtextparms_t::GetChannel() const {
    return GetSchemaValue<uint8_t>(m_ptr, "hudtextparms_t", "channel");
}

void Ghudtextparms_t::SetChannel(uint8_t value) {
    SetSchemaValue(m_ptr, "hudtextparms_t", "channel", true, value);
}

float Ghudtextparms_t::GetX() const {
    return GetSchemaValue<float>(m_ptr, "hudtextparms_t", "x");
}

void Ghudtextparms_t::SetX(float value) {
    SetSchemaValue(m_ptr, "hudtextparms_t", "x", true, value);
}

float Ghudtextparms_t::GetY() const {
    return GetSchemaValue<float>(m_ptr, "hudtextparms_t", "y");
}

void Ghudtextparms_t::SetY(float value) {
    SetSchemaValue(m_ptr, "hudtextparms_t", "y", true, value);
}

std::string Ghudtextparms_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool Ghudtextparms_t::IsValid() {
    return (m_ptr != nullptr);
}

GCWeaponMP5SD::GCWeaponMP5SD(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWeaponMP5SD::GCWeaponMP5SD(void *ptr) {
    m_ptr = ptr;
}

std::string GCWeaponMP5SD::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWeaponMP5SD::IsValid() {
    return (m_ptr != nullptr);
}

GCTextureBasedAnimatable::GCTextureBasedAnimatable(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTextureBasedAnimatable::GCTextureBasedAnimatable(void *ptr) {
    m_ptr = ptr;
}

bool GCTextureBasedAnimatable::GetLoop() const {
    return GetSchemaValue<bool>(m_ptr, "CTextureBasedAnimatable", "m_bLoop");
}

void GCTextureBasedAnimatable::SetLoop(bool value) {
    SetSchemaValue(m_ptr, "CTextureBasedAnimatable", "m_bLoop", false, value);
}

float GCTextureBasedAnimatable::GetFPS() const {
    return GetSchemaValue<float>(m_ptr, "CTextureBasedAnimatable", "m_flFPS");
}

void GCTextureBasedAnimatable::SetFPS(float value) {
    SetSchemaValue(m_ptr, "CTextureBasedAnimatable", "m_flFPS", false, value);
}

Vector GCTextureBasedAnimatable::GetAnimationBoundsMin() const {
    return GetSchemaValue<Vector>(m_ptr, "CTextureBasedAnimatable", "m_vAnimationBoundsMin");
}

void GCTextureBasedAnimatable::SetAnimationBoundsMin(Vector value) {
    SetSchemaValue(m_ptr, "CTextureBasedAnimatable", "m_vAnimationBoundsMin", false, value);
}

Vector GCTextureBasedAnimatable::GetAnimationBoundsMax() const {
    return GetSchemaValue<Vector>(m_ptr, "CTextureBasedAnimatable", "m_vAnimationBoundsMax");
}

void GCTextureBasedAnimatable::SetAnimationBoundsMax(Vector value) {
    SetSchemaValue(m_ptr, "CTextureBasedAnimatable", "m_vAnimationBoundsMax", false, value);
}

float GCTextureBasedAnimatable::GetStartTime() const {
    return GetSchemaValue<float>(m_ptr, "CTextureBasedAnimatable", "m_flStartTime");
}

void GCTextureBasedAnimatable::SetStartTime(float value) {
    SetSchemaValue(m_ptr, "CTextureBasedAnimatable", "m_flStartTime", false, value);
}

float GCTextureBasedAnimatable::GetStartFrame() const {
    return GetSchemaValue<float>(m_ptr, "CTextureBasedAnimatable", "m_flStartFrame");
}

void GCTextureBasedAnimatable::SetStartFrame(float value) {
    SetSchemaValue(m_ptr, "CTextureBasedAnimatable", "m_flStartFrame", false, value);
}

std::string GCTextureBasedAnimatable::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTextureBasedAnimatable::IsValid() {
    return (m_ptr != nullptr);
}

GCMarkupVolumeTagged_NavGame::GCMarkupVolumeTagged_NavGame(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMarkupVolumeTagged_NavGame::GCMarkupVolumeTagged_NavGame(void *ptr) {
    m_ptr = ptr;
}

bool GCMarkupVolumeTagged_NavGame::GetFloodFillAttribute() const {
    return GetSchemaValue<bool>(m_ptr, "CMarkupVolumeTagged_NavGame", "m_bFloodFillAttribute");
}

void GCMarkupVolumeTagged_NavGame::SetFloodFillAttribute(bool value) {
    SetSchemaValue(m_ptr, "CMarkupVolumeTagged_NavGame", "m_bFloodFillAttribute", false, value);
}

std::string GCMarkupVolumeTagged_NavGame::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMarkupVolumeTagged_NavGame::IsValid() {
    return (m_ptr != nullptr);
}

GCPhysThruster::GCPhysThruster(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPhysThruster::GCPhysThruster(void *ptr) {
    m_ptr = ptr;
}

Vector GCPhysThruster::GetLocalOrigin() const {
    return GetSchemaValue<Vector>(m_ptr, "CPhysThruster", "m_localOrigin");
}

void GCPhysThruster::SetLocalOrigin(Vector value) {
    SetSchemaValue(m_ptr, "CPhysThruster", "m_localOrigin", false, value);
}

std::string GCPhysThruster::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPhysThruster::IsValid() {
    return (m_ptr != nullptr);
}

GCCSPointScriptExtensions_player::GCCSPointScriptExtensions_player(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSPointScriptExtensions_player::GCCSPointScriptExtensions_player(void *ptr) {
    m_ptr = ptr;
}

std::string GCCSPointScriptExtensions_player::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSPointScriptExtensions_player::IsValid() {
    return (m_ptr != nullptr);
}

GCCitadelSoundOpvarSetOBB::GCCitadelSoundOpvarSetOBB(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCitadelSoundOpvarSetOBB::GCCitadelSoundOpvarSetOBB(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCCitadelSoundOpvarSetOBB::GetStackName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CCitadelSoundOpvarSetOBB", "m_iszStackName");
}

void GCCitadelSoundOpvarSetOBB::SetStackName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CCitadelSoundOpvarSetOBB", "m_iszStackName", false, value);
}

CUtlSymbolLarge GCCitadelSoundOpvarSetOBB::GetOperatorName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CCitadelSoundOpvarSetOBB", "m_iszOperatorName");
}

void GCCitadelSoundOpvarSetOBB::SetOperatorName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CCitadelSoundOpvarSetOBB", "m_iszOperatorName", false, value);
}

CUtlSymbolLarge GCCitadelSoundOpvarSetOBB::GetOpvarName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CCitadelSoundOpvarSetOBB", "m_iszOpvarName");
}

void GCCitadelSoundOpvarSetOBB::SetOpvarName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CCitadelSoundOpvarSetOBB", "m_iszOpvarName", false, value);
}

Vector GCCitadelSoundOpvarSetOBB::GetDistanceInnerMins() const {
    return GetSchemaValue<Vector>(m_ptr, "CCitadelSoundOpvarSetOBB", "m_vDistanceInnerMins");
}

void GCCitadelSoundOpvarSetOBB::SetDistanceInnerMins(Vector value) {
    SetSchemaValue(m_ptr, "CCitadelSoundOpvarSetOBB", "m_vDistanceInnerMins", false, value);
}

Vector GCCitadelSoundOpvarSetOBB::GetDistanceInnerMaxs() const {
    return GetSchemaValue<Vector>(m_ptr, "CCitadelSoundOpvarSetOBB", "m_vDistanceInnerMaxs");
}

void GCCitadelSoundOpvarSetOBB::SetDistanceInnerMaxs(Vector value) {
    SetSchemaValue(m_ptr, "CCitadelSoundOpvarSetOBB", "m_vDistanceInnerMaxs", false, value);
}

Vector GCCitadelSoundOpvarSetOBB::GetDistanceOuterMins() const {
    return GetSchemaValue<Vector>(m_ptr, "CCitadelSoundOpvarSetOBB", "m_vDistanceOuterMins");
}

void GCCitadelSoundOpvarSetOBB::SetDistanceOuterMins(Vector value) {
    SetSchemaValue(m_ptr, "CCitadelSoundOpvarSetOBB", "m_vDistanceOuterMins", false, value);
}

Vector GCCitadelSoundOpvarSetOBB::GetDistanceOuterMaxs() const {
    return GetSchemaValue<Vector>(m_ptr, "CCitadelSoundOpvarSetOBB", "m_vDistanceOuterMaxs");
}

void GCCitadelSoundOpvarSetOBB::SetDistanceOuterMaxs(Vector value) {
    SetSchemaValue(m_ptr, "CCitadelSoundOpvarSetOBB", "m_vDistanceOuterMaxs", false, value);
}

int32_t GCCitadelSoundOpvarSetOBB::GetAABBDirection() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCitadelSoundOpvarSetOBB", "m_nAABBDirection");
}

void GCCitadelSoundOpvarSetOBB::SetAABBDirection(int32_t value) {
    SetSchemaValue(m_ptr, "CCitadelSoundOpvarSetOBB", "m_nAABBDirection", false, value);
}

std::string GCCitadelSoundOpvarSetOBB::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCitadelSoundOpvarSetOBB::IsValid() {
    return (m_ptr != nullptr);
}

GSellbackPurchaseEntry_t::GSellbackPurchaseEntry_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GSellbackPurchaseEntry_t::GSellbackPurchaseEntry_t(void *ptr) {
    m_ptr = ptr;
}

uint16_t GSellbackPurchaseEntry_t::GetDefIdx() const {
    return GetSchemaValue<uint16_t>(m_ptr, "SellbackPurchaseEntry_t", "m_unDefIdx");
}

void GSellbackPurchaseEntry_t::SetDefIdx(uint16_t value) {
    SetSchemaValue(m_ptr, "SellbackPurchaseEntry_t", "m_unDefIdx", true, value);
}

int32_t GSellbackPurchaseEntry_t::GetCost() const {
    return GetSchemaValue<int32_t>(m_ptr, "SellbackPurchaseEntry_t", "m_nCost");
}

void GSellbackPurchaseEntry_t::SetCost(int32_t value) {
    SetSchemaValue(m_ptr, "SellbackPurchaseEntry_t", "m_nCost", true, value);
}

int32_t GSellbackPurchaseEntry_t::GetPrevArmor() const {
    return GetSchemaValue<int32_t>(m_ptr, "SellbackPurchaseEntry_t", "m_nPrevArmor");
}

void GSellbackPurchaseEntry_t::SetPrevArmor(int32_t value) {
    SetSchemaValue(m_ptr, "SellbackPurchaseEntry_t", "m_nPrevArmor", true, value);
}

bool GSellbackPurchaseEntry_t::GetPrevHelmet() const {
    return GetSchemaValue<bool>(m_ptr, "SellbackPurchaseEntry_t", "m_bPrevHelmet");
}

void GSellbackPurchaseEntry_t::SetPrevHelmet(bool value) {
    SetSchemaValue(m_ptr, "SellbackPurchaseEntry_t", "m_bPrevHelmet", true, value);
}

GCEntityInstance GSellbackPurchaseEntry_t::GetItem() const {
    GCEntityInstance value(GetSchemaValuePtr<void>(m_ptr, "SellbackPurchaseEntry_t", "m_hItem"));
    return value;
}

void GSellbackPurchaseEntry_t::SetItem(GCEntityInstance* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Item' is not possible.\n");
}

std::string GSellbackPurchaseEntry_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GSellbackPurchaseEntry_t::IsValid() {
    return (m_ptr != nullptr);
}

GCWeaponFamas::GCWeaponFamas(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWeaponFamas::GCWeaponFamas(void *ptr) {
    m_ptr = ptr;
}

std::string GCWeaponFamas::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWeaponFamas::IsValid() {
    return (m_ptr != nullptr);
}

GCShatterGlassShardPhysics::GCShatterGlassShardPhysics(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCShatterGlassShardPhysics::GCShatterGlassShardPhysics(void *ptr) {
    m_ptr = ptr;
}

bool GCShatterGlassShardPhysics::GetDebris() const {
    return GetSchemaValue<bool>(m_ptr, "CShatterGlassShardPhysics", "m_bDebris");
}

void GCShatterGlassShardPhysics::SetDebris(bool value) {
    SetSchemaValue(m_ptr, "CShatterGlassShardPhysics", "m_bDebris", false, value);
}

uint32_t GCShatterGlassShardPhysics::GetParentShard() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CShatterGlassShardPhysics", "m_hParentShard");
}

void GCShatterGlassShardPhysics::SetParentShard(uint32_t value) {
    SetSchemaValue(m_ptr, "CShatterGlassShardPhysics", "m_hParentShard", false, value);
}

Gshard_model_desc_t GCShatterGlassShardPhysics::GetShardDesc() const {
    return GetSchemaValue<Gshard_model_desc_t>(m_ptr, "CShatterGlassShardPhysics", "m_ShardDesc");
}

void GCShatterGlassShardPhysics::SetShardDesc(Gshard_model_desc_t value) {
    SetSchemaValue(m_ptr, "CShatterGlassShardPhysics", "m_ShardDesc", false, value);
}

std::string GCShatterGlassShardPhysics::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCShatterGlassShardPhysics::IsValid() {
    return (m_ptr != nullptr);
}

GCFilterModel::GCFilterModel(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFilterModel::GCFilterModel(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCFilterModel::GetFilterModel() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFilterModel", "m_iFilterModel");
}

void GCFilterModel::SetFilterModel(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFilterModel", "m_iFilterModel", false, value);
}

std::string GCFilterModel::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFilterModel::IsValid() {
    return (m_ptr != nullptr);
}

GCCSPlayerPawnBase::GCCSPlayerPawnBase(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSPlayerPawnBase::GCCSPlayerPawnBase(void *ptr) {
    m_ptr = ptr;
}

GCTouchExpansionComponent GCCSPlayerPawnBase::GetCTouchExpansionComponent() const {
    return GetSchemaValue<GCTouchExpansionComponent>(m_ptr, "CCSPlayerPawnBase", "m_CTouchExpansionComponent");
}

void GCCSPlayerPawnBase::SetCTouchExpansionComponent(GCTouchExpansionComponent value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase", "m_CTouchExpansionComponent", false, value);
}

GCCSPlayer_PingServices GCCSPlayerPawnBase::GetPingServices() const {
    GCCSPlayer_PingServices value(GetSchemaValuePtr<void>(m_ptr, "CCSPlayerPawnBase", "m_pPingServices"));
    return value;
}

void GCCSPlayerPawnBase::SetPingServices(GCCSPlayer_PingServices* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'PingServices' is not possible.\n");
}

GCPlayer_ViewModelServices GCCSPlayerPawnBase::GetViewModelServices() const {
    GCPlayer_ViewModelServices value(GetSchemaValuePtr<void>(m_ptr, "CCSPlayerPawnBase", "m_pViewModelServices"));
    return value;
}

void GCCSPlayerPawnBase::SetViewModelServices(GCPlayer_ViewModelServices* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ViewModelServices' is not possible.\n");
}

CSPlayerState GCCSPlayerPawnBase::GetPlayerState() const {
    return GetSchemaValue<CSPlayerState>(m_ptr, "CCSPlayerPawnBase", "m_iPlayerState");
}

void GCCSPlayerPawnBase::SetPlayerState(CSPlayerState value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase", "m_iPlayerState", false, value);
}

bool GCCSPlayerPawnBase::GetRespawning() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawnBase", "m_bRespawning");
}

void GCCSPlayerPawnBase::SetRespawning(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase", "m_bRespawning", false, value);
}

bool GCCSPlayerPawnBase::GetGunGameImmunity() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawnBase", "m_bGunGameImmunity");
}

void GCCSPlayerPawnBase::SetGunGameImmunity(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase", "m_bGunGameImmunity", false, value);
}

float GCCSPlayerPawnBase::GetMolotovDamageTime() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawnBase", "m_fMolotovDamageTime");
}

void GCCSPlayerPawnBase::SetMolotovDamageTime(float value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase", "m_fMolotovDamageTime", false, value);
}

bool GCCSPlayerPawnBase::GetHasMovedSinceSpawn() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawnBase", "m_bHasMovedSinceSpawn");
}

void GCCSPlayerPawnBase::SetHasMovedSinceSpawn(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase", "m_bHasMovedSinceSpawn", false, value);
}

int32_t GCCSPlayerPawnBase::GetNumSpawns() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawnBase", "m_iNumSpawns");
}

void GCCSPlayerPawnBase::SetNumSpawns(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase", "m_iNumSpawns", false, value);
}

float GCCSPlayerPawnBase::GetIdleTimeSinceLastAction() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawnBase", "m_flIdleTimeSinceLastAction");
}

void GCCSPlayerPawnBase::SetIdleTimeSinceLastAction(float value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase", "m_flIdleTimeSinceLastAction", false, value);
}

float GCCSPlayerPawnBase::GetNextRadarUpdateTime() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawnBase", "m_fNextRadarUpdateTime");
}

void GCCSPlayerPawnBase::SetNextRadarUpdateTime(float value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase", "m_fNextRadarUpdateTime", false, value);
}

float GCCSPlayerPawnBase::GetFlashDuration() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawnBase", "m_flFlashDuration");
}

void GCCSPlayerPawnBase::SetFlashDuration(float value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase", "m_flFlashDuration", false, value);
}

float GCCSPlayerPawnBase::GetFlashMaxAlpha() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawnBase", "m_flFlashMaxAlpha");
}

void GCCSPlayerPawnBase::SetFlashMaxAlpha(float value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase", "m_flFlashMaxAlpha", false, value);
}

float GCCSPlayerPawnBase::GetProgressBarStartTime() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawnBase", "m_flProgressBarStartTime");
}

void GCCSPlayerPawnBase::SetProgressBarStartTime(float value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase", "m_flProgressBarStartTime", false, value);
}

int32_t GCCSPlayerPawnBase::GetProgressBarDuration() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawnBase", "m_iProgressBarDuration");
}

void GCCSPlayerPawnBase::SetProgressBarDuration(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase", "m_iProgressBarDuration", false, value);
}

QAngle GCCSPlayerPawnBase::GetEyeAngles() const {
    return GetSchemaValue<QAngle>(m_ptr, "CCSPlayerPawnBase", "m_angEyeAngles");
}

void GCCSPlayerPawnBase::SetEyeAngles(QAngle value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase", "m_angEyeAngles", false, value);
}

int32_t GCCSPlayerPawnBase::GetNumEnemiesAtRoundStart() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawnBase", "m_NumEnemiesAtRoundStart");
}

void GCCSPlayerPawnBase::SetNumEnemiesAtRoundStart(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase", "m_NumEnemiesAtRoundStart", false, value);
}

bool GCCSPlayerPawnBase::GetWasNotKilledNaturally() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawnBase", "m_wasNotKilledNaturally");
}

void GCCSPlayerPawnBase::SetWasNotKilledNaturally(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase", "m_wasNotKilledNaturally", false, value);
}

bool GCCSPlayerPawnBase::GetCommittingSuicideOnTeamChange() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawnBase", "m_bCommittingSuicideOnTeamChange");
}

void GCCSPlayerPawnBase::SetCommittingSuicideOnTeamChange(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase", "m_bCommittingSuicideOnTeamChange", false, value);
}

GCCSPlayerController GCCSPlayerPawnBase::GetOriginalController() const {
    GCCSPlayerController value(GetSchemaValuePtr<void>(m_ptr, "CCSPlayerPawnBase", "m_hOriginalController"));
    return value;
}

void GCCSPlayerPawnBase::SetOriginalController(GCCSPlayerController* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OriginalController' is not possible.\n");
}

std::string GCCSPlayerPawnBase::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSPlayerPawnBase::IsValid() {
    return (m_ptr != nullptr);
}

GCPathTrack::GCPathTrack(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPathTrack::GCPathTrack(void *ptr) {
    m_ptr = ptr;
}

GCPathTrack GCPathTrack::GetPnext() const {
    GCPathTrack value(GetSchemaValuePtr<void>(m_ptr, "CPathTrack", "m_pnext"));
    return value;
}

void GCPathTrack::SetPnext(GCPathTrack* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Pnext' is not possible.\n");
}

GCPathTrack GCPathTrack::GetPprevious() const {
    GCPathTrack value(GetSchemaValuePtr<void>(m_ptr, "CPathTrack", "m_pprevious"));
    return value;
}

void GCPathTrack::SetPprevious(GCPathTrack* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Pprevious' is not possible.\n");
}

GCPathTrack GCPathTrack::GetPaltpath() const {
    GCPathTrack value(GetSchemaValuePtr<void>(m_ptr, "CPathTrack", "m_paltpath"));
    return value;
}

void GCPathTrack::SetPaltpath(GCPathTrack* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Paltpath' is not possible.\n");
}

float GCPathTrack::GetRadius() const {
    return GetSchemaValue<float>(m_ptr, "CPathTrack", "m_flRadius");
}

void GCPathTrack::SetRadius(float value) {
    SetSchemaValue(m_ptr, "CPathTrack", "m_flRadius", false, value);
}

float GCPathTrack::GetLength() const {
    return GetSchemaValue<float>(m_ptr, "CPathTrack", "m_length");
}

void GCPathTrack::SetLength(float value) {
    SetSchemaValue(m_ptr, "CPathTrack", "m_length", false, value);
}

CUtlSymbolLarge GCPathTrack::GetAltName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPathTrack", "m_altName");
}

void GCPathTrack::SetAltName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPathTrack", "m_altName", false, value);
}

int32_t GCPathTrack::GetIterVal() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPathTrack", "m_nIterVal");
}

void GCPathTrack::SetIterVal(int32_t value) {
    SetSchemaValue(m_ptr, "CPathTrack", "m_nIterVal", false, value);
}

TrackOrientationType_t GCPathTrack::GetOrientationType() const {
    return GetSchemaValue<TrackOrientationType_t>(m_ptr, "CPathTrack", "m_eOrientationType");
}

void GCPathTrack::SetOrientationType(TrackOrientationType_t value) {
    SetSchemaValue(m_ptr, "CPathTrack", "m_eOrientationType", false, value);
}

GCEntityIOOutput GCPathTrack::GetOnPass() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPathTrack", "m_OnPass");
}

void GCPathTrack::SetOnPass(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPathTrack", "m_OnPass", false, value);
}

std::string GCPathTrack::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPathTrack::IsValid() {
    return (m_ptr != nullptr);
}

GCLogicDistanceCheck::GCLogicDistanceCheck(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCLogicDistanceCheck::GCLogicDistanceCheck(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCLogicDistanceCheck::GetEntityA() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CLogicDistanceCheck", "m_iszEntityA");
}

void GCLogicDistanceCheck::SetEntityA(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CLogicDistanceCheck", "m_iszEntityA", false, value);
}

CUtlSymbolLarge GCLogicDistanceCheck::GetEntityB() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CLogicDistanceCheck", "m_iszEntityB");
}

void GCLogicDistanceCheck::SetEntityB(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CLogicDistanceCheck", "m_iszEntityB", false, value);
}

float GCLogicDistanceCheck::GetZone1Distance() const {
    return GetSchemaValue<float>(m_ptr, "CLogicDistanceCheck", "m_flZone1Distance");
}

void GCLogicDistanceCheck::SetZone1Distance(float value) {
    SetSchemaValue(m_ptr, "CLogicDistanceCheck", "m_flZone1Distance", false, value);
}

float GCLogicDistanceCheck::GetZone2Distance() const {
    return GetSchemaValue<float>(m_ptr, "CLogicDistanceCheck", "m_flZone2Distance");
}

void GCLogicDistanceCheck::SetZone2Distance(float value) {
    SetSchemaValue(m_ptr, "CLogicDistanceCheck", "m_flZone2Distance", false, value);
}

GCEntityIOOutput GCLogicDistanceCheck::GetInZone1() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CLogicDistanceCheck", "m_InZone1");
}

void GCLogicDistanceCheck::SetInZone1(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CLogicDistanceCheck", "m_InZone1", false, value);
}

GCEntityIOOutput GCLogicDistanceCheck::GetInZone2() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CLogicDistanceCheck", "m_InZone2");
}

void GCLogicDistanceCheck::SetInZone2(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CLogicDistanceCheck", "m_InZone2", false, value);
}

GCEntityIOOutput GCLogicDistanceCheck::GetInZone3() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CLogicDistanceCheck", "m_InZone3");
}

void GCLogicDistanceCheck::SetInZone3(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CLogicDistanceCheck", "m_InZone3", false, value);
}

std::string GCLogicDistanceCheck::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCLogicDistanceCheck::IsValid() {
    return (m_ptr != nullptr);
}

GCOmniLight::GCOmniLight(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCOmniLight::GCOmniLight(void *ptr) {
    m_ptr = ptr;
}

float GCOmniLight::GetInnerAngle() const {
    return GetSchemaValue<float>(m_ptr, "COmniLight", "m_flInnerAngle");
}

void GCOmniLight::SetInnerAngle(float value) {
    SetSchemaValue(m_ptr, "COmniLight", "m_flInnerAngle", false, value);
}

float GCOmniLight::GetOuterAngle() const {
    return GetSchemaValue<float>(m_ptr, "COmniLight", "m_flOuterAngle");
}

void GCOmniLight::SetOuterAngle(float value) {
    SetSchemaValue(m_ptr, "COmniLight", "m_flOuterAngle", false, value);
}

bool GCOmniLight::GetShowLight() const {
    return GetSchemaValue<bool>(m_ptr, "COmniLight", "m_bShowLight");
}

void GCOmniLight::SetShowLight(bool value) {
    SetSchemaValue(m_ptr, "COmniLight", "m_bShowLight", false, value);
}

std::string GCOmniLight::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCOmniLight::IsValid() {
    return (m_ptr != nullptr);
}

GCInfoOffscreenPanoramaTexture::GCInfoOffscreenPanoramaTexture(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCInfoOffscreenPanoramaTexture::GCInfoOffscreenPanoramaTexture(void *ptr) {
    m_ptr = ptr;
}

bool GCInfoOffscreenPanoramaTexture::GetDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CInfoOffscreenPanoramaTexture", "m_bDisabled");
}

void GCInfoOffscreenPanoramaTexture::SetDisabled(bool value) {
    SetSchemaValue(m_ptr, "CInfoOffscreenPanoramaTexture", "m_bDisabled", false, value);
}

int32_t GCInfoOffscreenPanoramaTexture::GetResolutionX() const {
    return GetSchemaValue<int32_t>(m_ptr, "CInfoOffscreenPanoramaTexture", "m_nResolutionX");
}

void GCInfoOffscreenPanoramaTexture::SetResolutionX(int32_t value) {
    SetSchemaValue(m_ptr, "CInfoOffscreenPanoramaTexture", "m_nResolutionX", false, value);
}

int32_t GCInfoOffscreenPanoramaTexture::GetResolutionY() const {
    return GetSchemaValue<int32_t>(m_ptr, "CInfoOffscreenPanoramaTexture", "m_nResolutionY");
}

void GCInfoOffscreenPanoramaTexture::SetResolutionY(int32_t value) {
    SetSchemaValue(m_ptr, "CInfoOffscreenPanoramaTexture", "m_nResolutionY", false, value);
}

CUtlSymbolLarge GCInfoOffscreenPanoramaTexture::GetLayoutFileName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CInfoOffscreenPanoramaTexture", "m_szLayoutFileName");
}

void GCInfoOffscreenPanoramaTexture::SetLayoutFileName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CInfoOffscreenPanoramaTexture", "m_szLayoutFileName", false, value);
}

CUtlSymbolLarge GCInfoOffscreenPanoramaTexture::GetRenderAttrName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CInfoOffscreenPanoramaTexture", "m_RenderAttrName");
}

void GCInfoOffscreenPanoramaTexture::SetRenderAttrName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CInfoOffscreenPanoramaTexture", "m_RenderAttrName", false, value);
}

std::vector<GCBaseModelEntity*> GCInfoOffscreenPanoramaTexture::GetTargetEntities() const {
    CUtlVector<GCBaseModelEntity*>* vec = GetSchemaValue<CUtlVector<GCBaseModelEntity*>*>(m_ptr, "CInfoOffscreenPanoramaTexture", "m_TargetEntities"); std::vector<GCBaseModelEntity*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCInfoOffscreenPanoramaTexture::SetTargetEntities(std::vector<GCBaseModelEntity*> value) {
    SetSchemaValueCUtlVector<GCBaseModelEntity*>(m_ptr, "CInfoOffscreenPanoramaTexture", "m_TargetEntities", false, value);
}

int32_t GCInfoOffscreenPanoramaTexture::GetTargetChangeCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CInfoOffscreenPanoramaTexture", "m_nTargetChangeCount");
}

void GCInfoOffscreenPanoramaTexture::SetTargetChangeCount(int32_t value) {
    SetSchemaValue(m_ptr, "CInfoOffscreenPanoramaTexture", "m_nTargetChangeCount", false, value);
}

std::vector<CUtlSymbolLarge> GCInfoOffscreenPanoramaTexture::GetCSSClasses() const {
    CUtlVector<CUtlSymbolLarge>* vec = GetSchemaValue<CUtlVector<CUtlSymbolLarge>*>(m_ptr, "CInfoOffscreenPanoramaTexture", "m_vecCSSClasses"); std::vector<CUtlSymbolLarge> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCInfoOffscreenPanoramaTexture::SetCSSClasses(std::vector<CUtlSymbolLarge> value) {
    SetSchemaValueCUtlVector<CUtlSymbolLarge>(m_ptr, "CInfoOffscreenPanoramaTexture", "m_vecCSSClasses", false, value);
}

CUtlSymbolLarge GCInfoOffscreenPanoramaTexture::GetTargetsName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CInfoOffscreenPanoramaTexture", "m_szTargetsName");
}

void GCInfoOffscreenPanoramaTexture::SetTargetsName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CInfoOffscreenPanoramaTexture", "m_szTargetsName", false, value);
}

std::string GCInfoOffscreenPanoramaTexture::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCInfoOffscreenPanoramaTexture::IsValid() {
    return (m_ptr != nullptr);
}

GCInfoVisibilityBox::GCInfoVisibilityBox(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCInfoVisibilityBox::GCInfoVisibilityBox(void *ptr) {
    m_ptr = ptr;
}

int32_t GCInfoVisibilityBox::GetMode() const {
    return GetSchemaValue<int32_t>(m_ptr, "CInfoVisibilityBox", "m_nMode");
}

void GCInfoVisibilityBox::SetMode(int32_t value) {
    SetSchemaValue(m_ptr, "CInfoVisibilityBox", "m_nMode", false, value);
}

Vector GCInfoVisibilityBox::GetBoxSize() const {
    return GetSchemaValue<Vector>(m_ptr, "CInfoVisibilityBox", "m_vBoxSize");
}

void GCInfoVisibilityBox::SetBoxSize(Vector value) {
    SetSchemaValue(m_ptr, "CInfoVisibilityBox", "m_vBoxSize", false, value);
}

bool GCInfoVisibilityBox::GetEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CInfoVisibilityBox", "m_bEnabled");
}

void GCInfoVisibilityBox::SetEnabled(bool value) {
    SetSchemaValue(m_ptr, "CInfoVisibilityBox", "m_bEnabled", false, value);
}

std::string GCInfoVisibilityBox::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCInfoVisibilityBox::IsValid() {
    return (m_ptr != nullptr);
}

GCGamePlayerEquip::GCGamePlayerEquip(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCGamePlayerEquip::GCGamePlayerEquip(void *ptr) {
    m_ptr = ptr;
}

std::string GCGamePlayerEquip::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCGamePlayerEquip::IsValid() {
    return (m_ptr != nullptr);
}

GCInfoTargetServerOnly::GCInfoTargetServerOnly(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCInfoTargetServerOnly::GCInfoTargetServerOnly(void *ptr) {
    m_ptr = ptr;
}

std::string GCInfoTargetServerOnly::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCInfoTargetServerOnly::IsValid() {
    return (m_ptr != nullptr);
}

GCSoundOpvarSetPathCornerEntity::GCSoundOpvarSetPathCornerEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSoundOpvarSetPathCornerEntity::GCSoundOpvarSetPathCornerEntity(void *ptr) {
    m_ptr = ptr;
}

float GCSoundOpvarSetPathCornerEntity::GetDistMinSqr() const {
    return GetSchemaValue<float>(m_ptr, "CSoundOpvarSetPathCornerEntity", "m_flDistMinSqr");
}

void GCSoundOpvarSetPathCornerEntity::SetDistMinSqr(float value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetPathCornerEntity", "m_flDistMinSqr", false, value);
}

float GCSoundOpvarSetPathCornerEntity::GetDistMaxSqr() const {
    return GetSchemaValue<float>(m_ptr, "CSoundOpvarSetPathCornerEntity", "m_flDistMaxSqr");
}

void GCSoundOpvarSetPathCornerEntity::SetDistMaxSqr(float value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetPathCornerEntity", "m_flDistMaxSqr", false, value);
}

CUtlSymbolLarge GCSoundOpvarSetPathCornerEntity::GetPathCornerEntityName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSoundOpvarSetPathCornerEntity", "m_iszPathCornerEntityName");
}

void GCSoundOpvarSetPathCornerEntity::SetPathCornerEntityName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CSoundOpvarSetPathCornerEntity", "m_iszPathCornerEntityName", false, value);
}

std::string GCSoundOpvarSetPathCornerEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSoundOpvarSetPathCornerEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCCSPlayer_WeaponServices::GCCSPlayer_WeaponServices(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSPlayer_WeaponServices::GCCSPlayer_WeaponServices(void *ptr) {
    m_ptr = ptr;
}

bool GCCSPlayer_WeaponServices::GetIsLookingAtWeapon() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_WeaponServices", "m_bIsLookingAtWeapon");
}

void GCCSPlayer_WeaponServices::SetIsLookingAtWeapon(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayer_WeaponServices", "m_bIsLookingAtWeapon", false, value);
}

bool GCCSPlayer_WeaponServices::GetIsHoldingLookAtWeapon() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_WeaponServices", "m_bIsHoldingLookAtWeapon");
}

void GCCSPlayer_WeaponServices::SetIsHoldingLookAtWeapon(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayer_WeaponServices", "m_bIsHoldingLookAtWeapon", false, value);
}

GCBasePlayerWeapon GCCSPlayer_WeaponServices::GetSavedWeapon() const {
    GCBasePlayerWeapon value(GetSchemaValuePtr<void>(m_ptr, "CCSPlayer_WeaponServices", "m_hSavedWeapon"));
    return value;
}

void GCCSPlayer_WeaponServices::SetSavedWeapon(GCBasePlayerWeapon* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'SavedWeapon' is not possible.\n");
}

int32_t GCCSPlayer_WeaponServices::GetTimeToMelee() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayer_WeaponServices", "m_nTimeToMelee");
}

void GCCSPlayer_WeaponServices::SetTimeToMelee(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayer_WeaponServices", "m_nTimeToMelee", false, value);
}

int32_t GCCSPlayer_WeaponServices::GetTimeToSecondary() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayer_WeaponServices", "m_nTimeToSecondary");
}

void GCCSPlayer_WeaponServices::SetTimeToSecondary(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayer_WeaponServices", "m_nTimeToSecondary", false, value);
}

int32_t GCCSPlayer_WeaponServices::GetTimeToPrimary() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayer_WeaponServices", "m_nTimeToPrimary");
}

void GCCSPlayer_WeaponServices::SetTimeToPrimary(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayer_WeaponServices", "m_nTimeToPrimary", false, value);
}

int32_t GCCSPlayer_WeaponServices::GetTimeToSniperRifle() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayer_WeaponServices", "m_nTimeToSniperRifle");
}

void GCCSPlayer_WeaponServices::SetTimeToSniperRifle(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayer_WeaponServices", "m_nTimeToSniperRifle", false, value);
}

bool GCCSPlayer_WeaponServices::GetIsBeingGivenItem() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_WeaponServices", "m_bIsBeingGivenItem");
}

void GCCSPlayer_WeaponServices::SetIsBeingGivenItem(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayer_WeaponServices", "m_bIsBeingGivenItem", false, value);
}

bool GCCSPlayer_WeaponServices::GetIsPickingUpItemWithUse() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_WeaponServices", "m_bIsPickingUpItemWithUse");
}

void GCCSPlayer_WeaponServices::SetIsPickingUpItemWithUse(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayer_WeaponServices", "m_bIsPickingUpItemWithUse", false, value);
}

bool GCCSPlayer_WeaponServices::GetPickedUpWeapon() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_WeaponServices", "m_bPickedUpWeapon");
}

void GCCSPlayer_WeaponServices::SetPickedUpWeapon(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayer_WeaponServices", "m_bPickedUpWeapon", false, value);
}

bool GCCSPlayer_WeaponServices::GetDisableAutoDeploy() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_WeaponServices", "m_bDisableAutoDeploy");
}

void GCCSPlayer_WeaponServices::SetDisableAutoDeploy(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayer_WeaponServices", "m_bDisableAutoDeploy", false, value);
}

bool GCCSPlayer_WeaponServices::GetIsPickingUpGroundWeapon() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_WeaponServices", "m_bIsPickingUpGroundWeapon");
}

void GCCSPlayer_WeaponServices::SetIsPickingUpGroundWeapon(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayer_WeaponServices", "m_bIsPickingUpGroundWeapon", false, value);
}

uint32_t GCCSPlayer_WeaponServices::GetOldShootPositionHistoryCount() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CCSPlayer_WeaponServices", "m_nOldShootPositionHistoryCount");
}

void GCCSPlayer_WeaponServices::SetOldShootPositionHistoryCount(uint32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayer_WeaponServices", "m_nOldShootPositionHistoryCount", false, value);
}

uint32_t GCCSPlayer_WeaponServices::GetOldInputHistoryCount() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CCSPlayer_WeaponServices", "m_nOldInputHistoryCount");
}

void GCCSPlayer_WeaponServices::SetOldInputHistoryCount(uint32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayer_WeaponServices", "m_nOldInputHistoryCount", false, value);
}

std::string GCCSPlayer_WeaponServices::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSPlayer_WeaponServices::IsValid() {
    return (m_ptr != nullptr);
}

GCEntityFlame::GCEntityFlame(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEntityFlame::GCEntityFlame(void *ptr) {
    m_ptr = ptr;
}

GCBaseEntity GCEntityFlame::GetEntAttached() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CEntityFlame", "m_hEntAttached"));
    return value;
}

void GCEntityFlame::SetEntAttached(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'EntAttached' is not possible.\n");
}

bool GCEntityFlame::GetCheapEffect() const {
    return GetSchemaValue<bool>(m_ptr, "CEntityFlame", "m_bCheapEffect");
}

void GCEntityFlame::SetCheapEffect(bool value) {
    SetSchemaValue(m_ptr, "CEntityFlame", "m_bCheapEffect", false, value);
}

float GCEntityFlame::GetSize() const {
    return GetSchemaValue<float>(m_ptr, "CEntityFlame", "m_flSize");
}

void GCEntityFlame::SetSize(float value) {
    SetSchemaValue(m_ptr, "CEntityFlame", "m_flSize", false, value);
}

bool GCEntityFlame::GetUseHitboxes() const {
    return GetSchemaValue<bool>(m_ptr, "CEntityFlame", "m_bUseHitboxes");
}

void GCEntityFlame::SetUseHitboxes(bool value) {
    SetSchemaValue(m_ptr, "CEntityFlame", "m_bUseHitboxes", false, value);
}

int32_t GCEntityFlame::GetNumHitboxFires() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEntityFlame", "m_iNumHitboxFires");
}

void GCEntityFlame::SetNumHitboxFires(int32_t value) {
    SetSchemaValue(m_ptr, "CEntityFlame", "m_iNumHitboxFires", false, value);
}

float GCEntityFlame::GetHitboxFireScale() const {
    return GetSchemaValue<float>(m_ptr, "CEntityFlame", "m_flHitboxFireScale");
}

void GCEntityFlame::SetHitboxFireScale(float value) {
    SetSchemaValue(m_ptr, "CEntityFlame", "m_flHitboxFireScale", false, value);
}

GCBaseEntity GCEntityFlame::GetAttacker() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CEntityFlame", "m_hAttacker"));
    return value;
}

void GCEntityFlame::SetAttacker(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Attacker' is not possible.\n");
}

int32_t GCEntityFlame::GetDangerSound() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEntityFlame", "m_iDangerSound");
}

void GCEntityFlame::SetDangerSound(int32_t value) {
    SetSchemaValue(m_ptr, "CEntityFlame", "m_iDangerSound", false, value);
}

float GCEntityFlame::GetDirectDamagePerSecond() const {
    return GetSchemaValue<float>(m_ptr, "CEntityFlame", "m_flDirectDamagePerSecond");
}

void GCEntityFlame::SetDirectDamagePerSecond(float value) {
    SetSchemaValue(m_ptr, "CEntityFlame", "m_flDirectDamagePerSecond", false, value);
}

int32_t GCEntityFlame::GetCustomDamageType() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEntityFlame", "m_iCustomDamageType");
}

void GCEntityFlame::SetCustomDamageType(int32_t value) {
    SetSchemaValue(m_ptr, "CEntityFlame", "m_iCustomDamageType", false, value);
}

std::string GCEntityFlame::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEntityFlame::IsValid() {
    return (m_ptr != nullptr);
}

GCWeaponMP9::GCWeaponMP9(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWeaponMP9::GCWeaponMP9(void *ptr) {
    m_ptr = ptr;
}

std::string GCWeaponMP9::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWeaponMP9::IsValid() {
    return (m_ptr != nullptr);
}

GCCSBot::GCCSBot(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSBot::GCCSBot(void *ptr) {
    m_ptr = ptr;
}

Vector GCCSBot::GetEyePosition() const {
    return GetSchemaValue<Vector>(m_ptr, "CCSBot", "m_eyePosition");
}

void GCCSBot::SetEyePosition(Vector value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_eyePosition", false, value);
}

std::string GCCSBot::GetName() const {
    return GetSchemaValuePtr<char>(m_ptr, "CCSBot", "m_name");
}

void GCCSBot::SetName(std::string value) {
    WriteSchemaPtrValue(m_ptr, "CCSBot", "m_name", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 64);
}

float GCCSBot::GetCombatRange() const {
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_combatRange");
}

void GCCSBot::SetCombatRange(float value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_combatRange", false, value);
}

bool GCCSBot::GetIsRogue() const {
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_isRogue");
}

void GCCSBot::SetIsRogue(bool value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_isRogue", false, value);
}

GCountdownTimer GCCSBot::GetRogueTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CCSBot", "m_rogueTimer");
}

void GCCSBot::SetRogueTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_rogueTimer", false, value);
}

bool GCCSBot::GetDiedLastRound() const {
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_diedLastRound");
}

void GCCSBot::SetDiedLastRound(bool value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_diedLastRound", false, value);
}

float GCCSBot::GetSafeTime() const {
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_safeTime");
}

void GCCSBot::SetSafeTime(float value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_safeTime", false, value);
}

bool GCCSBot::GetWasSafe() const {
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_wasSafe");
}

void GCCSBot::SetWasSafe(bool value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_wasSafe", false, value);
}

bool GCCSBot::GetBlindFire() const {
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_blindFire");
}

void GCCSBot::SetBlindFire(bool value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_blindFire", false, value);
}

GCountdownTimer GCCSBot::GetSurpriseTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CCSBot", "m_surpriseTimer");
}

void GCCSBot::SetSurpriseTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_surpriseTimer", false, value);
}

bool GCCSBot::GetAllowActive() const {
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_bAllowActive");
}

void GCCSBot::SetAllowActive(bool value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_bAllowActive", false, value);
}

bool GCCSBot::GetIsFollowing() const {
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_isFollowing");
}

void GCCSBot::SetIsFollowing(bool value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_isFollowing", false, value);
}

GCCSPlayerPawn GCCSBot::GetLeader() const {
    GCCSPlayerPawn value(GetSchemaValuePtr<void>(m_ptr, "CCSBot", "m_leader"));
    return value;
}

void GCCSBot::SetLeader(GCCSPlayerPawn* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Leader' is not possible.\n");
}

float GCCSBot::GetFollowTimestamp() const {
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_followTimestamp");
}

void GCCSBot::SetFollowTimestamp(float value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_followTimestamp", false, value);
}

float GCCSBot::GetAllowAutoFollowTime() const {
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_allowAutoFollowTime");
}

void GCCSBot::SetAllowAutoFollowTime(float value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_allowAutoFollowTime", false, value);
}

GCountdownTimer GCCSBot::GetHurryTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CCSBot", "m_hurryTimer");
}

void GCCSBot::SetHurryTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_hurryTimer", false, value);
}

GCountdownTimer GCCSBot::GetAlertTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CCSBot", "m_alertTimer");
}

void GCCSBot::SetAlertTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_alertTimer", false, value);
}

GCountdownTimer GCCSBot::GetSneakTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CCSBot", "m_sneakTimer");
}

void GCCSBot::SetSneakTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_sneakTimer", false, value);
}

GCountdownTimer GCCSBot::GetPanicTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CCSBot", "m_panicTimer");
}

void GCCSBot::SetPanicTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_panicTimer", false, value);
}

float GCCSBot::GetStateTimestamp() const {
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_stateTimestamp");
}

void GCCSBot::SetStateTimestamp(float value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_stateTimestamp", false, value);
}

bool GCCSBot::GetIsAttacking() const {
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_isAttacking");
}

void GCCSBot::SetIsAttacking(bool value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_isAttacking", false, value);
}

bool GCCSBot::GetIsOpeningDoor() const {
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_isOpeningDoor");
}

void GCCSBot::SetIsOpeningDoor(bool value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_isOpeningDoor", false, value);
}

GCBaseEntity GCCSBot::GetTaskEntity() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CCSBot", "m_taskEntity"));
    return value;
}

void GCCSBot::SetTaskEntity(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'TaskEntity' is not possible.\n");
}

Vector GCCSBot::GetGoalPosition() const {
    return GetSchemaValue<Vector>(m_ptr, "CCSBot", "m_goalPosition");
}

void GCCSBot::SetGoalPosition(Vector value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_goalPosition", false, value);
}

GCBaseEntity GCCSBot::GetGoalEntity() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CCSBot", "m_goalEntity"));
    return value;
}

void GCCSBot::SetGoalEntity(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'GoalEntity' is not possible.\n");
}

GCBaseEntity GCCSBot::GetAvoid() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CCSBot", "m_avoid"));
    return value;
}

void GCCSBot::SetAvoid(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Avoid' is not possible.\n");
}

float GCCSBot::GetAvoidTimestamp() const {
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_avoidTimestamp");
}

void GCCSBot::SetAvoidTimestamp(float value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_avoidTimestamp", false, value);
}

bool GCCSBot::GetIsStopping() const {
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_isStopping");
}

void GCCSBot::SetIsStopping(bool value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_isStopping", false, value);
}

bool GCCSBot::GetHasVisitedEnemySpawn() const {
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_hasVisitedEnemySpawn");
}

void GCCSBot::SetHasVisitedEnemySpawn(bool value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_hasVisitedEnemySpawn", false, value);
}

GIntervalTimer GCCSBot::GetStillTimer() const {
    return GetSchemaValue<GIntervalTimer>(m_ptr, "CCSBot", "m_stillTimer");
}

void GCCSBot::SetStillTimer(GIntervalTimer value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_stillTimer", false, value);
}

bool GCCSBot::GetEyeAnglesUnderPathFinderControl() const {
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_bEyeAnglesUnderPathFinderControl");
}

void GCCSBot::SetEyeAnglesUnderPathFinderControl(bool value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_bEyeAnglesUnderPathFinderControl", false, value);
}

int32_t GCCSBot::GetPathIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSBot", "m_pathIndex");
}

void GCCSBot::SetPathIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_pathIndex", false, value);
}

GCountdownTimer GCCSBot::GetRepathTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CCSBot", "m_repathTimer");
}

void GCCSBot::SetRepathTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_repathTimer", false, value);
}

GCountdownTimer GCCSBot::GetAvoidFriendTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CCSBot", "m_avoidFriendTimer");
}

void GCCSBot::SetAvoidFriendTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_avoidFriendTimer", false, value);
}

bool GCCSBot::GetIsFriendInTheWay() const {
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_isFriendInTheWay");
}

void GCCSBot::SetIsFriendInTheWay(bool value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_isFriendInTheWay", false, value);
}

GCountdownTimer GCCSBot::GetPoliteTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CCSBot", "m_politeTimer");
}

void GCCSBot::SetPoliteTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_politeTimer", false, value);
}

bool GCCSBot::GetIsWaitingBehindFriend() const {
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_isWaitingBehindFriend");
}

void GCCSBot::SetIsWaitingBehindFriend(bool value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_isWaitingBehindFriend", false, value);
}

float GCCSBot::GetPathLadderEnd() const {
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_pathLadderEnd");
}

void GCCSBot::SetPathLadderEnd(float value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_pathLadderEnd", false, value);
}

GCountdownTimer GCCSBot::GetMustRunTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CCSBot", "m_mustRunTimer");
}

void GCCSBot::SetMustRunTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_mustRunTimer", false, value);
}

GCountdownTimer GCCSBot::GetWaitTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CCSBot", "m_waitTimer");
}

void GCCSBot::SetWaitTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_waitTimer", false, value);
}

GCountdownTimer GCCSBot::GetUpdateTravelDistanceTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CCSBot", "m_updateTravelDistanceTimer");
}

void GCCSBot::SetUpdateTravelDistanceTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_updateTravelDistanceTimer", false, value);
}

std::vector<float> GCCSBot::GetPlayerTravelDistance() const {
    float* outValue = GetSchemaValue<float*>(m_ptr, "CCSBot", "m_playerTravelDistance"); std::vector<float> ret; for(int i = 0; i < 64; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCCSBot::SetPlayerTravelDistance(std::vector<float> value) {
    float* outValue = GetSchemaValue<float*>(m_ptr, "CCSBot", "m_playerTravelDistance"); for(int i = 0; i < 64; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CCSBot", "m_playerTravelDistance", false, outValue);
}

uint8_t GCCSBot::GetTravelDistancePhase() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CCSBot", "m_travelDistancePhase");
}

void GCCSBot::SetTravelDistancePhase(uint8_t value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_travelDistancePhase", false, value);
}

uint8_t GCCSBot::GetHostageEscortCount() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CCSBot", "m_hostageEscortCount");
}

void GCCSBot::SetHostageEscortCount(uint8_t value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_hostageEscortCount", false, value);
}

float GCCSBot::GetHostageEscortCountTimestamp() const {
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_hostageEscortCountTimestamp");
}

void GCCSBot::SetHostageEscortCountTimestamp(float value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_hostageEscortCountTimestamp", false, value);
}

int32_t GCCSBot::GetDesiredTeam() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSBot", "m_desiredTeam");
}

void GCCSBot::SetDesiredTeam(int32_t value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_desiredTeam", false, value);
}

bool GCCSBot::GetHasJoined() const {
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_hasJoined");
}

void GCCSBot::SetHasJoined(bool value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_hasJoined", false, value);
}

bool GCCSBot::GetIsWaitingForHostage() const {
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_isWaitingForHostage");
}

void GCCSBot::SetIsWaitingForHostage(bool value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_isWaitingForHostage", false, value);
}

GCountdownTimer GCCSBot::GetInhibitWaitingForHostageTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CCSBot", "m_inhibitWaitingForHostageTimer");
}

void GCCSBot::SetInhibitWaitingForHostageTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_inhibitWaitingForHostageTimer", false, value);
}

GCountdownTimer GCCSBot::GetWaitForHostageTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CCSBot", "m_waitForHostageTimer");
}

void GCCSBot::SetWaitForHostageTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_waitForHostageTimer", false, value);
}

Vector GCCSBot::GetNoisePosition() const {
    return GetSchemaValue<Vector>(m_ptr, "CCSBot", "m_noisePosition");
}

void GCCSBot::SetNoisePosition(Vector value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_noisePosition", false, value);
}

float GCCSBot::GetNoiseTravelDistance() const {
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_noiseTravelDistance");
}

void GCCSBot::SetNoiseTravelDistance(float value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_noiseTravelDistance", false, value);
}

float GCCSBot::GetNoiseTimestamp() const {
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_noiseTimestamp");
}

void GCCSBot::SetNoiseTimestamp(float value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_noiseTimestamp", false, value);
}

GCCSPlayerPawn GCCSBot::GetNoiseSource() const {
    GCCSPlayerPawn value(GetSchemaValuePtr<void>(m_ptr, "CCSBot", "m_noiseSource"));
    return value;
}

void GCCSBot::SetNoiseSource(GCCSPlayerPawn* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'NoiseSource' is not possible.\n");
}

GCountdownTimer GCCSBot::GetNoiseBendTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CCSBot", "m_noiseBendTimer");
}

void GCCSBot::SetNoiseBendTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_noiseBendTimer", false, value);
}

Vector GCCSBot::GetBentNoisePosition() const {
    return GetSchemaValue<Vector>(m_ptr, "CCSBot", "m_bentNoisePosition");
}

void GCCSBot::SetBentNoisePosition(Vector value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_bentNoisePosition", false, value);
}

bool GCCSBot::GetBendNoisePositionValid() const {
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_bendNoisePositionValid");
}

void GCCSBot::SetBendNoisePositionValid(bool value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_bendNoisePositionValid", false, value);
}

float GCCSBot::GetLookAroundStateTimestamp() const {
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_lookAroundStateTimestamp");
}

void GCCSBot::SetLookAroundStateTimestamp(float value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_lookAroundStateTimestamp", false, value);
}

float GCCSBot::GetLookAheadAngle() const {
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_lookAheadAngle");
}

void GCCSBot::SetLookAheadAngle(float value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_lookAheadAngle", false, value);
}

float GCCSBot::GetForwardAngle() const {
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_forwardAngle");
}

void GCCSBot::SetForwardAngle(float value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_forwardAngle", false, value);
}

float GCCSBot::GetInhibitLookAroundTimestamp() const {
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_inhibitLookAroundTimestamp");
}

void GCCSBot::SetInhibitLookAroundTimestamp(float value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_inhibitLookAroundTimestamp", false, value);
}

Vector GCCSBot::GetLookAtSpot() const {
    return GetSchemaValue<Vector>(m_ptr, "CCSBot", "m_lookAtSpot");
}

void GCCSBot::SetLookAtSpot(Vector value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_lookAtSpot", false, value);
}

float GCCSBot::GetLookAtSpotDuration() const {
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_lookAtSpotDuration");
}

void GCCSBot::SetLookAtSpotDuration(float value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_lookAtSpotDuration", false, value);
}

float GCCSBot::GetLookAtSpotTimestamp() const {
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_lookAtSpotTimestamp");
}

void GCCSBot::SetLookAtSpotTimestamp(float value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_lookAtSpotTimestamp", false, value);
}

float GCCSBot::GetLookAtSpotAngleTolerance() const {
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_lookAtSpotAngleTolerance");
}

void GCCSBot::SetLookAtSpotAngleTolerance(float value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_lookAtSpotAngleTolerance", false, value);
}

bool GCCSBot::GetLookAtSpotClearIfClose() const {
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_lookAtSpotClearIfClose");
}

void GCCSBot::SetLookAtSpotClearIfClose(bool value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_lookAtSpotClearIfClose", false, value);
}

bool GCCSBot::GetLookAtSpotAttack() const {
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_lookAtSpotAttack");
}

void GCCSBot::SetLookAtSpotAttack(bool value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_lookAtSpotAttack", false, value);
}

std::string GCCSBot::GetLookAtDesc() const {
    return GetSchemaValuePtr<char>(m_ptr, "CCSBot", "m_lookAtDesc");
}

void GCCSBot::SetLookAtDesc(std::string value) {
    WriteSchemaPtrValue(m_ptr, "CCSBot", "m_lookAtDesc", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), value.size());
}

float GCCSBot::GetPeripheralTimestamp() const {
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_peripheralTimestamp");
}

void GCCSBot::SetPeripheralTimestamp(float value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_peripheralTimestamp", false, value);
}

uint8_t GCCSBot::GetApproachPointCount() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CCSBot", "m_approachPointCount");
}

void GCCSBot::SetApproachPointCount(uint8_t value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_approachPointCount", false, value);
}

Vector GCCSBot::GetApproachPointViewPosition() const {
    return GetSchemaValue<Vector>(m_ptr, "CCSBot", "m_approachPointViewPosition");
}

void GCCSBot::SetApproachPointViewPosition(Vector value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_approachPointViewPosition", false, value);
}

GIntervalTimer GCCSBot::GetViewSteadyTimer() const {
    return GetSchemaValue<GIntervalTimer>(m_ptr, "CCSBot", "m_viewSteadyTimer");
}

void GCCSBot::SetViewSteadyTimer(GIntervalTimer value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_viewSteadyTimer", false, value);
}

GCountdownTimer GCCSBot::GetTossGrenadeTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CCSBot", "m_tossGrenadeTimer");
}

void GCCSBot::SetTossGrenadeTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_tossGrenadeTimer", false, value);
}

GCountdownTimer GCCSBot::GetIsAvoidingGrenade() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CCSBot", "m_isAvoidingGrenade");
}

void GCCSBot::SetIsAvoidingGrenade(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_isAvoidingGrenade", false, value);
}

float GCCSBot::GetSpotCheckTimestamp() const {
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_spotCheckTimestamp");
}

void GCCSBot::SetSpotCheckTimestamp(float value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_spotCheckTimestamp", false, value);
}

int32_t GCCSBot::GetCheckedHidingSpotCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSBot", "m_checkedHidingSpotCount");
}

void GCCSBot::SetCheckedHidingSpotCount(int32_t value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_checkedHidingSpotCount", false, value);
}

float GCCSBot::GetLookPitch() const {
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_lookPitch");
}

void GCCSBot::SetLookPitch(float value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_lookPitch", false, value);
}

float GCCSBot::GetLookPitchVel() const {
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_lookPitchVel");
}

void GCCSBot::SetLookPitchVel(float value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_lookPitchVel", false, value);
}

float GCCSBot::GetLookYaw() const {
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_lookYaw");
}

void GCCSBot::SetLookYaw(float value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_lookYaw", false, value);
}

float GCCSBot::GetLookYawVel() const {
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_lookYawVel");
}

void GCCSBot::SetLookYawVel(float value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_lookYawVel", false, value);
}

Vector GCCSBot::GetTargetSpot() const {
    return GetSchemaValue<Vector>(m_ptr, "CCSBot", "m_targetSpot");
}

void GCCSBot::SetTargetSpot(Vector value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_targetSpot", false, value);
}

Vector GCCSBot::GetTargetSpotVelocity() const {
    return GetSchemaValue<Vector>(m_ptr, "CCSBot", "m_targetSpotVelocity");
}

void GCCSBot::SetTargetSpotVelocity(Vector value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_targetSpotVelocity", false, value);
}

Vector GCCSBot::GetTargetSpotPredicted() const {
    return GetSchemaValue<Vector>(m_ptr, "CCSBot", "m_targetSpotPredicted");
}

void GCCSBot::SetTargetSpotPredicted(Vector value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_targetSpotPredicted", false, value);
}

QAngle GCCSBot::GetAimError() const {
    return GetSchemaValue<QAngle>(m_ptr, "CCSBot", "m_aimError");
}

void GCCSBot::SetAimError(QAngle value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_aimError", false, value);
}

QAngle GCCSBot::GetAimGoal() const {
    return GetSchemaValue<QAngle>(m_ptr, "CCSBot", "m_aimGoal");
}

void GCCSBot::SetAimGoal(QAngle value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_aimGoal", false, value);
}

float GCCSBot::GetAimFocus() const {
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_aimFocus");
}

void GCCSBot::SetAimFocus(float value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_aimFocus", false, value);
}

float GCCSBot::GetAimFocusInterval() const {
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_aimFocusInterval");
}

void GCCSBot::SetAimFocusInterval(float value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_aimFocusInterval", false, value);
}

GCountdownTimer GCCSBot::GetIgnoreEnemiesTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CCSBot", "m_ignoreEnemiesTimer");
}

void GCCSBot::SetIgnoreEnemiesTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_ignoreEnemiesTimer", false, value);
}

GCCSPlayerPawn GCCSBot::GetEnemy() const {
    GCCSPlayerPawn value(GetSchemaValuePtr<void>(m_ptr, "CCSBot", "m_enemy"));
    return value;
}

void GCCSBot::SetEnemy(GCCSPlayerPawn* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Enemy' is not possible.\n");
}

bool GCCSBot::GetIsEnemyVisible() const {
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_isEnemyVisible");
}

void GCCSBot::SetIsEnemyVisible(bool value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_isEnemyVisible", false, value);
}

uint8_t GCCSBot::GetVisibleEnemyParts() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CCSBot", "m_visibleEnemyParts");
}

void GCCSBot::SetVisibleEnemyParts(uint8_t value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_visibleEnemyParts", false, value);
}

Vector GCCSBot::GetLastEnemyPosition() const {
    return GetSchemaValue<Vector>(m_ptr, "CCSBot", "m_lastEnemyPosition");
}

void GCCSBot::SetLastEnemyPosition(Vector value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_lastEnemyPosition", false, value);
}

float GCCSBot::GetLastSawEnemyTimestamp() const {
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_lastSawEnemyTimestamp");
}

void GCCSBot::SetLastSawEnemyTimestamp(float value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_lastSawEnemyTimestamp", false, value);
}

float GCCSBot::GetFirstSawEnemyTimestamp() const {
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_firstSawEnemyTimestamp");
}

void GCCSBot::SetFirstSawEnemyTimestamp(float value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_firstSawEnemyTimestamp", false, value);
}

float GCCSBot::GetCurrentEnemyAcquireTimestamp() const {
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_currentEnemyAcquireTimestamp");
}

void GCCSBot::SetCurrentEnemyAcquireTimestamp(float value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_currentEnemyAcquireTimestamp", false, value);
}

float GCCSBot::GetEnemyDeathTimestamp() const {
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_enemyDeathTimestamp");
}

void GCCSBot::SetEnemyDeathTimestamp(float value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_enemyDeathTimestamp", false, value);
}

float GCCSBot::GetFriendDeathTimestamp() const {
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_friendDeathTimestamp");
}

void GCCSBot::SetFriendDeathTimestamp(float value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_friendDeathTimestamp", false, value);
}

bool GCCSBot::GetIsLastEnemyDead() const {
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_isLastEnemyDead");
}

void GCCSBot::SetIsLastEnemyDead(bool value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_isLastEnemyDead", false, value);
}

int32_t GCCSBot::GetNearbyEnemyCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSBot", "m_nearbyEnemyCount");
}

void GCCSBot::SetNearbyEnemyCount(int32_t value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_nearbyEnemyCount", false, value);
}

GCCSPlayerPawn GCCSBot::GetBomber() const {
    GCCSPlayerPawn value(GetSchemaValuePtr<void>(m_ptr, "CCSBot", "m_bomber"));
    return value;
}

void GCCSBot::SetBomber(GCCSPlayerPawn* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Bomber' is not possible.\n");
}

int32_t GCCSBot::GetNearbyFriendCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSBot", "m_nearbyFriendCount");
}

void GCCSBot::SetNearbyFriendCount(int32_t value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_nearbyFriendCount", false, value);
}

GCCSPlayerPawn GCCSBot::GetClosestVisibleFriend() const {
    GCCSPlayerPawn value(GetSchemaValuePtr<void>(m_ptr, "CCSBot", "m_closestVisibleFriend"));
    return value;
}

void GCCSBot::SetClosestVisibleFriend(GCCSPlayerPawn* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ClosestVisibleFriend' is not possible.\n");
}

GCCSPlayerPawn GCCSBot::GetClosestVisibleHumanFriend() const {
    GCCSPlayerPawn value(GetSchemaValuePtr<void>(m_ptr, "CCSBot", "m_closestVisibleHumanFriend"));
    return value;
}

void GCCSBot::SetClosestVisibleHumanFriend(GCCSPlayerPawn* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ClosestVisibleHumanFriend' is not possible.\n");
}

GIntervalTimer GCCSBot::GetAttentionInterval() const {
    return GetSchemaValue<GIntervalTimer>(m_ptr, "CCSBot", "m_attentionInterval");
}

void GCCSBot::SetAttentionInterval(GIntervalTimer value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_attentionInterval", false, value);
}

GCCSPlayerPawn GCCSBot::GetAttacker() const {
    GCCSPlayerPawn value(GetSchemaValuePtr<void>(m_ptr, "CCSBot", "m_attacker"));
    return value;
}

void GCCSBot::SetAttacker(GCCSPlayerPawn* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Attacker' is not possible.\n");
}

float GCCSBot::GetAttackedTimestamp() const {
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_attackedTimestamp");
}

void GCCSBot::SetAttackedTimestamp(float value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_attackedTimestamp", false, value);
}

GIntervalTimer GCCSBot::GetBurnedByFlamesTimer() const {
    return GetSchemaValue<GIntervalTimer>(m_ptr, "CCSBot", "m_burnedByFlamesTimer");
}

void GCCSBot::SetBurnedByFlamesTimer(GIntervalTimer value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_burnedByFlamesTimer", false, value);
}

int32_t GCCSBot::GetLastVictimID() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSBot", "m_lastVictimID");
}

void GCCSBot::SetLastVictimID(int32_t value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_lastVictimID", false, value);
}

bool GCCSBot::GetIsAimingAtEnemy() const {
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_isAimingAtEnemy");
}

void GCCSBot::SetIsAimingAtEnemy(bool value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_isAimingAtEnemy", false, value);
}

bool GCCSBot::GetIsRapidFiring() const {
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_isRapidFiring");
}

void GCCSBot::SetIsRapidFiring(bool value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_isRapidFiring", false, value);
}

GIntervalTimer GCCSBot::GetEquipTimer() const {
    return GetSchemaValue<GIntervalTimer>(m_ptr, "CCSBot", "m_equipTimer");
}

void GCCSBot::SetEquipTimer(GIntervalTimer value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_equipTimer", false, value);
}

GCountdownTimer GCCSBot::GetZoomTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CCSBot", "m_zoomTimer");
}

void GCCSBot::SetZoomTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_zoomTimer", false, value);
}

GCountdownTimer GCCSBot::GetLookForWeaponsOnGroundTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CCSBot", "m_lookForWeaponsOnGroundTimer");
}

void GCCSBot::SetLookForWeaponsOnGroundTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_lookForWeaponsOnGroundTimer", false, value);
}

bool GCCSBot::GetIsSleeping() const {
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_bIsSleeping");
}

void GCCSBot::SetIsSleeping(bool value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_bIsSleeping", false, value);
}

bool GCCSBot::GetIsEnemySniperVisible() const {
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_isEnemySniperVisible");
}

void GCCSBot::SetIsEnemySniperVisible(bool value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_isEnemySniperVisible", false, value);
}

GCountdownTimer GCCSBot::GetSawEnemySniperTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CCSBot", "m_sawEnemySniperTimer");
}

void GCCSBot::SetSawEnemySniperTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_sawEnemySniperTimer", false, value);
}

uint8_t GCCSBot::GetEnemyQueueIndex() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CCSBot", "m_enemyQueueIndex");
}

void GCCSBot::SetEnemyQueueIndex(uint8_t value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_enemyQueueIndex", false, value);
}

uint8_t GCCSBot::GetEnemyQueueCount() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CCSBot", "m_enemyQueueCount");
}

void GCCSBot::SetEnemyQueueCount(uint8_t value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_enemyQueueCount", false, value);
}

uint8_t GCCSBot::GetEnemyQueueAttendIndex() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CCSBot", "m_enemyQueueAttendIndex");
}

void GCCSBot::SetEnemyQueueAttendIndex(uint8_t value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_enemyQueueAttendIndex", false, value);
}

bool GCCSBot::GetIsStuck() const {
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_isStuck");
}

void GCCSBot::SetIsStuck(bool value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_isStuck", false, value);
}

Vector GCCSBot::GetStuckSpot() const {
    return GetSchemaValue<Vector>(m_ptr, "CCSBot", "m_stuckSpot");
}

void GCCSBot::SetStuckSpot(Vector value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_stuckSpot", false, value);
}

GCountdownTimer GCCSBot::GetWiggleTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CCSBot", "m_wiggleTimer");
}

void GCCSBot::SetWiggleTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_wiggleTimer", false, value);
}

GCountdownTimer GCCSBot::GetStuckJumpTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CCSBot", "m_stuckJumpTimer");
}

void GCCSBot::SetStuckJumpTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_stuckJumpTimer", false, value);
}

std::vector<float> GCCSBot::GetAvgVel() const {
    float* outValue = GetSchemaValue<float*>(m_ptr, "CCSBot", "m_avgVel"); std::vector<float> ret; for(int i = 0; i < 10; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCCSBot::SetAvgVel(std::vector<float> value) {
    float* outValue = GetSchemaValue<float*>(m_ptr, "CCSBot", "m_avgVel"); for(int i = 0; i < 10; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CCSBot", "m_avgVel", false, outValue);
}

int32_t GCCSBot::GetAvgVelIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSBot", "m_avgVelIndex");
}

void GCCSBot::SetAvgVelIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_avgVelIndex", false, value);
}

int32_t GCCSBot::GetAvgVelCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSBot", "m_avgVelCount");
}

void GCCSBot::SetAvgVelCount(int32_t value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_avgVelCount", false, value);
}

Vector GCCSBot::GetLastOrigin() const {
    return GetSchemaValue<Vector>(m_ptr, "CCSBot", "m_lastOrigin");
}

void GCCSBot::SetLastOrigin(Vector value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_lastOrigin", false, value);
}

float GCCSBot::GetLastRadioRecievedTimestamp() const {
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_lastRadioRecievedTimestamp");
}

void GCCSBot::SetLastRadioRecievedTimestamp(float value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_lastRadioRecievedTimestamp", false, value);
}

float GCCSBot::GetLastRadioSentTimestamp() const {
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_lastRadioSentTimestamp");
}

void GCCSBot::SetLastRadioSentTimestamp(float value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_lastRadioSentTimestamp", false, value);
}

GCCSPlayerPawn GCCSBot::GetRadioSubject() const {
    GCCSPlayerPawn value(GetSchemaValuePtr<void>(m_ptr, "CCSBot", "m_radioSubject"));
    return value;
}

void GCCSBot::SetRadioSubject(GCCSPlayerPawn* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'RadioSubject' is not possible.\n");
}

Vector GCCSBot::GetRadioPosition() const {
    return GetSchemaValue<Vector>(m_ptr, "CCSBot", "m_radioPosition");
}

void GCCSBot::SetRadioPosition(Vector value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_radioPosition", false, value);
}

float GCCSBot::GetVoiceEndTimestamp() const {
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_voiceEndTimestamp");
}

void GCCSBot::SetVoiceEndTimestamp(float value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_voiceEndTimestamp", false, value);
}

int32_t GCCSBot::GetLastValidReactionQueueFrame() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSBot", "m_lastValidReactionQueueFrame");
}

void GCCSBot::SetLastValidReactionQueueFrame(int32_t value) {
    SetSchemaValue(m_ptr, "CCSBot", "m_lastValidReactionQueueFrame", false, value);
}

std::string GCCSBot::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSBot::IsValid() {
    return (m_ptr != nullptr);
}

GCEntityIdentity::GCEntityIdentity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEntityIdentity::GCEntityIdentity(void *ptr) {
    m_ptr = ptr;
}

int32_t GCEntityIdentity::GetNameStringableIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEntityIdentity", "m_nameStringableIndex");
}

void GCEntityIdentity::SetNameStringableIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CEntityIdentity", "m_nameStringableIndex", false, value);
}

CUtlSymbolLarge GCEntityIdentity::GetName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEntityIdentity", "m_name");
}

void GCEntityIdentity::SetName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEntityIdentity", "m_name", false, value);
}

CUtlSymbolLarge GCEntityIdentity::GetDesignerName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEntityIdentity", "m_designerName");
}

void GCEntityIdentity::SetDesignerName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEntityIdentity", "m_designerName", false, value);
}

uint32_t GCEntityIdentity::GetFlags() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CEntityIdentity", "m_flags");
}

void GCEntityIdentity::SetFlags(uint32_t value) {
    SetSchemaValue(m_ptr, "CEntityIdentity", "m_flags", false, value);
}

WorldGroupId_t GCEntityIdentity::GetWorldGroupId() const {
    return GetSchemaValue<WorldGroupId_t>(m_ptr, "CEntityIdentity", "m_worldGroupId");
}

void GCEntityIdentity::SetWorldGroupId(WorldGroupId_t value) {
    SetSchemaValue(m_ptr, "CEntityIdentity", "m_worldGroupId", false, value);
}

uint32_t GCEntityIdentity::GetDataObjectTypes() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CEntityIdentity", "m_fDataObjectTypes");
}

void GCEntityIdentity::SetDataObjectTypes(uint32_t value) {
    SetSchemaValue(m_ptr, "CEntityIdentity", "m_fDataObjectTypes", false, value);
}

GChangeAccessorFieldPathIndex_t GCEntityIdentity::GetPathIndex() const {
    return GetSchemaValue<GChangeAccessorFieldPathIndex_t>(m_ptr, "CEntityIdentity", "m_PathIndex");
}

void GCEntityIdentity::SetPathIndex(GChangeAccessorFieldPathIndex_t value) {
    SetSchemaValue(m_ptr, "CEntityIdentity", "m_PathIndex", false, value);
}

GCEntityIdentity GCEntityIdentity::GetPrev() const {
    GCEntityIdentity value(GetSchemaValuePtr<void>(m_ptr, "CEntityIdentity", "m_pPrev"));
    return value;
}

void GCEntityIdentity::SetPrev(GCEntityIdentity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Prev' is not possible.\n");
}

GCEntityIdentity GCEntityIdentity::GetNext() const {
    GCEntityIdentity value(GetSchemaValuePtr<void>(m_ptr, "CEntityIdentity", "m_pNext"));
    return value;
}

void GCEntityIdentity::SetNext(GCEntityIdentity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Next' is not possible.\n");
}

GCEntityIdentity GCEntityIdentity::GetPrevByClass() const {
    GCEntityIdentity value(GetSchemaValuePtr<void>(m_ptr, "CEntityIdentity", "m_pPrevByClass"));
    return value;
}

void GCEntityIdentity::SetPrevByClass(GCEntityIdentity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'PrevByClass' is not possible.\n");
}

GCEntityIdentity GCEntityIdentity::GetNextByClass() const {
    GCEntityIdentity value(GetSchemaValuePtr<void>(m_ptr, "CEntityIdentity", "m_pNextByClass"));
    return value;
}

void GCEntityIdentity::SetNextByClass(GCEntityIdentity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'NextByClass' is not possible.\n");
}

std::string GCEntityIdentity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEntityIdentity::IsValid() {
    return (m_ptr != nullptr);
}

GCGunTarget::GCGunTarget(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCGunTarget::GCGunTarget(void *ptr) {
    m_ptr = ptr;
}

bool GCGunTarget::GetOn() const {
    return GetSchemaValue<bool>(m_ptr, "CGunTarget", "m_on");
}

void GCGunTarget::SetOn(bool value) {
    SetSchemaValue(m_ptr, "CGunTarget", "m_on", false, value);
}

GCBaseEntity GCGunTarget::GetTargetEnt() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CGunTarget", "m_hTargetEnt"));
    return value;
}

void GCGunTarget::SetTargetEnt(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'TargetEnt' is not possible.\n");
}

GCEntityIOOutput GCGunTarget::GetOnDeath() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CGunTarget", "m_OnDeath");
}

void GCGunTarget::SetOnDeath(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CGunTarget", "m_OnDeath", false, value);
}

std::string GCGunTarget::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCGunTarget::IsValid() {
    return (m_ptr != nullptr);
}

GCSoundEventParameter::GCSoundEventParameter(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSoundEventParameter::GCSoundEventParameter(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCSoundEventParameter::GetParamName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSoundEventParameter", "m_iszParamName");
}

void GCSoundEventParameter::SetParamName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CSoundEventParameter", "m_iszParamName", false, value);
}

float GCSoundEventParameter::GetFloatValue() const {
    return GetSchemaValue<float>(m_ptr, "CSoundEventParameter", "m_flFloatValue");
}

void GCSoundEventParameter::SetFloatValue(float value) {
    SetSchemaValue(m_ptr, "CSoundEventParameter", "m_flFloatValue", false, value);
}

std::string GCSoundEventParameter::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSoundEventParameter::IsValid() {
    return (m_ptr != nullptr);
}

GCSimpleMarkupVolumeTagged::GCSimpleMarkupVolumeTagged(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSimpleMarkupVolumeTagged::GCSimpleMarkupVolumeTagged(void *ptr) {
    m_ptr = ptr;
}

std::string GCSimpleMarkupVolumeTagged::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSimpleMarkupVolumeTagged::IsValid() {
    return (m_ptr != nullptr);
}

GCTestEffect::GCTestEffect(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTestEffect::GCTestEffect(void *ptr) {
    m_ptr = ptr;
}

int32_t GCTestEffect::GetLoop() const {
    return GetSchemaValue<int32_t>(m_ptr, "CTestEffect", "m_iLoop");
}

void GCTestEffect::SetLoop(int32_t value) {
    SetSchemaValue(m_ptr, "CTestEffect", "m_iLoop", false, value);
}

int32_t GCTestEffect::GetBeam() const {
    return GetSchemaValue<int32_t>(m_ptr, "CTestEffect", "m_iBeam");
}

void GCTestEffect::SetBeam(int32_t value) {
    SetSchemaValue(m_ptr, "CTestEffect", "m_iBeam", false, value);
}

std::vector<GCBeam*> GCTestEffect::GetBeam1() const {
    GCBeam** outValue = GetSchemaValue<GCBeam**>(m_ptr, "CTestEffect", "m_pBeam"); std::vector<GCBeam*> ret; for(int i = 0; i < 24; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCTestEffect::SetBeam1(std::vector<GCBeam*> value) {
    GCBeam** outValue = GetSchemaValue<GCBeam**>(m_ptr, "CTestEffect", "m_pBeam"); for(int i = 0; i < 24; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CTestEffect", "m_pBeam", false, outValue);
}

std::string GCTestEffect::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTestEffect::IsValid() {
    return (m_ptr != nullptr);
}

GCWeaponM4A1Silencer::GCWeaponM4A1Silencer(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWeaponM4A1Silencer::GCWeaponM4A1Silencer(void *ptr) {
    m_ptr = ptr;
}

std::string GCWeaponM4A1Silencer::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWeaponM4A1Silencer::IsValid() {
    return (m_ptr != nullptr);
}

GCScriptNavBlocker::GCScriptNavBlocker(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCScriptNavBlocker::GCScriptNavBlocker(void *ptr) {
    m_ptr = ptr;
}

Vector GCScriptNavBlocker::GetExtent() const {
    return GetSchemaValue<Vector>(m_ptr, "CScriptNavBlocker", "m_vExtent");
}

void GCScriptNavBlocker::SetExtent(Vector value) {
    SetSchemaValue(m_ptr, "CScriptNavBlocker", "m_vExtent", false, value);
}

std::string GCScriptNavBlocker::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCScriptNavBlocker::IsValid() {
    return (m_ptr != nullptr);
}

GCConstraintAnchor::GCConstraintAnchor(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCConstraintAnchor::GCConstraintAnchor(void *ptr) {
    m_ptr = ptr;
}

float GCConstraintAnchor::GetMassScale() const {
    return GetSchemaValue<float>(m_ptr, "CConstraintAnchor", "m_massScale");
}

void GCConstraintAnchor::SetMassScale(float value) {
    SetSchemaValue(m_ptr, "CConstraintAnchor", "m_massScale", false, value);
}

std::string GCConstraintAnchor::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCConstraintAnchor::IsValid() {
    return (m_ptr != nullptr);
}

GCWeaponTec9::GCWeaponTec9(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWeaponTec9::GCWeaponTec9(void *ptr) {
    m_ptr = ptr;
}

std::string GCWeaponTec9::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWeaponTec9::IsValid() {
    return (m_ptr != nullptr);
}

GCMarkupVolumeTagged_Nav::GCMarkupVolumeTagged_Nav(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMarkupVolumeTagged_Nav::GCMarkupVolumeTagged_Nav(void *ptr) {
    m_ptr = ptr;
}

std::string GCMarkupVolumeTagged_Nav::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMarkupVolumeTagged_Nav::IsValid() {
    return (m_ptr != nullptr);
}

GCInstancedSceneEntity::GCInstancedSceneEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCInstancedSceneEntity::GCInstancedSceneEntity(void *ptr) {
    m_ptr = ptr;
}

GCBaseEntity GCInstancedSceneEntity::GetOwner() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CInstancedSceneEntity", "m_hOwner"));
    return value;
}

void GCInstancedSceneEntity::SetOwner(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Owner' is not possible.\n");
}

bool GCInstancedSceneEntity::GetHadOwner() const {
    return GetSchemaValue<bool>(m_ptr, "CInstancedSceneEntity", "m_bHadOwner");
}

void GCInstancedSceneEntity::SetHadOwner(bool value) {
    SetSchemaValue(m_ptr, "CInstancedSceneEntity", "m_bHadOwner", false, value);
}

float GCInstancedSceneEntity::GetPostSpeakDelay() const {
    return GetSchemaValue<float>(m_ptr, "CInstancedSceneEntity", "m_flPostSpeakDelay");
}

void GCInstancedSceneEntity::SetPostSpeakDelay(float value) {
    SetSchemaValue(m_ptr, "CInstancedSceneEntity", "m_flPostSpeakDelay", false, value);
}

float GCInstancedSceneEntity::GetPreDelay() const {
    return GetSchemaValue<float>(m_ptr, "CInstancedSceneEntity", "m_flPreDelay");
}

void GCInstancedSceneEntity::SetPreDelay(float value) {
    SetSchemaValue(m_ptr, "CInstancedSceneEntity", "m_flPreDelay", false, value);
}

bool GCInstancedSceneEntity::GetIsBackground() const {
    return GetSchemaValue<bool>(m_ptr, "CInstancedSceneEntity", "m_bIsBackground");
}

void GCInstancedSceneEntity::SetIsBackground(bool value) {
    SetSchemaValue(m_ptr, "CInstancedSceneEntity", "m_bIsBackground", false, value);
}

bool GCInstancedSceneEntity::GetRemoveOnCompletion() const {
    return GetSchemaValue<bool>(m_ptr, "CInstancedSceneEntity", "m_bRemoveOnCompletion");
}

void GCInstancedSceneEntity::SetRemoveOnCompletion(bool value) {
    SetSchemaValue(m_ptr, "CInstancedSceneEntity", "m_bRemoveOnCompletion", false, value);
}

GCBaseEntity GCInstancedSceneEntity::GetTarget() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CInstancedSceneEntity", "m_hTarget"));
    return value;
}

void GCInstancedSceneEntity::SetTarget(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Target' is not possible.\n");
}

std::string GCInstancedSceneEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCInstancedSceneEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCLightEnvironmentEntity::GCLightEnvironmentEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCLightEnvironmentEntity::GCLightEnvironmentEntity(void *ptr) {
    m_ptr = ptr;
}

std::string GCLightEnvironmentEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCLightEnvironmentEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCLogicActiveAutosave::GCLogicActiveAutosave(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCLogicActiveAutosave::GCLogicActiveAutosave(void *ptr) {
    m_ptr = ptr;
}

int32_t GCLogicActiveAutosave::GetTriggerHitPoints() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLogicActiveAutosave", "m_TriggerHitPoints");
}

void GCLogicActiveAutosave::SetTriggerHitPoints(int32_t value) {
    SetSchemaValue(m_ptr, "CLogicActiveAutosave", "m_TriggerHitPoints", false, value);
}

float GCLogicActiveAutosave::GetTimeToTrigger() const {
    return GetSchemaValue<float>(m_ptr, "CLogicActiveAutosave", "m_flTimeToTrigger");
}

void GCLogicActiveAutosave::SetTimeToTrigger(float value) {
    SetSchemaValue(m_ptr, "CLogicActiveAutosave", "m_flTimeToTrigger", false, value);
}

float GCLogicActiveAutosave::GetDangerousTime() const {
    return GetSchemaValue<float>(m_ptr, "CLogicActiveAutosave", "m_flDangerousTime");
}

void GCLogicActiveAutosave::SetDangerousTime(float value) {
    SetSchemaValue(m_ptr, "CLogicActiveAutosave", "m_flDangerousTime", false, value);
}

std::string GCLogicActiveAutosave::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCLogicActiveAutosave::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvBeverage::GCEnvBeverage(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvBeverage::GCEnvBeverage(void *ptr) {
    m_ptr = ptr;
}

bool GCEnvBeverage::GetCanInDispenser() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvBeverage", "m_CanInDispenser");
}

void GCEnvBeverage::SetCanInDispenser(bool value) {
    SetSchemaValue(m_ptr, "CEnvBeverage", "m_CanInDispenser", false, value);
}

int32_t GCEnvBeverage::GetBeverageType() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvBeverage", "m_nBeverageType");
}

void GCEnvBeverage::SetBeverageType(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvBeverage", "m_nBeverageType", false, value);
}

std::string GCEnvBeverage::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvBeverage::IsValid() {
    return (m_ptr != nullptr);
}

GCWeaponCZ75a::GCWeaponCZ75a(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWeaponCZ75a::GCWeaponCZ75a(void *ptr) {
    m_ptr = ptr;
}

std::string GCWeaponCZ75a::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWeaponCZ75a::IsValid() {
    return (m_ptr != nullptr);
}

GCWeaponP250::GCWeaponP250(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWeaponP250::GCWeaponP250(void *ptr) {
    m_ptr = ptr;
}

std::string GCWeaponP250::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWeaponP250::IsValid() {
    return (m_ptr != nullptr);
}

GCHostage::GCHostage(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCHostage::GCHostage(void *ptr) {
    m_ptr = ptr;
}

GCEntityIOOutput GCHostage::GetOnHostageBeginGrab() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CHostage", "m_OnHostageBeginGrab");
}

void GCHostage::SetOnHostageBeginGrab(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CHostage", "m_OnHostageBeginGrab", false, value);
}

GCEntityIOOutput GCHostage::GetOnFirstPickedUp() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CHostage", "m_OnFirstPickedUp");
}

void GCHostage::SetOnFirstPickedUp(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CHostage", "m_OnFirstPickedUp", false, value);
}

GCEntityIOOutput GCHostage::GetOnDroppedNotRescued() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CHostage", "m_OnDroppedNotRescued");
}

void GCHostage::SetOnDroppedNotRescued(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CHostage", "m_OnDroppedNotRescued", false, value);
}

GCEntityIOOutput GCHostage::GetOnRescued() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CHostage", "m_OnRescued");
}

void GCHostage::SetOnRescued(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CHostage", "m_OnRescued", false, value);
}

GEntitySpottedState_t GCHostage::GetEntitySpottedState() const {
    return GetSchemaValue<GEntitySpottedState_t>(m_ptr, "CHostage", "m_entitySpottedState");
}

void GCHostage::SetEntitySpottedState(GEntitySpottedState_t value) {
    SetSchemaValue(m_ptr, "CHostage", "m_entitySpottedState", false, value);
}

int32_t GCHostage::GetSpotRules() const {
    return GetSchemaValue<int32_t>(m_ptr, "CHostage", "m_nSpotRules");
}

void GCHostage::SetSpotRules(int32_t value) {
    SetSchemaValue(m_ptr, "CHostage", "m_nSpotRules", false, value);
}

uint32_t GCHostage::GetUiHostageSpawnExclusionGroupMask() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CHostage", "m_uiHostageSpawnExclusionGroupMask");
}

void GCHostage::SetUiHostageSpawnExclusionGroupMask(uint32_t value) {
    SetSchemaValue(m_ptr, "CHostage", "m_uiHostageSpawnExclusionGroupMask", false, value);
}

uint32_t GCHostage::GetHostageSpawnRandomFactor() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CHostage", "m_nHostageSpawnRandomFactor");
}

void GCHostage::SetHostageSpawnRandomFactor(uint32_t value) {
    SetSchemaValue(m_ptr, "CHostage", "m_nHostageSpawnRandomFactor", false, value);
}

bool GCHostage::GetRemove() const {
    return GetSchemaValue<bool>(m_ptr, "CHostage", "m_bRemove");
}

void GCHostage::SetRemove(bool value) {
    SetSchemaValue(m_ptr, "CHostage", "m_bRemove", false, value);
}

Vector GCHostage::GetVel() const {
    return GetSchemaValue<Vector>(m_ptr, "CHostage", "m_vel");
}

void GCHostage::SetVel(Vector value) {
    SetSchemaValue(m_ptr, "CHostage", "m_vel", false, value);
}

bool GCHostage::GetIsRescued() const {
    return GetSchemaValue<bool>(m_ptr, "CHostage", "m_isRescued");
}

void GCHostage::SetIsRescued(bool value) {
    SetSchemaValue(m_ptr, "CHostage", "m_isRescued", false, value);
}

bool GCHostage::GetJumpedThisFrame() const {
    return GetSchemaValue<bool>(m_ptr, "CHostage", "m_jumpedThisFrame");
}

void GCHostage::SetJumpedThisFrame(bool value) {
    SetSchemaValue(m_ptr, "CHostage", "m_jumpedThisFrame", false, value);
}

int32_t GCHostage::GetHostageState() const {
    return GetSchemaValue<int32_t>(m_ptr, "CHostage", "m_nHostageState");
}

void GCHostage::SetHostageState(int32_t value) {
    SetSchemaValue(m_ptr, "CHostage", "m_nHostageState", false, value);
}

GCBaseEntity GCHostage::GetLeader() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CHostage", "m_leader"));
    return value;
}

void GCHostage::SetLeader(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Leader' is not possible.\n");
}

GCCSPlayerPawnBase GCHostage::GetLastLeader() const {
    GCCSPlayerPawnBase value(GetSchemaValuePtr<void>(m_ptr, "CHostage", "m_lastLeader"));
    return value;
}

void GCHostage::SetLastLeader(GCCSPlayerPawnBase* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'LastLeader' is not possible.\n");
}

GCountdownTimer GCHostage::GetReuseTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CHostage", "m_reuseTimer");
}

void GCHostage::SetReuseTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CHostage", "m_reuseTimer", false, value);
}

bool GCHostage::GetHasBeenUsed() const {
    return GetSchemaValue<bool>(m_ptr, "CHostage", "m_hasBeenUsed");
}

void GCHostage::SetHasBeenUsed(bool value) {
    SetSchemaValue(m_ptr, "CHostage", "m_hasBeenUsed", false, value);
}

Vector GCHostage::GetAccel() const {
    return GetSchemaValue<Vector>(m_ptr, "CHostage", "m_accel");
}

void GCHostage::SetAccel(Vector value) {
    SetSchemaValue(m_ptr, "CHostage", "m_accel", false, value);
}

bool GCHostage::GetIsRunning() const {
    return GetSchemaValue<bool>(m_ptr, "CHostage", "m_isRunning");
}

void GCHostage::SetIsRunning(bool value) {
    SetSchemaValue(m_ptr, "CHostage", "m_isRunning", false, value);
}

bool GCHostage::GetIsCrouching() const {
    return GetSchemaValue<bool>(m_ptr, "CHostage", "m_isCrouching");
}

void GCHostage::SetIsCrouching(bool value) {
    SetSchemaValue(m_ptr, "CHostage", "m_isCrouching", false, value);
}

GCountdownTimer GCHostage::GetJumpTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CHostage", "m_jumpTimer");
}

void GCHostage::SetJumpTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CHostage", "m_jumpTimer", false, value);
}

bool GCHostage::GetIsWaitingForLeader() const {
    return GetSchemaValue<bool>(m_ptr, "CHostage", "m_isWaitingForLeader");
}

void GCHostage::SetIsWaitingForLeader(bool value) {
    SetSchemaValue(m_ptr, "CHostage", "m_isWaitingForLeader", false, value);
}

GCountdownTimer GCHostage::GetRepathTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CHostage", "m_repathTimer");
}

void GCHostage::SetRepathTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CHostage", "m_repathTimer", false, value);
}

GCountdownTimer GCHostage::GetInhibitDoorTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CHostage", "m_inhibitDoorTimer");
}

void GCHostage::SetInhibitDoorTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CHostage", "m_inhibitDoorTimer", false, value);
}

GCountdownTimer GCHostage::GetInhibitObstacleAvoidanceTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CHostage", "m_inhibitObstacleAvoidanceTimer");
}

void GCHostage::SetInhibitObstacleAvoidanceTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CHostage", "m_inhibitObstacleAvoidanceTimer", false, value);
}

GCountdownTimer GCHostage::GetWiggleTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CHostage", "m_wiggleTimer");
}

void GCHostage::SetWiggleTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CHostage", "m_wiggleTimer", false, value);
}

bool GCHostage::GetIsAdjusted() const {
    return GetSchemaValue<bool>(m_ptr, "CHostage", "m_isAdjusted");
}

void GCHostage::SetIsAdjusted(bool value) {
    SetSchemaValue(m_ptr, "CHostage", "m_isAdjusted", false, value);
}

bool GCHostage::GetHandsHaveBeenCut() const {
    return GetSchemaValue<bool>(m_ptr, "CHostage", "m_bHandsHaveBeenCut");
}

void GCHostage::SetHandsHaveBeenCut(bool value) {
    SetSchemaValue(m_ptr, "CHostage", "m_bHandsHaveBeenCut", false, value);
}

GCCSPlayerPawn GCHostage::GetHostageGrabber() const {
    GCCSPlayerPawn value(GetSchemaValuePtr<void>(m_ptr, "CHostage", "m_hHostageGrabber"));
    return value;
}

void GCHostage::SetHostageGrabber(GCCSPlayerPawn* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'HostageGrabber' is not possible.\n");
}

Vector GCHostage::GetPositionWhenStartedDroppingToGround() const {
    return GetSchemaValue<Vector>(m_ptr, "CHostage", "m_vecPositionWhenStartedDroppingToGround");
}

void GCHostage::SetPositionWhenStartedDroppingToGround(Vector value) {
    SetSchemaValue(m_ptr, "CHostage", "m_vecPositionWhenStartedDroppingToGround", false, value);
}

Vector GCHostage::GetGrabbedPos() const {
    return GetSchemaValue<Vector>(m_ptr, "CHostage", "m_vecGrabbedPos");
}

void GCHostage::SetGrabbedPos(Vector value) {
    SetSchemaValue(m_ptr, "CHostage", "m_vecGrabbedPos", false, value);
}

int32_t GCHostage::GetApproachRewardPayouts() const {
    return GetSchemaValue<int32_t>(m_ptr, "CHostage", "m_nApproachRewardPayouts");
}

void GCHostage::SetApproachRewardPayouts(int32_t value) {
    SetSchemaValue(m_ptr, "CHostage", "m_nApproachRewardPayouts", false, value);
}

int32_t GCHostage::GetPickupEventCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CHostage", "m_nPickupEventCount");
}

void GCHostage::SetPickupEventCount(int32_t value) {
    SetSchemaValue(m_ptr, "CHostage", "m_nPickupEventCount", false, value);
}

Vector GCHostage::GetSpawnGroundPos() const {
    return GetSchemaValue<Vector>(m_ptr, "CHostage", "m_vecSpawnGroundPos");
}

void GCHostage::SetSpawnGroundPos(Vector value) {
    SetSchemaValue(m_ptr, "CHostage", "m_vecSpawnGroundPos", false, value);
}

Vector GCHostage::GetHostageResetPosition() const {
    return GetSchemaValue<Vector>(m_ptr, "CHostage", "m_vecHostageResetPosition");
}

void GCHostage::SetHostageResetPosition(Vector value) {
    SetSchemaValue(m_ptr, "CHostage", "m_vecHostageResetPosition", false, value);
}

std::string GCHostage::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCHostage::IsValid() {
    return (m_ptr != nullptr);
}

GCScriptTriggerHurt::GCScriptTriggerHurt(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCScriptTriggerHurt::GCScriptTriggerHurt(void *ptr) {
    m_ptr = ptr;
}

Vector GCScriptTriggerHurt::GetExtent() const {
    return GetSchemaValue<Vector>(m_ptr, "CScriptTriggerHurt", "m_vExtent");
}

void GCScriptTriggerHurt::SetExtent(Vector value) {
    SetSchemaValue(m_ptr, "CScriptTriggerHurt", "m_vExtent", false, value);
}

std::string GCScriptTriggerHurt::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCScriptTriggerHurt::IsValid() {
    return (m_ptr != nullptr);
}

GCBasePlayerWeaponVData::GCBasePlayerWeaponVData(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBasePlayerWeaponVData::GCBasePlayerWeaponVData(void *ptr) {
    m_ptr = ptr;
}

bool GCBasePlayerWeaponVData::GetBuiltRightHanded() const {
    return GetSchemaValue<bool>(m_ptr, "CBasePlayerWeaponVData", "m_bBuiltRightHanded");
}

void GCBasePlayerWeaponVData::SetBuiltRightHanded(bool value) {
    SetSchemaValue(m_ptr, "CBasePlayerWeaponVData", "m_bBuiltRightHanded", false, value);
}

bool GCBasePlayerWeaponVData::GetAllowFlipping() const {
    return GetSchemaValue<bool>(m_ptr, "CBasePlayerWeaponVData", "m_bAllowFlipping");
}

void GCBasePlayerWeaponVData::SetAllowFlipping(bool value) {
    SetSchemaValue(m_ptr, "CBasePlayerWeaponVData", "m_bAllowFlipping", false, value);
}

CUtlString GCBasePlayerWeaponVData::GetMuzzleAttachment() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CBasePlayerWeaponVData", "m_sMuzzleAttachment");
}

void GCBasePlayerWeaponVData::SetMuzzleAttachment(CUtlString value) {
    SetSchemaValue(m_ptr, "CBasePlayerWeaponVData", "m_sMuzzleAttachment", false, value);
}

ItemFlagTypes_t GCBasePlayerWeaponVData::GetFlags() const {
    return GetSchemaValue<ItemFlagTypes_t>(m_ptr, "CBasePlayerWeaponVData", "m_iFlags");
}

void GCBasePlayerWeaponVData::SetFlags(ItemFlagTypes_t value) {
    SetSchemaValue(m_ptr, "CBasePlayerWeaponVData", "m_iFlags", false, value);
}

uint8_t GCBasePlayerWeaponVData::GetPrimaryAmmoType() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CBasePlayerWeaponVData", "m_nPrimaryAmmoType");
}

void GCBasePlayerWeaponVData::SetPrimaryAmmoType(uint8_t value) {
    SetSchemaValue(m_ptr, "CBasePlayerWeaponVData", "m_nPrimaryAmmoType", false, value);
}

uint8_t GCBasePlayerWeaponVData::GetSecondaryAmmoType() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CBasePlayerWeaponVData", "m_nSecondaryAmmoType");
}

void GCBasePlayerWeaponVData::SetSecondaryAmmoType(uint8_t value) {
    SetSchemaValue(m_ptr, "CBasePlayerWeaponVData", "m_nSecondaryAmmoType", false, value);
}

int32_t GCBasePlayerWeaponVData::GetMaxClip1() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBasePlayerWeaponVData", "m_iMaxClip1");
}

void GCBasePlayerWeaponVData::SetMaxClip1(int32_t value) {
    SetSchemaValue(m_ptr, "CBasePlayerWeaponVData", "m_iMaxClip1", false, value);
}

int32_t GCBasePlayerWeaponVData::GetMaxClip2() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBasePlayerWeaponVData", "m_iMaxClip2");
}

void GCBasePlayerWeaponVData::SetMaxClip2(int32_t value) {
    SetSchemaValue(m_ptr, "CBasePlayerWeaponVData", "m_iMaxClip2", false, value);
}

int32_t GCBasePlayerWeaponVData::GetDefaultClip1() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBasePlayerWeaponVData", "m_iDefaultClip1");
}

void GCBasePlayerWeaponVData::SetDefaultClip1(int32_t value) {
    SetSchemaValue(m_ptr, "CBasePlayerWeaponVData", "m_iDefaultClip1", false, value);
}

int32_t GCBasePlayerWeaponVData::GetDefaultClip2() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBasePlayerWeaponVData", "m_iDefaultClip2");
}

void GCBasePlayerWeaponVData::SetDefaultClip2(int32_t value) {
    SetSchemaValue(m_ptr, "CBasePlayerWeaponVData", "m_iDefaultClip2", false, value);
}

int32_t GCBasePlayerWeaponVData::GetWeight() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBasePlayerWeaponVData", "m_iWeight");
}

void GCBasePlayerWeaponVData::SetWeight(int32_t value) {
    SetSchemaValue(m_ptr, "CBasePlayerWeaponVData", "m_iWeight", false, value);
}

bool GCBasePlayerWeaponVData::GetAutoSwitchTo() const {
    return GetSchemaValue<bool>(m_ptr, "CBasePlayerWeaponVData", "m_bAutoSwitchTo");
}

void GCBasePlayerWeaponVData::SetAutoSwitchTo(bool value) {
    SetSchemaValue(m_ptr, "CBasePlayerWeaponVData", "m_bAutoSwitchTo", false, value);
}

bool GCBasePlayerWeaponVData::GetAutoSwitchFrom() const {
    return GetSchemaValue<bool>(m_ptr, "CBasePlayerWeaponVData", "m_bAutoSwitchFrom");
}

void GCBasePlayerWeaponVData::SetAutoSwitchFrom(bool value) {
    SetSchemaValue(m_ptr, "CBasePlayerWeaponVData", "m_bAutoSwitchFrom", false, value);
}

RumbleEffect_t GCBasePlayerWeaponVData::GetRumbleEffect() const {
    return GetSchemaValue<RumbleEffect_t>(m_ptr, "CBasePlayerWeaponVData", "m_iRumbleEffect");
}

void GCBasePlayerWeaponVData::SetRumbleEffect(RumbleEffect_t value) {
    SetSchemaValue(m_ptr, "CBasePlayerWeaponVData", "m_iRumbleEffect", false, value);
}

bool GCBasePlayerWeaponVData::GetLinkedCooldowns() const {
    return GetSchemaValue<bool>(m_ptr, "CBasePlayerWeaponVData", "m_bLinkedCooldowns");
}

void GCBasePlayerWeaponVData::SetLinkedCooldowns(bool value) {
    SetSchemaValue(m_ptr, "CBasePlayerWeaponVData", "m_bLinkedCooldowns", false, value);
}

int32_t GCBasePlayerWeaponVData::GetSlot() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBasePlayerWeaponVData", "m_iSlot");
}

void GCBasePlayerWeaponVData::SetSlot(int32_t value) {
    SetSchemaValue(m_ptr, "CBasePlayerWeaponVData", "m_iSlot", false, value);
}

int32_t GCBasePlayerWeaponVData::GetPosition() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBasePlayerWeaponVData", "m_iPosition");
}

void GCBasePlayerWeaponVData::SetPosition(int32_t value) {
    SetSchemaValue(m_ptr, "CBasePlayerWeaponVData", "m_iPosition", false, value);
}

std::string GCBasePlayerWeaponVData::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBasePlayerWeaponVData::IsValid() {
    return (m_ptr != nullptr);
}

GCMathColorBlend::GCMathColorBlend(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMathColorBlend::GCMathColorBlend(void *ptr) {
    m_ptr = ptr;
}

float GCMathColorBlend::GetInMin() const {
    return GetSchemaValue<float>(m_ptr, "CMathColorBlend", "m_flInMin");
}

void GCMathColorBlend::SetInMin(float value) {
    SetSchemaValue(m_ptr, "CMathColorBlend", "m_flInMin", false, value);
}

float GCMathColorBlend::GetInMax() const {
    return GetSchemaValue<float>(m_ptr, "CMathColorBlend", "m_flInMax");
}

void GCMathColorBlend::SetInMax(float value) {
    SetSchemaValue(m_ptr, "CMathColorBlend", "m_flInMax", false, value);
}

Color GCMathColorBlend::GetOutColor1() const {
    return GetSchemaValue<Color>(m_ptr, "CMathColorBlend", "m_OutColor1");
}

void GCMathColorBlend::SetOutColor1(Color value) {
    SetSchemaValue(m_ptr, "CMathColorBlend", "m_OutColor1", false, value);
}

Color GCMathColorBlend::GetOutColor2() const {
    return GetSchemaValue<Color>(m_ptr, "CMathColorBlend", "m_OutColor2");
}

void GCMathColorBlend::SetOutColor2(Color value) {
    SetSchemaValue(m_ptr, "CMathColorBlend", "m_OutColor2", false, value);
}

std::string GCMathColorBlend::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMathColorBlend::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvScreenOverlay::GCEnvScreenOverlay(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvScreenOverlay::GCEnvScreenOverlay(void *ptr) {
    m_ptr = ptr;
}

std::vector<CUtlSymbolLarge> GCEnvScreenOverlay::GetOverlayNames() const {
    CUtlSymbolLarge* outValue = GetSchemaValue<CUtlSymbolLarge*>(m_ptr, "CEnvScreenOverlay", "m_iszOverlayNames"); std::vector<CUtlSymbolLarge> ret; for(int i = 0; i < 10; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCEnvScreenOverlay::SetOverlayNames(std::vector<CUtlSymbolLarge> value) {
    CUtlSymbolLarge* outValue = GetSchemaValue<CUtlSymbolLarge*>(m_ptr, "CEnvScreenOverlay", "m_iszOverlayNames"); for(int i = 0; i < 10; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CEnvScreenOverlay", "m_iszOverlayNames", false, outValue);
}

std::vector<float> GCEnvScreenOverlay::GetOverlayTimes() const {
    float* outValue = GetSchemaValue<float*>(m_ptr, "CEnvScreenOverlay", "m_flOverlayTimes"); std::vector<float> ret; for(int i = 0; i < 10; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCEnvScreenOverlay::SetOverlayTimes(std::vector<float> value) {
    float* outValue = GetSchemaValue<float*>(m_ptr, "CEnvScreenOverlay", "m_flOverlayTimes"); for(int i = 0; i < 10; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CEnvScreenOverlay", "m_flOverlayTimes", false, outValue);
}

int32_t GCEnvScreenOverlay::GetDesiredOverlay() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvScreenOverlay", "m_iDesiredOverlay");
}

void GCEnvScreenOverlay::SetDesiredOverlay(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvScreenOverlay", "m_iDesiredOverlay", false, value);
}

bool GCEnvScreenOverlay::GetIsActive() const {
    return GetSchemaValue<bool>(m_ptr, "CEnvScreenOverlay", "m_bIsActive");
}

void GCEnvScreenOverlay::SetIsActive(bool value) {
    SetSchemaValue(m_ptr, "CEnvScreenOverlay", "m_bIsActive", false, value);
}

std::string GCEnvScreenOverlay::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvScreenOverlay::IsValid() {
    return (m_ptr != nullptr);
}

GCCSPlayerPawn::GCCSPlayerPawn(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSPlayerPawn::GCCSPlayerPawn(void *ptr) {
    m_ptr = ptr;
}

GCCSPlayer_BulletServices GCCSPlayerPawn::GetBulletServices() const {
    GCCSPlayer_BulletServices value(GetSchemaValuePtr<void>(m_ptr, "CCSPlayerPawn", "m_pBulletServices"));
    return value;
}

void GCCSPlayerPawn::SetBulletServices(GCCSPlayer_BulletServices* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'BulletServices' is not possible.\n");
}

GCCSPlayer_HostageServices GCCSPlayerPawn::GetHostageServices() const {
    GCCSPlayer_HostageServices value(GetSchemaValuePtr<void>(m_ptr, "CCSPlayerPawn", "m_pHostageServices"));
    return value;
}

void GCCSPlayerPawn::SetHostageServices(GCCSPlayer_HostageServices* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'HostageServices' is not possible.\n");
}

GCCSPlayer_BuyServices GCCSPlayerPawn::GetBuyServices() const {
    GCCSPlayer_BuyServices value(GetSchemaValuePtr<void>(m_ptr, "CCSPlayerPawn", "m_pBuyServices"));
    return value;
}

void GCCSPlayerPawn::SetBuyServices(GCCSPlayer_BuyServices* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'BuyServices' is not possible.\n");
}

GCCSPlayer_ActionTrackingServices GCCSPlayerPawn::GetActionTrackingServices() const {
    GCCSPlayer_ActionTrackingServices value(GetSchemaValuePtr<void>(m_ptr, "CCSPlayerPawn", "m_pActionTrackingServices"));
    return value;
}

void GCCSPlayerPawn::SetActionTrackingServices(GCCSPlayer_ActionTrackingServices* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ActionTrackingServices' is not possible.\n");
}

GCCSPlayer_RadioServices GCCSPlayerPawn::GetRadioServices() const {
    GCCSPlayer_RadioServices value(GetSchemaValuePtr<void>(m_ptr, "CCSPlayerPawn", "m_pRadioServices"));
    return value;
}

void GCCSPlayerPawn::SetRadioServices(GCCSPlayer_RadioServices* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'RadioServices' is not possible.\n");
}

GCCSPlayer_DamageReactServices GCCSPlayerPawn::GetDamageReactServices() const {
    GCCSPlayer_DamageReactServices value(GetSchemaValuePtr<void>(m_ptr, "CCSPlayerPawn", "m_pDamageReactServices"));
    return value;
}

void GCCSPlayerPawn::SetDamageReactServices(GCCSPlayer_DamageReactServices* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'DamageReactServices' is not possible.\n");
}

uint16_t GCCSPlayerPawn::GetCharacterDefIndex() const {
    return GetSchemaValue<uint16_t>(m_ptr, "CCSPlayerPawn", "m_nCharacterDefIndex");
}

void GCCSPlayerPawn::SetCharacterDefIndex(uint16_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_nCharacterDefIndex", false, value);
}

bool GCCSPlayerPawn::GetHasFemaleVoice() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bHasFemaleVoice");
}

void GCCSPlayerPawn::SetHasFemaleVoice(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bHasFemaleVoice", false, value);
}

CUtlString GCCSPlayerPawn::GetStrVOPrefix() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CCSPlayerPawn", "m_strVOPrefix");
}

void GCCSPlayerPawn::SetStrVOPrefix(CUtlString value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_strVOPrefix", false, value);
}

std::string GCCSPlayerPawn::GetLastPlaceName() const {
    return GetSchemaValuePtr<char>(m_ptr, "CCSPlayerPawn", "m_szLastPlaceName");
}

void GCCSPlayerPawn::SetLastPlaceName(std::string value) {
    WriteSchemaPtrValue(m_ptr, "CCSPlayerPawn", "m_szLastPlaceName", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 18);
}

bool GCCSPlayerPawn::GetInHostageResetZone() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bInHostageResetZone");
}

void GCCSPlayerPawn::SetInHostageResetZone(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bInHostageResetZone", false, value);
}

bool GCCSPlayerPawn::GetInBuyZone() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bInBuyZone");
}

void GCCSPlayerPawn::SetInBuyZone(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bInBuyZone", false, value);
}

bool GCCSPlayerPawn::GetWasInBuyZone() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bWasInBuyZone");
}

void GCCSPlayerPawn::SetWasInBuyZone(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bWasInBuyZone", false, value);
}

bool GCCSPlayerPawn::GetInHostageRescueZone() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bInHostageRescueZone");
}

void GCCSPlayerPawn::SetInHostageRescueZone(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bInHostageRescueZone", false, value);
}

bool GCCSPlayerPawn::GetInBombZone() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bInBombZone");
}

void GCCSPlayerPawn::SetInBombZone(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bInBombZone", false, value);
}

bool GCCSPlayerPawn::GetWasInHostageRescueZone() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bWasInHostageRescueZone");
}

void GCCSPlayerPawn::SetWasInHostageRescueZone(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bWasInHostageRescueZone", false, value);
}

int32_t GCCSPlayerPawn::GetRetakesOffering() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawn", "m_iRetakesOffering");
}

void GCCSPlayerPawn::SetRetakesOffering(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_iRetakesOffering", false, value);
}

int32_t GCCSPlayerPawn::GetRetakesOfferingCard() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawn", "m_iRetakesOfferingCard");
}

void GCCSPlayerPawn::SetRetakesOfferingCard(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_iRetakesOfferingCard", false, value);
}

bool GCCSPlayerPawn::GetRetakesHasDefuseKit() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bRetakesHasDefuseKit");
}

void GCCSPlayerPawn::SetRetakesHasDefuseKit(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bRetakesHasDefuseKit", false, value);
}

bool GCCSPlayerPawn::GetRetakesMVPLastRound() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bRetakesMVPLastRound");
}

void GCCSPlayerPawn::SetRetakesMVPLastRound(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bRetakesMVPLastRound", false, value);
}

int32_t GCCSPlayerPawn::GetRetakesMVPBoostItem() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawn", "m_iRetakesMVPBoostItem");
}

void GCCSPlayerPawn::SetRetakesMVPBoostItem(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_iRetakesMVPBoostItem", false, value);
}

loadout_slot_t GCCSPlayerPawn::GetRetakesMVPBoostExtraUtility() const {
    return GetSchemaValue<loadout_slot_t>(m_ptr, "CCSPlayerPawn", "m_RetakesMVPBoostExtraUtility");
}

void GCCSPlayerPawn::SetRetakesMVPBoostExtraUtility(loadout_slot_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_RetakesMVPBoostExtraUtility", false, value);
}

float GCCSPlayerPawn::GetLandingTimeSeconds() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_flLandingTimeSeconds");
}

void GCCSPlayerPawn::SetLandingTimeSeconds(float value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_flLandingTimeSeconds", false, value);
}

QAngle GCCSPlayerPawn::GetAimPunchAngle() const {
    return GetSchemaValue<QAngle>(m_ptr, "CCSPlayerPawn", "m_aimPunchAngle");
}

void GCCSPlayerPawn::SetAimPunchAngle(QAngle value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_aimPunchAngle", false, value);
}

QAngle GCCSPlayerPawn::GetAimPunchAngleVel() const {
    return GetSchemaValue<QAngle>(m_ptr, "CCSPlayerPawn", "m_aimPunchAngleVel");
}

void GCCSPlayerPawn::SetAimPunchAngleVel(QAngle value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_aimPunchAngleVel", false, value);
}

int32_t GCCSPlayerPawn::GetAimPunchTickBase() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawn", "m_aimPunchTickBase");
}

void GCCSPlayerPawn::SetAimPunchTickBase(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_aimPunchTickBase", false, value);
}

float GCCSPlayerPawn::GetAimPunchTickFraction() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_aimPunchTickFraction");
}

void GCCSPlayerPawn::SetAimPunchTickFraction(float value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_aimPunchTickFraction", false, value);
}

std::vector<QAngle> GCCSPlayerPawn::GetAimPunchCache() const {
    CUtlVector<QAngle>* vec = GetSchemaValue<CUtlVector<QAngle>*>(m_ptr, "CCSPlayerPawn", "m_aimPunchCache"); std::vector<QAngle> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCCSPlayerPawn::SetAimPunchCache(std::vector<QAngle> value) {
    SetSchemaValueCUtlVector<QAngle>(m_ptr, "CCSPlayerPawn", "m_aimPunchCache", false, value);
}

bool GCCSPlayerPawn::GetIsBuyMenuOpen() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bIsBuyMenuOpen");
}

void GCCSPlayerPawn::SetIsBuyMenuOpen(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bIsBuyMenuOpen", false, value);
}

bool GCCSPlayerPawn::GetLastHeadBoneTransformIsValid() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bLastHeadBoneTransformIsValid");
}

void GCCSPlayerPawn::SetLastHeadBoneTransformIsValid(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bLastHeadBoneTransformIsValid", false, value);
}

bool GCCSPlayerPawn::GetOnGroundLastTick() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bOnGroundLastTick");
}

void GCCSPlayerPawn::SetOnGroundLastTick(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bOnGroundLastTick", false, value);
}

int32_t GCCSPlayerPawn::GetPlayerLocked() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawn", "m_iPlayerLocked");
}

void GCCSPlayerPawn::SetPlayerLocked(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_iPlayerLocked", false, value);
}

bool GCCSPlayerPawn::GetNextSprayDecalTimeExpedited() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bNextSprayDecalTimeExpedited");
}

void GCCSPlayerPawn::SetNextSprayDecalTimeExpedited(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bNextSprayDecalTimeExpedited", false, value);
}

int32_t GCCSPlayerPawn::GetRagdollDamageBone() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawn", "m_nRagdollDamageBone");
}

void GCCSPlayerPawn::SetRagdollDamageBone(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_nRagdollDamageBone", false, value);
}

Vector GCCSPlayerPawn::GetRagdollDamageForce() const {
    return GetSchemaValue<Vector>(m_ptr, "CCSPlayerPawn", "m_vRagdollDamageForce");
}

void GCCSPlayerPawn::SetRagdollDamageForce(Vector value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_vRagdollDamageForce", false, value);
}

Vector GCCSPlayerPawn::GetRagdollDamagePosition() const {
    return GetSchemaValue<Vector>(m_ptr, "CCSPlayerPawn", "m_vRagdollDamagePosition");
}

void GCCSPlayerPawn::SetRagdollDamagePosition(Vector value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_vRagdollDamagePosition", false, value);
}

std::string GCCSPlayerPawn::GetRagdollDamageWeaponName() const {
    return GetSchemaValuePtr<char>(m_ptr, "CCSPlayerPawn", "m_szRagdollDamageWeaponName");
}

void GCCSPlayerPawn::SetRagdollDamageWeaponName(std::string value) {
    WriteSchemaPtrValue(m_ptr, "CCSPlayerPawn", "m_szRagdollDamageWeaponName", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 64);
}

bool GCCSPlayerPawn::GetRagdollDamageHeadshot() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bRagdollDamageHeadshot");
}

void GCCSPlayerPawn::SetRagdollDamageHeadshot(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bRagdollDamageHeadshot", false, value);
}

Vector GCCSPlayerPawn::GetRagdollServerOrigin() const {
    return GetSchemaValue<Vector>(m_ptr, "CCSPlayerPawn", "m_vRagdollServerOrigin");
}

void GCCSPlayerPawn::SetRagdollServerOrigin(Vector value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_vRagdollServerOrigin", false, value);
}

GCEconItemView GCCSPlayerPawn::GetEconGloves() const {
    return GetSchemaValue<GCEconItemView>(m_ptr, "CCSPlayerPawn", "m_EconGloves");
}

void GCCSPlayerPawn::SetEconGloves(GCEconItemView value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_EconGloves", false, value);
}

uint8_t GCCSPlayerPawn::GetEconGlovesChanged() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CCSPlayerPawn", "m_nEconGlovesChanged");
}

void GCCSPlayerPawn::SetEconGlovesChanged(uint8_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_nEconGlovesChanged", false, value);
}

QAngle GCCSPlayerPawn::GetDeathEyeAngles() const {
    return GetSchemaValue<QAngle>(m_ptr, "CCSPlayerPawn", "m_qDeathEyeAngles");
}

void GCCSPlayerPawn::SetDeathEyeAngles(QAngle value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_qDeathEyeAngles", false, value);
}

bool GCCSPlayerPawn::GetSkipOneHeadConstraintUpdate() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bSkipOneHeadConstraintUpdate");
}

void GCCSPlayerPawn::SetSkipOneHeadConstraintUpdate(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bSkipOneHeadConstraintUpdate", false, value);
}

bool GCCSPlayerPawn::GetLeftHanded() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bLeftHanded");
}

void GCCSPlayerPawn::SetLeftHanded(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bLeftHanded", false, value);
}

float GCCSPlayerPawn::GetViewmodelOffsetX() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_flViewmodelOffsetX");
}

void GCCSPlayerPawn::SetViewmodelOffsetX(float value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_flViewmodelOffsetX", false, value);
}

float GCCSPlayerPawn::GetViewmodelOffsetY() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_flViewmodelOffsetY");
}

void GCCSPlayerPawn::SetViewmodelOffsetY(float value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_flViewmodelOffsetY", false, value);
}

float GCCSPlayerPawn::GetViewmodelOffsetZ() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_flViewmodelOffsetZ");
}

void GCCSPlayerPawn::SetViewmodelOffsetZ(float value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_flViewmodelOffsetZ", false, value);
}

float GCCSPlayerPawn::GetViewmodelFOV() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_flViewmodelFOV");
}

void GCCSPlayerPawn::SetViewmodelFOV(float value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_flViewmodelFOV", false, value);
}

bool GCCSPlayerPawn::GetIsWalking() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bIsWalking");
}

void GCCSPlayerPawn::SetIsWalking(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bIsWalking", false, value);
}

float GCCSPlayerPawn::GetLastGivenDefuserTime() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_fLastGivenDefuserTime");
}

void GCCSPlayerPawn::SetLastGivenDefuserTime(float value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_fLastGivenDefuserTime", false, value);
}

float GCCSPlayerPawn::GetLastGivenBombTime() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_fLastGivenBombTime");
}

void GCCSPlayerPawn::SetLastGivenBombTime(float value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_fLastGivenBombTime", false, value);
}

float GCCSPlayerPawn::GetDealtDamageToEnemyMostRecentTimestamp() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_flDealtDamageToEnemyMostRecentTimestamp");
}

void GCCSPlayerPawn::SetDealtDamageToEnemyMostRecentTimestamp(float value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_flDealtDamageToEnemyMostRecentTimestamp", false, value);
}

uint32_t GCCSPlayerPawn::GetDisplayHistoryBits() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CCSPlayerPawn", "m_iDisplayHistoryBits");
}

void GCCSPlayerPawn::SetDisplayHistoryBits(uint32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_iDisplayHistoryBits", false, value);
}

float GCCSPlayerPawn::GetLastAttackedTeammate() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_flLastAttackedTeammate");
}

void GCCSPlayerPawn::SetLastAttackedTeammate(float value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_flLastAttackedTeammate", false, value);
}

bool GCCSPlayerPawn::GetResetArmorNextSpawn() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bResetArmorNextSpawn");
}

void GCCSPlayerPawn::SetResetArmorNextSpawn(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bResetArmorNextSpawn", false, value);
}

CEntityIndex GCCSPlayerPawn::GetLastKillerIndex() const {
    return GetSchemaValue<CEntityIndex>(m_ptr, "CCSPlayerPawn", "m_nLastKillerIndex");
}

void GCCSPlayerPawn::SetLastKillerIndex(CEntityIndex value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_nLastKillerIndex", false, value);
}

GEntitySpottedState_t GCCSPlayerPawn::GetEntitySpottedState() const {
    return GetSchemaValue<GEntitySpottedState_t>(m_ptr, "CCSPlayerPawn", "m_entitySpottedState");
}

void GCCSPlayerPawn::SetEntitySpottedState(GEntitySpottedState_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_entitySpottedState", false, value);
}

int32_t GCCSPlayerPawn::GetSpotRules() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawn", "m_nSpotRules");
}

void GCCSPlayerPawn::SetSpotRules(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_nSpotRules", false, value);
}

bool GCCSPlayerPawn::GetIsScoped() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bIsScoped");
}

void GCCSPlayerPawn::SetIsScoped(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bIsScoped", false, value);
}

bool GCCSPlayerPawn::GetResumeZoom() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bResumeZoom");
}

void GCCSPlayerPawn::SetResumeZoom(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bResumeZoom", false, value);
}

bool GCCSPlayerPawn::GetIsDefusing() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bIsDefusing");
}

void GCCSPlayerPawn::SetIsDefusing(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bIsDefusing", false, value);
}

bool GCCSPlayerPawn::GetIsGrabbingHostage() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bIsGrabbingHostage");
}

void GCCSPlayerPawn::SetIsGrabbingHostage(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bIsGrabbingHostage", false, value);
}

CSPlayerBlockingUseAction_t GCCSPlayerPawn::GetBlockingUseActionInProgress() const {
    return GetSchemaValue<CSPlayerBlockingUseAction_t>(m_ptr, "CCSPlayerPawn", "m_iBlockingUseActionInProgress");
}

void GCCSPlayerPawn::SetBlockingUseActionInProgress(CSPlayerBlockingUseAction_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_iBlockingUseActionInProgress", false, value);
}

bool GCCSPlayerPawn::GetInNoDefuseArea() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bInNoDefuseArea");
}

void GCCSPlayerPawn::SetInNoDefuseArea(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bInNoDefuseArea", false, value);
}

CEntityIndex GCCSPlayerPawn::GetBombSiteIndex() const {
    return GetSchemaValue<CEntityIndex>(m_ptr, "CCSPlayerPawn", "m_iBombSiteIndex");
}

void GCCSPlayerPawn::SetBombSiteIndex(CEntityIndex value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_iBombSiteIndex", false, value);
}

int32_t GCCSPlayerPawn::GetWhichBombZone() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawn", "m_nWhichBombZone");
}

void GCCSPlayerPawn::SetWhichBombZone(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_nWhichBombZone", false, value);
}

bool GCCSPlayerPawn::GetInBombZoneTrigger() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bInBombZoneTrigger");
}

void GCCSPlayerPawn::SetInBombZoneTrigger(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bInBombZoneTrigger", false, value);
}

bool GCCSPlayerPawn::GetWasInBombZoneTrigger() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bWasInBombZoneTrigger");
}

void GCCSPlayerPawn::SetWasInBombZoneTrigger(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bWasInBombZoneTrigger", false, value);
}

int32_t GCCSPlayerPawn::GetShotsFired() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawn", "m_iShotsFired");
}

void GCCSPlayerPawn::SetShotsFired(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_iShotsFired", false, value);
}

float GCCSPlayerPawn::GetFlinchStack() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_flFlinchStack");
}

void GCCSPlayerPawn::SetFlinchStack(float value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_flFlinchStack", false, value);
}

float GCCSPlayerPawn::GetVelocityModifier() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_flVelocityModifier");
}

void GCCSPlayerPawn::SetVelocityModifier(float value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_flVelocityModifier", false, value);
}

float GCCSPlayerPawn::GetHitHeading() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_flHitHeading");
}

void GCCSPlayerPawn::SetHitHeading(float value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_flHitHeading", false, value);
}

int32_t GCCSPlayerPawn::GetHitBodyPart() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawn", "m_nHitBodyPart");
}

void GCCSPlayerPawn::SetHitBodyPart(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_nHitBodyPart", false, value);
}

Vector GCCSPlayerPawn::GetTotalBulletForce() const {
    return GetSchemaValue<Vector>(m_ptr, "CCSPlayerPawn", "m_vecTotalBulletForce");
}

void GCCSPlayerPawn::SetTotalBulletForce(Vector value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_vecTotalBulletForce", false, value);
}

bool GCCSPlayerPawn::GetWaitForNoAttack() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bWaitForNoAttack");
}

void GCCSPlayerPawn::SetWaitForNoAttack(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bWaitForNoAttack", false, value);
}

float GCCSPlayerPawn::GetIgnoreLadderJumpTime() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_ignoreLadderJumpTime");
}

void GCCSPlayerPawn::SetIgnoreLadderJumpTime(float value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_ignoreLadderJumpTime", false, value);
}

bool GCCSPlayerPawn::GetKilledByHeadshot() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bKilledByHeadshot");
}

void GCCSPlayerPawn::SetKilledByHeadshot(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bKilledByHeadshot", false, value);
}

int32_t GCCSPlayerPawn::GetLastHitBox() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawn", "m_LastHitBox");
}

void GCCSPlayerPawn::SetLastHitBox(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_LastHitBox", false, value);
}

int32_t GCCSPlayerPawn::GetLastHealth() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawn", "m_LastHealth");
}

void GCCSPlayerPawn::SetLastHealth(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_LastHealth", false, value);
}

GCCSBot GCCSPlayerPawn::GetBot() const {
    GCCSBot value(GetSchemaValuePtr<void>(m_ptr, "CCSPlayerPawn", "m_pBot"));
    return value;
}

void GCCSPlayerPawn::SetBot(GCCSBot* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Bot' is not possible.\n");
}

bool GCCSPlayerPawn::GetBotAllowActive() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bBotAllowActive");
}

void GCCSPlayerPawn::SetBotAllowActive(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bBotAllowActive", false, value);
}

QAngle GCCSPlayerPawn::GetThirdPersonHeading() const {
    return GetSchemaValue<QAngle>(m_ptr, "CCSPlayerPawn", "m_thirdPersonHeading");
}

void GCCSPlayerPawn::SetThirdPersonHeading(QAngle value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_thirdPersonHeading", false, value);
}

float GCCSPlayerPawn::GetSlopeDropOffset() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_flSlopeDropOffset");
}

void GCCSPlayerPawn::SetSlopeDropOffset(float value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_flSlopeDropOffset", false, value);
}

float GCCSPlayerPawn::GetSlopeDropHeight() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_flSlopeDropHeight");
}

void GCCSPlayerPawn::SetSlopeDropHeight(float value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_flSlopeDropHeight", false, value);
}

Vector GCCSPlayerPawn::GetHeadConstraintOffset() const {
    return GetSchemaValue<Vector>(m_ptr, "CCSPlayerPawn", "m_vHeadConstraintOffset");
}

void GCCSPlayerPawn::SetHeadConstraintOffset(Vector value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_vHeadConstraintOffset", false, value);
}

int32_t GCCSPlayerPawn::GetLastPickupPriority() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawn", "m_nLastPickupPriority");
}

void GCCSPlayerPawn::SetLastPickupPriority(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_nLastPickupPriority", false, value);
}

float GCCSPlayerPawn::GetLastPickupPriorityTime() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_flLastPickupPriorityTime");
}

void GCCSPlayerPawn::SetLastPickupPriorityTime(float value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_flLastPickupPriorityTime", false, value);
}

int32_t GCCSPlayerPawn::GetArmorValue() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawn", "m_ArmorValue");
}

void GCCSPlayerPawn::SetArmorValue(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_ArmorValue", false, value);
}

uint16_t GCCSPlayerPawn::GetCurrentEquipmentValue() const {
    return GetSchemaValue<uint16_t>(m_ptr, "CCSPlayerPawn", "m_unCurrentEquipmentValue");
}

void GCCSPlayerPawn::SetCurrentEquipmentValue(uint16_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_unCurrentEquipmentValue", false, value);
}

uint16_t GCCSPlayerPawn::GetRoundStartEquipmentValue() const {
    return GetSchemaValue<uint16_t>(m_ptr, "CCSPlayerPawn", "m_unRoundStartEquipmentValue");
}

void GCCSPlayerPawn::SetRoundStartEquipmentValue(uint16_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_unRoundStartEquipmentValue", false, value);
}

uint16_t GCCSPlayerPawn::GetFreezetimeEndEquipmentValue() const {
    return GetSchemaValue<uint16_t>(m_ptr, "CCSPlayerPawn", "m_unFreezetimeEndEquipmentValue");
}

void GCCSPlayerPawn::SetFreezetimeEndEquipmentValue(uint16_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_unFreezetimeEndEquipmentValue", false, value);
}

int32_t GCCSPlayerPawn::GetLastWeaponFireUsercmd() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawn", "m_iLastWeaponFireUsercmd");
}

void GCCSPlayerPawn::SetLastWeaponFireUsercmd(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_iLastWeaponFireUsercmd", false, value);
}

float GCCSPlayerPawn::GetLastFriendlyFireDamageReductionRatio() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_flLastFriendlyFireDamageReductionRatio");
}

void GCCSPlayerPawn::SetLastFriendlyFireDamageReductionRatio(float value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_flLastFriendlyFireDamageReductionRatio", false, value);
}

bool GCCSPlayerPawn::GetIsSpawning() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bIsSpawning");
}

void GCCSPlayerPawn::SetIsSpawning(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bIsSpawning", false, value);
}

int32_t GCCSPlayerPawn::GetDeathFlags() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawn", "m_iDeathFlags");
}

void GCCSPlayerPawn::SetDeathFlags(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_iDeathFlags", false, value);
}

bool GCCSPlayerPawn::GetHasDeathInfo() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bHasDeathInfo");
}

void GCCSPlayerPawn::SetHasDeathInfo(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bHasDeathInfo", false, value);
}

float GCCSPlayerPawn::GetDeathInfoTime() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_flDeathInfoTime");
}

void GCCSPlayerPawn::SetDeathInfoTime(float value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_flDeathInfoTime", false, value);
}

Vector GCCSPlayerPawn::GetDeathInfoOrigin() const {
    return GetSchemaValue<Vector>(m_ptr, "CCSPlayerPawn", "m_vecDeathInfoOrigin");
}

void GCCSPlayerPawn::SetDeathInfoOrigin(Vector value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_vecDeathInfoOrigin", false, value);
}

std::vector<uint32_t> GCCSPlayerPawn::GetPlayerPatchEconIndices() const {
    uint32_t* outValue = GetSchemaValue<uint32_t*>(m_ptr, "CCSPlayerPawn", "m_vecPlayerPatchEconIndices"); std::vector<uint32_t> ret; for(int i = 0; i < 5; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCCSPlayerPawn::SetPlayerPatchEconIndices(std::vector<uint32_t> value) {
    uint32_t* outValue = GetSchemaValue<uint32_t*>(m_ptr, "CCSPlayerPawn", "m_vecPlayerPatchEconIndices"); for(int i = 0; i < 5; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_vecPlayerPatchEconIndices", false, outValue);
}

Color GCCSPlayerPawn::GetGunGameImmunityColor() const {
    return GetSchemaValue<Color>(m_ptr, "CCSPlayerPawn", "m_GunGameImmunityColor");
}

void GCCSPlayerPawn::SetGunGameImmunityColor(Color value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_GunGameImmunityColor", false, value);
}

bool GCCSPlayerPawn::GetGrenadeParametersStashed() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bGrenadeParametersStashed");
}

void GCCSPlayerPawn::SetGrenadeParametersStashed(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bGrenadeParametersStashed", false, value);
}

QAngle GCCSPlayerPawn::GetStashedShootAngles() const {
    return GetSchemaValue<QAngle>(m_ptr, "CCSPlayerPawn", "m_angStashedShootAngles");
}

void GCCSPlayerPawn::SetStashedShootAngles(QAngle value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_angStashedShootAngles", false, value);
}

Vector GCCSPlayerPawn::GetStashedGrenadeThrowPosition() const {
    return GetSchemaValue<Vector>(m_ptr, "CCSPlayerPawn", "m_vecStashedGrenadeThrowPosition");
}

void GCCSPlayerPawn::SetStashedGrenadeThrowPosition(Vector value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_vecStashedGrenadeThrowPosition", false, value);
}

Vector GCCSPlayerPawn::GetStashedVelocity() const {
    return GetSchemaValue<Vector>(m_ptr, "CCSPlayerPawn", "m_vecStashedVelocity");
}

void GCCSPlayerPawn::SetStashedVelocity(Vector value) {
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_vecStashedVelocity", false, value);
}

std::vector<QAngle> GCCSPlayerPawn::GetShootAngleHistory() const {
    QAngle* outValue = GetSchemaValue<QAngle*>(m_ptr, "CCSPlayerPawn", "m_angShootAngleHistory"); std::vector<QAngle> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCCSPlayerPawn::SetShootAngleHistory(std::vector<QAngle> value) {
    QAngle* outValue = GetSchemaValue<QAngle*>(m_ptr, "CCSPlayerPawn", "m_angShootAngleHistory"); for(int i = 0; i < 2; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_angShootAngleHistory", false, outValue);
}

std::vector<Vector> GCCSPlayerPawn::GetThrowPositionHistory() const {
    Vector* outValue = GetSchemaValue<Vector*>(m_ptr, "CCSPlayerPawn", "m_vecThrowPositionHistory"); std::vector<Vector> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCCSPlayerPawn::SetThrowPositionHistory(std::vector<Vector> value) {
    Vector* outValue = GetSchemaValue<Vector*>(m_ptr, "CCSPlayerPawn", "m_vecThrowPositionHistory"); for(int i = 0; i < 2; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_vecThrowPositionHistory", false, outValue);
}

std::vector<Vector> GCCSPlayerPawn::GetVelocityHistory() const {
    Vector* outValue = GetSchemaValue<Vector*>(m_ptr, "CCSPlayerPawn", "m_vecVelocityHistory"); std::vector<Vector> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCCSPlayerPawn::SetVelocityHistory(std::vector<Vector> value) {
    Vector* outValue = GetSchemaValue<Vector*>(m_ptr, "CCSPlayerPawn", "m_vecVelocityHistory"); for(int i = 0; i < 2; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_vecVelocityHistory", false, outValue);
}

std::string GCCSPlayerPawn::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSPlayerPawn::IsValid() {
    return (m_ptr != nullptr);
}

GCBumpMineProjectile::GCBumpMineProjectile(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBumpMineProjectile::GCBumpMineProjectile(void *ptr) {
    m_ptr = ptr;
}

std::string GCBumpMineProjectile::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBumpMineProjectile::IsValid() {
    return (m_ptr != nullptr);
}

GCCSPlayerController::GCCSPlayerController(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSPlayerController::GCCSPlayerController(void *ptr) {
    m_ptr = ptr;
}

GCCSPlayerController_InGameMoneyServices GCCSPlayerController::GetInGameMoneyServices() const {
    GCCSPlayerController_InGameMoneyServices value(GetSchemaValuePtr<void>(m_ptr, "CCSPlayerController", "m_pInGameMoneyServices"));
    return value;
}

void GCCSPlayerController::SetInGameMoneyServices(GCCSPlayerController_InGameMoneyServices* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'InGameMoneyServices' is not possible.\n");
}

GCCSPlayerController_InventoryServices GCCSPlayerController::GetInventoryServices() const {
    GCCSPlayerController_InventoryServices value(GetSchemaValuePtr<void>(m_ptr, "CCSPlayerController", "m_pInventoryServices"));
    return value;
}

void GCCSPlayerController::SetInventoryServices(GCCSPlayerController_InventoryServices* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'InventoryServices' is not possible.\n");
}

GCCSPlayerController_ActionTrackingServices GCCSPlayerController::GetActionTrackingServices() const {
    GCCSPlayerController_ActionTrackingServices value(GetSchemaValuePtr<void>(m_ptr, "CCSPlayerController", "m_pActionTrackingServices"));
    return value;
}

void GCCSPlayerController::SetActionTrackingServices(GCCSPlayerController_ActionTrackingServices* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ActionTrackingServices' is not possible.\n");
}

GCCSPlayerController_DamageServices GCCSPlayerController::GetDamageServices() const {
    GCCSPlayerController_DamageServices value(GetSchemaValuePtr<void>(m_ptr, "CCSPlayerController", "m_pDamageServices"));
    return value;
}

void GCCSPlayerController::SetDamageServices(GCCSPlayerController_DamageServices* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'DamageServices' is not possible.\n");
}

uint32_t GCCSPlayerController::GetPing() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CCSPlayerController", "m_iPing");
}

void GCCSPlayerController::SetPing(uint32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iPing", false, value);
}

bool GCCSPlayerController::GetHasCommunicationAbuseMute() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bHasCommunicationAbuseMute");
}

void GCCSPlayerController::SetHasCommunicationAbuseMute(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bHasCommunicationAbuseMute", false, value);
}

CUtlSymbolLarge GCCSPlayerController::GetCrosshairCodes() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CCSPlayerController", "m_szCrosshairCodes");
}

void GCCSPlayerController::SetCrosshairCodes(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_szCrosshairCodes", false, value);
}

uint8_t GCCSPlayerController::GetPendingTeamNum() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CCSPlayerController", "m_iPendingTeamNum");
}

void GCCSPlayerController::SetPendingTeamNum(uint8_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iPendingTeamNum", false, value);
}

int32_t GCCSPlayerController::GetCompTeammateColor() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iCompTeammateColor");
}

void GCCSPlayerController::SetCompTeammateColor(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iCompTeammateColor", false, value);
}

bool GCCSPlayerController::GetEverPlayedOnTeam() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bEverPlayedOnTeam");
}

void GCCSPlayerController::SetEverPlayedOnTeam(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bEverPlayedOnTeam", false, value);
}

bool GCCSPlayerController::GetAttemptedToGetColor() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bAttemptedToGetColor");
}

void GCCSPlayerController::SetAttemptedToGetColor(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bAttemptedToGetColor", false, value);
}

int32_t GCCSPlayerController::GetTeammatePreferredColor() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iTeammatePreferredColor");
}

void GCCSPlayerController::SetTeammatePreferredColor(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iTeammatePreferredColor", false, value);
}

bool GCCSPlayerController::GetTeamChanged() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bTeamChanged");
}

void GCCSPlayerController::SetTeamChanged(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bTeamChanged", false, value);
}

bool GCCSPlayerController::GetInSwitchTeam() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bInSwitchTeam");
}

void GCCSPlayerController::SetInSwitchTeam(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bInSwitchTeam", false, value);
}

bool GCCSPlayerController::GetHasSeenJoinGame() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bHasSeenJoinGame");
}

void GCCSPlayerController::SetHasSeenJoinGame(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bHasSeenJoinGame", false, value);
}

bool GCCSPlayerController::GetJustBecameSpectator() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bJustBecameSpectator");
}

void GCCSPlayerController::SetJustBecameSpectator(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bJustBecameSpectator", false, value);
}

bool GCCSPlayerController::GetSwitchTeamsOnNextRoundReset() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bSwitchTeamsOnNextRoundReset");
}

void GCCSPlayerController::SetSwitchTeamsOnNextRoundReset(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bSwitchTeamsOnNextRoundReset", false, value);
}

bool GCCSPlayerController::GetRemoveAllItemsOnNextRoundReset() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bRemoveAllItemsOnNextRoundReset");
}

void GCCSPlayerController::SetRemoveAllItemsOnNextRoundReset(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bRemoveAllItemsOnNextRoundReset", false, value);
}

CUtlSymbolLarge GCCSPlayerController::GetClan() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CCSPlayerController", "m_szClan");
}

void GCCSPlayerController::SetClan(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_szClan", false, value);
}

std::string GCCSPlayerController::GetClanName() const {
    return GetSchemaValuePtr<char>(m_ptr, "CCSPlayerController", "m_szClanName");
}

void GCCSPlayerController::SetClanName(std::string value) {
    WriteSchemaPtrValue(m_ptr, "CCSPlayerController", "m_szClanName", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 32);
}

int32_t GCCSPlayerController::GetCoachingTeam() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iCoachingTeam");
}

void GCCSPlayerController::SetCoachingTeam(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iCoachingTeam", false, value);
}

uint64_t GCCSPlayerController::GetPlayerDominated() const {
    return GetSchemaValue<uint64_t>(m_ptr, "CCSPlayerController", "m_nPlayerDominated");
}

void GCCSPlayerController::SetPlayerDominated(uint64_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_nPlayerDominated", false, value);
}

uint64_t GCCSPlayerController::GetPlayerDominatingMe() const {
    return GetSchemaValue<uint64_t>(m_ptr, "CCSPlayerController", "m_nPlayerDominatingMe");
}

void GCCSPlayerController::SetPlayerDominatingMe(uint64_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_nPlayerDominatingMe", false, value);
}

int32_t GCCSPlayerController::GetCompetitiveRanking() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iCompetitiveRanking");
}

void GCCSPlayerController::SetCompetitiveRanking(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iCompetitiveRanking", false, value);
}

int32_t GCCSPlayerController::GetCompetitiveWins() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iCompetitiveWins");
}

void GCCSPlayerController::SetCompetitiveWins(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iCompetitiveWins", false, value);
}

int8_t GCCSPlayerController::GetCompetitiveRankType() const {
    return GetSchemaValue<int8_t>(m_ptr, "CCSPlayerController", "m_iCompetitiveRankType");
}

void GCCSPlayerController::SetCompetitiveRankType(int8_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iCompetitiveRankType", false, value);
}

int32_t GCCSPlayerController::GetCompetitiveRankingPredicted_Win() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iCompetitiveRankingPredicted_Win");
}

void GCCSPlayerController::SetCompetitiveRankingPredicted_Win(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iCompetitiveRankingPredicted_Win", false, value);
}

int32_t GCCSPlayerController::GetCompetitiveRankingPredicted_Loss() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iCompetitiveRankingPredicted_Loss");
}

void GCCSPlayerController::SetCompetitiveRankingPredicted_Loss(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iCompetitiveRankingPredicted_Loss", false, value);
}

int32_t GCCSPlayerController::GetCompetitiveRankingPredicted_Tie() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iCompetitiveRankingPredicted_Tie");
}

void GCCSPlayerController::SetCompetitiveRankingPredicted_Tie(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iCompetitiveRankingPredicted_Tie", false, value);
}

int32_t GCCSPlayerController::GetEndMatchNextMapVote() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_nEndMatchNextMapVote");
}

void GCCSPlayerController::SetEndMatchNextMapVote(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_nEndMatchNextMapVote", false, value);
}

uint16_t GCCSPlayerController::GetActiveQuestId() const {
    return GetSchemaValue<uint16_t>(m_ptr, "CCSPlayerController", "m_unActiveQuestId");
}

void GCCSPlayerController::SetActiveQuestId(uint16_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_unActiveQuestId", false, value);
}

GQuestProgress GCCSPlayerController::GetQuestProgressReason() const {
    return GetSchemaValue<GQuestProgress>(m_ptr, "CCSPlayerController", "m_nQuestProgressReason");
}

void GCCSPlayerController::SetQuestProgressReason(GQuestProgress value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_nQuestProgressReason", false, value);
}

uint32_t GCCSPlayerController::GetPlayerTvControlFlags() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CCSPlayerController", "m_unPlayerTvControlFlags");
}

void GCCSPlayerController::SetPlayerTvControlFlags(uint32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_unPlayerTvControlFlags", false, value);
}

int32_t GCCSPlayerController::GetDraftIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iDraftIndex");
}

void GCCSPlayerController::SetDraftIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iDraftIndex", false, value);
}

uint32_t GCCSPlayerController::GetMsQueuedModeDisconnectionTimestamp() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CCSPlayerController", "m_msQueuedModeDisconnectionTimestamp");
}

void GCCSPlayerController::SetMsQueuedModeDisconnectionTimestamp(uint32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_msQueuedModeDisconnectionTimestamp", false, value);
}

uint32_t GCCSPlayerController::GetUiAbandonRecordedReason() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CCSPlayerController", "m_uiAbandonRecordedReason");
}

void GCCSPlayerController::SetUiAbandonRecordedReason(uint32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_uiAbandonRecordedReason", false, value);
}

bool GCCSPlayerController::GetCannotBeKicked() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bCannotBeKicked");
}

void GCCSPlayerController::SetCannotBeKicked(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bCannotBeKicked", false, value);
}

bool GCCSPlayerController::GetEverFullyConnected() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bEverFullyConnected");
}

void GCCSPlayerController::SetEverFullyConnected(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bEverFullyConnected", false, value);
}

bool GCCSPlayerController::GetAbandonAllowsSurrender() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bAbandonAllowsSurrender");
}

void GCCSPlayerController::SetAbandonAllowsSurrender(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bAbandonAllowsSurrender", false, value);
}

bool GCCSPlayerController::GetAbandonOffersInstantSurrender() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bAbandonOffersInstantSurrender");
}

void GCCSPlayerController::SetAbandonOffersInstantSurrender(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bAbandonOffersInstantSurrender", false, value);
}

bool GCCSPlayerController::GetDisconnection1MinWarningPrinted() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bDisconnection1MinWarningPrinted");
}

void GCCSPlayerController::SetDisconnection1MinWarningPrinted(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bDisconnection1MinWarningPrinted", false, value);
}

bool GCCSPlayerController::GetScoreReported() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bScoreReported");
}

void GCCSPlayerController::SetScoreReported(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bScoreReported", false, value);
}

int32_t GCCSPlayerController::GetDisconnectionTick() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_nDisconnectionTick");
}

void GCCSPlayerController::SetDisconnectionTick(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_nDisconnectionTick", false, value);
}

bool GCCSPlayerController::GetControllingBot() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bControllingBot");
}

void GCCSPlayerController::SetControllingBot(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bControllingBot", false, value);
}

bool GCCSPlayerController::GetHasControlledBotThisRound() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bHasControlledBotThisRound");
}

void GCCSPlayerController::SetHasControlledBotThisRound(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bHasControlledBotThisRound", false, value);
}

bool GCCSPlayerController::GetHasBeenControlledByPlayerThisRound() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bHasBeenControlledByPlayerThisRound");
}

void GCCSPlayerController::SetHasBeenControlledByPlayerThisRound(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bHasBeenControlledByPlayerThisRound", false, value);
}

int32_t GCCSPlayerController::GetBotsControlledThisRound() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_nBotsControlledThisRound");
}

void GCCSPlayerController::SetBotsControlledThisRound(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_nBotsControlledThisRound", false, value);
}

bool GCCSPlayerController::GetCanControlObservedBot() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bCanControlObservedBot");
}

void GCCSPlayerController::SetCanControlObservedBot(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bCanControlObservedBot", false, value);
}

GCCSPlayerPawn GCCSPlayerController::GetPlayerPawn() const {
    GCCSPlayerPawn value(GetSchemaValuePtr<void>(m_ptr, "CCSPlayerController", "m_hPlayerPawn"));
    return value;
}

void GCCSPlayerController::SetPlayerPawn(GCCSPlayerPawn* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'PlayerPawn' is not possible.\n");
}

GCCSObserverPawn GCCSPlayerController::GetObserverPawn() const {
    GCCSObserverPawn value(GetSchemaValuePtr<void>(m_ptr, "CCSPlayerController", "m_hObserverPawn"));
    return value;
}

void GCCSPlayerController::SetObserverPawn(GCCSObserverPawn* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ObserverPawn' is not possible.\n");
}

int32_t GCCSPlayerController::GetDesiredObserverMode() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_DesiredObserverMode");
}

void GCCSPlayerController::SetDesiredObserverMode(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_DesiredObserverMode", false, value);
}

GCEntityInstance GCCSPlayerController::GetDesiredObserverTarget() const {
    GCEntityInstance value(GetSchemaValuePtr<void>(m_ptr, "CCSPlayerController", "m_hDesiredObserverTarget"));
    return value;
}

void GCCSPlayerController::SetDesiredObserverTarget(GCEntityInstance* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'DesiredObserverTarget' is not possible.\n");
}

bool GCCSPlayerController::GetPawnIsAlive() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bPawnIsAlive");
}

void GCCSPlayerController::SetPawnIsAlive(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bPawnIsAlive", false, value);
}

uint32_t GCCSPlayerController::GetPawnHealth() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CCSPlayerController", "m_iPawnHealth");
}

void GCCSPlayerController::SetPawnHealth(uint32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iPawnHealth", false, value);
}

int32_t GCCSPlayerController::GetPawnArmor() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iPawnArmor");
}

void GCCSPlayerController::SetPawnArmor(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iPawnArmor", false, value);
}

bool GCCSPlayerController::GetPawnHasDefuser() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bPawnHasDefuser");
}

void GCCSPlayerController::SetPawnHasDefuser(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bPawnHasDefuser", false, value);
}

bool GCCSPlayerController::GetPawnHasHelmet() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bPawnHasHelmet");
}

void GCCSPlayerController::SetPawnHasHelmet(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bPawnHasHelmet", false, value);
}

uint16_t GCCSPlayerController::GetPawnCharacterDefIndex() const {
    return GetSchemaValue<uint16_t>(m_ptr, "CCSPlayerController", "m_nPawnCharacterDefIndex");
}

void GCCSPlayerController::SetPawnCharacterDefIndex(uint16_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_nPawnCharacterDefIndex", false, value);
}

int32_t GCCSPlayerController::GetPawnLifetimeStart() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iPawnLifetimeStart");
}

void GCCSPlayerController::SetPawnLifetimeStart(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iPawnLifetimeStart", false, value);
}

int32_t GCCSPlayerController::GetPawnLifetimeEnd() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iPawnLifetimeEnd");
}

void GCCSPlayerController::SetPawnLifetimeEnd(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iPawnLifetimeEnd", false, value);
}

int32_t GCCSPlayerController::GetPawnBotDifficulty() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iPawnBotDifficulty");
}

void GCCSPlayerController::SetPawnBotDifficulty(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iPawnBotDifficulty", false, value);
}

GCCSPlayerController GCCSPlayerController::GetOriginalControllerOfCurrentPawn() const {
    GCCSPlayerController value(GetSchemaValuePtr<void>(m_ptr, "CCSPlayerController", "m_hOriginalControllerOfCurrentPawn"));
    return value;
}

void GCCSPlayerController::SetOriginalControllerOfCurrentPawn(GCCSPlayerController* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OriginalControllerOfCurrentPawn' is not possible.\n");
}

int32_t GCCSPlayerController::GetScore() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iScore");
}

void GCCSPlayerController::SetScore(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iScore", false, value);
}

int32_t GCCSPlayerController::GetRoundScore() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iRoundScore");
}

void GCCSPlayerController::SetRoundScore(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iRoundScore", false, value);
}

int32_t GCCSPlayerController::GetRoundsWon() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iRoundsWon");
}

void GCCSPlayerController::SetRoundsWon(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iRoundsWon", false, value);
}

std::vector<EKillTypes_t> GCCSPlayerController::GetKills() const {
    CUtlVector<EKillTypes_t>* vec = GetSchemaValue<CUtlVector<EKillTypes_t>*>(m_ptr, "CCSPlayerController", "m_vecKills"); std::vector<EKillTypes_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCCSPlayerController::SetKills(std::vector<EKillTypes_t> value) {
    SetSchemaValueCUtlVector<EKillTypes_t>(m_ptr, "CCSPlayerController", "m_vecKills", false, value);
}

bool GCCSPlayerController::GetMvpNoMusic() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bMvpNoMusic");
}

void GCCSPlayerController::SetMvpNoMusic(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bMvpNoMusic", false, value);
}

int32_t GCCSPlayerController::GetMvpReason() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_eMvpReason");
}

void GCCSPlayerController::SetMvpReason(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_eMvpReason", false, value);
}

int32_t GCCSPlayerController::GetMusicKitID() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iMusicKitID");
}

void GCCSPlayerController::SetMusicKitID(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iMusicKitID", false, value);
}

int32_t GCCSPlayerController::GetMusicKitMVPs() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iMusicKitMVPs");
}

void GCCSPlayerController::SetMusicKitMVPs(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iMusicKitMVPs", false, value);
}

int32_t GCCSPlayerController::GetMVPs() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iMVPs");
}

void GCCSPlayerController::SetMVPs(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iMVPs", false, value);
}

int32_t GCCSPlayerController::GetUpdateCounter() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_nUpdateCounter");
}

void GCCSPlayerController::SetUpdateCounter(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_nUpdateCounter", false, value);
}

float GCCSPlayerController::GetSmoothedPing() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayerController", "m_flSmoothedPing");
}

void GCCSPlayerController::SetSmoothedPing(float value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_flSmoothedPing", false, value);
}

GIntervalTimer GCCSPlayerController::GetLastHeldVoteTimer() const {
    return GetSchemaValue<GIntervalTimer>(m_ptr, "CCSPlayerController", "m_lastHeldVoteTimer");
}

void GCCSPlayerController::SetLastHeldVoteTimer(GIntervalTimer value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_lastHeldVoteTimer", false, value);
}

bool GCCSPlayerController::GetShowHints() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bShowHints");
}

void GCCSPlayerController::SetShowHints(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bShowHints", false, value);
}

int32_t GCCSPlayerController::GetNextTimeCheck() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iNextTimeCheck");
}

void GCCSPlayerController::SetNextTimeCheck(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iNextTimeCheck", false, value);
}

bool GCCSPlayerController::GetJustDidTeamKill() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bJustDidTeamKill");
}

void GCCSPlayerController::SetJustDidTeamKill(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bJustDidTeamKill", false, value);
}

bool GCCSPlayerController::GetPunishForTeamKill() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bPunishForTeamKill");
}

void GCCSPlayerController::SetPunishForTeamKill(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bPunishForTeamKill", false, value);
}

bool GCCSPlayerController::GetGaveTeamDamageWarning() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bGaveTeamDamageWarning");
}

void GCCSPlayerController::SetGaveTeamDamageWarning(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bGaveTeamDamageWarning", false, value);
}

bool GCCSPlayerController::GetGaveTeamDamageWarningThisRound() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bGaveTeamDamageWarningThisRound");
}

void GCCSPlayerController::SetGaveTeamDamageWarningThisRound(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bGaveTeamDamageWarningThisRound", false, value);
}

double GCCSPlayerController::GetDblLastReceivedPacketPlatFloatTime() const {
    return GetSchemaValue<double>(m_ptr, "CCSPlayerController", "m_dblLastReceivedPacketPlatFloatTime");
}

void GCCSPlayerController::SetDblLastReceivedPacketPlatFloatTime(double value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_dblLastReceivedPacketPlatFloatTime", false, value);
}

uint32_t GCCSPlayerController::GetSuspiciousHitCount() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CCSPlayerController", "m_nSuspiciousHitCount");
}

void GCCSPlayerController::SetSuspiciousHitCount(uint32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_nSuspiciousHitCount", false, value);
}

uint32_t GCCSPlayerController::GetNonSuspiciousHitStreak() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CCSPlayerController", "m_nNonSuspiciousHitStreak");
}

void GCCSPlayerController::SetNonSuspiciousHitStreak(uint32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_nNonSuspiciousHitStreak", false, value);
}

std::string GCCSPlayerController::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSPlayerController::IsValid() {
    return (m_ptr != nullptr);
}

GCChicken::GCChicken(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCChicken::GCChicken(void *ptr) {
    m_ptr = ptr;
}

GCAttributeContainer GCChicken::GetAttributeManager() const {
    return GetSchemaValue<GCAttributeContainer>(m_ptr, "CChicken", "m_AttributeManager");
}

void GCChicken::SetAttributeManager(GCAttributeContainer value) {
    SetSchemaValue(m_ptr, "CChicken", "m_AttributeManager", false, value);
}

CUtlStringToken GCChicken::GetActivityFinishedTag() const {
    return GetSchemaValue<CUtlStringToken>(m_ptr, "CChicken", "m_sActivityFinishedTag");
}

void GCChicken::SetActivityFinishedTag(CUtlStringToken value) {
    SetSchemaValue(m_ptr, "CChicken", "m_sActivityFinishedTag", false, value);
}

GCountdownTimer GCChicken::GetUpdateTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CChicken", "m_updateTimer");
}

void GCChicken::SetUpdateTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CChicken", "m_updateTimer", false, value);
}

Vector GCChicken::GetStuckAnchor() const {
    return GetSchemaValue<Vector>(m_ptr, "CChicken", "m_stuckAnchor");
}

void GCChicken::SetStuckAnchor(Vector value) {
    SetSchemaValue(m_ptr, "CChicken", "m_stuckAnchor", false, value);
}

GCountdownTimer GCChicken::GetStuckTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CChicken", "m_stuckTimer");
}

void GCChicken::SetStuckTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CChicken", "m_stuckTimer", false, value);
}

GCountdownTimer GCChicken::GetCollisionStuckTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CChicken", "m_collisionStuckTimer");
}

void GCChicken::SetCollisionStuckTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CChicken", "m_collisionStuckTimer", false, value);
}

bool GCChicken::GetIsOnGround() const {
    return GetSchemaValue<bool>(m_ptr, "CChicken", "m_isOnGround");
}

void GCChicken::SetIsOnGround(bool value) {
    SetSchemaValue(m_ptr, "CChicken", "m_isOnGround", false, value);
}

Vector GCChicken::GetFallVelocity() const {
    return GetSchemaValue<Vector>(m_ptr, "CChicken", "m_vFallVelocity");
}

void GCChicken::SetFallVelocity(Vector value) {
    SetSchemaValue(m_ptr, "CChicken", "m_vFallVelocity", false, value);
}

ChickenActivity GCChicken::GetDesiredActivity() const {
    return GetSchemaValue<ChickenActivity>(m_ptr, "CChicken", "m_desiredActivity");
}

void GCChicken::SetDesiredActivity(ChickenActivity value) {
    SetSchemaValue(m_ptr, "CChicken", "m_desiredActivity", false, value);
}

ChickenActivity GCChicken::GetCurrentActivity() const {
    return GetSchemaValue<ChickenActivity>(m_ptr, "CChicken", "m_currentActivity");
}

void GCChicken::SetCurrentActivity(ChickenActivity value) {
    SetSchemaValue(m_ptr, "CChicken", "m_currentActivity", false, value);
}

GCountdownTimer GCChicken::GetActivityTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CChicken", "m_activityTimer");
}

void GCChicken::SetActivityTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CChicken", "m_activityTimer", false, value);
}

float GCChicken::GetTurnRate() const {
    return GetSchemaValue<float>(m_ptr, "CChicken", "m_turnRate");
}

void GCChicken::SetTurnRate(float value) {
    SetSchemaValue(m_ptr, "CChicken", "m_turnRate", false, value);
}

GCBaseEntity GCChicken::GetFleeFrom() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CChicken", "m_fleeFrom"));
    return value;
}

void GCChicken::SetFleeFrom(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'FleeFrom' is not possible.\n");
}

GCountdownTimer GCChicken::GetMoveRateThrottleTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CChicken", "m_moveRateThrottleTimer");
}

void GCChicken::SetMoveRateThrottleTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CChicken", "m_moveRateThrottleTimer", false, value);
}

GCountdownTimer GCChicken::GetStartleTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CChicken", "m_startleTimer");
}

void GCChicken::SetStartleTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CChicken", "m_startleTimer", false, value);
}

GCountdownTimer GCChicken::GetVocalizeTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CChicken", "m_vocalizeTimer");
}

void GCChicken::SetVocalizeTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CChicken", "m_vocalizeTimer", false, value);
}

bool GCChicken::GetJumpedThisFrame() const {
    return GetSchemaValue<bool>(m_ptr, "CChicken", "m_jumpedThisFrame");
}

void GCChicken::SetJumpedThisFrame(bool value) {
    SetSchemaValue(m_ptr, "CChicken", "m_jumpedThisFrame", false, value);
}

GCCSPlayerPawn GCChicken::GetLeader() const {
    GCCSPlayerPawn value(GetSchemaValuePtr<void>(m_ptr, "CChicken", "m_leader"));
    return value;
}

void GCChicken::SetLeader(GCCSPlayerPawn* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Leader' is not possible.\n");
}

GCountdownTimer GCChicken::GetReuseTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CChicken", "m_reuseTimer");
}

void GCChicken::SetReuseTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CChicken", "m_reuseTimer", false, value);
}

bool GCChicken::GetHasBeenUsed() const {
    return GetSchemaValue<bool>(m_ptr, "CChicken", "m_hasBeenUsed");
}

void GCChicken::SetHasBeenUsed(bool value) {
    SetSchemaValue(m_ptr, "CChicken", "m_hasBeenUsed", false, value);
}

GCountdownTimer GCChicken::GetJumpTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CChicken", "m_jumpTimer");
}

void GCChicken::SetJumpTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CChicken", "m_jumpTimer", false, value);
}

float GCChicken::GetLastJumpTime() const {
    return GetSchemaValue<float>(m_ptr, "CChicken", "m_flLastJumpTime");
}

void GCChicken::SetLastJumpTime(float value) {
    SetSchemaValue(m_ptr, "CChicken", "m_flLastJumpTime", false, value);
}

bool GCChicken::GetInJump() const {
    return GetSchemaValue<bool>(m_ptr, "CChicken", "m_bInJump");
}

void GCChicken::SetInJump(bool value) {
    SetSchemaValue(m_ptr, "CChicken", "m_bInJump", false, value);
}

bool GCChicken::GetIsWaitingForLeader() const {
    return GetSchemaValue<bool>(m_ptr, "CChicken", "m_isWaitingForLeader");
}

void GCChicken::SetIsWaitingForLeader(bool value) {
    SetSchemaValue(m_ptr, "CChicken", "m_isWaitingForLeader", false, value);
}

GCountdownTimer GCChicken::GetRepathTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CChicken", "m_repathTimer");
}

void GCChicken::SetRepathTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CChicken", "m_repathTimer", false, value);
}

GCountdownTimer GCChicken::GetInhibitDoorTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CChicken", "m_inhibitDoorTimer");
}

void GCChicken::SetInhibitDoorTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CChicken", "m_inhibitDoorTimer", false, value);
}

GCountdownTimer GCChicken::GetInhibitObstacleAvoidanceTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CChicken", "m_inhibitObstacleAvoidanceTimer");
}

void GCChicken::SetInhibitObstacleAvoidanceTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CChicken", "m_inhibitObstacleAvoidanceTimer", false, value);
}

Vector GCChicken::GetPathGoal() const {
    return GetSchemaValue<Vector>(m_ptr, "CChicken", "m_vecPathGoal");
}

void GCChicken::SetPathGoal(Vector value) {
    SetSchemaValue(m_ptr, "CChicken", "m_vecPathGoal", false, value);
}

GCountdownTimer GCChicken::GetFollowMinuteTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CChicken", "m_followMinuteTimer");
}

void GCChicken::SetFollowMinuteTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CChicken", "m_followMinuteTimer", false, value);
}

Vector GCChicken::GetLastEggPoopPosition() const {
    return GetSchemaValue<Vector>(m_ptr, "CChicken", "m_vecLastEggPoopPosition");
}

void GCChicken::SetLastEggPoopPosition(Vector value) {
    SetSchemaValue(m_ptr, "CChicken", "m_vecLastEggPoopPosition", false, value);
}

GCountdownTimer GCChicken::GetBlockDirectionTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CChicken", "m_BlockDirectionTimer");
}

void GCChicken::SetBlockDirectionTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CChicken", "m_BlockDirectionTimer", false, value);
}

std::string GCChicken::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCChicken::IsValid() {
    return (m_ptr != nullptr);
}

GCInfoInstructorHintBombTargetA::GCInfoInstructorHintBombTargetA(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCInfoInstructorHintBombTargetA::GCInfoInstructorHintBombTargetA(void *ptr) {
    m_ptr = ptr;
}

std::string GCInfoInstructorHintBombTargetA::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCInfoInstructorHintBombTargetA::IsValid() {
    return (m_ptr != nullptr);
}

GCWeaponAWP::GCWeaponAWP(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWeaponAWP::GCWeaponAWP(void *ptr) {
    m_ptr = ptr;
}

std::string GCWeaponAWP::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWeaponAWP::IsValid() {
    return (m_ptr != nullptr);
}

GCCSObserverPawn::GCCSObserverPawn(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSObserverPawn::GCCSObserverPawn(void *ptr) {
    m_ptr = ptr;
}

std::string GCCSObserverPawn::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSObserverPawn::IsValid() {
    return (m_ptr != nullptr);
}

GCPostProcessingVolume::GCPostProcessingVolume(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPostProcessingVolume::GCPostProcessingVolume(void *ptr) {
    m_ptr = ptr;
}

float GCPostProcessingVolume::GetFadeDuration() const {
    return GetSchemaValue<float>(m_ptr, "CPostProcessingVolume", "m_flFadeDuration");
}

void GCPostProcessingVolume::SetFadeDuration(float value) {
    SetSchemaValue(m_ptr, "CPostProcessingVolume", "m_flFadeDuration", false, value);
}

float GCPostProcessingVolume::GetMinLogExposure() const {
    return GetSchemaValue<float>(m_ptr, "CPostProcessingVolume", "m_flMinLogExposure");
}

void GCPostProcessingVolume::SetMinLogExposure(float value) {
    SetSchemaValue(m_ptr, "CPostProcessingVolume", "m_flMinLogExposure", false, value);
}

float GCPostProcessingVolume::GetMaxLogExposure() const {
    return GetSchemaValue<float>(m_ptr, "CPostProcessingVolume", "m_flMaxLogExposure");
}

void GCPostProcessingVolume::SetMaxLogExposure(float value) {
    SetSchemaValue(m_ptr, "CPostProcessingVolume", "m_flMaxLogExposure", false, value);
}

float GCPostProcessingVolume::GetMinExposure() const {
    return GetSchemaValue<float>(m_ptr, "CPostProcessingVolume", "m_flMinExposure");
}

void GCPostProcessingVolume::SetMinExposure(float value) {
    SetSchemaValue(m_ptr, "CPostProcessingVolume", "m_flMinExposure", false, value);
}

float GCPostProcessingVolume::GetMaxExposure() const {
    return GetSchemaValue<float>(m_ptr, "CPostProcessingVolume", "m_flMaxExposure");
}

void GCPostProcessingVolume::SetMaxExposure(float value) {
    SetSchemaValue(m_ptr, "CPostProcessingVolume", "m_flMaxExposure", false, value);
}

float GCPostProcessingVolume::GetExposureCompensation() const {
    return GetSchemaValue<float>(m_ptr, "CPostProcessingVolume", "m_flExposureCompensation");
}

void GCPostProcessingVolume::SetExposureCompensation(float value) {
    SetSchemaValue(m_ptr, "CPostProcessingVolume", "m_flExposureCompensation", false, value);
}

float GCPostProcessingVolume::GetExposureFadeSpeedUp() const {
    return GetSchemaValue<float>(m_ptr, "CPostProcessingVolume", "m_flExposureFadeSpeedUp");
}

void GCPostProcessingVolume::SetExposureFadeSpeedUp(float value) {
    SetSchemaValue(m_ptr, "CPostProcessingVolume", "m_flExposureFadeSpeedUp", false, value);
}

float GCPostProcessingVolume::GetExposureFadeSpeedDown() const {
    return GetSchemaValue<float>(m_ptr, "CPostProcessingVolume", "m_flExposureFadeSpeedDown");
}

void GCPostProcessingVolume::SetExposureFadeSpeedDown(float value) {
    SetSchemaValue(m_ptr, "CPostProcessingVolume", "m_flExposureFadeSpeedDown", false, value);
}

float GCPostProcessingVolume::GetTonemapEVSmoothingRange() const {
    return GetSchemaValue<float>(m_ptr, "CPostProcessingVolume", "m_flTonemapEVSmoothingRange");
}

void GCPostProcessingVolume::SetTonemapEVSmoothingRange(float value) {
    SetSchemaValue(m_ptr, "CPostProcessingVolume", "m_flTonemapEVSmoothingRange", false, value);
}

bool GCPostProcessingVolume::GetMaster() const {
    return GetSchemaValue<bool>(m_ptr, "CPostProcessingVolume", "m_bMaster");
}

void GCPostProcessingVolume::SetMaster(bool value) {
    SetSchemaValue(m_ptr, "CPostProcessingVolume", "m_bMaster", false, value);
}

bool GCPostProcessingVolume::GetExposureControl() const {
    return GetSchemaValue<bool>(m_ptr, "CPostProcessingVolume", "m_bExposureControl");
}

void GCPostProcessingVolume::SetExposureControl(bool value) {
    SetSchemaValue(m_ptr, "CPostProcessingVolume", "m_bExposureControl", false, value);
}

float GCPostProcessingVolume::GetRate() const {
    return GetSchemaValue<float>(m_ptr, "CPostProcessingVolume", "m_flRate");
}

void GCPostProcessingVolume::SetRate(float value) {
    SetSchemaValue(m_ptr, "CPostProcessingVolume", "m_flRate", false, value);
}

float GCPostProcessingVolume::GetTonemapPercentTarget() const {
    return GetSchemaValue<float>(m_ptr, "CPostProcessingVolume", "m_flTonemapPercentTarget");
}

void GCPostProcessingVolume::SetTonemapPercentTarget(float value) {
    SetSchemaValue(m_ptr, "CPostProcessingVolume", "m_flTonemapPercentTarget", false, value);
}

float GCPostProcessingVolume::GetTonemapPercentBrightPixels() const {
    return GetSchemaValue<float>(m_ptr, "CPostProcessingVolume", "m_flTonemapPercentBrightPixels");
}

void GCPostProcessingVolume::SetTonemapPercentBrightPixels(float value) {
    SetSchemaValue(m_ptr, "CPostProcessingVolume", "m_flTonemapPercentBrightPixels", false, value);
}

float GCPostProcessingVolume::GetTonemapMinAvgLum() const {
    return GetSchemaValue<float>(m_ptr, "CPostProcessingVolume", "m_flTonemapMinAvgLum");
}

void GCPostProcessingVolume::SetTonemapMinAvgLum(float value) {
    SetSchemaValue(m_ptr, "CPostProcessingVolume", "m_flTonemapMinAvgLum", false, value);
}

std::string GCPostProcessingVolume::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPostProcessingVolume::IsValid() {
    return (m_ptr != nullptr);
}

GCSpotlightEnd::GCSpotlightEnd(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSpotlightEnd::GCSpotlightEnd(void *ptr) {
    m_ptr = ptr;
}

float GCSpotlightEnd::GetLightScale() const {
    return GetSchemaValue<float>(m_ptr, "CSpotlightEnd", "m_flLightScale");
}

void GCSpotlightEnd::SetLightScale(float value) {
    SetSchemaValue(m_ptr, "CSpotlightEnd", "m_flLightScale", false, value);
}

float GCSpotlightEnd::GetRadius() const {
    return GetSchemaValue<float>(m_ptr, "CSpotlightEnd", "m_Radius");
}

void GCSpotlightEnd::SetRadius(float value) {
    SetSchemaValue(m_ptr, "CSpotlightEnd", "m_Radius", false, value);
}

Vector GCSpotlightEnd::GetSpotlightDir() const {
    return GetSchemaValue<Vector>(m_ptr, "CSpotlightEnd", "m_vSpotlightDir");
}

void GCSpotlightEnd::SetSpotlightDir(Vector value) {
    SetSchemaValue(m_ptr, "CSpotlightEnd", "m_vSpotlightDir", false, value);
}

Vector GCSpotlightEnd::GetSpotlightOrg() const {
    return GetSchemaValue<Vector>(m_ptr, "CSpotlightEnd", "m_vSpotlightOrg");
}

void GCSpotlightEnd::SetSpotlightOrg(Vector value) {
    SetSchemaValue(m_ptr, "CSpotlightEnd", "m_vSpotlightOrg", false, value);
}

std::string GCSpotlightEnd::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSpotlightEnd::IsValid() {
    return (m_ptr != nullptr);
}

GCGamePlayerZone::GCGamePlayerZone(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCGamePlayerZone::GCGamePlayerZone(void *ptr) {
    m_ptr = ptr;
}

GCEntityIOOutput GCGamePlayerZone::GetOnPlayerInZone() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CGamePlayerZone", "m_OnPlayerInZone");
}

void GCGamePlayerZone::SetOnPlayerInZone(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CGamePlayerZone", "m_OnPlayerInZone", false, value);
}

GCEntityIOOutput GCGamePlayerZone::GetOnPlayerOutZone() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CGamePlayerZone", "m_OnPlayerOutZone");
}

void GCGamePlayerZone::SetOnPlayerOutZone(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CGamePlayerZone", "m_OnPlayerOutZone", false, value);
}

std::string GCGamePlayerZone::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCGamePlayerZone::IsValid() {
    return (m_ptr != nullptr);
}

GCSensorGrenade::GCSensorGrenade(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSensorGrenade::GCSensorGrenade(void *ptr) {
    m_ptr = ptr;
}

std::string GCSensorGrenade::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSensorGrenade::IsValid() {
    return (m_ptr != nullptr);
}

GCCSGO_WingmanIntroTerroristPosition::GCCSGO_WingmanIntroTerroristPosition(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSGO_WingmanIntroTerroristPosition::GCCSGO_WingmanIntroTerroristPosition(void *ptr) {
    m_ptr = ptr;
}

std::string GCCSGO_WingmanIntroTerroristPosition::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSGO_WingmanIntroTerroristPosition::IsValid() {
    return (m_ptr != nullptr);
}

GCTriggerDetectExplosion::GCTriggerDetectExplosion(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTriggerDetectExplosion::GCTriggerDetectExplosion(void *ptr) {
    m_ptr = ptr;
}

GCEntityIOOutput GCTriggerDetectExplosion::GetOnDetectedExplosion() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CTriggerDetectExplosion", "m_OnDetectedExplosion");
}

void GCTriggerDetectExplosion::SetOnDetectedExplosion(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CTriggerDetectExplosion", "m_OnDetectedExplosion", false, value);
}

std::string GCTriggerDetectExplosion::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTriggerDetectExplosion::IsValid() {
    return (m_ptr != nullptr);
}

GCSoundStackSave::GCSoundStackSave(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSoundStackSave::GCSoundStackSave(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCSoundStackSave::GetStackName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSoundStackSave", "m_iszStackName");
}

void GCSoundStackSave::SetStackName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CSoundStackSave", "m_iszStackName", false, value);
}

std::string GCSoundStackSave::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSoundStackSave::IsValid() {
    return (m_ptr != nullptr);
}

GConstraintSoundInfo::GConstraintSoundInfo(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GConstraintSoundInfo::GConstraintSoundInfo(void *ptr) {
    m_ptr = ptr;
}

GVelocitySampler GConstraintSoundInfo::GetSampler() const {
    return GetSchemaValue<GVelocitySampler>(m_ptr, "ConstraintSoundInfo", "m_vSampler");
}

void GConstraintSoundInfo::SetSampler(GVelocitySampler value) {
    SetSchemaValue(m_ptr, "ConstraintSoundInfo", "m_vSampler", false, value);
}

GSimpleConstraintSoundProfile GConstraintSoundInfo::GetSoundProfile() const {
    return GetSchemaValue<GSimpleConstraintSoundProfile>(m_ptr, "ConstraintSoundInfo", "m_soundProfile");
}

void GConstraintSoundInfo::SetSoundProfile(GSimpleConstraintSoundProfile value) {
    SetSchemaValue(m_ptr, "ConstraintSoundInfo", "m_soundProfile", false, value);
}

Vector GConstraintSoundInfo::GetForwardAxis() const {
    return GetSchemaValue<Vector>(m_ptr, "ConstraintSoundInfo", "m_forwardAxis");
}

void GConstraintSoundInfo::SetForwardAxis(Vector value) {
    SetSchemaValue(m_ptr, "ConstraintSoundInfo", "m_forwardAxis", false, value);
}

CUtlSymbolLarge GConstraintSoundInfo::GetTravelSoundFwd() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "ConstraintSoundInfo", "m_iszTravelSoundFwd");
}

void GConstraintSoundInfo::SetTravelSoundFwd(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "ConstraintSoundInfo", "m_iszTravelSoundFwd", false, value);
}

CUtlSymbolLarge GConstraintSoundInfo::GetTravelSoundBack() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "ConstraintSoundInfo", "m_iszTravelSoundBack");
}

void GConstraintSoundInfo::SetTravelSoundBack(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "ConstraintSoundInfo", "m_iszTravelSoundBack", false, value);
}

std::vector<CUtlSymbolLarge> GConstraintSoundInfo::GetReversalSounds() const {
    CUtlSymbolLarge* outValue = GetSchemaValue<CUtlSymbolLarge*>(m_ptr, "ConstraintSoundInfo", "m_iszReversalSounds"); std::vector<CUtlSymbolLarge> ret; for(int i = 0; i < 3; i++) { ret.push_back(outValue[i]); } return ret;
}

void GConstraintSoundInfo::SetReversalSounds(std::vector<CUtlSymbolLarge> value) {
    CUtlSymbolLarge* outValue = GetSchemaValue<CUtlSymbolLarge*>(m_ptr, "ConstraintSoundInfo", "m_iszReversalSounds"); for(int i = 0; i < 3; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "ConstraintSoundInfo", "m_iszReversalSounds", false, outValue);
}

bool GConstraintSoundInfo::GetPlayTravelSound() const {
    return GetSchemaValue<bool>(m_ptr, "ConstraintSoundInfo", "m_bPlayTravelSound");
}

void GConstraintSoundInfo::SetPlayTravelSound(bool value) {
    SetSchemaValue(m_ptr, "ConstraintSoundInfo", "m_bPlayTravelSound", false, value);
}

bool GConstraintSoundInfo::GetPlayReversalSound() const {
    return GetSchemaValue<bool>(m_ptr, "ConstraintSoundInfo", "m_bPlayReversalSound");
}

void GConstraintSoundInfo::SetPlayReversalSound(bool value) {
    SetSchemaValue(m_ptr, "ConstraintSoundInfo", "m_bPlayReversalSound", false, value);
}

std::string GConstraintSoundInfo::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GConstraintSoundInfo::IsValid() {
    return (m_ptr != nullptr);
}

GCSingleplayRules::GCSingleplayRules(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSingleplayRules::GCSingleplayRules(void *ptr) {
    m_ptr = ptr;
}

bool GCSingleplayRules::GetSinglePlayerGameEnding() const {
    return GetSchemaValue<bool>(m_ptr, "CSingleplayRules", "m_bSinglePlayerGameEnding");
}

void GCSingleplayRules::SetSinglePlayerGameEnding(bool value) {
    SetSchemaValue(m_ptr, "CSingleplayRules", "m_bSinglePlayerGameEnding", false, value);
}

std::string GCSingleplayRules::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSingleplayRules::IsValid() {
    return (m_ptr != nullptr);
}

GCFilterProximity::GCFilterProximity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFilterProximity::GCFilterProximity(void *ptr) {
    m_ptr = ptr;
}

float GCFilterProximity::GetRadius() const {
    return GetSchemaValue<float>(m_ptr, "CFilterProximity", "m_flRadius");
}

void GCFilterProximity::SetRadius(float value) {
    SetSchemaValue(m_ptr, "CFilterProximity", "m_flRadius", false, value);
}

std::string GCFilterProximity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFilterProximity::IsValid() {
    return (m_ptr != nullptr);
}

GCEconWearable::GCEconWearable(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEconWearable::GCEconWearable(void *ptr) {
    m_ptr = ptr;
}

int32_t GCEconWearable::GetForceSkin() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEconWearable", "m_nForceSkin");
}

void GCEconWearable::SetForceSkin(int32_t value) {
    SetSchemaValue(m_ptr, "CEconWearable", "m_nForceSkin", false, value);
}

bool GCEconWearable::GetAlwaysAllow() const {
    return GetSchemaValue<bool>(m_ptr, "CEconWearable", "m_bAlwaysAllow");
}

void GCEconWearable::SetAlwaysAllow(bool value) {
    SetSchemaValue(m_ptr, "CEconWearable", "m_bAlwaysAllow", false, value);
}

std::string GCEconWearable::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEconWearable::IsValid() {
    return (m_ptr != nullptr);
}

GCCSPlayer_ItemServices::GCCSPlayer_ItemServices(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSPlayer_ItemServices::GCCSPlayer_ItemServices(void *ptr) {
    m_ptr = ptr;
}

bool GCCSPlayer_ItemServices::GetHasDefuser() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_ItemServices", "m_bHasDefuser");
}

void GCCSPlayer_ItemServices::SetHasDefuser(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayer_ItemServices", "m_bHasDefuser", false, value);
}

bool GCCSPlayer_ItemServices::GetHasHelmet() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_ItemServices", "m_bHasHelmet");
}

void GCCSPlayer_ItemServices::SetHasHelmet(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayer_ItemServices", "m_bHasHelmet", false, value);
}

bool GCCSPlayer_ItemServices::GetHasHeavyArmor() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_ItemServices", "m_bHasHeavyArmor");
}

void GCCSPlayer_ItemServices::SetHasHeavyArmor(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayer_ItemServices", "m_bHasHeavyArmor", false, value);
}

std::string GCCSPlayer_ItemServices::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSPlayer_ItemServices::IsValid() {
    return (m_ptr != nullptr);
}

GCFuncConveyor::GCFuncConveyor(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFuncConveyor::GCFuncConveyor(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCFuncConveyor::GetConveyorModels() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncConveyor", "m_szConveyorModels");
}

void GCFuncConveyor::SetConveyorModels(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFuncConveyor", "m_szConveyorModels", false, value);
}

float GCFuncConveyor::GetTransitionDurationSeconds() const {
    return GetSchemaValue<float>(m_ptr, "CFuncConveyor", "m_flTransitionDurationSeconds");
}

void GCFuncConveyor::SetTransitionDurationSeconds(float value) {
    SetSchemaValue(m_ptr, "CFuncConveyor", "m_flTransitionDurationSeconds", false, value);
}

QAngle GCFuncConveyor::GetMoveEntitySpace() const {
    return GetSchemaValue<QAngle>(m_ptr, "CFuncConveyor", "m_angMoveEntitySpace");
}

void GCFuncConveyor::SetMoveEntitySpace(QAngle value) {
    SetSchemaValue(m_ptr, "CFuncConveyor", "m_angMoveEntitySpace", false, value);
}

Vector GCFuncConveyor::GetMoveDirEntitySpace() const {
    return GetSchemaValue<Vector>(m_ptr, "CFuncConveyor", "m_vecMoveDirEntitySpace");
}

void GCFuncConveyor::SetMoveDirEntitySpace(Vector value) {
    SetSchemaValue(m_ptr, "CFuncConveyor", "m_vecMoveDirEntitySpace", false, value);
}

float GCFuncConveyor::GetTargetSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CFuncConveyor", "m_flTargetSpeed");
}

void GCFuncConveyor::SetTargetSpeed(float value) {
    SetSchemaValue(m_ptr, "CFuncConveyor", "m_flTargetSpeed", false, value);
}

int32_t GCFuncConveyor::GetTransitionDurationTicks() const {
    return GetSchemaValue<int32_t>(m_ptr, "CFuncConveyor", "m_nTransitionDurationTicks");
}

void GCFuncConveyor::SetTransitionDurationTicks(int32_t value) {
    SetSchemaValue(m_ptr, "CFuncConveyor", "m_nTransitionDurationTicks", false, value);
}

float GCFuncConveyor::GetTransitionStartSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CFuncConveyor", "m_flTransitionStartSpeed");
}

void GCFuncConveyor::SetTransitionStartSpeed(float value) {
    SetSchemaValue(m_ptr, "CFuncConveyor", "m_flTransitionStartSpeed", false, value);
}

std::vector<GCBaseEntity*> GCFuncConveyor::GetConveyorModels1() const {
    CUtlVector<GCBaseEntity*>* vec = GetSchemaValue<CUtlVector<GCBaseEntity*>*>(m_ptr, "CFuncConveyor", "m_hConveyorModels"); std::vector<GCBaseEntity*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCFuncConveyor::SetConveyorModels1(std::vector<GCBaseEntity*> value) {
    SetSchemaValueCUtlVector<GCBaseEntity*>(m_ptr, "CFuncConveyor", "m_hConveyorModels", false, value);
}

std::string GCFuncConveyor::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFuncConveyor::IsValid() {
    return (m_ptr != nullptr);
}

GCWeaponMag7::GCWeaponMag7(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWeaponMag7::GCWeaponMag7(void *ptr) {
    m_ptr = ptr;
}

std::string GCWeaponMag7::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWeaponMag7::IsValid() {
    return (m_ptr != nullptr);
}

GCMathCounter::GCMathCounter(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMathCounter::GCMathCounter(void *ptr) {
    m_ptr = ptr;
}

float GCMathCounter::GetMin() const {
    return GetSchemaValue<float>(m_ptr, "CMathCounter", "m_flMin");
}

void GCMathCounter::SetMin(float value) {
    SetSchemaValue(m_ptr, "CMathCounter", "m_flMin", false, value);
}

float GCMathCounter::GetMax() const {
    return GetSchemaValue<float>(m_ptr, "CMathCounter", "m_flMax");
}

void GCMathCounter::SetMax(float value) {
    SetSchemaValue(m_ptr, "CMathCounter", "m_flMax", false, value);
}

bool GCMathCounter::GetHitMin() const {
    return GetSchemaValue<bool>(m_ptr, "CMathCounter", "m_bHitMin");
}

void GCMathCounter::SetHitMin(bool value) {
    SetSchemaValue(m_ptr, "CMathCounter", "m_bHitMin", false, value);
}

bool GCMathCounter::GetHitMax() const {
    return GetSchemaValue<bool>(m_ptr, "CMathCounter", "m_bHitMax");
}

void GCMathCounter::SetHitMax(bool value) {
    SetSchemaValue(m_ptr, "CMathCounter", "m_bHitMax", false, value);
}

bool GCMathCounter::GetDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CMathCounter", "m_bDisabled");
}

void GCMathCounter::SetDisabled(bool value) {
    SetSchemaValue(m_ptr, "CMathCounter", "m_bDisabled", false, value);
}

GCEntityIOOutput GCMathCounter::GetOnHitMin() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CMathCounter", "m_OnHitMin");
}

void GCMathCounter::SetOnHitMin(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CMathCounter", "m_OnHitMin", false, value);
}

GCEntityIOOutput GCMathCounter::GetOnHitMax() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CMathCounter", "m_OnHitMax");
}

void GCMathCounter::SetOnHitMax(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CMathCounter", "m_OnHitMax", false, value);
}

GCEntityIOOutput GCMathCounter::GetOnChangedFromMin() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CMathCounter", "m_OnChangedFromMin");
}

void GCMathCounter::SetOnChangedFromMin(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CMathCounter", "m_OnChangedFromMin", false, value);
}

GCEntityIOOutput GCMathCounter::GetOnChangedFromMax() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CMathCounter", "m_OnChangedFromMax");
}

void GCMathCounter::SetOnChangedFromMax(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CMathCounter", "m_OnChangedFromMax", false, value);
}

std::string GCMathCounter::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMathCounter::IsValid() {
    return (m_ptr != nullptr);
}

GCInfoWorldLayer::GCInfoWorldLayer(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCInfoWorldLayer::GCInfoWorldLayer(void *ptr) {
    m_ptr = ptr;
}

GCEntityIOOutput GCInfoWorldLayer::GetOutputOnEntitiesSpawned() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CInfoWorldLayer", "m_pOutputOnEntitiesSpawned");
}

void GCInfoWorldLayer::SetOutputOnEntitiesSpawned(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CInfoWorldLayer", "m_pOutputOnEntitiesSpawned", false, value);
}

CUtlSymbolLarge GCInfoWorldLayer::GetWorldName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CInfoWorldLayer", "m_worldName");
}

void GCInfoWorldLayer::SetWorldName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CInfoWorldLayer", "m_worldName", false, value);
}

CUtlSymbolLarge GCInfoWorldLayer::GetLayerName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CInfoWorldLayer", "m_layerName");
}

void GCInfoWorldLayer::SetLayerName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CInfoWorldLayer", "m_layerName", false, value);
}

bool GCInfoWorldLayer::GetWorldLayerVisible() const {
    return GetSchemaValue<bool>(m_ptr, "CInfoWorldLayer", "m_bWorldLayerVisible");
}

void GCInfoWorldLayer::SetWorldLayerVisible(bool value) {
    SetSchemaValue(m_ptr, "CInfoWorldLayer", "m_bWorldLayerVisible", false, value);
}

bool GCInfoWorldLayer::GetEntitiesSpawned() const {
    return GetSchemaValue<bool>(m_ptr, "CInfoWorldLayer", "m_bEntitiesSpawned");
}

void GCInfoWorldLayer::SetEntitiesSpawned(bool value) {
    SetSchemaValue(m_ptr, "CInfoWorldLayer", "m_bEntitiesSpawned", false, value);
}

bool GCInfoWorldLayer::GetCreateAsChildSpawnGroup() const {
    return GetSchemaValue<bool>(m_ptr, "CInfoWorldLayer", "m_bCreateAsChildSpawnGroup");
}

void GCInfoWorldLayer::SetCreateAsChildSpawnGroup(bool value) {
    SetSchemaValue(m_ptr, "CInfoWorldLayer", "m_bCreateAsChildSpawnGroup", false, value);
}

uint32_t GCInfoWorldLayer::GetLayerSpawnGroup() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CInfoWorldLayer", "m_hLayerSpawnGroup");
}

void GCInfoWorldLayer::SetLayerSpawnGroup(uint32_t value) {
    SetSchemaValue(m_ptr, "CInfoWorldLayer", "m_hLayerSpawnGroup", false, value);
}

std::string GCInfoWorldLayer::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCInfoWorldLayer::IsValid() {
    return (m_ptr != nullptr);
}

GCRectLight::GCRectLight(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCRectLight::GCRectLight(void *ptr) {
    m_ptr = ptr;
}

bool GCRectLight::GetShowLight() const {
    return GetSchemaValue<bool>(m_ptr, "CRectLight", "m_bShowLight");
}

void GCRectLight::SetShowLight(bool value) {
    SetSchemaValue(m_ptr, "CRectLight", "m_bShowLight", false, value);
}

std::string GCRectLight::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCRectLight::IsValid() {
    return (m_ptr != nullptr);
}

GCCSGO_TeamSelectCharacterPosition::GCCSGO_TeamSelectCharacterPosition(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSGO_TeamSelectCharacterPosition::GCCSGO_TeamSelectCharacterPosition(void *ptr) {
    m_ptr = ptr;
}

std::string GCCSGO_TeamSelectCharacterPosition::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSGO_TeamSelectCharacterPosition::IsValid() {
    return (m_ptr != nullptr);
}

GCBaseDoor::GCBaseDoor(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBaseDoor::GCBaseDoor(void *ptr) {
    m_ptr = ptr;
}

QAngle GCBaseDoor::GetMoveEntitySpace() const {
    return GetSchemaValue<QAngle>(m_ptr, "CBaseDoor", "m_angMoveEntitySpace");
}

void GCBaseDoor::SetMoveEntitySpace(QAngle value) {
    SetSchemaValue(m_ptr, "CBaseDoor", "m_angMoveEntitySpace", false, value);
}

Vector GCBaseDoor::GetMoveDirParentSpace() const {
    return GetSchemaValue<Vector>(m_ptr, "CBaseDoor", "m_vecMoveDirParentSpace");
}

void GCBaseDoor::SetMoveDirParentSpace(Vector value) {
    SetSchemaValue(m_ptr, "CBaseDoor", "m_vecMoveDirParentSpace", false, value);
}

Glocksound_t GCBaseDoor::GetLs() const {
    return GetSchemaValue<Glocksound_t>(m_ptr, "CBaseDoor", "m_ls");
}

void GCBaseDoor::SetLs(Glocksound_t value) {
    SetSchemaValue(m_ptr, "CBaseDoor", "m_ls", false, value);
}

bool GCBaseDoor::GetForceClosed() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseDoor", "m_bForceClosed");
}

void GCBaseDoor::SetForceClosed(bool value) {
    SetSchemaValue(m_ptr, "CBaseDoor", "m_bForceClosed", false, value);
}

bool GCBaseDoor::GetDoorGroup() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseDoor", "m_bDoorGroup");
}

void GCBaseDoor::SetDoorGroup(bool value) {
    SetSchemaValue(m_ptr, "CBaseDoor", "m_bDoorGroup", false, value);
}

bool GCBaseDoor::GetLocked() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseDoor", "m_bLocked");
}

void GCBaseDoor::SetLocked(bool value) {
    SetSchemaValue(m_ptr, "CBaseDoor", "m_bLocked", false, value);
}

bool GCBaseDoor::GetIgnoreDebris() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseDoor", "m_bIgnoreDebris");
}

void GCBaseDoor::SetIgnoreDebris(bool value) {
    SetSchemaValue(m_ptr, "CBaseDoor", "m_bIgnoreDebris", false, value);
}

FuncDoorSpawnPos_t GCBaseDoor::GetSpawnPosition() const {
    return GetSchemaValue<FuncDoorSpawnPos_t>(m_ptr, "CBaseDoor", "m_eSpawnPosition");
}

void GCBaseDoor::SetSpawnPosition(FuncDoorSpawnPos_t value) {
    SetSchemaValue(m_ptr, "CBaseDoor", "m_eSpawnPosition", false, value);
}

float GCBaseDoor::GetBlockDamage() const {
    return GetSchemaValue<float>(m_ptr, "CBaseDoor", "m_flBlockDamage");
}

void GCBaseDoor::SetBlockDamage(float value) {
    SetSchemaValue(m_ptr, "CBaseDoor", "m_flBlockDamage", false, value);
}

CUtlSymbolLarge GCBaseDoor::GetNoiseMoving() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBaseDoor", "m_NoiseMoving");
}

void GCBaseDoor::SetNoiseMoving(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBaseDoor", "m_NoiseMoving", false, value);
}

CUtlSymbolLarge GCBaseDoor::GetNoiseArrived() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBaseDoor", "m_NoiseArrived");
}

void GCBaseDoor::SetNoiseArrived(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBaseDoor", "m_NoiseArrived", false, value);
}

CUtlSymbolLarge GCBaseDoor::GetNoiseMovingClosed() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBaseDoor", "m_NoiseMovingClosed");
}

void GCBaseDoor::SetNoiseMovingClosed(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBaseDoor", "m_NoiseMovingClosed", false, value);
}

CUtlSymbolLarge GCBaseDoor::GetNoiseArrivedClosed() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBaseDoor", "m_NoiseArrivedClosed");
}

void GCBaseDoor::SetNoiseArrivedClosed(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBaseDoor", "m_NoiseArrivedClosed", false, value);
}

CUtlSymbolLarge GCBaseDoor::GetChainTarget() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBaseDoor", "m_ChainTarget");
}

void GCBaseDoor::SetChainTarget(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBaseDoor", "m_ChainTarget", false, value);
}

GCEntityIOOutput GCBaseDoor::GetOnBlockedClosing() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseDoor", "m_OnBlockedClosing");
}

void GCBaseDoor::SetOnBlockedClosing(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseDoor", "m_OnBlockedClosing", false, value);
}

GCEntityIOOutput GCBaseDoor::GetOnBlockedOpening() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseDoor", "m_OnBlockedOpening");
}

void GCBaseDoor::SetOnBlockedOpening(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseDoor", "m_OnBlockedOpening", false, value);
}

GCEntityIOOutput GCBaseDoor::GetOnUnblockedClosing() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseDoor", "m_OnUnblockedClosing");
}

void GCBaseDoor::SetOnUnblockedClosing(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseDoor", "m_OnUnblockedClosing", false, value);
}

GCEntityIOOutput GCBaseDoor::GetOnUnblockedOpening() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseDoor", "m_OnUnblockedOpening");
}

void GCBaseDoor::SetOnUnblockedOpening(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseDoor", "m_OnUnblockedOpening", false, value);
}

GCEntityIOOutput GCBaseDoor::GetOnFullyClosed() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseDoor", "m_OnFullyClosed");
}

void GCBaseDoor::SetOnFullyClosed(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseDoor", "m_OnFullyClosed", false, value);
}

GCEntityIOOutput GCBaseDoor::GetOnFullyOpen() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseDoor", "m_OnFullyOpen");
}

void GCBaseDoor::SetOnFullyOpen(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseDoor", "m_OnFullyOpen", false, value);
}

GCEntityIOOutput GCBaseDoor::GetOnClose() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseDoor", "m_OnClose");
}

void GCBaseDoor::SetOnClose(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseDoor", "m_OnClose", false, value);
}

GCEntityIOOutput GCBaseDoor::GetOnOpen() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseDoor", "m_OnOpen");
}

void GCBaseDoor::SetOnOpen(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseDoor", "m_OnOpen", false, value);
}

GCEntityIOOutput GCBaseDoor::GetOnLockedUse() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CBaseDoor", "m_OnLockedUse");
}

void GCBaseDoor::SetOnLockedUse(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CBaseDoor", "m_OnLockedUse", false, value);
}

bool GCBaseDoor::GetLoopMoveSound() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseDoor", "m_bLoopMoveSound");
}

void GCBaseDoor::SetLoopMoveSound(bool value) {
    SetSchemaValue(m_ptr, "CBaseDoor", "m_bLoopMoveSound", false, value);
}

bool GCBaseDoor::GetCreateNavObstacle() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseDoor", "m_bCreateNavObstacle");
}

void GCBaseDoor::SetCreateNavObstacle(bool value) {
    SetSchemaValue(m_ptr, "CBaseDoor", "m_bCreateNavObstacle", false, value);
}

bool GCBaseDoor::GetIsChaining() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseDoor", "m_isChaining");
}

void GCBaseDoor::SetIsChaining(bool value) {
    SetSchemaValue(m_ptr, "CBaseDoor", "m_isChaining", false, value);
}

bool GCBaseDoor::GetIsUsable() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseDoor", "m_bIsUsable");
}

void GCBaseDoor::SetIsUsable(bool value) {
    SetSchemaValue(m_ptr, "CBaseDoor", "m_bIsUsable", false, value);
}

std::string GCBaseDoor::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBaseDoor::IsValid() {
    return (m_ptr != nullptr);
}

GCLogicLineToEntity::GCLogicLineToEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCLogicLineToEntity::GCLogicLineToEntity(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCLogicLineToEntity::GetSourceName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CLogicLineToEntity", "m_SourceName");
}

void GCLogicLineToEntity::SetSourceName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CLogicLineToEntity", "m_SourceName", false, value);
}

GCBaseEntity GCLogicLineToEntity::GetStartEntity() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CLogicLineToEntity", "m_StartEntity"));
    return value;
}

void GCLogicLineToEntity::SetStartEntity(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'StartEntity' is not possible.\n");
}

GCBaseEntity GCLogicLineToEntity::GetEndEntity() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CLogicLineToEntity", "m_EndEntity"));
    return value;
}

void GCLogicLineToEntity::SetEndEntity(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'EndEntity' is not possible.\n");
}

std::string GCLogicLineToEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCLogicLineToEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCRetakeGameRules::GCRetakeGameRules(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCRetakeGameRules::GCRetakeGameRules(void *ptr) {
    m_ptr = ptr;
}

int32_t GCRetakeGameRules::GetMatchSeed() const {
    return GetSchemaValue<int32_t>(m_ptr, "CRetakeGameRules", "m_nMatchSeed");
}

void GCRetakeGameRules::SetMatchSeed(int32_t value) {
    SetSchemaValue(m_ptr, "CRetakeGameRules", "m_nMatchSeed", false, value);
}

bool GCRetakeGameRules::GetBlockersPresent() const {
    return GetSchemaValue<bool>(m_ptr, "CRetakeGameRules", "m_bBlockersPresent");
}

void GCRetakeGameRules::SetBlockersPresent(bool value) {
    SetSchemaValue(m_ptr, "CRetakeGameRules", "m_bBlockersPresent", false, value);
}

bool GCRetakeGameRules::GetRoundInProgress() const {
    return GetSchemaValue<bool>(m_ptr, "CRetakeGameRules", "m_bRoundInProgress");
}

void GCRetakeGameRules::SetRoundInProgress(bool value) {
    SetSchemaValue(m_ptr, "CRetakeGameRules", "m_bRoundInProgress", false, value);
}

int32_t GCRetakeGameRules::GetFirstSecondHalfRound() const {
    return GetSchemaValue<int32_t>(m_ptr, "CRetakeGameRules", "m_iFirstSecondHalfRound");
}

void GCRetakeGameRules::SetFirstSecondHalfRound(int32_t value) {
    SetSchemaValue(m_ptr, "CRetakeGameRules", "m_iFirstSecondHalfRound", false, value);
}

int32_t GCRetakeGameRules::GetBombSite() const {
    return GetSchemaValue<int32_t>(m_ptr, "CRetakeGameRules", "m_iBombSite");
}

void GCRetakeGameRules::SetBombSite(int32_t value) {
    SetSchemaValue(m_ptr, "CRetakeGameRules", "m_iBombSite", false, value);
}

std::string GCRetakeGameRules::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCRetakeGameRules::IsValid() {
    return (m_ptr != nullptr);
}

GCCSGameRulesProxy::GCCSGameRulesProxy(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSGameRulesProxy::GCCSGameRulesProxy(void *ptr) {
    m_ptr = ptr;
}

GCCSGameRules GCCSGameRulesProxy::GetGameRules() const {
    GCCSGameRules value(GetSchemaValuePtr<void>(m_ptr, "CCSGameRulesProxy", "m_pGameRules"));
    return value;
}

void GCCSGameRulesProxy::SetGameRules(GCCSGameRules* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'GameRules' is not possible.\n");
}

std::string GCCSGameRulesProxy::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSGameRulesProxy::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvCubemapBox::GCEnvCubemapBox(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvCubemapBox::GCEnvCubemapBox(void *ptr) {
    m_ptr = ptr;
}

std::string GCEnvCubemapBox::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvCubemapBox::IsValid() {
    return (m_ptr != nullptr);
}

GCCSPlayer_DamageReactServices::GCCSPlayer_DamageReactServices(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSPlayer_DamageReactServices::GCCSPlayer_DamageReactServices(void *ptr) {
    m_ptr = ptr;
}

std::string GCCSPlayer_DamageReactServices::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSPlayer_DamageReactServices::IsValid() {
    return (m_ptr != nullptr);
}

GServerAuthoritativeWeaponSlot_t::GServerAuthoritativeWeaponSlot_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GServerAuthoritativeWeaponSlot_t::GServerAuthoritativeWeaponSlot_t(void *ptr) {
    m_ptr = ptr;
}

uint16_t GServerAuthoritativeWeaponSlot_t::GetClass() const {
    return GetSchemaValue<uint16_t>(m_ptr, "ServerAuthoritativeWeaponSlot_t", "unClass");
}

void GServerAuthoritativeWeaponSlot_t::SetClass(uint16_t value) {
    SetSchemaValue(m_ptr, "ServerAuthoritativeWeaponSlot_t", "unClass", true, value);
}

uint16_t GServerAuthoritativeWeaponSlot_t::GetSlot() const {
    return GetSchemaValue<uint16_t>(m_ptr, "ServerAuthoritativeWeaponSlot_t", "unSlot");
}

void GServerAuthoritativeWeaponSlot_t::SetSlot(uint16_t value) {
    SetSchemaValue(m_ptr, "ServerAuthoritativeWeaponSlot_t", "unSlot", true, value);
}

uint16_t GServerAuthoritativeWeaponSlot_t::GetItemDefIdx() const {
    return GetSchemaValue<uint16_t>(m_ptr, "ServerAuthoritativeWeaponSlot_t", "unItemDefIdx");
}

void GServerAuthoritativeWeaponSlot_t::SetItemDefIdx(uint16_t value) {
    SetSchemaValue(m_ptr, "ServerAuthoritativeWeaponSlot_t", "unItemDefIdx", true, value);
}

std::string GServerAuthoritativeWeaponSlot_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GServerAuthoritativeWeaponSlot_t::IsValid() {
    return (m_ptr != nullptr);
}

GCCSGameRules::GCCSGameRules(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSGameRules::GCCSGameRules(void *ptr) {
    m_ptr = ptr;
}

bool GCCSGameRules::GetFreezePeriod() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bFreezePeriod");
}

void GCCSGameRules::SetFreezePeriod(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bFreezePeriod", false, value);
}

bool GCCSGameRules::GetWarmupPeriod() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bWarmupPeriod");
}

void GCCSGameRules::SetWarmupPeriod(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bWarmupPeriod", false, value);
}

bool GCCSGameRules::GetServerPaused() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bServerPaused");
}

void GCCSGameRules::SetServerPaused(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bServerPaused", false, value);
}

bool GCCSGameRules::GetTerroristTimeOutActive() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bTerroristTimeOutActive");
}

void GCCSGameRules::SetTerroristTimeOutActive(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bTerroristTimeOutActive", false, value);
}

bool GCCSGameRules::GetCTTimeOutActive() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bCTTimeOutActive");
}

void GCCSGameRules::SetCTTimeOutActive(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bCTTimeOutActive", false, value);
}

float GCCSGameRules::GetTerroristTimeOutRemaining() const {
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_flTerroristTimeOutRemaining");
}

void GCCSGameRules::SetTerroristTimeOutRemaining(float value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_flTerroristTimeOutRemaining", false, value);
}

float GCCSGameRules::GetCTTimeOutRemaining() const {
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_flCTTimeOutRemaining");
}

void GCCSGameRules::SetCTTimeOutRemaining(float value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_flCTTimeOutRemaining", false, value);
}

int32_t GCCSGameRules::GetTerroristTimeOuts() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_nTerroristTimeOuts");
}

void GCCSGameRules::SetTerroristTimeOuts(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nTerroristTimeOuts", false, value);
}

int32_t GCCSGameRules::GetCTTimeOuts() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_nCTTimeOuts");
}

void GCCSGameRules::SetCTTimeOuts(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nCTTimeOuts", false, value);
}

bool GCCSGameRules::GetTechnicalTimeOut() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bTechnicalTimeOut");
}

void GCCSGameRules::SetTechnicalTimeOut(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bTechnicalTimeOut", false, value);
}

bool GCCSGameRules::GetMatchWaitingForResume() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bMatchWaitingForResume");
}

void GCCSGameRules::SetMatchWaitingForResume(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bMatchWaitingForResume", false, value);
}

int32_t GCCSGameRules::GetRoundTime() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iRoundTime");
}

void GCCSGameRules::SetRoundTime(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iRoundTime", false, value);
}

float GCCSGameRules::GetMatchStartTime() const {
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_fMatchStartTime");
}

void GCCSGameRules::SetMatchStartTime(float value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_fMatchStartTime", false, value);
}

bool GCCSGameRules::GetGameRestart() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bGameRestart");
}

void GCCSGameRules::SetGameRestart(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bGameRestart", false, value);
}

float GCCSGameRules::GetGameStartTime() const {
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_flGameStartTime");
}

void GCCSGameRules::SetGameStartTime(float value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_flGameStartTime", false, value);
}

float GCCSGameRules::GetTimeUntilNextPhaseStarts() const {
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_timeUntilNextPhaseStarts");
}

void GCCSGameRules::SetTimeUntilNextPhaseStarts(float value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_timeUntilNextPhaseStarts", false, value);
}

int32_t GCCSGameRules::GetGamePhase() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_gamePhase");
}

void GCCSGameRules::SetGamePhase(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_gamePhase", false, value);
}

int32_t GCCSGameRules::GetTotalRoundsPlayed() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_totalRoundsPlayed");
}

void GCCSGameRules::SetTotalRoundsPlayed(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_totalRoundsPlayed", false, value);
}

int32_t GCCSGameRules::GetRoundsPlayedThisPhase() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_nRoundsPlayedThisPhase");
}

void GCCSGameRules::SetRoundsPlayedThisPhase(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nRoundsPlayedThisPhase", false, value);
}

int32_t GCCSGameRules::GetOvertimePlaying() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_nOvertimePlaying");
}

void GCCSGameRules::SetOvertimePlaying(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nOvertimePlaying", false, value);
}

int32_t GCCSGameRules::GetHostagesRemaining() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iHostagesRemaining");
}

void GCCSGameRules::SetHostagesRemaining(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iHostagesRemaining", false, value);
}

bool GCCSGameRules::GetAnyHostageReached() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bAnyHostageReached");
}

void GCCSGameRules::SetAnyHostageReached(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bAnyHostageReached", false, value);
}

bool GCCSGameRules::GetMapHasBombTarget() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bMapHasBombTarget");
}

void GCCSGameRules::SetMapHasBombTarget(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bMapHasBombTarget", false, value);
}

bool GCCSGameRules::GetMapHasRescueZone() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bMapHasRescueZone");
}

void GCCSGameRules::SetMapHasRescueZone(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bMapHasRescueZone", false, value);
}

bool GCCSGameRules::GetMapHasBuyZone() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bMapHasBuyZone");
}

void GCCSGameRules::SetMapHasBuyZone(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bMapHasBuyZone", false, value);
}

bool GCCSGameRules::GetIsQueuedMatchmaking() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bIsQueuedMatchmaking");
}

void GCCSGameRules::SetIsQueuedMatchmaking(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bIsQueuedMatchmaking", false, value);
}

int32_t GCCSGameRules::GetQueuedMatchmakingMode() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_nQueuedMatchmakingMode");
}

void GCCSGameRules::SetQueuedMatchmakingMode(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nQueuedMatchmakingMode", false, value);
}

bool GCCSGameRules::GetIsValveDS() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bIsValveDS");
}

void GCCSGameRules::SetIsValveDS(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bIsValveDS", false, value);
}

bool GCCSGameRules::GetLogoMap() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bLogoMap");
}

void GCCSGameRules::SetLogoMap(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bLogoMap", false, value);
}

bool GCCSGameRules::GetPlayAllStepSoundsOnServer() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bPlayAllStepSoundsOnServer");
}

void GCCSGameRules::SetPlayAllStepSoundsOnServer(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bPlayAllStepSoundsOnServer", false, value);
}

int32_t GCCSGameRules::GetSpectatorSlotCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iSpectatorSlotCount");
}

void GCCSGameRules::SetSpectatorSlotCount(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iSpectatorSlotCount", false, value);
}

int32_t GCCSGameRules::GetMatchDevice() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_MatchDevice");
}

void GCCSGameRules::SetMatchDevice(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_MatchDevice", false, value);
}

bool GCCSGameRules::GetHasMatchStarted() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bHasMatchStarted");
}

void GCCSGameRules::SetHasMatchStarted(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bHasMatchStarted", false, value);
}

int32_t GCCSGameRules::GetNextMapInMapgroup() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_nNextMapInMapgroup");
}

void GCCSGameRules::SetNextMapInMapgroup(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nNextMapInMapgroup", false, value);
}

std::string GCCSGameRules::GetTournamentEventName() const {
    return GetSchemaValuePtr<char>(m_ptr, "CCSGameRules", "m_szTournamentEventName");
}

void GCCSGameRules::SetTournamentEventName(std::string value) {
    WriteSchemaPtrValue(m_ptr, "CCSGameRules", "m_szTournamentEventName", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 512);
}

std::string GCCSGameRules::GetTournamentEventStage() const {
    return GetSchemaValuePtr<char>(m_ptr, "CCSGameRules", "m_szTournamentEventStage");
}

void GCCSGameRules::SetTournamentEventStage(std::string value) {
    WriteSchemaPtrValue(m_ptr, "CCSGameRules", "m_szTournamentEventStage", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 512);
}

std::string GCCSGameRules::GetMatchStatTxt() const {
    return GetSchemaValuePtr<char>(m_ptr, "CCSGameRules", "m_szMatchStatTxt");
}

void GCCSGameRules::SetMatchStatTxt(std::string value) {
    WriteSchemaPtrValue(m_ptr, "CCSGameRules", "m_szMatchStatTxt", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 512);
}

std::string GCCSGameRules::GetTournamentPredictionsTxt() const {
    return GetSchemaValuePtr<char>(m_ptr, "CCSGameRules", "m_szTournamentPredictionsTxt");
}

void GCCSGameRules::SetTournamentPredictionsTxt(std::string value) {
    WriteSchemaPtrValue(m_ptr, "CCSGameRules", "m_szTournamentPredictionsTxt", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 512);
}

int32_t GCCSGameRules::GetTournamentPredictionsPct() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_nTournamentPredictionsPct");
}

void GCCSGameRules::SetTournamentPredictionsPct(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nTournamentPredictionsPct", false, value);
}

bool GCCSGameRules::GetIsDroppingItems() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bIsDroppingItems");
}

void GCCSGameRules::SetIsDroppingItems(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bIsDroppingItems", false, value);
}

bool GCCSGameRules::GetIsQuestEligible() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bIsQuestEligible");
}

void GCCSGameRules::SetIsQuestEligible(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bIsQuestEligible", false, value);
}

bool GCCSGameRules::GetIsHltvActive() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bIsHltvActive");
}

void GCCSGameRules::SetIsHltvActive(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bIsHltvActive", false, value);
}

std::vector<uint16_t> GCCSGameRules::GetProhibitedItemIndices() const {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "CCSGameRules", "m_arrProhibitedItemIndices"); std::vector<uint16_t> ret; for(int i = 0; i < 100; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCCSGameRules::SetProhibitedItemIndices(std::vector<uint16_t> value) {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "CCSGameRules", "m_arrProhibitedItemIndices"); for(int i = 0; i < 100; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CCSGameRules", "m_arrProhibitedItemIndices", false, outValue);
}

std::vector<uint32_t> GCCSGameRules::GetTournamentActiveCasterAccounts() const {
    uint32_t* outValue = GetSchemaValue<uint32_t*>(m_ptr, "CCSGameRules", "m_arrTournamentActiveCasterAccounts"); std::vector<uint32_t> ret; for(int i = 0; i < 4; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCCSGameRules::SetTournamentActiveCasterAccounts(std::vector<uint32_t> value) {
    uint32_t* outValue = GetSchemaValue<uint32_t*>(m_ptr, "CCSGameRules", "m_arrTournamentActiveCasterAccounts"); for(int i = 0; i < 4; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CCSGameRules", "m_arrTournamentActiveCasterAccounts", false, outValue);
}

int32_t GCCSGameRules::GetNumBestOfMaps() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_numBestOfMaps");
}

void GCCSGameRules::SetNumBestOfMaps(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_numBestOfMaps", false, value);
}

int32_t GCCSGameRules::GetHalloweenMaskListSeed() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_nHalloweenMaskListSeed");
}

void GCCSGameRules::SetHalloweenMaskListSeed(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nHalloweenMaskListSeed", false, value);
}

bool GCCSGameRules::GetBombDropped() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bBombDropped");
}

void GCCSGameRules::SetBombDropped(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bBombDropped", false, value);
}

bool GCCSGameRules::GetBombPlanted() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bBombPlanted");
}

void GCCSGameRules::SetBombPlanted(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bBombPlanted", false, value);
}

int32_t GCCSGameRules::GetRoundWinStatus() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iRoundWinStatus");
}

void GCCSGameRules::SetRoundWinStatus(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iRoundWinStatus", false, value);
}

int32_t GCCSGameRules::GetRoundWinReason() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_eRoundWinReason");
}

void GCCSGameRules::SetRoundWinReason(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_eRoundWinReason", false, value);
}

bool GCCSGameRules::GetTCantBuy() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bTCantBuy");
}

void GCCSGameRules::SetTCantBuy(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bTCantBuy", false, value);
}

bool GCCSGameRules::GetCTCantBuy() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bCTCantBuy");
}

void GCCSGameRules::SetCTCantBuy(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bCTCantBuy", false, value);
}

std::vector<int32_t> GCCSGameRules::GetMatchStats_RoundResults() const {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CCSGameRules", "m_iMatchStats_RoundResults"); std::vector<int32_t> ret; for(int i = 0; i < 30; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCCSGameRules::SetMatchStats_RoundResults(std::vector<int32_t> value) {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CCSGameRules", "m_iMatchStats_RoundResults"); for(int i = 0; i < 30; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CCSGameRules", "m_iMatchStats_RoundResults", false, outValue);
}

std::vector<int32_t> GCCSGameRules::GetMatchStats_PlayersAlive_CT() const {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CCSGameRules", "m_iMatchStats_PlayersAlive_CT"); std::vector<int32_t> ret; for(int i = 0; i < 30; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCCSGameRules::SetMatchStats_PlayersAlive_CT(std::vector<int32_t> value) {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CCSGameRules", "m_iMatchStats_PlayersAlive_CT"); for(int i = 0; i < 30; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CCSGameRules", "m_iMatchStats_PlayersAlive_CT", false, outValue);
}

std::vector<int32_t> GCCSGameRules::GetMatchStats_PlayersAlive_T() const {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CCSGameRules", "m_iMatchStats_PlayersAlive_T"); std::vector<int32_t> ret; for(int i = 0; i < 30; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCCSGameRules::SetMatchStats_PlayersAlive_T(std::vector<int32_t> value) {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CCSGameRules", "m_iMatchStats_PlayersAlive_T"); for(int i = 0; i < 30; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CCSGameRules", "m_iMatchStats_PlayersAlive_T", false, outValue);
}

std::vector<float> GCCSGameRules::GetTeamRespawnWaveTimes() const {
    float* outValue = GetSchemaValue<float*>(m_ptr, "CCSGameRules", "m_TeamRespawnWaveTimes"); std::vector<float> ret; for(int i = 0; i < 32; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCCSGameRules::SetTeamRespawnWaveTimes(std::vector<float> value) {
    float* outValue = GetSchemaValue<float*>(m_ptr, "CCSGameRules", "m_TeamRespawnWaveTimes"); for(int i = 0; i < 32; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CCSGameRules", "m_TeamRespawnWaveTimes", false, outValue);
}

int32_t GCCSGameRules::GetServerQuestID() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_nServerQuestID");
}

void GCCSGameRules::SetServerQuestID(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nServerQuestID", false, value);
}

Vector GCCSGameRules::GetMinimapMins() const {
    return GetSchemaValue<Vector>(m_ptr, "CCSGameRules", "m_vMinimapMins");
}

void GCCSGameRules::SetMinimapMins(Vector value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_vMinimapMins", false, value);
}

Vector GCCSGameRules::GetMinimapMaxs() const {
    return GetSchemaValue<Vector>(m_ptr, "CCSGameRules", "m_vMinimapMaxs");
}

void GCCSGameRules::SetMinimapMaxs(Vector value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_vMinimapMaxs", false, value);
}

std::vector<float> GCCSGameRules::GetMinimapVerticalSectionHeights() const {
    float* outValue = GetSchemaValue<float*>(m_ptr, "CCSGameRules", "m_MinimapVerticalSectionHeights"); std::vector<float> ret; for(int i = 0; i < 8; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCCSGameRules::SetMinimapVerticalSectionHeights(std::vector<float> value) {
    float* outValue = GetSchemaValue<float*>(m_ptr, "CCSGameRules", "m_MinimapVerticalSectionHeights"); for(int i = 0; i < 8; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CCSGameRules", "m_MinimapVerticalSectionHeights", false, outValue);
}

bool GCCSGameRules::GetSpawnedTerrorHuntHeavy() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bSpawnedTerrorHuntHeavy");
}

void GCCSGameRules::SetSpawnedTerrorHuntHeavy(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bSpawnedTerrorHuntHeavy", false, value);
}

std::vector<int32_t> GCCSGameRules::GetEndMatchMapGroupVoteTypes() const {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CCSGameRules", "m_nEndMatchMapGroupVoteTypes"); std::vector<int32_t> ret; for(int i = 0; i < 10; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCCSGameRules::SetEndMatchMapGroupVoteTypes(std::vector<int32_t> value) {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CCSGameRules", "m_nEndMatchMapGroupVoteTypes"); for(int i = 0; i < 10; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CCSGameRules", "m_nEndMatchMapGroupVoteTypes", false, outValue);
}

std::vector<int32_t> GCCSGameRules::GetEndMatchMapGroupVoteOptions() const {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CCSGameRules", "m_nEndMatchMapGroupVoteOptions"); std::vector<int32_t> ret; for(int i = 0; i < 10; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCCSGameRules::SetEndMatchMapGroupVoteOptions(std::vector<int32_t> value) {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CCSGameRules", "m_nEndMatchMapGroupVoteOptions"); for(int i = 0; i < 10; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CCSGameRules", "m_nEndMatchMapGroupVoteOptions", false, outValue);
}

int32_t GCCSGameRules::GetEndMatchMapVoteWinner() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_nEndMatchMapVoteWinner");
}

void GCCSGameRules::SetEndMatchMapVoteWinner(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nEndMatchMapVoteWinner", false, value);
}

int32_t GCCSGameRules::GetNumConsecutiveCTLoses() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iNumConsecutiveCTLoses");
}

void GCCSGameRules::SetNumConsecutiveCTLoses(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iNumConsecutiveCTLoses", false, value);
}

int32_t GCCSGameRules::GetNumConsecutiveTerroristLoses() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iNumConsecutiveTerroristLoses");
}

void GCCSGameRules::SetNumConsecutiveTerroristLoses(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iNumConsecutiveTerroristLoses", false, value);
}

bool GCCSGameRules::GetHasHostageBeenTouched() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bHasHostageBeenTouched");
}

void GCCSGameRules::SetHasHostageBeenTouched(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bHasHostageBeenTouched", false, value);
}

bool GCCSGameRules::GetLevelInitialized() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bLevelInitialized");
}

void GCCSGameRules::SetLevelInitialized(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bLevelInitialized", false, value);
}

int32_t GCCSGameRules::GetTotalRoundsPlayed1() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iTotalRoundsPlayed");
}

void GCCSGameRules::SetTotalRoundsPlayed1(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iTotalRoundsPlayed", false, value);
}

int32_t GCCSGameRules::GetUnBalancedRounds() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iUnBalancedRounds");
}

void GCCSGameRules::SetUnBalancedRounds(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iUnBalancedRounds", false, value);
}

bool GCCSGameRules::GetEndMatchOnRoundReset() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_endMatchOnRoundReset");
}

void GCCSGameRules::SetEndMatchOnRoundReset(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_endMatchOnRoundReset", false, value);
}

bool GCCSGameRules::GetEndMatchOnThink() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_endMatchOnThink");
}

void GCCSGameRules::SetEndMatchOnThink(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_endMatchOnThink", false, value);
}

int32_t GCCSGameRules::GetFreezeTime() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iFreezeTime");
}

void GCCSGameRules::SetFreezeTime(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iFreezeTime", false, value);
}

int32_t GCCSGameRules::GetNumTerrorist() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iNumTerrorist");
}

void GCCSGameRules::SetNumTerrorist(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iNumTerrorist", false, value);
}

int32_t GCCSGameRules::GetNumCT() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iNumCT");
}

void GCCSGameRules::SetNumCT(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iNumCT", false, value);
}

int32_t GCCSGameRules::GetNumSpawnableTerrorist() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iNumSpawnableTerrorist");
}

void GCCSGameRules::SetNumSpawnableTerrorist(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iNumSpawnableTerrorist", false, value);
}

int32_t GCCSGameRules::GetNumSpawnableCT() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iNumSpawnableCT");
}

void GCCSGameRules::SetNumSpawnableCT(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iNumSpawnableCT", false, value);
}

std::vector<int32> GCCSGameRules::GetSelectedHostageSpawnIndices() const {
    CUtlVector<int32>* vec = GetSchemaValue<CUtlVector<int32>*>(m_ptr, "CCSGameRules", "m_arrSelectedHostageSpawnIndices"); std::vector<int32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCCSGameRules::SetSelectedHostageSpawnIndices(std::vector<int32> value) {
    SetSchemaValueCUtlVector<int32>(m_ptr, "CCSGameRules", "m_arrSelectedHostageSpawnIndices", false, value);
}

int32_t GCCSGameRules::GetSpawnPointsRandomSeed() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_nSpawnPointsRandomSeed");
}

void GCCSGameRules::SetSpawnPointsRandomSeed(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nSpawnPointsRandomSeed", false, value);
}

bool GCCSGameRules::GetFirstConnected() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bFirstConnected");
}

void GCCSGameRules::SetFirstConnected(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bFirstConnected", false, value);
}

bool GCCSGameRules::GetCompleteReset() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bCompleteReset");
}

void GCCSGameRules::SetCompleteReset(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bCompleteReset", false, value);
}

bool GCCSGameRules::GetPickNewTeamsOnReset() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bPickNewTeamsOnReset");
}

void GCCSGameRules::SetPickNewTeamsOnReset(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bPickNewTeamsOnReset", false, value);
}

bool GCCSGameRules::GetScrambleTeamsOnRestart() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bScrambleTeamsOnRestart");
}

void GCCSGameRules::SetScrambleTeamsOnRestart(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bScrambleTeamsOnRestart", false, value);
}

bool GCCSGameRules::GetSwapTeamsOnRestart() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bSwapTeamsOnRestart");
}

void GCCSGameRules::SetSwapTeamsOnRestart(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bSwapTeamsOnRestart", false, value);
}

std::vector<int32> GCCSGameRules::GetEndMatchTiedVotes() const {
    CUtlVector<int32>* vec = GetSchemaValue<CUtlVector<int32>*>(m_ptr, "CCSGameRules", "m_nEndMatchTiedVotes"); std::vector<int32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCCSGameRules::SetEndMatchTiedVotes(std::vector<int32> value) {
    SetSchemaValueCUtlVector<int32>(m_ptr, "CCSGameRules", "m_nEndMatchTiedVotes", false, value);
}

bool GCCSGameRules::GetNeedToAskPlayersForContinueVote() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bNeedToAskPlayersForContinueVote");
}

void GCCSGameRules::SetNeedToAskPlayersForContinueVote(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bNeedToAskPlayersForContinueVote", false, value);
}

uint32_t GCCSGameRules::GetNumQueuedMatchmakingAccounts() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CCSGameRules", "m_numQueuedMatchmakingAccounts");
}

void GCCSGameRules::SetNumQueuedMatchmakingAccounts(uint32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_numQueuedMatchmakingAccounts", false, value);
}

float GCCSGameRules::GetAvgPlayerRank() const {
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_fAvgPlayerRank");
}

void GCCSGameRules::SetAvgPlayerRank(float value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_fAvgPlayerRank", false, value);
}

std::string GCCSGameRules::GetQueuedMatchmakingReservationString() const {
    return GetSchemaValuePtr<char>(m_ptr, "CCSGameRules", "m_pQueuedMatchmakingReservationString");
}

void GCCSGameRules::SetQueuedMatchmakingReservationString(std::string value) {
    WriteSchemaPtrValue(m_ptr, "CCSGameRules", "m_pQueuedMatchmakingReservationString", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), value.size());
}

uint32_t GCCSGameRules::GetNumTotalTournamentDrops() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CCSGameRules", "m_numTotalTournamentDrops");
}

void GCCSGameRules::SetNumTotalTournamentDrops(uint32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_numTotalTournamentDrops", false, value);
}

uint32_t GCCSGameRules::GetNumSpectatorsCountMax() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CCSGameRules", "m_numSpectatorsCountMax");
}

void GCCSGameRules::SetNumSpectatorsCountMax(uint32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_numSpectatorsCountMax", false, value);
}

uint32_t GCCSGameRules::GetNumSpectatorsCountMaxTV() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CCSGameRules", "m_numSpectatorsCountMaxTV");
}

void GCCSGameRules::SetNumSpectatorsCountMaxTV(uint32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_numSpectatorsCountMaxTV", false, value);
}

uint32_t GCCSGameRules::GetNumSpectatorsCountMaxLnk() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CCSGameRules", "m_numSpectatorsCountMaxLnk");
}

void GCCSGameRules::SetNumSpectatorsCountMaxLnk(uint32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_numSpectatorsCountMaxLnk", false, value);
}

bool GCCSGameRules::GetForceTeamChangeSilent() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bForceTeamChangeSilent");
}

void GCCSGameRules::SetForceTeamChangeSilent(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bForceTeamChangeSilent", false, value);
}

bool GCCSGameRules::GetLoadingRoundBackupData() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bLoadingRoundBackupData");
}

void GCCSGameRules::SetLoadingRoundBackupData(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bLoadingRoundBackupData", false, value);
}

int32_t GCCSGameRules::GetMatchInfoShowType() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_nMatchInfoShowType");
}

void GCCSGameRules::SetMatchInfoShowType(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nMatchInfoShowType", false, value);
}

float GCCSGameRules::GetMatchInfoDecidedTime() const {
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_flMatchInfoDecidedTime");
}

void GCCSGameRules::SetMatchInfoDecidedTime(float value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_flMatchInfoDecidedTime", false, value);
}

int32_t GCCSGameRules::GetMTeamDMLastWinningTeamNumber() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "mTeamDMLastWinningTeamNumber");
}

void GCCSGameRules::SetMTeamDMLastWinningTeamNumber(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "mTeamDMLastWinningTeamNumber", false, value);
}

float GCCSGameRules::GetMTeamDMLastThinkTime() const {
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "mTeamDMLastThinkTime");
}

void GCCSGameRules::SetMTeamDMLastThinkTime(float value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "mTeamDMLastThinkTime", false, value);
}

float GCCSGameRules::GetTeamDMLastAnnouncementTime() const {
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_flTeamDMLastAnnouncementTime");
}

void GCCSGameRules::SetTeamDMLastAnnouncementTime(float value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_flTeamDMLastAnnouncementTime", false, value);
}

int32_t GCCSGameRules::GetAccountTerrorist() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iAccountTerrorist");
}

void GCCSGameRules::SetAccountTerrorist(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iAccountTerrorist", false, value);
}

int32_t GCCSGameRules::GetAccountCT() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iAccountCT");
}

void GCCSGameRules::SetAccountCT(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iAccountCT", false, value);
}

int32_t GCCSGameRules::GetSpawnPointCount_Terrorist() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iSpawnPointCount_Terrorist");
}

void GCCSGameRules::SetSpawnPointCount_Terrorist(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iSpawnPointCount_Terrorist", false, value);
}

int32_t GCCSGameRules::GetSpawnPointCount_CT() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iSpawnPointCount_CT");
}

void GCCSGameRules::SetSpawnPointCount_CT(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iSpawnPointCount_CT", false, value);
}

int32_t GCCSGameRules::GetMaxNumTerrorists() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iMaxNumTerrorists");
}

void GCCSGameRules::SetMaxNumTerrorists(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iMaxNumTerrorists", false, value);
}

int32_t GCCSGameRules::GetMaxNumCTs() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iMaxNumCTs");
}

void GCCSGameRules::SetMaxNumCTs(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iMaxNumCTs", false, value);
}

int32_t GCCSGameRules::GetLoserBonusMostRecentTeam() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iLoserBonusMostRecentTeam");
}

void GCCSGameRules::SetLoserBonusMostRecentTeam(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iLoserBonusMostRecentTeam", false, value);
}

float GCCSGameRules::GetTmNextPeriodicThink() const {
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_tmNextPeriodicThink");
}

void GCCSGameRules::SetTmNextPeriodicThink(float value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_tmNextPeriodicThink", false, value);
}

bool GCCSGameRules::GetVoiceWonMatchBragFired() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bVoiceWonMatchBragFired");
}

void GCCSGameRules::SetVoiceWonMatchBragFired(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bVoiceWonMatchBragFired", false, value);
}

float GCCSGameRules::GetWarmupNextChatNoticeTime() const {
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_fWarmupNextChatNoticeTime");
}

void GCCSGameRules::SetWarmupNextChatNoticeTime(float value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_fWarmupNextChatNoticeTime", false, value);
}

int32_t GCCSGameRules::GetHostagesRescued() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iHostagesRescued");
}

void GCCSGameRules::SetHostagesRescued(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iHostagesRescued", false, value);
}

int32_t GCCSGameRules::GetHostagesTouched() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iHostagesTouched");
}

void GCCSGameRules::SetHostagesTouched(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iHostagesTouched", false, value);
}

float GCCSGameRules::GetNextHostageAnnouncement() const {
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_flNextHostageAnnouncement");
}

void GCCSGameRules::SetNextHostageAnnouncement(float value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_flNextHostageAnnouncement", false, value);
}

bool GCCSGameRules::GetNoTerroristsKilled() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bNoTerroristsKilled");
}

void GCCSGameRules::SetNoTerroristsKilled(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bNoTerroristsKilled", false, value);
}

bool GCCSGameRules::GetNoCTsKilled() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bNoCTsKilled");
}

void GCCSGameRules::SetNoCTsKilled(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bNoCTsKilled", false, value);
}

bool GCCSGameRules::GetNoEnemiesKilled() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bNoEnemiesKilled");
}

void GCCSGameRules::SetNoEnemiesKilled(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bNoEnemiesKilled", false, value);
}

bool GCCSGameRules::GetCanDonateWeapons() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bCanDonateWeapons");
}

void GCCSGameRules::SetCanDonateWeapons(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bCanDonateWeapons", false, value);
}

float GCCSGameRules::GetFirstKillTime() const {
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_firstKillTime");
}

void GCCSGameRules::SetFirstKillTime(float value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_firstKillTime", false, value);
}

float GCCSGameRules::GetFirstBloodTime() const {
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_firstBloodTime");
}

void GCCSGameRules::SetFirstBloodTime(float value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_firstBloodTime", false, value);
}

bool GCCSGameRules::GetHostageWasInjured() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_hostageWasInjured");
}

void GCCSGameRules::SetHostageWasInjured(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_hostageWasInjured", false, value);
}

bool GCCSGameRules::GetHostageWasKilled() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_hostageWasKilled");
}

void GCCSGameRules::SetHostageWasKilled(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_hostageWasKilled", false, value);
}

bool GCCSGameRules::GetVoteCalled() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bVoteCalled");
}

void GCCSGameRules::SetVoteCalled(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bVoteCalled", false, value);
}

bool GCCSGameRules::GetServerVoteOnReset() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bServerVoteOnReset");
}

void GCCSGameRules::SetServerVoteOnReset(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bServerVoteOnReset", false, value);
}

float GCCSGameRules::GetVoteCheckThrottle() const {
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_flVoteCheckThrottle");
}

void GCCSGameRules::SetVoteCheckThrottle(float value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_flVoteCheckThrottle", false, value);
}

bool GCCSGameRules::GetBuyTimeEnded() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bBuyTimeEnded");
}

void GCCSGameRules::SetBuyTimeEnded(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bBuyTimeEnded", false, value);
}

int32_t GCCSGameRules::GetLastFreezeEndBeep() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_nLastFreezeEndBeep");
}

void GCCSGameRules::SetLastFreezeEndBeep(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nLastFreezeEndBeep", false, value);
}

bool GCCSGameRules::GetTargetBombed() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bTargetBombed");
}

void GCCSGameRules::SetTargetBombed(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bTargetBombed", false, value);
}

bool GCCSGameRules::GetBombDefused() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bBombDefused");
}

void GCCSGameRules::SetBombDefused(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bBombDefused", false, value);
}

bool GCCSGameRules::GetMapHasBombZone() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bMapHasBombZone");
}

void GCCSGameRules::SetMapHasBombZone(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bMapHasBombZone", false, value);
}

Vector GCCSGameRules::GetMainCTSpawnPos() const {
    return GetSchemaValue<Vector>(m_ptr, "CCSGameRules", "m_vecMainCTSpawnPos");
}

void GCCSGameRules::SetMainCTSpawnPos(Vector value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_vecMainCTSpawnPos", false, value);
}

std::vector<GSpawnPoint*> GCCSGameRules::GetCTSpawnPointsMasterList() const {
    CUtlVector<GSpawnPoint*>* vec = GetSchemaValue<CUtlVector<GSpawnPoint*>*>(m_ptr, "CCSGameRules", "m_CTSpawnPointsMasterList"); std::vector<GSpawnPoint*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCCSGameRules::SetCTSpawnPointsMasterList(std::vector<GSpawnPoint*> value) {
    SetSchemaValueCUtlVector<GSpawnPoint*>(m_ptr, "CCSGameRules", "m_CTSpawnPointsMasterList", false, value);
}

std::vector<GSpawnPoint*> GCCSGameRules::GetTerroristSpawnPointsMasterList() const {
    CUtlVector<GSpawnPoint*>* vec = GetSchemaValue<CUtlVector<GSpawnPoint*>*>(m_ptr, "CCSGameRules", "m_TerroristSpawnPointsMasterList"); std::vector<GSpawnPoint*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCCSGameRules::SetTerroristSpawnPointsMasterList(std::vector<GSpawnPoint*> value) {
    SetSchemaValueCUtlVector<GSpawnPoint*>(m_ptr, "CCSGameRules", "m_TerroristSpawnPointsMasterList", false, value);
}

bool GCCSGameRules::GetRespawningAllRespawnablePlayers() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bRespawningAllRespawnablePlayers");
}

void GCCSGameRules::SetRespawningAllRespawnablePlayers(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bRespawningAllRespawnablePlayers", false, value);
}

int32_t GCCSGameRules::GetNextCTSpawnPoint() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iNextCTSpawnPoint");
}

void GCCSGameRules::SetNextCTSpawnPoint(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iNextCTSpawnPoint", false, value);
}

float GCCSGameRules::GetCTSpawnPointUsedTime() const {
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_flCTSpawnPointUsedTime");
}

void GCCSGameRules::SetCTSpawnPointUsedTime(float value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_flCTSpawnPointUsedTime", false, value);
}

int32_t GCCSGameRules::GetNextTerroristSpawnPoint() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iNextTerroristSpawnPoint");
}

void GCCSGameRules::SetNextTerroristSpawnPoint(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iNextTerroristSpawnPoint", false, value);
}

float GCCSGameRules::GetTerroristSpawnPointUsedTime() const {
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_flTerroristSpawnPointUsedTime");
}

void GCCSGameRules::SetTerroristSpawnPointUsedTime(float value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_flTerroristSpawnPointUsedTime", false, value);
}

std::vector<GSpawnPoint*> GCCSGameRules::GetCTSpawnPoints() const {
    CUtlVector<GSpawnPoint*>* vec = GetSchemaValue<CUtlVector<GSpawnPoint*>*>(m_ptr, "CCSGameRules", "m_CTSpawnPoints"); std::vector<GSpawnPoint*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCCSGameRules::SetCTSpawnPoints(std::vector<GSpawnPoint*> value) {
    SetSchemaValueCUtlVector<GSpawnPoint*>(m_ptr, "CCSGameRules", "m_CTSpawnPoints", false, value);
}

std::vector<GSpawnPoint*> GCCSGameRules::GetTerroristSpawnPoints() const {
    CUtlVector<GSpawnPoint*>* vec = GetSchemaValue<CUtlVector<GSpawnPoint*>*>(m_ptr, "CCSGameRules", "m_TerroristSpawnPoints"); std::vector<GSpawnPoint*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCCSGameRules::SetTerroristSpawnPoints(std::vector<GSpawnPoint*> value) {
    SetSchemaValueCUtlVector<GSpawnPoint*>(m_ptr, "CCSGameRules", "m_TerroristSpawnPoints", false, value);
}

bool GCCSGameRules::GetIsUnreservedGameServer() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bIsUnreservedGameServer");
}

void GCCSGameRules::SetIsUnreservedGameServer(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bIsUnreservedGameServer", false, value);
}

float GCCSGameRules::GetAutobalanceDisplayTime() const {
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_fAutobalanceDisplayTime");
}

void GCCSGameRules::SetAutobalanceDisplayTime(float value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_fAutobalanceDisplayTime", false, value);
}

bool GCCSGameRules::GetAllowWeaponSwitch() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bAllowWeaponSwitch");
}

void GCCSGameRules::SetAllowWeaponSwitch(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bAllowWeaponSwitch", false, value);
}

bool GCCSGameRules::GetRoundTimeWarningTriggered() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bRoundTimeWarningTriggered");
}

void GCCSGameRules::SetRoundTimeWarningTriggered(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bRoundTimeWarningTriggered", false, value);
}

float GCCSGameRules::GetNextUpdateTeamClanNamesTime() const {
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_fNextUpdateTeamClanNamesTime");
}

void GCCSGameRules::SetNextUpdateTeamClanNamesTime(float value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_fNextUpdateTeamClanNamesTime", false, value);
}

float GCCSGameRules::GetAccumulatedRoundOffDamage() const {
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_fAccumulatedRoundOffDamage");
}

void GCCSGameRules::SetAccumulatedRoundOffDamage(float value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_fAccumulatedRoundOffDamage", false, value);
}

int32_t GCCSGameRules::GetShorthandedBonusLastEvalRound() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_nShorthandedBonusLastEvalRound");
}

void GCCSGameRules::SetShorthandedBonusLastEvalRound(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nShorthandedBonusLastEvalRound", false, value);
}

int32_t GCCSGameRules::GetMatchAbortedEarlyReason() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_nMatchAbortedEarlyReason");
}

void GCCSGameRules::SetMatchAbortedEarlyReason(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nMatchAbortedEarlyReason", false, value);
}

bool GCCSGameRules::GetHasTriggeredRoundStartMusic() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bHasTriggeredRoundStartMusic");
}

void GCCSGameRules::SetHasTriggeredRoundStartMusic(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bHasTriggeredRoundStartMusic", false, value);
}

bool GCCSGameRules::GetSwitchingTeamsAtRoundReset() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bSwitchingTeamsAtRoundReset");
}

void GCCSGameRules::SetSwitchingTeamsAtRoundReset(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bSwitchingTeamsAtRoundReset", false, value);
}

GCCSGameModeRules GCCSGameRules::GetGameModeRules() const {
    GCCSGameModeRules value(GetSchemaValuePtr<void>(m_ptr, "CCSGameRules", "m_pGameModeRules"));
    return value;
}

void GCCSGameRules::SetGameModeRules(GCCSGameModeRules* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'GameModeRules' is not possible.\n");
}

GCBaseEntity GCCSGameRules::GetPlayerResource() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CCSGameRules", "m_hPlayerResource"));
    return value;
}

void GCCSGameRules::SetPlayerResource(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'PlayerResource' is not possible.\n");
}

GCRetakeGameRules GCCSGameRules::GetRetakeRules() const {
    return GetSchemaValue<GCRetakeGameRules>(m_ptr, "CCSGameRules", "m_RetakeRules");
}

void GCCSGameRules::SetRetakeRules(GCRetakeGameRules value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_RetakeRules", false, value);
}

std::vector<bool> GCCSGameRules::GetTeamLastKillUsedUniqueWeaponMatch() const {
    bool* outValue = GetSchemaValue<bool*>(m_ptr, "CCSGameRules", "m_bTeamLastKillUsedUniqueWeaponMatch"); std::vector<bool> ret; for(int i = 0; i < 4; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCCSGameRules::SetTeamLastKillUsedUniqueWeaponMatch(std::vector<bool> value) {
    bool* outValue = GetSchemaValue<bool*>(m_ptr, "CCSGameRules", "m_bTeamLastKillUsedUniqueWeaponMatch"); for(int i = 0; i < 4; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CCSGameRules", "m_bTeamLastKillUsedUniqueWeaponMatch", false, outValue);
}

uint8_t GCCSGameRules::GetMatchEndCount() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CCSGameRules", "m_nMatchEndCount");
}

void GCCSGameRules::SetMatchEndCount(uint8_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nMatchEndCount", false, value);
}

int32_t GCCSGameRules::GetTTeamIntroVariant() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_nTTeamIntroVariant");
}

void GCCSGameRules::SetTTeamIntroVariant(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nTTeamIntroVariant", false, value);
}

int32_t GCCSGameRules::GetCTTeamIntroVariant() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_nCTTeamIntroVariant");
}

void GCCSGameRules::SetCTTeamIntroVariant(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nCTTeamIntroVariant", false, value);
}

bool GCCSGameRules::GetTeamIntroPeriod() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bTeamIntroPeriod");
}

void GCCSGameRules::SetTeamIntroPeriod(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bTeamIntroPeriod", false, value);
}

bool GCCSGameRules::GetPlayedTeamIntroVO() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bPlayedTeamIntroVO");
}

void GCCSGameRules::SetPlayedTeamIntroVO(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bPlayedTeamIntroVO", false, value);
}

int32_t GCCSGameRules::GetRoundEndWinnerTeam() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iRoundEndWinnerTeam");
}

void GCCSGameRules::SetRoundEndWinnerTeam(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iRoundEndWinnerTeam", false, value);
}

int32_t GCCSGameRules::GetRoundEndReason() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_eRoundEndReason");
}

void GCCSGameRules::SetRoundEndReason(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_eRoundEndReason", false, value);
}

bool GCCSGameRules::GetRoundEndShowTimerDefend() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bRoundEndShowTimerDefend");
}

void GCCSGameRules::SetRoundEndShowTimerDefend(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bRoundEndShowTimerDefend", false, value);
}

int32_t GCCSGameRules::GetRoundEndTimerTime() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iRoundEndTimerTime");
}

void GCCSGameRules::SetRoundEndTimerTime(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iRoundEndTimerTime", false, value);
}

CUtlString GCCSGameRules::GetRoundEndFunFactToken() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CCSGameRules", "m_sRoundEndFunFactToken");
}

void GCCSGameRules::SetRoundEndFunFactToken(CUtlString value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_sRoundEndFunFactToken", false, value);
}

int32_t GCCSGameRules::GetRoundEndFunFactPlayerSlot() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iRoundEndFunFactPlayerSlot");
}

void GCCSGameRules::SetRoundEndFunFactPlayerSlot(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iRoundEndFunFactPlayerSlot", false, value);
}

int32_t GCCSGameRules::GetRoundEndFunFactData1() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iRoundEndFunFactData1");
}

void GCCSGameRules::SetRoundEndFunFactData1(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iRoundEndFunFactData1", false, value);
}

int32_t GCCSGameRules::GetRoundEndFunFactData2() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iRoundEndFunFactData2");
}

void GCCSGameRules::SetRoundEndFunFactData2(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iRoundEndFunFactData2", false, value);
}

int32_t GCCSGameRules::GetRoundEndFunFactData3() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iRoundEndFunFactData3");
}

void GCCSGameRules::SetRoundEndFunFactData3(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iRoundEndFunFactData3", false, value);
}

CUtlString GCCSGameRules::GetRoundEndMessage() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CCSGameRules", "m_sRoundEndMessage");
}

void GCCSGameRules::SetRoundEndMessage(CUtlString value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_sRoundEndMessage", false, value);
}

int32_t GCCSGameRules::GetRoundEndPlayerCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iRoundEndPlayerCount");
}

void GCCSGameRules::SetRoundEndPlayerCount(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iRoundEndPlayerCount", false, value);
}

bool GCCSGameRules::GetRoundEndNoMusic() const {
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bRoundEndNoMusic");
}

void GCCSGameRules::SetRoundEndNoMusic(bool value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bRoundEndNoMusic", false, value);
}

int32_t GCCSGameRules::GetRoundEndLegacy() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iRoundEndLegacy");
}

void GCCSGameRules::SetRoundEndLegacy(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iRoundEndLegacy", false, value);
}

uint8_t GCCSGameRules::GetRoundEndCount() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CCSGameRules", "m_nRoundEndCount");
}

void GCCSGameRules::SetRoundEndCount(uint8_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nRoundEndCount", false, value);
}

int32_t GCCSGameRules::GetRoundStartRoundNumber() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iRoundStartRoundNumber");
}

void GCCSGameRules::SetRoundStartRoundNumber(int32_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iRoundStartRoundNumber", false, value);
}

uint8_t GCCSGameRules::GetRoundStartCount() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CCSGameRules", "m_nRoundStartCount");
}

void GCCSGameRules::SetRoundStartCount(uint8_t value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nRoundStartCount", false, value);
}

double GCCSGameRules::GetLastPerfSampleTime() const {
    return GetSchemaValue<double>(m_ptr, "CCSGameRules", "m_flLastPerfSampleTime");
}

void GCCSGameRules::SetLastPerfSampleTime(double value) {
    SetSchemaValue(m_ptr, "CCSGameRules", "m_flLastPerfSampleTime", false, value);
}

std::string GCCSGameRules::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSGameRules::IsValid() {
    return (m_ptr != nullptr);
}

GCColorCorrection::GCColorCorrection(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCColorCorrection::GCColorCorrection(void *ptr) {
    m_ptr = ptr;
}

float GCColorCorrection::GetFadeInDuration() const {
    return GetSchemaValue<float>(m_ptr, "CColorCorrection", "m_flFadeInDuration");
}

void GCColorCorrection::SetFadeInDuration(float value) {
    SetSchemaValue(m_ptr, "CColorCorrection", "m_flFadeInDuration", false, value);
}

float GCColorCorrection::GetFadeOutDuration() const {
    return GetSchemaValue<float>(m_ptr, "CColorCorrection", "m_flFadeOutDuration");
}

void GCColorCorrection::SetFadeOutDuration(float value) {
    SetSchemaValue(m_ptr, "CColorCorrection", "m_flFadeOutDuration", false, value);
}

float GCColorCorrection::GetStartFadeInWeight() const {
    return GetSchemaValue<float>(m_ptr, "CColorCorrection", "m_flStartFadeInWeight");
}

void GCColorCorrection::SetStartFadeInWeight(float value) {
    SetSchemaValue(m_ptr, "CColorCorrection", "m_flStartFadeInWeight", false, value);
}

float GCColorCorrection::GetStartFadeOutWeight() const {
    return GetSchemaValue<float>(m_ptr, "CColorCorrection", "m_flStartFadeOutWeight");
}

void GCColorCorrection::SetStartFadeOutWeight(float value) {
    SetSchemaValue(m_ptr, "CColorCorrection", "m_flStartFadeOutWeight", false, value);
}

float GCColorCorrection::GetMaxWeight() const {
    return GetSchemaValue<float>(m_ptr, "CColorCorrection", "m_flMaxWeight");
}

void GCColorCorrection::SetMaxWeight(float value) {
    SetSchemaValue(m_ptr, "CColorCorrection", "m_flMaxWeight", false, value);
}

bool GCColorCorrection::GetStartDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CColorCorrection", "m_bStartDisabled");
}

void GCColorCorrection::SetStartDisabled(bool value) {
    SetSchemaValue(m_ptr, "CColorCorrection", "m_bStartDisabled", false, value);
}

bool GCColorCorrection::GetEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CColorCorrection", "m_bEnabled");
}

void GCColorCorrection::SetEnabled(bool value) {
    SetSchemaValue(m_ptr, "CColorCorrection", "m_bEnabled", false, value);
}

bool GCColorCorrection::GetMaster() const {
    return GetSchemaValue<bool>(m_ptr, "CColorCorrection", "m_bMaster");
}

void GCColorCorrection::SetMaster(bool value) {
    SetSchemaValue(m_ptr, "CColorCorrection", "m_bMaster", false, value);
}

bool GCColorCorrection::GetClientSide() const {
    return GetSchemaValue<bool>(m_ptr, "CColorCorrection", "m_bClientSide");
}

void GCColorCorrection::SetClientSide(bool value) {
    SetSchemaValue(m_ptr, "CColorCorrection", "m_bClientSide", false, value);
}

bool GCColorCorrection::GetExclusive() const {
    return GetSchemaValue<bool>(m_ptr, "CColorCorrection", "m_bExclusive");
}

void GCColorCorrection::SetExclusive(bool value) {
    SetSchemaValue(m_ptr, "CColorCorrection", "m_bExclusive", false, value);
}

float GCColorCorrection::GetMinFalloff() const {
    return GetSchemaValue<float>(m_ptr, "CColorCorrection", "m_MinFalloff");
}

void GCColorCorrection::SetMinFalloff(float value) {
    SetSchemaValue(m_ptr, "CColorCorrection", "m_MinFalloff", false, value);
}

float GCColorCorrection::GetMaxFalloff() const {
    return GetSchemaValue<float>(m_ptr, "CColorCorrection", "m_MaxFalloff");
}

void GCColorCorrection::SetMaxFalloff(float value) {
    SetSchemaValue(m_ptr, "CColorCorrection", "m_MaxFalloff", false, value);
}

float GCColorCorrection::GetCurWeight() const {
    return GetSchemaValue<float>(m_ptr, "CColorCorrection", "m_flCurWeight");
}

void GCColorCorrection::SetCurWeight(float value) {
    SetSchemaValue(m_ptr, "CColorCorrection", "m_flCurWeight", false, value);
}

std::string GCColorCorrection::GetNetlookupFilename() const {
    return GetSchemaValuePtr<char>(m_ptr, "CColorCorrection", "m_netlookupFilename");
}

void GCColorCorrection::SetNetlookupFilename(std::string value) {
    WriteSchemaPtrValue(m_ptr, "CColorCorrection", "m_netlookupFilename", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 512);
}

CUtlSymbolLarge GCColorCorrection::GetLookupFilename() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CColorCorrection", "m_lookupFilename");
}

void GCColorCorrection::SetLookupFilename(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CColorCorrection", "m_lookupFilename", false, value);
}

std::string GCColorCorrection::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCColorCorrection::IsValid() {
    return (m_ptr != nullptr);
}

GCWeaponElite::GCWeaponElite(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWeaponElite::GCWeaponElite(void *ptr) {
    m_ptr = ptr;
}

std::string GCWeaponElite::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWeaponElite::IsValid() {
    return (m_ptr != nullptr);
}

GCSoundEventEntityAlias_snd_event_point::GCSoundEventEntityAlias_snd_event_point(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSoundEventEntityAlias_snd_event_point::GCSoundEventEntityAlias_snd_event_point(void *ptr) {
    m_ptr = ptr;
}

std::string GCSoundEventEntityAlias_snd_event_point::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSoundEventEntityAlias_snd_event_point::IsValid() {
    return (m_ptr != nullptr);
}

GCBaseEntityAPI::GCBaseEntityAPI(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBaseEntityAPI::GCBaseEntityAPI(void *ptr) {
    m_ptr = ptr;
}

std::string GCBaseEntityAPI::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBaseEntityAPI::IsValid() {
    return (m_ptr != nullptr);
}

GCC4::GCC4(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCC4::GCC4(void *ptr) {
    m_ptr = ptr;
}

Vector GCC4::GetLastValidPlayerHeldPosition() const {
    return GetSchemaValue<Vector>(m_ptr, "CC4", "m_vecLastValidPlayerHeldPosition");
}

void GCC4::SetLastValidPlayerHeldPosition(Vector value) {
    SetSchemaValue(m_ptr, "CC4", "m_vecLastValidPlayerHeldPosition", false, value);
}

Vector GCC4::GetLastValidDroppedPosition() const {
    return GetSchemaValue<Vector>(m_ptr, "CC4", "m_vecLastValidDroppedPosition");
}

void GCC4::SetLastValidDroppedPosition(Vector value) {
    SetSchemaValue(m_ptr, "CC4", "m_vecLastValidDroppedPosition", false, value);
}

bool GCC4::GetDoValidDroppedPositionCheck() const {
    return GetSchemaValue<bool>(m_ptr, "CC4", "m_bDoValidDroppedPositionCheck");
}

void GCC4::SetDoValidDroppedPositionCheck(bool value) {
    SetSchemaValue(m_ptr, "CC4", "m_bDoValidDroppedPositionCheck", false, value);
}

bool GCC4::GetStartedArming() const {
    return GetSchemaValue<bool>(m_ptr, "CC4", "m_bStartedArming");
}

void GCC4::SetStartedArming(bool value) {
    SetSchemaValue(m_ptr, "CC4", "m_bStartedArming", false, value);
}

bool GCC4::GetBombPlacedAnimation() const {
    return GetSchemaValue<bool>(m_ptr, "CC4", "m_bBombPlacedAnimation");
}

void GCC4::SetBombPlacedAnimation(bool value) {
    SetSchemaValue(m_ptr, "CC4", "m_bBombPlacedAnimation", false, value);
}

bool GCC4::GetIsPlantingViaUse() const {
    return GetSchemaValue<bool>(m_ptr, "CC4", "m_bIsPlantingViaUse");
}

void GCC4::SetIsPlantingViaUse(bool value) {
    SetSchemaValue(m_ptr, "CC4", "m_bIsPlantingViaUse", false, value);
}

GEntitySpottedState_t GCC4::GetEntitySpottedState() const {
    return GetSchemaValue<GEntitySpottedState_t>(m_ptr, "CC4", "m_entitySpottedState");
}

void GCC4::SetEntitySpottedState(GEntitySpottedState_t value) {
    SetSchemaValue(m_ptr, "CC4", "m_entitySpottedState", false, value);
}

int32_t GCC4::GetSpotRules() const {
    return GetSchemaValue<int32_t>(m_ptr, "CC4", "m_nSpotRules");
}

void GCC4::SetSpotRules(int32_t value) {
    SetSchemaValue(m_ptr, "CC4", "m_nSpotRules", false, value);
}

std::vector<bool> GCC4::GetPlayedArmingBeeps() const {
    bool* outValue = GetSchemaValue<bool*>(m_ptr, "CC4", "m_bPlayedArmingBeeps"); std::vector<bool> ret; for(int i = 0; i < 7; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCC4::SetPlayedArmingBeeps(std::vector<bool> value) {
    bool* outValue = GetSchemaValue<bool*>(m_ptr, "CC4", "m_bPlayedArmingBeeps"); for(int i = 0; i < 7; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CC4", "m_bPlayedArmingBeeps", false, outValue);
}

bool GCC4::GetBombPlanted() const {
    return GetSchemaValue<bool>(m_ptr, "CC4", "m_bBombPlanted");
}

void GCC4::SetBombPlanted(bool value) {
    SetSchemaValue(m_ptr, "CC4", "m_bBombPlanted", false, value);
}

std::string GCC4::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCC4::IsValid() {
    return (m_ptr != nullptr);
}

GCHostageRescueZone::GCHostageRescueZone(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCHostageRescueZone::GCHostageRescueZone(void *ptr) {
    m_ptr = ptr;
}

std::string GCHostageRescueZone::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCHostageRescueZone::IsValid() {
    return (m_ptr != nullptr);
}

GCPointPrefab::GCPointPrefab(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPointPrefab::GCPointPrefab(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCPointPrefab::GetTargetMapName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPointPrefab", "m_targetMapName");
}

void GCPointPrefab::SetTargetMapName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPointPrefab", "m_targetMapName", false, value);
}

CUtlSymbolLarge GCPointPrefab::GetForceWorldGroupID() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPointPrefab", "m_forceWorldGroupID");
}

void GCPointPrefab::SetForceWorldGroupID(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPointPrefab", "m_forceWorldGroupID", false, value);
}

CUtlSymbolLarge GCPointPrefab::GetAssociatedRelayTargetName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPointPrefab", "m_associatedRelayTargetName");
}

void GCPointPrefab::SetAssociatedRelayTargetName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPointPrefab", "m_associatedRelayTargetName", false, value);
}

bool GCPointPrefab::GetFixupNames() const {
    return GetSchemaValue<bool>(m_ptr, "CPointPrefab", "m_fixupNames");
}

void GCPointPrefab::SetFixupNames(bool value) {
    SetSchemaValue(m_ptr, "CPointPrefab", "m_fixupNames", false, value);
}

bool GCPointPrefab::GetLoadDynamic() const {
    return GetSchemaValue<bool>(m_ptr, "CPointPrefab", "m_bLoadDynamic");
}

void GCPointPrefab::SetLoadDynamic(bool value) {
    SetSchemaValue(m_ptr, "CPointPrefab", "m_bLoadDynamic", false, value);
}

GCPointPrefab GCPointPrefab::GetAssociatedRelayEntity() const {
    GCPointPrefab value(GetSchemaValuePtr<void>(m_ptr, "CPointPrefab", "m_associatedRelayEntity"));
    return value;
}

void GCPointPrefab::SetAssociatedRelayEntity(GCPointPrefab* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'AssociatedRelayEntity' is not possible.\n");
}

std::string GCPointPrefab::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPointPrefab::IsValid() {
    return (m_ptr != nullptr);
}

GCRotDoor::GCRotDoor(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCRotDoor::GCRotDoor(void *ptr) {
    m_ptr = ptr;
}

bool GCRotDoor::GetSolidBsp() const {
    return GetSchemaValue<bool>(m_ptr, "CRotDoor", "m_bSolidBsp");
}

void GCRotDoor::SetSolidBsp(bool value) {
    SetSchemaValue(m_ptr, "CRotDoor", "m_bSolidBsp", false, value);
}

std::string GCRotDoor::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCRotDoor::IsValid() {
    return (m_ptr != nullptr);
}

GCSkeletonAnimationController::GCSkeletonAnimationController(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSkeletonAnimationController::GCSkeletonAnimationController(void *ptr) {
    m_ptr = ptr;
}

GCSkeletonInstance GCSkeletonAnimationController::GetSkeletonInstance() const {
    GCSkeletonInstance value(GetSchemaValuePtr<void>(m_ptr, "CSkeletonAnimationController", "m_pSkeletonInstance"));
    return value;
}

void GCSkeletonAnimationController::SetSkeletonInstance(GCSkeletonInstance* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'SkeletonInstance' is not possible.\n");
}

std::string GCSkeletonAnimationController::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSkeletonAnimationController::IsValid() {
    return (m_ptr != nullptr);
}

GCTablet::GCTablet(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTablet::GCTablet(void *ptr) {
    m_ptr = ptr;
}

std::string GCTablet::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTablet::IsValid() {
    return (m_ptr != nullptr);
}

GCTankTrainAI::GCTankTrainAI(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTankTrainAI::GCTankTrainAI(void *ptr) {
    m_ptr = ptr;
}

GCFuncTrackTrain GCTankTrainAI::GetTrain() const {
    GCFuncTrackTrain value(GetSchemaValuePtr<void>(m_ptr, "CTankTrainAI", "m_hTrain"));
    return value;
}

void GCTankTrainAI::SetTrain(GCFuncTrackTrain* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Train' is not possible.\n");
}

GCBaseEntity GCTankTrainAI::GetTargetEntity() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CTankTrainAI", "m_hTargetEntity"));
    return value;
}

void GCTankTrainAI::SetTargetEntity(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'TargetEntity' is not possible.\n");
}

int32_t GCTankTrainAI::GetSoundPlaying() const {
    return GetSchemaValue<int32_t>(m_ptr, "CTankTrainAI", "m_soundPlaying");
}

void GCTankTrainAI::SetSoundPlaying(int32_t value) {
    SetSchemaValue(m_ptr, "CTankTrainAI", "m_soundPlaying", false, value);
}

CUtlSymbolLarge GCTankTrainAI::GetStartSoundName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CTankTrainAI", "m_startSoundName");
}

void GCTankTrainAI::SetStartSoundName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CTankTrainAI", "m_startSoundName", false, value);
}

CUtlSymbolLarge GCTankTrainAI::GetEngineSoundName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CTankTrainAI", "m_engineSoundName");
}

void GCTankTrainAI::SetEngineSoundName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CTankTrainAI", "m_engineSoundName", false, value);
}

CUtlSymbolLarge GCTankTrainAI::GetMovementSoundName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CTankTrainAI", "m_movementSoundName");
}

void GCTankTrainAI::SetMovementSoundName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CTankTrainAI", "m_movementSoundName", false, value);
}

CUtlSymbolLarge GCTankTrainAI::GetTargetEntityName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CTankTrainAI", "m_targetEntityName");
}

void GCTankTrainAI::SetTargetEntityName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CTankTrainAI", "m_targetEntityName", false, value);
}

std::string GCTankTrainAI::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTankTrainAI::IsValid() {
    return (m_ptr != nullptr);
}

GCGameGibManager::GCGameGibManager(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCGameGibManager::GCGameGibManager(void *ptr) {
    m_ptr = ptr;
}

bool GCGameGibManager::GetAllowNewGibs() const {
    return GetSchemaValue<bool>(m_ptr, "CGameGibManager", "m_bAllowNewGibs");
}

void GCGameGibManager::SetAllowNewGibs(bool value) {
    SetSchemaValue(m_ptr, "CGameGibManager", "m_bAllowNewGibs", false, value);
}

int32_t GCGameGibManager::GetCurrentMaxPieces() const {
    return GetSchemaValue<int32_t>(m_ptr, "CGameGibManager", "m_iCurrentMaxPieces");
}

void GCGameGibManager::SetCurrentMaxPieces(int32_t value) {
    SetSchemaValue(m_ptr, "CGameGibManager", "m_iCurrentMaxPieces", false, value);
}

int32_t GCGameGibManager::GetMaxPieces() const {
    return GetSchemaValue<int32_t>(m_ptr, "CGameGibManager", "m_iMaxPieces");
}

void GCGameGibManager::SetMaxPieces(int32_t value) {
    SetSchemaValue(m_ptr, "CGameGibManager", "m_iMaxPieces", false, value);
}

int32_t GCGameGibManager::GetLastFrame() const {
    return GetSchemaValue<int32_t>(m_ptr, "CGameGibManager", "m_iLastFrame");
}

void GCGameGibManager::SetLastFrame(int32_t value) {
    SetSchemaValue(m_ptr, "CGameGibManager", "m_iLastFrame", false, value);
}

std::string GCGameGibManager::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCGameGibManager::IsValid() {
    return (m_ptr != nullptr);
}

GCCSPointScript::GCCSPointScript(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSPointScript::GCCSPointScript(void *ptr) {
    m_ptr = ptr;
}

GCCSPointScriptEntity GCCSPointScript::GetParent() const {
    GCCSPointScriptEntity value(GetSchemaValuePtr<void>(m_ptr, "CCSPointScript", "m_pParent"));
    return value;
}

void GCCSPointScript::SetParent(GCCSPointScriptEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}

std::string GCCSPointScript::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSPointScript::IsValid() {
    return (m_ptr != nullptr);
}

GCRagdollPropAlias_physics_prop_ragdoll::GCRagdollPropAlias_physics_prop_ragdoll(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCRagdollPropAlias_physics_prop_ragdoll::GCRagdollPropAlias_physics_prop_ragdoll(void *ptr) {
    m_ptr = ptr;
}

std::string GCRagdollPropAlias_physics_prop_ragdoll::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCRagdollPropAlias_physics_prop_ragdoll::IsValid() {
    return (m_ptr != nullptr);
}

GCCSSprite::GCCSSprite(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSSprite::GCCSSprite(void *ptr) {
    m_ptr = ptr;
}

std::string GCCSSprite::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSSprite::IsValid() {
    return (m_ptr != nullptr);
}

GCFuncPropRespawnZone::GCFuncPropRespawnZone(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFuncPropRespawnZone::GCFuncPropRespawnZone(void *ptr) {
    m_ptr = ptr;
}

std::string GCFuncPropRespawnZone::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFuncPropRespawnZone::IsValid() {
    return (m_ptr != nullptr);
}

GCInfoDeathmatchSpawn::GCInfoDeathmatchSpawn(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCInfoDeathmatchSpawn::GCInfoDeathmatchSpawn(void *ptr) {
    m_ptr = ptr;
}

std::string GCInfoDeathmatchSpawn::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCInfoDeathmatchSpawn::IsValid() {
    return (m_ptr != nullptr);
}

GCWeaponSCAR20::GCWeaponSCAR20(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWeaponSCAR20::GCWeaponSCAR20(void *ptr) {
    m_ptr = ptr;
}

std::string GCWeaponSCAR20::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWeaponSCAR20::IsValid() {
    return (m_ptr != nullptr);
}

GCTripWireFireProjectile::GCTripWireFireProjectile(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTripWireFireProjectile::GCTripWireFireProjectile(void *ptr) {
    m_ptr = ptr;
}

std::string GCTripWireFireProjectile::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTripWireFireProjectile::IsValid() {
    return (m_ptr != nullptr);
}

GCFuncTrackAuto::GCFuncTrackAuto(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFuncTrackAuto::GCFuncTrackAuto(void *ptr) {
    m_ptr = ptr;
}

std::string GCFuncTrackAuto::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFuncTrackAuto::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvSpark::GCEnvSpark(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvSpark::GCEnvSpark(void *ptr) {
    m_ptr = ptr;
}

float GCEnvSpark::GetDelay() const {
    return GetSchemaValue<float>(m_ptr, "CEnvSpark", "m_flDelay");
}

void GCEnvSpark::SetDelay(float value) {
    SetSchemaValue(m_ptr, "CEnvSpark", "m_flDelay", false, value);
}

int32_t GCEnvSpark::GetMagnitude() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvSpark", "m_nMagnitude");
}

void GCEnvSpark::SetMagnitude(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvSpark", "m_nMagnitude", false, value);
}

int32_t GCEnvSpark::GetTrailLength() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvSpark", "m_nTrailLength");
}

void GCEnvSpark::SetTrailLength(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvSpark", "m_nTrailLength", false, value);
}

int32_t GCEnvSpark::GetType() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEnvSpark", "m_nType");
}

void GCEnvSpark::SetType(int32_t value) {
    SetSchemaValue(m_ptr, "CEnvSpark", "m_nType", false, value);
}

GCEntityIOOutput GCEnvSpark::GetOnSpark() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CEnvSpark", "m_OnSpark");
}

void GCEnvSpark::SetOnSpark(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CEnvSpark", "m_OnSpark", false, value);
}

std::string GCEnvSpark::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvSpark::IsValid() {
    return (m_ptr != nullptr);
}

GCCSObserver_ObserverServices::GCCSObserver_ObserverServices(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSObserver_ObserverServices::GCCSObserver_ObserverServices(void *ptr) {
    m_ptr = ptr;
}

std::string GCCSObserver_ObserverServices::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSObserver_ObserverServices::IsValid() {
    return (m_ptr != nullptr);
}

GCPlayer_AutoaimServices::GCPlayer_AutoaimServices(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPlayer_AutoaimServices::GCPlayer_AutoaimServices(void *ptr) {
    m_ptr = ptr;
}

std::string GCPlayer_AutoaimServices::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPlayer_AutoaimServices::IsValid() {
    return (m_ptr != nullptr);
}

GCFuncTrain::GCFuncTrain(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFuncTrain::GCFuncTrain(void *ptr) {
    m_ptr = ptr;
}

GCBaseEntity GCFuncTrain::GetCurrentTarget() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CFuncTrain", "m_hCurrentTarget"));
    return value;
}

void GCFuncTrain::SetCurrentTarget(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'CurrentTarget' is not possible.\n");
}

bool GCFuncTrain::GetActivated() const {
    return GetSchemaValue<bool>(m_ptr, "CFuncTrain", "m_activated");
}

void GCFuncTrain::SetActivated(bool value) {
    SetSchemaValue(m_ptr, "CFuncTrain", "m_activated", false, value);
}

GCBaseEntity GCFuncTrain::GetEnemy() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CFuncTrain", "m_hEnemy"));
    return value;
}

void GCFuncTrain::SetEnemy(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Enemy' is not possible.\n");
}

float GCFuncTrain::GetBlockDamage() const {
    return GetSchemaValue<float>(m_ptr, "CFuncTrain", "m_flBlockDamage");
}

void GCFuncTrain::SetBlockDamage(float value) {
    SetSchemaValue(m_ptr, "CFuncTrain", "m_flBlockDamage", false, value);
}

CUtlSymbolLarge GCFuncTrain::GetLastTarget() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncTrain", "m_iszLastTarget");
}

void GCFuncTrain::SetLastTarget(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CFuncTrain", "m_iszLastTarget", false, value);
}

std::string GCFuncTrain::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFuncTrain::IsValid() {
    return (m_ptr != nullptr);
}

GCHostageAlias_info_hostage_spawn::GCHostageAlias_info_hostage_spawn(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCHostageAlias_info_hostage_spawn::GCHostageAlias_info_hostage_spawn(void *ptr) {
    m_ptr = ptr;
}

std::string GCHostageAlias_info_hostage_spawn::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCHostageAlias_info_hostage_spawn::IsValid() {
    return (m_ptr != nullptr);
}

GCNavLinkAreaEntity::GCNavLinkAreaEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNavLinkAreaEntity::GCNavLinkAreaEntity(void *ptr) {
    m_ptr = ptr;
}

float GCNavLinkAreaEntity::GetWidth() const {
    return GetSchemaValue<float>(m_ptr, "CNavLinkAreaEntity", "m_flWidth");
}

void GCNavLinkAreaEntity::SetWidth(float value) {
    SetSchemaValue(m_ptr, "CNavLinkAreaEntity", "m_flWidth", false, value);
}

Vector GCNavLinkAreaEntity::GetLocatorOffset() const {
    return GetSchemaValue<Vector>(m_ptr, "CNavLinkAreaEntity", "m_vLocatorOffset");
}

void GCNavLinkAreaEntity::SetLocatorOffset(Vector value) {
    SetSchemaValue(m_ptr, "CNavLinkAreaEntity", "m_vLocatorOffset", false, value);
}

QAngle GCNavLinkAreaEntity::GetLocatorAnglesOffset() const {
    return GetSchemaValue<QAngle>(m_ptr, "CNavLinkAreaEntity", "m_qLocatorAnglesOffset");
}

void GCNavLinkAreaEntity::SetLocatorAnglesOffset(QAngle value) {
    SetSchemaValue(m_ptr, "CNavLinkAreaEntity", "m_qLocatorAnglesOffset", false, value);
}

CUtlSymbolLarge GCNavLinkAreaEntity::GetStrMovementForward() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CNavLinkAreaEntity", "m_strMovementForward");
}

void GCNavLinkAreaEntity::SetStrMovementForward(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CNavLinkAreaEntity", "m_strMovementForward", false, value);
}

CUtlSymbolLarge GCNavLinkAreaEntity::GetStrMovementReverse() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CNavLinkAreaEntity", "m_strMovementReverse");
}

void GCNavLinkAreaEntity::SetStrMovementReverse(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CNavLinkAreaEntity", "m_strMovementReverse", false, value);
}

int32_t GCNavLinkAreaEntity::GetNavLinkIdForward() const {
    return GetSchemaValue<int32_t>(m_ptr, "CNavLinkAreaEntity", "m_nNavLinkIdForward");
}

void GCNavLinkAreaEntity::SetNavLinkIdForward(int32_t value) {
    SetSchemaValue(m_ptr, "CNavLinkAreaEntity", "m_nNavLinkIdForward", false, value);
}

int32_t GCNavLinkAreaEntity::GetNavLinkIdReverse() const {
    return GetSchemaValue<int32_t>(m_ptr, "CNavLinkAreaEntity", "m_nNavLinkIdReverse");
}

void GCNavLinkAreaEntity::SetNavLinkIdReverse(int32_t value) {
    SetSchemaValue(m_ptr, "CNavLinkAreaEntity", "m_nNavLinkIdReverse", false, value);
}

bool GCNavLinkAreaEntity::GetEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CNavLinkAreaEntity", "m_bEnabled");
}

void GCNavLinkAreaEntity::SetEnabled(bool value) {
    SetSchemaValue(m_ptr, "CNavLinkAreaEntity", "m_bEnabled", false, value);
}

CUtlSymbolLarge GCNavLinkAreaEntity::GetStrFilterName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CNavLinkAreaEntity", "m_strFilterName");
}

void GCNavLinkAreaEntity::SetStrFilterName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CNavLinkAreaEntity", "m_strFilterName", false, value);
}

GCBaseFilter GCNavLinkAreaEntity::GetFilter() const {
    GCBaseFilter value(GetSchemaValuePtr<void>(m_ptr, "CNavLinkAreaEntity", "m_hFilter"));
    return value;
}

void GCNavLinkAreaEntity::SetFilter(GCBaseFilter* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Filter' is not possible.\n");
}

GCEntityIOOutput GCNavLinkAreaEntity::GetOnNavLinkStart() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CNavLinkAreaEntity", "m_OnNavLinkStart");
}

void GCNavLinkAreaEntity::SetOnNavLinkStart(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CNavLinkAreaEntity", "m_OnNavLinkStart", false, value);
}

GCEntityIOOutput GCNavLinkAreaEntity::GetOnNavLinkFinish() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CNavLinkAreaEntity", "m_OnNavLinkFinish");
}

void GCNavLinkAreaEntity::SetOnNavLinkFinish(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CNavLinkAreaEntity", "m_OnNavLinkFinish", false, value);
}

bool GCNavLinkAreaEntity::GetIsTerminus() const {
    return GetSchemaValue<bool>(m_ptr, "CNavLinkAreaEntity", "m_bIsTerminus");
}

void GCNavLinkAreaEntity::SetIsTerminus(bool value) {
    SetSchemaValue(m_ptr, "CNavLinkAreaEntity", "m_bIsTerminus", false, value);
}

std::string GCNavLinkAreaEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNavLinkAreaEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCFuncMoveLinearAlias_momentary_door::GCFuncMoveLinearAlias_momentary_door(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFuncMoveLinearAlias_momentary_door::GCFuncMoveLinearAlias_momentary_door(void *ptr) {
    m_ptr = ptr;
}

std::string GCFuncMoveLinearAlias_momentary_door::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFuncMoveLinearAlias_momentary_door::IsValid() {
    return (m_ptr != nullptr);
}

GCCommentaryAuto::GCCommentaryAuto(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCommentaryAuto::GCCommentaryAuto(void *ptr) {
    m_ptr = ptr;
}

GCEntityIOOutput GCCommentaryAuto::GetOnCommentaryNewGame() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CCommentaryAuto", "m_OnCommentaryNewGame");
}

void GCCommentaryAuto::SetOnCommentaryNewGame(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CCommentaryAuto", "m_OnCommentaryNewGame", false, value);
}

GCEntityIOOutput GCCommentaryAuto::GetOnCommentaryMidGame() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CCommentaryAuto", "m_OnCommentaryMidGame");
}

void GCCommentaryAuto::SetOnCommentaryMidGame(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CCommentaryAuto", "m_OnCommentaryMidGame", false, value);
}

GCEntityIOOutput GCCommentaryAuto::GetOnCommentaryMultiplayerSpawn() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CCommentaryAuto", "m_OnCommentaryMultiplayerSpawn");
}

void GCCommentaryAuto::SetOnCommentaryMultiplayerSpawn(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CCommentaryAuto", "m_OnCommentaryMultiplayerSpawn", false, value);
}

std::string GCCommentaryAuto::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCommentaryAuto::IsValid() {
    return (m_ptr != nullptr);
}

GCMapInfo::GCMapInfo(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMapInfo::GCMapInfo(void *ptr) {
    m_ptr = ptr;
}

int32_t GCMapInfo::GetBuyingStatus() const {
    return GetSchemaValue<int32_t>(m_ptr, "CMapInfo", "m_iBuyingStatus");
}

void GCMapInfo::SetBuyingStatus(int32_t value) {
    SetSchemaValue(m_ptr, "CMapInfo", "m_iBuyingStatus", false, value);
}

float GCMapInfo::GetBombRadius() const {
    return GetSchemaValue<float>(m_ptr, "CMapInfo", "m_flBombRadius");
}

void GCMapInfo::SetBombRadius(float value) {
    SetSchemaValue(m_ptr, "CMapInfo", "m_flBombRadius", false, value);
}

int32_t GCMapInfo::GetPetPopulation() const {
    return GetSchemaValue<int32_t>(m_ptr, "CMapInfo", "m_iPetPopulation");
}

void GCMapInfo::SetPetPopulation(int32_t value) {
    SetSchemaValue(m_ptr, "CMapInfo", "m_iPetPopulation", false, value);
}

bool GCMapInfo::GetUseNormalSpawnsForDM() const {
    return GetSchemaValue<bool>(m_ptr, "CMapInfo", "m_bUseNormalSpawnsForDM");
}

void GCMapInfo::SetUseNormalSpawnsForDM(bool value) {
    SetSchemaValue(m_ptr, "CMapInfo", "m_bUseNormalSpawnsForDM", false, value);
}

bool GCMapInfo::GetDisableAutoGeneratedDMSpawns() const {
    return GetSchemaValue<bool>(m_ptr, "CMapInfo", "m_bDisableAutoGeneratedDMSpawns");
}

void GCMapInfo::SetDisableAutoGeneratedDMSpawns(bool value) {
    SetSchemaValue(m_ptr, "CMapInfo", "m_bDisableAutoGeneratedDMSpawns", false, value);
}

float GCMapInfo::GetBotMaxVisionDistance() const {
    return GetSchemaValue<float>(m_ptr, "CMapInfo", "m_flBotMaxVisionDistance");
}

void GCMapInfo::SetBotMaxVisionDistance(float value) {
    SetSchemaValue(m_ptr, "CMapInfo", "m_flBotMaxVisionDistance", false, value);
}

int32_t GCMapInfo::GetHostageCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CMapInfo", "m_iHostageCount");
}

void GCMapInfo::SetHostageCount(int32_t value) {
    SetSchemaValue(m_ptr, "CMapInfo", "m_iHostageCount", false, value);
}

bool GCMapInfo::GetFadePlayerVisibilityFarZ() const {
    return GetSchemaValue<bool>(m_ptr, "CMapInfo", "m_bFadePlayerVisibilityFarZ");
}

void GCMapInfo::SetFadePlayerVisibilityFarZ(bool value) {
    SetSchemaValue(m_ptr, "CMapInfo", "m_bFadePlayerVisibilityFarZ", false, value);
}

std::string GCMapInfo::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMapInfo::IsValid() {
    return (m_ptr != nullptr);
}

GCTriggerBombReset::GCTriggerBombReset(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTriggerBombReset::GCTriggerBombReset(void *ptr) {
    m_ptr = ptr;
}

std::string GCTriggerBombReset::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTriggerBombReset::IsValid() {
    return (m_ptr != nullptr);
}

GCBaseDMStart::GCBaseDMStart(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBaseDMStart::GCBaseDMStart(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCBaseDMStart::GetMaster() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBaseDMStart", "m_Master");
}

void GCBaseDMStart::SetMaster(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CBaseDMStart", "m_Master", false, value);
}

std::string GCBaseDMStart::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBaseDMStart::IsValid() {
    return (m_ptr != nullptr);
}

GCLogicMeasureMovement::GCLogicMeasureMovement(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCLogicMeasureMovement::GCLogicMeasureMovement(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCLogicMeasureMovement::GetStrMeasureTarget() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CLogicMeasureMovement", "m_strMeasureTarget");
}

void GCLogicMeasureMovement::SetStrMeasureTarget(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CLogicMeasureMovement", "m_strMeasureTarget", false, value);
}

CUtlSymbolLarge GCLogicMeasureMovement::GetStrMeasureReference() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CLogicMeasureMovement", "m_strMeasureReference");
}

void GCLogicMeasureMovement::SetStrMeasureReference(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CLogicMeasureMovement", "m_strMeasureReference", false, value);
}

CUtlSymbolLarge GCLogicMeasureMovement::GetStrTargetReference() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CLogicMeasureMovement", "m_strTargetReference");
}

void GCLogicMeasureMovement::SetStrTargetReference(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CLogicMeasureMovement", "m_strTargetReference", false, value);
}

GCBaseEntity GCLogicMeasureMovement::GetMeasureTarget() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CLogicMeasureMovement", "m_hMeasureTarget"));
    return value;
}

void GCLogicMeasureMovement::SetMeasureTarget(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'MeasureTarget' is not possible.\n");
}

GCBaseEntity GCLogicMeasureMovement::GetMeasureReference() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CLogicMeasureMovement", "m_hMeasureReference"));
    return value;
}

void GCLogicMeasureMovement::SetMeasureReference(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'MeasureReference' is not possible.\n");
}

GCBaseEntity GCLogicMeasureMovement::GetTarget() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CLogicMeasureMovement", "m_hTarget"));
    return value;
}

void GCLogicMeasureMovement::SetTarget(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Target' is not possible.\n");
}

GCBaseEntity GCLogicMeasureMovement::GetTargetReference() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CLogicMeasureMovement", "m_hTargetReference"));
    return value;
}

void GCLogicMeasureMovement::SetTargetReference(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'TargetReference' is not possible.\n");
}

float GCLogicMeasureMovement::GetScale() const {
    return GetSchemaValue<float>(m_ptr, "CLogicMeasureMovement", "m_flScale");
}

void GCLogicMeasureMovement::SetScale(float value) {
    SetSchemaValue(m_ptr, "CLogicMeasureMovement", "m_flScale", false, value);
}

int32_t GCLogicMeasureMovement::GetMeasureType() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLogicMeasureMovement", "m_nMeasureType");
}

void GCLogicMeasureMovement::SetMeasureType(int32_t value) {
    SetSchemaValue(m_ptr, "CLogicMeasureMovement", "m_nMeasureType", false, value);
}

std::string GCLogicMeasureMovement::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCLogicMeasureMovement::IsValid() {
    return (m_ptr != nullptr);
}

GViewAngleServerChange_t::GViewAngleServerChange_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GViewAngleServerChange_t::GViewAngleServerChange_t(void *ptr) {
    m_ptr = ptr;
}

FixAngleSet_t GViewAngleServerChange_t::GetType() const {
    return GetSchemaValue<FixAngleSet_t>(m_ptr, "ViewAngleServerChange_t", "nType");
}

void GViewAngleServerChange_t::SetType(FixAngleSet_t value) {
    SetSchemaValue(m_ptr, "ViewAngleServerChange_t", "nType", true, value);
}

QAngle GViewAngleServerChange_t::GetAngle() const {
    return GetSchemaValue<QAngle>(m_ptr, "ViewAngleServerChange_t", "qAngle");
}

void GViewAngleServerChange_t::SetAngle(QAngle value) {
    SetSchemaValue(m_ptr, "ViewAngleServerChange_t", "qAngle", true, value);
}

uint32_t GViewAngleServerChange_t::GetIndex() const {
    return GetSchemaValue<uint32_t>(m_ptr, "ViewAngleServerChange_t", "nIndex");
}

void GViewAngleServerChange_t::SetIndex(uint32_t value) {
    SetSchemaValue(m_ptr, "ViewAngleServerChange_t", "nIndex", true, value);
}

std::string GViewAngleServerChange_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GViewAngleServerChange_t::IsValid() {
    return (m_ptr != nullptr);
}

GPhysicsRagdollPose_t::GPhysicsRagdollPose_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GPhysicsRagdollPose_t::GPhysicsRagdollPose_t(void *ptr) {
    m_ptr = ptr;
}

GCNetworkVarChainer GPhysicsRagdollPose_t::Get__pChainEntity() const {
    return GetSchemaValue<GCNetworkVarChainer>(m_ptr, "PhysicsRagdollPose_t", "__m_pChainEntity");
}

void GPhysicsRagdollPose_t::Set__pChainEntity(GCNetworkVarChainer value) {
    SetSchemaValue(m_ptr, "PhysicsRagdollPose_t", "__m_pChainEntity", true, value);
}

GCBaseEntity GPhysicsRagdollPose_t::GetOwner() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "PhysicsRagdollPose_t", "m_hOwner"));
    return value;
}

void GPhysicsRagdollPose_t::SetOwner(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Owner' is not possible.\n");
}

std::string GPhysicsRagdollPose_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GPhysicsRagdollPose_t::IsValid() {
    return (m_ptr != nullptr);
}

GCBreachChargeProjectile::GCBreachChargeProjectile(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBreachChargeProjectile::GCBreachChargeProjectile(void *ptr) {
    m_ptr = ptr;
}

std::string GCBreachChargeProjectile::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBreachChargeProjectile::IsValid() {
    return (m_ptr != nullptr);
}

GCRangeFloat::GCRangeFloat(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCRangeFloat::GCRangeFloat(void *ptr) {
    m_ptr = ptr;
}

std::vector<float> GCRangeFloat::GetValue() const {
    float* outValue = GetSchemaValue<float*>(m_ptr, "CRangeFloat", "m_pValue"); std::vector<float> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCRangeFloat::SetValue(std::vector<float> value) {
    float* outValue = GetSchemaValue<float*>(m_ptr, "CRangeFloat", "m_pValue"); for(int i = 0; i < 2; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CRangeFloat", "m_pValue", false, outValue);
}

std::string GCRangeFloat::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCRangeFloat::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimEventListenerBase::GCAnimEventListenerBase(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimEventListenerBase::GCAnimEventListenerBase(void *ptr) {
    m_ptr = ptr;
}

std::string GCAnimEventListenerBase::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimEventListenerBase::IsValid() {
    return (m_ptr != nullptr);
}

GRelationship_t::GRelationship_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GRelationship_t::GRelationship_t(void *ptr) {
    m_ptr = ptr;
}

Disposition_t GRelationship_t::GetDisposition() const {
    return GetSchemaValue<Disposition_t>(m_ptr, "Relationship_t", "disposition");
}

void GRelationship_t::SetDisposition(Disposition_t value) {
    SetSchemaValue(m_ptr, "Relationship_t", "disposition", true, value);
}

int32_t GRelationship_t::GetPriority() const {
    return GetSchemaValue<int32_t>(m_ptr, "Relationship_t", "priority");
}

void GRelationship_t::SetPriority(int32_t value) {
    SetSchemaValue(m_ptr, "Relationship_t", "priority", true, value);
}

std::string GRelationship_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GRelationship_t::IsValid() {
    return (m_ptr != nullptr);
}

GCRemapFloat::GCRemapFloat(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCRemapFloat::GCRemapFloat(void *ptr) {
    m_ptr = ptr;
}

std::vector<float> GCRemapFloat::GetValue() const {
    float* outValue = GetSchemaValue<float*>(m_ptr, "CRemapFloat", "m_pValue"); std::vector<float> ret; for(int i = 0; i < 4; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCRemapFloat::SetValue(std::vector<float> value) {
    float* outValue = GetSchemaValue<float*>(m_ptr, "CRemapFloat", "m_pValue"); for(int i = 0; i < 4; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CRemapFloat", "m_pValue", false, outValue);
}

std::string GCRemapFloat::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCRemapFloat::IsValid() {
    return (m_ptr != nullptr);
}

GIGapHost_GameEntity::GIGapHost_GameEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GIGapHost_GameEntity::GIGapHost_GameEntity(void *ptr) {
    m_ptr = ptr;
}

std::string GIGapHost_GameEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GIGapHost_GameEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCFootstepTableHandle::GCFootstepTableHandle(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFootstepTableHandle::GCFootstepTableHandle(void *ptr) {
    m_ptr = ptr;
}

std::string GCFootstepTableHandle::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFootstepTableHandle::IsValid() {
    return (m_ptr != nullptr);
}

GCCSPlayerController_InventoryServices::GCCSPlayerController_InventoryServices(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSPlayerController_InventoryServices::GCCSPlayerController_InventoryServices(void *ptr) {
    m_ptr = ptr;
}

uint16_t GCCSPlayerController_InventoryServices::GetMusicID() const {
    return GetSchemaValue<uint16_t>(m_ptr, "CCSPlayerController_InventoryServices", "m_unMusicID");
}

void GCCSPlayerController_InventoryServices::SetMusicID(uint16_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController_InventoryServices", "m_unMusicID", false, value);
}

std::vector<MedalRank_t> GCCSPlayerController_InventoryServices::GetRank() const {
    MedalRank_t* outValue = GetSchemaValue<MedalRank_t*>(m_ptr, "CCSPlayerController_InventoryServices", "m_rank"); std::vector<MedalRank_t> ret; for(int i = 0; i < 6; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCCSPlayerController_InventoryServices::SetRank(std::vector<MedalRank_t> value) {
    MedalRank_t* outValue = GetSchemaValue<MedalRank_t*>(m_ptr, "CCSPlayerController_InventoryServices", "m_rank"); for(int i = 0; i < 6; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CCSPlayerController_InventoryServices", "m_rank", false, outValue);
}

int32_t GCCSPlayerController_InventoryServices::GetPersonaDataPublicLevel() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController_InventoryServices", "m_nPersonaDataPublicLevel");
}

void GCCSPlayerController_InventoryServices::SetPersonaDataPublicLevel(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController_InventoryServices", "m_nPersonaDataPublicLevel", false, value);
}

int32_t GCCSPlayerController_InventoryServices::GetPersonaDataPublicCommendsLeader() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController_InventoryServices", "m_nPersonaDataPublicCommendsLeader");
}

void GCCSPlayerController_InventoryServices::SetPersonaDataPublicCommendsLeader(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController_InventoryServices", "m_nPersonaDataPublicCommendsLeader", false, value);
}

int32_t GCCSPlayerController_InventoryServices::GetPersonaDataPublicCommendsTeacher() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController_InventoryServices", "m_nPersonaDataPublicCommendsTeacher");
}

void GCCSPlayerController_InventoryServices::SetPersonaDataPublicCommendsTeacher(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController_InventoryServices", "m_nPersonaDataPublicCommendsTeacher", false, value);
}

int32_t GCCSPlayerController_InventoryServices::GetPersonaDataPublicCommendsFriendly() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController_InventoryServices", "m_nPersonaDataPublicCommendsFriendly");
}

void GCCSPlayerController_InventoryServices::SetPersonaDataPublicCommendsFriendly(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController_InventoryServices", "m_nPersonaDataPublicCommendsFriendly", false, value);
}

int32_t GCCSPlayerController_InventoryServices::GetPersonaDataXpTrailLevel() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController_InventoryServices", "m_nPersonaDataXpTrailLevel");
}

void GCCSPlayerController_InventoryServices::SetPersonaDataXpTrailLevel(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayerController_InventoryServices", "m_nPersonaDataXpTrailLevel", false, value);
}

std::vector<uint32_t> GCCSPlayerController_InventoryServices::GetEquippedPlayerSprayIDs() const {
    uint32_t* outValue = GetSchemaValue<uint32_t*>(m_ptr, "CCSPlayerController_InventoryServices", "m_unEquippedPlayerSprayIDs"); std::vector<uint32_t> ret; for(int i = 0; i < 1; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCCSPlayerController_InventoryServices::SetEquippedPlayerSprayIDs(std::vector<uint32_t> value) {
    uint32_t* outValue = GetSchemaValue<uint32_t*>(m_ptr, "CCSPlayerController_InventoryServices", "m_unEquippedPlayerSprayIDs"); for(int i = 0; i < 1; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CCSPlayerController_InventoryServices", "m_unEquippedPlayerSprayIDs", false, outValue);
}

std::vector<GServerAuthoritativeWeaponSlot_t> GCCSPlayerController_InventoryServices::GetServerAuthoritativeWeaponSlots() const {
    CUtlVector<GServerAuthoritativeWeaponSlot_t>* vec = GetSchemaValue<CUtlVector<GServerAuthoritativeWeaponSlot_t>*>(m_ptr, "CCSPlayerController_InventoryServices", "m_vecServerAuthoritativeWeaponSlots"); std::vector<GServerAuthoritativeWeaponSlot_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCCSPlayerController_InventoryServices::SetServerAuthoritativeWeaponSlots(std::vector<GServerAuthoritativeWeaponSlot_t> value) {
    SetSchemaValueCUtlVector<GServerAuthoritativeWeaponSlot_t>(m_ptr, "CCSPlayerController_InventoryServices", "m_vecServerAuthoritativeWeaponSlots", false, value);
}

std::string GCCSPlayerController_InventoryServices::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSPlayerController_InventoryServices::IsValid() {
    return (m_ptr != nullptr);
}

GCResponseQueue::GCResponseQueue(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCResponseQueue::GCResponseQueue(void *ptr) {
    m_ptr = ptr;
}

std::vector<GCAI_Expresser*> GCResponseQueue::GetExpresserTargets() const {
    CUtlVector<GCAI_Expresser*>* vec = GetSchemaValue<CUtlVector<GCAI_Expresser*>*>(m_ptr, "CResponseQueue", "m_ExpresserTargets"); std::vector<GCAI_Expresser*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCResponseQueue::SetExpresserTargets(std::vector<GCAI_Expresser*> value) {
    SetSchemaValueCUtlVector<GCAI_Expresser*>(m_ptr, "CResponseQueue", "m_ExpresserTargets", false, value);
}

std::string GCResponseQueue::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCResponseQueue::IsValid() {
    return (m_ptr != nullptr);
}

GCScriptUniformRandomStream::GCScriptUniformRandomStream(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCScriptUniformRandomStream::GCScriptUniformRandomStream(void *ptr) {
    m_ptr = ptr;
}

int32_t GCScriptUniformRandomStream::GetInitialSeed() const {
    return GetSchemaValue<int32_t>(m_ptr, "CScriptUniformRandomStream", "m_nInitialSeed");
}

void GCScriptUniformRandomStream::SetInitialSeed(int32_t value) {
    SetSchemaValue(m_ptr, "CScriptUniformRandomStream", "m_nInitialSeed", false, value);
}

std::string GCScriptUniformRandomStream::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCScriptUniformRandomStream::IsValid() {
    return (m_ptr != nullptr);
}

GParticleIndex_t::GParticleIndex_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GParticleIndex_t::GParticleIndex_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GParticleIndex_t::GetValue() const {
    return GetSchemaValue<int32_t>(m_ptr, "ParticleIndex_t", "m_Value");
}

void GParticleIndex_t::SetValue(int32_t value) {
    SetSchemaValue(m_ptr, "ParticleIndex_t", "m_Value", true, value);
}

std::string GParticleIndex_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GParticleIndex_t::IsValid() {
    return (m_ptr != nullptr);
}

GCPhysHinge::GCPhysHinge(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPhysHinge::GCPhysHinge(void *ptr) {
    m_ptr = ptr;
}

GConstraintSoundInfo GCPhysHinge::GetSoundInfo() const {
    return GetSchemaValue<GConstraintSoundInfo>(m_ptr, "CPhysHinge", "m_soundInfo");
}

void GCPhysHinge::SetSoundInfo(GConstraintSoundInfo value) {
    SetSchemaValue(m_ptr, "CPhysHinge", "m_soundInfo", false, value);
}

GCEntityIOOutput GCPhysHinge::GetNotifyMinLimitReached() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPhysHinge", "m_NotifyMinLimitReached");
}

void GCPhysHinge::SetNotifyMinLimitReached(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPhysHinge", "m_NotifyMinLimitReached", false, value);
}

GCEntityIOOutput GCPhysHinge::GetNotifyMaxLimitReached() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPhysHinge", "m_NotifyMaxLimitReached");
}

void GCPhysHinge::SetNotifyMaxLimitReached(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPhysHinge", "m_NotifyMaxLimitReached", false, value);
}

bool GCPhysHinge::GetAtMinLimit() const {
    return GetSchemaValue<bool>(m_ptr, "CPhysHinge", "m_bAtMinLimit");
}

void GCPhysHinge::SetAtMinLimit(bool value) {
    SetSchemaValue(m_ptr, "CPhysHinge", "m_bAtMinLimit", false, value);
}

bool GCPhysHinge::GetAtMaxLimit() const {
    return GetSchemaValue<bool>(m_ptr, "CPhysHinge", "m_bAtMaxLimit");
}

void GCPhysHinge::SetAtMaxLimit(bool value) {
    SetSchemaValue(m_ptr, "CPhysHinge", "m_bAtMaxLimit", false, value);
}

Gconstraint_hingeparams_t GCPhysHinge::GetHinge() const {
    return GetSchemaValue<Gconstraint_hingeparams_t>(m_ptr, "CPhysHinge", "m_hinge");
}

void GCPhysHinge::SetHinge(Gconstraint_hingeparams_t value) {
    SetSchemaValue(m_ptr, "CPhysHinge", "m_hinge", false, value);
}

float GCPhysHinge::GetHingeFriction() const {
    return GetSchemaValue<float>(m_ptr, "CPhysHinge", "m_hingeFriction");
}

void GCPhysHinge::SetHingeFriction(float value) {
    SetSchemaValue(m_ptr, "CPhysHinge", "m_hingeFriction", false, value);
}

float GCPhysHinge::GetSystemLoadScale() const {
    return GetSchemaValue<float>(m_ptr, "CPhysHinge", "m_systemLoadScale");
}

void GCPhysHinge::SetSystemLoadScale(float value) {
    SetSchemaValue(m_ptr, "CPhysHinge", "m_systemLoadScale", false, value);
}

bool GCPhysHinge::GetIsAxisLocal() const {
    return GetSchemaValue<bool>(m_ptr, "CPhysHinge", "m_bIsAxisLocal");
}

void GCPhysHinge::SetIsAxisLocal(bool value) {
    SetSchemaValue(m_ptr, "CPhysHinge", "m_bIsAxisLocal", false, value);
}

float GCPhysHinge::GetMinRotation() const {
    return GetSchemaValue<float>(m_ptr, "CPhysHinge", "m_flMinRotation");
}

void GCPhysHinge::SetMinRotation(float value) {
    SetSchemaValue(m_ptr, "CPhysHinge", "m_flMinRotation", false, value);
}

float GCPhysHinge::GetMaxRotation() const {
    return GetSchemaValue<float>(m_ptr, "CPhysHinge", "m_flMaxRotation");
}

void GCPhysHinge::SetMaxRotation(float value) {
    SetSchemaValue(m_ptr, "CPhysHinge", "m_flMaxRotation", false, value);
}

float GCPhysHinge::GetInitialRotation() const {
    return GetSchemaValue<float>(m_ptr, "CPhysHinge", "m_flInitialRotation");
}

void GCPhysHinge::SetInitialRotation(float value) {
    SetSchemaValue(m_ptr, "CPhysHinge", "m_flInitialRotation", false, value);
}

float GCPhysHinge::GetMotorFrequency() const {
    return GetSchemaValue<float>(m_ptr, "CPhysHinge", "m_flMotorFrequency");
}

void GCPhysHinge::SetMotorFrequency(float value) {
    SetSchemaValue(m_ptr, "CPhysHinge", "m_flMotorFrequency", false, value);
}

float GCPhysHinge::GetMotorDampingRatio() const {
    return GetSchemaValue<float>(m_ptr, "CPhysHinge", "m_flMotorDampingRatio");
}

void GCPhysHinge::SetMotorDampingRatio(float value) {
    SetSchemaValue(m_ptr, "CPhysHinge", "m_flMotorDampingRatio", false, value);
}

float GCPhysHinge::GetAngleSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CPhysHinge", "m_flAngleSpeed");
}

void GCPhysHinge::SetAngleSpeed(float value) {
    SetSchemaValue(m_ptr, "CPhysHinge", "m_flAngleSpeed", false, value);
}

float GCPhysHinge::GetAngleSpeedThreshold() const {
    return GetSchemaValue<float>(m_ptr, "CPhysHinge", "m_flAngleSpeedThreshold");
}

void GCPhysHinge::SetAngleSpeedThreshold(float value) {
    SetSchemaValue(m_ptr, "CPhysHinge", "m_flAngleSpeedThreshold", false, value);
}

GCEntityIOOutput GCPhysHinge::GetOnStartMoving() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPhysHinge", "m_OnStartMoving");
}

void GCPhysHinge::SetOnStartMoving(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPhysHinge", "m_OnStartMoving", false, value);
}

GCEntityIOOutput GCPhysHinge::GetOnStopMoving() const {
    return GetSchemaValue<GCEntityIOOutput>(m_ptr, "CPhysHinge", "m_OnStopMoving");
}

void GCPhysHinge::SetOnStopMoving(GCEntityIOOutput value) {
    SetSchemaValue(m_ptr, "CPhysHinge", "m_OnStopMoving", false, value);
}

std::string GCPhysHinge::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPhysHinge::IsValid() {
    return (m_ptr != nullptr);
}

GCSimpleSimTimer::GCSimpleSimTimer(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSimpleSimTimer::GCSimpleSimTimer(void *ptr) {
    m_ptr = ptr;
}

WorldGroupId_t GCSimpleSimTimer::GetWorldGroupId() const {
    return GetSchemaValue<WorldGroupId_t>(m_ptr, "CSimpleSimTimer", "m_nWorldGroupId");
}

void GCSimpleSimTimer::SetWorldGroupId(WorldGroupId_t value) {
    SetSchemaValue(m_ptr, "CSimpleSimTimer", "m_nWorldGroupId", false, value);
}

std::string GCSimpleSimTimer::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSimpleSimTimer::IsValid() {
    return (m_ptr != nullptr);
}

GCSkillDamage::GCSkillDamage(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSkillDamage::GCSkillDamage(void *ptr) {
    m_ptr = ptr;
}

GCSkillFloat GCSkillDamage::GetDamage() const {
    return GetSchemaValue<GCSkillFloat>(m_ptr, "CSkillDamage", "m_flDamage");
}

void GCSkillDamage::SetDamage(GCSkillFloat value) {
    SetSchemaValue(m_ptr, "CSkillDamage", "m_flDamage", false, value);
}

float GCSkillDamage::GetNPCDamageScalarVsNPC() const {
    return GetSchemaValue<float>(m_ptr, "CSkillDamage", "m_flNPCDamageScalarVsNPC");
}

void GCSkillDamage::SetNPCDamageScalarVsNPC(float value) {
    SetSchemaValue(m_ptr, "CSkillDamage", "m_flNPCDamageScalarVsNPC", false, value);
}

float GCSkillDamage::GetPhysicsForceDamage() const {
    return GetSchemaValue<float>(m_ptr, "CSkillDamage", "m_flPhysicsForceDamage");
}

void GCSkillDamage::SetPhysicsForceDamage(float value) {
    SetSchemaValue(m_ptr, "CSkillDamage", "m_flPhysicsForceDamage", false, value);
}

std::string GCSkillDamage::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSkillDamage::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimEventQueueListener::GCAnimEventQueueListener(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimEventQueueListener::GCAnimEventQueueListener(void *ptr) {
    m_ptr = ptr;
}

std::string GCAnimEventQueueListener::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimEventQueueListener::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvLaser::GCEnvLaser(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvLaser::GCEnvLaser(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCEnvLaser::GetLaserTarget() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvLaser", "m_iszLaserTarget");
}

void GCEnvLaser::SetLaserTarget(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEnvLaser", "m_iszLaserTarget", false, value);
}

GCSprite GCEnvLaser::GetSprite() const {
    GCSprite value(GetSchemaValuePtr<void>(m_ptr, "CEnvLaser", "m_pSprite"));
    return value;
}

void GCEnvLaser::SetSprite(GCSprite* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Sprite' is not possible.\n");
}

CUtlSymbolLarge GCEnvLaser::GetSpriteName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvLaser", "m_iszSpriteName");
}

void GCEnvLaser::SetSpriteName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEnvLaser", "m_iszSpriteName", false, value);
}

Vector GCEnvLaser::GetFirePosition() const {
    return GetSchemaValue<Vector>(m_ptr, "CEnvLaser", "m_firePosition");
}

void GCEnvLaser::SetFirePosition(Vector value) {
    SetSchemaValue(m_ptr, "CEnvLaser", "m_firePosition", false, value);
}

float GCEnvLaser::GetStartFrame() const {
    return GetSchemaValue<float>(m_ptr, "CEnvLaser", "m_flStartFrame");
}

void GCEnvLaser::SetStartFrame(float value) {
    SetSchemaValue(m_ptr, "CEnvLaser", "m_flStartFrame", false, value);
}

std::string GCEnvLaser::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvLaser::IsValid() {
    return (m_ptr != nullptr);
}

GCFiringModeFloat::GCFiringModeFloat(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFiringModeFloat::GCFiringModeFloat(void *ptr) {
    m_ptr = ptr;
}

std::vector<float> GCFiringModeFloat::GetValues() const {
    float* outValue = GetSchemaValue<float*>(m_ptr, "CFiringModeFloat", "m_flValues"); std::vector<float> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCFiringModeFloat::SetValues(std::vector<float> value) {
    float* outValue = GetSchemaValue<float*>(m_ptr, "CFiringModeFloat", "m_flValues"); for(int i = 0; i < 2; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CFiringModeFloat", "m_flValues", false, outValue);
}

std::string GCFiringModeFloat::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFiringModeFloat::IsValid() {
    return (m_ptr != nullptr);
}

GCRopeOverlapHit::GCRopeOverlapHit(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCRopeOverlapHit::GCRopeOverlapHit(void *ptr) {
    m_ptr = ptr;
}

GCBaseEntity GCRopeOverlapHit::GetEntity() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CRopeOverlapHit", "m_hEntity"));
    return value;
}

void GCRopeOverlapHit::SetEntity(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Entity' is not possible.\n");
}

std::vector<int32> GCRopeOverlapHit::GetOverlappingLinks() const {
    CUtlVector<int32>* vec = GetSchemaValue<CUtlVector<int32>*>(m_ptr, "CRopeOverlapHit", "m_vecOverlappingLinks"); std::vector<int32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCRopeOverlapHit::SetOverlappingLinks(std::vector<int32> value) {
    SetSchemaValueCUtlVector<int32>(m_ptr, "CRopeOverlapHit", "m_vecOverlappingLinks", false, value);
}

std::string GCRopeOverlapHit::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCRopeOverlapHit::IsValid() {
    return (m_ptr != nullptr);
}

GResponseContext_t::GResponseContext_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GResponseContext_t::GResponseContext_t(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GResponseContext_t::GetName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "ResponseContext_t", "m_iszName");
}

void GResponseContext_t::SetName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "ResponseContext_t", "m_iszName", true, value);
}

CUtlSymbolLarge GResponseContext_t::GetValue() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "ResponseContext_t", "m_iszValue");
}

void GResponseContext_t::SetValue(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "ResponseContext_t", "m_iszValue", true, value);
}

std::string GResponseContext_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GResponseContext_t::IsValid() {
    return (m_ptr != nullptr);
}

GCNavVolume::GCNavVolume(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNavVolume::GCNavVolume(void *ptr) {
    m_ptr = ptr;
}

std::string GCNavVolume::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNavVolume::IsValid() {
    return (m_ptr != nullptr);
}

GCCSObserver_MovementServices::GCCSObserver_MovementServices(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSObserver_MovementServices::GCCSObserver_MovementServices(void *ptr) {
    m_ptr = ptr;
}

std::string GCCSObserver_MovementServices::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSObserver_MovementServices::IsValid() {
    return (m_ptr != nullptr);
}

GCCSGOPlayerAnimGraphState::GCCSGOPlayerAnimGraphState(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSGOPlayerAnimGraphState::GCCSGOPlayerAnimGraphState(void *ptr) {
    m_ptr = ptr;
}

std::string GCCSGOPlayerAnimGraphState::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSGOPlayerAnimGraphState::IsValid() {
    return (m_ptr != nullptr);
}

GCGameScriptedMoveData::GCGameScriptedMoveData(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCGameScriptedMoveData::GCGameScriptedMoveData(void *ptr) {
    m_ptr = ptr;
}

Vector GCGameScriptedMoveData::GetAccumulatedRootMotion() const {
    return GetSchemaValue<Vector>(m_ptr, "CGameScriptedMoveData", "m_vAccumulatedRootMotion");
}

void GCGameScriptedMoveData::SetAccumulatedRootMotion(Vector value) {
    SetSchemaValue(m_ptr, "CGameScriptedMoveData", "m_vAccumulatedRootMotion", false, value);
}

Vector GCGameScriptedMoveData::GetDest() const {
    return GetSchemaValue<Vector>(m_ptr, "CGameScriptedMoveData", "m_vDest");
}

void GCGameScriptedMoveData::SetDest(Vector value) {
    SetSchemaValue(m_ptr, "CGameScriptedMoveData", "m_vDest", false, value);
}

Vector GCGameScriptedMoveData::GetSrc() const {
    return GetSchemaValue<Vector>(m_ptr, "CGameScriptedMoveData", "m_vSrc");
}

void GCGameScriptedMoveData::SetSrc(Vector value) {
    SetSchemaValue(m_ptr, "CGameScriptedMoveData", "m_vSrc", false, value);
}

QAngle GCGameScriptedMoveData::GetSrc1() const {
    return GetSchemaValue<QAngle>(m_ptr, "CGameScriptedMoveData", "m_angSrc");
}

void GCGameScriptedMoveData::SetSrc1(QAngle value) {
    SetSchemaValue(m_ptr, "CGameScriptedMoveData", "m_angSrc", false, value);
}

QAngle GCGameScriptedMoveData::GetDst() const {
    return GetSchemaValue<QAngle>(m_ptr, "CGameScriptedMoveData", "m_angDst");
}

void GCGameScriptedMoveData::SetDst(QAngle value) {
    SetSchemaValue(m_ptr, "CGameScriptedMoveData", "m_angDst", false, value);
}

QAngle GCGameScriptedMoveData::GetCurrent() const {
    return GetSchemaValue<QAngle>(m_ptr, "CGameScriptedMoveData", "m_angCurrent");
}

void GCGameScriptedMoveData::SetCurrent(QAngle value) {
    SetSchemaValue(m_ptr, "CGameScriptedMoveData", "m_angCurrent", false, value);
}

float GCGameScriptedMoveData::GetAngRate() const {
    return GetSchemaValue<float>(m_ptr, "CGameScriptedMoveData", "m_flAngRate");
}

void GCGameScriptedMoveData::SetAngRate(float value) {
    SetSchemaValue(m_ptr, "CGameScriptedMoveData", "m_flAngRate", false, value);
}

float GCGameScriptedMoveData::GetDuration() const {
    return GetSchemaValue<float>(m_ptr, "CGameScriptedMoveData", "m_flDuration");
}

void GCGameScriptedMoveData::SetDuration(float value) {
    SetSchemaValue(m_ptr, "CGameScriptedMoveData", "m_flDuration", false, value);
}

bool GCGameScriptedMoveData::GetActive() const {
    return GetSchemaValue<bool>(m_ptr, "CGameScriptedMoveData", "m_bActive");
}

void GCGameScriptedMoveData::SetActive(bool value) {
    SetSchemaValue(m_ptr, "CGameScriptedMoveData", "m_bActive", false, value);
}

bool GCGameScriptedMoveData::GetTeleportOnEnd() const {
    return GetSchemaValue<bool>(m_ptr, "CGameScriptedMoveData", "m_bTeleportOnEnd");
}

void GCGameScriptedMoveData::SetTeleportOnEnd(bool value) {
    SetSchemaValue(m_ptr, "CGameScriptedMoveData", "m_bTeleportOnEnd", false, value);
}

bool GCGameScriptedMoveData::GetIgnoreRotation() const {
    return GetSchemaValue<bool>(m_ptr, "CGameScriptedMoveData", "m_bIgnoreRotation");
}

void GCGameScriptedMoveData::SetIgnoreRotation(bool value) {
    SetSchemaValue(m_ptr, "CGameScriptedMoveData", "m_bIgnoreRotation", false, value);
}

ScriptedMoveType_t GCGameScriptedMoveData::GetType() const {
    return GetSchemaValue<ScriptedMoveType_t>(m_ptr, "CGameScriptedMoveData", "m_nType");
}

void GCGameScriptedMoveData::SetType(ScriptedMoveType_t value) {
    SetSchemaValue(m_ptr, "CGameScriptedMoveData", "m_nType", false, value);
}

bool GCGameScriptedMoveData::GetSuccess() const {
    return GetSchemaValue<bool>(m_ptr, "CGameScriptedMoveData", "m_bSuccess");
}

void GCGameScriptedMoveData::SetSuccess(bool value) {
    SetSchemaValue(m_ptr, "CGameScriptedMoveData", "m_bSuccess", false, value);
}

ForcedCrouchState_t GCGameScriptedMoveData::GetForcedCrouchState() const {
    return GetSchemaValue<ForcedCrouchState_t>(m_ptr, "CGameScriptedMoveData", "m_nForcedCrouchState");
}

void GCGameScriptedMoveData::SetForcedCrouchState(ForcedCrouchState_t value) {
    SetSchemaValue(m_ptr, "CGameScriptedMoveData", "m_nForcedCrouchState", false, value);
}

bool GCGameScriptedMoveData::GetIgnoreCollisions() const {
    return GetSchemaValue<bool>(m_ptr, "CGameScriptedMoveData", "m_bIgnoreCollisions");
}

void GCGameScriptedMoveData::SetIgnoreCollisions(bool value) {
    SetSchemaValue(m_ptr, "CGameScriptedMoveData", "m_bIgnoreCollisions", false, value);
}

std::string GCGameScriptedMoveData::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCGameScriptedMoveData::IsValid() {
    return (m_ptr != nullptr);
}

GCBaseAnimGraphController::GCBaseAnimGraphController(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBaseAnimGraphController::GCBaseAnimGraphController(void *ptr) {
    m_ptr = ptr;
}

GCAnimGraphNetworkedVariables GCBaseAnimGraphController::GetAnimGraphNetworkedVars() const {
    return GetSchemaValue<GCAnimGraphNetworkedVariables>(m_ptr, "CBaseAnimGraphController", "m_animGraphNetworkedVars");
}

void GCBaseAnimGraphController::SetAnimGraphNetworkedVars(GCAnimGraphNetworkedVariables value) {
    SetSchemaValue(m_ptr, "CBaseAnimGraphController", "m_animGraphNetworkedVars", false, value);
}

bool GCBaseAnimGraphController::GetSequenceFinished() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseAnimGraphController", "m_bSequenceFinished");
}

void GCBaseAnimGraphController::SetSequenceFinished(bool value) {
    SetSchemaValue(m_ptr, "CBaseAnimGraphController", "m_bSequenceFinished", false, value);
}

float GCBaseAnimGraphController::GetSoundSyncTime() const {
    return GetSchemaValue<float>(m_ptr, "CBaseAnimGraphController", "m_flSoundSyncTime");
}

void GCBaseAnimGraphController::SetSoundSyncTime(float value) {
    SetSchemaValue(m_ptr, "CBaseAnimGraphController", "m_flSoundSyncTime", false, value);
}

uint32_t GCBaseAnimGraphController::GetActiveIKChainMask() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CBaseAnimGraphController", "m_nActiveIKChainMask");
}

void GCBaseAnimGraphController::SetActiveIKChainMask(uint32_t value) {
    SetSchemaValue(m_ptr, "CBaseAnimGraphController", "m_nActiveIKChainMask", false, value);
}

float GCBaseAnimGraphController::GetSeqFixedCycle() const {
    return GetSchemaValue<float>(m_ptr, "CBaseAnimGraphController", "m_flSeqFixedCycle");
}

void GCBaseAnimGraphController::SetSeqFixedCycle(float value) {
    SetSchemaValue(m_ptr, "CBaseAnimGraphController", "m_flSeqFixedCycle", false, value);
}

AnimLoopMode_t GCBaseAnimGraphController::GetAnimLoopMode() const {
    return GetSchemaValue<AnimLoopMode_t>(m_ptr, "CBaseAnimGraphController", "m_nAnimLoopMode");
}

void GCBaseAnimGraphController::SetAnimLoopMode(AnimLoopMode_t value) {
    SetSchemaValue(m_ptr, "CBaseAnimGraphController", "m_nAnimLoopMode", false, value);
}

float GCBaseAnimGraphController::GetPlaybackRate() const {
    return GetSchemaValue<float>(m_ptr, "CBaseAnimGraphController", "m_flPlaybackRate");
}

void GCBaseAnimGraphController::SetPlaybackRate(float value) {
    SetSchemaValue(m_ptr, "CBaseAnimGraphController", "m_flPlaybackRate", false, value);
}

SequenceFinishNotifyState_t GCBaseAnimGraphController::GetNotifyState() const {
    return GetSchemaValue<SequenceFinishNotifyState_t>(m_ptr, "CBaseAnimGraphController", "m_nNotifyState");
}

void GCBaseAnimGraphController::SetNotifyState(SequenceFinishNotifyState_t value) {
    SetSchemaValue(m_ptr, "CBaseAnimGraphController", "m_nNotifyState", false, value);
}

bool GCBaseAnimGraphController::GetNetworkedAnimationInputsChanged() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseAnimGraphController", "m_bNetworkedAnimationInputsChanged");
}

void GCBaseAnimGraphController::SetNetworkedAnimationInputsChanged(bool value) {
    SetSchemaValue(m_ptr, "CBaseAnimGraphController", "m_bNetworkedAnimationInputsChanged", false, value);
}

bool GCBaseAnimGraphController::GetNetworkedSequenceChanged() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseAnimGraphController", "m_bNetworkedSequenceChanged");
}

void GCBaseAnimGraphController::SetNetworkedSequenceChanged(bool value) {
    SetSchemaValue(m_ptr, "CBaseAnimGraphController", "m_bNetworkedSequenceChanged", false, value);
}

bool GCBaseAnimGraphController::GetLastUpdateSkipped() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseAnimGraphController", "m_bLastUpdateSkipped");
}

void GCBaseAnimGraphController::SetLastUpdateSkipped(bool value) {
    SetSchemaValue(m_ptr, "CBaseAnimGraphController", "m_bLastUpdateSkipped", false, value);
}

std::string GCBaseAnimGraphController::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBaseAnimGraphController::IsValid() {
    return (m_ptr != nullptr);
}

GCNavVolumeSphere::GCNavVolumeSphere(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNavVolumeSphere::GCNavVolumeSphere(void *ptr) {
    m_ptr = ptr;
}

Vector GCNavVolumeSphere::GetCenter() const {
    return GetSchemaValue<Vector>(m_ptr, "CNavVolumeSphere", "m_vCenter");
}

void GCNavVolumeSphere::SetCenter(Vector value) {
    SetSchemaValue(m_ptr, "CNavVolumeSphere", "m_vCenter", false, value);
}

float GCNavVolumeSphere::GetRadius() const {
    return GetSchemaValue<float>(m_ptr, "CNavVolumeSphere", "m_flRadius");
}

void GCNavVolumeSphere::SetRadius(float value) {
    SetSchemaValue(m_ptr, "CNavVolumeSphere", "m_flRadius", false, value);
}

std::string GCNavVolumeSphere::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNavVolumeSphere::IsValid() {
    return (m_ptr != nullptr);
}

GCResponseCriteriaSet::GCResponseCriteriaSet(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCResponseCriteriaSet::GCResponseCriteriaSet(void *ptr) {
    m_ptr = ptr;
}

int32_t GCResponseCriteriaSet::GetNumPrefixedContexts() const {
    return GetSchemaValue<int32_t>(m_ptr, "CResponseCriteriaSet", "m_nNumPrefixedContexts");
}

void GCResponseCriteriaSet::SetNumPrefixedContexts(int32_t value) {
    SetSchemaValue(m_ptr, "CResponseCriteriaSet", "m_nNumPrefixedContexts", false, value);
}

bool GCResponseCriteriaSet::GetOverrideOnAppend() const {
    return GetSchemaValue<bool>(m_ptr, "CResponseCriteriaSet", "m_bOverrideOnAppend");
}

void GCResponseCriteriaSet::SetOverrideOnAppend(bool value) {
    SetSchemaValue(m_ptr, "CResponseCriteriaSet", "m_bOverrideOnAppend", false, value);
}

std::string GCResponseCriteriaSet::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCResponseCriteriaSet::IsValid() {
    return (m_ptr != nullptr);
}

GCAI_Expresser::GCAI_Expresser(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAI_Expresser::GCAI_Expresser(void *ptr) {
    m_ptr = ptr;
}

int32_t GCAI_Expresser::GetVoicePitch() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAI_Expresser", "m_voicePitch");
}

void GCAI_Expresser::SetVoicePitch(int32_t value) {
    SetSchemaValue(m_ptr, "CAI_Expresser", "m_voicePitch", false, value);
}

bool GCAI_Expresser::GetAllowSpeakingInterrupts() const {
    return GetSchemaValue<bool>(m_ptr, "CAI_Expresser", "m_bAllowSpeakingInterrupts");
}

void GCAI_Expresser::SetAllowSpeakingInterrupts(bool value) {
    SetSchemaValue(m_ptr, "CAI_Expresser", "m_bAllowSpeakingInterrupts", false, value);
}

bool GCAI_Expresser::GetConsiderSceneInvolvementAsSpeech() const {
    return GetSchemaValue<bool>(m_ptr, "CAI_Expresser", "m_bConsiderSceneInvolvementAsSpeech");
}

void GCAI_Expresser::SetConsiderSceneInvolvementAsSpeech(bool value) {
    SetSchemaValue(m_ptr, "CAI_Expresser", "m_bConsiderSceneInvolvementAsSpeech", false, value);
}

bool GCAI_Expresser::GetSceneEntityDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CAI_Expresser", "m_bSceneEntityDisabled");
}

void GCAI_Expresser::SetSceneEntityDisabled(bool value) {
    SetSchemaValue(m_ptr, "CAI_Expresser", "m_bSceneEntityDisabled", false, value);
}

int32_t GCAI_Expresser::GetLastSpokenPriority() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAI_Expresser", "m_nLastSpokenPriority");
}

void GCAI_Expresser::SetLastSpokenPriority(int32_t value) {
    SetSchemaValue(m_ptr, "CAI_Expresser", "m_nLastSpokenPriority", false, value);
}

GCBaseFlex GCAI_Expresser::GetOuter() const {
    GCBaseFlex value(GetSchemaValuePtr<void>(m_ptr, "CAI_Expresser", "m_pOuter"));
    return value;
}

void GCAI_Expresser::SetOuter(GCBaseFlex* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Outer' is not possible.\n");
}

std::string GCAI_Expresser::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAI_Expresser::IsValid() {
    return (m_ptr != nullptr);
}

GIChoreoServices::GIChoreoServices(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GIChoreoServices::GIChoreoServices(void *ptr) {
    m_ptr = ptr;
}

std::string GIChoreoServices::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GIChoreoServices::IsValid() {
    return (m_ptr != nullptr);
}

GCStopwatchBase::GCStopwatchBase(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCStopwatchBase::GCStopwatchBase(void *ptr) {
    m_ptr = ptr;
}

bool GCStopwatchBase::GetIsRunning() const {
    return GetSchemaValue<bool>(m_ptr, "CStopwatchBase", "m_fIsRunning");
}

void GCStopwatchBase::SetIsRunning(bool value) {
    SetSchemaValue(m_ptr, "CStopwatchBase", "m_fIsRunning", false, value);
}

std::string GCStopwatchBase::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCStopwatchBase::IsValid() {
    return (m_ptr != nullptr);
}

GResponseParams::GResponseParams(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GResponseParams::GResponseParams(void *ptr) {
    m_ptr = ptr;
}

int16_t GResponseParams::GetOdds() const {
    return GetSchemaValue<int16_t>(m_ptr, "ResponseParams", "odds");
}

void GResponseParams::SetOdds(int16_t value) {
    SetSchemaValue(m_ptr, "ResponseParams", "odds", false, value);
}

int16_t GResponseParams::GetFlags() const {
    return GetSchemaValue<int16_t>(m_ptr, "ResponseParams", "flags");
}

void GResponseParams::SetFlags(int16_t value) {
    SetSchemaValue(m_ptr, "ResponseParams", "flags", false, value);
}

GResponseFollowup GResponseParams::GetFollowup() const {
    GResponseFollowup value(GetSchemaValuePtr<void>(m_ptr, "ResponseParams", "m_pFollowup"));
    return value;
}

void GResponseParams::SetFollowup(GResponseFollowup* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Followup' is not possible.\n");
}

std::string GResponseParams::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GResponseParams::IsValid() {
    return (m_ptr != nullptr);
}

GCItem_Healthshot::GCItem_Healthshot(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCItem_Healthshot::GCItem_Healthshot(void *ptr) {
    m_ptr = ptr;
}

std::string GCItem_Healthshot::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCItem_Healthshot::IsValid() {
    return (m_ptr != nullptr);
}

GCPhysHingeAlias_phys_hinge_local::GCPhysHingeAlias_phys_hinge_local(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPhysHingeAlias_phys_hinge_local::GCPhysHingeAlias_phys_hinge_local(void *ptr) {
    m_ptr = ptr;
}

std::string GCPhysHingeAlias_phys_hinge_local::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPhysHingeAlias_phys_hinge_local::IsValid() {
    return (m_ptr != nullptr);
}

GPointCameraSettings_t::GPointCameraSettings_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GPointCameraSettings_t::GPointCameraSettings_t(void *ptr) {
    m_ptr = ptr;
}

float GPointCameraSettings_t::GetNearBlurryDistance() const {
    return GetSchemaValue<float>(m_ptr, "PointCameraSettings_t", "m_flNearBlurryDistance");
}

void GPointCameraSettings_t::SetNearBlurryDistance(float value) {
    SetSchemaValue(m_ptr, "PointCameraSettings_t", "m_flNearBlurryDistance", true, value);
}

float GPointCameraSettings_t::GetNearCrispDistance() const {
    return GetSchemaValue<float>(m_ptr, "PointCameraSettings_t", "m_flNearCrispDistance");
}

void GPointCameraSettings_t::SetNearCrispDistance(float value) {
    SetSchemaValue(m_ptr, "PointCameraSettings_t", "m_flNearCrispDistance", true, value);
}

float GPointCameraSettings_t::GetFarCrispDistance() const {
    return GetSchemaValue<float>(m_ptr, "PointCameraSettings_t", "m_flFarCrispDistance");
}

void GPointCameraSettings_t::SetFarCrispDistance(float value) {
    SetSchemaValue(m_ptr, "PointCameraSettings_t", "m_flFarCrispDistance", true, value);
}

float GPointCameraSettings_t::GetFarBlurryDistance() const {
    return GetSchemaValue<float>(m_ptr, "PointCameraSettings_t", "m_flFarBlurryDistance");
}

void GPointCameraSettings_t::SetFarBlurryDistance(float value) {
    SetSchemaValue(m_ptr, "PointCameraSettings_t", "m_flFarBlurryDistance", true, value);
}

std::string GPointCameraSettings_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GPointCameraSettings_t::IsValid() {
    return (m_ptr != nullptr);
}

GCSoundEnvelope::GCSoundEnvelope(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSoundEnvelope::GCSoundEnvelope(void *ptr) {
    m_ptr = ptr;
}

float GCSoundEnvelope::GetCurrent() const {
    return GetSchemaValue<float>(m_ptr, "CSoundEnvelope", "m_current");
}

void GCSoundEnvelope::SetCurrent(float value) {
    SetSchemaValue(m_ptr, "CSoundEnvelope", "m_current", false, value);
}

float GCSoundEnvelope::GetTarget() const {
    return GetSchemaValue<float>(m_ptr, "CSoundEnvelope", "m_target");
}

void GCSoundEnvelope::SetTarget(float value) {
    SetSchemaValue(m_ptr, "CSoundEnvelope", "m_target", false, value);
}

float GCSoundEnvelope::GetRate() const {
    return GetSchemaValue<float>(m_ptr, "CSoundEnvelope", "m_rate");
}

void GCSoundEnvelope::SetRate(float value) {
    SetSchemaValue(m_ptr, "CSoundEnvelope", "m_rate", false, value);
}

bool GCSoundEnvelope::GetForceupdate() const {
    return GetSchemaValue<bool>(m_ptr, "CSoundEnvelope", "m_forceupdate");
}

void GCSoundEnvelope::SetForceupdate(bool value) {
    SetSchemaValue(m_ptr, "CSoundEnvelope", "m_forceupdate", false, value);
}

std::string GCSoundEnvelope::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSoundEnvelope::IsValid() {
    return (m_ptr != nullptr);
}

Gdynpitchvol_t::Gdynpitchvol_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

Gdynpitchvol_t::Gdynpitchvol_t(void *ptr) {
    m_ptr = ptr;
}

std::string Gdynpitchvol_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool Gdynpitchvol_t::IsValid() {
    return (m_ptr != nullptr);
}

GCStopwatch::GCStopwatch(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCStopwatch::GCStopwatch(void *ptr) {
    m_ptr = ptr;
}

float GCStopwatch::GetInterval() const {
    return GetSchemaValue<float>(m_ptr, "CStopwatch", "m_interval");
}

void GCStopwatch::SetInterval(float value) {
    SetSchemaValue(m_ptr, "CStopwatch", "m_interval", false, value);
}

std::string GCStopwatch::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCStopwatch::IsValid() {
    return (m_ptr != nullptr);
}

GCNavVolumeVector::GCNavVolumeVector(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNavVolumeVector::GCNavVolumeVector(void *ptr) {
    m_ptr = ptr;
}

bool GCNavVolumeVector::GetHasBeenPreFiltered() const {
    return GetSchemaValue<bool>(m_ptr, "CNavVolumeVector", "m_bHasBeenPreFiltered");
}

void GCNavVolumeVector::SetHasBeenPreFiltered(bool value) {
    SetSchemaValue(m_ptr, "CNavVolumeVector", "m_bHasBeenPreFiltered", false, value);
}

std::string GCNavVolumeVector::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNavVolumeVector::IsValid() {
    return (m_ptr != nullptr);
}

GNavGravity_t::GNavGravity_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GNavGravity_t::GNavGravity_t(void *ptr) {
    m_ptr = ptr;
}

Vector GNavGravity_t::GetGravity() const {
    return GetSchemaValue<Vector>(m_ptr, "NavGravity_t", "m_vGravity");
}

void GNavGravity_t::SetGravity(Vector value) {
    SetSchemaValue(m_ptr, "NavGravity_t", "m_vGravity", true, value);
}

bool GNavGravity_t::GetDefault() const {
    return GetSchemaValue<bool>(m_ptr, "NavGravity_t", "m_bDefault");
}

void GNavGravity_t::SetDefault(bool value) {
    SetSchemaValue(m_ptr, "NavGravity_t", "m_bDefault", true, value);
}

std::string GNavGravity_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GNavGravity_t::IsValid() {
    return (m_ptr != nullptr);
}

GCEnvShake::GCEnvShake(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnvShake::GCEnvShake(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCEnvShake::GetLimitToEntity() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvShake", "m_limitToEntity");
}

void GCEnvShake::SetLimitToEntity(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CEnvShake", "m_limitToEntity", false, value);
}

float GCEnvShake::GetAmplitude() const {
    return GetSchemaValue<float>(m_ptr, "CEnvShake", "m_Amplitude");
}

void GCEnvShake::SetAmplitude(float value) {
    SetSchemaValue(m_ptr, "CEnvShake", "m_Amplitude", false, value);
}

float GCEnvShake::GetFrequency() const {
    return GetSchemaValue<float>(m_ptr, "CEnvShake", "m_Frequency");
}

void GCEnvShake::SetFrequency(float value) {
    SetSchemaValue(m_ptr, "CEnvShake", "m_Frequency", false, value);
}

float GCEnvShake::GetDuration() const {
    return GetSchemaValue<float>(m_ptr, "CEnvShake", "m_Duration");
}

void GCEnvShake::SetDuration(float value) {
    SetSchemaValue(m_ptr, "CEnvShake", "m_Duration", false, value);
}

float GCEnvShake::GetRadius() const {
    return GetSchemaValue<float>(m_ptr, "CEnvShake", "m_Radius");
}

void GCEnvShake::SetRadius(float value) {
    SetSchemaValue(m_ptr, "CEnvShake", "m_Radius", false, value);
}

float GCEnvShake::GetCurrentAmp() const {
    return GetSchemaValue<float>(m_ptr, "CEnvShake", "m_currentAmp");
}

void GCEnvShake::SetCurrentAmp(float value) {
    SetSchemaValue(m_ptr, "CEnvShake", "m_currentAmp", false, value);
}

Vector GCEnvShake::GetMaxForce() const {
    return GetSchemaValue<Vector>(m_ptr, "CEnvShake", "m_maxForce");
}

void GCEnvShake::SetMaxForce(Vector value) {
    SetSchemaValue(m_ptr, "CEnvShake", "m_maxForce", false, value);
}

GCPhysicsShake GCEnvShake::GetShakeCallback() const {
    return GetSchemaValue<GCPhysicsShake>(m_ptr, "CEnvShake", "m_shakeCallback");
}

void GCEnvShake::SetShakeCallback(GCPhysicsShake value) {
    SetSchemaValue(m_ptr, "CEnvShake", "m_shakeCallback", false, value);
}

std::string GCEnvShake::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnvShake::IsValid() {
    return (m_ptr != nullptr);
}

GCPhysSlideConstraint::GCPhysSlideConstraint(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPhysSlideConstraint::GCPhysSlideConstraint(void *ptr) {
    m_ptr = ptr;
}

Vector GCPhysSlideConstraint::GetAxisEnd() const {
    return GetSchemaValue<Vector>(m_ptr, "CPhysSlideConstraint", "m_axisEnd");
}

void GCPhysSlideConstraint::SetAxisEnd(Vector value) {
    SetSchemaValue(m_ptr, "CPhysSlideConstraint", "m_axisEnd", false, value);
}

float GCPhysSlideConstraint::GetSlideFriction() const {
    return GetSchemaValue<float>(m_ptr, "CPhysSlideConstraint", "m_slideFriction");
}

void GCPhysSlideConstraint::SetSlideFriction(float value) {
    SetSchemaValue(m_ptr, "CPhysSlideConstraint", "m_slideFriction", false, value);
}

float GCPhysSlideConstraint::GetSystemLoadScale() const {
    return GetSchemaValue<float>(m_ptr, "CPhysSlideConstraint", "m_systemLoadScale");
}

void GCPhysSlideConstraint::SetSystemLoadScale(float value) {
    SetSchemaValue(m_ptr, "CPhysSlideConstraint", "m_systemLoadScale", false, value);
}

float GCPhysSlideConstraint::GetInitialOffset() const {
    return GetSchemaValue<float>(m_ptr, "CPhysSlideConstraint", "m_initialOffset");
}

void GCPhysSlideConstraint::SetInitialOffset(float value) {
    SetSchemaValue(m_ptr, "CPhysSlideConstraint", "m_initialOffset", false, value);
}

bool GCPhysSlideConstraint::GetEnableLinearConstraint() const {
    return GetSchemaValue<bool>(m_ptr, "CPhysSlideConstraint", "m_bEnableLinearConstraint");
}

void GCPhysSlideConstraint::SetEnableLinearConstraint(bool value) {
    SetSchemaValue(m_ptr, "CPhysSlideConstraint", "m_bEnableLinearConstraint", false, value);
}

bool GCPhysSlideConstraint::GetEnableAngularConstraint() const {
    return GetSchemaValue<bool>(m_ptr, "CPhysSlideConstraint", "m_bEnableAngularConstraint");
}

void GCPhysSlideConstraint::SetEnableAngularConstraint(bool value) {
    SetSchemaValue(m_ptr, "CPhysSlideConstraint", "m_bEnableAngularConstraint", false, value);
}

float GCPhysSlideConstraint::GetMotorFrequency() const {
    return GetSchemaValue<float>(m_ptr, "CPhysSlideConstraint", "m_flMotorFrequency");
}

void GCPhysSlideConstraint::SetMotorFrequency(float value) {
    SetSchemaValue(m_ptr, "CPhysSlideConstraint", "m_flMotorFrequency", false, value);
}

float GCPhysSlideConstraint::GetMotorDampingRatio() const {
    return GetSchemaValue<float>(m_ptr, "CPhysSlideConstraint", "m_flMotorDampingRatio");
}

void GCPhysSlideConstraint::SetMotorDampingRatio(float value) {
    SetSchemaValue(m_ptr, "CPhysSlideConstraint", "m_flMotorDampingRatio", false, value);
}

bool GCPhysSlideConstraint::GetUseEntityPivot() const {
    return GetSchemaValue<bool>(m_ptr, "CPhysSlideConstraint", "m_bUseEntityPivot");
}

void GCPhysSlideConstraint::SetUseEntityPivot(bool value) {
    SetSchemaValue(m_ptr, "CPhysSlideConstraint", "m_bUseEntityPivot", false, value);
}

GConstraintSoundInfo GCPhysSlideConstraint::GetSoundInfo() const {
    return GetSchemaValue<GConstraintSoundInfo>(m_ptr, "CPhysSlideConstraint", "m_soundInfo");
}

void GCPhysSlideConstraint::SetSoundInfo(GConstraintSoundInfo value) {
    SetSchemaValue(m_ptr, "CPhysSlideConstraint", "m_soundInfo", false, value);
}

std::string GCPhysSlideConstraint::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPhysSlideConstraint::IsValid() {
    return (m_ptr != nullptr);
}

GCSound::GCSound(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSound::GCSound(void *ptr) {
    m_ptr = ptr;
}

GCBaseEntity GCSound::GetOwner() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CSound", "m_hOwner"));
    return value;
}

void GCSound::SetOwner(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Owner' is not possible.\n");
}

GCBaseEntity GCSound::GetTarget() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CSound", "m_hTarget"));
    return value;
}

void GCSound::SetTarget(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Target' is not possible.\n");
}

int32_t GCSound::GetVolume() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSound", "m_iVolume");
}

void GCSound::SetVolume(int32_t value) {
    SetSchemaValue(m_ptr, "CSound", "m_iVolume", false, value);
}

float GCSound::GetOcclusionScale() const {
    return GetSchemaValue<float>(m_ptr, "CSound", "m_flOcclusionScale");
}

void GCSound::SetOcclusionScale(float value) {
    SetSchemaValue(m_ptr, "CSound", "m_flOcclusionScale", false, value);
}

int32_t GCSound::GetNextAudible() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSound", "m_iNextAudible");
}

void GCSound::SetNextAudible(int32_t value) {
    SetSchemaValue(m_ptr, "CSound", "m_iNextAudible", false, value);
}

int16_t GCSound::GetNext() const {
    return GetSchemaValue<int16_t>(m_ptr, "CSound", "m_iNext");
}

void GCSound::SetNext(int16_t value) {
    SetSchemaValue(m_ptr, "CSound", "m_iNext", false, value);
}

bool GCSound::GetNoExpirationTime() const {
    return GetSchemaValue<bool>(m_ptr, "CSound", "m_bNoExpirationTime");
}

void GCSound::SetNoExpirationTime(bool value) {
    SetSchemaValue(m_ptr, "CSound", "m_bNoExpirationTime", false, value);
}

int32_t GCSound::GetOwnerChannelIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSound", "m_ownerChannelIndex");
}

void GCSound::SetOwnerChannelIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CSound", "m_ownerChannelIndex", false, value);
}

Vector GCSound::GetOrigin() const {
    return GetSchemaValue<Vector>(m_ptr, "CSound", "m_vecOrigin");
}

void GCSound::SetOrigin(Vector value) {
    SetSchemaValue(m_ptr, "CSound", "m_vecOrigin", false, value);
}

bool GCSound::GetHasOwner() const {
    return GetSchemaValue<bool>(m_ptr, "CSound", "m_bHasOwner");
}

void GCSound::SetHasOwner(bool value) {
    SetSchemaValue(m_ptr, "CSound", "m_bHasOwner", false, value);
}

std::string GCSound::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSound::IsValid() {
    return (m_ptr != nullptr);
}

GCTakeDamageResult::GCTakeDamageResult(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTakeDamageResult::GCTakeDamageResult(void *ptr) {
    m_ptr = ptr;
}

GCTakeDamageInfo GCTakeDamageResult::GetOriginatingInfo() const {
    GCTakeDamageInfo value(GetSchemaValuePtr<void>(m_ptr, "CTakeDamageResult", "m_pOriginatingInfo"));
    return value;
}

void GCTakeDamageResult::SetOriginatingInfo(GCTakeDamageInfo* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OriginatingInfo' is not possible.\n");
}

int32_t GCTakeDamageResult::GetHealthLost() const {
    return GetSchemaValue<int32_t>(m_ptr, "CTakeDamageResult", "m_nHealthLost");
}

void GCTakeDamageResult::SetHealthLost(int32_t value) {
    SetSchemaValue(m_ptr, "CTakeDamageResult", "m_nHealthLost", false, value);
}

int32_t GCTakeDamageResult::GetDamageTaken() const {
    return GetSchemaValue<int32_t>(m_ptr, "CTakeDamageResult", "m_nDamageTaken");
}

void GCTakeDamageResult::SetDamageTaken(int32_t value) {
    SetSchemaValue(m_ptr, "CTakeDamageResult", "m_nDamageTaken", false, value);
}

int32_t GCTakeDamageResult::GetTotalledHealthLost() const {
    return GetSchemaValue<int32_t>(m_ptr, "CTakeDamageResult", "m_nTotalledHealthLost");
}

void GCTakeDamageResult::SetTotalledHealthLost(int32_t value) {
    SetSchemaValue(m_ptr, "CTakeDamageResult", "m_nTotalledHealthLost", false, value);
}

int32_t GCTakeDamageResult::GetTotalledDamageTaken() const {
    return GetSchemaValue<int32_t>(m_ptr, "CTakeDamageResult", "m_nTotalledDamageTaken");
}

void GCTakeDamageResult::SetTotalledDamageTaken(int32_t value) {
    SetSchemaValue(m_ptr, "CTakeDamageResult", "m_nTotalledDamageTaken", false, value);
}

std::string GCTakeDamageResult::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTakeDamageResult::IsValid() {
    return (m_ptr != nullptr);
}

GCMolotovProjectile::GCMolotovProjectile(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMolotovProjectile::GCMolotovProjectile(void *ptr) {
    m_ptr = ptr;
}

bool GCMolotovProjectile::GetIsIncGrenade() const {
    return GetSchemaValue<bool>(m_ptr, "CMolotovProjectile", "m_bIsIncGrenade");
}

void GCMolotovProjectile::SetIsIncGrenade(bool value) {
    SetSchemaValue(m_ptr, "CMolotovProjectile", "m_bIsIncGrenade", false, value);
}

bool GCMolotovProjectile::GetDetonated() const {
    return GetSchemaValue<bool>(m_ptr, "CMolotovProjectile", "m_bDetonated");
}

void GCMolotovProjectile::SetDetonated(bool value) {
    SetSchemaValue(m_ptr, "CMolotovProjectile", "m_bDetonated", false, value);
}

GIntervalTimer GCMolotovProjectile::GetStillTimer() const {
    return GetSchemaValue<GIntervalTimer>(m_ptr, "CMolotovProjectile", "m_stillTimer");
}

void GCMolotovProjectile::SetStillTimer(GIntervalTimer value) {
    SetSchemaValue(m_ptr, "CMolotovProjectile", "m_stillTimer", false, value);
}

bool GCMolotovProjectile::GetHasBouncedOffPlayer() const {
    return GetSchemaValue<bool>(m_ptr, "CMolotovProjectile", "m_bHasBouncedOffPlayer");
}

void GCMolotovProjectile::SetHasBouncedOffPlayer(bool value) {
    SetSchemaValue(m_ptr, "CMolotovProjectile", "m_bHasBouncedOffPlayer", false, value);
}

std::string GCMolotovProjectile::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMolotovProjectile::IsValid() {
    return (m_ptr != nullptr);
}

GCCommentarySystem::GCCommentarySystem(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCommentarySystem::GCCommentarySystem(void *ptr) {
    m_ptr = ptr;
}

bool GCCommentarySystem::GetCommentaryConvarsChanging() const {
    return GetSchemaValue<bool>(m_ptr, "CCommentarySystem", "m_bCommentaryConvarsChanging");
}

void GCCommentarySystem::SetCommentaryConvarsChanging(bool value) {
    SetSchemaValue(m_ptr, "CCommentarySystem", "m_bCommentaryConvarsChanging", false, value);
}

bool GCCommentarySystem::GetCommentaryEnabledMidGame() const {
    return GetSchemaValue<bool>(m_ptr, "CCommentarySystem", "m_bCommentaryEnabledMidGame");
}

void GCCommentarySystem::SetCommentaryEnabledMidGame(bool value) {
    SetSchemaValue(m_ptr, "CCommentarySystem", "m_bCommentaryEnabledMidGame", false, value);
}

int32_t GCCommentarySystem::GetTeleportStage() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCommentarySystem", "m_iTeleportStage");
}

void GCCommentarySystem::SetTeleportStage(int32_t value) {
    SetSchemaValue(m_ptr, "CCommentarySystem", "m_iTeleportStage", false, value);
}

bool GCCommentarySystem::GetCheatState() const {
    return GetSchemaValue<bool>(m_ptr, "CCommentarySystem", "m_bCheatState");
}

void GCCommentarySystem::SetCheatState(bool value) {
    SetSchemaValue(m_ptr, "CCommentarySystem", "m_bCheatState", false, value);
}

bool GCCommentarySystem::GetIsFirstSpawnGroupToLoad() const {
    return GetSchemaValue<bool>(m_ptr, "CCommentarySystem", "m_bIsFirstSpawnGroupToLoad");
}

void GCCommentarySystem::SetIsFirstSpawnGroupToLoad(bool value) {
    SetSchemaValue(m_ptr, "CCommentarySystem", "m_bIsFirstSpawnGroupToLoad", false, value);
}

std::string GCCommentarySystem::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCommentarySystem::IsValid() {
    return (m_ptr != nullptr);
}

GResponseFollowup::GResponseFollowup(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GResponseFollowup::GResponseFollowup(void *ptr) {
    m_ptr = ptr;
}

std::string GResponseFollowup::GetFollowup_concept() const {
    return GetSchemaValuePtr<char>(m_ptr, "ResponseFollowup", "followup_concept");
}

void GResponseFollowup::SetFollowup_concept(std::string value) {
    WriteSchemaPtrValue(m_ptr, "ResponseFollowup", "followup_concept", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), value.size());
}

std::string GResponseFollowup::GetFollowup_contexts() const {
    return GetSchemaValuePtr<char>(m_ptr, "ResponseFollowup", "followup_contexts");
}

void GResponseFollowup::SetFollowup_contexts(std::string value) {
    WriteSchemaPtrValue(m_ptr, "ResponseFollowup", "followup_contexts", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), value.size());
}

float GResponseFollowup::GetFollowup_delay() const {
    return GetSchemaValue<float>(m_ptr, "ResponseFollowup", "followup_delay");
}

void GResponseFollowup::SetFollowup_delay(float value) {
    SetSchemaValue(m_ptr, "ResponseFollowup", "followup_delay", false, value);
}

std::string GResponseFollowup::GetFollowup_target() const {
    return GetSchemaValuePtr<char>(m_ptr, "ResponseFollowup", "followup_target");
}

void GResponseFollowup::SetFollowup_target(std::string value) {
    WriteSchemaPtrValue(m_ptr, "ResponseFollowup", "followup_target", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), value.size());
}

std::string GResponseFollowup::GetFollowup_entityiotarget() const {
    return GetSchemaValuePtr<char>(m_ptr, "ResponseFollowup", "followup_entityiotarget");
}

void GResponseFollowup::SetFollowup_entityiotarget(std::string value) {
    WriteSchemaPtrValue(m_ptr, "ResponseFollowup", "followup_entityiotarget", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), value.size());
}

std::string GResponseFollowup::GetFollowup_entityioinput() const {
    return GetSchemaValuePtr<char>(m_ptr, "ResponseFollowup", "followup_entityioinput");
}

void GResponseFollowup::SetFollowup_entityioinput(std::string value) {
    WriteSchemaPtrValue(m_ptr, "ResponseFollowup", "followup_entityioinput", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), value.size());
}

float GResponseFollowup::GetFollowup_entityiodelay() const {
    return GetSchemaValue<float>(m_ptr, "ResponseFollowup", "followup_entityiodelay");
}

void GResponseFollowup::SetFollowup_entityiodelay(float value) {
    SetSchemaValue(m_ptr, "ResponseFollowup", "followup_entityiodelay", false, value);
}

bool GResponseFollowup::GetFired() const {
    return GetSchemaValue<bool>(m_ptr, "ResponseFollowup", "bFired");
}

void GResponseFollowup::SetFired(bool value) {
    SetSchemaValue(m_ptr, "ResponseFollowup", "bFired", false, value);
}

std::string GResponseFollowup::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GResponseFollowup::IsValid() {
    return (m_ptr != nullptr);
}

GCRangeInt::GCRangeInt(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCRangeInt::GCRangeInt(void *ptr) {
    m_ptr = ptr;
}

std::vector<int32_t> GCRangeInt::GetValue() const {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CRangeInt", "m_pValue"); std::vector<int32_t> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCRangeInt::SetValue(std::vector<int32_t> value) {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CRangeInt", "m_pValue"); for(int i = 0; i < 2; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CRangeInt", "m_pValue", false, outValue);
}

std::string GCRangeInt::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCRangeInt::IsValid() {
    return (m_ptr != nullptr);
}

GCNavLinkAnimgraphVar::GCNavLinkAnimgraphVar(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNavLinkAnimgraphVar::GCNavLinkAnimgraphVar(void *ptr) {
    m_ptr = ptr;
}

uint32_t GCNavLinkAnimgraphVar::GetAlignmentDegrees() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CNavLinkAnimgraphVar", "m_unAlignmentDegrees");
}

void GCNavLinkAnimgraphVar::SetAlignmentDegrees(uint32_t value) {
    SetSchemaValue(m_ptr, "CNavLinkAnimgraphVar", "m_unAlignmentDegrees", false, value);
}

std::string GCNavLinkAnimgraphVar::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNavLinkAnimgraphVar::IsValid() {
    return (m_ptr != nullptr);
}

GCCSGO_TeamSelectCounterTerroristPosition::GCCSGO_TeamSelectCounterTerroristPosition(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSGO_TeamSelectCounterTerroristPosition::GCCSGO_TeamSelectCounterTerroristPosition(void *ptr) {
    m_ptr = ptr;
}

std::string GCCSGO_TeamSelectCounterTerroristPosition::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSGO_TeamSelectCounterTerroristPosition::IsValid() {
    return (m_ptr != nullptr);
}

GCNavLinkMovementVData::GCNavLinkMovementVData(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNavLinkMovementVData::GCNavLinkMovementVData(void *ptr) {
    m_ptr = ptr;
}

bool GCNavLinkMovementVData::GetIsInterpolated() const {
    return GetSchemaValue<bool>(m_ptr, "CNavLinkMovementVData", "m_bIsInterpolated");
}

void GCNavLinkMovementVData::SetIsInterpolated(bool value) {
    SetSchemaValue(m_ptr, "CNavLinkMovementVData", "m_bIsInterpolated", false, value);
}

uint32_t GCNavLinkMovementVData::GetRecommendedDistance() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CNavLinkMovementVData", "m_unRecommendedDistance");
}

void GCNavLinkMovementVData::SetRecommendedDistance(uint32_t value) {
    SetSchemaValue(m_ptr, "CNavLinkMovementVData", "m_unRecommendedDistance", false, value);
}

std::vector<GCNavLinkAnimgraphVar> GCNavLinkMovementVData::GetAnimgraphVars() const {
    CUtlVector<GCNavLinkAnimgraphVar>* vec = GetSchemaValue<CUtlVector<GCNavLinkAnimgraphVar>*>(m_ptr, "CNavLinkMovementVData", "m_vecAnimgraphVars"); std::vector<GCNavLinkAnimgraphVar> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCNavLinkMovementVData::SetAnimgraphVars(std::vector<GCNavLinkAnimgraphVar> value) {
    SetSchemaValueCUtlVector<GCNavLinkAnimgraphVar>(m_ptr, "CNavLinkMovementVData", "m_vecAnimgraphVars", false, value);
}

std::string GCNavLinkMovementVData::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNavLinkMovementVData::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimGraphControllerBase::GCAnimGraphControllerBase(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimGraphControllerBase::GCAnimGraphControllerBase(void *ptr) {
    m_ptr = ptr;
}

std::string GCAnimGraphControllerBase::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimGraphControllerBase::IsValid() {
    return (m_ptr != nullptr);
}

GRagdollCreationParams_t::GRagdollCreationParams_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GRagdollCreationParams_t::GRagdollCreationParams_t(void *ptr) {
    m_ptr = ptr;
}

Vector GRagdollCreationParams_t::GetForce() const {
    return GetSchemaValue<Vector>(m_ptr, "RagdollCreationParams_t", "m_vForce");
}

void GRagdollCreationParams_t::SetForce(Vector value) {
    SetSchemaValue(m_ptr, "RagdollCreationParams_t", "m_vForce", true, value);
}

int32_t GRagdollCreationParams_t::GetForceBone() const {
    return GetSchemaValue<int32_t>(m_ptr, "RagdollCreationParams_t", "m_nForceBone");
}

void GRagdollCreationParams_t::SetForceBone(int32_t value) {
    SetSchemaValue(m_ptr, "RagdollCreationParams_t", "m_nForceBone", true, value);
}

bool GRagdollCreationParams_t::GetForceCurrentWorldTransform() const {
    return GetSchemaValue<bool>(m_ptr, "RagdollCreationParams_t", "m_bForceCurrentWorldTransform");
}

void GRagdollCreationParams_t::SetForceCurrentWorldTransform(bool value) {
    SetSchemaValue(m_ptr, "RagdollCreationParams_t", "m_bForceCurrentWorldTransform", true, value);
}

std::string GRagdollCreationParams_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GRagdollCreationParams_t::IsValid() {
    return (m_ptr != nullptr);
}

GAmmoTypeInfo_t::GAmmoTypeInfo_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GAmmoTypeInfo_t::GAmmoTypeInfo_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GAmmoTypeInfo_t::GetMaxCarry() const {
    return GetSchemaValue<int32_t>(m_ptr, "AmmoTypeInfo_t", "m_nMaxCarry");
}

void GAmmoTypeInfo_t::SetMaxCarry(int32_t value) {
    SetSchemaValue(m_ptr, "AmmoTypeInfo_t", "m_nMaxCarry", true, value);
}

GCRangeInt GAmmoTypeInfo_t::GetSplashSize() const {
    return GetSchemaValue<GCRangeInt>(m_ptr, "AmmoTypeInfo_t", "m_nSplashSize");
}

void GAmmoTypeInfo_t::SetSplashSize(GCRangeInt value) {
    SetSchemaValue(m_ptr, "AmmoTypeInfo_t", "m_nSplashSize", true, value);
}

AmmoFlags_t GAmmoTypeInfo_t::GetFlags() const {
    return GetSchemaValue<AmmoFlags_t>(m_ptr, "AmmoTypeInfo_t", "m_nFlags");
}

void GAmmoTypeInfo_t::SetFlags(AmmoFlags_t value) {
    SetSchemaValue(m_ptr, "AmmoTypeInfo_t", "m_nFlags", true, value);
}

float GAmmoTypeInfo_t::GetMass() const {
    return GetSchemaValue<float>(m_ptr, "AmmoTypeInfo_t", "m_flMass");
}

void GAmmoTypeInfo_t::SetMass(float value) {
    SetSchemaValue(m_ptr, "AmmoTypeInfo_t", "m_flMass", true, value);
}

GCRangeFloat GAmmoTypeInfo_t::GetSpeed() const {
    return GetSchemaValue<GCRangeFloat>(m_ptr, "AmmoTypeInfo_t", "m_flSpeed");
}

void GAmmoTypeInfo_t::SetSpeed(GCRangeFloat value) {
    SetSchemaValue(m_ptr, "AmmoTypeInfo_t", "m_flSpeed", true, value);
}

std::string GAmmoTypeInfo_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GAmmoTypeInfo_t::IsValid() {
    return (m_ptr != nullptr);
}

GCRandStopwatch::GCRandStopwatch(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCRandStopwatch::GCRandStopwatch(void *ptr) {
    m_ptr = ptr;
}

float GCRandStopwatch::GetMinInterval() const {
    return GetSchemaValue<float>(m_ptr, "CRandStopwatch", "m_minInterval");
}

void GCRandStopwatch::SetMinInterval(float value) {
    SetSchemaValue(m_ptr, "CRandStopwatch", "m_minInterval", false, value);
}

float GCRandStopwatch::GetMaxInterval() const {
    return GetSchemaValue<float>(m_ptr, "CRandStopwatch", "m_maxInterval");
}

void GCRandStopwatch::SetMaxInterval(float value) {
    SetSchemaValue(m_ptr, "CRandStopwatch", "m_maxInterval", false, value);
}

std::string GCRandStopwatch::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCRandStopwatch::IsValid() {
    return (m_ptr != nullptr);
}

GCGameChoreoServices::GCGameChoreoServices(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCGameChoreoServices::GCGameChoreoServices(void *ptr) {
    m_ptr = ptr;
}

GCBaseAnimGraph GCGameChoreoServices::GetOwner() const {
    GCBaseAnimGraph value(GetSchemaValuePtr<void>(m_ptr, "CGameChoreoServices", "m_hOwner"));
    return value;
}

void GCGameChoreoServices::SetOwner(GCBaseAnimGraph* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Owner' is not possible.\n");
}

GCScriptedSequence GCGameChoreoServices::GetScriptedSequence() const {
    GCScriptedSequence value(GetSchemaValuePtr<void>(m_ptr, "CGameChoreoServices", "m_hScriptedSequence"));
    return value;
}

void GCGameChoreoServices::SetScriptedSequence(GCScriptedSequence* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ScriptedSequence' is not possible.\n");
}

GIChoreoServices GCGameChoreoServices::GetScriptState() const {
    return GetSchemaValue<GIChoreoServices>(m_ptr, "CGameChoreoServices", "m_scriptState");
}

void GCGameChoreoServices::SetScriptState(GIChoreoServices value) {
    SetSchemaValue(m_ptr, "CGameChoreoServices", "m_scriptState", false, value);
}

GIChoreoServices GCGameChoreoServices::GetChoreoState() const {
    return GetSchemaValue<GIChoreoServices>(m_ptr, "CGameChoreoServices", "m_choreoState");
}

void GCGameChoreoServices::SetChoreoState(GIChoreoServices value) {
    SetSchemaValue(m_ptr, "CGameChoreoServices", "m_choreoState", false, value);
}

std::string GCGameChoreoServices::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCGameChoreoServices::IsValid() {
    return (m_ptr != nullptr);
}

GCSimpleStopwatch::GCSimpleStopwatch(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSimpleStopwatch::GCSimpleStopwatch(void *ptr) {
    m_ptr = ptr;
}

std::string GCSimpleStopwatch::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSimpleStopwatch::IsValid() {
    return (m_ptr != nullptr);
}

GCShatterGlassShard::GCShatterGlassShard(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCShatterGlassShard::GCShatterGlassShard(void *ptr) {
    m_ptr = ptr;
}

uint32_t GCShatterGlassShard::GetShardHandle() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CShatterGlassShard", "m_hShardHandle");
}

void GCShatterGlassShard::SetShardHandle(uint32_t value) {
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_hShardHandle", false, value);
}

std::vector<Vector2D> GCShatterGlassShard::GetPanelVertices() const {
    CUtlVector<Vector2D>* vec = GetSchemaValue<CUtlVector<Vector2D>*>(m_ptr, "CShatterGlassShard", "m_vecPanelVertices"); std::vector<Vector2D> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCShatterGlassShard::SetPanelVertices(std::vector<Vector2D> value) {
    SetSchemaValueCUtlVector<Vector2D>(m_ptr, "CShatterGlassShard", "m_vecPanelVertices", false, value);
}

Vector2D GCShatterGlassShard::GetLocalPanelSpaceOrigin() const {
    return GetSchemaValue<Vector2D>(m_ptr, "CShatterGlassShard", "m_vLocalPanelSpaceOrigin");
}

void GCShatterGlassShard::SetLocalPanelSpaceOrigin(Vector2D value) {
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_vLocalPanelSpaceOrigin", false, value);
}

GCShatterGlassShardPhysics GCShatterGlassShard::GetPhysicsEntity() const {
    GCShatterGlassShardPhysics value(GetSchemaValuePtr<void>(m_ptr, "CShatterGlassShard", "m_hPhysicsEntity"));
    return value;
}

void GCShatterGlassShard::SetPhysicsEntity(GCShatterGlassShardPhysics* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'PhysicsEntity' is not possible.\n");
}

GCFuncShatterglass GCShatterGlassShard::GetParentPanel() const {
    GCFuncShatterglass value(GetSchemaValuePtr<void>(m_ptr, "CShatterGlassShard", "m_hParentPanel"));
    return value;
}

void GCShatterGlassShard::SetParentPanel(GCFuncShatterglass* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ParentPanel' is not possible.\n");
}

uint32_t GCShatterGlassShard::GetParentShard() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CShatterGlassShard", "m_hParentShard");
}

void GCShatterGlassShard::SetParentShard(uint32_t value) {
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_hParentShard", false, value);
}

ShatterGlassStressType GCShatterGlassShard::GetShatterStressType() const {
    return GetSchemaValue<ShatterGlassStressType>(m_ptr, "CShatterGlassShard", "m_ShatterStressType");
}

void GCShatterGlassShard::SetShatterStressType(ShatterGlassStressType value) {
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_ShatterStressType", false, value);
}

Vector GCShatterGlassShard::GetStressVelocity() const {
    return GetSchemaValue<Vector>(m_ptr, "CShatterGlassShard", "m_vecStressVelocity");
}

void GCShatterGlassShard::SetStressVelocity(Vector value) {
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_vecStressVelocity", false, value);
}

bool GCShatterGlassShard::GetCreatedModel() const {
    return GetSchemaValue<bool>(m_ptr, "CShatterGlassShard", "m_bCreatedModel");
}

void GCShatterGlassShard::SetCreatedModel(bool value) {
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_bCreatedModel", false, value);
}

float GCShatterGlassShard::GetLongestEdge() const {
    return GetSchemaValue<float>(m_ptr, "CShatterGlassShard", "m_flLongestEdge");
}

void GCShatterGlassShard::SetLongestEdge(float value) {
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_flLongestEdge", false, value);
}

float GCShatterGlassShard::GetShortestEdge() const {
    return GetSchemaValue<float>(m_ptr, "CShatterGlassShard", "m_flShortestEdge");
}

void GCShatterGlassShard::SetShortestEdge(float value) {
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_flShortestEdge", false, value);
}

float GCShatterGlassShard::GetLongestAcross() const {
    return GetSchemaValue<float>(m_ptr, "CShatterGlassShard", "m_flLongestAcross");
}

void GCShatterGlassShard::SetLongestAcross(float value) {
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_flLongestAcross", false, value);
}

float GCShatterGlassShard::GetShortestAcross() const {
    return GetSchemaValue<float>(m_ptr, "CShatterGlassShard", "m_flShortestAcross");
}

void GCShatterGlassShard::SetShortestAcross(float value) {
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_flShortestAcross", false, value);
}

float GCShatterGlassShard::GetSumOfAllEdges() const {
    return GetSchemaValue<float>(m_ptr, "CShatterGlassShard", "m_flSumOfAllEdges");
}

void GCShatterGlassShard::SetSumOfAllEdges(float value) {
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_flSumOfAllEdges", false, value);
}

float GCShatterGlassShard::GetArea() const {
    return GetSchemaValue<float>(m_ptr, "CShatterGlassShard", "m_flArea");
}

void GCShatterGlassShard::SetArea(float value) {
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_flArea", false, value);
}

OnFrame GCShatterGlassShard::GetOnFrameEdge() const {
    return GetSchemaValue<OnFrame>(m_ptr, "CShatterGlassShard", "m_nOnFrameEdge");
}

void GCShatterGlassShard::SetOnFrameEdge(OnFrame value) {
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_nOnFrameEdge", false, value);
}

int32_t GCShatterGlassShard::GetParentPanelsNthShard() const {
    return GetSchemaValue<int32_t>(m_ptr, "CShatterGlassShard", "m_nParentPanelsNthShard");
}

void GCShatterGlassShard::SetParentPanelsNthShard(int32_t value) {
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_nParentPanelsNthShard", false, value);
}

int32_t GCShatterGlassShard::GetSubShardGeneration() const {
    return GetSchemaValue<int32_t>(m_ptr, "CShatterGlassShard", "m_nSubShardGeneration");
}

void GCShatterGlassShard::SetSubShardGeneration(int32_t value) {
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_nSubShardGeneration", false, value);
}

Vector2D GCShatterGlassShard::GetAverageVertPosition() const {
    return GetSchemaValue<Vector2D>(m_ptr, "CShatterGlassShard", "m_vecAverageVertPosition");
}

void GCShatterGlassShard::SetAverageVertPosition(Vector2D value) {
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_vecAverageVertPosition", false, value);
}

bool GCShatterGlassShard::GetAverageVertPositionIsValid() const {
    return GetSchemaValue<bool>(m_ptr, "CShatterGlassShard", "m_bAverageVertPositionIsValid");
}

void GCShatterGlassShard::SetAverageVertPositionIsValid(bool value) {
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_bAverageVertPositionIsValid", false, value);
}

Vector2D GCShatterGlassShard::GetPanelSpaceStressPositionA() const {
    return GetSchemaValue<Vector2D>(m_ptr, "CShatterGlassShard", "m_vecPanelSpaceStressPositionA");
}

void GCShatterGlassShard::SetPanelSpaceStressPositionA(Vector2D value) {
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_vecPanelSpaceStressPositionA", false, value);
}

Vector2D GCShatterGlassShard::GetPanelSpaceStressPositionB() const {
    return GetSchemaValue<Vector2D>(m_ptr, "CShatterGlassShard", "m_vecPanelSpaceStressPositionB");
}

void GCShatterGlassShard::SetPanelSpaceStressPositionB(Vector2D value) {
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_vecPanelSpaceStressPositionB", false, value);
}

bool GCShatterGlassShard::GetStressPositionAIsValid() const {
    return GetSchemaValue<bool>(m_ptr, "CShatterGlassShard", "m_bStressPositionAIsValid");
}

void GCShatterGlassShard::SetStressPositionAIsValid(bool value) {
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_bStressPositionAIsValid", false, value);
}

bool GCShatterGlassShard::GetStressPositionBIsValid() const {
    return GetSchemaValue<bool>(m_ptr, "CShatterGlassShard", "m_bStressPositionBIsValid");
}

void GCShatterGlassShard::SetStressPositionBIsValid(bool value) {
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_bStressPositionBIsValid", false, value);
}

bool GCShatterGlassShard::GetFlaggedForRemoval() const {
    return GetSchemaValue<bool>(m_ptr, "CShatterGlassShard", "m_bFlaggedForRemoval");
}

void GCShatterGlassShard::SetFlaggedForRemoval(bool value) {
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_bFlaggedForRemoval", false, value);
}

bool GCShatterGlassShard::GetShatterRateLimited() const {
    return GetSchemaValue<bool>(m_ptr, "CShatterGlassShard", "m_bShatterRateLimited");
}

void GCShatterGlassShard::SetShatterRateLimited(bool value) {
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_bShatterRateLimited", false, value);
}

GCBaseEntity GCShatterGlassShard::GetEntityHittingMe() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CShatterGlassShard", "m_hEntityHittingMe"));
    return value;
}

void GCShatterGlassShard::SetEntityHittingMe(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'EntityHittingMe' is not possible.\n");
}

std::vector<uint32> GCShatterGlassShard::GetNeighbors() const {
    CUtlVector<uint32>* vec = GetSchemaValue<CUtlVector<uint32>*>(m_ptr, "CShatterGlassShard", "m_vecNeighbors"); std::vector<uint32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCShatterGlassShard::SetNeighbors(std::vector<uint32> value) {
    SetSchemaValueCUtlVector<uint32>(m_ptr, "CShatterGlassShard", "m_vecNeighbors", false, value);
}

std::string GCShatterGlassShard::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCShatterGlassShard::IsValid() {
    return (m_ptr != nullptr);
}

GCommandToolCommand_t::GCommandToolCommand_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCommandToolCommand_t::GCommandToolCommand_t(void *ptr) {
    m_ptr = ptr;
}

bool GCommandToolCommand_t::GetEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CommandToolCommand_t", "m_bEnabled");
}

void GCommandToolCommand_t::SetEnabled(bool value) {
    SetSchemaValue(m_ptr, "CommandToolCommand_t", "m_bEnabled", true, value);
}

bool GCommandToolCommand_t::GetOpened() const {
    return GetSchemaValue<bool>(m_ptr, "CommandToolCommand_t", "m_bOpened");
}

void GCommandToolCommand_t::SetOpened(bool value) {
    SetSchemaValue(m_ptr, "CommandToolCommand_t", "m_bOpened", true, value);
}

uint32_t GCommandToolCommand_t::GetInternalId() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CommandToolCommand_t", "m_InternalId");
}

void GCommandToolCommand_t::SetInternalId(uint32_t value) {
    SetSchemaValue(m_ptr, "CommandToolCommand_t", "m_InternalId", true, value);
}

CUtlString GCommandToolCommand_t::GetShortName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CommandToolCommand_t", "m_ShortName");
}

void GCommandToolCommand_t::SetShortName(CUtlString value) {
    SetSchemaValue(m_ptr, "CommandToolCommand_t", "m_ShortName", true, value);
}

CommandExecMode_t GCommandToolCommand_t::GetExecMode() const {
    return GetSchemaValue<CommandExecMode_t>(m_ptr, "CommandToolCommand_t", "m_ExecMode");
}

void GCommandToolCommand_t::SetExecMode(CommandExecMode_t value) {
    SetSchemaValue(m_ptr, "CommandToolCommand_t", "m_ExecMode", true, value);
}

CUtlString GCommandToolCommand_t::GetSpawnGroup() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CommandToolCommand_t", "m_SpawnGroup");
}

void GCommandToolCommand_t::SetSpawnGroup(CUtlString value) {
    SetSchemaValue(m_ptr, "CommandToolCommand_t", "m_SpawnGroup", true, value);
}

float GCommandToolCommand_t::GetPeriodicExecDelay() const {
    return GetSchemaValue<float>(m_ptr, "CommandToolCommand_t", "m_PeriodicExecDelay");
}

void GCommandToolCommand_t::SetPeriodicExecDelay(float value) {
    SetSchemaValue(m_ptr, "CommandToolCommand_t", "m_PeriodicExecDelay", true, value);
}

CommandEntitySpecType_t GCommandToolCommand_t::GetSpecType() const {
    return GetSchemaValue<CommandEntitySpecType_t>(m_ptr, "CommandToolCommand_t", "m_SpecType");
}

void GCommandToolCommand_t::SetSpecType(CommandEntitySpecType_t value) {
    SetSchemaValue(m_ptr, "CommandToolCommand_t", "m_SpecType", true, value);
}

CUtlString GCommandToolCommand_t::GetEntitySpec() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CommandToolCommand_t", "m_EntitySpec");
}

void GCommandToolCommand_t::SetEntitySpec(CUtlString value) {
    SetSchemaValue(m_ptr, "CommandToolCommand_t", "m_EntitySpec", true, value);
}

CUtlString GCommandToolCommand_t::GetCommands() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CommandToolCommand_t", "m_Commands");
}

void GCommandToolCommand_t::SetCommands(CUtlString value) {
    SetSchemaValue(m_ptr, "CommandToolCommand_t", "m_Commands", true, value);
}

DebugOverlayBits_t GCommandToolCommand_t::GetSetDebugBits() const {
    return GetSchemaValue<DebugOverlayBits_t>(m_ptr, "CommandToolCommand_t", "m_SetDebugBits");
}

void GCommandToolCommand_t::SetSetDebugBits(DebugOverlayBits_t value) {
    SetSchemaValue(m_ptr, "CommandToolCommand_t", "m_SetDebugBits", true, value);
}

DebugOverlayBits_t GCommandToolCommand_t::GetClearDebugBits() const {
    return GetSchemaValue<DebugOverlayBits_t>(m_ptr, "CommandToolCommand_t", "m_ClearDebugBits");
}

void GCommandToolCommand_t::SetClearDebugBits(DebugOverlayBits_t value) {
    SetSchemaValue(m_ptr, "CommandToolCommand_t", "m_ClearDebugBits", true, value);
}

std::string GCommandToolCommand_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCommandToolCommand_t::IsValid() {
    return (m_ptr != nullptr);
}

Gragdollelement_t::Gragdollelement_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

Gragdollelement_t::Gragdollelement_t(void *ptr) {
    m_ptr = ptr;
}

Vector Gragdollelement_t::GetOriginParentSpace() const {
    return GetSchemaValue<Vector>(m_ptr, "ragdollelement_t", "originParentSpace");
}

void Gragdollelement_t::SetOriginParentSpace(Vector value) {
    SetSchemaValue(m_ptr, "ragdollelement_t", "originParentSpace", true, value);
}

int32_t Gragdollelement_t::GetParentIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "ragdollelement_t", "parentIndex");
}

void Gragdollelement_t::SetParentIndex(int32_t value) {
    SetSchemaValue(m_ptr, "ragdollelement_t", "parentIndex", true, value);
}

float Gragdollelement_t::GetRadius() const {
    return GetSchemaValue<float>(m_ptr, "ragdollelement_t", "m_flRadius");
}

void Gragdollelement_t::SetRadius(float value) {
    SetSchemaValue(m_ptr, "ragdollelement_t", "m_flRadius", true, value);
}

std::string Gragdollelement_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool Gragdollelement_t::IsValid() {
    return (m_ptr != nullptr);
}

GCBodyComponentBaseModelEntity::GCBodyComponentBaseModelEntity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBodyComponentBaseModelEntity::GCBodyComponentBaseModelEntity(void *ptr) {
    m_ptr = ptr;
}

std::string GCBodyComponentBaseModelEntity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBodyComponentBaseModelEntity::IsValid() {
    return (m_ptr != nullptr);
}

GCNetworkOriginQuantizedVector::GCNetworkOriginQuantizedVector(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNetworkOriginQuantizedVector::GCNetworkOriginQuantizedVector(void *ptr) {
    m_ptr = ptr;
}

float GCNetworkOriginQuantizedVector::GetX() const {
    return GetSchemaValue<float>(m_ptr, "CNetworkOriginQuantizedVector", "m_vecX");
}

void GCNetworkOriginQuantizedVector::SetX(float value) {
    SetSchemaValue(m_ptr, "CNetworkOriginQuantizedVector", "m_vecX", false, value);
}

float GCNetworkOriginQuantizedVector::GetY() const {
    return GetSchemaValue<float>(m_ptr, "CNetworkOriginQuantizedVector", "m_vecY");
}

void GCNetworkOriginQuantizedVector::SetY(float value) {
    SetSchemaValue(m_ptr, "CNetworkOriginQuantizedVector", "m_vecY", false, value);
}

float GCNetworkOriginQuantizedVector::GetZ() const {
    return GetSchemaValue<float>(m_ptr, "CNetworkOriginQuantizedVector", "m_vecZ");
}

void GCNetworkOriginQuantizedVector::SetZ(float value) {
    SetSchemaValue(m_ptr, "CNetworkOriginQuantizedVector", "m_vecZ", false, value);
}

std::string GCNetworkOriginQuantizedVector::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNetworkOriginQuantizedVector::IsValid() {
    return (m_ptr != nullptr);
}

Gmagnetted_objects_t::Gmagnetted_objects_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

Gmagnetted_objects_t::Gmagnetted_objects_t(void *ptr) {
    m_ptr = ptr;
}

GCBaseEntity Gmagnetted_objects_t::GetEntity() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "magnetted_objects_t", "hEntity"));
    return value;
}

void Gmagnetted_objects_t::SetEntity(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Entity' is not possible.\n");
}

std::string Gmagnetted_objects_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool Gmagnetted_objects_t::IsValid() {
    return (m_ptr != nullptr);
}

GCHintMessageQueue::GCHintMessageQueue(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCHintMessageQueue::GCHintMessageQueue(void *ptr) {
    m_ptr = ptr;
}

float GCHintMessageQueue::GetTmMessageEnd() const {
    return GetSchemaValue<float>(m_ptr, "CHintMessageQueue", "m_tmMessageEnd");
}

void GCHintMessageQueue::SetTmMessageEnd(float value) {
    SetSchemaValue(m_ptr, "CHintMessageQueue", "m_tmMessageEnd", false, value);
}

GCBasePlayerController GCHintMessageQueue::GetPlayerController() const {
    GCBasePlayerController value(GetSchemaValuePtr<void>(m_ptr, "CHintMessageQueue", "m_pPlayerController"));
    return value;
}

void GCHintMessageQueue::SetPlayerController(GCBasePlayerController* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'PlayerController' is not possible.\n");
}

std::string GCHintMessageQueue::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCHintMessageQueue::IsValid() {
    return (m_ptr != nullptr);
}

GCSkillInt::GCSkillInt(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSkillInt::GCSkillInt(void *ptr) {
    m_ptr = ptr;
}

std::vector<int32_t> GCSkillInt::GetValue() const {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CSkillInt", "m_pValue"); std::vector<int32_t> ret; for(int i = 0; i < 4; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCSkillInt::SetValue(std::vector<int32_t> value) {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CSkillInt", "m_pValue"); for(int i = 0; i < 4; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CSkillInt", "m_pValue", false, outValue);
}

std::string GCSkillInt::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSkillInt::IsValid() {
    return (m_ptr != nullptr);
}

Gthinkfunc_t::Gthinkfunc_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

Gthinkfunc_t::Gthinkfunc_t(void *ptr) {
    m_ptr = ptr;
}

CUtlStringToken Gthinkfunc_t::GetContext() const {
    return GetSchemaValue<CUtlStringToken>(m_ptr, "thinkfunc_t", "m_nContext");
}

void Gthinkfunc_t::SetContext(CUtlStringToken value) {
    SetSchemaValue(m_ptr, "thinkfunc_t", "m_nContext", true, value);
}

std::string Gthinkfunc_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool Gthinkfunc_t::IsValid() {
    return (m_ptr != nullptr);
}

GCNavHullPresetVData::GCNavHullPresetVData(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNavHullPresetVData::GCNavHullPresetVData(void *ptr) {
    m_ptr = ptr;
}

std::vector<CUtlString> GCNavHullPresetVData::GetNavHulls() const {
    CUtlVector<CUtlString>* vec = GetSchemaValue<CUtlVector<CUtlString>*>(m_ptr, "CNavHullPresetVData", "m_vecNavHulls"); std::vector<CUtlString> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCNavHullPresetVData::SetNavHulls(std::vector<CUtlString> value) {
    SetSchemaValueCUtlVector<CUtlString>(m_ptr, "CNavHullPresetVData", "m_vecNavHulls", false, value);
}

std::string GCNavHullPresetVData::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNavHullPresetVData::IsValid() {
    return (m_ptr != nullptr);
}

GCBasePlayerVData::GCBasePlayerVData(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBasePlayerVData::GCBasePlayerVData(void *ptr) {
    m_ptr = ptr;
}

GCSkillFloat GCBasePlayerVData::GetHeadDamageMultiplier() const {
    return GetSchemaValue<GCSkillFloat>(m_ptr, "CBasePlayerVData", "m_flHeadDamageMultiplier");
}

void GCBasePlayerVData::SetHeadDamageMultiplier(GCSkillFloat value) {
    SetSchemaValue(m_ptr, "CBasePlayerVData", "m_flHeadDamageMultiplier", false, value);
}

GCSkillFloat GCBasePlayerVData::GetChestDamageMultiplier() const {
    return GetSchemaValue<GCSkillFloat>(m_ptr, "CBasePlayerVData", "m_flChestDamageMultiplier");
}

void GCBasePlayerVData::SetChestDamageMultiplier(GCSkillFloat value) {
    SetSchemaValue(m_ptr, "CBasePlayerVData", "m_flChestDamageMultiplier", false, value);
}

GCSkillFloat GCBasePlayerVData::GetStomachDamageMultiplier() const {
    return GetSchemaValue<GCSkillFloat>(m_ptr, "CBasePlayerVData", "m_flStomachDamageMultiplier");
}

void GCBasePlayerVData::SetStomachDamageMultiplier(GCSkillFloat value) {
    SetSchemaValue(m_ptr, "CBasePlayerVData", "m_flStomachDamageMultiplier", false, value);
}

GCSkillFloat GCBasePlayerVData::GetArmDamageMultiplier() const {
    return GetSchemaValue<GCSkillFloat>(m_ptr, "CBasePlayerVData", "m_flArmDamageMultiplier");
}

void GCBasePlayerVData::SetArmDamageMultiplier(GCSkillFloat value) {
    SetSchemaValue(m_ptr, "CBasePlayerVData", "m_flArmDamageMultiplier", false, value);
}

GCSkillFloat GCBasePlayerVData::GetLegDamageMultiplier() const {
    return GetSchemaValue<GCSkillFloat>(m_ptr, "CBasePlayerVData", "m_flLegDamageMultiplier");
}

void GCBasePlayerVData::SetLegDamageMultiplier(GCSkillFloat value) {
    SetSchemaValue(m_ptr, "CBasePlayerVData", "m_flLegDamageMultiplier", false, value);
}

float GCBasePlayerVData::GetHoldBreathTime() const {
    return GetSchemaValue<float>(m_ptr, "CBasePlayerVData", "m_flHoldBreathTime");
}

void GCBasePlayerVData::SetHoldBreathTime(float value) {
    SetSchemaValue(m_ptr, "CBasePlayerVData", "m_flHoldBreathTime", false, value);
}

float GCBasePlayerVData::GetDrowningDamageInterval() const {
    return GetSchemaValue<float>(m_ptr, "CBasePlayerVData", "m_flDrowningDamageInterval");
}

void GCBasePlayerVData::SetDrowningDamageInterval(float value) {
    SetSchemaValue(m_ptr, "CBasePlayerVData", "m_flDrowningDamageInterval", false, value);
}

int32_t GCBasePlayerVData::GetDrowningDamageInitial() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBasePlayerVData", "m_nDrowningDamageInitial");
}

void GCBasePlayerVData::SetDrowningDamageInitial(int32_t value) {
    SetSchemaValue(m_ptr, "CBasePlayerVData", "m_nDrowningDamageInitial", false, value);
}

int32_t GCBasePlayerVData::GetDrowningDamageMax() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBasePlayerVData", "m_nDrowningDamageMax");
}

void GCBasePlayerVData::SetDrowningDamageMax(int32_t value) {
    SetSchemaValue(m_ptr, "CBasePlayerVData", "m_nDrowningDamageMax", false, value);
}

int32_t GCBasePlayerVData::GetWaterSpeed() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBasePlayerVData", "m_nWaterSpeed");
}

void GCBasePlayerVData::SetWaterSpeed(int32_t value) {
    SetSchemaValue(m_ptr, "CBasePlayerVData", "m_nWaterSpeed", false, value);
}

float GCBasePlayerVData::GetUseRange() const {
    return GetSchemaValue<float>(m_ptr, "CBasePlayerVData", "m_flUseRange");
}

void GCBasePlayerVData::SetUseRange(float value) {
    SetSchemaValue(m_ptr, "CBasePlayerVData", "m_flUseRange", false, value);
}

float GCBasePlayerVData::GetUseAngleTolerance() const {
    return GetSchemaValue<float>(m_ptr, "CBasePlayerVData", "m_flUseAngleTolerance");
}

void GCBasePlayerVData::SetUseAngleTolerance(float value) {
    SetSchemaValue(m_ptr, "CBasePlayerVData", "m_flUseAngleTolerance", false, value);
}

float GCBasePlayerVData::GetCrouchTime() const {
    return GetSchemaValue<float>(m_ptr, "CBasePlayerVData", "m_flCrouchTime");
}

void GCBasePlayerVData::SetCrouchTime(float value) {
    SetSchemaValue(m_ptr, "CBasePlayerVData", "m_flCrouchTime", false, value);
}

std::string GCBasePlayerVData::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBasePlayerVData::IsValid() {
    return (m_ptr != nullptr);
}

GCSceneEventInfo::GCSceneEventInfo(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSceneEventInfo::GCSceneEventInfo(void *ptr) {
    m_ptr = ptr;
}

int32_t GCSceneEventInfo::GetLayer() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSceneEventInfo", "m_iLayer");
}

void GCSceneEventInfo::SetLayer(int32_t value) {
    SetSchemaValue(m_ptr, "CSceneEventInfo", "m_iLayer", false, value);
}

int32_t GCSceneEventInfo::GetPriority() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSceneEventInfo", "m_iPriority");
}

void GCSceneEventInfo::SetPriority(int32_t value) {
    SetSchemaValue(m_ptr, "CSceneEventInfo", "m_iPriority", false, value);
}

float GCSceneEventInfo::GetWeight() const {
    return GetSchemaValue<float>(m_ptr, "CSceneEventInfo", "m_flWeight");
}

void GCSceneEventInfo::SetWeight(float value) {
    SetSchemaValue(m_ptr, "CSceneEventInfo", "m_flWeight", false, value);
}

bool GCSceneEventInfo::GetHasArrived() const {
    return GetSchemaValue<bool>(m_ptr, "CSceneEventInfo", "m_bHasArrived");
}

void GCSceneEventInfo::SetHasArrived(bool value) {
    SetSchemaValue(m_ptr, "CSceneEventInfo", "m_bHasArrived", false, value);
}

int32_t GCSceneEventInfo::GetType() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSceneEventInfo", "m_nType");
}

void GCSceneEventInfo::SetType(int32_t value) {
    SetSchemaValue(m_ptr, "CSceneEventInfo", "m_nType", false, value);
}

bool GCSceneEventInfo::GetIsGesture() const {
    return GetSchemaValue<bool>(m_ptr, "CSceneEventInfo", "m_bIsGesture");
}

void GCSceneEventInfo::SetIsGesture(bool value) {
    SetSchemaValue(m_ptr, "CSceneEventInfo", "m_bIsGesture", false, value);
}

bool GCSceneEventInfo::GetShouldRemove() const {
    return GetSchemaValue<bool>(m_ptr, "CSceneEventInfo", "m_bShouldRemove");
}

void GCSceneEventInfo::SetShouldRemove(bool value) {
    SetSchemaValue(m_ptr, "CSceneEventInfo", "m_bShouldRemove", false, value);
}

GCBaseEntity GCSceneEventInfo::GetTarget() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CSceneEventInfo", "m_hTarget"));
    return value;
}

void GCSceneEventInfo::SetTarget(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Target' is not possible.\n");
}

GSceneEventId_t GCSceneEventInfo::GetSceneEventId() const {
    return GetSchemaValue<GSceneEventId_t>(m_ptr, "CSceneEventInfo", "m_nSceneEventId");
}

void GCSceneEventInfo::SetSceneEventId(GSceneEventId_t value) {
    SetSchemaValue(m_ptr, "CSceneEventInfo", "m_nSceneEventId", false, value);
}

bool GCSceneEventInfo::GetClientSide() const {
    return GetSchemaValue<bool>(m_ptr, "CSceneEventInfo", "m_bClientSide");
}

void GCSceneEventInfo::SetClientSide(bool value) {
    SetSchemaValue(m_ptr, "CSceneEventInfo", "m_bClientSide", false, value);
}

bool GCSceneEventInfo::GetStarted() const {
    return GetSchemaValue<bool>(m_ptr, "CSceneEventInfo", "m_bStarted");
}

void GCSceneEventInfo::SetStarted(bool value) {
    SetSchemaValue(m_ptr, "CSceneEventInfo", "m_bStarted", false, value);
}

std::string GCSceneEventInfo::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSceneEventInfo::IsValid() {
    return (m_ptr != nullptr);
}

GCCopyRecipientFilter::GCCopyRecipientFilter(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCopyRecipientFilter::GCCopyRecipientFilter(void *ptr) {
    m_ptr = ptr;
}

int32_t GCCopyRecipientFilter::GetFlags() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCopyRecipientFilter", "m_Flags");
}

void GCCopyRecipientFilter::SetFlags(int32_t value) {
    SetSchemaValue(m_ptr, "CCopyRecipientFilter", "m_Flags", false, value);
}

std::vector<int32_t> GCCopyRecipientFilter::GetRecipients() const {
    CUtlVector<int32_t>* vec = GetSchemaValue<CUtlVector<int32_t>*>(m_ptr, "CCopyRecipientFilter", "m_Recipients"); std::vector<int32_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCCopyRecipientFilter::SetRecipients(std::vector<int32_t> value) {
    SetSchemaValueCUtlVector<int32_t>(m_ptr, "CCopyRecipientFilter", "m_Recipients", false, value);
}

std::string GCCopyRecipientFilter::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCopyRecipientFilter::IsValid() {
    return (m_ptr != nullptr);
}

GCPropDoorRotatingBreakable::GCPropDoorRotatingBreakable(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPropDoorRotatingBreakable::GCPropDoorRotatingBreakable(void *ptr) {
    m_ptr = ptr;
}

bool GCPropDoorRotatingBreakable::GetBreakable() const {
    return GetSchemaValue<bool>(m_ptr, "CPropDoorRotatingBreakable", "m_bBreakable");
}

void GCPropDoorRotatingBreakable::SetBreakable(bool value) {
    SetSchemaValue(m_ptr, "CPropDoorRotatingBreakable", "m_bBreakable", false, value);
}

bool GCPropDoorRotatingBreakable::GetIsAbleToCloseAreaPortals() const {
    return GetSchemaValue<bool>(m_ptr, "CPropDoorRotatingBreakable", "m_isAbleToCloseAreaPortals");
}

void GCPropDoorRotatingBreakable::SetIsAbleToCloseAreaPortals(bool value) {
    SetSchemaValue(m_ptr, "CPropDoorRotatingBreakable", "m_isAbleToCloseAreaPortals", false, value);
}

int32_t GCPropDoorRotatingBreakable::GetCurrentDamageState() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPropDoorRotatingBreakable", "m_currentDamageState");
}

void GCPropDoorRotatingBreakable::SetCurrentDamageState(int32_t value) {
    SetSchemaValue(m_ptr, "CPropDoorRotatingBreakable", "m_currentDamageState", false, value);
}

std::vector<CUtlSymbolLarge> GCPropDoorRotatingBreakable::GetDamageStates() const {
    CUtlVector<CUtlSymbolLarge>* vec = GetSchemaValue<CUtlVector<CUtlSymbolLarge>*>(m_ptr, "CPropDoorRotatingBreakable", "m_damageStates"); std::vector<CUtlSymbolLarge> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCPropDoorRotatingBreakable::SetDamageStates(std::vector<CUtlSymbolLarge> value) {
    SetSchemaValueCUtlVector<CUtlSymbolLarge>(m_ptr, "CPropDoorRotatingBreakable", "m_damageStates", false, value);
}

std::string GCPropDoorRotatingBreakable::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPropDoorRotatingBreakable::IsValid() {
    return (m_ptr != nullptr);
}

GCBtActionAim::GCBtActionAim(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBtActionAim::GCBtActionAim(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCBtActionAim::GetSensorInputKey() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CBtActionAim", "m_szSensorInputKey");
}

void GCBtActionAim::SetSensorInputKey(CUtlString value) {
    SetSchemaValue(m_ptr, "CBtActionAim", "m_szSensorInputKey", false, value);
}

CUtlString GCBtActionAim::GetAimReadyKey() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CBtActionAim", "m_szAimReadyKey");
}

void GCBtActionAim::SetAimReadyKey(CUtlString value) {
    SetSchemaValue(m_ptr, "CBtActionAim", "m_szAimReadyKey", false, value);
}

float GCBtActionAim::GetZoomCooldownTimestamp() const {
    return GetSchemaValue<float>(m_ptr, "CBtActionAim", "m_flZoomCooldownTimestamp");
}

void GCBtActionAim::SetZoomCooldownTimestamp(float value) {
    SetSchemaValue(m_ptr, "CBtActionAim", "m_flZoomCooldownTimestamp", false, value);
}

bool GCBtActionAim::GetDoneAiming() const {
    return GetSchemaValue<bool>(m_ptr, "CBtActionAim", "m_bDoneAiming");
}

void GCBtActionAim::SetDoneAiming(bool value) {
    SetSchemaValue(m_ptr, "CBtActionAim", "m_bDoneAiming", false, value);
}

float GCBtActionAim::GetLerpStartTime() const {
    return GetSchemaValue<float>(m_ptr, "CBtActionAim", "m_flLerpStartTime");
}

void GCBtActionAim::SetLerpStartTime(float value) {
    SetSchemaValue(m_ptr, "CBtActionAim", "m_flLerpStartTime", false, value);
}

float GCBtActionAim::GetNextLookTargetLerpTime() const {
    return GetSchemaValue<float>(m_ptr, "CBtActionAim", "m_flNextLookTargetLerpTime");
}

void GCBtActionAim::SetNextLookTargetLerpTime(float value) {
    SetSchemaValue(m_ptr, "CBtActionAim", "m_flNextLookTargetLerpTime", false, value);
}

float GCBtActionAim::GetPenaltyReductionRatio() const {
    return GetSchemaValue<float>(m_ptr, "CBtActionAim", "m_flPenaltyReductionRatio");
}

void GCBtActionAim::SetPenaltyReductionRatio(float value) {
    SetSchemaValue(m_ptr, "CBtActionAim", "m_flPenaltyReductionRatio", false, value);
}

QAngle GCBtActionAim::GetNextLookTarget() const {
    return GetSchemaValue<QAngle>(m_ptr, "CBtActionAim", "m_NextLookTarget");
}

void GCBtActionAim::SetNextLookTarget(QAngle value) {
    SetSchemaValue(m_ptr, "CBtActionAim", "m_NextLookTarget", false, value);
}

GCountdownTimer GCBtActionAim::GetAimTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CBtActionAim", "m_AimTimer");
}

void GCBtActionAim::SetAimTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CBtActionAim", "m_AimTimer", false, value);
}

GCountdownTimer GCBtActionAim::GetSniperHoldTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CBtActionAim", "m_SniperHoldTimer");
}

void GCBtActionAim::SetSniperHoldTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CBtActionAim", "m_SniperHoldTimer", false, value);
}

GCountdownTimer GCBtActionAim::GetFocusIntervalTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CBtActionAim", "m_FocusIntervalTimer");
}

void GCBtActionAim::SetFocusIntervalTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CBtActionAim", "m_FocusIntervalTimer", false, value);
}

bool GCBtActionAim::GetAcquired() const {
    return GetSchemaValue<bool>(m_ptr, "CBtActionAim", "m_bAcquired");
}

void GCBtActionAim::SetAcquired(bool value) {
    SetSchemaValue(m_ptr, "CBtActionAim", "m_bAcquired", false, value);
}

std::string GCBtActionAim::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBtActionAim::IsValid() {
    return (m_ptr != nullptr);
}

GCFiringModeInt::GCFiringModeInt(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFiringModeInt::GCFiringModeInt(void *ptr) {
    m_ptr = ptr;
}

std::vector<int32_t> GCFiringModeInt::GetValues() const {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CFiringModeInt", "m_nValues"); std::vector<int32_t> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCFiringModeInt::SetValues(std::vector<int32_t> value) {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CFiringModeInt", "m_nValues"); for(int i = 0; i < 2; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CFiringModeInt", "m_nValues", false, outValue);
}

std::string GCFiringModeInt::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFiringModeInt::IsValid() {
    return (m_ptr != nullptr);
}

GCSoundPatch::GCSoundPatch(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSoundPatch::GCSoundPatch(void *ptr) {
    m_ptr = ptr;
}

GCSoundEnvelope GCSoundPatch::GetPitch() const {
    return GetSchemaValue<GCSoundEnvelope>(m_ptr, "CSoundPatch", "m_pitch");
}

void GCSoundPatch::SetPitch(GCSoundEnvelope value) {
    SetSchemaValue(m_ptr, "CSoundPatch", "m_pitch", false, value);
}

GCSoundEnvelope GCSoundPatch::GetVolume() const {
    return GetSchemaValue<GCSoundEnvelope>(m_ptr, "CSoundPatch", "m_volume");
}

void GCSoundPatch::SetVolume(GCSoundEnvelope value) {
    SetSchemaValue(m_ptr, "CSoundPatch", "m_volume", false, value);
}

float GCSoundPatch::GetShutdownTime() const {
    return GetSchemaValue<float>(m_ptr, "CSoundPatch", "m_shutdownTime");
}

void GCSoundPatch::SetShutdownTime(float value) {
    SetSchemaValue(m_ptr, "CSoundPatch", "m_shutdownTime", false, value);
}

float GCSoundPatch::GetLastTime() const {
    return GetSchemaValue<float>(m_ptr, "CSoundPatch", "m_flLastTime");
}

void GCSoundPatch::SetLastTime(float value) {
    SetSchemaValue(m_ptr, "CSoundPatch", "m_flLastTime", false, value);
}

CUtlSymbolLarge GCSoundPatch::GetSoundScriptName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSoundPatch", "m_iszSoundScriptName");
}

void GCSoundPatch::SetSoundScriptName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CSoundPatch", "m_iszSoundScriptName", false, value);
}

GCBaseEntity GCSoundPatch::GetEnt() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CSoundPatch", "m_hEnt"));
    return value;
}

void GCSoundPatch::SetEnt(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Ent' is not possible.\n");
}

CEntityIndex GCSoundPatch::GetSoundEntityIndex() const {
    return GetSchemaValue<CEntityIndex>(m_ptr, "CSoundPatch", "m_soundEntityIndex");
}

void GCSoundPatch::SetSoundEntityIndex(CEntityIndex value) {
    SetSchemaValue(m_ptr, "CSoundPatch", "m_soundEntityIndex", false, value);
}

Vector GCSoundPatch::GetSoundOrigin() const {
    return GetSchemaValue<Vector>(m_ptr, "CSoundPatch", "m_soundOrigin");
}

void GCSoundPatch::SetSoundOrigin(Vector value) {
    SetSchemaValue(m_ptr, "CSoundPatch", "m_soundOrigin", false, value);
}

int32_t GCSoundPatch::GetIsPlaying() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSoundPatch", "m_isPlaying");
}

void GCSoundPatch::SetIsPlaying(int32_t value) {
    SetSchemaValue(m_ptr, "CSoundPatch", "m_isPlaying", false, value);
}

GCCopyRecipientFilter GCSoundPatch::GetFilter() const {
    return GetSchemaValue<GCCopyRecipientFilter>(m_ptr, "CSoundPatch", "m_Filter");
}

void GCSoundPatch::SetFilter(GCCopyRecipientFilter value) {
    SetSchemaValue(m_ptr, "CSoundPatch", "m_Filter", false, value);
}

float GCSoundPatch::GetCloseCaptionDuration() const {
    return GetSchemaValue<float>(m_ptr, "CSoundPatch", "m_flCloseCaptionDuration");
}

void GCSoundPatch::SetCloseCaptionDuration(float value) {
    SetSchemaValue(m_ptr, "CSoundPatch", "m_flCloseCaptionDuration", false, value);
}

bool GCSoundPatch::GetUpdatedSoundOrigin() const {
    return GetSchemaValue<bool>(m_ptr, "CSoundPatch", "m_bUpdatedSoundOrigin");
}

void GCSoundPatch::SetUpdatedSoundOrigin(bool value) {
    SetSchemaValue(m_ptr, "CSoundPatch", "m_bUpdatedSoundOrigin", false, value);
}

CUtlSymbolLarge GCSoundPatch::GetClassName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSoundPatch", "m_iszClassName");
}

void GCSoundPatch::SetClassName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CSoundPatch", "m_iszClassName", false, value);
}

std::string GCSoundPatch::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSoundPatch::IsValid() {
    return (m_ptr != nullptr);
}

GCSmoothFunc::GCSmoothFunc(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSmoothFunc::GCSmoothFunc(void *ptr) {
    m_ptr = ptr;
}

float GCSmoothFunc::GetSmoothAmplitude() const {
    return GetSchemaValue<float>(m_ptr, "CSmoothFunc", "m_flSmoothAmplitude");
}

void GCSmoothFunc::SetSmoothAmplitude(float value) {
    SetSchemaValue(m_ptr, "CSmoothFunc", "m_flSmoothAmplitude", false, value);
}

float GCSmoothFunc::GetSmoothBias() const {
    return GetSchemaValue<float>(m_ptr, "CSmoothFunc", "m_flSmoothBias");
}

void GCSmoothFunc::SetSmoothBias(float value) {
    SetSchemaValue(m_ptr, "CSmoothFunc", "m_flSmoothBias", false, value);
}

float GCSmoothFunc::GetSmoothDuration() const {
    return GetSchemaValue<float>(m_ptr, "CSmoothFunc", "m_flSmoothDuration");
}

void GCSmoothFunc::SetSmoothDuration(float value) {
    SetSchemaValue(m_ptr, "CSmoothFunc", "m_flSmoothDuration", false, value);
}

float GCSmoothFunc::GetSmoothRemainingTime() const {
    return GetSchemaValue<float>(m_ptr, "CSmoothFunc", "m_flSmoothRemainingTime");
}

void GCSmoothFunc::SetSmoothRemainingTime(float value) {
    SetSchemaValue(m_ptr, "CSmoothFunc", "m_flSmoothRemainingTime", false, value);
}

int32_t GCSmoothFunc::GetSmoothDir() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSmoothFunc", "m_nSmoothDir");
}

void GCSmoothFunc::SetSmoothDir(int32_t value) {
    SetSchemaValue(m_ptr, "CSmoothFunc", "m_nSmoothDir", false, value);
}

std::string GCSmoothFunc::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSmoothFunc::IsValid() {
    return (m_ptr != nullptr);
}

GIHasAttributes::GIHasAttributes(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GIHasAttributes::GIHasAttributes(void *ptr) {
    m_ptr = ptr;
}

std::string GIHasAttributes::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GIHasAttributes::IsValid() {
    return (m_ptr != nullptr);
}

GCRagdollPropAttached::GCRagdollPropAttached(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCRagdollPropAttached::GCRagdollPropAttached(void *ptr) {
    m_ptr = ptr;
}

uint32_t GCRagdollPropAttached::GetBoneIndexAttached() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CRagdollPropAttached", "m_boneIndexAttached");
}

void GCRagdollPropAttached::SetBoneIndexAttached(uint32_t value) {
    SetSchemaValue(m_ptr, "CRagdollPropAttached", "m_boneIndexAttached", false, value);
}

uint32_t GCRagdollPropAttached::GetRagdollAttachedObjectIndex() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CRagdollPropAttached", "m_ragdollAttachedObjectIndex");
}

void GCRagdollPropAttached::SetRagdollAttachedObjectIndex(uint32_t value) {
    SetSchemaValue(m_ptr, "CRagdollPropAttached", "m_ragdollAttachedObjectIndex", false, value);
}

Vector GCRagdollPropAttached::GetAttachmentPointBoneSpace() const {
    return GetSchemaValue<Vector>(m_ptr, "CRagdollPropAttached", "m_attachmentPointBoneSpace");
}

void GCRagdollPropAttached::SetAttachmentPointBoneSpace(Vector value) {
    SetSchemaValue(m_ptr, "CRagdollPropAttached", "m_attachmentPointBoneSpace", false, value);
}

Vector GCRagdollPropAttached::GetAttachmentPointRagdollSpace() const {
    return GetSchemaValue<Vector>(m_ptr, "CRagdollPropAttached", "m_attachmentPointRagdollSpace");
}

void GCRagdollPropAttached::SetAttachmentPointRagdollSpace(Vector value) {
    SetSchemaValue(m_ptr, "CRagdollPropAttached", "m_attachmentPointRagdollSpace", false, value);
}

bool GCRagdollPropAttached::GetShouldDetach() const {
    return GetSchemaValue<bool>(m_ptr, "CRagdollPropAttached", "m_bShouldDetach");
}

void GCRagdollPropAttached::SetShouldDetach(bool value) {
    SetSchemaValue(m_ptr, "CRagdollPropAttached", "m_bShouldDetach", false, value);
}

bool GCRagdollPropAttached::GetShouldDeleteAttachedActivationRecord() const {
    return GetSchemaValue<bool>(m_ptr, "CRagdollPropAttached", "m_bShouldDeleteAttachedActivationRecord");
}

void GCRagdollPropAttached::SetShouldDeleteAttachedActivationRecord(bool value) {
    SetSchemaValue(m_ptr, "CRagdollPropAttached", "m_bShouldDeleteAttachedActivationRecord", false, value);
}

std::string GCRagdollPropAttached::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCRagdollPropAttached::IsValid() {
    return (m_ptr != nullptr);
}

GHullFlags_t::GHullFlags_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GHullFlags_t::GHullFlags_t(void *ptr) {
    m_ptr = ptr;
}

bool GHullFlags_t::GetHull_Human() const {
    return GetSchemaValue<bool>(m_ptr, "HullFlags_t", "m_bHull_Human");
}

void GHullFlags_t::SetHull_Human(bool value) {
    SetSchemaValue(m_ptr, "HullFlags_t", "m_bHull_Human", true, value);
}

bool GHullFlags_t::GetHull_SmallCentered() const {
    return GetSchemaValue<bool>(m_ptr, "HullFlags_t", "m_bHull_SmallCentered");
}

void GHullFlags_t::SetHull_SmallCentered(bool value) {
    SetSchemaValue(m_ptr, "HullFlags_t", "m_bHull_SmallCentered", true, value);
}

bool GHullFlags_t::GetHull_WideHuman() const {
    return GetSchemaValue<bool>(m_ptr, "HullFlags_t", "m_bHull_WideHuman");
}

void GHullFlags_t::SetHull_WideHuman(bool value) {
    SetSchemaValue(m_ptr, "HullFlags_t", "m_bHull_WideHuman", true, value);
}

bool GHullFlags_t::GetHull_Tiny() const {
    return GetSchemaValue<bool>(m_ptr, "HullFlags_t", "m_bHull_Tiny");
}

void GHullFlags_t::SetHull_Tiny(bool value) {
    SetSchemaValue(m_ptr, "HullFlags_t", "m_bHull_Tiny", true, value);
}

bool GHullFlags_t::GetHull_Medium() const {
    return GetSchemaValue<bool>(m_ptr, "HullFlags_t", "m_bHull_Medium");
}

void GHullFlags_t::SetHull_Medium(bool value) {
    SetSchemaValue(m_ptr, "HullFlags_t", "m_bHull_Medium", true, value);
}

bool GHullFlags_t::GetHull_TinyCentered() const {
    return GetSchemaValue<bool>(m_ptr, "HullFlags_t", "m_bHull_TinyCentered");
}

void GHullFlags_t::SetHull_TinyCentered(bool value) {
    SetSchemaValue(m_ptr, "HullFlags_t", "m_bHull_TinyCentered", true, value);
}

bool GHullFlags_t::GetHull_Large() const {
    return GetSchemaValue<bool>(m_ptr, "HullFlags_t", "m_bHull_Large");
}

void GHullFlags_t::SetHull_Large(bool value) {
    SetSchemaValue(m_ptr, "HullFlags_t", "m_bHull_Large", true, value);
}

bool GHullFlags_t::GetHull_LargeCentered() const {
    return GetSchemaValue<bool>(m_ptr, "HullFlags_t", "m_bHull_LargeCentered");
}

void GHullFlags_t::SetHull_LargeCentered(bool value) {
    SetSchemaValue(m_ptr, "HullFlags_t", "m_bHull_LargeCentered", true, value);
}

bool GHullFlags_t::GetHull_MediumTall() const {
    return GetSchemaValue<bool>(m_ptr, "HullFlags_t", "m_bHull_MediumTall");
}

void GHullFlags_t::SetHull_MediumTall(bool value) {
    SetSchemaValue(m_ptr, "HullFlags_t", "m_bHull_MediumTall", true, value);
}

bool GHullFlags_t::GetHull_Small() const {
    return GetSchemaValue<bool>(m_ptr, "HullFlags_t", "m_bHull_Small");
}

void GHullFlags_t::SetHull_Small(bool value) {
    SetSchemaValue(m_ptr, "HullFlags_t", "m_bHull_Small", true, value);
}

std::string GHullFlags_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GHullFlags_t::IsValid() {
    return (m_ptr != nullptr);
}

GCBodyComponentBaseAnimGraph::GCBodyComponentBaseAnimGraph(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBodyComponentBaseAnimGraph::GCBodyComponentBaseAnimGraph(void *ptr) {
    m_ptr = ptr;
}

GCBaseAnimGraphController GCBodyComponentBaseAnimGraph::GetAnimationController() const {
    return GetSchemaValue<GCBaseAnimGraphController>(m_ptr, "CBodyComponentBaseAnimGraph", "m_animationController");
}

void GCBodyComponentBaseAnimGraph::SetAnimationController(GCBaseAnimGraphController value) {
    SetSchemaValue(m_ptr, "CBodyComponentBaseAnimGraph", "m_animationController", false, value);
}

std::string GCBodyComponentBaseAnimGraph::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBodyComponentBaseAnimGraph::IsValid() {
    return (m_ptr != nullptr);
}

GGameAmmoTypeInfo_t::GGameAmmoTypeInfo_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GGameAmmoTypeInfo_t::GGameAmmoTypeInfo_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GGameAmmoTypeInfo_t::GetBuySize() const {
    return GetSchemaValue<int32_t>(m_ptr, "GameAmmoTypeInfo_t", "m_nBuySize");
}

void GGameAmmoTypeInfo_t::SetBuySize(int32_t value) {
    SetSchemaValue(m_ptr, "GameAmmoTypeInfo_t", "m_nBuySize", true, value);
}

int32_t GGameAmmoTypeInfo_t::GetCost() const {
    return GetSchemaValue<int32_t>(m_ptr, "GameAmmoTypeInfo_t", "m_nCost");
}

void GGameAmmoTypeInfo_t::SetCost(int32_t value) {
    SetSchemaValue(m_ptr, "GameAmmoTypeInfo_t", "m_nCost", true, value);
}

std::string GGameAmmoTypeInfo_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GGameAmmoTypeInfo_t::IsValid() {
    return (m_ptr != nullptr);
}

GCPhysMotor::GCPhysMotor(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPhysMotor::GCPhysMotor(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCPhysMotor::GetNameAttach() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPhysMotor", "m_nameAttach");
}

void GCPhysMotor::SetNameAttach(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CPhysMotor", "m_nameAttach", false, value);
}

GCBaseEntity GCPhysMotor::GetAttachedObject() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CPhysMotor", "m_hAttachedObject"));
    return value;
}

void GCPhysMotor::SetAttachedObject(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'AttachedObject' is not possible.\n");
}

float GCPhysMotor::GetSpinUp() const {
    return GetSchemaValue<float>(m_ptr, "CPhysMotor", "m_spinUp");
}

void GCPhysMotor::SetSpinUp(float value) {
    SetSchemaValue(m_ptr, "CPhysMotor", "m_spinUp", false, value);
}

float GCPhysMotor::GetAdditionalAcceleration() const {
    return GetSchemaValue<float>(m_ptr, "CPhysMotor", "m_additionalAcceleration");
}

void GCPhysMotor::SetAdditionalAcceleration(float value) {
    SetSchemaValue(m_ptr, "CPhysMotor", "m_additionalAcceleration", false, value);
}

float GCPhysMotor::GetAngularAcceleration() const {
    return GetSchemaValue<float>(m_ptr, "CPhysMotor", "m_angularAcceleration");
}

void GCPhysMotor::SetAngularAcceleration(float value) {
    SetSchemaValue(m_ptr, "CPhysMotor", "m_angularAcceleration", false, value);
}

GCMotorController GCPhysMotor::GetMotor() const {
    return GetSchemaValue<GCMotorController>(m_ptr, "CPhysMotor", "m_motor");
}

void GCPhysMotor::SetMotor(GCMotorController value) {
    SetSchemaValue(m_ptr, "CPhysMotor", "m_motor", false, value);
}

std::string GCPhysMotor::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPhysMotor::IsValid() {
    return (m_ptr != nullptr);
}

GCSimTimer::GCSimTimer(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSimTimer::GCSimTimer(void *ptr) {
    m_ptr = ptr;
}

float GCSimTimer::GetInterval() const {
    return GetSchemaValue<float>(m_ptr, "CSimTimer", "m_interval");
}

void GCSimTimer::SetInterval(float value) {
    SetSchemaValue(m_ptr, "CSimTimer", "m_interval", false, value);
}

std::string GCSimTimer::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSimTimer::IsValid() {
    return (m_ptr != nullptr);
}

GCBaseIssue::GCBaseIssue(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBaseIssue::GCBaseIssue(void *ptr) {
    m_ptr = ptr;
}

std::string GCBaseIssue::GetTypeString() const {
    return GetSchemaValuePtr<char>(m_ptr, "CBaseIssue", "m_szTypeString");
}

void GCBaseIssue::SetTypeString(std::string value) {
    WriteSchemaPtrValue(m_ptr, "CBaseIssue", "m_szTypeString", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 64);
}

std::string GCBaseIssue::GetDetailsString() const {
    return GetSchemaValuePtr<char>(m_ptr, "CBaseIssue", "m_szDetailsString");
}

void GCBaseIssue::SetDetailsString(std::string value) {
    WriteSchemaPtrValue(m_ptr, "CBaseIssue", "m_szDetailsString", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 260);
}

int32_t GCBaseIssue::GetNumYesVotes() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBaseIssue", "m_iNumYesVotes");
}

void GCBaseIssue::SetNumYesVotes(int32_t value) {
    SetSchemaValue(m_ptr, "CBaseIssue", "m_iNumYesVotes", false, value);
}

int32_t GCBaseIssue::GetNumNoVotes() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBaseIssue", "m_iNumNoVotes");
}

void GCBaseIssue::SetNumNoVotes(int32_t value) {
    SetSchemaValue(m_ptr, "CBaseIssue", "m_iNumNoVotes", false, value);
}

int32_t GCBaseIssue::GetNumPotentialVotes() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBaseIssue", "m_iNumPotentialVotes");
}

void GCBaseIssue::SetNumPotentialVotes(int32_t value) {
    SetSchemaValue(m_ptr, "CBaseIssue", "m_iNumPotentialVotes", false, value);
}

std::string GCBaseIssue::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBaseIssue::IsValid() {
    return (m_ptr != nullptr);
}

GCTakeDamageInfo::GCTakeDamageInfo(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTakeDamageInfo::GCTakeDamageInfo(void *ptr) {
    m_ptr = ptr;
}

Vector GCTakeDamageInfo::GetDamageForce() const {
    return GetSchemaValue<Vector>(m_ptr, "CTakeDamageInfo", "m_vecDamageForce");
}

void GCTakeDamageInfo::SetDamageForce(Vector value) {
    SetSchemaValue(m_ptr, "CTakeDamageInfo", "m_vecDamageForce", false, value);
}

Vector GCTakeDamageInfo::GetDamagePosition() const {
    return GetSchemaValue<Vector>(m_ptr, "CTakeDamageInfo", "m_vecDamagePosition");
}

void GCTakeDamageInfo::SetDamagePosition(Vector value) {
    SetSchemaValue(m_ptr, "CTakeDamageInfo", "m_vecDamagePosition", false, value);
}

Vector GCTakeDamageInfo::GetReportedPosition() const {
    return GetSchemaValue<Vector>(m_ptr, "CTakeDamageInfo", "m_vecReportedPosition");
}

void GCTakeDamageInfo::SetReportedPosition(Vector value) {
    SetSchemaValue(m_ptr, "CTakeDamageInfo", "m_vecReportedPosition", false, value);
}

Vector GCTakeDamageInfo::GetDamageDirection() const {
    return GetSchemaValue<Vector>(m_ptr, "CTakeDamageInfo", "m_vecDamageDirection");
}

void GCTakeDamageInfo::SetDamageDirection(Vector value) {
    SetSchemaValue(m_ptr, "CTakeDamageInfo", "m_vecDamageDirection", false, value);
}

GCBaseEntity GCTakeDamageInfo::GetInflictor() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CTakeDamageInfo", "m_hInflictor"));
    return value;
}

void GCTakeDamageInfo::SetInflictor(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Inflictor' is not possible.\n");
}

GCBaseEntity GCTakeDamageInfo::GetAttacker() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CTakeDamageInfo", "m_hAttacker"));
    return value;
}

void GCTakeDamageInfo::SetAttacker(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Attacker' is not possible.\n");
}

GCBaseEntity GCTakeDamageInfo::GetAbility() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CTakeDamageInfo", "m_hAbility"));
    return value;
}

void GCTakeDamageInfo::SetAbility(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Ability' is not possible.\n");
}

float GCTakeDamageInfo::GetDamage() const {
    return GetSchemaValue<float>(m_ptr, "CTakeDamageInfo", "m_flDamage");
}

void GCTakeDamageInfo::SetDamage(float value) {
    SetSchemaValue(m_ptr, "CTakeDamageInfo", "m_flDamage", false, value);
}

float GCTakeDamageInfo::GetTotalledDamage() const {
    return GetSchemaValue<float>(m_ptr, "CTakeDamageInfo", "m_flTotalledDamage");
}

void GCTakeDamageInfo::SetTotalledDamage(float value) {
    SetSchemaValue(m_ptr, "CTakeDamageInfo", "m_flTotalledDamage", false, value);
}

int32_t GCTakeDamageInfo::GetBitsDamageType() const {
    return GetSchemaValue<int32_t>(m_ptr, "CTakeDamageInfo", "m_bitsDamageType");
}

void GCTakeDamageInfo::SetBitsDamageType(int32_t value) {
    SetSchemaValue(m_ptr, "CTakeDamageInfo", "m_bitsDamageType", false, value);
}

int32_t GCTakeDamageInfo::GetDamageCustom() const {
    return GetSchemaValue<int32_t>(m_ptr, "CTakeDamageInfo", "m_iDamageCustom");
}

void GCTakeDamageInfo::SetDamageCustom(int32_t value) {
    SetSchemaValue(m_ptr, "CTakeDamageInfo", "m_iDamageCustom", false, value);
}

uint8_t GCTakeDamageInfo::GetAmmoType() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CTakeDamageInfo", "m_iAmmoType");
}

void GCTakeDamageInfo::SetAmmoType(uint8_t value) {
    SetSchemaValue(m_ptr, "CTakeDamageInfo", "m_iAmmoType", false, value);
}

float GCTakeDamageInfo::GetOriginalDamage() const {
    return GetSchemaValue<float>(m_ptr, "CTakeDamageInfo", "m_flOriginalDamage");
}

void GCTakeDamageInfo::SetOriginalDamage(float value) {
    SetSchemaValue(m_ptr, "CTakeDamageInfo", "m_flOriginalDamage", false, value);
}

bool GCTakeDamageInfo::GetShouldBleed() const {
    return GetSchemaValue<bool>(m_ptr, "CTakeDamageInfo", "m_bShouldBleed");
}

void GCTakeDamageInfo::SetShouldBleed(bool value) {
    SetSchemaValue(m_ptr, "CTakeDamageInfo", "m_bShouldBleed", false, value);
}

bool GCTakeDamageInfo::GetShouldSpark() const {
    return GetSchemaValue<bool>(m_ptr, "CTakeDamageInfo", "m_bShouldSpark");
}

void GCTakeDamageInfo::SetShouldSpark(bool value) {
    SetSchemaValue(m_ptr, "CTakeDamageInfo", "m_bShouldSpark", false, value);
}

TakeDamageFlags_t GCTakeDamageInfo::GetDamageFlags() const {
    return GetSchemaValue<TakeDamageFlags_t>(m_ptr, "CTakeDamageInfo", "m_nDamageFlags");
}

void GCTakeDamageInfo::SetDamageFlags(TakeDamageFlags_t value) {
    SetSchemaValue(m_ptr, "CTakeDamageInfo", "m_nDamageFlags", false, value);
}

int32_t GCTakeDamageInfo::GetNumObjectsPenetrated() const {
    return GetSchemaValue<int32_t>(m_ptr, "CTakeDamageInfo", "m_nNumObjectsPenetrated");
}

void GCTakeDamageInfo::SetNumObjectsPenetrated(int32_t value) {
    SetSchemaValue(m_ptr, "CTakeDamageInfo", "m_nNumObjectsPenetrated", false, value);
}

bool GCTakeDamageInfo::GetInTakeDamageFlow() const {
    return GetSchemaValue<bool>(m_ptr, "CTakeDamageInfo", "m_bInTakeDamageFlow");
}

void GCTakeDamageInfo::SetInTakeDamageFlow(bool value) {
    SetSchemaValue(m_ptr, "CTakeDamageInfo", "m_bInTakeDamageFlow", false, value);
}

std::string GCTakeDamageInfo::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTakeDamageInfo::IsValid() {
    return (m_ptr != nullptr);
}

GConceptHistory_t::GConceptHistory_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GConceptHistory_t::GConceptHistory_t(void *ptr) {
    m_ptr = ptr;
}

float GConceptHistory_t::GetTimeSpoken() const {
    return GetSchemaValue<float>(m_ptr, "ConceptHistory_t", "timeSpoken");
}

void GConceptHistory_t::SetTimeSpoken(float value) {
    SetSchemaValue(m_ptr, "ConceptHistory_t", "timeSpoken", true, value);
}

std::string GConceptHistory_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GConceptHistory_t::IsValid() {
    return (m_ptr != nullptr);
}

GCPhysTorque::GCPhysTorque(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPhysTorque::GCPhysTorque(void *ptr) {
    m_ptr = ptr;
}

Vector GCPhysTorque::GetAxis() const {
    return GetSchemaValue<Vector>(m_ptr, "CPhysTorque", "m_axis");
}

void GCPhysTorque::SetAxis(Vector value) {
    SetSchemaValue(m_ptr, "CPhysTorque", "m_axis", false, value);
}

std::string GCPhysTorque::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPhysTorque::IsValid() {
    return (m_ptr != nullptr);
}

GSummaryTakeDamageInfo_t::GSummaryTakeDamageInfo_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GSummaryTakeDamageInfo_t::GSummaryTakeDamageInfo_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GSummaryTakeDamageInfo_t::GetSummarisedCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "SummaryTakeDamageInfo_t", "nSummarisedCount");
}

void GSummaryTakeDamageInfo_t::SetSummarisedCount(int32_t value) {
    SetSchemaValue(m_ptr, "SummaryTakeDamageInfo_t", "nSummarisedCount", true, value);
}

GCTakeDamageInfo GSummaryTakeDamageInfo_t::GetInfo() const {
    return GetSchemaValue<GCTakeDamageInfo>(m_ptr, "SummaryTakeDamageInfo_t", "info");
}

void GSummaryTakeDamageInfo_t::SetInfo(GCTakeDamageInfo value) {
    SetSchemaValue(m_ptr, "SummaryTakeDamageInfo_t", "info", true, value);
}

GCTakeDamageResult GSummaryTakeDamageInfo_t::GetResult() const {
    return GetSchemaValue<GCTakeDamageResult>(m_ptr, "SummaryTakeDamageInfo_t", "result");
}

void GSummaryTakeDamageInfo_t::SetResult(GCTakeDamageResult value) {
    SetSchemaValue(m_ptr, "SummaryTakeDamageInfo_t", "result", true, value);
}

GCBaseEntity GSummaryTakeDamageInfo_t::GetTarget() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "SummaryTakeDamageInfo_t", "hTarget"));
    return value;
}

void GSummaryTakeDamageInfo_t::SetTarget(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Target' is not possible.\n");
}

std::string GSummaryTakeDamageInfo_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GSummaryTakeDamageInfo_t::IsValid() {
    return (m_ptr != nullptr);
}

GCRandSimTimer::GCRandSimTimer(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCRandSimTimer::GCRandSimTimer(void *ptr) {
    m_ptr = ptr;
}

float GCRandSimTimer::GetMinInterval() const {
    return GetSchemaValue<float>(m_ptr, "CRandSimTimer", "m_minInterval");
}

void GCRandSimTimer::SetMinInterval(float value) {
    SetSchemaValue(m_ptr, "CRandSimTimer", "m_minInterval", false, value);
}

float GCRandSimTimer::GetMaxInterval() const {
    return GetSchemaValue<float>(m_ptr, "CRandSimTimer", "m_maxInterval");
}

void GCRandSimTimer::SetMaxInterval(float value) {
    SetSchemaValue(m_ptr, "CRandSimTimer", "m_maxInterval", false, value);
}

std::string GCRandSimTimer::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCRandSimTimer::IsValid() {
    return (m_ptr != nullptr);
}

GCBtNodeComposite::GCBtNodeComposite(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBtNodeComposite::GCBtNodeComposite(void *ptr) {
    m_ptr = ptr;
}

std::string GCBtNodeComposite::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBtNodeComposite::IsValid() {
    return (m_ptr != nullptr);
}

GCFireCrackerBlast::GCFireCrackerBlast(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFireCrackerBlast::GCFireCrackerBlast(void *ptr) {
    m_ptr = ptr;
}

std::string GCFireCrackerBlast::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFireCrackerBlast::IsValid() {
    return (m_ptr != nullptr);
}

Gsndopvarlatchdata_t::Gsndopvarlatchdata_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

Gsndopvarlatchdata_t::Gsndopvarlatchdata_t(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge Gsndopvarlatchdata_t::GetStack() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "sndopvarlatchdata_t", "m_iszStack");
}

void Gsndopvarlatchdata_t::SetStack(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "sndopvarlatchdata_t", "m_iszStack", true, value);
}

CUtlSymbolLarge Gsndopvarlatchdata_t::GetOperator() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "sndopvarlatchdata_t", "m_iszOperator");
}

void Gsndopvarlatchdata_t::SetOperator(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "sndopvarlatchdata_t", "m_iszOperator", true, value);
}

CUtlSymbolLarge Gsndopvarlatchdata_t::GetOpvar() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "sndopvarlatchdata_t", "m_iszOpvar");
}

void Gsndopvarlatchdata_t::SetOpvar(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "sndopvarlatchdata_t", "m_iszOpvar", true, value);
}

float Gsndopvarlatchdata_t::GetVal() const {
    return GetSchemaValue<float>(m_ptr, "sndopvarlatchdata_t", "m_flVal");
}

void Gsndopvarlatchdata_t::SetVal(float value) {
    SetSchemaValue(m_ptr, "sndopvarlatchdata_t", "m_flVal", true, value);
}

Vector Gsndopvarlatchdata_t::GetPos() const {
    return GetSchemaValue<Vector>(m_ptr, "sndopvarlatchdata_t", "m_vPos");
}

void Gsndopvarlatchdata_t::SetPos(Vector value) {
    SetSchemaValue(m_ptr, "sndopvarlatchdata_t", "m_vPos", true, value);
}

std::string Gsndopvarlatchdata_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool Gsndopvarlatchdata_t::IsValid() {
    return (m_ptr != nullptr);
}

GCCSGO_TeamSelectTerroristPosition::GCCSGO_TeamSelectTerroristPosition(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSGO_TeamSelectTerroristPosition::GCCSGO_TeamSelectTerroristPosition(void *ptr) {
    m_ptr = ptr;
}

std::string GCCSGO_TeamSelectTerroristPosition::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSGO_TeamSelectTerroristPosition::IsValid() {
    return (m_ptr != nullptr);
}

GCAI_ExpresserWithFollowup::GCAI_ExpresserWithFollowup(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAI_ExpresserWithFollowup::GCAI_ExpresserWithFollowup(void *ptr) {
    m_ptr = ptr;
}

GResponseFollowup GCAI_ExpresserWithFollowup::GetPostponedFollowup() const {
    GResponseFollowup value(GetSchemaValuePtr<void>(m_ptr, "CAI_ExpresserWithFollowup", "m_pPostponedFollowup"));
    return value;
}

void GCAI_ExpresserWithFollowup::SetPostponedFollowup(GResponseFollowup* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'PostponedFollowup' is not possible.\n");
}

std::string GCAI_ExpresserWithFollowup::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAI_ExpresserWithFollowup::IsValid() {
    return (m_ptr != nullptr);
}

GCNavVolumeMarkupVolume::GCNavVolumeMarkupVolume(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNavVolumeMarkupVolume::GCNavVolumeMarkupVolume(void *ptr) {
    m_ptr = ptr;
}

std::string GCNavVolumeMarkupVolume::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNavVolumeMarkupVolume::IsValid() {
    return (m_ptr != nullptr);
}

GQuestProgress::GQuestProgress(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GQuestProgress::GQuestProgress(void *ptr) {
    m_ptr = ptr;
}

std::string GQuestProgress::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GQuestProgress::IsValid() {
    return (m_ptr != nullptr);
}

Glerpdata_t::Glerpdata_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

Glerpdata_t::Glerpdata_t(void *ptr) {
    m_ptr = ptr;
}

GCBaseEntity Glerpdata_t::GetEnt() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "lerpdata_t", "m_hEnt"));
    return value;
}

void Glerpdata_t::SetEnt(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Ent' is not possible.\n");
}

MoveType_t Glerpdata_t::GetMoveType() const {
    return GetSchemaValue<MoveType_t>(m_ptr, "lerpdata_t", "m_MoveType");
}

void Glerpdata_t::SetMoveType(MoveType_t value) {
    SetSchemaValue(m_ptr, "lerpdata_t", "m_MoveType", true, value);
}

Vector Glerpdata_t::GetStartOrigin() const {
    return GetSchemaValue<Vector>(m_ptr, "lerpdata_t", "m_vecStartOrigin");
}

void Glerpdata_t::SetStartOrigin(Vector value) {
    SetSchemaValue(m_ptr, "lerpdata_t", "m_vecStartOrigin", true, value);
}

Quaternion Glerpdata_t::GetStartRot() const {
    return GetSchemaValue<Quaternion>(m_ptr, "lerpdata_t", "m_qStartRot");
}

void Glerpdata_t::SetStartRot(Quaternion value) {
    SetSchemaValue(m_ptr, "lerpdata_t", "m_qStartRot", true, value);
}

GParticleIndex_t Glerpdata_t::GetFXIndex() const {
    return GetSchemaValue<GParticleIndex_t>(m_ptr, "lerpdata_t", "m_nFXIndex");
}

void Glerpdata_t::SetFXIndex(GParticleIndex_t value) {
    SetSchemaValue(m_ptr, "lerpdata_t", "m_nFXIndex", true, value);
}

std::string Glerpdata_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool Glerpdata_t::IsValid() {
    return (m_ptr != nullptr);
}

GCMultiplayer_Expresser::GCMultiplayer_Expresser(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMultiplayer_Expresser::GCMultiplayer_Expresser(void *ptr) {
    m_ptr = ptr;
}

bool GCMultiplayer_Expresser::GetAllowMultipleScenes() const {
    return GetSchemaValue<bool>(m_ptr, "CMultiplayer_Expresser", "m_bAllowMultipleScenes");
}

void GCMultiplayer_Expresser::SetAllowMultipleScenes(bool value) {
    SetSchemaValue(m_ptr, "CMultiplayer_Expresser", "m_bAllowMultipleScenes", false, value);
}

std::string GCMultiplayer_Expresser::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMultiplayer_Expresser::IsValid() {
    return (m_ptr != nullptr);
}

GCTakeDamageSummaryScopeGuard::GCTakeDamageSummaryScopeGuard(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTakeDamageSummaryScopeGuard::GCTakeDamageSummaryScopeGuard(void *ptr) {
    m_ptr = ptr;
}

std::vector<GSummaryTakeDamageInfo_t*> GCTakeDamageSummaryScopeGuard::GetSummaries() const {
    CUtlVector<GSummaryTakeDamageInfo_t*>* vec = GetSchemaValue<CUtlVector<GSummaryTakeDamageInfo_t*>*>(m_ptr, "CTakeDamageSummaryScopeGuard", "m_vecSummaries"); std::vector<GSummaryTakeDamageInfo_t*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCTakeDamageSummaryScopeGuard::SetSummaries(std::vector<GSummaryTakeDamageInfo_t*> value) {
    SetSchemaValueCUtlVector<GSummaryTakeDamageInfo_t*>(m_ptr, "CTakeDamageSummaryScopeGuard", "m_vecSummaries", false, value);
}

std::string GCTakeDamageSummaryScopeGuard::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTakeDamageSummaryScopeGuard::IsValid() {
    return (m_ptr != nullptr);
}

GCWeaponSawedoff::GCWeaponSawedoff(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWeaponSawedoff::GCWeaponSawedoff(void *ptr) {
    m_ptr = ptr;
}

std::string GCWeaponSawedoff::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWeaponSawedoff::IsValid() {
    return (m_ptr != nullptr);
}

GCCSPlayer_MovementServices::GCCSPlayer_MovementServices(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSPlayer_MovementServices::GCCSPlayer_MovementServices(void *ptr) {
    m_ptr = ptr;
}

float GCCSPlayer_MovementServices::GetMaxFallVelocity() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayer_MovementServices", "m_flMaxFallVelocity");
}

void GCCSPlayer_MovementServices::SetMaxFallVelocity(float value) {
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_flMaxFallVelocity", false, value);
}

Vector GCCSPlayer_MovementServices::GetLadderNormal() const {
    return GetSchemaValue<Vector>(m_ptr, "CCSPlayer_MovementServices", "m_vecLadderNormal");
}

void GCCSPlayer_MovementServices::SetLadderNormal(Vector value) {
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_vecLadderNormal", false, value);
}

int32_t GCCSPlayer_MovementServices::GetLadderSurfacePropIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayer_MovementServices", "m_nLadderSurfacePropIndex");
}

void GCCSPlayer_MovementServices::SetLadderSurfacePropIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_nLadderSurfacePropIndex", false, value);
}

float GCCSPlayer_MovementServices::GetDuckAmount() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayer_MovementServices", "m_flDuckAmount");
}

void GCCSPlayer_MovementServices::SetDuckAmount(float value) {
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_flDuckAmount", false, value);
}

float GCCSPlayer_MovementServices::GetDuckSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayer_MovementServices", "m_flDuckSpeed");
}

void GCCSPlayer_MovementServices::SetDuckSpeed(float value) {
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_flDuckSpeed", false, value);
}

bool GCCSPlayer_MovementServices::GetDuckOverride() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_MovementServices", "m_bDuckOverride");
}

void GCCSPlayer_MovementServices::SetDuckOverride(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_bDuckOverride", false, value);
}

bool GCCSPlayer_MovementServices::GetDesiresDuck() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_MovementServices", "m_bDesiresDuck");
}

void GCCSPlayer_MovementServices::SetDesiresDuck(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_bDesiresDuck", false, value);
}

float GCCSPlayer_MovementServices::GetDuckOffset() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayer_MovementServices", "m_flDuckOffset");
}

void GCCSPlayer_MovementServices::SetDuckOffset(float value) {
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_flDuckOffset", false, value);
}

uint32_t GCCSPlayer_MovementServices::GetDuckTimeMsecs() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CCSPlayer_MovementServices", "m_nDuckTimeMsecs");
}

void GCCSPlayer_MovementServices::SetDuckTimeMsecs(uint32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_nDuckTimeMsecs", false, value);
}

uint32_t GCCSPlayer_MovementServices::GetDuckJumpTimeMsecs() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CCSPlayer_MovementServices", "m_nDuckJumpTimeMsecs");
}

void GCCSPlayer_MovementServices::SetDuckJumpTimeMsecs(uint32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_nDuckJumpTimeMsecs", false, value);
}

uint32_t GCCSPlayer_MovementServices::GetJumpTimeMsecs() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CCSPlayer_MovementServices", "m_nJumpTimeMsecs");
}

void GCCSPlayer_MovementServices::SetJumpTimeMsecs(uint32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_nJumpTimeMsecs", false, value);
}

float GCCSPlayer_MovementServices::GetLastDuckTime() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayer_MovementServices", "m_flLastDuckTime");
}

void GCCSPlayer_MovementServices::SetLastDuckTime(float value) {
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_flLastDuckTime", false, value);
}

Vector2D GCCSPlayer_MovementServices::GetLastPositionAtFullCrouchSpeed() const {
    return GetSchemaValue<Vector2D>(m_ptr, "CCSPlayer_MovementServices", "m_vecLastPositionAtFullCrouchSpeed");
}

void GCCSPlayer_MovementServices::SetLastPositionAtFullCrouchSpeed(Vector2D value) {
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_vecLastPositionAtFullCrouchSpeed", false, value);
}

bool GCCSPlayer_MovementServices::GetDuckUntilOnGround() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_MovementServices", "m_duckUntilOnGround");
}

void GCCSPlayer_MovementServices::SetDuckUntilOnGround(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_duckUntilOnGround", false, value);
}

bool GCCSPlayer_MovementServices::GetHasWalkMovedSinceLastJump() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_MovementServices", "m_bHasWalkMovedSinceLastJump");
}

void GCCSPlayer_MovementServices::SetHasWalkMovedSinceLastJump(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_bHasWalkMovedSinceLastJump", false, value);
}

bool GCCSPlayer_MovementServices::GetInStuckTest() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_MovementServices", "m_bInStuckTest");
}

void GCCSPlayer_MovementServices::SetInStuckTest(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_bInStuckTest", false, value);
}

int32_t GCCSPlayer_MovementServices::GetTraceCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayer_MovementServices", "m_nTraceCount");
}

void GCCSPlayer_MovementServices::SetTraceCount(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_nTraceCount", false, value);
}

int32_t GCCSPlayer_MovementServices::GetStuckLast() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayer_MovementServices", "m_StuckLast");
}

void GCCSPlayer_MovementServices::SetStuckLast(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_StuckLast", false, value);
}

bool GCCSPlayer_MovementServices::GetSpeedCropped() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_MovementServices", "m_bSpeedCropped");
}

void GCCSPlayer_MovementServices::SetSpeedCropped(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_bSpeedCropped", false, value);
}

int32_t GCCSPlayer_MovementServices::GetOldWaterLevel() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayer_MovementServices", "m_nOldWaterLevel");
}

void GCCSPlayer_MovementServices::SetOldWaterLevel(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_nOldWaterLevel", false, value);
}

float GCCSPlayer_MovementServices::GetWaterEntryTime() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayer_MovementServices", "m_flWaterEntryTime");
}

void GCCSPlayer_MovementServices::SetWaterEntryTime(float value) {
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_flWaterEntryTime", false, value);
}

Vector GCCSPlayer_MovementServices::GetForward() const {
    return GetSchemaValue<Vector>(m_ptr, "CCSPlayer_MovementServices", "m_vecForward");
}

void GCCSPlayer_MovementServices::SetForward(Vector value) {
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_vecForward", false, value);
}

Vector GCCSPlayer_MovementServices::GetLeft() const {
    return GetSchemaValue<Vector>(m_ptr, "CCSPlayer_MovementServices", "m_vecLeft");
}

void GCCSPlayer_MovementServices::SetLeft(Vector value) {
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_vecLeft", false, value);
}

Vector GCCSPlayer_MovementServices::GetUp() const {
    return GetSchemaValue<Vector>(m_ptr, "CCSPlayer_MovementServices", "m_vecUp");
}

void GCCSPlayer_MovementServices::SetUp(Vector value) {
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_vecUp", false, value);
}

int32_t GCCSPlayer_MovementServices::GetGameCodeHasMovedPlayerAfterCommand() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayer_MovementServices", "m_nGameCodeHasMovedPlayerAfterCommand");
}

void GCCSPlayer_MovementServices::SetGameCodeHasMovedPlayerAfterCommand(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_nGameCodeHasMovedPlayerAfterCommand", false, value);
}

bool GCCSPlayer_MovementServices::GetMadeFootstepNoise() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_MovementServices", "m_bMadeFootstepNoise");
}

void GCCSPlayer_MovementServices::SetMadeFootstepNoise(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_bMadeFootstepNoise", false, value);
}

int32_t GCCSPlayer_MovementServices::GetFootsteps() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayer_MovementServices", "m_iFootsteps");
}

void GCCSPlayer_MovementServices::SetFootsteps(int32_t value) {
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_iFootsteps", false, value);
}

bool GCCSPlayer_MovementServices::GetOldJumpPressed() const {
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_MovementServices", "m_bOldJumpPressed");
}

void GCCSPlayer_MovementServices::SetOldJumpPressed(bool value) {
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_bOldJumpPressed", false, value);
}

float GCCSPlayer_MovementServices::GetJumpPressedTime() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayer_MovementServices", "m_flJumpPressedTime");
}

void GCCSPlayer_MovementServices::SetJumpPressedTime(float value) {
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_flJumpPressedTime", false, value);
}

float GCCSPlayer_MovementServices::GetJumpUntil() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayer_MovementServices", "m_flJumpUntil");
}

void GCCSPlayer_MovementServices::SetJumpUntil(float value) {
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_flJumpUntil", false, value);
}

float GCCSPlayer_MovementServices::GetJumpVel() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayer_MovementServices", "m_flJumpVel");
}

void GCCSPlayer_MovementServices::SetJumpVel(float value) {
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_flJumpVel", false, value);
}

uint64_t GCCSPlayer_MovementServices::GetButtonDownMaskPrev() const {
    return GetSchemaValue<uint64_t>(m_ptr, "CCSPlayer_MovementServices", "m_nButtonDownMaskPrev");
}

void GCCSPlayer_MovementServices::SetButtonDownMaskPrev(uint64_t value) {
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_nButtonDownMaskPrev", false, value);
}

float GCCSPlayer_MovementServices::GetOffsetTickCompleteTime() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayer_MovementServices", "m_flOffsetTickCompleteTime");
}

void GCCSPlayer_MovementServices::SetOffsetTickCompleteTime(float value) {
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_flOffsetTickCompleteTime", false, value);
}

float GCCSPlayer_MovementServices::GetOffsetTickStashedSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayer_MovementServices", "m_flOffsetTickStashedSpeed");
}

void GCCSPlayer_MovementServices::SetOffsetTickStashedSpeed(float value) {
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_flOffsetTickStashedSpeed", false, value);
}

float GCCSPlayer_MovementServices::GetStamina() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayer_MovementServices", "m_flStamina");
}

void GCCSPlayer_MovementServices::SetStamina(float value) {
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_flStamina", false, value);
}

float GCCSPlayer_MovementServices::GetHeightAtJumpStart() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayer_MovementServices", "m_flHeightAtJumpStart");
}

void GCCSPlayer_MovementServices::SetHeightAtJumpStart(float value) {
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_flHeightAtJumpStart", false, value);
}

float GCCSPlayer_MovementServices::GetMaxJumpHeightThisJump() const {
    return GetSchemaValue<float>(m_ptr, "CCSPlayer_MovementServices", "m_flMaxJumpHeightThisJump");
}

void GCCSPlayer_MovementServices::SetMaxJumpHeightThisJump(float value) {
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_flMaxJumpHeightThisJump", false, value);
}

std::string GCCSPlayer_MovementServices::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSPlayer_MovementServices::IsValid() {
    return (m_ptr != nullptr);
}

GCNavHullVData::GCNavHullVData(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNavHullVData::GCNavHullVData(void *ptr) {
    m_ptr = ptr;
}

bool GCNavHullVData::GetAgentEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CNavHullVData", "m_bAgentEnabled");
}

void GCNavHullVData::SetAgentEnabled(bool value) {
    SetSchemaValue(m_ptr, "CNavHullVData", "m_bAgentEnabled", false, value);
}

float GCNavHullVData::GetAgentRadius() const {
    return GetSchemaValue<float>(m_ptr, "CNavHullVData", "m_agentRadius");
}

void GCNavHullVData::SetAgentRadius(float value) {
    SetSchemaValue(m_ptr, "CNavHullVData", "m_agentRadius", false, value);
}

float GCNavHullVData::GetAgentHeight() const {
    return GetSchemaValue<float>(m_ptr, "CNavHullVData", "m_agentHeight");
}

void GCNavHullVData::SetAgentHeight(float value) {
    SetSchemaValue(m_ptr, "CNavHullVData", "m_agentHeight", false, value);
}

bool GCNavHullVData::GetAgentShortHeightEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CNavHullVData", "m_agentShortHeightEnabled");
}

void GCNavHullVData::SetAgentShortHeightEnabled(bool value) {
    SetSchemaValue(m_ptr, "CNavHullVData", "m_agentShortHeightEnabled", false, value);
}

float GCNavHullVData::GetAgentShortHeight() const {
    return GetSchemaValue<float>(m_ptr, "CNavHullVData", "m_agentShortHeight");
}

void GCNavHullVData::SetAgentShortHeight(float value) {
    SetSchemaValue(m_ptr, "CNavHullVData", "m_agentShortHeight", false, value);
}

float GCNavHullVData::GetAgentMaxClimb() const {
    return GetSchemaValue<float>(m_ptr, "CNavHullVData", "m_agentMaxClimb");
}

void GCNavHullVData::SetAgentMaxClimb(float value) {
    SetSchemaValue(m_ptr, "CNavHullVData", "m_agentMaxClimb", false, value);
}

int32_t GCNavHullVData::GetAgentMaxSlope() const {
    return GetSchemaValue<int32_t>(m_ptr, "CNavHullVData", "m_agentMaxSlope");
}

void GCNavHullVData::SetAgentMaxSlope(int32_t value) {
    SetSchemaValue(m_ptr, "CNavHullVData", "m_agentMaxSlope", false, value);
}

float GCNavHullVData::GetAgentMaxJumpDownDist() const {
    return GetSchemaValue<float>(m_ptr, "CNavHullVData", "m_agentMaxJumpDownDist");
}

void GCNavHullVData::SetAgentMaxJumpDownDist(float value) {
    SetSchemaValue(m_ptr, "CNavHullVData", "m_agentMaxJumpDownDist", false, value);
}

float GCNavHullVData::GetAgentMaxJumpHorizDistBase() const {
    return GetSchemaValue<float>(m_ptr, "CNavHullVData", "m_agentMaxJumpHorizDistBase");
}

void GCNavHullVData::SetAgentMaxJumpHorizDistBase(float value) {
    SetSchemaValue(m_ptr, "CNavHullVData", "m_agentMaxJumpHorizDistBase", false, value);
}

float GCNavHullVData::GetAgentMaxJumpUpDist() const {
    return GetSchemaValue<float>(m_ptr, "CNavHullVData", "m_agentMaxJumpUpDist");
}

void GCNavHullVData::SetAgentMaxJumpUpDist(float value) {
    SetSchemaValue(m_ptr, "CNavHullVData", "m_agentMaxJumpUpDist", false, value);
}

int32_t GCNavHullVData::GetAgentBorderErosion() const {
    return GetSchemaValue<int32_t>(m_ptr, "CNavHullVData", "m_agentBorderErosion");
}

void GCNavHullVData::SetAgentBorderErosion(int32_t value) {
    SetSchemaValue(m_ptr, "CNavHullVData", "m_agentBorderErosion", false, value);
}

std::string GCNavHullVData::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNavHullVData::IsValid() {
    return (m_ptr != nullptr);
}

GSoundOpvarTraceResult_t::GSoundOpvarTraceResult_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GSoundOpvarTraceResult_t::GSoundOpvarTraceResult_t(void *ptr) {
    m_ptr = ptr;
}

Vector GSoundOpvarTraceResult_t::GetPos() const {
    return GetSchemaValue<Vector>(m_ptr, "SoundOpvarTraceResult_t", "vPos");
}

void GSoundOpvarTraceResult_t::SetPos(Vector value) {
    SetSchemaValue(m_ptr, "SoundOpvarTraceResult_t", "vPos", true, value);
}

bool GSoundOpvarTraceResult_t::GetDidHit() const {
    return GetSchemaValue<bool>(m_ptr, "SoundOpvarTraceResult_t", "bDidHit");
}

void GSoundOpvarTraceResult_t::SetDidHit(bool value) {
    SetSchemaValue(m_ptr, "SoundOpvarTraceResult_t", "bDidHit", true, value);
}

float GSoundOpvarTraceResult_t::GetDistSqrToCenter() const {
    return GetSchemaValue<float>(m_ptr, "SoundOpvarTraceResult_t", "flDistSqrToCenter");
}

void GSoundOpvarTraceResult_t::SetDistSqrToCenter(float value) {
    SetSchemaValue(m_ptr, "SoundOpvarTraceResult_t", "flDistSqrToCenter", true, value);
}

std::string GSoundOpvarTraceResult_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GSoundOpvarTraceResult_t::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimEventListener::GCAnimEventListener(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimEventListener::GCAnimEventListener(void *ptr) {
    m_ptr = ptr;
}

std::string GCAnimEventListener::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimEventListener::IsValid() {
    return (m_ptr != nullptr);
}

GCNavVolumeCalculatedVector::GCNavVolumeCalculatedVector(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNavVolumeCalculatedVector::GCNavVolumeCalculatedVector(void *ptr) {
    m_ptr = ptr;
}

std::string GCNavVolumeCalculatedVector::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNavVolumeCalculatedVector::IsValid() {
    return (m_ptr != nullptr);
}

GCCSWeaponBaseVData::GCCSWeaponBaseVData(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCSWeaponBaseVData::GCCSWeaponBaseVData(void *ptr) {
    m_ptr = ptr;
}

CSWeaponType GCCSWeaponBaseVData::GetWeaponType() const {
    return GetSchemaValue<CSWeaponType>(m_ptr, "CCSWeaponBaseVData", "m_WeaponType");
}

void GCCSWeaponBaseVData::SetWeaponType(CSWeaponType value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_WeaponType", false, value);
}

CSWeaponCategory GCCSWeaponBaseVData::GetWeaponCategory() const {
    return GetSchemaValue<CSWeaponCategory>(m_ptr, "CCSWeaponBaseVData", "m_WeaponCategory");
}

void GCCSWeaponBaseVData::SetWeaponCategory(CSWeaponCategory value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_WeaponCategory", false, value);
}

gear_slot_t GCCSWeaponBaseVData::GetGearSlot() const {
    return GetSchemaValue<gear_slot_t>(m_ptr, "CCSWeaponBaseVData", "m_GearSlot");
}

void GCCSWeaponBaseVData::SetGearSlot(gear_slot_t value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_GearSlot", false, value);
}

int32_t GCCSWeaponBaseVData::GetGearSlotPosition() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBaseVData", "m_GearSlotPosition");
}

void GCCSWeaponBaseVData::SetGearSlotPosition(int32_t value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_GearSlotPosition", false, value);
}

loadout_slot_t GCCSWeaponBaseVData::GetDefaultLoadoutSlot() const {
    return GetSchemaValue<loadout_slot_t>(m_ptr, "CCSWeaponBaseVData", "m_DefaultLoadoutSlot");
}

void GCCSWeaponBaseVData::SetDefaultLoadoutSlot(loadout_slot_t value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_DefaultLoadoutSlot", false, value);
}

CUtlString GCCSWeaponBaseVData::GetWrongTeamMsg() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CCSWeaponBaseVData", "m_sWrongTeamMsg");
}

void GCCSWeaponBaseVData::SetWrongTeamMsg(CUtlString value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_sWrongTeamMsg", false, value);
}

int32_t GCCSWeaponBaseVData::GetPrice() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBaseVData", "m_nPrice");
}

void GCCSWeaponBaseVData::SetPrice(int32_t value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_nPrice", false, value);
}

int32_t GCCSWeaponBaseVData::GetKillAward() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBaseVData", "m_nKillAward");
}

void GCCSWeaponBaseVData::SetKillAward(int32_t value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_nKillAward", false, value);
}

int32_t GCCSWeaponBaseVData::GetPrimaryReserveAmmoMax() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBaseVData", "m_nPrimaryReserveAmmoMax");
}

void GCCSWeaponBaseVData::SetPrimaryReserveAmmoMax(int32_t value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_nPrimaryReserveAmmoMax", false, value);
}

int32_t GCCSWeaponBaseVData::GetSecondaryReserveAmmoMax() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBaseVData", "m_nSecondaryReserveAmmoMax");
}

void GCCSWeaponBaseVData::SetSecondaryReserveAmmoMax(int32_t value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_nSecondaryReserveAmmoMax", false, value);
}

bool GCCSWeaponBaseVData::GetMeleeWeapon() const {
    return GetSchemaValue<bool>(m_ptr, "CCSWeaponBaseVData", "m_bMeleeWeapon");
}

void GCCSWeaponBaseVData::SetMeleeWeapon(bool value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_bMeleeWeapon", false, value);
}

bool GCCSWeaponBaseVData::GetHasBurstMode() const {
    return GetSchemaValue<bool>(m_ptr, "CCSWeaponBaseVData", "m_bHasBurstMode");
}

void GCCSWeaponBaseVData::SetHasBurstMode(bool value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_bHasBurstMode", false, value);
}

bool GCCSWeaponBaseVData::GetIsRevolver() const {
    return GetSchemaValue<bool>(m_ptr, "CCSWeaponBaseVData", "m_bIsRevolver");
}

void GCCSWeaponBaseVData::SetIsRevolver(bool value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_bIsRevolver", false, value);
}

bool GCCSWeaponBaseVData::GetCannotShootUnderwater() const {
    return GetSchemaValue<bool>(m_ptr, "CCSWeaponBaseVData", "m_bCannotShootUnderwater");
}

void GCCSWeaponBaseVData::SetCannotShootUnderwater(bool value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_bCannotShootUnderwater", false, value);
}

CUtlString GCCSWeaponBaseVData::GetAnimExtension() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CCSWeaponBaseVData", "m_szAnimExtension");
}

void GCCSWeaponBaseVData::SetAnimExtension(CUtlString value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_szAnimExtension", false, value);
}

CSWeaponSilencerType GCCSWeaponBaseVData::GetSilencerType() const {
    return GetSchemaValue<CSWeaponSilencerType>(m_ptr, "CCSWeaponBaseVData", "m_eSilencerType");
}

void GCCSWeaponBaseVData::SetSilencerType(CSWeaponSilencerType value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_eSilencerType", false, value);
}

int32_t GCCSWeaponBaseVData::GetCrosshairMinDistance() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBaseVData", "m_nCrosshairMinDistance");
}

void GCCSWeaponBaseVData::SetCrosshairMinDistance(int32_t value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_nCrosshairMinDistance", false, value);
}

int32_t GCCSWeaponBaseVData::GetCrosshairDeltaDistance() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBaseVData", "m_nCrosshairDeltaDistance");
}

void GCCSWeaponBaseVData::SetCrosshairDeltaDistance(int32_t value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_nCrosshairDeltaDistance", false, value);
}

bool GCCSWeaponBaseVData::GetIsFullAuto() const {
    return GetSchemaValue<bool>(m_ptr, "CCSWeaponBaseVData", "m_bIsFullAuto");
}

void GCCSWeaponBaseVData::SetIsFullAuto(bool value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_bIsFullAuto", false, value);
}

int32_t GCCSWeaponBaseVData::GetNumBullets() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBaseVData", "m_nNumBullets");
}

void GCCSWeaponBaseVData::SetNumBullets(int32_t value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_nNumBullets", false, value);
}

GCFiringModeFloat GCCSWeaponBaseVData::GetCycleTime() const {
    return GetSchemaValue<GCFiringModeFloat>(m_ptr, "CCSWeaponBaseVData", "m_flCycleTime");
}

void GCCSWeaponBaseVData::SetCycleTime(GCFiringModeFloat value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flCycleTime", false, value);
}

GCFiringModeFloat GCCSWeaponBaseVData::GetMaxSpeed() const {
    return GetSchemaValue<GCFiringModeFloat>(m_ptr, "CCSWeaponBaseVData", "m_flMaxSpeed");
}

void GCCSWeaponBaseVData::SetMaxSpeed(GCFiringModeFloat value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flMaxSpeed", false, value);
}

GCFiringModeFloat GCCSWeaponBaseVData::GetSpread() const {
    return GetSchemaValue<GCFiringModeFloat>(m_ptr, "CCSWeaponBaseVData", "m_flSpread");
}

void GCCSWeaponBaseVData::SetSpread(GCFiringModeFloat value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flSpread", false, value);
}

GCFiringModeFloat GCCSWeaponBaseVData::GetInaccuracyCrouch() const {
    return GetSchemaValue<GCFiringModeFloat>(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyCrouch");
}

void GCCSWeaponBaseVData::SetInaccuracyCrouch(GCFiringModeFloat value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyCrouch", false, value);
}

GCFiringModeFloat GCCSWeaponBaseVData::GetInaccuracyStand() const {
    return GetSchemaValue<GCFiringModeFloat>(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyStand");
}

void GCCSWeaponBaseVData::SetInaccuracyStand(GCFiringModeFloat value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyStand", false, value);
}

GCFiringModeFloat GCCSWeaponBaseVData::GetInaccuracyJump() const {
    return GetSchemaValue<GCFiringModeFloat>(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyJump");
}

void GCCSWeaponBaseVData::SetInaccuracyJump(GCFiringModeFloat value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyJump", false, value);
}

GCFiringModeFloat GCCSWeaponBaseVData::GetInaccuracyLand() const {
    return GetSchemaValue<GCFiringModeFloat>(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyLand");
}

void GCCSWeaponBaseVData::SetInaccuracyLand(GCFiringModeFloat value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyLand", false, value);
}

GCFiringModeFloat GCCSWeaponBaseVData::GetInaccuracyLadder() const {
    return GetSchemaValue<GCFiringModeFloat>(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyLadder");
}

void GCCSWeaponBaseVData::SetInaccuracyLadder(GCFiringModeFloat value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyLadder", false, value);
}

GCFiringModeFloat GCCSWeaponBaseVData::GetInaccuracyFire() const {
    return GetSchemaValue<GCFiringModeFloat>(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyFire");
}

void GCCSWeaponBaseVData::SetInaccuracyFire(GCFiringModeFloat value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyFire", false, value);
}

GCFiringModeFloat GCCSWeaponBaseVData::GetInaccuracyMove() const {
    return GetSchemaValue<GCFiringModeFloat>(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyMove");
}

void GCCSWeaponBaseVData::SetInaccuracyMove(GCFiringModeFloat value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyMove", false, value);
}

GCFiringModeFloat GCCSWeaponBaseVData::GetRecoilAngle() const {
    return GetSchemaValue<GCFiringModeFloat>(m_ptr, "CCSWeaponBaseVData", "m_flRecoilAngle");
}

void GCCSWeaponBaseVData::SetRecoilAngle(GCFiringModeFloat value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flRecoilAngle", false, value);
}

GCFiringModeFloat GCCSWeaponBaseVData::GetRecoilAngleVariance() const {
    return GetSchemaValue<GCFiringModeFloat>(m_ptr, "CCSWeaponBaseVData", "m_flRecoilAngleVariance");
}

void GCCSWeaponBaseVData::SetRecoilAngleVariance(GCFiringModeFloat value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flRecoilAngleVariance", false, value);
}

GCFiringModeFloat GCCSWeaponBaseVData::GetRecoilMagnitude() const {
    return GetSchemaValue<GCFiringModeFloat>(m_ptr, "CCSWeaponBaseVData", "m_flRecoilMagnitude");
}

void GCCSWeaponBaseVData::SetRecoilMagnitude(GCFiringModeFloat value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flRecoilMagnitude", false, value);
}

GCFiringModeFloat GCCSWeaponBaseVData::GetRecoilMagnitudeVariance() const {
    return GetSchemaValue<GCFiringModeFloat>(m_ptr, "CCSWeaponBaseVData", "m_flRecoilMagnitudeVariance");
}

void GCCSWeaponBaseVData::SetRecoilMagnitudeVariance(GCFiringModeFloat value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flRecoilMagnitudeVariance", false, value);
}

GCFiringModeInt GCCSWeaponBaseVData::GetTracerFrequency() const {
    return GetSchemaValue<GCFiringModeInt>(m_ptr, "CCSWeaponBaseVData", "m_nTracerFrequency");
}

void GCCSWeaponBaseVData::SetTracerFrequency(GCFiringModeInt value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_nTracerFrequency", false, value);
}

float GCCSWeaponBaseVData::GetInaccuracyJumpInitial() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyJumpInitial");
}

void GCCSWeaponBaseVData::SetInaccuracyJumpInitial(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyJumpInitial", false, value);
}

float GCCSWeaponBaseVData::GetInaccuracyJumpApex() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyJumpApex");
}

void GCCSWeaponBaseVData::SetInaccuracyJumpApex(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyJumpApex", false, value);
}

float GCCSWeaponBaseVData::GetInaccuracyReload() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyReload");
}

void GCCSWeaponBaseVData::SetInaccuracyReload(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyReload", false, value);
}

int32_t GCCSWeaponBaseVData::GetRecoilSeed() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBaseVData", "m_nRecoilSeed");
}

void GCCSWeaponBaseVData::SetRecoilSeed(int32_t value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_nRecoilSeed", false, value);
}

int32_t GCCSWeaponBaseVData::GetSpreadSeed() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBaseVData", "m_nSpreadSeed");
}

void GCCSWeaponBaseVData::SetSpreadSeed(int32_t value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_nSpreadSeed", false, value);
}

float GCCSWeaponBaseVData::GetTimeToIdleAfterFire() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flTimeToIdleAfterFire");
}

void GCCSWeaponBaseVData::SetTimeToIdleAfterFire(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flTimeToIdleAfterFire", false, value);
}

float GCCSWeaponBaseVData::GetIdleInterval() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flIdleInterval");
}

void GCCSWeaponBaseVData::SetIdleInterval(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flIdleInterval", false, value);
}

float GCCSWeaponBaseVData::GetAttackMovespeedFactor() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flAttackMovespeedFactor");
}

void GCCSWeaponBaseVData::SetAttackMovespeedFactor(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flAttackMovespeedFactor", false, value);
}

float GCCSWeaponBaseVData::GetHeatPerShot() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flHeatPerShot");
}

void GCCSWeaponBaseVData::SetHeatPerShot(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flHeatPerShot", false, value);
}

float GCCSWeaponBaseVData::GetInaccuracyPitchShift() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyPitchShift");
}

void GCCSWeaponBaseVData::SetInaccuracyPitchShift(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyPitchShift", false, value);
}

float GCCSWeaponBaseVData::GetInaccuracyAltSoundThreshold() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyAltSoundThreshold");
}

void GCCSWeaponBaseVData::SetInaccuracyAltSoundThreshold(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyAltSoundThreshold", false, value);
}

float GCCSWeaponBaseVData::GetBotAudibleRange() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flBotAudibleRange");
}

void GCCSWeaponBaseVData::SetBotAudibleRange(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flBotAudibleRange", false, value);
}

CUtlString GCCSWeaponBaseVData::GetUseRadioSubtitle() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CCSWeaponBaseVData", "m_szUseRadioSubtitle");
}

void GCCSWeaponBaseVData::SetUseRadioSubtitle(CUtlString value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_szUseRadioSubtitle", false, value);
}

bool GCCSWeaponBaseVData::GetUnzoomsAfterShot() const {
    return GetSchemaValue<bool>(m_ptr, "CCSWeaponBaseVData", "m_bUnzoomsAfterShot");
}

void GCCSWeaponBaseVData::SetUnzoomsAfterShot(bool value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_bUnzoomsAfterShot", false, value);
}

bool GCCSWeaponBaseVData::GetHideViewModelWhenZoomed() const {
    return GetSchemaValue<bool>(m_ptr, "CCSWeaponBaseVData", "m_bHideViewModelWhenZoomed");
}

void GCCSWeaponBaseVData::SetHideViewModelWhenZoomed(bool value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_bHideViewModelWhenZoomed", false, value);
}

int32_t GCCSWeaponBaseVData::GetZoomLevels() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBaseVData", "m_nZoomLevels");
}

void GCCSWeaponBaseVData::SetZoomLevels(int32_t value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_nZoomLevels", false, value);
}

int32_t GCCSWeaponBaseVData::GetZoomFOV1() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBaseVData", "m_nZoomFOV1");
}

void GCCSWeaponBaseVData::SetZoomFOV1(int32_t value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_nZoomFOV1", false, value);
}

int32_t GCCSWeaponBaseVData::GetZoomFOV2() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBaseVData", "m_nZoomFOV2");
}

void GCCSWeaponBaseVData::SetZoomFOV2(int32_t value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_nZoomFOV2", false, value);
}

float GCCSWeaponBaseVData::GetZoomTime0() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flZoomTime0");
}

void GCCSWeaponBaseVData::SetZoomTime0(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flZoomTime0", false, value);
}

float GCCSWeaponBaseVData::GetZoomTime1() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flZoomTime1");
}

void GCCSWeaponBaseVData::SetZoomTime1(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flZoomTime1", false, value);
}

float GCCSWeaponBaseVData::GetZoomTime2() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flZoomTime2");
}

void GCCSWeaponBaseVData::SetZoomTime2(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flZoomTime2", false, value);
}

float GCCSWeaponBaseVData::GetIronSightPullUpSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flIronSightPullUpSpeed");
}

void GCCSWeaponBaseVData::SetIronSightPullUpSpeed(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flIronSightPullUpSpeed", false, value);
}

float GCCSWeaponBaseVData::GetIronSightPutDownSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flIronSightPutDownSpeed");
}

void GCCSWeaponBaseVData::SetIronSightPutDownSpeed(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flIronSightPutDownSpeed", false, value);
}

float GCCSWeaponBaseVData::GetIronSightFOV() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flIronSightFOV");
}

void GCCSWeaponBaseVData::SetIronSightFOV(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flIronSightFOV", false, value);
}

float GCCSWeaponBaseVData::GetIronSightPivotForward() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flIronSightPivotForward");
}

void GCCSWeaponBaseVData::SetIronSightPivotForward(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flIronSightPivotForward", false, value);
}

float GCCSWeaponBaseVData::GetIronSightLooseness() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flIronSightLooseness");
}

void GCCSWeaponBaseVData::SetIronSightLooseness(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flIronSightLooseness", false, value);
}

QAngle GCCSWeaponBaseVData::GetPivotAngle() const {
    return GetSchemaValue<QAngle>(m_ptr, "CCSWeaponBaseVData", "m_angPivotAngle");
}

void GCCSWeaponBaseVData::SetPivotAngle(QAngle value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_angPivotAngle", false, value);
}

Vector GCCSWeaponBaseVData::GetIronSightEyePos() const {
    return GetSchemaValue<Vector>(m_ptr, "CCSWeaponBaseVData", "m_vecIronSightEyePos");
}

void GCCSWeaponBaseVData::SetIronSightEyePos(Vector value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_vecIronSightEyePos", false, value);
}

int32_t GCCSWeaponBaseVData::GetDamage() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBaseVData", "m_nDamage");
}

void GCCSWeaponBaseVData::SetDamage(int32_t value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_nDamage", false, value);
}

float GCCSWeaponBaseVData::GetHeadshotMultiplier() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flHeadshotMultiplier");
}

void GCCSWeaponBaseVData::SetHeadshotMultiplier(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flHeadshotMultiplier", false, value);
}

float GCCSWeaponBaseVData::GetArmorRatio() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flArmorRatio");
}

void GCCSWeaponBaseVData::SetArmorRatio(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flArmorRatio", false, value);
}

float GCCSWeaponBaseVData::GetPenetration() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flPenetration");
}

void GCCSWeaponBaseVData::SetPenetration(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flPenetration", false, value);
}

float GCCSWeaponBaseVData::GetRange() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flRange");
}

void GCCSWeaponBaseVData::SetRange(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flRange", false, value);
}

float GCCSWeaponBaseVData::GetRangeModifier() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flRangeModifier");
}

void GCCSWeaponBaseVData::SetRangeModifier(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flRangeModifier", false, value);
}

float GCCSWeaponBaseVData::GetFlinchVelocityModifierLarge() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flFlinchVelocityModifierLarge");
}

void GCCSWeaponBaseVData::SetFlinchVelocityModifierLarge(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flFlinchVelocityModifierLarge", false, value);
}

float GCCSWeaponBaseVData::GetFlinchVelocityModifierSmall() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flFlinchVelocityModifierSmall");
}

void GCCSWeaponBaseVData::SetFlinchVelocityModifierSmall(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flFlinchVelocityModifierSmall", false, value);
}

float GCCSWeaponBaseVData::GetRecoveryTimeCrouch() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flRecoveryTimeCrouch");
}

void GCCSWeaponBaseVData::SetRecoveryTimeCrouch(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flRecoveryTimeCrouch", false, value);
}

float GCCSWeaponBaseVData::GetRecoveryTimeStand() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flRecoveryTimeStand");
}

void GCCSWeaponBaseVData::SetRecoveryTimeStand(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flRecoveryTimeStand", false, value);
}

float GCCSWeaponBaseVData::GetRecoveryTimeCrouchFinal() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flRecoveryTimeCrouchFinal");
}

void GCCSWeaponBaseVData::SetRecoveryTimeCrouchFinal(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flRecoveryTimeCrouchFinal", false, value);
}

float GCCSWeaponBaseVData::GetRecoveryTimeStandFinal() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flRecoveryTimeStandFinal");
}

void GCCSWeaponBaseVData::SetRecoveryTimeStandFinal(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flRecoveryTimeStandFinal", false, value);
}

int32_t GCCSWeaponBaseVData::GetRecoveryTransitionStartBullet() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBaseVData", "m_nRecoveryTransitionStartBullet");
}

void GCCSWeaponBaseVData::SetRecoveryTransitionStartBullet(int32_t value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_nRecoveryTransitionStartBullet", false, value);
}

int32_t GCCSWeaponBaseVData::GetRecoveryTransitionEndBullet() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBaseVData", "m_nRecoveryTransitionEndBullet");
}

void GCCSWeaponBaseVData::SetRecoveryTransitionEndBullet(int32_t value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_nRecoveryTransitionEndBullet", false, value);
}

float GCCSWeaponBaseVData::GetThrowVelocity() const {
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flThrowVelocity");
}

void GCCSWeaponBaseVData::SetThrowVelocity(float value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flThrowVelocity", false, value);
}

Vector GCCSWeaponBaseVData::GetSmokeColor() const {
    return GetSchemaValue<Vector>(m_ptr, "CCSWeaponBaseVData", "m_vSmokeColor");
}

void GCCSWeaponBaseVData::SetSmokeColor(Vector value) {
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_vSmokeColor", false, value);
}

std::string GCCSWeaponBaseVData::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCSWeaponBaseVData::IsValid() {
    return (m_ptr != nullptr);
}

GCBtNodeConditionInactive::GCBtNodeConditionInactive(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBtNodeConditionInactive::GCBtNodeConditionInactive(void *ptr) {
    m_ptr = ptr;
}

float GCBtNodeConditionInactive::GetRoundStartThresholdSeconds() const {
    return GetSchemaValue<float>(m_ptr, "CBtNodeConditionInactive", "m_flRoundStartThresholdSeconds");
}

void GCBtNodeConditionInactive::SetRoundStartThresholdSeconds(float value) {
    SetSchemaValue(m_ptr, "CBtNodeConditionInactive", "m_flRoundStartThresholdSeconds", false, value);
}

float GCBtNodeConditionInactive::GetSensorInactivityThresholdSeconds() const {
    return GetSchemaValue<float>(m_ptr, "CBtNodeConditionInactive", "m_flSensorInactivityThresholdSeconds");
}

void GCBtNodeConditionInactive::SetSensorInactivityThresholdSeconds(float value) {
    SetSchemaValue(m_ptr, "CBtNodeConditionInactive", "m_flSensorInactivityThresholdSeconds", false, value);
}

GCountdownTimer GCBtNodeConditionInactive::GetSensorInactivityTimer() const {
    return GetSchemaValue<GCountdownTimer>(m_ptr, "CBtNodeConditionInactive", "m_SensorInactivityTimer");
}

void GCBtNodeConditionInactive::SetSensorInactivityTimer(GCountdownTimer value) {
    SetSchemaValue(m_ptr, "CBtNodeConditionInactive", "m_SensorInactivityTimer", false, value);
}

std::string GCBtNodeConditionInactive::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBtNodeConditionInactive::IsValid() {
    return (m_ptr != nullptr);
}

GCSAdditionalPerRoundStats_t::GCSAdditionalPerRoundStats_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSAdditionalPerRoundStats_t::GCSAdditionalPerRoundStats_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GCSAdditionalPerRoundStats_t::GetNumChickensKilled() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSAdditionalPerRoundStats_t", "m_numChickensKilled");
}

void GCSAdditionalPerRoundStats_t::SetNumChickensKilled(int32_t value) {
    SetSchemaValue(m_ptr, "CSAdditionalPerRoundStats_t", "m_numChickensKilled", true, value);
}

int32_t GCSAdditionalPerRoundStats_t::GetKillsWhileBlind() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSAdditionalPerRoundStats_t", "m_killsWhileBlind");
}

void GCSAdditionalPerRoundStats_t::SetKillsWhileBlind(int32_t value) {
    SetSchemaValue(m_ptr, "CSAdditionalPerRoundStats_t", "m_killsWhileBlind", true, value);
}

int32_t GCSAdditionalPerRoundStats_t::GetBombCarrierkills() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSAdditionalPerRoundStats_t", "m_bombCarrierkills");
}

void GCSAdditionalPerRoundStats_t::SetBombCarrierkills(int32_t value) {
    SetSchemaValue(m_ptr, "CSAdditionalPerRoundStats_t", "m_bombCarrierkills", true, value);
}

int32_t GCSAdditionalPerRoundStats_t::GetBurnDamageInflicted() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSAdditionalPerRoundStats_t", "m_iBurnDamageInflicted");
}

void GCSAdditionalPerRoundStats_t::SetBurnDamageInflicted(int32_t value) {
    SetSchemaValue(m_ptr, "CSAdditionalPerRoundStats_t", "m_iBurnDamageInflicted", true, value);
}

int32_t GCSAdditionalPerRoundStats_t::GetBlastDamageInflicted() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSAdditionalPerRoundStats_t", "m_iBlastDamageInflicted");
}

void GCSAdditionalPerRoundStats_t::SetBlastDamageInflicted(int32_t value) {
    SetSchemaValue(m_ptr, "CSAdditionalPerRoundStats_t", "m_iBlastDamageInflicted", true, value);
}

int32_t GCSAdditionalPerRoundStats_t::GetDinks() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSAdditionalPerRoundStats_t", "m_iDinks");
}

void GCSAdditionalPerRoundStats_t::SetDinks(int32_t value) {
    SetSchemaValue(m_ptr, "CSAdditionalPerRoundStats_t", "m_iDinks", true, value);
}

std::string GCSAdditionalPerRoundStats_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSAdditionalPerRoundStats_t::IsValid() {
    return (m_ptr != nullptr);
}

GActiveModelConfig_t::GActiveModelConfig_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GActiveModelConfig_t::GActiveModelConfig_t(void *ptr) {
    m_ptr = ptr;
}

GModelConfigHandle_t GActiveModelConfig_t::GetHandle() const {
    return GetSchemaValue<GModelConfigHandle_t>(m_ptr, "ActiveModelConfig_t", "m_Handle");
}

void GActiveModelConfig_t::SetHandle(GModelConfigHandle_t value) {
    SetSchemaValue(m_ptr, "ActiveModelConfig_t", "m_Handle", true, value);
}

CUtlSymbolLarge GActiveModelConfig_t::GetName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "ActiveModelConfig_t", "m_Name");
}

void GActiveModelConfig_t::SetName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "ActiveModelConfig_t", "m_Name", true, value);
}

std::vector<GCBaseModelEntity*> GActiveModelConfig_t::GetAssociatedEntities() const {
    CUtlVector<GCBaseModelEntity*>* vec = GetSchemaValue<CUtlVector<GCBaseModelEntity*>*>(m_ptr, "ActiveModelConfig_t", "m_AssociatedEntities"); std::vector<GCBaseModelEntity*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GActiveModelConfig_t::SetAssociatedEntities(std::vector<GCBaseModelEntity*> value) {
    SetSchemaValueCUtlVector<GCBaseModelEntity*>(m_ptr, "ActiveModelConfig_t", "m_AssociatedEntities", true, value);
}

std::vector<CUtlSymbolLarge> GActiveModelConfig_t::GetAssociatedEntityNames() const {
    CUtlVector<CUtlSymbolLarge>* vec = GetSchemaValue<CUtlVector<CUtlSymbolLarge>*>(m_ptr, "ActiveModelConfig_t", "m_AssociatedEntityNames"); std::vector<CUtlSymbolLarge> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GActiveModelConfig_t::SetAssociatedEntityNames(std::vector<CUtlSymbolLarge> value) {
    SetSchemaValueCUtlVector<CUtlSymbolLarge>(m_ptr, "ActiveModelConfig_t", "m_AssociatedEntityNames", true, value);
}

std::string GActiveModelConfig_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GActiveModelConfig_t::IsValid() {
    return (m_ptr != nullptr);
}

GCPrecipitationVData::GCPrecipitationVData(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPrecipitationVData::GCPrecipitationVData(void *ptr) {
    m_ptr = ptr;
}

float GCPrecipitationVData::GetInnerDistance() const {
    return GetSchemaValue<float>(m_ptr, "CPrecipitationVData", "m_flInnerDistance");
}

void GCPrecipitationVData::SetInnerDistance(float value) {
    SetSchemaValue(m_ptr, "CPrecipitationVData", "m_flInnerDistance", false, value);
}

ParticleAttachment_t GCPrecipitationVData::GetAttachType() const {
    return GetSchemaValue<ParticleAttachment_t>(m_ptr, "CPrecipitationVData", "m_nAttachType");
}

void GCPrecipitationVData::SetAttachType(ParticleAttachment_t value) {
    SetSchemaValue(m_ptr, "CPrecipitationVData", "m_nAttachType", false, value);
}

bool GCPrecipitationVData::GetBatchSameVolumeType() const {
    return GetSchemaValue<bool>(m_ptr, "CPrecipitationVData", "m_bBatchSameVolumeType");
}

void GCPrecipitationVData::SetBatchSameVolumeType(bool value) {
    SetSchemaValue(m_ptr, "CPrecipitationVData", "m_bBatchSameVolumeType", false, value);
}

int32_t GCPrecipitationVData::GetRTEnvCP() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPrecipitationVData", "m_nRTEnvCP");
}

void GCPrecipitationVData::SetRTEnvCP(int32_t value) {
    SetSchemaValue(m_ptr, "CPrecipitationVData", "m_nRTEnvCP", false, value);
}

int32_t GCPrecipitationVData::GetRTEnvCPComponent() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPrecipitationVData", "m_nRTEnvCPComponent");
}

void GCPrecipitationVData::SetRTEnvCPComponent(int32_t value) {
    SetSchemaValue(m_ptr, "CPrecipitationVData", "m_nRTEnvCPComponent", false, value);
}

CUtlString GCPrecipitationVData::GetModifier() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CPrecipitationVData", "m_szModifier");
}

void GCPrecipitationVData::SetModifier(CUtlString value) {
    SetSchemaValue(m_ptr, "CPrecipitationVData", "m_szModifier", false, value);
}

std::string GCPrecipitationVData::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPrecipitationVData::IsValid() {
    return (m_ptr != nullptr);
}

GCBreakableStageHelper::GCBreakableStageHelper(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBreakableStageHelper::GCBreakableStageHelper(void *ptr) {
    m_ptr = ptr;
}

int32_t GCBreakableStageHelper::GetCurrentStage() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBreakableStageHelper", "m_nCurrentStage");
}

void GCBreakableStageHelper::SetCurrentStage(int32_t value) {
    SetSchemaValue(m_ptr, "CBreakableStageHelper", "m_nCurrentStage", false, value);
}

int32_t GCBreakableStageHelper::GetStageCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBreakableStageHelper", "m_nStageCount");
}

void GCBreakableStageHelper::SetStageCount(int32_t value) {
    SetSchemaValue(m_ptr, "CBreakableStageHelper", "m_nStageCount", false, value);
}

std::string GCBreakableStageHelper::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBreakableStageHelper::IsValid() {
    return (m_ptr != nullptr);
}

GCNavVolumeBreadthFirstSearch::GCNavVolumeBreadthFirstSearch(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNavVolumeBreadthFirstSearch::GCNavVolumeBreadthFirstSearch(void *ptr) {
    m_ptr = ptr;
}

Vector GCNavVolumeBreadthFirstSearch::GetStartPos() const {
    return GetSchemaValue<Vector>(m_ptr, "CNavVolumeBreadthFirstSearch", "m_vStartPos");
}

void GCNavVolumeBreadthFirstSearch::SetStartPos(Vector value) {
    SetSchemaValue(m_ptr, "CNavVolumeBreadthFirstSearch", "m_vStartPos", false, value);
}

float GCNavVolumeBreadthFirstSearch::GetSearchDist() const {
    return GetSchemaValue<float>(m_ptr, "CNavVolumeBreadthFirstSearch", "m_flSearchDist");
}

void GCNavVolumeBreadthFirstSearch::SetSearchDist(float value) {
    SetSchemaValue(m_ptr, "CNavVolumeBreadthFirstSearch", "m_flSearchDist", false, value);
}

std::string GCNavVolumeBreadthFirstSearch::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNavVolumeBreadthFirstSearch::IsValid() {
    return (m_ptr != nullptr);
}

GCAmbientGeneric::GCAmbientGeneric(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAmbientGeneric::GCAmbientGeneric(void *ptr) {
    m_ptr = ptr;
}

float GCAmbientGeneric::GetRadius() const {
    return GetSchemaValue<float>(m_ptr, "CAmbientGeneric", "m_radius");
}

void GCAmbientGeneric::SetRadius(float value) {
    SetSchemaValue(m_ptr, "CAmbientGeneric", "m_radius", false, value);
}

float GCAmbientGeneric::GetMaxRadius() const {
    return GetSchemaValue<float>(m_ptr, "CAmbientGeneric", "m_flMaxRadius");
}

void GCAmbientGeneric::SetMaxRadius(float value) {
    SetSchemaValue(m_ptr, "CAmbientGeneric", "m_flMaxRadius", false, value);
}

soundlevel_t GCAmbientGeneric::GetSoundLevel() const {
    return GetSchemaValue<soundlevel_t>(m_ptr, "CAmbientGeneric", "m_iSoundLevel");
}

void GCAmbientGeneric::SetSoundLevel(soundlevel_t value) {
    SetSchemaValue(m_ptr, "CAmbientGeneric", "m_iSoundLevel", false, value);
}

Gdynpitchvol_t GCAmbientGeneric::GetDpv() const {
    return GetSchemaValue<Gdynpitchvol_t>(m_ptr, "CAmbientGeneric", "m_dpv");
}

void GCAmbientGeneric::SetDpv(Gdynpitchvol_t value) {
    SetSchemaValue(m_ptr, "CAmbientGeneric", "m_dpv", false, value);
}

bool GCAmbientGeneric::GetActive() const {
    return GetSchemaValue<bool>(m_ptr, "CAmbientGeneric", "m_fActive");
}

void GCAmbientGeneric::SetActive(bool value) {
    SetSchemaValue(m_ptr, "CAmbientGeneric", "m_fActive", false, value);
}

bool GCAmbientGeneric::GetLooping() const {
    return GetSchemaValue<bool>(m_ptr, "CAmbientGeneric", "m_fLooping");
}

void GCAmbientGeneric::SetLooping(bool value) {
    SetSchemaValue(m_ptr, "CAmbientGeneric", "m_fLooping", false, value);
}

CUtlSymbolLarge GCAmbientGeneric::GetSound() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CAmbientGeneric", "m_iszSound");
}

void GCAmbientGeneric::SetSound(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CAmbientGeneric", "m_iszSound", false, value);
}

CUtlSymbolLarge GCAmbientGeneric::GetSourceEntName() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CAmbientGeneric", "m_sSourceEntName");
}

void GCAmbientGeneric::SetSourceEntName(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CAmbientGeneric", "m_sSourceEntName", false, value);
}

GCBaseEntity GCAmbientGeneric::GetSoundSource() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "CAmbientGeneric", "m_hSoundSource"));
    return value;
}

void GCAmbientGeneric::SetSoundSource(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'SoundSource' is not possible.\n");
}

CEntityIndex GCAmbientGeneric::GetSoundSourceEntIndex() const {
    return GetSchemaValue<CEntityIndex>(m_ptr, "CAmbientGeneric", "m_nSoundSourceEntIndex");
}

void GCAmbientGeneric::SetSoundSourceEntIndex(CEntityIndex value) {
    SetSchemaValue(m_ptr, "CAmbientGeneric", "m_nSoundSourceEntIndex", false, value);
}

std::string GCAmbientGeneric::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAmbientGeneric::IsValid() {
    return (m_ptr != nullptr);
}

GCSAdditionalMatchStats_t::GCSAdditionalMatchStats_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSAdditionalMatchStats_t::GCSAdditionalMatchStats_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GCSAdditionalMatchStats_t::GetNumRoundsSurvived() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSAdditionalMatchStats_t", "m_numRoundsSurvived");
}

void GCSAdditionalMatchStats_t::SetNumRoundsSurvived(int32_t value) {
    SetSchemaValue(m_ptr, "CSAdditionalMatchStats_t", "m_numRoundsSurvived", true, value);
}

int32_t GCSAdditionalMatchStats_t::GetMaxNumRoundsSurvived() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSAdditionalMatchStats_t", "m_maxNumRoundsSurvived");
}

void GCSAdditionalMatchStats_t::SetMaxNumRoundsSurvived(int32_t value) {
    SetSchemaValue(m_ptr, "CSAdditionalMatchStats_t", "m_maxNumRoundsSurvived", true, value);
}

int32_t GCSAdditionalMatchStats_t::GetNumRoundsSurvivedTotal() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSAdditionalMatchStats_t", "m_numRoundsSurvivedTotal");
}

void GCSAdditionalMatchStats_t::SetNumRoundsSurvivedTotal(int32_t value) {
    SetSchemaValue(m_ptr, "CSAdditionalMatchStats_t", "m_numRoundsSurvivedTotal", true, value);
}

int32_t GCSAdditionalMatchStats_t::GetRoundsWonWithoutPurchase() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSAdditionalMatchStats_t", "m_iRoundsWonWithoutPurchase");
}

void GCSAdditionalMatchStats_t::SetRoundsWonWithoutPurchase(int32_t value) {
    SetSchemaValue(m_ptr, "CSAdditionalMatchStats_t", "m_iRoundsWonWithoutPurchase", true, value);
}

int32_t GCSAdditionalMatchStats_t::GetRoundsWonWithoutPurchaseTotal() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSAdditionalMatchStats_t", "m_iRoundsWonWithoutPurchaseTotal");
}

void GCSAdditionalMatchStats_t::SetRoundsWonWithoutPurchaseTotal(int32_t value) {
    SetSchemaValue(m_ptr, "CSAdditionalMatchStats_t", "m_iRoundsWonWithoutPurchaseTotal", true, value);
}

int32_t GCSAdditionalMatchStats_t::GetNumFirstKills() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSAdditionalMatchStats_t", "m_numFirstKills");
}

void GCSAdditionalMatchStats_t::SetNumFirstKills(int32_t value) {
    SetSchemaValue(m_ptr, "CSAdditionalMatchStats_t", "m_numFirstKills", true, value);
}

int32_t GCSAdditionalMatchStats_t::GetNumClutchKills() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSAdditionalMatchStats_t", "m_numClutchKills");
}

void GCSAdditionalMatchStats_t::SetNumClutchKills(int32_t value) {
    SetSchemaValue(m_ptr, "CSAdditionalMatchStats_t", "m_numClutchKills", true, value);
}

int32_t GCSAdditionalMatchStats_t::GetNumPistolKills() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSAdditionalMatchStats_t", "m_numPistolKills");
}

void GCSAdditionalMatchStats_t::SetNumPistolKills(int32_t value) {
    SetSchemaValue(m_ptr, "CSAdditionalMatchStats_t", "m_numPistolKills", true, value);
}

int32_t GCSAdditionalMatchStats_t::GetNumSniperKills() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSAdditionalMatchStats_t", "m_numSniperKills");
}

void GCSAdditionalMatchStats_t::SetNumSniperKills(int32_t value) {
    SetSchemaValue(m_ptr, "CSAdditionalMatchStats_t", "m_numSniperKills", true, value);
}

int32_t GCSAdditionalMatchStats_t::GetNumSuicides() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSAdditionalMatchStats_t", "m_iNumSuicides");
}

void GCSAdditionalMatchStats_t::SetNumSuicides(int32_t value) {
    SetSchemaValue(m_ptr, "CSAdditionalMatchStats_t", "m_iNumSuicides", true, value);
}

int32_t GCSAdditionalMatchStats_t::GetNumTeamKills() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSAdditionalMatchStats_t", "m_iNumTeamKills");
}

void GCSAdditionalMatchStats_t::SetNumTeamKills(int32_t value) {
    SetSchemaValue(m_ptr, "CSAdditionalMatchStats_t", "m_iNumTeamKills", true, value);
}

int32_t GCSAdditionalMatchStats_t::GetTeamDamage() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSAdditionalMatchStats_t", "m_iTeamDamage");
}

void GCSAdditionalMatchStats_t::SetTeamDamage(int32_t value) {
    SetSchemaValue(m_ptr, "CSAdditionalMatchStats_t", "m_iTeamDamage", true, value);
}

std::string GCSAdditionalMatchStats_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSAdditionalMatchStats_t::IsValid() {
    return (m_ptr != nullptr);
}

GIRagdoll::GIRagdoll(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GIRagdoll::GIRagdoll(void *ptr) {
    m_ptr = ptr;
}

std::string GIRagdoll::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GIRagdoll::IsValid() {
    return (m_ptr != nullptr);
}

GCGameText::GCGameText(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCGameText::GCGameText(void *ptr) {
    m_ptr = ptr;
}

CUtlSymbolLarge GCGameText::GetMessage() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CGameText", "m_iszMessage");
}

void GCGameText::SetMessage(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CGameText", "m_iszMessage", false, value);
}

Ghudtextparms_t GCGameText::GetTextParms() const {
    return GetSchemaValue<Ghudtextparms_t>(m_ptr, "CGameText", "m_textParms");
}

void GCGameText::SetTextParms(Ghudtextparms_t value) {
    SetSchemaValue(m_ptr, "CGameText", "m_textParms", false, value);
}

std::string GCGameText::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCGameText::IsValid() {
    return (m_ptr != nullptr);
}

GCInfoInstructorHintBombTargetB::GCInfoInstructorHintBombTargetB(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCInfoInstructorHintBombTargetB::GCInfoInstructorHintBombTargetB(void *ptr) {
    m_ptr = ptr;
}

std::string GCInfoInstructorHintBombTargetB::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCInfoInstructorHintBombTargetB::IsValid() {
    return (m_ptr != nullptr);
}

GCNavVolumeAll::GCNavVolumeAll(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNavVolumeAll::GCNavVolumeAll(void *ptr) {
    m_ptr = ptr;
}

std::string GCNavVolumeAll::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNavVolumeAll::IsValid() {
    return (m_ptr != nullptr);
}

GCNavVolumeSphericalShell::GCNavVolumeSphericalShell(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNavVolumeSphericalShell::GCNavVolumeSphericalShell(void *ptr) {
    m_ptr = ptr;
}

float GCNavVolumeSphericalShell::GetRadiusInner() const {
    return GetSchemaValue<float>(m_ptr, "CNavVolumeSphericalShell", "m_flRadiusInner");
}

void GCNavVolumeSphericalShell::SetRadiusInner(float value) {
    SetSchemaValue(m_ptr, "CNavVolumeSphericalShell", "m_flRadiusInner", false, value);
}

std::string GCNavVolumeSphericalShell::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNavVolumeSphericalShell::IsValid() {
    return (m_ptr != nullptr);
}

GRelationshipOverride_t::GRelationshipOverride_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GRelationshipOverride_t::GRelationshipOverride_t(void *ptr) {
    m_ptr = ptr;
}

GCBaseEntity GRelationshipOverride_t::GetEntity() const {
    GCBaseEntity value(GetSchemaValuePtr<void>(m_ptr, "RelationshipOverride_t", "entity"));
    return value;
}

void GRelationshipOverride_t::SetEntity(GCBaseEntity* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Entity' is not possible.\n");
}

Class_T GRelationshipOverride_t::GetClassType() const {
    return GetSchemaValue<Class_T>(m_ptr, "RelationshipOverride_t", "classType");
}

void GRelationshipOverride_t::SetClassType(Class_T value) {
    SetSchemaValue(m_ptr, "RelationshipOverride_t", "classType", true, value);
}

std::string GRelationshipOverride_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GRelationshipOverride_t::IsValid() {
    return (m_ptr != nullptr);
}

GParticleAttributeIndex_t::GParticleAttributeIndex_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GParticleAttributeIndex_t::GParticleAttributeIndex_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GParticleAttributeIndex_t::GetValue() const {
    return GetSchemaValue<int32_t>(m_ptr, "ParticleAttributeIndex_t", "m_Value");
}

void GParticleAttributeIndex_t::SetValue(int32_t value) {
    SetSchemaValue(m_ptr, "ParticleAttributeIndex_t", "m_Value", true, value);
}

std::string GParticleAttributeIndex_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GParticleAttributeIndex_t::IsValid() {
    return (m_ptr != nullptr);
}

GCParticleInput::GCParticleInput(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCParticleInput::GCParticleInput(void *ptr) {
    m_ptr = ptr;
}

std::string GCParticleInput::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCParticleInput::IsValid() {
    return (m_ptr != nullptr);
}

GCParticleFloatInput::GCParticleFloatInput(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCParticleFloatInput::GCParticleFloatInput(void *ptr) {
    m_ptr = ptr;
}

ParticleFloatType_t GCParticleFloatInput::GetType() const {
    return GetSchemaValue<ParticleFloatType_t>(m_ptr, "CParticleFloatInput", "m_nType");
}

void GCParticleFloatInput::SetType(ParticleFloatType_t value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_nType", false, value);
}

ParticleFloatMapType_t GCParticleFloatInput::GetMapType() const {
    return GetSchemaValue<ParticleFloatMapType_t>(m_ptr, "CParticleFloatInput", "m_nMapType");
}

void GCParticleFloatInput::SetMapType(ParticleFloatMapType_t value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_nMapType", false, value);
}

float GCParticleFloatInput::GetLiteralValue() const {
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flLiteralValue");
}

void GCParticleFloatInput::SetLiteralValue(float value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flLiteralValue", false, value);
}

int32_t GCParticleFloatInput::GetControlPoint() const {
    return GetSchemaValue<int32_t>(m_ptr, "CParticleFloatInput", "m_nControlPoint");
}

void GCParticleFloatInput::SetControlPoint(int32_t value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_nControlPoint", false, value);
}

GParticleAttributeIndex_t GCParticleFloatInput::GetScalarAttribute() const {
    return GetSchemaValue<GParticleAttributeIndex_t>(m_ptr, "CParticleFloatInput", "m_nScalarAttribute");
}

void GCParticleFloatInput::SetScalarAttribute(GParticleAttributeIndex_t value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_nScalarAttribute", false, value);
}

GParticleAttributeIndex_t GCParticleFloatInput::GetVectorAttribute() const {
    return GetSchemaValue<GParticleAttributeIndex_t>(m_ptr, "CParticleFloatInput", "m_nVectorAttribute");
}

void GCParticleFloatInput::SetVectorAttribute(GParticleAttributeIndex_t value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_nVectorAttribute", false, value);
}

int32_t GCParticleFloatInput::GetVectorComponent() const {
    return GetSchemaValue<int32_t>(m_ptr, "CParticleFloatInput", "m_nVectorComponent");
}

void GCParticleFloatInput::SetVectorComponent(int32_t value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_nVectorComponent", false, value);
}

float GCParticleFloatInput::GetRandomMin() const {
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flRandomMin");
}

void GCParticleFloatInput::SetRandomMin(float value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flRandomMin", false, value);
}

float GCParticleFloatInput::GetRandomMax() const {
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flRandomMax");
}

void GCParticleFloatInput::SetRandomMax(float value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flRandomMax", false, value);
}

bool GCParticleFloatInput::GetHasRandomSignFlip() const {
    return GetSchemaValue<bool>(m_ptr, "CParticleFloatInput", "m_bHasRandomSignFlip");
}

void GCParticleFloatInput::SetHasRandomSignFlip(bool value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_bHasRandomSignFlip", false, value);
}

int32_t GCParticleFloatInput::GetRandomSeed() const {
    return GetSchemaValue<int32_t>(m_ptr, "CParticleFloatInput", "m_nRandomSeed");
}

void GCParticleFloatInput::SetRandomSeed(int32_t value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_nRandomSeed", false, value);
}

ParticleFloatRandomMode_t GCParticleFloatInput::GetRandomMode() const {
    return GetSchemaValue<ParticleFloatRandomMode_t>(m_ptr, "CParticleFloatInput", "m_nRandomMode");
}

void GCParticleFloatInput::SetRandomMode(ParticleFloatRandomMode_t value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_nRandomMode", false, value);
}

float GCParticleFloatInput::GetLOD0() const {
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flLOD0");
}

void GCParticleFloatInput::SetLOD0(float value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flLOD0", false, value);
}

float GCParticleFloatInput::GetLOD1() const {
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flLOD1");
}

void GCParticleFloatInput::SetLOD1(float value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flLOD1", false, value);
}

float GCParticleFloatInput::GetLOD2() const {
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flLOD2");
}

void GCParticleFloatInput::SetLOD2(float value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flLOD2", false, value);
}

float GCParticleFloatInput::GetLOD3() const {
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flLOD3");
}

void GCParticleFloatInput::SetLOD3(float value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flLOD3", false, value);
}

GParticleAttributeIndex_t GCParticleFloatInput::GetNoiseInputVectorAttribute() const {
    return GetSchemaValue<GParticleAttributeIndex_t>(m_ptr, "CParticleFloatInput", "m_nNoiseInputVectorAttribute");
}

void GCParticleFloatInput::SetNoiseInputVectorAttribute(GParticleAttributeIndex_t value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_nNoiseInputVectorAttribute", false, value);
}

float GCParticleFloatInput::GetNoiseOutputMin() const {
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flNoiseOutputMin");
}

void GCParticleFloatInput::SetNoiseOutputMin(float value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flNoiseOutputMin", false, value);
}

float GCParticleFloatInput::GetNoiseOutputMax() const {
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flNoiseOutputMax");
}

void GCParticleFloatInput::SetNoiseOutputMax(float value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flNoiseOutputMax", false, value);
}

float GCParticleFloatInput::GetNoiseScale() const {
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flNoiseScale");
}

void GCParticleFloatInput::SetNoiseScale(float value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flNoiseScale", false, value);
}

Vector GCParticleFloatInput::GetNoiseOffsetRate() const {
    return GetSchemaValue<Vector>(m_ptr, "CParticleFloatInput", "m_vecNoiseOffsetRate");
}

void GCParticleFloatInput::SetNoiseOffsetRate(Vector value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_vecNoiseOffsetRate", false, value);
}

float GCParticleFloatInput::GetNoiseOffset() const {
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flNoiseOffset");
}

void GCParticleFloatInput::SetNoiseOffset(float value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flNoiseOffset", false, value);
}

int32_t GCParticleFloatInput::GetNoiseOctaves() const {
    return GetSchemaValue<int32_t>(m_ptr, "CParticleFloatInput", "m_nNoiseOctaves");
}

void GCParticleFloatInput::SetNoiseOctaves(int32_t value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_nNoiseOctaves", false, value);
}

PFNoiseTurbulence_t GCParticleFloatInput::GetNoiseTurbulence() const {
    return GetSchemaValue<PFNoiseTurbulence_t>(m_ptr, "CParticleFloatInput", "m_nNoiseTurbulence");
}

void GCParticleFloatInput::SetNoiseTurbulence(PFNoiseTurbulence_t value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_nNoiseTurbulence", false, value);
}

PFNoiseType_t GCParticleFloatInput::GetNoiseType() const {
    return GetSchemaValue<PFNoiseType_t>(m_ptr, "CParticleFloatInput", "m_nNoiseType");
}

void GCParticleFloatInput::SetNoiseType(PFNoiseType_t value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_nNoiseType", false, value);
}

PFNoiseModifier_t GCParticleFloatInput::GetNoiseModifier() const {
    return GetSchemaValue<PFNoiseModifier_t>(m_ptr, "CParticleFloatInput", "m_nNoiseModifier");
}

void GCParticleFloatInput::SetNoiseModifier(PFNoiseModifier_t value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_nNoiseModifier", false, value);
}

float GCParticleFloatInput::GetNoiseTurbulenceScale() const {
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flNoiseTurbulenceScale");
}

void GCParticleFloatInput::SetNoiseTurbulenceScale(float value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flNoiseTurbulenceScale", false, value);
}

float GCParticleFloatInput::GetNoiseTurbulenceMix() const {
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flNoiseTurbulenceMix");
}

void GCParticleFloatInput::SetNoiseTurbulenceMix(float value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flNoiseTurbulenceMix", false, value);
}

float GCParticleFloatInput::GetNoiseImgPreviewScale() const {
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flNoiseImgPreviewScale");
}

void GCParticleFloatInput::SetNoiseImgPreviewScale(float value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flNoiseImgPreviewScale", false, value);
}

bool GCParticleFloatInput::GetNoiseImgPreviewLive() const {
    return GetSchemaValue<bool>(m_ptr, "CParticleFloatInput", "m_bNoiseImgPreviewLive");
}

void GCParticleFloatInput::SetNoiseImgPreviewLive(bool value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_bNoiseImgPreviewLive", false, value);
}

float GCParticleFloatInput::GetNoCameraFallback() const {
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flNoCameraFallback");
}

void GCParticleFloatInput::SetNoCameraFallback(float value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flNoCameraFallback", false, value);
}

bool GCParticleFloatInput::GetUseBoundsCenter() const {
    return GetSchemaValue<bool>(m_ptr, "CParticleFloatInput", "m_bUseBoundsCenter");
}

void GCParticleFloatInput::SetUseBoundsCenter(bool value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_bUseBoundsCenter", false, value);
}

ParticleFloatInputMode_t GCParticleFloatInput::GetInputMode() const {
    return GetSchemaValue<ParticleFloatInputMode_t>(m_ptr, "CParticleFloatInput", "m_nInputMode");
}

void GCParticleFloatInput::SetInputMode(ParticleFloatInputMode_t value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_nInputMode", false, value);
}

float GCParticleFloatInput::GetMultFactor() const {
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flMultFactor");
}

void GCParticleFloatInput::SetMultFactor(float value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flMultFactor", false, value);
}

float GCParticleFloatInput::GetInput0() const {
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flInput0");
}

void GCParticleFloatInput::SetInput0(float value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flInput0", false, value);
}

float GCParticleFloatInput::GetInput1() const {
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flInput1");
}

void GCParticleFloatInput::SetInput1(float value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flInput1", false, value);
}

float GCParticleFloatInput::GetOutput0() const {
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flOutput0");
}

void GCParticleFloatInput::SetOutput0(float value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flOutput0", false, value);
}

float GCParticleFloatInput::GetOutput1() const {
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flOutput1");
}

void GCParticleFloatInput::SetOutput1(float value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flOutput1", false, value);
}

float GCParticleFloatInput::GetNotchedRangeMin() const {
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flNotchedRangeMin");
}

void GCParticleFloatInput::SetNotchedRangeMin(float value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flNotchedRangeMin", false, value);
}

float GCParticleFloatInput::GetNotchedRangeMax() const {
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flNotchedRangeMax");
}

void GCParticleFloatInput::SetNotchedRangeMax(float value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flNotchedRangeMax", false, value);
}

float GCParticleFloatInput::GetNotchedOutputOutside() const {
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flNotchedOutputOutside");
}

void GCParticleFloatInput::SetNotchedOutputOutside(float value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flNotchedOutputOutside", false, value);
}

float GCParticleFloatInput::GetNotchedOutputInside() const {
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flNotchedOutputInside");
}

void GCParticleFloatInput::SetNotchedOutputInside(float value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flNotchedOutputInside", false, value);
}

ParticleFloatBiasType_t GCParticleFloatInput::GetBiasType() const {
    return GetSchemaValue<ParticleFloatBiasType_t>(m_ptr, "CParticleFloatInput", "m_nBiasType");
}

void GCParticleFloatInput::SetBiasType(ParticleFloatBiasType_t value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_nBiasType", false, value);
}

float GCParticleFloatInput::GetBiasParameter() const {
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flBiasParameter");
}

void GCParticleFloatInput::SetBiasParameter(float value) {
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flBiasParameter", false, value);
}

std::string GCParticleFloatInput::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCParticleFloatInput::IsValid() {
    return (m_ptr != nullptr);
}

GVoxelVisBlockOffset_t::GVoxelVisBlockOffset_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVoxelVisBlockOffset_t::GVoxelVisBlockOffset_t(void *ptr) {
    m_ptr = ptr;
}

uint32_t GVoxelVisBlockOffset_t::GetOffset() const {
    return GetSchemaValue<uint32_t>(m_ptr, "VoxelVisBlockOffset_t", "m_nOffset");
}

void GVoxelVisBlockOffset_t::SetOffset(uint32_t value) {
    SetSchemaValue(m_ptr, "VoxelVisBlockOffset_t", "m_nOffset", true, value);
}

uint32_t GVoxelVisBlockOffset_t::GetElementCount() const {
    return GetSchemaValue<uint32_t>(m_ptr, "VoxelVisBlockOffset_t", "m_nElementCount");
}

void GVoxelVisBlockOffset_t::SetElementCount(uint32_t value) {
    SetSchemaValue(m_ptr, "VoxelVisBlockOffset_t", "m_nElementCount", true, value);
}

std::string GVoxelVisBlockOffset_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVoxelVisBlockOffset_t::IsValid() {
    return (m_ptr != nullptr);
}

GAggregateLODSetup_t::GAggregateLODSetup_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GAggregateLODSetup_t::GAggregateLODSetup_t(void *ptr) {
    m_ptr = ptr;
}

Vector GAggregateLODSetup_t::GetLODOrigin() const {
    return GetSchemaValue<Vector>(m_ptr, "AggregateLODSetup_t", "m_vLODOrigin");
}

void GAggregateLODSetup_t::SetLODOrigin(Vector value) {
    SetSchemaValue(m_ptr, "AggregateLODSetup_t", "m_vLODOrigin", true, value);
}

float GAggregateLODSetup_t::GetMaxObjectScale() const {
    return GetSchemaValue<float>(m_ptr, "AggregateLODSetup_t", "m_fMaxObjectScale");
}

void GAggregateLODSetup_t::SetMaxObjectScale(float value) {
    SetSchemaValue(m_ptr, "AggregateLODSetup_t", "m_fMaxObjectScale", true, value);
}

std::vector<float32> GAggregateLODSetup_t::GetSwitchDistances() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "AggregateLODSetup_t", "m_fSwitchDistances"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GAggregateLODSetup_t::SetSwitchDistances(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "AggregateLODSetup_t", "m_fSwitchDistances", true, value);
}

std::string GAggregateLODSetup_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GAggregateLODSetup_t::IsValid() {
    return (m_ptr != nullptr);
}

GCProductQuantizer::GCProductQuantizer(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCProductQuantizer::GCProductQuantizer(void *ptr) {
    m_ptr = ptr;
}

std::vector<GCVectorQuantizer> GCProductQuantizer::GetSubQuantizers() const {
    CUtlVector<GCVectorQuantizer>* vec = GetSchemaValue<CUtlVector<GCVectorQuantizer>*>(m_ptr, "CProductQuantizer", "m_subQuantizers"); std::vector<GCVectorQuantizer> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCProductQuantizer::SetSubQuantizers(std::vector<GCVectorQuantizer> value) {
    SetSchemaValueCUtlVector<GCVectorQuantizer>(m_ptr, "CProductQuantizer", "m_subQuantizers", false, value);
}

int32_t GCProductQuantizer::GetDimensions() const {
    return GetSchemaValue<int32_t>(m_ptr, "CProductQuantizer", "m_nDimensions");
}

void GCProductQuantizer::SetDimensions(int32_t value) {
    SetSchemaValue(m_ptr, "CProductQuantizer", "m_nDimensions", false, value);
}

std::string GCProductQuantizer::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCProductQuantizer::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimUpdateNodeRef::GCAnimUpdateNodeRef(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimUpdateNodeRef::GCAnimUpdateNodeRef(void *ptr) {
    m_ptr = ptr;
}

int32_t GCAnimUpdateNodeRef::GetNodeIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimUpdateNodeRef", "m_nodeIndex");
}

void GCAnimUpdateNodeRef::SetNodeIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimUpdateNodeRef", "m_nodeIndex", false, value);
}

std::string GCAnimUpdateNodeRef::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimUpdateNodeRef::IsValid() {
    return (m_ptr != nullptr);
}

GCNmGraphNode::GCNmGraphNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmGraphNode::GCNmGraphNode(void *ptr) {
    m_ptr = ptr;
}

int16_t GCNmGraphNode::GetNodeIdx() const {
    return GetSchemaValue<int16_t>(m_ptr, "CNmGraphNode", "m_nNodeIdx");
}

void GCNmGraphNode::SetNodeIdx(int16_t value) {
    SetSchemaValue(m_ptr, "CNmGraphNode", "m_nNodeIdx", false, value);
}

std::string GCNmGraphNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmGraphNode::IsValid() {
    return (m_ptr != nullptr);
}

GCParticleCollectionFloatInput::GCParticleCollectionFloatInput(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCParticleCollectionFloatInput::GCParticleCollectionFloatInput(void *ptr) {
    m_ptr = ptr;
}

std::string GCParticleCollectionFloatInput::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCParticleCollectionFloatInput::IsValid() {
    return (m_ptr != nullptr);
}

GCParticleFunction::GCParticleFunction(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCParticleFunction::GCParticleFunction(void *ptr) {
    m_ptr = ptr;
}

GCParticleCollectionFloatInput GCParticleFunction::GetOpStrength() const {
    return GetSchemaValue<GCParticleCollectionFloatInput>(m_ptr, "CParticleFunction", "m_flOpStrength");
}

void GCParticleFunction::SetOpStrength(GCParticleCollectionFloatInput value) {
    SetSchemaValue(m_ptr, "CParticleFunction", "m_flOpStrength", false, value);
}

ParticleEndcapMode_t GCParticleFunction::GetOpEndCapState() const {
    return GetSchemaValue<ParticleEndcapMode_t>(m_ptr, "CParticleFunction", "m_nOpEndCapState");
}

void GCParticleFunction::SetOpEndCapState(ParticleEndcapMode_t value) {
    SetSchemaValue(m_ptr, "CParticleFunction", "m_nOpEndCapState", false, value);
}

float GCParticleFunction::GetOpStartFadeInTime() const {
    return GetSchemaValue<float>(m_ptr, "CParticleFunction", "m_flOpStartFadeInTime");
}

void GCParticleFunction::SetOpStartFadeInTime(float value) {
    SetSchemaValue(m_ptr, "CParticleFunction", "m_flOpStartFadeInTime", false, value);
}

float GCParticleFunction::GetOpEndFadeInTime() const {
    return GetSchemaValue<float>(m_ptr, "CParticleFunction", "m_flOpEndFadeInTime");
}

void GCParticleFunction::SetOpEndFadeInTime(float value) {
    SetSchemaValue(m_ptr, "CParticleFunction", "m_flOpEndFadeInTime", false, value);
}

float GCParticleFunction::GetOpStartFadeOutTime() const {
    return GetSchemaValue<float>(m_ptr, "CParticleFunction", "m_flOpStartFadeOutTime");
}

void GCParticleFunction::SetOpStartFadeOutTime(float value) {
    SetSchemaValue(m_ptr, "CParticleFunction", "m_flOpStartFadeOutTime", false, value);
}

float GCParticleFunction::GetOpEndFadeOutTime() const {
    return GetSchemaValue<float>(m_ptr, "CParticleFunction", "m_flOpEndFadeOutTime");
}

void GCParticleFunction::SetOpEndFadeOutTime(float value) {
    SetSchemaValue(m_ptr, "CParticleFunction", "m_flOpEndFadeOutTime", false, value);
}

float GCParticleFunction::GetOpFadeOscillatePeriod() const {
    return GetSchemaValue<float>(m_ptr, "CParticleFunction", "m_flOpFadeOscillatePeriod");
}

void GCParticleFunction::SetOpFadeOscillatePeriod(float value) {
    SetSchemaValue(m_ptr, "CParticleFunction", "m_flOpFadeOscillatePeriod", false, value);
}

bool GCParticleFunction::GetNormalizeToStopTime() const {
    return GetSchemaValue<bool>(m_ptr, "CParticleFunction", "m_bNormalizeToStopTime");
}

void GCParticleFunction::SetNormalizeToStopTime(bool value) {
    SetSchemaValue(m_ptr, "CParticleFunction", "m_bNormalizeToStopTime", false, value);
}

float GCParticleFunction::GetOpTimeOffsetMin() const {
    return GetSchemaValue<float>(m_ptr, "CParticleFunction", "m_flOpTimeOffsetMin");
}

void GCParticleFunction::SetOpTimeOffsetMin(float value) {
    SetSchemaValue(m_ptr, "CParticleFunction", "m_flOpTimeOffsetMin", false, value);
}

float GCParticleFunction::GetOpTimeOffsetMax() const {
    return GetSchemaValue<float>(m_ptr, "CParticleFunction", "m_flOpTimeOffsetMax");
}

void GCParticleFunction::SetOpTimeOffsetMax(float value) {
    SetSchemaValue(m_ptr, "CParticleFunction", "m_flOpTimeOffsetMax", false, value);
}

int32_t GCParticleFunction::GetOpTimeOffsetSeed() const {
    return GetSchemaValue<int32_t>(m_ptr, "CParticleFunction", "m_nOpTimeOffsetSeed");
}

void GCParticleFunction::SetOpTimeOffsetSeed(int32_t value) {
    SetSchemaValue(m_ptr, "CParticleFunction", "m_nOpTimeOffsetSeed", false, value);
}

int32_t GCParticleFunction::GetOpTimeScaleSeed() const {
    return GetSchemaValue<int32_t>(m_ptr, "CParticleFunction", "m_nOpTimeScaleSeed");
}

void GCParticleFunction::SetOpTimeScaleSeed(int32_t value) {
    SetSchemaValue(m_ptr, "CParticleFunction", "m_nOpTimeScaleSeed", false, value);
}

float GCParticleFunction::GetOpTimeScaleMin() const {
    return GetSchemaValue<float>(m_ptr, "CParticleFunction", "m_flOpTimeScaleMin");
}

void GCParticleFunction::SetOpTimeScaleMin(float value) {
    SetSchemaValue(m_ptr, "CParticleFunction", "m_flOpTimeScaleMin", false, value);
}

float GCParticleFunction::GetOpTimeScaleMax() const {
    return GetSchemaValue<float>(m_ptr, "CParticleFunction", "m_flOpTimeScaleMax");
}

void GCParticleFunction::SetOpTimeScaleMax(float value) {
    SetSchemaValue(m_ptr, "CParticleFunction", "m_flOpTimeScaleMax", false, value);
}

bool GCParticleFunction::GetDisableOperator() const {
    return GetSchemaValue<bool>(m_ptr, "CParticleFunction", "m_bDisableOperator");
}

void GCParticleFunction::SetDisableOperator(bool value) {
    SetSchemaValue(m_ptr, "CParticleFunction", "m_bDisableOperator", false, value);
}

CUtlString GCParticleFunction::GetNotes() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CParticleFunction", "m_Notes");
}

void GCParticleFunction::SetNotes(CUtlString value) {
    SetSchemaValue(m_ptr, "CParticleFunction", "m_Notes", false, value);
}

std::string GCParticleFunction::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCParticleFunction::IsValid() {
    return (m_ptr != nullptr);
}

GCParticleFunctionOperator::GCParticleFunctionOperator(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCParticleFunctionOperator::GCParticleFunctionOperator(void *ptr) {
    m_ptr = ptr;
}

std::string GCParticleFunctionOperator::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCParticleFunctionOperator::IsValid() {
    return (m_ptr != nullptr);
}

GPARTICLE_WORLD_HANDLE__::GPARTICLE_WORLD_HANDLE__(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GPARTICLE_WORLD_HANDLE__::GPARTICLE_WORLD_HANDLE__(void *ptr) {
    m_ptr = ptr;
}

int32_t GPARTICLE_WORLD_HANDLE__::GetUnused() const {
    return GetSchemaValue<int32_t>(m_ptr, "PARTICLE_WORLD_HANDLE__", "unused");
}

void GPARTICLE_WORLD_HANDLE__::SetUnused(int32_t value) {
    SetSchemaValue(m_ptr, "PARTICLE_WORLD_HANDLE__", "unused", false, value);
}

std::string GPARTICLE_WORLD_HANDLE__::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GPARTICLE_WORLD_HANDLE__::IsValid() {
    return (m_ptr != nullptr);
}

GVMixDynamicsCompressorDesc_t::GVMixDynamicsCompressorDesc_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVMixDynamicsCompressorDesc_t::GVMixDynamicsCompressorDesc_t(void *ptr) {
    m_ptr = ptr;
}

float GVMixDynamicsCompressorDesc_t::GetFldbOutputGain() const {
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsCompressorDesc_t", "m_fldbOutputGain");
}

void GVMixDynamicsCompressorDesc_t::SetFldbOutputGain(float value) {
    SetSchemaValue(m_ptr, "VMixDynamicsCompressorDesc_t", "m_fldbOutputGain", true, value);
}

float GVMixDynamicsCompressorDesc_t::GetFldbCompressionThreshold() const {
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsCompressorDesc_t", "m_fldbCompressionThreshold");
}

void GVMixDynamicsCompressorDesc_t::SetFldbCompressionThreshold(float value) {
    SetSchemaValue(m_ptr, "VMixDynamicsCompressorDesc_t", "m_fldbCompressionThreshold", true, value);
}

float GVMixDynamicsCompressorDesc_t::GetFldbKneeWidth() const {
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsCompressorDesc_t", "m_fldbKneeWidth");
}

void GVMixDynamicsCompressorDesc_t::SetFldbKneeWidth(float value) {
    SetSchemaValue(m_ptr, "VMixDynamicsCompressorDesc_t", "m_fldbKneeWidth", true, value);
}

float GVMixDynamicsCompressorDesc_t::GetCompressionRatio() const {
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsCompressorDesc_t", "m_flCompressionRatio");
}

void GVMixDynamicsCompressorDesc_t::SetCompressionRatio(float value) {
    SetSchemaValue(m_ptr, "VMixDynamicsCompressorDesc_t", "m_flCompressionRatio", true, value);
}

float GVMixDynamicsCompressorDesc_t::GetAttackTimeMS() const {
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsCompressorDesc_t", "m_flAttackTimeMS");
}

void GVMixDynamicsCompressorDesc_t::SetAttackTimeMS(float value) {
    SetSchemaValue(m_ptr, "VMixDynamicsCompressorDesc_t", "m_flAttackTimeMS", true, value);
}

float GVMixDynamicsCompressorDesc_t::GetReleaseTimeMS() const {
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsCompressorDesc_t", "m_flReleaseTimeMS");
}

void GVMixDynamicsCompressorDesc_t::SetReleaseTimeMS(float value) {
    SetSchemaValue(m_ptr, "VMixDynamicsCompressorDesc_t", "m_flReleaseTimeMS", true, value);
}

float GVMixDynamicsCompressorDesc_t::GetRMSTimeMS() const {
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsCompressorDesc_t", "m_flRMSTimeMS");
}

void GVMixDynamicsCompressorDesc_t::SetRMSTimeMS(float value) {
    SetSchemaValue(m_ptr, "VMixDynamicsCompressorDesc_t", "m_flRMSTimeMS", true, value);
}

float GVMixDynamicsCompressorDesc_t::GetWetMix() const {
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsCompressorDesc_t", "m_flWetMix");
}

void GVMixDynamicsCompressorDesc_t::SetWetMix(float value) {
    SetSchemaValue(m_ptr, "VMixDynamicsCompressorDesc_t", "m_flWetMix", true, value);
}

bool GVMixDynamicsCompressorDesc_t::GetPeakMode() const {
    return GetSchemaValue<bool>(m_ptr, "VMixDynamicsCompressorDesc_t", "m_bPeakMode");
}

void GVMixDynamicsCompressorDesc_t::SetPeakMode(bool value) {
    SetSchemaValue(m_ptr, "VMixDynamicsCompressorDesc_t", "m_bPeakMode", true, value);
}

std::string GVMixDynamicsCompressorDesc_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVMixDynamicsCompressorDesc_t::IsValid() {
    return (m_ptr != nullptr);
}

GFootStepTrigger::GFootStepTrigger(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFootStepTrigger::GFootStepTrigger(void *ptr) {
    m_ptr = ptr;
}

std::vector<int32> GFootStepTrigger::GetTags() const {
    CUtlVector<int32>* vec = GetSchemaValue<CUtlVector<int32>*>(m_ptr, "FootStepTrigger", "m_tags"); std::vector<int32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GFootStepTrigger::SetTags(std::vector<int32> value) {
    SetSchemaValueCUtlVector<int32>(m_ptr, "FootStepTrigger", "m_tags", false, value);
}

int32_t GFootStepTrigger::GetFootIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "FootStepTrigger", "m_nFootIndex");
}

void GFootStepTrigger::SetFootIndex(int32_t value) {
    SetSchemaValue(m_ptr, "FootStepTrigger", "m_nFootIndex", false, value);
}

StepPhase GFootStepTrigger::GetTriggerPhase() const {
    return GetSchemaValue<StepPhase>(m_ptr, "FootStepTrigger", "m_triggerPhase");
}

void GFootStepTrigger::SetTriggerPhase(StepPhase value) {
    SetSchemaValue(m_ptr, "FootStepTrigger", "m_triggerPhase", false, value);
}

std::string GFootStepTrigger::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFootStepTrigger::IsValid() {
    return (m_ptr != nullptr);
}

GParticleControlPointDriver_t::GParticleControlPointDriver_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GParticleControlPointDriver_t::GParticleControlPointDriver_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GParticleControlPointDriver_t::GetControlPoint() const {
    return GetSchemaValue<int32_t>(m_ptr, "ParticleControlPointDriver_t", "m_iControlPoint");
}

void GParticleControlPointDriver_t::SetControlPoint(int32_t value) {
    SetSchemaValue(m_ptr, "ParticleControlPointDriver_t", "m_iControlPoint", true, value);
}

ParticleAttachment_t GParticleControlPointDriver_t::GetAttachType() const {
    return GetSchemaValue<ParticleAttachment_t>(m_ptr, "ParticleControlPointDriver_t", "m_iAttachType");
}

void GParticleControlPointDriver_t::SetAttachType(ParticleAttachment_t value) {
    SetSchemaValue(m_ptr, "ParticleControlPointDriver_t", "m_iAttachType", true, value);
}

CUtlString GParticleControlPointDriver_t::GetAttachmentName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "ParticleControlPointDriver_t", "m_attachmentName");
}

void GParticleControlPointDriver_t::SetAttachmentName(CUtlString value) {
    SetSchemaValue(m_ptr, "ParticleControlPointDriver_t", "m_attachmentName", true, value);
}

Vector GParticleControlPointDriver_t::GetOffset() const {
    return GetSchemaValue<Vector>(m_ptr, "ParticleControlPointDriver_t", "m_vecOffset");
}

void GParticleControlPointDriver_t::SetOffset(Vector value) {
    SetSchemaValue(m_ptr, "ParticleControlPointDriver_t", "m_vecOffset", true, value);
}

QAngle GParticleControlPointDriver_t::GetOffset1() const {
    return GetSchemaValue<QAngle>(m_ptr, "ParticleControlPointDriver_t", "m_angOffset");
}

void GParticleControlPointDriver_t::SetOffset1(QAngle value) {
    SetSchemaValue(m_ptr, "ParticleControlPointDriver_t", "m_angOffset", true, value);
}

CUtlString GParticleControlPointDriver_t::GetEntityName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "ParticleControlPointDriver_t", "m_entityName");
}

void GParticleControlPointDriver_t::SetEntityName(CUtlString value) {
    SetSchemaValue(m_ptr, "ParticleControlPointDriver_t", "m_entityName", true, value);
}

std::string GParticleControlPointDriver_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GParticleControlPointDriver_t::IsValid() {
    return (m_ptr != nullptr);
}

GFeSphereRigid_t::GFeSphereRigid_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeSphereRigid_t::GFeSphereRigid_t(void *ptr) {
    m_ptr = ptr;
}

float GFeSphereRigid_t::GetSphere() const {
    return GetSchemaValue<float>(m_ptr, "FeSphereRigid_t", "vSphere");
}

void GFeSphereRigid_t::SetSphere(float value) {
    SetSchemaValue(m_ptr, "FeSphereRigid_t", "vSphere", true, value);
}

uint16_t GFeSphereRigid_t::GetNode() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeSphereRigid_t", "nNode");
}

void GFeSphereRigid_t::SetNode(uint16_t value) {
    SetSchemaValue(m_ptr, "FeSphereRigid_t", "nNode", true, value);
}

uint16_t GFeSphereRigid_t::GetCollisionMask() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeSphereRigid_t", "nCollisionMask");
}

void GFeSphereRigid_t::SetCollisionMask(uint16_t value) {
    SetSchemaValue(m_ptr, "FeSphereRigid_t", "nCollisionMask", true, value);
}

uint16_t GFeSphereRigid_t::GetVertexMapIndex() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeSphereRigid_t", "nVertexMapIndex");
}

void GFeSphereRigid_t::SetVertexMapIndex(uint16_t value) {
    SetSchemaValue(m_ptr, "FeSphereRigid_t", "nVertexMapIndex", true, value);
}

uint16_t GFeSphereRigid_t::GetFlags() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeSphereRigid_t", "nFlags");
}

void GFeSphereRigid_t::SetFlags(uint16_t value) {
    SetSchemaValue(m_ptr, "FeSphereRigid_t", "nFlags", true, value);
}

std::string GFeSphereRigid_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeSphereRigid_t::IsValid() {
    return (m_ptr != nullptr);
}

GCMotionMetricEvaluator::GCMotionMetricEvaluator(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMotionMetricEvaluator::GCMotionMetricEvaluator(void *ptr) {
    m_ptr = ptr;
}

std::vector<float32> GCMotionMetricEvaluator::GetMeans() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "CMotionMetricEvaluator", "m_means"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCMotionMetricEvaluator::SetMeans(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "CMotionMetricEvaluator", "m_means", false, value);
}

std::vector<float32> GCMotionMetricEvaluator::GetStandardDeviations() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "CMotionMetricEvaluator", "m_standardDeviations"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCMotionMetricEvaluator::SetStandardDeviations(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "CMotionMetricEvaluator", "m_standardDeviations", false, value);
}

float GCMotionMetricEvaluator::GetWeight() const {
    return GetSchemaValue<float>(m_ptr, "CMotionMetricEvaluator", "m_flWeight");
}

void GCMotionMetricEvaluator::SetWeight(float value) {
    SetSchemaValue(m_ptr, "CMotionMetricEvaluator", "m_flWeight", false, value);
}

int32_t GCMotionMetricEvaluator::GetDimensionStartIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CMotionMetricEvaluator", "m_nDimensionStartIndex");
}

void GCMotionMetricEvaluator::SetDimensionStartIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CMotionMetricEvaluator", "m_nDimensionStartIndex", false, value);
}

std::string GCMotionMetricEvaluator::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMotionMetricEvaluator::IsValid() {
    return (m_ptr != nullptr);
}

GCDrawCullingData::GCDrawCullingData(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCDrawCullingData::GCDrawCullingData(void *ptr) {
    m_ptr = ptr;
}

Vector GCDrawCullingData::GetConeApex() const {
    return GetSchemaValue<Vector>(m_ptr, "CDrawCullingData", "m_vConeApex");
}

void GCDrawCullingData::SetConeApex(Vector value) {
    SetSchemaValue(m_ptr, "CDrawCullingData", "m_vConeApex", false, value);
}

std::vector<int8_t> GCDrawCullingData::GetConeAxis() const {
    int8_t* outValue = GetSchemaValue<int8_t*>(m_ptr, "CDrawCullingData", "m_ConeAxis"); std::vector<int8_t> ret; for(int i = 0; i < 3; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCDrawCullingData::SetConeAxis(std::vector<int8_t> value) {
    int8_t* outValue = GetSchemaValue<int8_t*>(m_ptr, "CDrawCullingData", "m_ConeAxis"); for(int i = 0; i < 3; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CDrawCullingData", "m_ConeAxis", false, outValue);
}

int8_t GCDrawCullingData::GetConeCutoff() const {
    return GetSchemaValue<int8_t>(m_ptr, "CDrawCullingData", "m_ConeCutoff");
}

void GCDrawCullingData::SetConeCutoff(int8_t value) {
    SetSchemaValue(m_ptr, "CDrawCullingData", "m_ConeCutoff", false, value);
}

std::string GCDrawCullingData::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCDrawCullingData::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimUserDifference::GCAnimUserDifference(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimUserDifference::GCAnimUserDifference(void *ptr) {
    m_ptr = ptr;
}

CBufferString GCAnimUserDifference::GetName() const {
    return GetSchemaValue<CBufferString>(m_ptr, "CAnimUserDifference", "m_name");
}

void GCAnimUserDifference::SetName(CBufferString value) {
    SetSchemaValue(m_ptr, "CAnimUserDifference", "m_name", false, value);
}

int32_t GCAnimUserDifference::GetType() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimUserDifference", "m_nType");
}

void GCAnimUserDifference::SetType(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimUserDifference", "m_nType", false, value);
}

std::string GCAnimUserDifference::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimUserDifference::IsValid() {
    return (m_ptr != nullptr);
}

GCSeqMultiFetchFlag::GCSeqMultiFetchFlag(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSeqMultiFetchFlag::GCSeqMultiFetchFlag(void *ptr) {
    m_ptr = ptr;
}

bool GCSeqMultiFetchFlag::GetRealtime() const {
    return GetSchemaValue<bool>(m_ptr, "CSeqMultiFetchFlag", "m_bRealtime");
}

void GCSeqMultiFetchFlag::SetRealtime(bool value) {
    SetSchemaValue(m_ptr, "CSeqMultiFetchFlag", "m_bRealtime", false, value);
}

bool GCSeqMultiFetchFlag::GetCylepose() const {
    return GetSchemaValue<bool>(m_ptr, "CSeqMultiFetchFlag", "m_bCylepose");
}

void GCSeqMultiFetchFlag::SetCylepose(bool value) {
    SetSchemaValue(m_ptr, "CSeqMultiFetchFlag", "m_bCylepose", false, value);
}

bool GCSeqMultiFetchFlag::Get0D() const {
    return GetSchemaValue<bool>(m_ptr, "CSeqMultiFetchFlag", "m_b0D");
}

void GCSeqMultiFetchFlag::Set0D(bool value) {
    SetSchemaValue(m_ptr, "CSeqMultiFetchFlag", "m_b0D", false, value);
}

bool GCSeqMultiFetchFlag::Get1D() const {
    return GetSchemaValue<bool>(m_ptr, "CSeqMultiFetchFlag", "m_b1D");
}

void GCSeqMultiFetchFlag::Set1D(bool value) {
    SetSchemaValue(m_ptr, "CSeqMultiFetchFlag", "m_b1D", false, value);
}

bool GCSeqMultiFetchFlag::Get2D() const {
    return GetSchemaValue<bool>(m_ptr, "CSeqMultiFetchFlag", "m_b2D");
}

void GCSeqMultiFetchFlag::Set2D(bool value) {
    SetSchemaValue(m_ptr, "CSeqMultiFetchFlag", "m_b2D", false, value);
}

bool GCSeqMultiFetchFlag::Get2D_TRI() const {
    return GetSchemaValue<bool>(m_ptr, "CSeqMultiFetchFlag", "m_b2D_TRI");
}

void GCSeqMultiFetchFlag::Set2D_TRI(bool value) {
    SetSchemaValue(m_ptr, "CSeqMultiFetchFlag", "m_b2D_TRI", false, value);
}

std::string GCSeqMultiFetchFlag::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSeqMultiFetchFlag::IsValid() {
    return (m_ptr != nullptr);
}

GCNmEvent::GCNmEvent(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmEvent::GCNmEvent(void *ptr) {
    m_ptr = ptr;
}

float GCNmEvent::GetStartTime() const {
    return GetSchemaValue<float>(m_ptr, "CNmEvent", "m_flStartTime");
}

void GCNmEvent::SetStartTime(float value) {
    SetSchemaValue(m_ptr, "CNmEvent", "m_flStartTime", false, value);
}

float GCNmEvent::GetDuration() const {
    return GetSchemaValue<float>(m_ptr, "CNmEvent", "m_flDuration");
}

void GCNmEvent::SetDuration(float value) {
    SetSchemaValue(m_ptr, "CNmEvent", "m_flDuration", false, value);
}

std::string GCNmEvent::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmEvent::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimParamHandle::GCAnimParamHandle(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimParamHandle::GCAnimParamHandle(void *ptr) {
    m_ptr = ptr;
}

AnimParamType_t GCAnimParamHandle::GetType() const {
    return GetSchemaValue<AnimParamType_t>(m_ptr, "CAnimParamHandle", "m_type");
}

void GCAnimParamHandle::SetType(AnimParamType_t value) {
    SetSchemaValue(m_ptr, "CAnimParamHandle", "m_type", false, value);
}

uint8_t GCAnimParamHandle::GetIndex() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CAnimParamHandle", "m_index");
}

void GCAnimParamHandle::SetIndex(uint8_t value) {
    SetSchemaValue(m_ptr, "CAnimParamHandle", "m_index", false, value);
}

std::string GCAnimParamHandle::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimParamHandle::IsValid() {
    return (m_ptr != nullptr);
}

GCFuseSymbolTable::GCFuseSymbolTable(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFuseSymbolTable::GCFuseSymbolTable(void *ptr) {
    m_ptr = ptr;
}

std::vector<GConstantInfo_t> GCFuseSymbolTable::GetConstants() const {
    CUtlVector<GConstantInfo_t>* vec = GetSchemaValue<CUtlVector<GConstantInfo_t>*>(m_ptr, "CFuseSymbolTable", "m_constants"); std::vector<GConstantInfo_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCFuseSymbolTable::SetConstants(std::vector<GConstantInfo_t> value) {
    SetSchemaValueCUtlVector<GConstantInfo_t>(m_ptr, "CFuseSymbolTable", "m_constants", false, value);
}

std::vector<GVariableInfo_t> GCFuseSymbolTable::GetVariables() const {
    CUtlVector<GVariableInfo_t>* vec = GetSchemaValue<CUtlVector<GVariableInfo_t>*>(m_ptr, "CFuseSymbolTable", "m_variables"); std::vector<GVariableInfo_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCFuseSymbolTable::SetVariables(std::vector<GVariableInfo_t> value) {
    SetSchemaValueCUtlVector<GVariableInfo_t>(m_ptr, "CFuseSymbolTable", "m_variables", false, value);
}

std::vector<GFunctionInfo_t> GCFuseSymbolTable::GetFunctions() const {
    CUtlVector<GFunctionInfo_t>* vec = GetSchemaValue<CUtlVector<GFunctionInfo_t>*>(m_ptr, "CFuseSymbolTable", "m_functions"); std::vector<GFunctionInfo_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCFuseSymbolTable::SetFunctions(std::vector<GFunctionInfo_t> value) {
    SetSchemaValueCUtlVector<GFunctionInfo_t>(m_ptr, "CFuseSymbolTable", "m_functions", false, value);
}

std::string GCFuseSymbolTable::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFuseSymbolTable::IsValid() {
    return (m_ptr != nullptr);
}

GGeneratedTextureHandle_t::GGeneratedTextureHandle_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GGeneratedTextureHandle_t::GGeneratedTextureHandle_t(void *ptr) {
    m_ptr = ptr;
}

CUtlString GGeneratedTextureHandle_t::GetStrBitmapName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "GeneratedTextureHandle_t", "m_strBitmapName");
}

void GGeneratedTextureHandle_t::SetStrBitmapName(CUtlString value) {
    SetSchemaValue(m_ptr, "GeneratedTextureHandle_t", "m_strBitmapName", true, value);
}

std::string GGeneratedTextureHandle_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GGeneratedTextureHandle_t::IsValid() {
    return (m_ptr != nullptr);
}

GSceneViewId_t::GSceneViewId_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GSceneViewId_t::GSceneViewId_t(void *ptr) {
    m_ptr = ptr;
}

uint64_t GSceneViewId_t::GetViewId() const {
    return GetSchemaValue<uint64_t>(m_ptr, "SceneViewId_t", "m_nViewId");
}

void GSceneViewId_t::SetViewId(uint64_t value) {
    SetSchemaValue(m_ptr, "SceneViewId_t", "m_nViewId", true, value);
}

uint64_t GSceneViewId_t::GetFrameCount() const {
    return GetSchemaValue<uint64_t>(m_ptr, "SceneViewId_t", "m_nFrameCount");
}

void GSceneViewId_t::SetFrameCount(uint64_t value) {
    SetSchemaValue(m_ptr, "SceneViewId_t", "m_nFrameCount", true, value);
}

std::string GSceneViewId_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GSceneViewId_t::IsValid() {
    return (m_ptr != nullptr);
}

GPhysFeModelDesc_t::GPhysFeModelDesc_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GPhysFeModelDesc_t::GPhysFeModelDesc_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<uint32> GPhysFeModelDesc_t::GetCtrlHash() const {
    CUtlVector<uint32>* vec = GetSchemaValue<CUtlVector<uint32>*>(m_ptr, "PhysFeModelDesc_t", "m_CtrlHash"); std::vector<uint32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetCtrlHash(std::vector<uint32> value) {
    SetSchemaValueCUtlVector<uint32>(m_ptr, "PhysFeModelDesc_t", "m_CtrlHash", true, value);
}

std::vector<CUtlString> GPhysFeModelDesc_t::GetCtrlName() const {
    CUtlVector<CUtlString>* vec = GetSchemaValue<CUtlVector<CUtlString>*>(m_ptr, "PhysFeModelDesc_t", "m_CtrlName"); std::vector<CUtlString> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetCtrlName(std::vector<CUtlString> value) {
    SetSchemaValueCUtlVector<CUtlString>(m_ptr, "PhysFeModelDesc_t", "m_CtrlName", true, value);
}

uint32_t GPhysFeModelDesc_t::GetStaticNodeFlags() const {
    return GetSchemaValue<uint32_t>(m_ptr, "PhysFeModelDesc_t", "m_nStaticNodeFlags");
}

void GPhysFeModelDesc_t::SetStaticNodeFlags(uint32_t value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nStaticNodeFlags", true, value);
}

uint32_t GPhysFeModelDesc_t::GetDynamicNodeFlags() const {
    return GetSchemaValue<uint32_t>(m_ptr, "PhysFeModelDesc_t", "m_nDynamicNodeFlags");
}

void GPhysFeModelDesc_t::SetDynamicNodeFlags(uint32_t value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nDynamicNodeFlags", true, value);
}

float GPhysFeModelDesc_t::GetLocalForce() const {
    return GetSchemaValue<float>(m_ptr, "PhysFeModelDesc_t", "m_flLocalForce");
}

void GPhysFeModelDesc_t::SetLocalForce(float value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_flLocalForce", true, value);
}

float GPhysFeModelDesc_t::GetLocalRotation() const {
    return GetSchemaValue<float>(m_ptr, "PhysFeModelDesc_t", "m_flLocalRotation");
}

void GPhysFeModelDesc_t::SetLocalRotation(float value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_flLocalRotation", true, value);
}

uint16_t GPhysFeModelDesc_t::GetNodeCount() const {
    return GetSchemaValue<uint16_t>(m_ptr, "PhysFeModelDesc_t", "m_nNodeCount");
}

void GPhysFeModelDesc_t::SetNodeCount(uint16_t value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nNodeCount", true, value);
}

uint16_t GPhysFeModelDesc_t::GetStaticNodes() const {
    return GetSchemaValue<uint16_t>(m_ptr, "PhysFeModelDesc_t", "m_nStaticNodes");
}

void GPhysFeModelDesc_t::SetStaticNodes(uint16_t value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nStaticNodes", true, value);
}

uint16_t GPhysFeModelDesc_t::GetRotLockStaticNodes() const {
    return GetSchemaValue<uint16_t>(m_ptr, "PhysFeModelDesc_t", "m_nRotLockStaticNodes");
}

void GPhysFeModelDesc_t::SetRotLockStaticNodes(uint16_t value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nRotLockStaticNodes", true, value);
}

uint16_t GPhysFeModelDesc_t::GetFirstPositionDrivenNode() const {
    return GetSchemaValue<uint16_t>(m_ptr, "PhysFeModelDesc_t", "m_nFirstPositionDrivenNode");
}

void GPhysFeModelDesc_t::SetFirstPositionDrivenNode(uint16_t value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nFirstPositionDrivenNode", true, value);
}

uint16_t GPhysFeModelDesc_t::GetSimdTriCount1() const {
    return GetSchemaValue<uint16_t>(m_ptr, "PhysFeModelDesc_t", "m_nSimdTriCount1");
}

void GPhysFeModelDesc_t::SetSimdTriCount1(uint16_t value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nSimdTriCount1", true, value);
}

uint16_t GPhysFeModelDesc_t::GetSimdTriCount2() const {
    return GetSchemaValue<uint16_t>(m_ptr, "PhysFeModelDesc_t", "m_nSimdTriCount2");
}

void GPhysFeModelDesc_t::SetSimdTriCount2(uint16_t value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nSimdTriCount2", true, value);
}

uint16_t GPhysFeModelDesc_t::GetSimdQuadCount1() const {
    return GetSchemaValue<uint16_t>(m_ptr, "PhysFeModelDesc_t", "m_nSimdQuadCount1");
}

void GPhysFeModelDesc_t::SetSimdQuadCount1(uint16_t value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nSimdQuadCount1", true, value);
}

uint16_t GPhysFeModelDesc_t::GetSimdQuadCount2() const {
    return GetSchemaValue<uint16_t>(m_ptr, "PhysFeModelDesc_t", "m_nSimdQuadCount2");
}

void GPhysFeModelDesc_t::SetSimdQuadCount2(uint16_t value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nSimdQuadCount2", true, value);
}

uint16_t GPhysFeModelDesc_t::GetQuadCount1() const {
    return GetSchemaValue<uint16_t>(m_ptr, "PhysFeModelDesc_t", "m_nQuadCount1");
}

void GPhysFeModelDesc_t::SetQuadCount1(uint16_t value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nQuadCount1", true, value);
}

uint16_t GPhysFeModelDesc_t::GetQuadCount2() const {
    return GetSchemaValue<uint16_t>(m_ptr, "PhysFeModelDesc_t", "m_nQuadCount2");
}

void GPhysFeModelDesc_t::SetQuadCount2(uint16_t value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nQuadCount2", true, value);
}

uint16_t GPhysFeModelDesc_t::GetTreeDepth() const {
    return GetSchemaValue<uint16_t>(m_ptr, "PhysFeModelDesc_t", "m_nTreeDepth");
}

void GPhysFeModelDesc_t::SetTreeDepth(uint16_t value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nTreeDepth", true, value);
}

uint16_t GPhysFeModelDesc_t::GetNodeBaseJiggleboneDependsCount() const {
    return GetSchemaValue<uint16_t>(m_ptr, "PhysFeModelDesc_t", "m_nNodeBaseJiggleboneDependsCount");
}

void GPhysFeModelDesc_t::SetNodeBaseJiggleboneDependsCount(uint16_t value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nNodeBaseJiggleboneDependsCount", true, value);
}

uint16_t GPhysFeModelDesc_t::GetRopeCount() const {
    return GetSchemaValue<uint16_t>(m_ptr, "PhysFeModelDesc_t", "m_nRopeCount");
}

void GPhysFeModelDesc_t::SetRopeCount(uint16_t value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nRopeCount", true, value);
}

std::vector<uint16> GPhysFeModelDesc_t::GetRopes() const {
    CUtlVector<uint16>* vec = GetSchemaValue<CUtlVector<uint16>*>(m_ptr, "PhysFeModelDesc_t", "m_Ropes"); std::vector<uint16> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetRopes(std::vector<uint16> value) {
    SetSchemaValueCUtlVector<uint16>(m_ptr, "PhysFeModelDesc_t", "m_Ropes", true, value);
}

std::vector<GFeNodeBase_t> GPhysFeModelDesc_t::GetNodeBases() const {
    CUtlVector<GFeNodeBase_t>* vec = GetSchemaValue<CUtlVector<GFeNodeBase_t>*>(m_ptr, "PhysFeModelDesc_t", "m_NodeBases"); std::vector<GFeNodeBase_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetNodeBases(std::vector<GFeNodeBase_t> value) {
    SetSchemaValueCUtlVector<GFeNodeBase_t>(m_ptr, "PhysFeModelDesc_t", "m_NodeBases", true, value);
}

std::vector<GFeSimdNodeBase_t> GPhysFeModelDesc_t::GetSimdNodeBases() const {
    CUtlVector<GFeSimdNodeBase_t>* vec = GetSchemaValue<CUtlVector<GFeSimdNodeBase_t>*>(m_ptr, "PhysFeModelDesc_t", "m_SimdNodeBases"); std::vector<GFeSimdNodeBase_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetSimdNodeBases(std::vector<GFeSimdNodeBase_t> value) {
    SetSchemaValueCUtlVector<GFeSimdNodeBase_t>(m_ptr, "PhysFeModelDesc_t", "m_SimdNodeBases", true, value);
}

std::vector<GFeQuad_t> GPhysFeModelDesc_t::GetQuads() const {
    CUtlVector<GFeQuad_t>* vec = GetSchemaValue<CUtlVector<GFeQuad_t>*>(m_ptr, "PhysFeModelDesc_t", "m_Quads"); std::vector<GFeQuad_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetQuads(std::vector<GFeQuad_t> value) {
    SetSchemaValueCUtlVector<GFeQuad_t>(m_ptr, "PhysFeModelDesc_t", "m_Quads", true, value);
}

std::vector<GFeSimdQuad_t> GPhysFeModelDesc_t::GetSimdQuads() const {
    CUtlVector<GFeSimdQuad_t>* vec = GetSchemaValue<CUtlVector<GFeSimdQuad_t>*>(m_ptr, "PhysFeModelDesc_t", "m_SimdQuads"); std::vector<GFeSimdQuad_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetSimdQuads(std::vector<GFeSimdQuad_t> value) {
    SetSchemaValueCUtlVector<GFeSimdQuad_t>(m_ptr, "PhysFeModelDesc_t", "m_SimdQuads", true, value);
}

std::vector<GFeSimdTri_t> GPhysFeModelDesc_t::GetSimdTris() const {
    CUtlVector<GFeSimdTri_t>* vec = GetSchemaValue<CUtlVector<GFeSimdTri_t>*>(m_ptr, "PhysFeModelDesc_t", "m_SimdTris"); std::vector<GFeSimdTri_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetSimdTris(std::vector<GFeSimdTri_t> value) {
    SetSchemaValueCUtlVector<GFeSimdTri_t>(m_ptr, "PhysFeModelDesc_t", "m_SimdTris", true, value);
}

std::vector<GFeSimdRodConstraint_t> GPhysFeModelDesc_t::GetSimdRods() const {
    CUtlVector<GFeSimdRodConstraint_t>* vec = GetSchemaValue<CUtlVector<GFeSimdRodConstraint_t>*>(m_ptr, "PhysFeModelDesc_t", "m_SimdRods"); std::vector<GFeSimdRodConstraint_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetSimdRods(std::vector<GFeSimdRodConstraint_t> value) {
    SetSchemaValueCUtlVector<GFeSimdRodConstraint_t>(m_ptr, "PhysFeModelDesc_t", "m_SimdRods", true, value);
}

std::vector<GFeSimdRodConstraintAnim_t> GPhysFeModelDesc_t::GetSimdRodsAnim() const {
    CUtlVector<GFeSimdRodConstraintAnim_t>* vec = GetSchemaValue<CUtlVector<GFeSimdRodConstraintAnim_t>*>(m_ptr, "PhysFeModelDesc_t", "m_SimdRodsAnim"); std::vector<GFeSimdRodConstraintAnim_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetSimdRodsAnim(std::vector<GFeSimdRodConstraintAnim_t> value) {
    SetSchemaValueCUtlVector<GFeSimdRodConstraintAnim_t>(m_ptr, "PhysFeModelDesc_t", "m_SimdRodsAnim", true, value);
}

std::vector<GFeRodConstraint_t> GPhysFeModelDesc_t::GetRods() const {
    CUtlVector<GFeRodConstraint_t>* vec = GetSchemaValue<CUtlVector<GFeRodConstraint_t>*>(m_ptr, "PhysFeModelDesc_t", "m_Rods"); std::vector<GFeRodConstraint_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetRods(std::vector<GFeRodConstraint_t> value) {
    SetSchemaValueCUtlVector<GFeRodConstraint_t>(m_ptr, "PhysFeModelDesc_t", "m_Rods", true, value);
}

std::vector<GFeTwistConstraint_t> GPhysFeModelDesc_t::GetTwists() const {
    CUtlVector<GFeTwistConstraint_t>* vec = GetSchemaValue<CUtlVector<GFeTwistConstraint_t>*>(m_ptr, "PhysFeModelDesc_t", "m_Twists"); std::vector<GFeTwistConstraint_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetTwists(std::vector<GFeTwistConstraint_t> value) {
    SetSchemaValueCUtlVector<GFeTwistConstraint_t>(m_ptr, "PhysFeModelDesc_t", "m_Twists", true, value);
}

std::vector<GFeAxialEdgeBend_t> GPhysFeModelDesc_t::GetAxialEdges() const {
    CUtlVector<GFeAxialEdgeBend_t>* vec = GetSchemaValue<CUtlVector<GFeAxialEdgeBend_t>*>(m_ptr, "PhysFeModelDesc_t", "m_AxialEdges"); std::vector<GFeAxialEdgeBend_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetAxialEdges(std::vector<GFeAxialEdgeBend_t> value) {
    SetSchemaValueCUtlVector<GFeAxialEdgeBend_t>(m_ptr, "PhysFeModelDesc_t", "m_AxialEdges", true, value);
}

std::vector<float32> GPhysFeModelDesc_t::GetNodeInvMasses() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "PhysFeModelDesc_t", "m_NodeInvMasses"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetNodeInvMasses(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "PhysFeModelDesc_t", "m_NodeInvMasses", true, value);
}

std::vector<GFeCtrlOffset_t> GPhysFeModelDesc_t::GetCtrlOffsets() const {
    CUtlVector<GFeCtrlOffset_t>* vec = GetSchemaValue<CUtlVector<GFeCtrlOffset_t>*>(m_ptr, "PhysFeModelDesc_t", "m_CtrlOffsets"); std::vector<GFeCtrlOffset_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetCtrlOffsets(std::vector<GFeCtrlOffset_t> value) {
    SetSchemaValueCUtlVector<GFeCtrlOffset_t>(m_ptr, "PhysFeModelDesc_t", "m_CtrlOffsets", true, value);
}

std::vector<GFeCtrlOsOffset_t> GPhysFeModelDesc_t::GetCtrlOsOffsets() const {
    CUtlVector<GFeCtrlOsOffset_t>* vec = GetSchemaValue<CUtlVector<GFeCtrlOsOffset_t>*>(m_ptr, "PhysFeModelDesc_t", "m_CtrlOsOffsets"); std::vector<GFeCtrlOsOffset_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetCtrlOsOffsets(std::vector<GFeCtrlOsOffset_t> value) {
    SetSchemaValueCUtlVector<GFeCtrlOsOffset_t>(m_ptr, "PhysFeModelDesc_t", "m_CtrlOsOffsets", true, value);
}

std::vector<GFeFollowNode_t> GPhysFeModelDesc_t::GetFollowNodes() const {
    CUtlVector<GFeFollowNode_t>* vec = GetSchemaValue<CUtlVector<GFeFollowNode_t>*>(m_ptr, "PhysFeModelDesc_t", "m_FollowNodes"); std::vector<GFeFollowNode_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetFollowNodes(std::vector<GFeFollowNode_t> value) {
    SetSchemaValueCUtlVector<GFeFollowNode_t>(m_ptr, "PhysFeModelDesc_t", "m_FollowNodes", true, value);
}

std::vector<GFeCollisionPlane_t> GPhysFeModelDesc_t::GetCollisionPlanes() const {
    CUtlVector<GFeCollisionPlane_t>* vec = GetSchemaValue<CUtlVector<GFeCollisionPlane_t>*>(m_ptr, "PhysFeModelDesc_t", "m_CollisionPlanes"); std::vector<GFeCollisionPlane_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetCollisionPlanes(std::vector<GFeCollisionPlane_t> value) {
    SetSchemaValueCUtlVector<GFeCollisionPlane_t>(m_ptr, "PhysFeModelDesc_t", "m_CollisionPlanes", true, value);
}

std::vector<GFeNodeIntegrator_t> GPhysFeModelDesc_t::GetNodeIntegrator() const {
    CUtlVector<GFeNodeIntegrator_t>* vec = GetSchemaValue<CUtlVector<GFeNodeIntegrator_t>*>(m_ptr, "PhysFeModelDesc_t", "m_NodeIntegrator"); std::vector<GFeNodeIntegrator_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetNodeIntegrator(std::vector<GFeNodeIntegrator_t> value) {
    SetSchemaValueCUtlVector<GFeNodeIntegrator_t>(m_ptr, "PhysFeModelDesc_t", "m_NodeIntegrator", true, value);
}

std::vector<GFeSpringIntegrator_t> GPhysFeModelDesc_t::GetSpringIntegrator() const {
    CUtlVector<GFeSpringIntegrator_t>* vec = GetSchemaValue<CUtlVector<GFeSpringIntegrator_t>*>(m_ptr, "PhysFeModelDesc_t", "m_SpringIntegrator"); std::vector<GFeSpringIntegrator_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetSpringIntegrator(std::vector<GFeSpringIntegrator_t> value) {
    SetSchemaValueCUtlVector<GFeSpringIntegrator_t>(m_ptr, "PhysFeModelDesc_t", "m_SpringIntegrator", true, value);
}

std::vector<GFeSimdSpringIntegrator_t> GPhysFeModelDesc_t::GetSimdSpringIntegrator() const {
    CUtlVector<GFeSimdSpringIntegrator_t>* vec = GetSchemaValue<CUtlVector<GFeSimdSpringIntegrator_t>*>(m_ptr, "PhysFeModelDesc_t", "m_SimdSpringIntegrator"); std::vector<GFeSimdSpringIntegrator_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetSimdSpringIntegrator(std::vector<GFeSimdSpringIntegrator_t> value) {
    SetSchemaValueCUtlVector<GFeSimdSpringIntegrator_t>(m_ptr, "PhysFeModelDesc_t", "m_SimdSpringIntegrator", true, value);
}

std::vector<GFeWorldCollisionParams_t> GPhysFeModelDesc_t::GetWorldCollisionParams() const {
    CUtlVector<GFeWorldCollisionParams_t>* vec = GetSchemaValue<CUtlVector<GFeWorldCollisionParams_t>*>(m_ptr, "PhysFeModelDesc_t", "m_WorldCollisionParams"); std::vector<GFeWorldCollisionParams_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetWorldCollisionParams(std::vector<GFeWorldCollisionParams_t> value) {
    SetSchemaValueCUtlVector<GFeWorldCollisionParams_t>(m_ptr, "PhysFeModelDesc_t", "m_WorldCollisionParams", true, value);
}

std::vector<float32> GPhysFeModelDesc_t::GetLegacyStretchForce() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "PhysFeModelDesc_t", "m_LegacyStretchForce"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetLegacyStretchForce(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "PhysFeModelDesc_t", "m_LegacyStretchForce", true, value);
}

std::vector<float32> GPhysFeModelDesc_t::GetNodeCollisionRadii() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "PhysFeModelDesc_t", "m_NodeCollisionRadii"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetNodeCollisionRadii(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "PhysFeModelDesc_t", "m_NodeCollisionRadii", true, value);
}

std::vector<float32> GPhysFeModelDesc_t::GetDynNodeFriction() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "PhysFeModelDesc_t", "m_DynNodeFriction"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetDynNodeFriction(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "PhysFeModelDesc_t", "m_DynNodeFriction", true, value);
}

std::vector<float32> GPhysFeModelDesc_t::GetLocalRotation1() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "PhysFeModelDesc_t", "m_LocalRotation"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetLocalRotation1(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "PhysFeModelDesc_t", "m_LocalRotation", true, value);
}

std::vector<float32> GPhysFeModelDesc_t::GetLocalForce1() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "PhysFeModelDesc_t", "m_LocalForce"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetLocalForce1(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "PhysFeModelDesc_t", "m_LocalForce", true, value);
}

std::vector<GFeTaperedCapsuleStretch_t> GPhysFeModelDesc_t::GetTaperedCapsuleStretches() const {
    CUtlVector<GFeTaperedCapsuleStretch_t>* vec = GetSchemaValue<CUtlVector<GFeTaperedCapsuleStretch_t>*>(m_ptr, "PhysFeModelDesc_t", "m_TaperedCapsuleStretches"); std::vector<GFeTaperedCapsuleStretch_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetTaperedCapsuleStretches(std::vector<GFeTaperedCapsuleStretch_t> value) {
    SetSchemaValueCUtlVector<GFeTaperedCapsuleStretch_t>(m_ptr, "PhysFeModelDesc_t", "m_TaperedCapsuleStretches", true, value);
}

std::vector<GFeTaperedCapsuleRigid_t> GPhysFeModelDesc_t::GetTaperedCapsuleRigids() const {
    CUtlVector<GFeTaperedCapsuleRigid_t>* vec = GetSchemaValue<CUtlVector<GFeTaperedCapsuleRigid_t>*>(m_ptr, "PhysFeModelDesc_t", "m_TaperedCapsuleRigids"); std::vector<GFeTaperedCapsuleRigid_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetTaperedCapsuleRigids(std::vector<GFeTaperedCapsuleRigid_t> value) {
    SetSchemaValueCUtlVector<GFeTaperedCapsuleRigid_t>(m_ptr, "PhysFeModelDesc_t", "m_TaperedCapsuleRigids", true, value);
}

std::vector<GFeSphereRigid_t> GPhysFeModelDesc_t::GetSphereRigids() const {
    CUtlVector<GFeSphereRigid_t>* vec = GetSchemaValue<CUtlVector<GFeSphereRigid_t>*>(m_ptr, "PhysFeModelDesc_t", "m_SphereRigids"); std::vector<GFeSphereRigid_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetSphereRigids(std::vector<GFeSphereRigid_t> value) {
    SetSchemaValueCUtlVector<GFeSphereRigid_t>(m_ptr, "PhysFeModelDesc_t", "m_SphereRigids", true, value);
}

std::vector<uint16> GPhysFeModelDesc_t::GetWorldCollisionNodes() const {
    CUtlVector<uint16>* vec = GetSchemaValue<CUtlVector<uint16>*>(m_ptr, "PhysFeModelDesc_t", "m_WorldCollisionNodes"); std::vector<uint16> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetWorldCollisionNodes(std::vector<uint16> value) {
    SetSchemaValueCUtlVector<uint16>(m_ptr, "PhysFeModelDesc_t", "m_WorldCollisionNodes", true, value);
}

std::vector<uint16> GPhysFeModelDesc_t::GetTreeParents() const {
    CUtlVector<uint16>* vec = GetSchemaValue<CUtlVector<uint16>*>(m_ptr, "PhysFeModelDesc_t", "m_TreeParents"); std::vector<uint16> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetTreeParents(std::vector<uint16> value) {
    SetSchemaValueCUtlVector<uint16>(m_ptr, "PhysFeModelDesc_t", "m_TreeParents", true, value);
}

std::vector<uint16> GPhysFeModelDesc_t::GetTreeCollisionMasks() const {
    CUtlVector<uint16>* vec = GetSchemaValue<CUtlVector<uint16>*>(m_ptr, "PhysFeModelDesc_t", "m_TreeCollisionMasks"); std::vector<uint16> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetTreeCollisionMasks(std::vector<uint16> value) {
    SetSchemaValueCUtlVector<uint16>(m_ptr, "PhysFeModelDesc_t", "m_TreeCollisionMasks", true, value);
}

std::vector<GFeTreeChildren_t> GPhysFeModelDesc_t::GetTreeChildren() const {
    CUtlVector<GFeTreeChildren_t>* vec = GetSchemaValue<CUtlVector<GFeTreeChildren_t>*>(m_ptr, "PhysFeModelDesc_t", "m_TreeChildren"); std::vector<GFeTreeChildren_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetTreeChildren(std::vector<GFeTreeChildren_t> value) {
    SetSchemaValueCUtlVector<GFeTreeChildren_t>(m_ptr, "PhysFeModelDesc_t", "m_TreeChildren", true, value);
}

std::vector<uint16> GPhysFeModelDesc_t::GetFreeNodes() const {
    CUtlVector<uint16>* vec = GetSchemaValue<CUtlVector<uint16>*>(m_ptr, "PhysFeModelDesc_t", "m_FreeNodes"); std::vector<uint16> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetFreeNodes(std::vector<uint16> value) {
    SetSchemaValueCUtlVector<uint16>(m_ptr, "PhysFeModelDesc_t", "m_FreeNodes", true, value);
}

std::vector<GFeFitMatrix_t> GPhysFeModelDesc_t::GetFitMatrices() const {
    CUtlVector<GFeFitMatrix_t>* vec = GetSchemaValue<CUtlVector<GFeFitMatrix_t>*>(m_ptr, "PhysFeModelDesc_t", "m_FitMatrices"); std::vector<GFeFitMatrix_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetFitMatrices(std::vector<GFeFitMatrix_t> value) {
    SetSchemaValueCUtlVector<GFeFitMatrix_t>(m_ptr, "PhysFeModelDesc_t", "m_FitMatrices", true, value);
}

std::vector<GFeFitWeight_t> GPhysFeModelDesc_t::GetFitWeights() const {
    CUtlVector<GFeFitWeight_t>* vec = GetSchemaValue<CUtlVector<GFeFitWeight_t>*>(m_ptr, "PhysFeModelDesc_t", "m_FitWeights"); std::vector<GFeFitWeight_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetFitWeights(std::vector<GFeFitWeight_t> value) {
    SetSchemaValueCUtlVector<GFeFitWeight_t>(m_ptr, "PhysFeModelDesc_t", "m_FitWeights", true, value);
}

std::vector<GFeNodeReverseOffset_t> GPhysFeModelDesc_t::GetReverseOffsets() const {
    CUtlVector<GFeNodeReverseOffset_t>* vec = GetSchemaValue<CUtlVector<GFeNodeReverseOffset_t>*>(m_ptr, "PhysFeModelDesc_t", "m_ReverseOffsets"); std::vector<GFeNodeReverseOffset_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetReverseOffsets(std::vector<GFeNodeReverseOffset_t> value) {
    SetSchemaValueCUtlVector<GFeNodeReverseOffset_t>(m_ptr, "PhysFeModelDesc_t", "m_ReverseOffsets", true, value);
}

std::vector<GFeAnimStrayRadius_t> GPhysFeModelDesc_t::GetAnimStrayRadii() const {
    CUtlVector<GFeAnimStrayRadius_t>* vec = GetSchemaValue<CUtlVector<GFeAnimStrayRadius_t>*>(m_ptr, "PhysFeModelDesc_t", "m_AnimStrayRadii"); std::vector<GFeAnimStrayRadius_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetAnimStrayRadii(std::vector<GFeAnimStrayRadius_t> value) {
    SetSchemaValueCUtlVector<GFeAnimStrayRadius_t>(m_ptr, "PhysFeModelDesc_t", "m_AnimStrayRadii", true, value);
}

std::vector<GFeSimdAnimStrayRadius_t> GPhysFeModelDesc_t::GetSimdAnimStrayRadii() const {
    CUtlVector<GFeSimdAnimStrayRadius_t>* vec = GetSchemaValue<CUtlVector<GFeSimdAnimStrayRadius_t>*>(m_ptr, "PhysFeModelDesc_t", "m_SimdAnimStrayRadii"); std::vector<GFeSimdAnimStrayRadius_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetSimdAnimStrayRadii(std::vector<GFeSimdAnimStrayRadius_t> value) {
    SetSchemaValueCUtlVector<GFeSimdAnimStrayRadius_t>(m_ptr, "PhysFeModelDesc_t", "m_SimdAnimStrayRadii", true, value);
}

std::vector<GFeKelagerBend2_t> GPhysFeModelDesc_t::GetKelagerBends() const {
    CUtlVector<GFeKelagerBend2_t>* vec = GetSchemaValue<CUtlVector<GFeKelagerBend2_t>*>(m_ptr, "PhysFeModelDesc_t", "m_KelagerBends"); std::vector<GFeKelagerBend2_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetKelagerBends(std::vector<GFeKelagerBend2_t> value) {
    SetSchemaValueCUtlVector<GFeKelagerBend2_t>(m_ptr, "PhysFeModelDesc_t", "m_KelagerBends", true, value);
}

std::vector<GFeCtrlSoftOffset_t> GPhysFeModelDesc_t::GetCtrlSoftOffsets() const {
    CUtlVector<GFeCtrlSoftOffset_t>* vec = GetSchemaValue<CUtlVector<GFeCtrlSoftOffset_t>*>(m_ptr, "PhysFeModelDesc_t", "m_CtrlSoftOffsets"); std::vector<GFeCtrlSoftOffset_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetCtrlSoftOffsets(std::vector<GFeCtrlSoftOffset_t> value) {
    SetSchemaValueCUtlVector<GFeCtrlSoftOffset_t>(m_ptr, "PhysFeModelDesc_t", "m_CtrlSoftOffsets", true, value);
}

std::vector<GCFeIndexedJiggleBone> GPhysFeModelDesc_t::GetJiggleBones() const {
    CUtlVector<GCFeIndexedJiggleBone>* vec = GetSchemaValue<CUtlVector<GCFeIndexedJiggleBone>*>(m_ptr, "PhysFeModelDesc_t", "m_JiggleBones"); std::vector<GCFeIndexedJiggleBone> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetJiggleBones(std::vector<GCFeIndexedJiggleBone> value) {
    SetSchemaValueCUtlVector<GCFeIndexedJiggleBone>(m_ptr, "PhysFeModelDesc_t", "m_JiggleBones", true, value);
}

std::vector<uint16> GPhysFeModelDesc_t::GetSourceElems() const {
    CUtlVector<uint16>* vec = GetSchemaValue<CUtlVector<uint16>*>(m_ptr, "PhysFeModelDesc_t", "m_SourceElems"); std::vector<uint16> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetSourceElems(std::vector<uint16> value) {
    SetSchemaValueCUtlVector<uint16>(m_ptr, "PhysFeModelDesc_t", "m_SourceElems", true, value);
}

std::vector<uint32> GPhysFeModelDesc_t::GetGoalDampedSpringIntegrators() const {
    CUtlVector<uint32>* vec = GetSchemaValue<CUtlVector<uint32>*>(m_ptr, "PhysFeModelDesc_t", "m_GoalDampedSpringIntegrators"); std::vector<uint32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetGoalDampedSpringIntegrators(std::vector<uint32> value) {
    SetSchemaValueCUtlVector<uint32>(m_ptr, "PhysFeModelDesc_t", "m_GoalDampedSpringIntegrators", true, value);
}

std::vector<GFeTri_t> GPhysFeModelDesc_t::GetTris() const {
    CUtlVector<GFeTri_t>* vec = GetSchemaValue<CUtlVector<GFeTri_t>*>(m_ptr, "PhysFeModelDesc_t", "m_Tris"); std::vector<GFeTri_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetTris(std::vector<GFeTri_t> value) {
    SetSchemaValueCUtlVector<GFeTri_t>(m_ptr, "PhysFeModelDesc_t", "m_Tris", true, value);
}

uint16_t GPhysFeModelDesc_t::GetTriCount1() const {
    return GetSchemaValue<uint16_t>(m_ptr, "PhysFeModelDesc_t", "m_nTriCount1");
}

void GPhysFeModelDesc_t::SetTriCount1(uint16_t value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nTriCount1", true, value);
}

uint16_t GPhysFeModelDesc_t::GetTriCount2() const {
    return GetSchemaValue<uint16_t>(m_ptr, "PhysFeModelDesc_t", "m_nTriCount2");
}

void GPhysFeModelDesc_t::SetTriCount2(uint16_t value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nTriCount2", true, value);
}

uint8_t GPhysFeModelDesc_t::GetReservedUint8() const {
    return GetSchemaValue<uint8_t>(m_ptr, "PhysFeModelDesc_t", "m_nReservedUint8");
}

void GPhysFeModelDesc_t::SetReservedUint8(uint8_t value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nReservedUint8", true, value);
}

uint8_t GPhysFeModelDesc_t::GetExtraPressureIterations() const {
    return GetSchemaValue<uint8_t>(m_ptr, "PhysFeModelDesc_t", "m_nExtraPressureIterations");
}

void GPhysFeModelDesc_t::SetExtraPressureIterations(uint8_t value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nExtraPressureIterations", true, value);
}

uint8_t GPhysFeModelDesc_t::GetExtraGoalIterations() const {
    return GetSchemaValue<uint8_t>(m_ptr, "PhysFeModelDesc_t", "m_nExtraGoalIterations");
}

void GPhysFeModelDesc_t::SetExtraGoalIterations(uint8_t value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nExtraGoalIterations", true, value);
}

uint8_t GPhysFeModelDesc_t::GetExtraIterations() const {
    return GetSchemaValue<uint8_t>(m_ptr, "PhysFeModelDesc_t", "m_nExtraIterations");
}

void GPhysFeModelDesc_t::SetExtraIterations(uint8_t value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nExtraIterations", true, value);
}

std::vector<GFeBoxRigid_t> GPhysFeModelDesc_t::GetBoxRigids() const {
    CUtlVector<GFeBoxRigid_t>* vec = GetSchemaValue<CUtlVector<GFeBoxRigid_t>*>(m_ptr, "PhysFeModelDesc_t", "m_BoxRigids"); std::vector<GFeBoxRigid_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetBoxRigids(std::vector<GFeBoxRigid_t> value) {
    SetSchemaValueCUtlVector<GFeBoxRigid_t>(m_ptr, "PhysFeModelDesc_t", "m_BoxRigids", true, value);
}

std::vector<uint8> GPhysFeModelDesc_t::GetDynNodeVertexSet() const {
    CUtlVector<uint8>* vec = GetSchemaValue<CUtlVector<uint8>*>(m_ptr, "PhysFeModelDesc_t", "m_DynNodeVertexSet"); std::vector<uint8> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetDynNodeVertexSet(std::vector<uint8> value) {
    SetSchemaValueCUtlVector<uint8>(m_ptr, "PhysFeModelDesc_t", "m_DynNodeVertexSet", true, value);
}

std::vector<uint32> GPhysFeModelDesc_t::GetVertexSetNames() const {
    CUtlVector<uint32>* vec = GetSchemaValue<CUtlVector<uint32>*>(m_ptr, "PhysFeModelDesc_t", "m_VertexSetNames"); std::vector<uint32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetVertexSetNames(std::vector<uint32> value) {
    SetSchemaValueCUtlVector<uint32>(m_ptr, "PhysFeModelDesc_t", "m_VertexSetNames", true, value);
}

std::vector<GFeRigidColliderIndices_t> GPhysFeModelDesc_t::GetRigidColliderPriorities() const {
    CUtlVector<GFeRigidColliderIndices_t>* vec = GetSchemaValue<CUtlVector<GFeRigidColliderIndices_t>*>(m_ptr, "PhysFeModelDesc_t", "m_RigidColliderPriorities"); std::vector<GFeRigidColliderIndices_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetRigidColliderPriorities(std::vector<GFeRigidColliderIndices_t> value) {
    SetSchemaValueCUtlVector<GFeRigidColliderIndices_t>(m_ptr, "PhysFeModelDesc_t", "m_RigidColliderPriorities", true, value);
}

std::vector<GFeMorphLayerDepr_t> GPhysFeModelDesc_t::GetMorphLayers() const {
    CUtlVector<GFeMorphLayerDepr_t>* vec = GetSchemaValue<CUtlVector<GFeMorphLayerDepr_t>*>(m_ptr, "PhysFeModelDesc_t", "m_MorphLayers"); std::vector<GFeMorphLayerDepr_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetMorphLayers(std::vector<GFeMorphLayerDepr_t> value) {
    SetSchemaValueCUtlVector<GFeMorphLayerDepr_t>(m_ptr, "PhysFeModelDesc_t", "m_MorphLayers", true, value);
}

std::vector<uint8> GPhysFeModelDesc_t::GetMorphSetData() const {
    CUtlVector<uint8>* vec = GetSchemaValue<CUtlVector<uint8>*>(m_ptr, "PhysFeModelDesc_t", "m_MorphSetData"); std::vector<uint8> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetMorphSetData(std::vector<uint8> value) {
    SetSchemaValueCUtlVector<uint8>(m_ptr, "PhysFeModelDesc_t", "m_MorphSetData", true, value);
}

std::vector<GFeVertexMapDesc_t> GPhysFeModelDesc_t::GetVertexMaps() const {
    CUtlVector<GFeVertexMapDesc_t>* vec = GetSchemaValue<CUtlVector<GFeVertexMapDesc_t>*>(m_ptr, "PhysFeModelDesc_t", "m_VertexMaps"); std::vector<GFeVertexMapDesc_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetVertexMaps(std::vector<GFeVertexMapDesc_t> value) {
    SetSchemaValueCUtlVector<GFeVertexMapDesc_t>(m_ptr, "PhysFeModelDesc_t", "m_VertexMaps", true, value);
}

std::vector<uint8> GPhysFeModelDesc_t::GetVertexMapValues() const {
    CUtlVector<uint8>* vec = GetSchemaValue<CUtlVector<uint8>*>(m_ptr, "PhysFeModelDesc_t", "m_VertexMapValues"); std::vector<uint8> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetVertexMapValues(std::vector<uint8> value) {
    SetSchemaValueCUtlVector<uint8>(m_ptr, "PhysFeModelDesc_t", "m_VertexMapValues", true, value);
}

std::vector<GFeEffectDesc_t> GPhysFeModelDesc_t::GetEffects() const {
    CUtlVector<GFeEffectDesc_t>* vec = GetSchemaValue<CUtlVector<GFeEffectDesc_t>*>(m_ptr, "PhysFeModelDesc_t", "m_Effects"); std::vector<GFeEffectDesc_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetEffects(std::vector<GFeEffectDesc_t> value) {
    SetSchemaValueCUtlVector<GFeEffectDesc_t>(m_ptr, "PhysFeModelDesc_t", "m_Effects", true, value);
}

std::vector<GFeCtrlOffset_t> GPhysFeModelDesc_t::GetLockToParent() const {
    CUtlVector<GFeCtrlOffset_t>* vec = GetSchemaValue<CUtlVector<GFeCtrlOffset_t>*>(m_ptr, "PhysFeModelDesc_t", "m_LockToParent"); std::vector<GFeCtrlOffset_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetLockToParent(std::vector<GFeCtrlOffset_t> value) {
    SetSchemaValueCUtlVector<GFeCtrlOffset_t>(m_ptr, "PhysFeModelDesc_t", "m_LockToParent", true, value);
}

std::vector<uint16> GPhysFeModelDesc_t::GetLockToGoal() const {
    CUtlVector<uint16>* vec = GetSchemaValue<CUtlVector<uint16>*>(m_ptr, "PhysFeModelDesc_t", "m_LockToGoal"); std::vector<uint16> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetLockToGoal(std::vector<uint16> value) {
    SetSchemaValueCUtlVector<uint16>(m_ptr, "PhysFeModelDesc_t", "m_LockToGoal", true, value);
}

std::vector<int16> GPhysFeModelDesc_t::GetSkelParents() const {
    CUtlVector<int16>* vec = GetSchemaValue<CUtlVector<int16>*>(m_ptr, "PhysFeModelDesc_t", "m_SkelParents"); std::vector<int16> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetSkelParents(std::vector<int16> value) {
    SetSchemaValueCUtlVector<int16>(m_ptr, "PhysFeModelDesc_t", "m_SkelParents", true, value);
}

std::vector<GFeNodeWindBase_t> GPhysFeModelDesc_t::GetDynNodeWindBases() const {
    CUtlVector<GFeNodeWindBase_t>* vec = GetSchemaValue<CUtlVector<GFeNodeWindBase_t>*>(m_ptr, "PhysFeModelDesc_t", "m_DynNodeWindBases"); std::vector<GFeNodeWindBase_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysFeModelDesc_t::SetDynNodeWindBases(std::vector<GFeNodeWindBase_t> value) {
    SetSchemaValueCUtlVector<GFeNodeWindBase_t>(m_ptr, "PhysFeModelDesc_t", "m_DynNodeWindBases", true, value);
}

float GPhysFeModelDesc_t::GetInternalPressure() const {
    return GetSchemaValue<float>(m_ptr, "PhysFeModelDesc_t", "m_flInternalPressure");
}

void GPhysFeModelDesc_t::SetInternalPressure(float value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_flInternalPressure", true, value);
}

float GPhysFeModelDesc_t::GetDefaultTimeDilation() const {
    return GetSchemaValue<float>(m_ptr, "PhysFeModelDesc_t", "m_flDefaultTimeDilation");
}

void GPhysFeModelDesc_t::SetDefaultTimeDilation(float value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_flDefaultTimeDilation", true, value);
}

float GPhysFeModelDesc_t::GetWindage() const {
    return GetSchemaValue<float>(m_ptr, "PhysFeModelDesc_t", "m_flWindage");
}

void GPhysFeModelDesc_t::SetWindage(float value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_flWindage", true, value);
}

float GPhysFeModelDesc_t::GetWindDrag() const {
    return GetSchemaValue<float>(m_ptr, "PhysFeModelDesc_t", "m_flWindDrag");
}

void GPhysFeModelDesc_t::SetWindDrag(float value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_flWindDrag", true, value);
}

float GPhysFeModelDesc_t::GetDefaultSurfaceStretch() const {
    return GetSchemaValue<float>(m_ptr, "PhysFeModelDesc_t", "m_flDefaultSurfaceStretch");
}

void GPhysFeModelDesc_t::SetDefaultSurfaceStretch(float value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_flDefaultSurfaceStretch", true, value);
}

float GPhysFeModelDesc_t::GetDefaultThreadStretch() const {
    return GetSchemaValue<float>(m_ptr, "PhysFeModelDesc_t", "m_flDefaultThreadStretch");
}

void GPhysFeModelDesc_t::SetDefaultThreadStretch(float value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_flDefaultThreadStretch", true, value);
}

float GPhysFeModelDesc_t::GetDefaultGravityScale() const {
    return GetSchemaValue<float>(m_ptr, "PhysFeModelDesc_t", "m_flDefaultGravityScale");
}

void GPhysFeModelDesc_t::SetDefaultGravityScale(float value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_flDefaultGravityScale", true, value);
}

float GPhysFeModelDesc_t::GetDefaultVelAirDrag() const {
    return GetSchemaValue<float>(m_ptr, "PhysFeModelDesc_t", "m_flDefaultVelAirDrag");
}

void GPhysFeModelDesc_t::SetDefaultVelAirDrag(float value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_flDefaultVelAirDrag", true, value);
}

float GPhysFeModelDesc_t::GetDefaultExpAirDrag() const {
    return GetSchemaValue<float>(m_ptr, "PhysFeModelDesc_t", "m_flDefaultExpAirDrag");
}

void GPhysFeModelDesc_t::SetDefaultExpAirDrag(float value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_flDefaultExpAirDrag", true, value);
}

float GPhysFeModelDesc_t::GetDefaultVelQuadAirDrag() const {
    return GetSchemaValue<float>(m_ptr, "PhysFeModelDesc_t", "m_flDefaultVelQuadAirDrag");
}

void GPhysFeModelDesc_t::SetDefaultVelQuadAirDrag(float value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_flDefaultVelQuadAirDrag", true, value);
}

float GPhysFeModelDesc_t::GetDefaultExpQuadAirDrag() const {
    return GetSchemaValue<float>(m_ptr, "PhysFeModelDesc_t", "m_flDefaultExpQuadAirDrag");
}

void GPhysFeModelDesc_t::SetDefaultExpQuadAirDrag(float value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_flDefaultExpQuadAirDrag", true, value);
}

float GPhysFeModelDesc_t::GetRodVelocitySmoothRate() const {
    return GetSchemaValue<float>(m_ptr, "PhysFeModelDesc_t", "m_flRodVelocitySmoothRate");
}

void GPhysFeModelDesc_t::SetRodVelocitySmoothRate(float value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_flRodVelocitySmoothRate", true, value);
}

float GPhysFeModelDesc_t::GetQuadVelocitySmoothRate() const {
    return GetSchemaValue<float>(m_ptr, "PhysFeModelDesc_t", "m_flQuadVelocitySmoothRate");
}

void GPhysFeModelDesc_t::SetQuadVelocitySmoothRate(float value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_flQuadVelocitySmoothRate", true, value);
}

float GPhysFeModelDesc_t::GetAddWorldCollisionRadius() const {
    return GetSchemaValue<float>(m_ptr, "PhysFeModelDesc_t", "m_flAddWorldCollisionRadius");
}

void GPhysFeModelDesc_t::SetAddWorldCollisionRadius(float value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_flAddWorldCollisionRadius", true, value);
}

float GPhysFeModelDesc_t::GetDefaultVolumetricSolveAmount() const {
    return GetSchemaValue<float>(m_ptr, "PhysFeModelDesc_t", "m_flDefaultVolumetricSolveAmount");
}

void GPhysFeModelDesc_t::SetDefaultVolumetricSolveAmount(float value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_flDefaultVolumetricSolveAmount", true, value);
}

float GPhysFeModelDesc_t::GetMotionSmoothCDT() const {
    return GetSchemaValue<float>(m_ptr, "PhysFeModelDesc_t", "m_flMotionSmoothCDT");
}

void GPhysFeModelDesc_t::SetMotionSmoothCDT(float value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_flMotionSmoothCDT", true, value);
}

uint16_t GPhysFeModelDesc_t::GetRodVelocitySmoothIterations() const {
    return GetSchemaValue<uint16_t>(m_ptr, "PhysFeModelDesc_t", "m_nRodVelocitySmoothIterations");
}

void GPhysFeModelDesc_t::SetRodVelocitySmoothIterations(uint16_t value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nRodVelocitySmoothIterations", true, value);
}

uint16_t GPhysFeModelDesc_t::GetQuadVelocitySmoothIterations() const {
    return GetSchemaValue<uint16_t>(m_ptr, "PhysFeModelDesc_t", "m_nQuadVelocitySmoothIterations");
}

void GPhysFeModelDesc_t::SetQuadVelocitySmoothIterations(uint16_t value) {
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nQuadVelocitySmoothIterations", true, value);
}

std::string GPhysFeModelDesc_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GPhysFeModelDesc_t::IsValid() {
    return (m_ptr != nullptr);
}

GCCycleBase::GCCycleBase(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCycleBase::GCCycleBase(void *ptr) {
    m_ptr = ptr;
}

float GCCycleBase::GetCycle() const {
    return GetSchemaValue<float>(m_ptr, "CCycleBase", "m_flCycle");
}

void GCCycleBase::SetCycle(float value) {
    SetSchemaValue(m_ptr, "CCycleBase", "m_flCycle", false, value);
}

std::string GCCycleBase::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCycleBase::IsValid() {
    return (m_ptr != nullptr);
}

GCPhysSurfacePropertiesSoundNames::GCPhysSurfacePropertiesSoundNames(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPhysSurfacePropertiesSoundNames::GCPhysSurfacePropertiesSoundNames(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCPhysSurfacePropertiesSoundNames::GetImpactSoft() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_impactSoft");
}

void GCPhysSurfacePropertiesSoundNames::SetImpactSoft(CUtlString value) {
    SetSchemaValue(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_impactSoft", false, value);
}

CUtlString GCPhysSurfacePropertiesSoundNames::GetImpactHard() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_impactHard");
}

void GCPhysSurfacePropertiesSoundNames::SetImpactHard(CUtlString value) {
    SetSchemaValue(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_impactHard", false, value);
}

CUtlString GCPhysSurfacePropertiesSoundNames::GetScrapeSmooth() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_scrapeSmooth");
}

void GCPhysSurfacePropertiesSoundNames::SetScrapeSmooth(CUtlString value) {
    SetSchemaValue(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_scrapeSmooth", false, value);
}

CUtlString GCPhysSurfacePropertiesSoundNames::GetScrapeRough() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_scrapeRough");
}

void GCPhysSurfacePropertiesSoundNames::SetScrapeRough(CUtlString value) {
    SetSchemaValue(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_scrapeRough", false, value);
}

CUtlString GCPhysSurfacePropertiesSoundNames::GetBulletImpact() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_bulletImpact");
}

void GCPhysSurfacePropertiesSoundNames::SetBulletImpact(CUtlString value) {
    SetSchemaValue(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_bulletImpact", false, value);
}

CUtlString GCPhysSurfacePropertiesSoundNames::GetRolling() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_rolling");
}

void GCPhysSurfacePropertiesSoundNames::SetRolling(CUtlString value) {
    SetSchemaValue(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_rolling", false, value);
}

CUtlString GCPhysSurfacePropertiesSoundNames::GetBreak() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_break");
}

void GCPhysSurfacePropertiesSoundNames::SetBreak(CUtlString value) {
    SetSchemaValue(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_break", false, value);
}

CUtlString GCPhysSurfacePropertiesSoundNames::GetStrain() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_strain");
}

void GCPhysSurfacePropertiesSoundNames::SetStrain(CUtlString value) {
    SetSchemaValue(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_strain", false, value);
}

CUtlString GCPhysSurfacePropertiesSoundNames::GetMeleeImpact() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_meleeImpact");
}

void GCPhysSurfacePropertiesSoundNames::SetMeleeImpact(CUtlString value) {
    SetSchemaValue(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_meleeImpact", false, value);
}

CUtlString GCPhysSurfacePropertiesSoundNames::GetPushOff() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_pushOff");
}

void GCPhysSurfacePropertiesSoundNames::SetPushOff(CUtlString value) {
    SetSchemaValue(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_pushOff", false, value);
}

CUtlString GCPhysSurfacePropertiesSoundNames::GetSkidStop() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_skidStop");
}

void GCPhysSurfacePropertiesSoundNames::SetSkidStop(CUtlString value) {
    SetSchemaValue(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_skidStop", false, value);
}

std::string GCPhysSurfacePropertiesSoundNames::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPhysSurfacePropertiesSoundNames::IsValid() {
    return (m_ptr != nullptr);
}

GDynamicMeshDeformParams_t::GDynamicMeshDeformParams_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GDynamicMeshDeformParams_t::GDynamicMeshDeformParams_t(void *ptr) {
    m_ptr = ptr;
}

float GDynamicMeshDeformParams_t::GetTensionCompressScale() const {
    return GetSchemaValue<float>(m_ptr, "DynamicMeshDeformParams_t", "m_flTensionCompressScale");
}

void GDynamicMeshDeformParams_t::SetTensionCompressScale(float value) {
    SetSchemaValue(m_ptr, "DynamicMeshDeformParams_t", "m_flTensionCompressScale", true, value);
}

float GDynamicMeshDeformParams_t::GetTensionStretchScale() const {
    return GetSchemaValue<float>(m_ptr, "DynamicMeshDeformParams_t", "m_flTensionStretchScale");
}

void GDynamicMeshDeformParams_t::SetTensionStretchScale(float value) {
    SetSchemaValue(m_ptr, "DynamicMeshDeformParams_t", "m_flTensionStretchScale", true, value);
}

bool GDynamicMeshDeformParams_t::GetRecomputeSmoothNormalsAfterAnimation() const {
    return GetSchemaValue<bool>(m_ptr, "DynamicMeshDeformParams_t", "m_bRecomputeSmoothNormalsAfterAnimation");
}

void GDynamicMeshDeformParams_t::SetRecomputeSmoothNormalsAfterAnimation(bool value) {
    SetSchemaValue(m_ptr, "DynamicMeshDeformParams_t", "m_bRecomputeSmoothNormalsAfterAnimation", true, value);
}

bool GDynamicMeshDeformParams_t::GetComputeDynamicMeshTensionAfterAnimation() const {
    return GetSchemaValue<bool>(m_ptr, "DynamicMeshDeformParams_t", "m_bComputeDynamicMeshTensionAfterAnimation");
}

void GDynamicMeshDeformParams_t::SetComputeDynamicMeshTensionAfterAnimation(bool value) {
    SetSchemaValue(m_ptr, "DynamicMeshDeformParams_t", "m_bComputeDynamicMeshTensionAfterAnimation", true, value);
}

std::string GDynamicMeshDeformParams_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GDynamicMeshDeformParams_t::IsValid() {
    return (m_ptr != nullptr);
}

GCDistanceRemainingMetricEvaluator::GCDistanceRemainingMetricEvaluator(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCDistanceRemainingMetricEvaluator::GCDistanceRemainingMetricEvaluator(void *ptr) {
    m_ptr = ptr;
}

float GCDistanceRemainingMetricEvaluator::GetMaxDistance() const {
    return GetSchemaValue<float>(m_ptr, "CDistanceRemainingMetricEvaluator", "m_flMaxDistance");
}

void GCDistanceRemainingMetricEvaluator::SetMaxDistance(float value) {
    SetSchemaValue(m_ptr, "CDistanceRemainingMetricEvaluator", "m_flMaxDistance", false, value);
}

float GCDistanceRemainingMetricEvaluator::GetMinDistance() const {
    return GetSchemaValue<float>(m_ptr, "CDistanceRemainingMetricEvaluator", "m_flMinDistance");
}

void GCDistanceRemainingMetricEvaluator::SetMinDistance(float value) {
    SetSchemaValue(m_ptr, "CDistanceRemainingMetricEvaluator", "m_flMinDistance", false, value);
}

float GCDistanceRemainingMetricEvaluator::GetStartGoalFilterDistance() const {
    return GetSchemaValue<float>(m_ptr, "CDistanceRemainingMetricEvaluator", "m_flStartGoalFilterDistance");
}

void GCDistanceRemainingMetricEvaluator::SetStartGoalFilterDistance(float value) {
    SetSchemaValue(m_ptr, "CDistanceRemainingMetricEvaluator", "m_flStartGoalFilterDistance", false, value);
}

float GCDistanceRemainingMetricEvaluator::GetMaxGoalOvershootScale() const {
    return GetSchemaValue<float>(m_ptr, "CDistanceRemainingMetricEvaluator", "m_flMaxGoalOvershootScale");
}

void GCDistanceRemainingMetricEvaluator::SetMaxGoalOvershootScale(float value) {
    SetSchemaValue(m_ptr, "CDistanceRemainingMetricEvaluator", "m_flMaxGoalOvershootScale", false, value);
}

bool GCDistanceRemainingMetricEvaluator::GetFilterFixedMinDistance() const {
    return GetSchemaValue<bool>(m_ptr, "CDistanceRemainingMetricEvaluator", "m_bFilterFixedMinDistance");
}

void GCDistanceRemainingMetricEvaluator::SetFilterFixedMinDistance(bool value) {
    SetSchemaValue(m_ptr, "CDistanceRemainingMetricEvaluator", "m_bFilterFixedMinDistance", false, value);
}

bool GCDistanceRemainingMetricEvaluator::GetFilterGoalDistance() const {
    return GetSchemaValue<bool>(m_ptr, "CDistanceRemainingMetricEvaluator", "m_bFilterGoalDistance");
}

void GCDistanceRemainingMetricEvaluator::SetFilterGoalDistance(bool value) {
    SetSchemaValue(m_ptr, "CDistanceRemainingMetricEvaluator", "m_bFilterGoalDistance", false, value);
}

bool GCDistanceRemainingMetricEvaluator::GetFilterGoalOvershoot() const {
    return GetSchemaValue<bool>(m_ptr, "CDistanceRemainingMetricEvaluator", "m_bFilterGoalOvershoot");
}

void GCDistanceRemainingMetricEvaluator::SetFilterGoalOvershoot(bool value) {
    SetSchemaValue(m_ptr, "CDistanceRemainingMetricEvaluator", "m_bFilterGoalOvershoot", false, value);
}

std::string GCDistanceRemainingMetricEvaluator::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCDistanceRemainingMetricEvaluator::IsValid() {
    return (m_ptr != nullptr);
}

GVMixDynamicsBand_t::GVMixDynamicsBand_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVMixDynamicsBand_t::GVMixDynamicsBand_t(void *ptr) {
    m_ptr = ptr;
}

float GVMixDynamicsBand_t::GetFldbGainInput() const {
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsBand_t", "m_fldbGainInput");
}

void GVMixDynamicsBand_t::SetFldbGainInput(float value) {
    SetSchemaValue(m_ptr, "VMixDynamicsBand_t", "m_fldbGainInput", true, value);
}

float GVMixDynamicsBand_t::GetFldbGainOutput() const {
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsBand_t", "m_fldbGainOutput");
}

void GVMixDynamicsBand_t::SetFldbGainOutput(float value) {
    SetSchemaValue(m_ptr, "VMixDynamicsBand_t", "m_fldbGainOutput", true, value);
}

float GVMixDynamicsBand_t::GetFldbThresholdBelow() const {
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsBand_t", "m_fldbThresholdBelow");
}

void GVMixDynamicsBand_t::SetFldbThresholdBelow(float value) {
    SetSchemaValue(m_ptr, "VMixDynamicsBand_t", "m_fldbThresholdBelow", true, value);
}

float GVMixDynamicsBand_t::GetFldbThresholdAbove() const {
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsBand_t", "m_fldbThresholdAbove");
}

void GVMixDynamicsBand_t::SetFldbThresholdAbove(float value) {
    SetSchemaValue(m_ptr, "VMixDynamicsBand_t", "m_fldbThresholdAbove", true, value);
}

float GVMixDynamicsBand_t::GetRatioBelow() const {
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsBand_t", "m_flRatioBelow");
}

void GVMixDynamicsBand_t::SetRatioBelow(float value) {
    SetSchemaValue(m_ptr, "VMixDynamicsBand_t", "m_flRatioBelow", true, value);
}

float GVMixDynamicsBand_t::GetRatioAbove() const {
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsBand_t", "m_flRatioAbove");
}

void GVMixDynamicsBand_t::SetRatioAbove(float value) {
    SetSchemaValue(m_ptr, "VMixDynamicsBand_t", "m_flRatioAbove", true, value);
}

float GVMixDynamicsBand_t::GetAttackTimeMS() const {
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsBand_t", "m_flAttackTimeMS");
}

void GVMixDynamicsBand_t::SetAttackTimeMS(float value) {
    SetSchemaValue(m_ptr, "VMixDynamicsBand_t", "m_flAttackTimeMS", true, value);
}

float GVMixDynamicsBand_t::GetReleaseTimeMS() const {
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsBand_t", "m_flReleaseTimeMS");
}

void GVMixDynamicsBand_t::SetReleaseTimeMS(float value) {
    SetSchemaValue(m_ptr, "VMixDynamicsBand_t", "m_flReleaseTimeMS", true, value);
}

bool GVMixDynamicsBand_t::GetEnable() const {
    return GetSchemaValue<bool>(m_ptr, "VMixDynamicsBand_t", "m_bEnable");
}

void GVMixDynamicsBand_t::SetEnable(bool value) {
    SetSchemaValue(m_ptr, "VMixDynamicsBand_t", "m_bEnable", true, value);
}

bool GVMixDynamicsBand_t::GetSolo() const {
    return GetSchemaValue<bool>(m_ptr, "VMixDynamicsBand_t", "m_bSolo");
}

void GVMixDynamicsBand_t::SetSolo(bool value) {
    SetSchemaValue(m_ptr, "VMixDynamicsBand_t", "m_bSolo", true, value);
}

std::string GVMixDynamicsBand_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVMixDynamicsBand_t::IsValid() {
    return (m_ptr != nullptr);
}

GRnCapsule_t::GRnCapsule_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GRnCapsule_t::GRnCapsule_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<Vector> GRnCapsule_t::GetCenter() const {
    Vector* outValue = GetSchemaValue<Vector*>(m_ptr, "RnCapsule_t", "m_vCenter"); std::vector<Vector> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}

void GRnCapsule_t::SetCenter(std::vector<Vector> value) {
    Vector* outValue = GetSchemaValue<Vector*>(m_ptr, "RnCapsule_t", "m_vCenter"); for(int i = 0; i < 2; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "RnCapsule_t", "m_vCenter", true, outValue);
}

float GRnCapsule_t::GetRadius() const {
    return GetSchemaValue<float>(m_ptr, "RnCapsule_t", "m_flRadius");
}

void GRnCapsule_t::SetRadius(float value) {
    SetSchemaValue(m_ptr, "RnCapsule_t", "m_flRadius", true, value);
}

std::string GRnCapsule_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GRnCapsule_t::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimInputDamping::GCAnimInputDamping(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimInputDamping::GCAnimInputDamping(void *ptr) {
    m_ptr = ptr;
}

DampingSpeedFunction GCAnimInputDamping::GetSpeedFunction() const {
    return GetSchemaValue<DampingSpeedFunction>(m_ptr, "CAnimInputDamping", "m_speedFunction");
}

void GCAnimInputDamping::SetSpeedFunction(DampingSpeedFunction value) {
    SetSchemaValue(m_ptr, "CAnimInputDamping", "m_speedFunction", false, value);
}

float GCAnimInputDamping::GetSpeedScale() const {
    return GetSchemaValue<float>(m_ptr, "CAnimInputDamping", "m_fSpeedScale");
}

void GCAnimInputDamping::SetSpeedScale(float value) {
    SetSchemaValue(m_ptr, "CAnimInputDamping", "m_fSpeedScale", false, value);
}

std::string GCAnimInputDamping::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimInputDamping::IsValid() {
    return (m_ptr != nullptr);
}

GAnimTagID::GAnimTagID(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GAnimTagID::GAnimTagID(void *ptr) {
    m_ptr = ptr;
}

uint32_t GAnimTagID::GetId() const {
    return GetSchemaValue<uint32_t>(m_ptr, "AnimTagID", "m_id");
}

void GAnimTagID::SetId(uint32_t value) {
    SetSchemaValue(m_ptr, "AnimTagID", "m_id", false, value);
}

std::string GAnimTagID::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GAnimTagID::IsValid() {
    return (m_ptr != nullptr);
}

GCParticleFunctionPreEmission::GCParticleFunctionPreEmission(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCParticleFunctionPreEmission::GCParticleFunctionPreEmission(void *ptr) {
    m_ptr = ptr;
}

bool GCParticleFunctionPreEmission::GetRunOnce() const {
    return GetSchemaValue<bool>(m_ptr, "CParticleFunctionPreEmission", "m_bRunOnce");
}

void GCParticleFunctionPreEmission::SetRunOnce(bool value) {
    SetSchemaValue(m_ptr, "CParticleFunctionPreEmission", "m_bRunOnce", false, value);
}

std::string GCParticleFunctionPreEmission::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCParticleFunctionPreEmission::IsValid() {
    return (m_ptr != nullptr);
}

GCPerParticleFloatInput::GCPerParticleFloatInput(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPerParticleFloatInput::GCPerParticleFloatInput(void *ptr) {
    m_ptr = ptr;
}

std::string GCPerParticleFloatInput::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPerParticleFloatInput::IsValid() {
    return (m_ptr != nullptr);
}

GCSosGroupActionSchema::GCSosGroupActionSchema(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSosGroupActionSchema::GCSosGroupActionSchema(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCSosGroupActionSchema::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CSosGroupActionSchema", "m_name");
}

void GCSosGroupActionSchema::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "CSosGroupActionSchema", "m_name", false, value);
}

ActionType_t GCSosGroupActionSchema::GetActionType() const {
    return GetSchemaValue<ActionType_t>(m_ptr, "CSosGroupActionSchema", "m_actionType");
}

void GCSosGroupActionSchema::SetActionType(ActionType_t value) {
    SetSchemaValue(m_ptr, "CSosGroupActionSchema", "m_actionType", false, value);
}

ActionType_t GCSosGroupActionSchema::GetActionInstanceType() const {
    return GetSchemaValue<ActionType_t>(m_ptr, "CSosGroupActionSchema", "m_actionInstanceType");
}

void GCSosGroupActionSchema::SetActionInstanceType(ActionType_t value) {
    SetSchemaValue(m_ptr, "CSosGroupActionSchema", "m_actionInstanceType", false, value);
}

std::string GCSosGroupActionSchema::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSosGroupActionSchema::IsValid() {
    return (m_ptr != nullptr);
}

GCFutureFacingMetricEvaluator::GCFutureFacingMetricEvaluator(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFutureFacingMetricEvaluator::GCFutureFacingMetricEvaluator(void *ptr) {
    m_ptr = ptr;
}

float GCFutureFacingMetricEvaluator::GetDistance() const {
    return GetSchemaValue<float>(m_ptr, "CFutureFacingMetricEvaluator", "m_flDistance");
}

void GCFutureFacingMetricEvaluator::SetDistance(float value) {
    SetSchemaValue(m_ptr, "CFutureFacingMetricEvaluator", "m_flDistance", false, value);
}

float GCFutureFacingMetricEvaluator::GetTime() const {
    return GetSchemaValue<float>(m_ptr, "CFutureFacingMetricEvaluator", "m_flTime");
}

void GCFutureFacingMetricEvaluator::SetTime(float value) {
    SetSchemaValue(m_ptr, "CFutureFacingMetricEvaluator", "m_flTime", false, value);
}

std::string GCFutureFacingMetricEvaluator::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFutureFacingMetricEvaluator::IsValid() {
    return (m_ptr != nullptr);
}

GCSeqTransition::GCSeqTransition(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSeqTransition::GCSeqTransition(void *ptr) {
    m_ptr = ptr;
}

float GCSeqTransition::GetFadeInTime() const {
    return GetSchemaValue<float>(m_ptr, "CSeqTransition", "m_flFadeInTime");
}

void GCSeqTransition::SetFadeInTime(float value) {
    SetSchemaValue(m_ptr, "CSeqTransition", "m_flFadeInTime", false, value);
}

float GCSeqTransition::GetFadeOutTime() const {
    return GetSchemaValue<float>(m_ptr, "CSeqTransition", "m_flFadeOutTime");
}

void GCSeqTransition::SetFadeOutTime(float value) {
    SetSchemaValue(m_ptr, "CSeqTransition", "m_flFadeOutTime", false, value);
}

std::string GCSeqTransition::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSeqTransition::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimNodePath::GCAnimNodePath(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimNodePath::GCAnimNodePath(void *ptr) {
    m_ptr = ptr;
}

std::vector<GAnimNodeID> GCAnimNodePath::GetPath() const {
    GAnimNodeID* outValue = GetSchemaValue<GAnimNodeID*>(m_ptr, "CAnimNodePath", "m_path"); std::vector<GAnimNodeID> ret; for(int i = 0; i < 11; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCAnimNodePath::SetPath(std::vector<GAnimNodeID> value) {
    GAnimNodeID* outValue = GetSchemaValue<GAnimNodeID*>(m_ptr, "CAnimNodePath", "m_path"); for(int i = 0; i < 11; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CAnimNodePath", "m_path", false, outValue);
}

int32_t GCAnimNodePath::GetCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimNodePath", "m_nCount");
}

void GCAnimNodePath::SetCount(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimNodePath", "m_nCount", false, value);
}

std::string GCAnimNodePath::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimNodePath::IsValid() {
    return (m_ptr != nullptr);
}

GCParamSpanUpdater::GCParamSpanUpdater(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCParamSpanUpdater::GCParamSpanUpdater(void *ptr) {
    m_ptr = ptr;
}

std::vector<GParamSpan_t> GCParamSpanUpdater::GetSpans() const {
    CUtlVector<GParamSpan_t>* vec = GetSchemaValue<CUtlVector<GParamSpan_t>*>(m_ptr, "CParamSpanUpdater", "m_spans"); std::vector<GParamSpan_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCParamSpanUpdater::SetSpans(std::vector<GParamSpan_t> value) {
    SetSchemaValueCUtlVector<GParamSpan_t>(m_ptr, "CParamSpanUpdater", "m_spans", false, value);
}

std::string GCParamSpanUpdater::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCParamSpanUpdater::IsValid() {
    return (m_ptr != nullptr);
}

GAnimNodeID::GAnimNodeID(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GAnimNodeID::GAnimNodeID(void *ptr) {
    m_ptr = ptr;
}

uint32_t GAnimNodeID::GetId() const {
    return GetSchemaValue<uint32_t>(m_ptr, "AnimNodeID", "m_id");
}

void GAnimNodeID::SetId(uint32_t value) {
    SetSchemaValue(m_ptr, "AnimNodeID", "m_id", false, value);
}

std::string GAnimNodeID::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GAnimNodeID::IsValid() {
    return (m_ptr != nullptr);
}

GCParticleFunctionInitializer::GCParticleFunctionInitializer(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCParticleFunctionInitializer::GCParticleFunctionInitializer(void *ptr) {
    m_ptr = ptr;
}

int32_t GCParticleFunctionInitializer::GetAssociatedEmitterIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CParticleFunctionInitializer", "m_nAssociatedEmitterIndex");
}

void GCParticleFunctionInitializer::SetAssociatedEmitterIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CParticleFunctionInitializer", "m_nAssociatedEmitterIndex", false, value);
}

std::string GCParticleFunctionInitializer::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCParticleFunctionInitializer::IsValid() {
    return (m_ptr != nullptr);
}

GRnFace_t::GRnFace_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GRnFace_t::GRnFace_t(void *ptr) {
    m_ptr = ptr;
}

uint8_t GRnFace_t::GetEdge() const {
    return GetSchemaValue<uint8_t>(m_ptr, "RnFace_t", "m_nEdge");
}

void GRnFace_t::SetEdge(uint8_t value) {
    SetSchemaValue(m_ptr, "RnFace_t", "m_nEdge", true, value);
}

std::string GRnFace_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GRnFace_t::IsValid() {
    return (m_ptr != nullptr);
}

GEngineLoopState_t::GEngineLoopState_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEngineLoopState_t::GEngineLoopState_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GEngineLoopState_t::GetPlatWindowWidth() const {
    return GetSchemaValue<int32_t>(m_ptr, "EngineLoopState_t", "m_nPlatWindowWidth");
}

void GEngineLoopState_t::SetPlatWindowWidth(int32_t value) {
    SetSchemaValue(m_ptr, "EngineLoopState_t", "m_nPlatWindowWidth", true, value);
}

int32_t GEngineLoopState_t::GetPlatWindowHeight() const {
    return GetSchemaValue<int32_t>(m_ptr, "EngineLoopState_t", "m_nPlatWindowHeight");
}

void GEngineLoopState_t::SetPlatWindowHeight(int32_t value) {
    SetSchemaValue(m_ptr, "EngineLoopState_t", "m_nPlatWindowHeight", true, value);
}

int32_t GEngineLoopState_t::GetRenderWidth() const {
    return GetSchemaValue<int32_t>(m_ptr, "EngineLoopState_t", "m_nRenderWidth");
}

void GEngineLoopState_t::SetRenderWidth(int32_t value) {
    SetSchemaValue(m_ptr, "EngineLoopState_t", "m_nRenderWidth", true, value);
}

int32_t GEngineLoopState_t::GetRenderHeight() const {
    return GetSchemaValue<int32_t>(m_ptr, "EngineLoopState_t", "m_nRenderHeight");
}

void GEngineLoopState_t::SetRenderHeight(int32_t value) {
    SetSchemaValue(m_ptr, "EngineLoopState_t", "m_nRenderHeight", true, value);
}

std::string GEngineLoopState_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEngineLoopState_t::IsValid() {
    return (m_ptr != nullptr);
}

GCNmPoseNode::GCNmPoseNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmPoseNode::GCNmPoseNode(void *ptr) {
    m_ptr = ptr;
}

std::string GCNmPoseNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmPoseNode::IsValid() {
    return (m_ptr != nullptr);
}

GCParticleFunctionConstraint::GCParticleFunctionConstraint(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCParticleFunctionConstraint::GCParticleFunctionConstraint(void *ptr) {
    m_ptr = ptr;
}

std::string GCParticleFunctionConstraint::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCParticleFunctionConstraint::IsValid() {
    return (m_ptr != nullptr);
}

GCNmStateMachineNode__TransitionDefinition_t::GCNmStateMachineNode__TransitionDefinition_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmStateMachineNode__TransitionDefinition_t::GCNmStateMachineNode__TransitionDefinition_t(void *ptr) {
    m_ptr = ptr;
}

int16_t GCNmStateMachineNode__TransitionDefinition_t::GetTargetStateIdx() const {
    return GetSchemaValue<int16_t>(m_ptr, "CNmStateMachineNode__TransitionDefinition_t", "m_nTargetStateIdx");
}

void GCNmStateMachineNode__TransitionDefinition_t::SetTargetStateIdx(int16_t value) {
    SetSchemaValue(m_ptr, "CNmStateMachineNode__TransitionDefinition_t", "m_nTargetStateIdx", true, value);
}

int16_t GCNmStateMachineNode__TransitionDefinition_t::GetConditionNodeIdx() const {
    return GetSchemaValue<int16_t>(m_ptr, "CNmStateMachineNode__TransitionDefinition_t", "m_nConditionNodeIdx");
}

void GCNmStateMachineNode__TransitionDefinition_t::SetConditionNodeIdx(int16_t value) {
    SetSchemaValue(m_ptr, "CNmStateMachineNode__TransitionDefinition_t", "m_nConditionNodeIdx", true, value);
}

int16_t GCNmStateMachineNode__TransitionDefinition_t::GetTransitionNodeIdx() const {
    return GetSchemaValue<int16_t>(m_ptr, "CNmStateMachineNode__TransitionDefinition_t", "m_nTransitionNodeIdx");
}

void GCNmStateMachineNode__TransitionDefinition_t::SetTransitionNodeIdx(int16_t value) {
    SetSchemaValue(m_ptr, "CNmStateMachineNode__TransitionDefinition_t", "m_nTransitionNodeIdx", true, value);
}

bool GCNmStateMachineNode__TransitionDefinition_t::GetCanBeForced() const {
    return GetSchemaValue<bool>(m_ptr, "CNmStateMachineNode__TransitionDefinition_t", "m_bCanBeForced");
}

void GCNmStateMachineNode__TransitionDefinition_t::SetCanBeForced(bool value) {
    SetSchemaValue(m_ptr, "CNmStateMachineNode__TransitionDefinition_t", "m_bCanBeForced", true, value);
}

std::string GCNmStateMachineNode__TransitionDefinition_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmStateMachineNode__TransitionDefinition_t::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimAttachment::GCAnimAttachment(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimAttachment::GCAnimAttachment(void *ptr) {
    m_ptr = ptr;
}

std::vector<Quaternion> GCAnimAttachment::GetInfluenceRotations() const {
    Quaternion* outValue = GetSchemaValue<Quaternion*>(m_ptr, "CAnimAttachment", "m_influenceRotations"); std::vector<Quaternion> ret; for(int i = 0; i < 3; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCAnimAttachment::SetInfluenceRotations(std::vector<Quaternion> value) {
    Quaternion* outValue = GetSchemaValue<Quaternion*>(m_ptr, "CAnimAttachment", "m_influenceRotations"); for(int i = 0; i < 3; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CAnimAttachment", "m_influenceRotations", false, outValue);
}

std::vector<Vector> GCAnimAttachment::GetInfluenceOffsets() const {
    Vector* outValue = GetSchemaValue<Vector*>(m_ptr, "CAnimAttachment", "m_influenceOffsets"); std::vector<Vector> ret; for(int i = 0; i < 3; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCAnimAttachment::SetInfluenceOffsets(std::vector<Vector> value) {
    Vector* outValue = GetSchemaValue<Vector*>(m_ptr, "CAnimAttachment", "m_influenceOffsets"); for(int i = 0; i < 3; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CAnimAttachment", "m_influenceOffsets", false, outValue);
}

std::vector<int32_t> GCAnimAttachment::GetInfluenceIndices() const {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CAnimAttachment", "m_influenceIndices"); std::vector<int32_t> ret; for(int i = 0; i < 3; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCAnimAttachment::SetInfluenceIndices(std::vector<int32_t> value) {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CAnimAttachment", "m_influenceIndices"); for(int i = 0; i < 3; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CAnimAttachment", "m_influenceIndices", false, outValue);
}

std::vector<float> GCAnimAttachment::GetInfluenceWeights() const {
    float* outValue = GetSchemaValue<float*>(m_ptr, "CAnimAttachment", "m_influenceWeights"); std::vector<float> ret; for(int i = 0; i < 3; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCAnimAttachment::SetInfluenceWeights(std::vector<float> value) {
    float* outValue = GetSchemaValue<float*>(m_ptr, "CAnimAttachment", "m_influenceWeights"); for(int i = 0; i < 3; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CAnimAttachment", "m_influenceWeights", false, outValue);
}

uint8_t GCAnimAttachment::GetNumInfluences() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CAnimAttachment", "m_numInfluences");
}

void GCAnimAttachment::SetNumInfluences(uint8_t value) {
    SetSchemaValue(m_ptr, "CAnimAttachment", "m_numInfluences", false, value);
}

std::string GCAnimAttachment::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimAttachment::IsValid() {
    return (m_ptr != nullptr);
}

GEventSimulate_t::GEventSimulate_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEventSimulate_t::GEventSimulate_t(void *ptr) {
    m_ptr = ptr;
}

GEngineLoopState_t GEventSimulate_t::GetLoopState() const {
    return GetSchemaValue<GEngineLoopState_t>(m_ptr, "EventSimulate_t", "m_LoopState");
}

void GEventSimulate_t::SetLoopState(GEngineLoopState_t value) {
    SetSchemaValue(m_ptr, "EventSimulate_t", "m_LoopState", true, value);
}

bool GEventSimulate_t::GetFirstTick() const {
    return GetSchemaValue<bool>(m_ptr, "EventSimulate_t", "m_bFirstTick");
}

void GEventSimulate_t::SetFirstTick(bool value) {
    SetSchemaValue(m_ptr, "EventSimulate_t", "m_bFirstTick", true, value);
}

bool GEventSimulate_t::GetLastTick() const {
    return GetSchemaValue<bool>(m_ptr, "EventSimulate_t", "m_bLastTick");
}

void GEventSimulate_t::SetLastTick(bool value) {
    SetSchemaValue(m_ptr, "EventSimulate_t", "m_bLastTick", true, value);
}

std::string GEventSimulate_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEventSimulate_t::IsValid() {
    return (m_ptr != nullptr);
}

GCParticleCollectionRendererFloatInput::GCParticleCollectionRendererFloatInput(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCParticleCollectionRendererFloatInput::GCParticleCollectionRendererFloatInput(void *ptr) {
    m_ptr = ptr;
}

std::string GCParticleCollectionRendererFloatInput::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCParticleCollectionRendererFloatInput::IsValid() {
    return (m_ptr != nullptr);
}

GModelSkeletonData_t::GModelSkeletonData_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GModelSkeletonData_t::GModelSkeletonData_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<CUtlString> GModelSkeletonData_t::GetBoneName() const {
    CUtlVector<CUtlString>* vec = GetSchemaValue<CUtlVector<CUtlString>*>(m_ptr, "ModelSkeletonData_t", "m_boneName"); std::vector<CUtlString> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GModelSkeletonData_t::SetBoneName(std::vector<CUtlString> value) {
    SetSchemaValueCUtlVector<CUtlString>(m_ptr, "ModelSkeletonData_t", "m_boneName", true, value);
}

std::vector<int16> GModelSkeletonData_t::GetParent() const {
    CUtlVector<int16>* vec = GetSchemaValue<CUtlVector<int16>*>(m_ptr, "ModelSkeletonData_t", "m_nParent"); std::vector<int16> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GModelSkeletonData_t::SetParent(std::vector<int16> value) {
    SetSchemaValueCUtlVector<int16>(m_ptr, "ModelSkeletonData_t", "m_nParent", true, value);
}

std::vector<float32> GModelSkeletonData_t::GetBoneSphere() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "ModelSkeletonData_t", "m_boneSphere"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GModelSkeletonData_t::SetBoneSphere(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "ModelSkeletonData_t", "m_boneSphere", true, value);
}

std::vector<uint32> GModelSkeletonData_t::GetFlag() const {
    CUtlVector<uint32>* vec = GetSchemaValue<CUtlVector<uint32>*>(m_ptr, "ModelSkeletonData_t", "m_nFlag"); std::vector<uint32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GModelSkeletonData_t::SetFlag(std::vector<uint32> value) {
    SetSchemaValueCUtlVector<uint32>(m_ptr, "ModelSkeletonData_t", "m_nFlag", true, value);
}

std::vector<Vector> GModelSkeletonData_t::GetBonePosParent() const {
    CUtlVector<Vector>* vec = GetSchemaValue<CUtlVector<Vector>*>(m_ptr, "ModelSkeletonData_t", "m_bonePosParent"); std::vector<Vector> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GModelSkeletonData_t::SetBonePosParent(std::vector<Vector> value) {
    SetSchemaValueCUtlVector<Vector>(m_ptr, "ModelSkeletonData_t", "m_bonePosParent", true, value);
}

std::vector<float32> GModelSkeletonData_t::GetBoneScaleParent() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "ModelSkeletonData_t", "m_boneScaleParent"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GModelSkeletonData_t::SetBoneScaleParent(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "ModelSkeletonData_t", "m_boneScaleParent", true, value);
}

std::string GModelSkeletonData_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GModelSkeletonData_t::IsValid() {
    return (m_ptr != nullptr);
}

GEventModInitialized_t::GEventModInitialized_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEventModInitialized_t::GEventModInitialized_t(void *ptr) {
    m_ptr = ptr;
}

std::string GEventModInitialized_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEventModInitialized_t::IsValid() {
    return (m_ptr != nullptr);
}

GCParticleTransformInput::GCParticleTransformInput(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCParticleTransformInput::GCParticleTransformInput(void *ptr) {
    m_ptr = ptr;
}

ParticleTransformType_t GCParticleTransformInput::GetType() const {
    return GetSchemaValue<ParticleTransformType_t>(m_ptr, "CParticleTransformInput", "m_nType");
}

void GCParticleTransformInput::SetType(ParticleTransformType_t value) {
    SetSchemaValue(m_ptr, "CParticleTransformInput", "m_nType", false, value);
}

bool GCParticleTransformInput::GetFollowNamedValue() const {
    return GetSchemaValue<bool>(m_ptr, "CParticleTransformInput", "m_bFollowNamedValue");
}

void GCParticleTransformInput::SetFollowNamedValue(bool value) {
    SetSchemaValue(m_ptr, "CParticleTransformInput", "m_bFollowNamedValue", false, value);
}

bool GCParticleTransformInput::GetSupportsDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CParticleTransformInput", "m_bSupportsDisabled");
}

void GCParticleTransformInput::SetSupportsDisabled(bool value) {
    SetSchemaValue(m_ptr, "CParticleTransformInput", "m_bSupportsDisabled", false, value);
}

bool GCParticleTransformInput::GetUseOrientation() const {
    return GetSchemaValue<bool>(m_ptr, "CParticleTransformInput", "m_bUseOrientation");
}

void GCParticleTransformInput::SetUseOrientation(bool value) {
    SetSchemaValue(m_ptr, "CParticleTransformInput", "m_bUseOrientation", false, value);
}

int32_t GCParticleTransformInput::GetControlPoint() const {
    return GetSchemaValue<int32_t>(m_ptr, "CParticleTransformInput", "m_nControlPoint");
}

void GCParticleTransformInput::SetControlPoint(int32_t value) {
    SetSchemaValue(m_ptr, "CParticleTransformInput", "m_nControlPoint", false, value);
}

int32_t GCParticleTransformInput::GetControlPointRangeMax() const {
    return GetSchemaValue<int32_t>(m_ptr, "CParticleTransformInput", "m_nControlPointRangeMax");
}

void GCParticleTransformInput::SetControlPointRangeMax(int32_t value) {
    SetSchemaValue(m_ptr, "CParticleTransformInput", "m_nControlPointRangeMax", false, value);
}

float GCParticleTransformInput::GetEndCPGrowthTime() const {
    return GetSchemaValue<float>(m_ptr, "CParticleTransformInput", "m_flEndCPGrowthTime");
}

void GCParticleTransformInput::SetEndCPGrowthTime(float value) {
    SetSchemaValue(m_ptr, "CParticleTransformInput", "m_flEndCPGrowthTime", false, value);
}

std::string GCParticleTransformInput::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCParticleTransformInput::IsValid() {
    return (m_ptr != nullptr);
}

GCParticleVisibilityInputs::GCParticleVisibilityInputs(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCParticleVisibilityInputs::GCParticleVisibilityInputs(void *ptr) {
    m_ptr = ptr;
}

float GCParticleVisibilityInputs::GetCameraBias() const {
    return GetSchemaValue<float>(m_ptr, "CParticleVisibilityInputs", "m_flCameraBias");
}

void GCParticleVisibilityInputs::SetCameraBias(float value) {
    SetSchemaValue(m_ptr, "CParticleVisibilityInputs", "m_flCameraBias", false, value);
}

int32_t GCParticleVisibilityInputs::GetCPin() const {
    return GetSchemaValue<int32_t>(m_ptr, "CParticleVisibilityInputs", "m_nCPin");
}

void GCParticleVisibilityInputs::SetCPin(int32_t value) {
    SetSchemaValue(m_ptr, "CParticleVisibilityInputs", "m_nCPin", false, value);
}

float GCParticleVisibilityInputs::GetProxyRadius() const {
    return GetSchemaValue<float>(m_ptr, "CParticleVisibilityInputs", "m_flProxyRadius");
}

void GCParticleVisibilityInputs::SetProxyRadius(float value) {
    SetSchemaValue(m_ptr, "CParticleVisibilityInputs", "m_flProxyRadius", false, value);
}

float GCParticleVisibilityInputs::GetInputMin() const {
    return GetSchemaValue<float>(m_ptr, "CParticleVisibilityInputs", "m_flInputMin");
}

void GCParticleVisibilityInputs::SetInputMin(float value) {
    SetSchemaValue(m_ptr, "CParticleVisibilityInputs", "m_flInputMin", false, value);
}

float GCParticleVisibilityInputs::GetInputMax() const {
    return GetSchemaValue<float>(m_ptr, "CParticleVisibilityInputs", "m_flInputMax");
}

void GCParticleVisibilityInputs::SetInputMax(float value) {
    SetSchemaValue(m_ptr, "CParticleVisibilityInputs", "m_flInputMax", false, value);
}

float GCParticleVisibilityInputs::GetInputPixelVisFade() const {
    return GetSchemaValue<float>(m_ptr, "CParticleVisibilityInputs", "m_flInputPixelVisFade");
}

void GCParticleVisibilityInputs::SetInputPixelVisFade(float value) {
    SetSchemaValue(m_ptr, "CParticleVisibilityInputs", "m_flInputPixelVisFade", false, value);
}

float GCParticleVisibilityInputs::GetNoPixelVisibilityFallback() const {
    return GetSchemaValue<float>(m_ptr, "CParticleVisibilityInputs", "m_flNoPixelVisibilityFallback");
}

void GCParticleVisibilityInputs::SetNoPixelVisibilityFallback(float value) {
    SetSchemaValue(m_ptr, "CParticleVisibilityInputs", "m_flNoPixelVisibilityFallback", false, value);
}

float GCParticleVisibilityInputs::GetDistanceInputMin() const {
    return GetSchemaValue<float>(m_ptr, "CParticleVisibilityInputs", "m_flDistanceInputMin");
}

void GCParticleVisibilityInputs::SetDistanceInputMin(float value) {
    SetSchemaValue(m_ptr, "CParticleVisibilityInputs", "m_flDistanceInputMin", false, value);
}

float GCParticleVisibilityInputs::GetDistanceInputMax() const {
    return GetSchemaValue<float>(m_ptr, "CParticleVisibilityInputs", "m_flDistanceInputMax");
}

void GCParticleVisibilityInputs::SetDistanceInputMax(float value) {
    SetSchemaValue(m_ptr, "CParticleVisibilityInputs", "m_flDistanceInputMax", false, value);
}

float GCParticleVisibilityInputs::GetDotInputMin() const {
    return GetSchemaValue<float>(m_ptr, "CParticleVisibilityInputs", "m_flDotInputMin");
}

void GCParticleVisibilityInputs::SetDotInputMin(float value) {
    SetSchemaValue(m_ptr, "CParticleVisibilityInputs", "m_flDotInputMin", false, value);
}

float GCParticleVisibilityInputs::GetDotInputMax() const {
    return GetSchemaValue<float>(m_ptr, "CParticleVisibilityInputs", "m_flDotInputMax");
}

void GCParticleVisibilityInputs::SetDotInputMax(float value) {
    SetSchemaValue(m_ptr, "CParticleVisibilityInputs", "m_flDotInputMax", false, value);
}

bool GCParticleVisibilityInputs::GetDotCPAngles() const {
    return GetSchemaValue<bool>(m_ptr, "CParticleVisibilityInputs", "m_bDotCPAngles");
}

void GCParticleVisibilityInputs::SetDotCPAngles(bool value) {
    SetSchemaValue(m_ptr, "CParticleVisibilityInputs", "m_bDotCPAngles", false, value);
}

bool GCParticleVisibilityInputs::GetDotCameraAngles() const {
    return GetSchemaValue<bool>(m_ptr, "CParticleVisibilityInputs", "m_bDotCameraAngles");
}

void GCParticleVisibilityInputs::SetDotCameraAngles(bool value) {
    SetSchemaValue(m_ptr, "CParticleVisibilityInputs", "m_bDotCameraAngles", false, value);
}

float GCParticleVisibilityInputs::GetAlphaScaleMin() const {
    return GetSchemaValue<float>(m_ptr, "CParticleVisibilityInputs", "m_flAlphaScaleMin");
}

void GCParticleVisibilityInputs::SetAlphaScaleMin(float value) {
    SetSchemaValue(m_ptr, "CParticleVisibilityInputs", "m_flAlphaScaleMin", false, value);
}

float GCParticleVisibilityInputs::GetAlphaScaleMax() const {
    return GetSchemaValue<float>(m_ptr, "CParticleVisibilityInputs", "m_flAlphaScaleMax");
}

void GCParticleVisibilityInputs::SetAlphaScaleMax(float value) {
    SetSchemaValue(m_ptr, "CParticleVisibilityInputs", "m_flAlphaScaleMax", false, value);
}

float GCParticleVisibilityInputs::GetRadiusScaleMin() const {
    return GetSchemaValue<float>(m_ptr, "CParticleVisibilityInputs", "m_flRadiusScaleMin");
}

void GCParticleVisibilityInputs::SetRadiusScaleMin(float value) {
    SetSchemaValue(m_ptr, "CParticleVisibilityInputs", "m_flRadiusScaleMin", false, value);
}

float GCParticleVisibilityInputs::GetRadiusScaleMax() const {
    return GetSchemaValue<float>(m_ptr, "CParticleVisibilityInputs", "m_flRadiusScaleMax");
}

void GCParticleVisibilityInputs::SetRadiusScaleMax(float value) {
    SetSchemaValue(m_ptr, "CParticleVisibilityInputs", "m_flRadiusScaleMax", false, value);
}

float GCParticleVisibilityInputs::GetRadiusScaleFOVBase() const {
    return GetSchemaValue<float>(m_ptr, "CParticleVisibilityInputs", "m_flRadiusScaleFOVBase");
}

void GCParticleVisibilityInputs::SetRadiusScaleFOVBase(float value) {
    SetSchemaValue(m_ptr, "CParticleVisibilityInputs", "m_flRadiusScaleFOVBase", false, value);
}

bool GCParticleVisibilityInputs::GetRightEye() const {
    return GetSchemaValue<bool>(m_ptr, "CParticleVisibilityInputs", "m_bRightEye");
}

void GCParticleVisibilityInputs::SetRightEye(bool value) {
    SetSchemaValue(m_ptr, "CParticleVisibilityInputs", "m_bRightEye", false, value);
}

std::string GCParticleVisibilityInputs::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCParticleVisibilityInputs::IsValid() {
    return (m_ptr != nullptr);
}

GMaterialGroup_t::GMaterialGroup_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GMaterialGroup_t::GMaterialGroup_t(void *ptr) {
    m_ptr = ptr;
}

CUtlString GMaterialGroup_t::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "MaterialGroup_t", "m_name");
}

void GMaterialGroup_t::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "MaterialGroup_t", "m_name", true, value);
}

std::string GMaterialGroup_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GMaterialGroup_t::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimUpdateNodeBase::GCAnimUpdateNodeBase(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimUpdateNodeBase::GCAnimUpdateNodeBase(void *ptr) {
    m_ptr = ptr;
}

GCAnimNodePath GCAnimUpdateNodeBase::GetNodePath() const {
    return GetSchemaValue<GCAnimNodePath>(m_ptr, "CAnimUpdateNodeBase", "m_nodePath");
}

void GCAnimUpdateNodeBase::SetNodePath(GCAnimNodePath value) {
    SetSchemaValue(m_ptr, "CAnimUpdateNodeBase", "m_nodePath", false, value);
}

AnimNodeNetworkMode GCAnimUpdateNodeBase::GetNetworkMode() const {
    return GetSchemaValue<AnimNodeNetworkMode>(m_ptr, "CAnimUpdateNodeBase", "m_networkMode");
}

void GCAnimUpdateNodeBase::SetNetworkMode(AnimNodeNetworkMode value) {
    SetSchemaValue(m_ptr, "CAnimUpdateNodeBase", "m_networkMode", false, value);
}

CUtlString GCAnimUpdateNodeBase::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CAnimUpdateNodeBase", "m_name");
}

void GCAnimUpdateNodeBase::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "CAnimUpdateNodeBase", "m_name", false, value);
}

std::string GCAnimUpdateNodeBase::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimUpdateNodeBase::IsValid() {
    return (m_ptr != nullptr);
}

GCParticleFunctionRenderer::GCParticleFunctionRenderer(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCParticleFunctionRenderer::GCParticleFunctionRenderer(void *ptr) {
    m_ptr = ptr;
}

GCParticleVisibilityInputs GCParticleFunctionRenderer::GetVisibilityInputs() const {
    return GetSchemaValue<GCParticleVisibilityInputs>(m_ptr, "CParticleFunctionRenderer", "VisibilityInputs");
}

void GCParticleFunctionRenderer::SetVisibilityInputs(GCParticleVisibilityInputs value) {
    SetSchemaValue(m_ptr, "CParticleFunctionRenderer", "VisibilityInputs", false, value);
}

bool GCParticleFunctionRenderer::GetCannotBeRefracted() const {
    return GetSchemaValue<bool>(m_ptr, "CParticleFunctionRenderer", "m_bCannotBeRefracted");
}

void GCParticleFunctionRenderer::SetCannotBeRefracted(bool value) {
    SetSchemaValue(m_ptr, "CParticleFunctionRenderer", "m_bCannotBeRefracted", false, value);
}

bool GCParticleFunctionRenderer::GetSkipRenderingOnMobile() const {
    return GetSchemaValue<bool>(m_ptr, "CParticleFunctionRenderer", "m_bSkipRenderingOnMobile");
}

void GCParticleFunctionRenderer::SetSkipRenderingOnMobile(bool value) {
    SetSchemaValue(m_ptr, "CParticleFunctionRenderer", "m_bSkipRenderingOnMobile", false, value);
}

std::string GCParticleFunctionRenderer::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCParticleFunctionRenderer::IsValid() {
    return (m_ptr != nullptr);
}

GCParticleVecInput::GCParticleVecInput(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCParticleVecInput::GCParticleVecInput(void *ptr) {
    m_ptr = ptr;
}

ParticleVecType_t GCParticleVecInput::GetType() const {
    return GetSchemaValue<ParticleVecType_t>(m_ptr, "CParticleVecInput", "m_nType");
}

void GCParticleVecInput::SetType(ParticleVecType_t value) {
    SetSchemaValue(m_ptr, "CParticleVecInput", "m_nType", false, value);
}

Vector GCParticleVecInput::GetLiteralValue() const {
    return GetSchemaValue<Vector>(m_ptr, "CParticleVecInput", "m_vLiteralValue");
}

void GCParticleVecInput::SetLiteralValue(Vector value) {
    SetSchemaValue(m_ptr, "CParticleVecInput", "m_vLiteralValue", false, value);
}

Color GCParticleVecInput::GetLiteralColor() const {
    return GetSchemaValue<Color>(m_ptr, "CParticleVecInput", "m_LiteralColor");
}

void GCParticleVecInput::SetLiteralColor(Color value) {
    SetSchemaValue(m_ptr, "CParticleVecInput", "m_LiteralColor", false, value);
}

bool GCParticleVecInput::GetFollowNamedValue() const {
    return GetSchemaValue<bool>(m_ptr, "CParticleVecInput", "m_bFollowNamedValue");
}

void GCParticleVecInput::SetFollowNamedValue(bool value) {
    SetSchemaValue(m_ptr, "CParticleVecInput", "m_bFollowNamedValue", false, value);
}

GParticleAttributeIndex_t GCParticleVecInput::GetVectorAttribute() const {
    return GetSchemaValue<GParticleAttributeIndex_t>(m_ptr, "CParticleVecInput", "m_nVectorAttribute");
}

void GCParticleVecInput::SetVectorAttribute(GParticleAttributeIndex_t value) {
    SetSchemaValue(m_ptr, "CParticleVecInput", "m_nVectorAttribute", false, value);
}

Vector GCParticleVecInput::GetVectorAttributeScale() const {
    return GetSchemaValue<Vector>(m_ptr, "CParticleVecInput", "m_vVectorAttributeScale");
}

void GCParticleVecInput::SetVectorAttributeScale(Vector value) {
    SetSchemaValue(m_ptr, "CParticleVecInput", "m_vVectorAttributeScale", false, value);
}

int32_t GCParticleVecInput::GetControlPoint() const {
    return GetSchemaValue<int32_t>(m_ptr, "CParticleVecInput", "m_nControlPoint");
}

void GCParticleVecInput::SetControlPoint(int32_t value) {
    SetSchemaValue(m_ptr, "CParticleVecInput", "m_nControlPoint", false, value);
}

int32_t GCParticleVecInput::GetDeltaControlPoint() const {
    return GetSchemaValue<int32_t>(m_ptr, "CParticleVecInput", "m_nDeltaControlPoint");
}

void GCParticleVecInput::SetDeltaControlPoint(int32_t value) {
    SetSchemaValue(m_ptr, "CParticleVecInput", "m_nDeltaControlPoint", false, value);
}

Vector GCParticleVecInput::GetCPValueScale() const {
    return GetSchemaValue<Vector>(m_ptr, "CParticleVecInput", "m_vCPValueScale");
}

void GCParticleVecInput::SetCPValueScale(Vector value) {
    SetSchemaValue(m_ptr, "CParticleVecInput", "m_vCPValueScale", false, value);
}

Vector GCParticleVecInput::GetCPRelativePosition() const {
    return GetSchemaValue<Vector>(m_ptr, "CParticleVecInput", "m_vCPRelativePosition");
}

void GCParticleVecInput::SetCPRelativePosition(Vector value) {
    SetSchemaValue(m_ptr, "CParticleVecInput", "m_vCPRelativePosition", false, value);
}

Vector GCParticleVecInput::GetCPRelativeDir() const {
    return GetSchemaValue<Vector>(m_ptr, "CParticleVecInput", "m_vCPRelativeDir");
}

void GCParticleVecInput::SetCPRelativeDir(Vector value) {
    SetSchemaValue(m_ptr, "CParticleVecInput", "m_vCPRelativeDir", false, value);
}

GCParticleFloatInput GCParticleVecInput::GetFloatComponentX() const {
    return GetSchemaValue<GCParticleFloatInput>(m_ptr, "CParticleVecInput", "m_FloatComponentX");
}

void GCParticleVecInput::SetFloatComponentX(GCParticleFloatInput value) {
    SetSchemaValue(m_ptr, "CParticleVecInput", "m_FloatComponentX", false, value);
}

GCParticleFloatInput GCParticleVecInput::GetFloatComponentY() const {
    return GetSchemaValue<GCParticleFloatInput>(m_ptr, "CParticleVecInput", "m_FloatComponentY");
}

void GCParticleVecInput::SetFloatComponentY(GCParticleFloatInput value) {
    SetSchemaValue(m_ptr, "CParticleVecInput", "m_FloatComponentY", false, value);
}

GCParticleFloatInput GCParticleVecInput::GetFloatComponentZ() const {
    return GetSchemaValue<GCParticleFloatInput>(m_ptr, "CParticleVecInput", "m_FloatComponentZ");
}

void GCParticleVecInput::SetFloatComponentZ(GCParticleFloatInput value) {
    SetSchemaValue(m_ptr, "CParticleVecInput", "m_FloatComponentZ", false, value);
}

GCParticleFloatInput GCParticleVecInput::GetFloatInterp() const {
    return GetSchemaValue<GCParticleFloatInput>(m_ptr, "CParticleVecInput", "m_FloatInterp");
}

void GCParticleVecInput::SetFloatInterp(GCParticleFloatInput value) {
    SetSchemaValue(m_ptr, "CParticleVecInput", "m_FloatInterp", false, value);
}

float GCParticleVecInput::GetInterpInput0() const {
    return GetSchemaValue<float>(m_ptr, "CParticleVecInput", "m_flInterpInput0");
}

void GCParticleVecInput::SetInterpInput0(float value) {
    SetSchemaValue(m_ptr, "CParticleVecInput", "m_flInterpInput0", false, value);
}

float GCParticleVecInput::GetInterpInput1() const {
    return GetSchemaValue<float>(m_ptr, "CParticleVecInput", "m_flInterpInput1");
}

void GCParticleVecInput::SetInterpInput1(float value) {
    SetSchemaValue(m_ptr, "CParticleVecInput", "m_flInterpInput1", false, value);
}

Vector GCParticleVecInput::GetInterpOutput0() const {
    return GetSchemaValue<Vector>(m_ptr, "CParticleVecInput", "m_vInterpOutput0");
}

void GCParticleVecInput::SetInterpOutput0(Vector value) {
    SetSchemaValue(m_ptr, "CParticleVecInput", "m_vInterpOutput0", false, value);
}

Vector GCParticleVecInput::GetInterpOutput1() const {
    return GetSchemaValue<Vector>(m_ptr, "CParticleVecInput", "m_vInterpOutput1");
}

void GCParticleVecInput::SetInterpOutput1(Vector value) {
    SetSchemaValue(m_ptr, "CParticleVecInput", "m_vInterpOutput1", false, value);
}

Vector GCParticleVecInput::GetRandomMin() const {
    return GetSchemaValue<Vector>(m_ptr, "CParticleVecInput", "m_vRandomMin");
}

void GCParticleVecInput::SetRandomMin(Vector value) {
    SetSchemaValue(m_ptr, "CParticleVecInput", "m_vRandomMin", false, value);
}

Vector GCParticleVecInput::GetRandomMax() const {
    return GetSchemaValue<Vector>(m_ptr, "CParticleVecInput", "m_vRandomMax");
}

void GCParticleVecInput::SetRandomMax(Vector value) {
    SetSchemaValue(m_ptr, "CParticleVecInput", "m_vRandomMax", false, value);
}

std::string GCParticleVecInput::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCParticleVecInput::IsValid() {
    return (m_ptr != nullptr);
}

GVPhysXConstraintParams_t::GVPhysXConstraintParams_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVPhysXConstraintParams_t::GVPhysXConstraintParams_t(void *ptr) {
    m_ptr = ptr;
}

int8_t GVPhysXConstraintParams_t::GetType() const {
    return GetSchemaValue<int8_t>(m_ptr, "VPhysXConstraintParams_t", "m_nType");
}

void GVPhysXConstraintParams_t::SetType(int8_t value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_nType", true, value);
}

int8_t GVPhysXConstraintParams_t::GetTranslateMotion() const {
    return GetSchemaValue<int8_t>(m_ptr, "VPhysXConstraintParams_t", "m_nTranslateMotion");
}

void GVPhysXConstraintParams_t::SetTranslateMotion(int8_t value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_nTranslateMotion", true, value);
}

int8_t GVPhysXConstraintParams_t::GetRotateMotion() const {
    return GetSchemaValue<int8_t>(m_ptr, "VPhysXConstraintParams_t", "m_nRotateMotion");
}

void GVPhysXConstraintParams_t::SetRotateMotion(int8_t value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_nRotateMotion", true, value);
}

int8_t GVPhysXConstraintParams_t::GetFlags() const {
    return GetSchemaValue<int8_t>(m_ptr, "VPhysXConstraintParams_t", "m_nFlags");
}

void GVPhysXConstraintParams_t::SetFlags(int8_t value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_nFlags", true, value);
}

std::vector<Vector> GVPhysXConstraintParams_t::GetAnchor() const {
    Vector* outValue = GetSchemaValue<Vector*>(m_ptr, "VPhysXConstraintParams_t", "m_anchor"); std::vector<Vector> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}

void GVPhysXConstraintParams_t::SetAnchor(std::vector<Vector> value) {
    Vector* outValue = GetSchemaValue<Vector*>(m_ptr, "VPhysXConstraintParams_t", "m_anchor"); for(int i = 0; i < 2; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_anchor", true, outValue);
}

float GVPhysXConstraintParams_t::GetMaxForce() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXConstraintParams_t", "m_maxForce");
}

void GVPhysXConstraintParams_t::SetMaxForce(float value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_maxForce", true, value);
}

float GVPhysXConstraintParams_t::GetMaxTorque() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXConstraintParams_t", "m_maxTorque");
}

void GVPhysXConstraintParams_t::SetMaxTorque(float value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_maxTorque", true, value);
}

float GVPhysXConstraintParams_t::GetLinearLimitValue() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXConstraintParams_t", "m_linearLimitValue");
}

void GVPhysXConstraintParams_t::SetLinearLimitValue(float value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_linearLimitValue", true, value);
}

float GVPhysXConstraintParams_t::GetLinearLimitRestitution() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXConstraintParams_t", "m_linearLimitRestitution");
}

void GVPhysXConstraintParams_t::SetLinearLimitRestitution(float value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_linearLimitRestitution", true, value);
}

float GVPhysXConstraintParams_t::GetLinearLimitSpring() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXConstraintParams_t", "m_linearLimitSpring");
}

void GVPhysXConstraintParams_t::SetLinearLimitSpring(float value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_linearLimitSpring", true, value);
}

float GVPhysXConstraintParams_t::GetLinearLimitDamping() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXConstraintParams_t", "m_linearLimitDamping");
}

void GVPhysXConstraintParams_t::SetLinearLimitDamping(float value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_linearLimitDamping", true, value);
}

float GVPhysXConstraintParams_t::GetTwistLowLimitValue() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXConstraintParams_t", "m_twistLowLimitValue");
}

void GVPhysXConstraintParams_t::SetTwistLowLimitValue(float value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_twistLowLimitValue", true, value);
}

float GVPhysXConstraintParams_t::GetTwistLowLimitRestitution() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXConstraintParams_t", "m_twistLowLimitRestitution");
}

void GVPhysXConstraintParams_t::SetTwistLowLimitRestitution(float value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_twistLowLimitRestitution", true, value);
}

float GVPhysXConstraintParams_t::GetTwistLowLimitSpring() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXConstraintParams_t", "m_twistLowLimitSpring");
}

void GVPhysXConstraintParams_t::SetTwistLowLimitSpring(float value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_twistLowLimitSpring", true, value);
}

float GVPhysXConstraintParams_t::GetTwistLowLimitDamping() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXConstraintParams_t", "m_twistLowLimitDamping");
}

void GVPhysXConstraintParams_t::SetTwistLowLimitDamping(float value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_twistLowLimitDamping", true, value);
}

float GVPhysXConstraintParams_t::GetTwistHighLimitValue() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXConstraintParams_t", "m_twistHighLimitValue");
}

void GVPhysXConstraintParams_t::SetTwistHighLimitValue(float value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_twistHighLimitValue", true, value);
}

float GVPhysXConstraintParams_t::GetTwistHighLimitRestitution() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXConstraintParams_t", "m_twistHighLimitRestitution");
}

void GVPhysXConstraintParams_t::SetTwistHighLimitRestitution(float value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_twistHighLimitRestitution", true, value);
}

float GVPhysXConstraintParams_t::GetTwistHighLimitSpring() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXConstraintParams_t", "m_twistHighLimitSpring");
}

void GVPhysXConstraintParams_t::SetTwistHighLimitSpring(float value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_twistHighLimitSpring", true, value);
}

float GVPhysXConstraintParams_t::GetTwistHighLimitDamping() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXConstraintParams_t", "m_twistHighLimitDamping");
}

void GVPhysXConstraintParams_t::SetTwistHighLimitDamping(float value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_twistHighLimitDamping", true, value);
}

float GVPhysXConstraintParams_t::GetSwing1LimitValue() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXConstraintParams_t", "m_swing1LimitValue");
}

void GVPhysXConstraintParams_t::SetSwing1LimitValue(float value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_swing1LimitValue", true, value);
}

float GVPhysXConstraintParams_t::GetSwing1LimitRestitution() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXConstraintParams_t", "m_swing1LimitRestitution");
}

void GVPhysXConstraintParams_t::SetSwing1LimitRestitution(float value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_swing1LimitRestitution", true, value);
}

float GVPhysXConstraintParams_t::GetSwing1LimitSpring() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXConstraintParams_t", "m_swing1LimitSpring");
}

void GVPhysXConstraintParams_t::SetSwing1LimitSpring(float value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_swing1LimitSpring", true, value);
}

float GVPhysXConstraintParams_t::GetSwing1LimitDamping() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXConstraintParams_t", "m_swing1LimitDamping");
}

void GVPhysXConstraintParams_t::SetSwing1LimitDamping(float value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_swing1LimitDamping", true, value);
}

float GVPhysXConstraintParams_t::GetSwing2LimitValue() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXConstraintParams_t", "m_swing2LimitValue");
}

void GVPhysXConstraintParams_t::SetSwing2LimitValue(float value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_swing2LimitValue", true, value);
}

float GVPhysXConstraintParams_t::GetSwing2LimitRestitution() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXConstraintParams_t", "m_swing2LimitRestitution");
}

void GVPhysXConstraintParams_t::SetSwing2LimitRestitution(float value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_swing2LimitRestitution", true, value);
}

float GVPhysXConstraintParams_t::GetSwing2LimitSpring() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXConstraintParams_t", "m_swing2LimitSpring");
}

void GVPhysXConstraintParams_t::SetSwing2LimitSpring(float value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_swing2LimitSpring", true, value);
}

float GVPhysXConstraintParams_t::GetSwing2LimitDamping() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXConstraintParams_t", "m_swing2LimitDamping");
}

void GVPhysXConstraintParams_t::SetSwing2LimitDamping(float value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_swing2LimitDamping", true, value);
}

Vector GVPhysXConstraintParams_t::GetGoalPosition() const {
    return GetSchemaValue<Vector>(m_ptr, "VPhysXConstraintParams_t", "m_goalPosition");
}

void GVPhysXConstraintParams_t::SetGoalPosition(Vector value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_goalPosition", true, value);
}

Vector GVPhysXConstraintParams_t::GetGoalAngularVelocity() const {
    return GetSchemaValue<Vector>(m_ptr, "VPhysXConstraintParams_t", "m_goalAngularVelocity");
}

void GVPhysXConstraintParams_t::SetGoalAngularVelocity(Vector value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_goalAngularVelocity", true, value);
}

float GVPhysXConstraintParams_t::GetDriveSpringX() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXConstraintParams_t", "m_driveSpringX");
}

void GVPhysXConstraintParams_t::SetDriveSpringX(float value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_driveSpringX", true, value);
}

float GVPhysXConstraintParams_t::GetDriveSpringY() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXConstraintParams_t", "m_driveSpringY");
}

void GVPhysXConstraintParams_t::SetDriveSpringY(float value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_driveSpringY", true, value);
}

float GVPhysXConstraintParams_t::GetDriveSpringZ() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXConstraintParams_t", "m_driveSpringZ");
}

void GVPhysXConstraintParams_t::SetDriveSpringZ(float value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_driveSpringZ", true, value);
}

float GVPhysXConstraintParams_t::GetDriveDampingX() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXConstraintParams_t", "m_driveDampingX");
}

void GVPhysXConstraintParams_t::SetDriveDampingX(float value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_driveDampingX", true, value);
}

float GVPhysXConstraintParams_t::GetDriveDampingY() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXConstraintParams_t", "m_driveDampingY");
}

void GVPhysXConstraintParams_t::SetDriveDampingY(float value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_driveDampingY", true, value);
}

float GVPhysXConstraintParams_t::GetDriveDampingZ() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXConstraintParams_t", "m_driveDampingZ");
}

void GVPhysXConstraintParams_t::SetDriveDampingZ(float value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_driveDampingZ", true, value);
}

float GVPhysXConstraintParams_t::GetDriveSpringTwist() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXConstraintParams_t", "m_driveSpringTwist");
}

void GVPhysXConstraintParams_t::SetDriveSpringTwist(float value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_driveSpringTwist", true, value);
}

float GVPhysXConstraintParams_t::GetDriveSpringSwing() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXConstraintParams_t", "m_driveSpringSwing");
}

void GVPhysXConstraintParams_t::SetDriveSpringSwing(float value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_driveSpringSwing", true, value);
}

float GVPhysXConstraintParams_t::GetDriveSpringSlerp() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXConstraintParams_t", "m_driveSpringSlerp");
}

void GVPhysXConstraintParams_t::SetDriveSpringSlerp(float value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_driveSpringSlerp", true, value);
}

float GVPhysXConstraintParams_t::GetDriveDampingTwist() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXConstraintParams_t", "m_driveDampingTwist");
}

void GVPhysXConstraintParams_t::SetDriveDampingTwist(float value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_driveDampingTwist", true, value);
}

float GVPhysXConstraintParams_t::GetDriveDampingSwing() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXConstraintParams_t", "m_driveDampingSwing");
}

void GVPhysXConstraintParams_t::SetDriveDampingSwing(float value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_driveDampingSwing", true, value);
}

float GVPhysXConstraintParams_t::GetDriveDampingSlerp() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXConstraintParams_t", "m_driveDampingSlerp");
}

void GVPhysXConstraintParams_t::SetDriveDampingSlerp(float value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_driveDampingSlerp", true, value);
}

int32_t GVPhysXConstraintParams_t::GetSolverIterationCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "VPhysXConstraintParams_t", "m_solverIterationCount");
}

void GVPhysXConstraintParams_t::SetSolverIterationCount(int32_t value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_solverIterationCount", true, value);
}

float GVPhysXConstraintParams_t::GetProjectionLinearTolerance() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXConstraintParams_t", "m_projectionLinearTolerance");
}

void GVPhysXConstraintParams_t::SetProjectionLinearTolerance(float value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_projectionLinearTolerance", true, value);
}

float GVPhysXConstraintParams_t::GetProjectionAngularTolerance() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXConstraintParams_t", "m_projectionAngularTolerance");
}

void GVPhysXConstraintParams_t::SetProjectionAngularTolerance(float value) {
    SetSchemaValue(m_ptr, "VPhysXConstraintParams_t", "m_projectionAngularTolerance", true, value);
}

std::string GVPhysXConstraintParams_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVPhysXConstraintParams_t::IsValid() {
    return (m_ptr != nullptr);
}

GCMorphRectData::GCMorphRectData(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMorphRectData::GCMorphRectData(void *ptr) {
    m_ptr = ptr;
}

int16_t GCMorphRectData::GetXLeftDst() const {
    return GetSchemaValue<int16_t>(m_ptr, "CMorphRectData", "m_nXLeftDst");
}

void GCMorphRectData::SetXLeftDst(int16_t value) {
    SetSchemaValue(m_ptr, "CMorphRectData", "m_nXLeftDst", false, value);
}

int16_t GCMorphRectData::GetYTopDst() const {
    return GetSchemaValue<int16_t>(m_ptr, "CMorphRectData", "m_nYTopDst");
}

void GCMorphRectData::SetYTopDst(int16_t value) {
    SetSchemaValue(m_ptr, "CMorphRectData", "m_nYTopDst", false, value);
}

float GCMorphRectData::GetUWidthSrc() const {
    return GetSchemaValue<float>(m_ptr, "CMorphRectData", "m_flUWidthSrc");
}

void GCMorphRectData::SetUWidthSrc(float value) {
    SetSchemaValue(m_ptr, "CMorphRectData", "m_flUWidthSrc", false, value);
}

float GCMorphRectData::GetVHeightSrc() const {
    return GetSchemaValue<float>(m_ptr, "CMorphRectData", "m_flVHeightSrc");
}

void GCMorphRectData::SetVHeightSrc(float value) {
    SetSchemaValue(m_ptr, "CMorphRectData", "m_flVHeightSrc", false, value);
}

std::vector<GCMorphBundleData> GCMorphRectData::GetBundleDatas() const {
    CUtlVector<GCMorphBundleData>* vec = GetSchemaValue<CUtlVector<GCMorphBundleData>*>(m_ptr, "CMorphRectData", "m_bundleDatas"); std::vector<GCMorphBundleData> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCMorphRectData::SetBundleDatas(std::vector<GCMorphBundleData> value) {
    SetSchemaValueCUtlVector<GCMorphBundleData>(m_ptr, "CMorphRectData", "m_bundleDatas", false, value);
}

std::string GCMorphRectData::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMorphRectData::IsValid() {
    return (m_ptr != nullptr);
}

GEventServerPollNetworking_t::GEventServerPollNetworking_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEventServerPollNetworking_t::GEventServerPollNetworking_t(void *ptr) {
    m_ptr = ptr;
}

std::string GEventServerPollNetworking_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEventServerPollNetworking_t::IsValid() {
    return (m_ptr != nullptr);
}

GCDspPresetModifierList::GCDspPresetModifierList(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCDspPresetModifierList::GCDspPresetModifierList(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCDspPresetModifierList::GetDspName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CDspPresetModifierList", "m_dspName");
}

void GCDspPresetModifierList::SetDspName(CUtlString value) {
    SetSchemaValue(m_ptr, "CDspPresetModifierList", "m_dspName", false, value);
}

std::vector<GCDSPMixgroupModifier> GCDspPresetModifierList::GetModifiers() const {
    CUtlVector<GCDSPMixgroupModifier>* vec = GetSchemaValue<CUtlVector<GCDSPMixgroupModifier>*>(m_ptr, "CDspPresetModifierList", "m_modifiers"); std::vector<GCDSPMixgroupModifier> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCDspPresetModifierList::SetModifiers(std::vector<GCDSPMixgroupModifier> value) {
    SetSchemaValueCUtlVector<GCDSPMixgroupModifier>(m_ptr, "CDspPresetModifierList", "m_modifiers", false, value);
}

std::string GCDspPresetModifierList::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCDspPresetModifierList::IsValid() {
    return (m_ptr != nullptr);
}

GSkeletonDemoDb_t::GSkeletonDemoDb_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GSkeletonDemoDb_t::GSkeletonDemoDb_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<GSkeletonAnimCapture_t*> GSkeletonDemoDb_t::GetAnimCaptures() const {
    CUtlVector<GSkeletonAnimCapture_t*>* vec = GetSchemaValue<CUtlVector<GSkeletonAnimCapture_t*>*>(m_ptr, "SkeletonDemoDb_t", "m_AnimCaptures"); std::vector<GSkeletonAnimCapture_t*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GSkeletonDemoDb_t::SetAnimCaptures(std::vector<GSkeletonAnimCapture_t*> value) {
    SetSchemaValueCUtlVector<GSkeletonAnimCapture_t*>(m_ptr, "SkeletonDemoDb_t", "m_AnimCaptures", true, value);
}

std::vector<GSkeletonAnimCapture_t> GSkeletonDemoDb_t::GetCameraTrack() const {
    CUtlVector<GSkeletonAnimCapture_t>* vec = GetSchemaValue<CUtlVector<GSkeletonAnimCapture_t>*>(m_ptr, "SkeletonDemoDb_t", "m_CameraTrack"); std::vector<GSkeletonAnimCapture_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GSkeletonDemoDb_t::SetCameraTrack(std::vector<GSkeletonAnimCapture_t> value) {
    SetSchemaValueCUtlVector<GSkeletonAnimCapture_t>(m_ptr, "SkeletonDemoDb_t", "m_CameraTrack", true, value);
}

float GSkeletonDemoDb_t::GetRecordingTime() const {
    return GetSchemaValue<float>(m_ptr, "SkeletonDemoDb_t", "m_flRecordingTime");
}

void GSkeletonDemoDb_t::SetRecordingTime(float value) {
    SetSchemaValue(m_ptr, "SkeletonDemoDb_t", "m_flRecordingTime", true, value);
}

std::string GSkeletonDemoDb_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GSkeletonDemoDb_t::IsValid() {
    return (m_ptr != nullptr);
}

GCRenderGroom::GCRenderGroom(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCRenderGroom::GCRenderGroom(void *ptr) {
    m_ptr = ptr;
}

std::vector<GRenderHairStrandInfo_t> GCRenderGroom::GetHairs() const {
    CUtlVector<GRenderHairStrandInfo_t>* vec = GetSchemaValue<CUtlVector<GRenderHairStrandInfo_t>*>(m_ptr, "CRenderGroom", "m_hairs"); std::vector<GRenderHairStrandInfo_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCRenderGroom::SetHairs(std::vector<GRenderHairStrandInfo_t> value) {
    SetSchemaValueCUtlVector<GRenderHairStrandInfo_t>(m_ptr, "CRenderGroom", "m_hairs", false, value);
}

int32_t GCRenderGroom::GetSegmentsPerHairStrand() const {
    return GetSchemaValue<int32_t>(m_ptr, "CRenderGroom", "m_nSegmentsPerHairStrand");
}

void GCRenderGroom::SetSegmentsPerHairStrand(int32_t value) {
    SetSchemaValue(m_ptr, "CRenderGroom", "m_nSegmentsPerHairStrand", false, value);
}

int32_t GCRenderGroom::GetGuideHairCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CRenderGroom", "m_nGuideHairCount");
}

void GCRenderGroom::SetGuideHairCount(int32_t value) {
    SetSchemaValue(m_ptr, "CRenderGroom", "m_nGuideHairCount", false, value);
}

int32_t GCRenderGroom::GetHairCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CRenderGroom", "m_nHairCount");
}

void GCRenderGroom::SetHairCount(int32_t value) {
    SetSchemaValue(m_ptr, "CRenderGroom", "m_nHairCount", false, value);
}

int32_t GCRenderGroom::GetGroomGroupID() const {
    return GetSchemaValue<int32_t>(m_ptr, "CRenderGroom", "m_nGroomGroupID");
}

void GCRenderGroom::SetGroomGroupID(int32_t value) {
    SetSchemaValue(m_ptr, "CRenderGroom", "m_nGroomGroupID", false, value);
}

int32_t GCRenderGroom::GetAttachBoneIdx() const {
    return GetSchemaValue<int32_t>(m_ptr, "CRenderGroom", "m_nAttachBoneIdx");
}

void GCRenderGroom::SetAttachBoneIdx(int32_t value) {
    SetSchemaValue(m_ptr, "CRenderGroom", "m_nAttachBoneIdx", false, value);
}

int32_t GCRenderGroom::GetAttachMeshIdx() const {
    return GetSchemaValue<int32_t>(m_ptr, "CRenderGroom", "m_nAttachMeshIdx");
}

void GCRenderGroom::SetAttachMeshIdx(int32_t value) {
    SetSchemaValue(m_ptr, "CRenderGroom", "m_nAttachMeshIdx", false, value);
}

int32_t GCRenderGroom::GetAttachMeshDrawCallIdx() const {
    return GetSchemaValue<int32_t>(m_ptr, "CRenderGroom", "m_nAttachMeshDrawCallIdx");
}

void GCRenderGroom::SetAttachMeshDrawCallIdx(int32_t value) {
    SetSchemaValue(m_ptr, "CRenderGroom", "m_nAttachMeshDrawCallIdx", false, value);
}

float GCRenderGroom::GetSumOfAllHairLengths() const {
    return GetSchemaValue<float>(m_ptr, "CRenderGroom", "m_flSumOfAllHairLengths");
}

void GCRenderGroom::SetSumOfAllHairLengths(float value) {
    SetSchemaValue(m_ptr, "CRenderGroom", "m_flSumOfAllHairLengths", false, value);
}

bool GCRenderGroom::GetEnableSimulation() const {
    return GetSchemaValue<bool>(m_ptr, "CRenderGroom", "m_bEnableSimulation");
}

void GCRenderGroom::SetEnableSimulation(bool value) {
    SetSchemaValue(m_ptr, "CRenderGroom", "m_bEnableSimulation", false, value);
}

std::string GCRenderGroom::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCRenderGroom::IsValid() {
    return (m_ptr != nullptr);
}

GCUnaryUpdateNode::GCUnaryUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCUnaryUpdateNode::GCUnaryUpdateNode(void *ptr) {
    m_ptr = ptr;
}

GCAnimUpdateNodeRef GCUnaryUpdateNode::GetChildNode() const {
    return GetSchemaValue<GCAnimUpdateNodeRef>(m_ptr, "CUnaryUpdateNode", "m_pChildNode");
}

void GCUnaryUpdateNode::SetChildNode(GCAnimUpdateNodeRef value) {
    SetSchemaValue(m_ptr, "CUnaryUpdateNode", "m_pChildNode", false, value);
}

std::string GCUnaryUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCUnaryUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GCBlendCurve::GCBlendCurve(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBlendCurve::GCBlendCurve(void *ptr) {
    m_ptr = ptr;
}

float GCBlendCurve::GetControlPoint1() const {
    return GetSchemaValue<float>(m_ptr, "CBlendCurve", "m_flControlPoint1");
}

void GCBlendCurve::SetControlPoint1(float value) {
    SetSchemaValue(m_ptr, "CBlendCurve", "m_flControlPoint1", false, value);
}

float GCBlendCurve::GetControlPoint2() const {
    return GetSchemaValue<float>(m_ptr, "CBlendCurve", "m_flControlPoint2");
}

void GCBlendCurve::SetControlPoint2(float value) {
    SetSchemaValue(m_ptr, "CBlendCurve", "m_flControlPoint2", false, value);
}

std::string GCBlendCurve::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBlendCurve::IsValid() {
    return (m_ptr != nullptr);
}

GChangeAccessorFieldPathIndex_t::GChangeAccessorFieldPathIndex_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GChangeAccessorFieldPathIndex_t::GChangeAccessorFieldPathIndex_t(void *ptr) {
    m_ptr = ptr;
}

int16_t GChangeAccessorFieldPathIndex_t::GetValue() const {
    return GetSchemaValue<int16_t>(m_ptr, "ChangeAccessorFieldPathIndex_t", "m_Value");
}

void GChangeAccessorFieldPathIndex_t::SetValue(int16_t value) {
    SetSchemaValue(m_ptr, "ChangeAccessorFieldPathIndex_t", "m_Value", true, value);
}

std::string GChangeAccessorFieldPathIndex_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GChangeAccessorFieldPathIndex_t::IsValid() {
    return (m_ptr != nullptr);
}

GFeKelagerBend2_t::GFeKelagerBend2_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeKelagerBend2_t::GFeKelagerBend2_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<float> GFeKelagerBend2_t::GetWeight() const {
    float* outValue = GetSchemaValue<float*>(m_ptr, "FeKelagerBend2_t", "flWeight"); std::vector<float> ret; for(int i = 0; i < 3; i++) { ret.push_back(outValue[i]); } return ret;
}

void GFeKelagerBend2_t::SetWeight(std::vector<float> value) {
    float* outValue = GetSchemaValue<float*>(m_ptr, "FeKelagerBend2_t", "flWeight"); for(int i = 0; i < 3; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "FeKelagerBend2_t", "flWeight", true, outValue);
}

float GFeKelagerBend2_t::GetHeight0() const {
    return GetSchemaValue<float>(m_ptr, "FeKelagerBend2_t", "flHeight0");
}

void GFeKelagerBend2_t::SetHeight0(float value) {
    SetSchemaValue(m_ptr, "FeKelagerBend2_t", "flHeight0", true, value);
}

std::vector<uint16_t> GFeKelagerBend2_t::GetNode() const {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeKelagerBend2_t", "nNode"); std::vector<uint16_t> ret; for(int i = 0; i < 3; i++) { ret.push_back(outValue[i]); } return ret;
}

void GFeKelagerBend2_t::SetNode(std::vector<uint16_t> value) {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeKelagerBend2_t", "nNode"); for(int i = 0; i < 3; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "FeKelagerBend2_t", "nNode", true, outValue);
}

uint16_t GFeKelagerBend2_t::GetReserved() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeKelagerBend2_t", "nReserved");
}

void GFeKelagerBend2_t::SetReserved(uint16_t value) {
    SetSchemaValue(m_ptr, "FeKelagerBend2_t", "nReserved", true, value);
}

std::string GFeKelagerBend2_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeKelagerBend2_t::IsValid() {
    return (m_ptr != nullptr);
}

GCMorphSetData::GCMorphSetData(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMorphSetData::GCMorphSetData(void *ptr) {
    m_ptr = ptr;
}

int32_t GCMorphSetData::GetWidth() const {
    return GetSchemaValue<int32_t>(m_ptr, "CMorphSetData", "m_nWidth");
}

void GCMorphSetData::SetWidth(int32_t value) {
    SetSchemaValue(m_ptr, "CMorphSetData", "m_nWidth", false, value);
}

int32_t GCMorphSetData::GetHeight() const {
    return GetSchemaValue<int32_t>(m_ptr, "CMorphSetData", "m_nHeight");
}

void GCMorphSetData::SetHeight(int32_t value) {
    SetSchemaValue(m_ptr, "CMorphSetData", "m_nHeight", false, value);
}

std::vector<MorphBundleType_t> GCMorphSetData::GetBundleTypes() const {
    CUtlVector<MorphBundleType_t>* vec = GetSchemaValue<CUtlVector<MorphBundleType_t>*>(m_ptr, "CMorphSetData", "m_bundleTypes"); std::vector<MorphBundleType_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCMorphSetData::SetBundleTypes(std::vector<MorphBundleType_t> value) {
    SetSchemaValueCUtlVector<MorphBundleType_t>(m_ptr, "CMorphSetData", "m_bundleTypes", false, value);
}

std::vector<GCMorphData> GCMorphSetData::GetMorphDatas() const {
    CUtlVector<GCMorphData>* vec = GetSchemaValue<CUtlVector<GCMorphData>*>(m_ptr, "CMorphSetData", "m_morphDatas"); std::vector<GCMorphData> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCMorphSetData::SetMorphDatas(std::vector<GCMorphData> value) {
    SetSchemaValueCUtlVector<GCMorphData>(m_ptr, "CMorphSetData", "m_morphDatas", false, value);
}

std::vector<GCFlexDesc> GCMorphSetData::GetFlexDesc() const {
    CUtlVector<GCFlexDesc>* vec = GetSchemaValue<CUtlVector<GCFlexDesc>*>(m_ptr, "CMorphSetData", "m_FlexDesc"); std::vector<GCFlexDesc> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCMorphSetData::SetFlexDesc(std::vector<GCFlexDesc> value) {
    SetSchemaValueCUtlVector<GCFlexDesc>(m_ptr, "CMorphSetData", "m_FlexDesc", false, value);
}

std::vector<GCFlexController> GCMorphSetData::GetFlexControllers() const {
    CUtlVector<GCFlexController>* vec = GetSchemaValue<CUtlVector<GCFlexController>*>(m_ptr, "CMorphSetData", "m_FlexControllers"); std::vector<GCFlexController> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCMorphSetData::SetFlexControllers(std::vector<GCFlexController> value) {
    SetSchemaValueCUtlVector<GCFlexController>(m_ptr, "CMorphSetData", "m_FlexControllers", false, value);
}

std::vector<GCFlexRule> GCMorphSetData::GetFlexRules() const {
    CUtlVector<GCFlexRule>* vec = GetSchemaValue<CUtlVector<GCFlexRule>*>(m_ptr, "CMorphSetData", "m_FlexRules"); std::vector<GCFlexRule> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCMorphSetData::SetFlexRules(std::vector<GCFlexRule> value) {
    SetSchemaValueCUtlVector<GCFlexRule>(m_ptr, "CMorphSetData", "m_FlexRules", false, value);
}

std::string GCMorphSetData::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMorphSetData::IsValid() {
    return (m_ptr != nullptr);
}

GCBinaryUpdateNode::GCBinaryUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBinaryUpdateNode::GCBinaryUpdateNode(void *ptr) {
    m_ptr = ptr;
}

GCAnimUpdateNodeRef GCBinaryUpdateNode::GetChild1() const {
    return GetSchemaValue<GCAnimUpdateNodeRef>(m_ptr, "CBinaryUpdateNode", "m_pChild1");
}

void GCBinaryUpdateNode::SetChild1(GCAnimUpdateNodeRef value) {
    SetSchemaValue(m_ptr, "CBinaryUpdateNode", "m_pChild1", false, value);
}

GCAnimUpdateNodeRef GCBinaryUpdateNode::GetChild2() const {
    return GetSchemaValue<GCAnimUpdateNodeRef>(m_ptr, "CBinaryUpdateNode", "m_pChild2");
}

void GCBinaryUpdateNode::SetChild2(GCAnimUpdateNodeRef value) {
    SetSchemaValue(m_ptr, "CBinaryUpdateNode", "m_pChild2", false, value);
}

BinaryNodeTiming GCBinaryUpdateNode::GetTimingBehavior() const {
    return GetSchemaValue<BinaryNodeTiming>(m_ptr, "CBinaryUpdateNode", "m_timingBehavior");
}

void GCBinaryUpdateNode::SetTimingBehavior(BinaryNodeTiming value) {
    SetSchemaValue(m_ptr, "CBinaryUpdateNode", "m_timingBehavior", false, value);
}

float GCBinaryUpdateNode::GetTimingBlend() const {
    return GetSchemaValue<float>(m_ptr, "CBinaryUpdateNode", "m_flTimingBlend");
}

void GCBinaryUpdateNode::SetTimingBlend(float value) {
    SetSchemaValue(m_ptr, "CBinaryUpdateNode", "m_flTimingBlend", false, value);
}

bool GCBinaryUpdateNode::GetResetChild1() const {
    return GetSchemaValue<bool>(m_ptr, "CBinaryUpdateNode", "m_bResetChild1");
}

void GCBinaryUpdateNode::SetResetChild1(bool value) {
    SetSchemaValue(m_ptr, "CBinaryUpdateNode", "m_bResetChild1", false, value);
}

bool GCBinaryUpdateNode::GetResetChild2() const {
    return GetSchemaValue<bool>(m_ptr, "CBinaryUpdateNode", "m_bResetChild2");
}

void GCBinaryUpdateNode::SetResetChild2(bool value) {
    SetSchemaValue(m_ptr, "CBinaryUpdateNode", "m_bResetChild2", false, value);
}

std::string GCBinaryUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBinaryUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

Gconstraint_axislimit_t::Gconstraint_axislimit_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

Gconstraint_axislimit_t::Gconstraint_axislimit_t(void *ptr) {
    m_ptr = ptr;
}

float Gconstraint_axislimit_t::GetMinRotation() const {
    return GetSchemaValue<float>(m_ptr, "constraint_axislimit_t", "flMinRotation");
}

void Gconstraint_axislimit_t::SetMinRotation(float value) {
    SetSchemaValue(m_ptr, "constraint_axislimit_t", "flMinRotation", true, value);
}

float Gconstraint_axislimit_t::GetMaxRotation() const {
    return GetSchemaValue<float>(m_ptr, "constraint_axislimit_t", "flMaxRotation");
}

void Gconstraint_axislimit_t::SetMaxRotation(float value) {
    SetSchemaValue(m_ptr, "constraint_axislimit_t", "flMaxRotation", true, value);
}

float Gconstraint_axislimit_t::GetMotorTargetAngSpeed() const {
    return GetSchemaValue<float>(m_ptr, "constraint_axislimit_t", "flMotorTargetAngSpeed");
}

void Gconstraint_axislimit_t::SetMotorTargetAngSpeed(float value) {
    SetSchemaValue(m_ptr, "constraint_axislimit_t", "flMotorTargetAngSpeed", true, value);
}

float Gconstraint_axislimit_t::GetMotorMaxTorque() const {
    return GetSchemaValue<float>(m_ptr, "constraint_axislimit_t", "flMotorMaxTorque");
}

void Gconstraint_axislimit_t::SetMotorMaxTorque(float value) {
    SetSchemaValue(m_ptr, "constraint_axislimit_t", "flMotorMaxTorque", true, value);
}

std::string Gconstraint_axislimit_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool Gconstraint_axislimit_t::IsValid() {
    return (m_ptr != nullptr);
}

GFuseFunctionIndex_t::GFuseFunctionIndex_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFuseFunctionIndex_t::GFuseFunctionIndex_t(void *ptr) {
    m_ptr = ptr;
}

uint16_t GFuseFunctionIndex_t::GetValue() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FuseFunctionIndex_t", "m_Value");
}

void GFuseFunctionIndex_t::SetValue(uint16_t value) {
    SetSchemaValue(m_ptr, "FuseFunctionIndex_t", "m_Value", true, value);
}

std::string GFuseFunctionIndex_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFuseFunctionIndex_t::IsValid() {
    return (m_ptr != nullptr);
}

GCGeneralSpin::GCGeneralSpin(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCGeneralSpin::GCGeneralSpin(void *ptr) {
    m_ptr = ptr;
}

int32_t GCGeneralSpin::GetSpinRateDegrees() const {
    return GetSchemaValue<int32_t>(m_ptr, "CGeneralSpin", "m_nSpinRateDegrees");
}

void GCGeneralSpin::SetSpinRateDegrees(int32_t value) {
    SetSchemaValue(m_ptr, "CGeneralSpin", "m_nSpinRateDegrees", false, value);
}

int32_t GCGeneralSpin::GetSpinRateMinDegrees() const {
    return GetSchemaValue<int32_t>(m_ptr, "CGeneralSpin", "m_nSpinRateMinDegrees");
}

void GCGeneralSpin::SetSpinRateMinDegrees(int32_t value) {
    SetSchemaValue(m_ptr, "CGeneralSpin", "m_nSpinRateMinDegrees", false, value);
}

float GCGeneralSpin::GetSpinRateStopTime() const {
    return GetSchemaValue<float>(m_ptr, "CGeneralSpin", "m_fSpinRateStopTime");
}

void GCGeneralSpin::SetSpinRateStopTime(float value) {
    SetSchemaValue(m_ptr, "CGeneralSpin", "m_fSpinRateStopTime", false, value);
}

std::string GCGeneralSpin::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCGeneralSpin::IsValid() {
    return (m_ptr != nullptr);
}

GCFeJiggleBone::GCFeJiggleBone(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFeJiggleBone::GCFeJiggleBone(void *ptr) {
    m_ptr = ptr;
}

uint32_t GCFeJiggleBone::GetFlags() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CFeJiggleBone", "m_nFlags");
}

void GCFeJiggleBone::SetFlags(uint32_t value) {
    SetSchemaValue(m_ptr, "CFeJiggleBone", "m_nFlags", false, value);
}

float GCFeJiggleBone::GetLength() const {
    return GetSchemaValue<float>(m_ptr, "CFeJiggleBone", "m_flLength");
}

void GCFeJiggleBone::SetLength(float value) {
    SetSchemaValue(m_ptr, "CFeJiggleBone", "m_flLength", false, value);
}

float GCFeJiggleBone::GetTipMass() const {
    return GetSchemaValue<float>(m_ptr, "CFeJiggleBone", "m_flTipMass");
}

void GCFeJiggleBone::SetTipMass(float value) {
    SetSchemaValue(m_ptr, "CFeJiggleBone", "m_flTipMass", false, value);
}

float GCFeJiggleBone::GetYawStiffness() const {
    return GetSchemaValue<float>(m_ptr, "CFeJiggleBone", "m_flYawStiffness");
}

void GCFeJiggleBone::SetYawStiffness(float value) {
    SetSchemaValue(m_ptr, "CFeJiggleBone", "m_flYawStiffness", false, value);
}

float GCFeJiggleBone::GetYawDamping() const {
    return GetSchemaValue<float>(m_ptr, "CFeJiggleBone", "m_flYawDamping");
}

void GCFeJiggleBone::SetYawDamping(float value) {
    SetSchemaValue(m_ptr, "CFeJiggleBone", "m_flYawDamping", false, value);
}

float GCFeJiggleBone::GetPitchStiffness() const {
    return GetSchemaValue<float>(m_ptr, "CFeJiggleBone", "m_flPitchStiffness");
}

void GCFeJiggleBone::SetPitchStiffness(float value) {
    SetSchemaValue(m_ptr, "CFeJiggleBone", "m_flPitchStiffness", false, value);
}

float GCFeJiggleBone::GetPitchDamping() const {
    return GetSchemaValue<float>(m_ptr, "CFeJiggleBone", "m_flPitchDamping");
}

void GCFeJiggleBone::SetPitchDamping(float value) {
    SetSchemaValue(m_ptr, "CFeJiggleBone", "m_flPitchDamping", false, value);
}

float GCFeJiggleBone::GetAlongStiffness() const {
    return GetSchemaValue<float>(m_ptr, "CFeJiggleBone", "m_flAlongStiffness");
}

void GCFeJiggleBone::SetAlongStiffness(float value) {
    SetSchemaValue(m_ptr, "CFeJiggleBone", "m_flAlongStiffness", false, value);
}

float GCFeJiggleBone::GetAlongDamping() const {
    return GetSchemaValue<float>(m_ptr, "CFeJiggleBone", "m_flAlongDamping");
}

void GCFeJiggleBone::SetAlongDamping(float value) {
    SetSchemaValue(m_ptr, "CFeJiggleBone", "m_flAlongDamping", false, value);
}

float GCFeJiggleBone::GetAngleLimit() const {
    return GetSchemaValue<float>(m_ptr, "CFeJiggleBone", "m_flAngleLimit");
}

void GCFeJiggleBone::SetAngleLimit(float value) {
    SetSchemaValue(m_ptr, "CFeJiggleBone", "m_flAngleLimit", false, value);
}

float GCFeJiggleBone::GetMinYaw() const {
    return GetSchemaValue<float>(m_ptr, "CFeJiggleBone", "m_flMinYaw");
}

void GCFeJiggleBone::SetMinYaw(float value) {
    SetSchemaValue(m_ptr, "CFeJiggleBone", "m_flMinYaw", false, value);
}

float GCFeJiggleBone::GetMaxYaw() const {
    return GetSchemaValue<float>(m_ptr, "CFeJiggleBone", "m_flMaxYaw");
}

void GCFeJiggleBone::SetMaxYaw(float value) {
    SetSchemaValue(m_ptr, "CFeJiggleBone", "m_flMaxYaw", false, value);
}

float GCFeJiggleBone::GetYawFriction() const {
    return GetSchemaValue<float>(m_ptr, "CFeJiggleBone", "m_flYawFriction");
}

void GCFeJiggleBone::SetYawFriction(float value) {
    SetSchemaValue(m_ptr, "CFeJiggleBone", "m_flYawFriction", false, value);
}

float GCFeJiggleBone::GetYawBounce() const {
    return GetSchemaValue<float>(m_ptr, "CFeJiggleBone", "m_flYawBounce");
}

void GCFeJiggleBone::SetYawBounce(float value) {
    SetSchemaValue(m_ptr, "CFeJiggleBone", "m_flYawBounce", false, value);
}

float GCFeJiggleBone::GetMinPitch() const {
    return GetSchemaValue<float>(m_ptr, "CFeJiggleBone", "m_flMinPitch");
}

void GCFeJiggleBone::SetMinPitch(float value) {
    SetSchemaValue(m_ptr, "CFeJiggleBone", "m_flMinPitch", false, value);
}

float GCFeJiggleBone::GetMaxPitch() const {
    return GetSchemaValue<float>(m_ptr, "CFeJiggleBone", "m_flMaxPitch");
}

void GCFeJiggleBone::SetMaxPitch(float value) {
    SetSchemaValue(m_ptr, "CFeJiggleBone", "m_flMaxPitch", false, value);
}

float GCFeJiggleBone::GetPitchFriction() const {
    return GetSchemaValue<float>(m_ptr, "CFeJiggleBone", "m_flPitchFriction");
}

void GCFeJiggleBone::SetPitchFriction(float value) {
    SetSchemaValue(m_ptr, "CFeJiggleBone", "m_flPitchFriction", false, value);
}

float GCFeJiggleBone::GetPitchBounce() const {
    return GetSchemaValue<float>(m_ptr, "CFeJiggleBone", "m_flPitchBounce");
}

void GCFeJiggleBone::SetPitchBounce(float value) {
    SetSchemaValue(m_ptr, "CFeJiggleBone", "m_flPitchBounce", false, value);
}

float GCFeJiggleBone::GetBaseMass() const {
    return GetSchemaValue<float>(m_ptr, "CFeJiggleBone", "m_flBaseMass");
}

void GCFeJiggleBone::SetBaseMass(float value) {
    SetSchemaValue(m_ptr, "CFeJiggleBone", "m_flBaseMass", false, value);
}

float GCFeJiggleBone::GetBaseStiffness() const {
    return GetSchemaValue<float>(m_ptr, "CFeJiggleBone", "m_flBaseStiffness");
}

void GCFeJiggleBone::SetBaseStiffness(float value) {
    SetSchemaValue(m_ptr, "CFeJiggleBone", "m_flBaseStiffness", false, value);
}

float GCFeJiggleBone::GetBaseDamping() const {
    return GetSchemaValue<float>(m_ptr, "CFeJiggleBone", "m_flBaseDamping");
}

void GCFeJiggleBone::SetBaseDamping(float value) {
    SetSchemaValue(m_ptr, "CFeJiggleBone", "m_flBaseDamping", false, value);
}

float GCFeJiggleBone::GetBaseMinLeft() const {
    return GetSchemaValue<float>(m_ptr, "CFeJiggleBone", "m_flBaseMinLeft");
}

void GCFeJiggleBone::SetBaseMinLeft(float value) {
    SetSchemaValue(m_ptr, "CFeJiggleBone", "m_flBaseMinLeft", false, value);
}

float GCFeJiggleBone::GetBaseMaxLeft() const {
    return GetSchemaValue<float>(m_ptr, "CFeJiggleBone", "m_flBaseMaxLeft");
}

void GCFeJiggleBone::SetBaseMaxLeft(float value) {
    SetSchemaValue(m_ptr, "CFeJiggleBone", "m_flBaseMaxLeft", false, value);
}

float GCFeJiggleBone::GetBaseLeftFriction() const {
    return GetSchemaValue<float>(m_ptr, "CFeJiggleBone", "m_flBaseLeftFriction");
}

void GCFeJiggleBone::SetBaseLeftFriction(float value) {
    SetSchemaValue(m_ptr, "CFeJiggleBone", "m_flBaseLeftFriction", false, value);
}

float GCFeJiggleBone::GetBaseMinUp() const {
    return GetSchemaValue<float>(m_ptr, "CFeJiggleBone", "m_flBaseMinUp");
}

void GCFeJiggleBone::SetBaseMinUp(float value) {
    SetSchemaValue(m_ptr, "CFeJiggleBone", "m_flBaseMinUp", false, value);
}

float GCFeJiggleBone::GetBaseMaxUp() const {
    return GetSchemaValue<float>(m_ptr, "CFeJiggleBone", "m_flBaseMaxUp");
}

void GCFeJiggleBone::SetBaseMaxUp(float value) {
    SetSchemaValue(m_ptr, "CFeJiggleBone", "m_flBaseMaxUp", false, value);
}

float GCFeJiggleBone::GetBaseUpFriction() const {
    return GetSchemaValue<float>(m_ptr, "CFeJiggleBone", "m_flBaseUpFriction");
}

void GCFeJiggleBone::SetBaseUpFriction(float value) {
    SetSchemaValue(m_ptr, "CFeJiggleBone", "m_flBaseUpFriction", false, value);
}

float GCFeJiggleBone::GetBaseMinForward() const {
    return GetSchemaValue<float>(m_ptr, "CFeJiggleBone", "m_flBaseMinForward");
}

void GCFeJiggleBone::SetBaseMinForward(float value) {
    SetSchemaValue(m_ptr, "CFeJiggleBone", "m_flBaseMinForward", false, value);
}

float GCFeJiggleBone::GetBaseMaxForward() const {
    return GetSchemaValue<float>(m_ptr, "CFeJiggleBone", "m_flBaseMaxForward");
}

void GCFeJiggleBone::SetBaseMaxForward(float value) {
    SetSchemaValue(m_ptr, "CFeJiggleBone", "m_flBaseMaxForward", false, value);
}

float GCFeJiggleBone::GetBaseForwardFriction() const {
    return GetSchemaValue<float>(m_ptr, "CFeJiggleBone", "m_flBaseForwardFriction");
}

void GCFeJiggleBone::SetBaseForwardFriction(float value) {
    SetSchemaValue(m_ptr, "CFeJiggleBone", "m_flBaseForwardFriction", false, value);
}

float GCFeJiggleBone::GetRadius0() const {
    return GetSchemaValue<float>(m_ptr, "CFeJiggleBone", "m_flRadius0");
}

void GCFeJiggleBone::SetRadius0(float value) {
    SetSchemaValue(m_ptr, "CFeJiggleBone", "m_flRadius0", false, value);
}

float GCFeJiggleBone::GetRadius1() const {
    return GetSchemaValue<float>(m_ptr, "CFeJiggleBone", "m_flRadius1");
}

void GCFeJiggleBone::SetRadius1(float value) {
    SetSchemaValue(m_ptr, "CFeJiggleBone", "m_flRadius1", false, value);
}

Vector GCFeJiggleBone::GetPoint0() const {
    return GetSchemaValue<Vector>(m_ptr, "CFeJiggleBone", "m_vPoint0");
}

void GCFeJiggleBone::SetPoint0(Vector value) {
    SetSchemaValue(m_ptr, "CFeJiggleBone", "m_vPoint0", false, value);
}

Vector GCFeJiggleBone::GetPoint1() const {
    return GetSchemaValue<Vector>(m_ptr, "CFeJiggleBone", "m_vPoint1");
}

void GCFeJiggleBone::SetPoint1(Vector value) {
    SetSchemaValue(m_ptr, "CFeJiggleBone", "m_vPoint1", false, value);
}

uint16_t GCFeJiggleBone::GetCollisionMask() const {
    return GetSchemaValue<uint16_t>(m_ptr, "CFeJiggleBone", "m_nCollisionMask");
}

void GCFeJiggleBone::SetCollisionMask(uint16_t value) {
    SetSchemaValue(m_ptr, "CFeJiggleBone", "m_nCollisionMask", false, value);
}

std::string GCFeJiggleBone::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFeJiggleBone::IsValid() {
    return (m_ptr != nullptr);
}

GCGlowOverlay::GCGlowOverlay(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCGlowOverlay::GCGlowOverlay(void *ptr) {
    m_ptr = ptr;
}

Vector GCGlowOverlay::GetPos() const {
    return GetSchemaValue<Vector>(m_ptr, "CGlowOverlay", "m_vPos");
}

void GCGlowOverlay::SetPos(Vector value) {
    SetSchemaValue(m_ptr, "CGlowOverlay", "m_vPos", false, value);
}

bool GCGlowOverlay::GetDirectional() const {
    return GetSchemaValue<bool>(m_ptr, "CGlowOverlay", "m_bDirectional");
}

void GCGlowOverlay::SetDirectional(bool value) {
    SetSchemaValue(m_ptr, "CGlowOverlay", "m_bDirectional", false, value);
}

Vector GCGlowOverlay::GetDirection() const {
    return GetSchemaValue<Vector>(m_ptr, "CGlowOverlay", "m_vDirection");
}

void GCGlowOverlay::SetDirection(Vector value) {
    SetSchemaValue(m_ptr, "CGlowOverlay", "m_vDirection", false, value);
}

bool GCGlowOverlay::GetInSky() const {
    return GetSchemaValue<bool>(m_ptr, "CGlowOverlay", "m_bInSky");
}

void GCGlowOverlay::SetInSky(bool value) {
    SetSchemaValue(m_ptr, "CGlowOverlay", "m_bInSky", false, value);
}

float GCGlowOverlay::GetSkyObstructionScale() const {
    return GetSchemaValue<float>(m_ptr, "CGlowOverlay", "m_skyObstructionScale");
}

void GCGlowOverlay::SetSkyObstructionScale(float value) {
    SetSchemaValue(m_ptr, "CGlowOverlay", "m_skyObstructionScale", false, value);
}

std::vector<GCGlowSprite> GCGlowOverlay::GetSprites() const {
    GCGlowSprite* outValue = GetSchemaValue<GCGlowSprite*>(m_ptr, "CGlowOverlay", "m_Sprites"); std::vector<GCGlowSprite> ret; for(int i = 0; i < 4; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCGlowOverlay::SetSprites(std::vector<GCGlowSprite> value) {
    GCGlowSprite* outValue = GetSchemaValue<GCGlowSprite*>(m_ptr, "CGlowOverlay", "m_Sprites"); for(int i = 0; i < 4; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CGlowOverlay", "m_Sprites", false, outValue);
}

int32_t GCGlowOverlay::GetSprites1() const {
    return GetSchemaValue<int32_t>(m_ptr, "CGlowOverlay", "m_nSprites");
}

void GCGlowOverlay::SetSprites1(int32_t value) {
    SetSchemaValue(m_ptr, "CGlowOverlay", "m_nSprites", false, value);
}

float GCGlowOverlay::GetProxyRadius() const {
    return GetSchemaValue<float>(m_ptr, "CGlowOverlay", "m_flProxyRadius");
}

void GCGlowOverlay::SetProxyRadius(float value) {
    SetSchemaValue(m_ptr, "CGlowOverlay", "m_flProxyRadius", false, value);
}

float GCGlowOverlay::GetHDRColorScale() const {
    return GetSchemaValue<float>(m_ptr, "CGlowOverlay", "m_flHDRColorScale");
}

void GCGlowOverlay::SetHDRColorScale(float value) {
    SetSchemaValue(m_ptr, "CGlowOverlay", "m_flHDRColorScale", false, value);
}

float GCGlowOverlay::GetGlowObstructionScale() const {
    return GetSchemaValue<float>(m_ptr, "CGlowOverlay", "m_flGlowObstructionScale");
}

void GCGlowOverlay::SetGlowObstructionScale(float value) {
    SetSchemaValue(m_ptr, "CGlowOverlay", "m_flGlowObstructionScale", false, value);
}

bool GCGlowOverlay::GetCacheGlowObstruction() const {
    return GetSchemaValue<bool>(m_ptr, "CGlowOverlay", "m_bCacheGlowObstruction");
}

void GCGlowOverlay::SetCacheGlowObstruction(bool value) {
    SetSchemaValue(m_ptr, "CGlowOverlay", "m_bCacheGlowObstruction", false, value);
}

bool GCGlowOverlay::GetCacheSkyObstruction() const {
    return GetSchemaValue<bool>(m_ptr, "CGlowOverlay", "m_bCacheSkyObstruction");
}

void GCGlowOverlay::SetCacheSkyObstruction(bool value) {
    SetSchemaValue(m_ptr, "CGlowOverlay", "m_bCacheSkyObstruction", false, value);
}

int16_t GCGlowOverlay::GetActivated() const {
    return GetSchemaValue<int16_t>(m_ptr, "CGlowOverlay", "m_bActivated");
}

void GCGlowOverlay::SetActivated(int16_t value) {
    SetSchemaValue(m_ptr, "CGlowOverlay", "m_bActivated", false, value);
}

uint16_t GCGlowOverlay::GetListIndex() const {
    return GetSchemaValue<uint16_t>(m_ptr, "CGlowOverlay", "m_ListIndex");
}

void GCGlowOverlay::SetListIndex(uint16_t value) {
    SetSchemaValue(m_ptr, "CGlowOverlay", "m_ListIndex", false, value);
}

int32_t GCGlowOverlay::GetQueryHandle() const {
    return GetSchemaValue<int32_t>(m_ptr, "CGlowOverlay", "m_queryHandle");
}

void GCGlowOverlay::SetQueryHandle(int32_t value) {
    SetSchemaValue(m_ptr, "CGlowOverlay", "m_queryHandle", false, value);
}

std::string GCGlowOverlay::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCGlowOverlay::IsValid() {
    return (m_ptr != nullptr);
}

GTextureControls_t::GTextureControls_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GTextureControls_t::GTextureControls_t(void *ptr) {
    m_ptr = ptr;
}

GCParticleCollectionRendererFloatInput GTextureControls_t::GetFinalTextureScaleU() const {
    return GetSchemaValue<GCParticleCollectionRendererFloatInput>(m_ptr, "TextureControls_t", "m_flFinalTextureScaleU");
}

void GTextureControls_t::SetFinalTextureScaleU(GCParticleCollectionRendererFloatInput value) {
    SetSchemaValue(m_ptr, "TextureControls_t", "m_flFinalTextureScaleU", true, value);
}

GCParticleCollectionRendererFloatInput GTextureControls_t::GetFinalTextureScaleV() const {
    return GetSchemaValue<GCParticleCollectionRendererFloatInput>(m_ptr, "TextureControls_t", "m_flFinalTextureScaleV");
}

void GTextureControls_t::SetFinalTextureScaleV(GCParticleCollectionRendererFloatInput value) {
    SetSchemaValue(m_ptr, "TextureControls_t", "m_flFinalTextureScaleV", true, value);
}

GCParticleCollectionRendererFloatInput GTextureControls_t::GetFinalTextureOffsetU() const {
    return GetSchemaValue<GCParticleCollectionRendererFloatInput>(m_ptr, "TextureControls_t", "m_flFinalTextureOffsetU");
}

void GTextureControls_t::SetFinalTextureOffsetU(GCParticleCollectionRendererFloatInput value) {
    SetSchemaValue(m_ptr, "TextureControls_t", "m_flFinalTextureOffsetU", true, value);
}

GCParticleCollectionRendererFloatInput GTextureControls_t::GetFinalTextureOffsetV() const {
    return GetSchemaValue<GCParticleCollectionRendererFloatInput>(m_ptr, "TextureControls_t", "m_flFinalTextureOffsetV");
}

void GTextureControls_t::SetFinalTextureOffsetV(GCParticleCollectionRendererFloatInput value) {
    SetSchemaValue(m_ptr, "TextureControls_t", "m_flFinalTextureOffsetV", true, value);
}

GCParticleCollectionRendererFloatInput GTextureControls_t::GetFinalTextureUVRotation() const {
    return GetSchemaValue<GCParticleCollectionRendererFloatInput>(m_ptr, "TextureControls_t", "m_flFinalTextureUVRotation");
}

void GTextureControls_t::SetFinalTextureUVRotation(GCParticleCollectionRendererFloatInput value) {
    SetSchemaValue(m_ptr, "TextureControls_t", "m_flFinalTextureUVRotation", true, value);
}

GCParticleCollectionRendererFloatInput GTextureControls_t::GetZoomScale() const {
    return GetSchemaValue<GCParticleCollectionRendererFloatInput>(m_ptr, "TextureControls_t", "m_flZoomScale");
}

void GTextureControls_t::SetZoomScale(GCParticleCollectionRendererFloatInput value) {
    SetSchemaValue(m_ptr, "TextureControls_t", "m_flZoomScale", true, value);
}

GCParticleCollectionRendererFloatInput GTextureControls_t::GetDistortion() const {
    return GetSchemaValue<GCParticleCollectionRendererFloatInput>(m_ptr, "TextureControls_t", "m_flDistortion");
}

void GTextureControls_t::SetDistortion(GCParticleCollectionRendererFloatInput value) {
    SetSchemaValue(m_ptr, "TextureControls_t", "m_flDistortion", true, value);
}

bool GTextureControls_t::GetRandomizeOffsets() const {
    return GetSchemaValue<bool>(m_ptr, "TextureControls_t", "m_bRandomizeOffsets");
}

void GTextureControls_t::SetRandomizeOffsets(bool value) {
    SetSchemaValue(m_ptr, "TextureControls_t", "m_bRandomizeOffsets", true, value);
}

bool GTextureControls_t::GetClampUVs() const {
    return GetSchemaValue<bool>(m_ptr, "TextureControls_t", "m_bClampUVs");
}

void GTextureControls_t::SetClampUVs(bool value) {
    SetSchemaValue(m_ptr, "TextureControls_t", "m_bClampUVs", true, value);
}

SpriteCardPerParticleScale_t GTextureControls_t::GetPerParticleBlend() const {
    return GetSchemaValue<SpriteCardPerParticleScale_t>(m_ptr, "TextureControls_t", "m_nPerParticleBlend");
}

void GTextureControls_t::SetPerParticleBlend(SpriteCardPerParticleScale_t value) {
    SetSchemaValue(m_ptr, "TextureControls_t", "m_nPerParticleBlend", true, value);
}

SpriteCardPerParticleScale_t GTextureControls_t::GetPerParticleScale() const {
    return GetSchemaValue<SpriteCardPerParticleScale_t>(m_ptr, "TextureControls_t", "m_nPerParticleScale");
}

void GTextureControls_t::SetPerParticleScale(SpriteCardPerParticleScale_t value) {
    SetSchemaValue(m_ptr, "TextureControls_t", "m_nPerParticleScale", true, value);
}

SpriteCardPerParticleScale_t GTextureControls_t::GetPerParticleOffsetU() const {
    return GetSchemaValue<SpriteCardPerParticleScale_t>(m_ptr, "TextureControls_t", "m_nPerParticleOffsetU");
}

void GTextureControls_t::SetPerParticleOffsetU(SpriteCardPerParticleScale_t value) {
    SetSchemaValue(m_ptr, "TextureControls_t", "m_nPerParticleOffsetU", true, value);
}

SpriteCardPerParticleScale_t GTextureControls_t::GetPerParticleOffsetV() const {
    return GetSchemaValue<SpriteCardPerParticleScale_t>(m_ptr, "TextureControls_t", "m_nPerParticleOffsetV");
}

void GTextureControls_t::SetPerParticleOffsetV(SpriteCardPerParticleScale_t value) {
    SetSchemaValue(m_ptr, "TextureControls_t", "m_nPerParticleOffsetV", true, value);
}

SpriteCardPerParticleScale_t GTextureControls_t::GetPerParticleRotation() const {
    return GetSchemaValue<SpriteCardPerParticleScale_t>(m_ptr, "TextureControls_t", "m_nPerParticleRotation");
}

void GTextureControls_t::SetPerParticleRotation(SpriteCardPerParticleScale_t value) {
    SetSchemaValue(m_ptr, "TextureControls_t", "m_nPerParticleRotation", true, value);
}

SpriteCardPerParticleScale_t GTextureControls_t::GetPerParticleZoom() const {
    return GetSchemaValue<SpriteCardPerParticleScale_t>(m_ptr, "TextureControls_t", "m_nPerParticleZoom");
}

void GTextureControls_t::SetPerParticleZoom(SpriteCardPerParticleScale_t value) {
    SetSchemaValue(m_ptr, "TextureControls_t", "m_nPerParticleZoom", true, value);
}

SpriteCardPerParticleScale_t GTextureControls_t::GetPerParticleDistortion() const {
    return GetSchemaValue<SpriteCardPerParticleScale_t>(m_ptr, "TextureControls_t", "m_nPerParticleDistortion");
}

void GTextureControls_t::SetPerParticleDistortion(SpriteCardPerParticleScale_t value) {
    SetSchemaValue(m_ptr, "TextureControls_t", "m_nPerParticleDistortion", true, value);
}

std::string GTextureControls_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GTextureControls_t::IsValid() {
    return (m_ptr != nullptr);
}

GCParticleModelInput::GCParticleModelInput(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCParticleModelInput::GCParticleModelInput(void *ptr) {
    m_ptr = ptr;
}

ParticleModelType_t GCParticleModelInput::GetType() const {
    return GetSchemaValue<ParticleModelType_t>(m_ptr, "CParticleModelInput", "m_nType");
}

void GCParticleModelInput::SetType(ParticleModelType_t value) {
    SetSchemaValue(m_ptr, "CParticleModelInput", "m_nType", false, value);
}

int32_t GCParticleModelInput::GetControlPoint() const {
    return GetSchemaValue<int32_t>(m_ptr, "CParticleModelInput", "m_nControlPoint");
}

void GCParticleModelInput::SetControlPoint(int32_t value) {
    SetSchemaValue(m_ptr, "CParticleModelInput", "m_nControlPoint", false, value);
}

std::string GCParticleModelInput::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCParticleModelInput::IsValid() {
    return (m_ptr != nullptr);
}

GCNmPassthroughNode::GCNmPassthroughNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmPassthroughNode::GCNmPassthroughNode(void *ptr) {
    m_ptr = ptr;
}

int16_t GCNmPassthroughNode::GetChildNodeIdx() const {
    return GetSchemaValue<int16_t>(m_ptr, "CNmPassthroughNode", "m_nChildNodeIdx");
}

void GCNmPassthroughNode::SetChildNodeIdx(int16_t value) {
    SetSchemaValue(m_ptr, "CNmPassthroughNode", "m_nChildNodeIdx", false, value);
}

std::string GCNmPassthroughNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmPassthroughNode::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimDecoder::GCAnimDecoder(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimDecoder::GCAnimDecoder(void *ptr) {
    m_ptr = ptr;
}

CBufferString GCAnimDecoder::GetName() const {
    return GetSchemaValue<CBufferString>(m_ptr, "CAnimDecoder", "m_szName");
}

void GCAnimDecoder::SetName(CBufferString value) {
    SetSchemaValue(m_ptr, "CAnimDecoder", "m_szName", false, value);
}

int32_t GCAnimDecoder::GetVersion() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimDecoder", "m_nVersion");
}

void GCAnimDecoder::SetVersion(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimDecoder", "m_nVersion", false, value);
}

int32_t GCAnimDecoder::GetType() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimDecoder", "m_nType");
}

void GCAnimDecoder::SetType(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimDecoder", "m_nType", false, value);
}

std::string GCAnimDecoder::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimDecoder::IsValid() {
    return (m_ptr != nullptr);
}

GNmPercent_t::GNmPercent_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GNmPercent_t::GNmPercent_t(void *ptr) {
    m_ptr = ptr;
}

float GNmPercent_t::GetValue() const {
    return GetSchemaValue<float>(m_ptr, "NmPercent_t", "m_flValue");
}

void GNmPercent_t::SetValue(float value) {
    SetSchemaValue(m_ptr, "NmPercent_t", "m_flValue", true, value);
}

std::string GNmPercent_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GNmPercent_t::IsValid() {
    return (m_ptr != nullptr);
}

GEventProfileStorageAvailable_t::GEventProfileStorageAvailable_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEventProfileStorageAvailable_t::GEventProfileStorageAvailable_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GEventProfileStorageAvailable_t::GetSplitScreenSlot() const {
    return GetSchemaValue<int32_t>(m_ptr, "EventProfileStorageAvailable_t", "m_nSplitScreenSlot");
}

void GEventProfileStorageAvailable_t::SetSplitScreenSlot(int32_t value) {
    SetSchemaValue(m_ptr, "EventProfileStorageAvailable_t", "m_nSplitScreenSlot", true, value);
}

std::string GEventProfileStorageAvailable_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEventProfileStorageAvailable_t::IsValid() {
    return (m_ptr != nullptr);
}

GCVoiceContainerBase::GCVoiceContainerBase(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCVoiceContainerBase::GCVoiceContainerBase(void *ptr) {
    m_ptr = ptr;
}

bool GCVoiceContainerBase::GetHideAnalyzers() const {
    return GetSchemaValue<bool>(m_ptr, "CVoiceContainerBase", "m_bHideAnalyzers");
}

void GCVoiceContainerBase::SetHideAnalyzers(bool value) {
    SetSchemaValue(m_ptr, "CVoiceContainerBase", "m_bHideAnalyzers", false, value);
}

std::vector<GCVoiceContainerAnalysisBase*> GCVoiceContainerBase::GetAnalysisContainers() const {
    CUtlVector<GCVoiceContainerAnalysisBase*>* vec = GetSchemaValue<CUtlVector<GCVoiceContainerAnalysisBase*>*>(m_ptr, "CVoiceContainerBase", "m_analysisContainers"); std::vector<GCVoiceContainerAnalysisBase*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCVoiceContainerBase::SetAnalysisContainers(std::vector<GCVoiceContainerAnalysisBase*> value) {
    SetSchemaValueCUtlVector<GCVoiceContainerAnalysisBase*>(m_ptr, "CVoiceContainerBase", "m_analysisContainers", false, value);
}

std::string GCVoiceContainerBase::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCVoiceContainerBase::IsValid() {
    return (m_ptr != nullptr);
}

GCPerParticleVecInput::GCPerParticleVecInput(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPerParticleVecInput::GCPerParticleVecInput(void *ptr) {
    m_ptr = ptr;
}

std::string GCPerParticleVecInput::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPerParticleVecInput::IsValid() {
    return (m_ptr != nullptr);
}

GCBoneMaskUpdateNode::GCBoneMaskUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBoneMaskUpdateNode::GCBoneMaskUpdateNode(void *ptr) {
    m_ptr = ptr;
}

int32_t GCBoneMaskUpdateNode::GetWeightListIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBoneMaskUpdateNode", "m_nWeightListIndex");
}

void GCBoneMaskUpdateNode::SetWeightListIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CBoneMaskUpdateNode", "m_nWeightListIndex", false, value);
}

float GCBoneMaskUpdateNode::GetRootMotionBlend() const {
    return GetSchemaValue<float>(m_ptr, "CBoneMaskUpdateNode", "m_flRootMotionBlend");
}

void GCBoneMaskUpdateNode::SetRootMotionBlend(float value) {
    SetSchemaValue(m_ptr, "CBoneMaskUpdateNode", "m_flRootMotionBlend", false, value);
}

BoneMaskBlendSpace GCBoneMaskUpdateNode::GetBlendSpace() const {
    return GetSchemaValue<BoneMaskBlendSpace>(m_ptr, "CBoneMaskUpdateNode", "m_blendSpace");
}

void GCBoneMaskUpdateNode::SetBlendSpace(BoneMaskBlendSpace value) {
    SetSchemaValue(m_ptr, "CBoneMaskUpdateNode", "m_blendSpace", false, value);
}

BinaryNodeChildOption GCBoneMaskUpdateNode::GetFootMotionTiming() const {
    return GetSchemaValue<BinaryNodeChildOption>(m_ptr, "CBoneMaskUpdateNode", "m_footMotionTiming");
}

void GCBoneMaskUpdateNode::SetFootMotionTiming(BinaryNodeChildOption value) {
    SetSchemaValue(m_ptr, "CBoneMaskUpdateNode", "m_footMotionTiming", false, value);
}

bool GCBoneMaskUpdateNode::GetUseBlendScale() const {
    return GetSchemaValue<bool>(m_ptr, "CBoneMaskUpdateNode", "m_bUseBlendScale");
}

void GCBoneMaskUpdateNode::SetUseBlendScale(bool value) {
    SetSchemaValue(m_ptr, "CBoneMaskUpdateNode", "m_bUseBlendScale", false, value);
}

AnimValueSource GCBoneMaskUpdateNode::GetBlendValueSource() const {
    return GetSchemaValue<AnimValueSource>(m_ptr, "CBoneMaskUpdateNode", "m_blendValueSource");
}

void GCBoneMaskUpdateNode::SetBlendValueSource(AnimValueSource value) {
    SetSchemaValue(m_ptr, "CBoneMaskUpdateNode", "m_blendValueSource", false, value);
}

GCAnimParamHandle GCBoneMaskUpdateNode::GetBlendParameter() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CBoneMaskUpdateNode", "m_hBlendParameter");
}

void GCBoneMaskUpdateNode::SetBlendParameter(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CBoneMaskUpdateNode", "m_hBlendParameter", false, value);
}

std::string GCBoneMaskUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBoneMaskUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GConfigIndex::GConfigIndex(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GConfigIndex::GConfigIndex(void *ptr) {
    m_ptr = ptr;
}

uint16_t GConfigIndex::GetGroup() const {
    return GetSchemaValue<uint16_t>(m_ptr, "ConfigIndex", "m_nGroup");
}

void GConfigIndex::SetGroup(uint16_t value) {
    SetSchemaValue(m_ptr, "ConfigIndex", "m_nGroup", false, value);
}

uint16_t GConfigIndex::GetConfig() const {
    return GetSchemaValue<uint16_t>(m_ptr, "ConfigIndex", "m_nConfig");
}

void GConfigIndex::SetConfig(uint16_t value) {
    SetSchemaValue(m_ptr, "ConfigIndex", "m_nConfig", false, value);
}

std::string GConfigIndex::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GConfigIndex::IsValid() {
    return (m_ptr != nullptr);
}

GFeSimdRodConstraint_t::GFeSimdRodConstraint_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeSimdRodConstraint_t::GFeSimdRodConstraint_t(void *ptr) {
    m_ptr = ptr;
}

float GFeSimdRodConstraint_t::Get4MaxDist() const {
    return GetSchemaValue<float>(m_ptr, "FeSimdRodConstraint_t", "f4MaxDist");
}

void GFeSimdRodConstraint_t::Set4MaxDist(float value) {
    SetSchemaValue(m_ptr, "FeSimdRodConstraint_t", "f4MaxDist", true, value);
}

float GFeSimdRodConstraint_t::Get4MinDist() const {
    return GetSchemaValue<float>(m_ptr, "FeSimdRodConstraint_t", "f4MinDist");
}

void GFeSimdRodConstraint_t::Set4MinDist(float value) {
    SetSchemaValue(m_ptr, "FeSimdRodConstraint_t", "f4MinDist", true, value);
}

float GFeSimdRodConstraint_t::Get4Weight0() const {
    return GetSchemaValue<float>(m_ptr, "FeSimdRodConstraint_t", "f4Weight0");
}

void GFeSimdRodConstraint_t::Set4Weight0(float value) {
    SetSchemaValue(m_ptr, "FeSimdRodConstraint_t", "f4Weight0", true, value);
}

float GFeSimdRodConstraint_t::Get4RelaxationFactor() const {
    return GetSchemaValue<float>(m_ptr, "FeSimdRodConstraint_t", "f4RelaxationFactor");
}

void GFeSimdRodConstraint_t::Set4RelaxationFactor(float value) {
    SetSchemaValue(m_ptr, "FeSimdRodConstraint_t", "f4RelaxationFactor", true, value);
}

std::string GFeSimdRodConstraint_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeSimdRodConstraint_t::IsValid() {
    return (m_ptr != nullptr);
}

GCSSDSMsg_EndFrame::GCSSDSMsg_EndFrame(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSSDSMsg_EndFrame::GCSSDSMsg_EndFrame(void *ptr) {
    m_ptr = ptr;
}

std::vector<GCSSDSEndFrameViewInfo> GCSSDSMsg_EndFrame::GetViews() const {
    CUtlVector<GCSSDSEndFrameViewInfo>* vec = GetSchemaValue<CUtlVector<GCSSDSEndFrameViewInfo>*>(m_ptr, "CSSDSMsg_EndFrame", "m_Views"); std::vector<GCSSDSEndFrameViewInfo> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSSDSMsg_EndFrame::SetViews(std::vector<GCSSDSEndFrameViewInfo> value) {
    SetSchemaValueCUtlVector<GCSSDSEndFrameViewInfo>(m_ptr, "CSSDSMsg_EndFrame", "m_Views", false, value);
}

std::string GCSSDSMsg_EndFrame::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSSDSMsg_EndFrame::IsValid() {
    return (m_ptr != nullptr);
}

GSkeletonBoneBounds_t::GSkeletonBoneBounds_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GSkeletonBoneBounds_t::GSkeletonBoneBounds_t(void *ptr) {
    m_ptr = ptr;
}

Vector GSkeletonBoneBounds_t::GetCenter() const {
    return GetSchemaValue<Vector>(m_ptr, "SkeletonBoneBounds_t", "m_vecCenter");
}

void GSkeletonBoneBounds_t::SetCenter(Vector value) {
    SetSchemaValue(m_ptr, "SkeletonBoneBounds_t", "m_vecCenter", true, value);
}

Vector GSkeletonBoneBounds_t::GetSize() const {
    return GetSchemaValue<Vector>(m_ptr, "SkeletonBoneBounds_t", "m_vecSize");
}

void GSkeletonBoneBounds_t::SetSize(Vector value) {
    SetSchemaValue(m_ptr, "SkeletonBoneBounds_t", "m_vecSize", true, value);
}

std::string GSkeletonBoneBounds_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GSkeletonBoneBounds_t::IsValid() {
    return (m_ptr != nullptr);
}

GCDSPMixgroupModifier::GCDSPMixgroupModifier(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCDSPMixgroupModifier::GCDSPMixgroupModifier(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCDSPMixgroupModifier::GetMixgroup() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CDSPMixgroupModifier", "m_mixgroup");
}

void GCDSPMixgroupModifier::SetMixgroup(CUtlString value) {
    SetSchemaValue(m_ptr, "CDSPMixgroupModifier", "m_mixgroup", false, value);
}

float GCDSPMixgroupModifier::GetModifier() const {
    return GetSchemaValue<float>(m_ptr, "CDSPMixgroupModifier", "m_flModifier");
}

void GCDSPMixgroupModifier::SetModifier(float value) {
    SetSchemaValue(m_ptr, "CDSPMixgroupModifier", "m_flModifier", false, value);
}

float GCDSPMixgroupModifier::GetModifierMin() const {
    return GetSchemaValue<float>(m_ptr, "CDSPMixgroupModifier", "m_flModifierMin");
}

void GCDSPMixgroupModifier::SetModifierMin(float value) {
    SetSchemaValue(m_ptr, "CDSPMixgroupModifier", "m_flModifierMin", false, value);
}

float GCDSPMixgroupModifier::GetSourceModifier() const {
    return GetSchemaValue<float>(m_ptr, "CDSPMixgroupModifier", "m_flSourceModifier");
}

void GCDSPMixgroupModifier::SetSourceModifier(float value) {
    SetSchemaValue(m_ptr, "CDSPMixgroupModifier", "m_flSourceModifier", false, value);
}

float GCDSPMixgroupModifier::GetSourceModifierMin() const {
    return GetSchemaValue<float>(m_ptr, "CDSPMixgroupModifier", "m_flSourceModifierMin");
}

void GCDSPMixgroupModifier::SetSourceModifierMin(float value) {
    SetSchemaValue(m_ptr, "CDSPMixgroupModifier", "m_flSourceModifierMin", false, value);
}

float GCDSPMixgroupModifier::GetListenerReverbModifierWhenSourceReverbIsActive() const {
    return GetSchemaValue<float>(m_ptr, "CDSPMixgroupModifier", "m_flListenerReverbModifierWhenSourceReverbIsActive");
}

void GCDSPMixgroupModifier::SetListenerReverbModifierWhenSourceReverbIsActive(float value) {
    SetSchemaValue(m_ptr, "CDSPMixgroupModifier", "m_flListenerReverbModifierWhenSourceReverbIsActive", false, value);
}

std::string GCDSPMixgroupModifier::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCDSPMixgroupModifier::IsValid() {
    return (m_ptr != nullptr);
}

GCBoneConstraintBase::GCBoneConstraintBase(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBoneConstraintBase::GCBoneConstraintBase(void *ptr) {
    m_ptr = ptr;
}

std::string GCBoneConstraintBase::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBoneConstraintBase::IsValid() {
    return (m_ptr != nullptr);
}

GEventAdvanceTick_t::GEventAdvanceTick_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEventAdvanceTick_t::GEventAdvanceTick_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GEventAdvanceTick_t::GetCurrentTick() const {
    return GetSchemaValue<int32_t>(m_ptr, "EventAdvanceTick_t", "m_nCurrentTick");
}

void GEventAdvanceTick_t::SetCurrentTick(int32_t value) {
    SetSchemaValue(m_ptr, "EventAdvanceTick_t", "m_nCurrentTick", true, value);
}

int32_t GEventAdvanceTick_t::GetCurrentTickThisFrame() const {
    return GetSchemaValue<int32_t>(m_ptr, "EventAdvanceTick_t", "m_nCurrentTickThisFrame");
}

void GEventAdvanceTick_t::SetCurrentTickThisFrame(int32_t value) {
    SetSchemaValue(m_ptr, "EventAdvanceTick_t", "m_nCurrentTickThisFrame", true, value);
}

int32_t GEventAdvanceTick_t::GetTotalTicksThisFrame() const {
    return GetSchemaValue<int32_t>(m_ptr, "EventAdvanceTick_t", "m_nTotalTicksThisFrame");
}

void GEventAdvanceTick_t::SetTotalTicksThisFrame(int32_t value) {
    SetSchemaValue(m_ptr, "EventAdvanceTick_t", "m_nTotalTicksThisFrame", true, value);
}

int32_t GEventAdvanceTick_t::GetTotalTicks() const {
    return GetSchemaValue<int32_t>(m_ptr, "EventAdvanceTick_t", "m_nTotalTicks");
}

void GEventAdvanceTick_t::SetTotalTicks(int32_t value) {
    SetSchemaValue(m_ptr, "EventAdvanceTick_t", "m_nTotalTicks", true, value);
}

std::string GEventAdvanceTick_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEventAdvanceTick_t::IsValid() {
    return (m_ptr != nullptr);
}

GMotionIndex::GMotionIndex(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GMotionIndex::GMotionIndex(void *ptr) {
    m_ptr = ptr;
}

uint16_t GMotionIndex::GetGroup() const {
    return GetSchemaValue<uint16_t>(m_ptr, "MotionIndex", "m_nGroup");
}

void GMotionIndex::SetGroup(uint16_t value) {
    SetSchemaValue(m_ptr, "MotionIndex", "m_nGroup", false, value);
}

uint16_t GMotionIndex::GetMotion() const {
    return GetSchemaValue<uint16_t>(m_ptr, "MotionIndex", "m_nMotion");
}

void GMotionIndex::SetMotion(uint16_t value) {
    SetSchemaValue(m_ptr, "MotionIndex", "m_nMotion", false, value);
}

std::string GMotionIndex::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GMotionIndex::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimBoneDifference::GCAnimBoneDifference(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimBoneDifference::GCAnimBoneDifference(void *ptr) {
    m_ptr = ptr;
}

CBufferString GCAnimBoneDifference::GetName() const {
    return GetSchemaValue<CBufferString>(m_ptr, "CAnimBoneDifference", "m_name");
}

void GCAnimBoneDifference::SetName(CBufferString value) {
    SetSchemaValue(m_ptr, "CAnimBoneDifference", "m_name", false, value);
}

CBufferString GCAnimBoneDifference::GetParent() const {
    return GetSchemaValue<CBufferString>(m_ptr, "CAnimBoneDifference", "m_parent");
}

void GCAnimBoneDifference::SetParent(CBufferString value) {
    SetSchemaValue(m_ptr, "CAnimBoneDifference", "m_parent", false, value);
}

Vector GCAnimBoneDifference::GetPosError() const {
    return GetSchemaValue<Vector>(m_ptr, "CAnimBoneDifference", "m_posError");
}

void GCAnimBoneDifference::SetPosError(Vector value) {
    SetSchemaValue(m_ptr, "CAnimBoneDifference", "m_posError", false, value);
}

bool GCAnimBoneDifference::GetHasRotation() const {
    return GetSchemaValue<bool>(m_ptr, "CAnimBoneDifference", "m_bHasRotation");
}

void GCAnimBoneDifference::SetHasRotation(bool value) {
    SetSchemaValue(m_ptr, "CAnimBoneDifference", "m_bHasRotation", false, value);
}

bool GCAnimBoneDifference::GetHasMovement() const {
    return GetSchemaValue<bool>(m_ptr, "CAnimBoneDifference", "m_bHasMovement");
}

void GCAnimBoneDifference::SetHasMovement(bool value) {
    SetSchemaValue(m_ptr, "CAnimBoneDifference", "m_bHasMovement", false, value);
}

std::string GCAnimBoneDifference::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimBoneDifference::IsValid() {
    return (m_ptr != nullptr);
}

GCFootDefinition::GCFootDefinition(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFootDefinition::GCFootDefinition(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCFootDefinition::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CFootDefinition", "m_name");
}

void GCFootDefinition::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "CFootDefinition", "m_name", false, value);
}

CUtlString GCFootDefinition::GetAnkleBoneName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CFootDefinition", "m_ankleBoneName");
}

void GCFootDefinition::SetAnkleBoneName(CUtlString value) {
    SetSchemaValue(m_ptr, "CFootDefinition", "m_ankleBoneName", false, value);
}

CUtlString GCFootDefinition::GetToeBoneName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CFootDefinition", "m_toeBoneName");
}

void GCFootDefinition::SetToeBoneName(CUtlString value) {
    SetSchemaValue(m_ptr, "CFootDefinition", "m_toeBoneName", false, value);
}

Vector GCFootDefinition::GetBallOffset() const {
    return GetSchemaValue<Vector>(m_ptr, "CFootDefinition", "m_vBallOffset");
}

void GCFootDefinition::SetBallOffset(Vector value) {
    SetSchemaValue(m_ptr, "CFootDefinition", "m_vBallOffset", false, value);
}

Vector GCFootDefinition::GetHeelOffset() const {
    return GetSchemaValue<Vector>(m_ptr, "CFootDefinition", "m_vHeelOffset");
}

void GCFootDefinition::SetHeelOffset(Vector value) {
    SetSchemaValue(m_ptr, "CFootDefinition", "m_vHeelOffset", false, value);
}

float GCFootDefinition::GetFootLength() const {
    return GetSchemaValue<float>(m_ptr, "CFootDefinition", "m_flFootLength");
}

void GCFootDefinition::SetFootLength(float value) {
    SetSchemaValue(m_ptr, "CFootDefinition", "m_flFootLength", false, value);
}

float GCFootDefinition::GetBindPoseDirectionMS() const {
    return GetSchemaValue<float>(m_ptr, "CFootDefinition", "m_flBindPoseDirectionMS");
}

void GCFootDefinition::SetBindPoseDirectionMS(float value) {
    SetSchemaValue(m_ptr, "CFootDefinition", "m_flBindPoseDirectionMS", false, value);
}

float GCFootDefinition::GetTraceHeight() const {
    return GetSchemaValue<float>(m_ptr, "CFootDefinition", "m_flTraceHeight");
}

void GCFootDefinition::SetTraceHeight(float value) {
    SetSchemaValue(m_ptr, "CFootDefinition", "m_flTraceHeight", false, value);
}

float GCFootDefinition::GetTraceRadius() const {
    return GetSchemaValue<float>(m_ptr, "CFootDefinition", "m_flTraceRadius");
}

void GCFootDefinition::SetTraceRadius(float value) {
    SetSchemaValue(m_ptr, "CFootDefinition", "m_flTraceRadius", false, value);
}

std::string GCFootDefinition::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFootDefinition::IsValid() {
    return (m_ptr != nullptr);
}

GCFootCycle::GCFootCycle(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFootCycle::GCFootCycle(void *ptr) {
    m_ptr = ptr;
}

std::string GCFootCycle::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFootCycle::IsValid() {
    return (m_ptr != nullptr);
}

GCMotionDataSet::GCMotionDataSet(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMotionDataSet::GCMotionDataSet(void *ptr) {
    m_ptr = ptr;
}

std::vector<GCMotionGraphGroup> GCMotionDataSet::GetGroups() const {
    CUtlVector<GCMotionGraphGroup>* vec = GetSchemaValue<CUtlVector<GCMotionGraphGroup>*>(m_ptr, "CMotionDataSet", "m_groups"); std::vector<GCMotionGraphGroup> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCMotionDataSet::SetGroups(std::vector<GCMotionGraphGroup> value) {
    SetSchemaValueCUtlVector<GCMotionGraphGroup>(m_ptr, "CMotionDataSet", "m_groups", false, value);
}

int32_t GCMotionDataSet::GetDimensionCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CMotionDataSet", "m_nDimensionCount");
}

void GCMotionDataSet::SetDimensionCount(int32_t value) {
    SetSchemaValue(m_ptr, "CMotionDataSet", "m_nDimensionCount", false, value);
}

std::string GCMotionDataSet::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMotionDataSet::IsValid() {
    return (m_ptr != nullptr);
}

GCVPhysXSurfacePropertiesList::GCVPhysXSurfacePropertiesList(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCVPhysXSurfacePropertiesList::GCVPhysXSurfacePropertiesList(void *ptr) {
    m_ptr = ptr;
}

std::vector<GCPhysSurfaceProperties*> GCVPhysXSurfacePropertiesList::GetSurfacePropertiesList() const {
    CUtlVector<GCPhysSurfaceProperties*>* vec = GetSchemaValue<CUtlVector<GCPhysSurfaceProperties*>*>(m_ptr, "CVPhysXSurfacePropertiesList", "m_surfacePropertiesList"); std::vector<GCPhysSurfaceProperties*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCVPhysXSurfacePropertiesList::SetSurfacePropertiesList(std::vector<GCPhysSurfaceProperties*> value) {
    SetSchemaValueCUtlVector<GCPhysSurfaceProperties*>(m_ptr, "CVPhysXSurfacePropertiesList", "m_surfacePropertiesList", false, value);
}

std::string GCVPhysXSurfacePropertiesList::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCVPhysXSurfacePropertiesList::IsValid() {
    return (m_ptr != nullptr);
}

GCParticleFunctionEmitter::GCParticleFunctionEmitter(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCParticleFunctionEmitter::GCParticleFunctionEmitter(void *ptr) {
    m_ptr = ptr;
}

int32_t GCParticleFunctionEmitter::GetEmitterIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CParticleFunctionEmitter", "m_nEmitterIndex");
}

void GCParticleFunctionEmitter::SetEmitterIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CParticleFunctionEmitter", "m_nEmitterIndex", false, value);
}

std::string GCParticleFunctionEmitter::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCParticleFunctionEmitter::IsValid() {
    return (m_ptr != nullptr);
}

GVMixFilterDesc_t::GVMixFilterDesc_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVMixFilterDesc_t::GVMixFilterDesc_t(void *ptr) {
    m_ptr = ptr;
}

VMixFilterType_t GVMixFilterDesc_t::GetFilterType() const {
    return GetSchemaValue<VMixFilterType_t>(m_ptr, "VMixFilterDesc_t", "m_nFilterType");
}

void GVMixFilterDesc_t::SetFilterType(VMixFilterType_t value) {
    SetSchemaValue(m_ptr, "VMixFilterDesc_t", "m_nFilterType", true, value);
}

VMixFilterSlope_t GVMixFilterDesc_t::GetFilterSlope() const {
    return GetSchemaValue<VMixFilterSlope_t>(m_ptr, "VMixFilterDesc_t", "m_nFilterSlope");
}

void GVMixFilterDesc_t::SetFilterSlope(VMixFilterSlope_t value) {
    SetSchemaValue(m_ptr, "VMixFilterDesc_t", "m_nFilterSlope", true, value);
}

bool GVMixFilterDesc_t::GetEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "VMixFilterDesc_t", "m_bEnabled");
}

void GVMixFilterDesc_t::SetEnabled(bool value) {
    SetSchemaValue(m_ptr, "VMixFilterDesc_t", "m_bEnabled", true, value);
}

float GVMixFilterDesc_t::GetFldbGain() const {
    return GetSchemaValue<float>(m_ptr, "VMixFilterDesc_t", "m_fldbGain");
}

void GVMixFilterDesc_t::SetFldbGain(float value) {
    SetSchemaValue(m_ptr, "VMixFilterDesc_t", "m_fldbGain", true, value);
}

float GVMixFilterDesc_t::GetCutoffFreq() const {
    return GetSchemaValue<float>(m_ptr, "VMixFilterDesc_t", "m_flCutoffFreq");
}

void GVMixFilterDesc_t::SetCutoffFreq(float value) {
    SetSchemaValue(m_ptr, "VMixFilterDesc_t", "m_flCutoffFreq", true, value);
}

float GVMixFilterDesc_t::GetQ() const {
    return GetSchemaValue<float>(m_ptr, "VMixFilterDesc_t", "m_flQ");
}

void GVMixFilterDesc_t::SetQ(float value) {
    SetSchemaValue(m_ptr, "VMixFilterDesc_t", "m_flQ", true, value);
}

std::string GVMixFilterDesc_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVMixFilterDesc_t::IsValid() {
    return (m_ptr != nullptr);
}

GCBaseConstraint::GCBaseConstraint(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBaseConstraint::GCBaseConstraint(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCBaseConstraint::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CBaseConstraint", "m_name");
}

void GCBaseConstraint::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "CBaseConstraint", "m_name", false, value);
}

Vector GCBaseConstraint::GetUpVector() const {
    return GetSchemaValue<Vector>(m_ptr, "CBaseConstraint", "m_vUpVector");
}

void GCBaseConstraint::SetUpVector(Vector value) {
    SetSchemaValue(m_ptr, "CBaseConstraint", "m_vUpVector", false, value);
}

std::vector<GCConstraintSlave> GCBaseConstraint::GetSlaves() const {
    CUtlVector<GCConstraintSlave>* vec = GetSchemaValue<CUtlVector<GCConstraintSlave>*>(m_ptr, "CBaseConstraint", "m_slaves"); std::vector<GCConstraintSlave> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCBaseConstraint::SetSlaves(std::vector<GCConstraintSlave> value) {
    SetSchemaValueCUtlVector<GCConstraintSlave>(m_ptr, "CBaseConstraint", "m_slaves", false, value);
}

std::vector<GCConstraintTarget> GCBaseConstraint::GetTargets() const {
    CUtlVector<GCConstraintTarget>* vec = GetSchemaValue<CUtlVector<GCConstraintTarget>*>(m_ptr, "CBaseConstraint", "m_targets"); std::vector<GCConstraintTarget> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCBaseConstraint::SetTargets(std::vector<GCConstraintTarget> value) {
    SetSchemaValueCUtlVector<GCConstraintTarget>(m_ptr, "CBaseConstraint", "m_targets", false, value);
}

std::string GCBaseConstraint::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBaseConstraint::IsValid() {
    return (m_ptr != nullptr);
}

GCParticleMassCalculationParameters::GCParticleMassCalculationParameters(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCParticleMassCalculationParameters::GCParticleMassCalculationParameters(void *ptr) {
    m_ptr = ptr;
}

ParticleMassMode_t GCParticleMassCalculationParameters::GetMassMode() const {
    return GetSchemaValue<ParticleMassMode_t>(m_ptr, "CParticleMassCalculationParameters", "m_nMassMode");
}

void GCParticleMassCalculationParameters::SetMassMode(ParticleMassMode_t value) {
    SetSchemaValue(m_ptr, "CParticleMassCalculationParameters", "m_nMassMode", false, value);
}

GCPerParticleFloatInput GCParticleMassCalculationParameters::GetRadius() const {
    return GetSchemaValue<GCPerParticleFloatInput>(m_ptr, "CParticleMassCalculationParameters", "m_flRadius");
}

void GCParticleMassCalculationParameters::SetRadius(GCPerParticleFloatInput value) {
    SetSchemaValue(m_ptr, "CParticleMassCalculationParameters", "m_flRadius", false, value);
}

GCPerParticleFloatInput GCParticleMassCalculationParameters::GetNominalRadius() const {
    return GetSchemaValue<GCPerParticleFloatInput>(m_ptr, "CParticleMassCalculationParameters", "m_flNominalRadius");
}

void GCParticleMassCalculationParameters::SetNominalRadius(GCPerParticleFloatInput value) {
    SetSchemaValue(m_ptr, "CParticleMassCalculationParameters", "m_flNominalRadius", false, value);
}

GCPerParticleFloatInput GCParticleMassCalculationParameters::GetScale() const {
    return GetSchemaValue<GCPerParticleFloatInput>(m_ptr, "CParticleMassCalculationParameters", "m_flScale");
}

void GCParticleMassCalculationParameters::SetScale(GCPerParticleFloatInput value) {
    SetSchemaValue(m_ptr, "CParticleMassCalculationParameters", "m_flScale", false, value);
}

std::string GCParticleMassCalculationParameters::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCParticleMassCalculationParameters::IsValid() {
    return (m_ptr != nullptr);
}

GAnimParamID::GAnimParamID(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GAnimParamID::GAnimParamID(void *ptr) {
    m_ptr = ptr;
}

uint32_t GAnimParamID::GetId() const {
    return GetSchemaValue<uint32_t>(m_ptr, "AnimParamID", "m_id");
}

void GAnimParamID::SetId(uint32_t value) {
    SetSchemaValue(m_ptr, "AnimParamID", "m_id", false, value);
}

std::string GAnimParamID::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GAnimParamID::IsValid() {
    return (m_ptr != nullptr);
}

GCTransitionUpdateData::GCTransitionUpdateData(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTransitionUpdateData::GCTransitionUpdateData(void *ptr) {
    m_ptr = ptr;
}

uint8_t GCTransitionUpdateData::GetSrcStateIndex() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CTransitionUpdateData", "m_srcStateIndex");
}

void GCTransitionUpdateData::SetSrcStateIndex(uint8_t value) {
    SetSchemaValue(m_ptr, "CTransitionUpdateData", "m_srcStateIndex", false, value);
}

uint8_t GCTransitionUpdateData::GetDestStateIndex() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CTransitionUpdateData", "m_destStateIndex");
}

void GCTransitionUpdateData::SetDestStateIndex(uint8_t value) {
    SetSchemaValue(m_ptr, "CTransitionUpdateData", "m_destStateIndex", false, value);
}

std::string GCTransitionUpdateData::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTransitionUpdateData::IsValid() {
    return (m_ptr != nullptr);
}

GManifestTestResource_t::GManifestTestResource_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GManifestTestResource_t::GManifestTestResource_t(void *ptr) {
    m_ptr = ptr;
}

CUtlString GManifestTestResource_t::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "ManifestTestResource_t", "m_name");
}

void GManifestTestResource_t::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "ManifestTestResource_t", "m_name", true, value);
}

std::string GManifestTestResource_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GManifestTestResource_t::IsValid() {
    return (m_ptr != nullptr);
}

GFootPinningPoseOpFixedData_t::GFootPinningPoseOpFixedData_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFootPinningPoseOpFixedData_t::GFootPinningPoseOpFixedData_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<GFootFixedData_t> GFootPinningPoseOpFixedData_t::GetFootInfo() const {
    CUtlVector<GFootFixedData_t>* vec = GetSchemaValue<CUtlVector<GFootFixedData_t>*>(m_ptr, "FootPinningPoseOpFixedData_t", "m_footInfo"); std::vector<GFootFixedData_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GFootPinningPoseOpFixedData_t::SetFootInfo(std::vector<GFootFixedData_t> value) {
    SetSchemaValueCUtlVector<GFootFixedData_t>(m_ptr, "FootPinningPoseOpFixedData_t", "m_footInfo", true, value);
}

float GFootPinningPoseOpFixedData_t::GetBlendTime() const {
    return GetSchemaValue<float>(m_ptr, "FootPinningPoseOpFixedData_t", "m_flBlendTime");
}

void GFootPinningPoseOpFixedData_t::SetBlendTime(float value) {
    SetSchemaValue(m_ptr, "FootPinningPoseOpFixedData_t", "m_flBlendTime", true, value);
}

float GFootPinningPoseOpFixedData_t::GetLockBreakDistance() const {
    return GetSchemaValue<float>(m_ptr, "FootPinningPoseOpFixedData_t", "m_flLockBreakDistance");
}

void GFootPinningPoseOpFixedData_t::SetLockBreakDistance(float value) {
    SetSchemaValue(m_ptr, "FootPinningPoseOpFixedData_t", "m_flLockBreakDistance", true, value);
}

float GFootPinningPoseOpFixedData_t::GetMaxLegTwist() const {
    return GetSchemaValue<float>(m_ptr, "FootPinningPoseOpFixedData_t", "m_flMaxLegTwist");
}

void GFootPinningPoseOpFixedData_t::SetMaxLegTwist(float value) {
    SetSchemaValue(m_ptr, "FootPinningPoseOpFixedData_t", "m_flMaxLegTwist", true, value);
}

int32_t GFootPinningPoseOpFixedData_t::GetHipBoneIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "FootPinningPoseOpFixedData_t", "m_nHipBoneIndex");
}

void GFootPinningPoseOpFixedData_t::SetHipBoneIndex(int32_t value) {
    SetSchemaValue(m_ptr, "FootPinningPoseOpFixedData_t", "m_nHipBoneIndex", true, value);
}

bool GFootPinningPoseOpFixedData_t::GetApplyLegTwistLimits() const {
    return GetSchemaValue<bool>(m_ptr, "FootPinningPoseOpFixedData_t", "m_bApplyLegTwistLimits");
}

void GFootPinningPoseOpFixedData_t::SetApplyLegTwistLimits(bool value) {
    SetSchemaValue(m_ptr, "FootPinningPoseOpFixedData_t", "m_bApplyLegTwistLimits", true, value);
}

bool GFootPinningPoseOpFixedData_t::GetApplyFootRotationLimits() const {
    return GetSchemaValue<bool>(m_ptr, "FootPinningPoseOpFixedData_t", "m_bApplyFootRotationLimits");
}

void GFootPinningPoseOpFixedData_t::SetApplyFootRotationLimits(bool value) {
    SetSchemaValue(m_ptr, "FootPinningPoseOpFixedData_t", "m_bApplyFootRotationLimits", true, value);
}

std::string GFootPinningPoseOpFixedData_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFootPinningPoseOpFixedData_t::IsValid() {
    return (m_ptr != nullptr);
}

GCFootPinningUpdateNode::GCFootPinningUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFootPinningUpdateNode::GCFootPinningUpdateNode(void *ptr) {
    m_ptr = ptr;
}

GFootPinningPoseOpFixedData_t GCFootPinningUpdateNode::GetPoseOpFixedData() const {
    return GetSchemaValue<GFootPinningPoseOpFixedData_t>(m_ptr, "CFootPinningUpdateNode", "m_poseOpFixedData");
}

void GCFootPinningUpdateNode::SetPoseOpFixedData(GFootPinningPoseOpFixedData_t value) {
    SetSchemaValue(m_ptr, "CFootPinningUpdateNode", "m_poseOpFixedData", false, value);
}

FootPinningTimingSource GCFootPinningUpdateNode::GetTimingSource() const {
    return GetSchemaValue<FootPinningTimingSource>(m_ptr, "CFootPinningUpdateNode", "m_eTimingSource");
}

void GCFootPinningUpdateNode::SetTimingSource(FootPinningTimingSource value) {
    SetSchemaValue(m_ptr, "CFootPinningUpdateNode", "m_eTimingSource", false, value);
}

std::vector<GCAnimParamHandle> GCFootPinningUpdateNode::GetParams() const {
    CUtlVector<GCAnimParamHandle>* vec = GetSchemaValue<CUtlVector<GCAnimParamHandle>*>(m_ptr, "CFootPinningUpdateNode", "m_params"); std::vector<GCAnimParamHandle> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCFootPinningUpdateNode::SetParams(std::vector<GCAnimParamHandle> value) {
    SetSchemaValueCUtlVector<GCAnimParamHandle>(m_ptr, "CFootPinningUpdateNode", "m_params", false, value);
}

bool GCFootPinningUpdateNode::GetResetChild() const {
    return GetSchemaValue<bool>(m_ptr, "CFootPinningUpdateNode", "m_bResetChild");
}

void GCFootPinningUpdateNode::SetResetChild(bool value) {
    SetSchemaValue(m_ptr, "CFootPinningUpdateNode", "m_bResetChild", false, value);
}

std::string GCFootPinningUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFootPinningUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GCLeafUpdateNode::GCLeafUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCLeafUpdateNode::GCLeafUpdateNode(void *ptr) {
    m_ptr = ptr;
}

std::string GCLeafUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCLeafUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimMotorUpdaterBase::GCAnimMotorUpdaterBase(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimMotorUpdaterBase::GCAnimMotorUpdaterBase(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCAnimMotorUpdaterBase::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CAnimMotorUpdaterBase", "m_name");
}

void GCAnimMotorUpdaterBase::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "CAnimMotorUpdaterBase", "m_name", false, value);
}

bool GCAnimMotorUpdaterBase::GetDefault() const {
    return GetSchemaValue<bool>(m_ptr, "CAnimMotorUpdaterBase", "m_bDefault");
}

void GCAnimMotorUpdaterBase::SetDefault(bool value) {
    SetSchemaValue(m_ptr, "CAnimMotorUpdaterBase", "m_bDefault", false, value);
}

std::string GCAnimMotorUpdaterBase::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimMotorUpdaterBase::IsValid() {
    return (m_ptr != nullptr);
}

GRnMesh_t::GRnMesh_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GRnMesh_t::GRnMesh_t(void *ptr) {
    m_ptr = ptr;
}

Vector GRnMesh_t::GetMin() const {
    return GetSchemaValue<Vector>(m_ptr, "RnMesh_t", "m_vMin");
}

void GRnMesh_t::SetMin(Vector value) {
    SetSchemaValue(m_ptr, "RnMesh_t", "m_vMin", true, value);
}

Vector GRnMesh_t::GetMax() const {
    return GetSchemaValue<Vector>(m_ptr, "RnMesh_t", "m_vMax");
}

void GRnMesh_t::SetMax(Vector value) {
    SetSchemaValue(m_ptr, "RnMesh_t", "m_vMax", true, value);
}

std::vector<GRnNode_t> GRnMesh_t::GetNodes() const {
    CUtlVector<GRnNode_t>* vec = GetSchemaValue<CUtlVector<GRnNode_t>*>(m_ptr, "RnMesh_t", "m_Nodes"); std::vector<GRnNode_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GRnMesh_t::SetNodes(std::vector<GRnNode_t> value) {
    SetSchemaValueCUtlVector<GRnNode_t>(m_ptr, "RnMesh_t", "m_Nodes", true, value);
}

std::vector<GRnTriangle_t> GRnMesh_t::GetTriangles() const {
    CUtlVector<GRnTriangle_t>* vec = GetSchemaValue<CUtlVector<GRnTriangle_t>*>(m_ptr, "RnMesh_t", "m_Triangles"); std::vector<GRnTriangle_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GRnMesh_t::SetTriangles(std::vector<GRnTriangle_t> value) {
    SetSchemaValueCUtlVector<GRnTriangle_t>(m_ptr, "RnMesh_t", "m_Triangles", true, value);
}

std::vector<GRnWing_t> GRnMesh_t::GetWings() const {
    CUtlVector<GRnWing_t>* vec = GetSchemaValue<CUtlVector<GRnWing_t>*>(m_ptr, "RnMesh_t", "m_Wings"); std::vector<GRnWing_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GRnMesh_t::SetWings(std::vector<GRnWing_t> value) {
    SetSchemaValueCUtlVector<GRnWing_t>(m_ptr, "RnMesh_t", "m_Wings", true, value);
}

std::vector<uint8> GRnMesh_t::GetMaterials() const {
    CUtlVector<uint8>* vec = GetSchemaValue<CUtlVector<uint8>*>(m_ptr, "RnMesh_t", "m_Materials"); std::vector<uint8> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GRnMesh_t::SetMaterials(std::vector<uint8> value) {
    SetSchemaValueCUtlVector<uint8>(m_ptr, "RnMesh_t", "m_Materials", true, value);
}

Vector GRnMesh_t::GetOrthographicAreas() const {
    return GetSchemaValue<Vector>(m_ptr, "RnMesh_t", "m_vOrthographicAreas");
}

void GRnMesh_t::SetOrthographicAreas(Vector value) {
    SetSchemaValue(m_ptr, "RnMesh_t", "m_vOrthographicAreas", true, value);
}

uint32_t GRnMesh_t::GetFlags() const {
    return GetSchemaValue<uint32_t>(m_ptr, "RnMesh_t", "m_nFlags");
}

void GRnMesh_t::SetFlags(uint32_t value) {
    SetSchemaValue(m_ptr, "RnMesh_t", "m_nFlags", true, value);
}

uint32_t GRnMesh_t::GetDebugFlags() const {
    return GetSchemaValue<uint32_t>(m_ptr, "RnMesh_t", "m_nDebugFlags");
}

void GRnMesh_t::SetDebugFlags(uint32_t value) {
    SetSchemaValue(m_ptr, "RnMesh_t", "m_nDebugFlags", true, value);
}

std::string GRnMesh_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GRnMesh_t::IsValid() {
    return (m_ptr != nullptr);
}

GCModelConfigElement::GCModelConfigElement(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCModelConfigElement::GCModelConfigElement(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCModelConfigElement::GetElementName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CModelConfigElement", "m_ElementName");
}

void GCModelConfigElement::SetElementName(CUtlString value) {
    SetSchemaValue(m_ptr, "CModelConfigElement", "m_ElementName", false, value);
}

std::vector<GCModelConfigElement*> GCModelConfigElement::GetNestedElements() const {
    CUtlVector<GCModelConfigElement*>* vec = GetSchemaValue<CUtlVector<GCModelConfigElement*>*>(m_ptr, "CModelConfigElement", "m_NestedElements"); std::vector<GCModelConfigElement*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCModelConfigElement::SetNestedElements(std::vector<GCModelConfigElement*> value) {
    SetSchemaValueCUtlVector<GCModelConfigElement*>(m_ptr, "CModelConfigElement", "m_NestedElements", false, value);
}

std::string GCModelConfigElement::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCModelConfigElement::IsValid() {
    return (m_ptr != nullptr);
}

GVPhysXAggregateData_t::GVPhysXAggregateData_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVPhysXAggregateData_t::GVPhysXAggregateData_t(void *ptr) {
    m_ptr = ptr;
}

uint16_t GVPhysXAggregateData_t::GetFlags() const {
    return GetSchemaValue<uint16_t>(m_ptr, "VPhysXAggregateData_t", "m_nFlags");
}

void GVPhysXAggregateData_t::SetFlags(uint16_t value) {
    SetSchemaValue(m_ptr, "VPhysXAggregateData_t", "m_nFlags", true, value);
}

uint16_t GVPhysXAggregateData_t::GetRefCounter() const {
    return GetSchemaValue<uint16_t>(m_ptr, "VPhysXAggregateData_t", "m_nRefCounter");
}

void GVPhysXAggregateData_t::SetRefCounter(uint16_t value) {
    SetSchemaValue(m_ptr, "VPhysXAggregateData_t", "m_nRefCounter", true, value);
}

std::vector<uint32> GVPhysXAggregateData_t::GetBonesHash() const {
    CUtlVector<uint32>* vec = GetSchemaValue<CUtlVector<uint32>*>(m_ptr, "VPhysXAggregateData_t", "m_bonesHash"); std::vector<uint32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GVPhysXAggregateData_t::SetBonesHash(std::vector<uint32> value) {
    SetSchemaValueCUtlVector<uint32>(m_ptr, "VPhysXAggregateData_t", "m_bonesHash", true, value);
}

std::vector<CUtlString> GVPhysXAggregateData_t::GetBoneNames() const {
    CUtlVector<CUtlString>* vec = GetSchemaValue<CUtlVector<CUtlString>*>(m_ptr, "VPhysXAggregateData_t", "m_boneNames"); std::vector<CUtlString> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GVPhysXAggregateData_t::SetBoneNames(std::vector<CUtlString> value) {
    SetSchemaValueCUtlVector<CUtlString>(m_ptr, "VPhysXAggregateData_t", "m_boneNames", true, value);
}

std::vector<uint16> GVPhysXAggregateData_t::GetIndexNames() const {
    CUtlVector<uint16>* vec = GetSchemaValue<CUtlVector<uint16>*>(m_ptr, "VPhysXAggregateData_t", "m_indexNames"); std::vector<uint16> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GVPhysXAggregateData_t::SetIndexNames(std::vector<uint16> value) {
    SetSchemaValueCUtlVector<uint16>(m_ptr, "VPhysXAggregateData_t", "m_indexNames", true, value);
}

std::vector<uint16> GVPhysXAggregateData_t::GetIndexHash() const {
    CUtlVector<uint16>* vec = GetSchemaValue<CUtlVector<uint16>*>(m_ptr, "VPhysXAggregateData_t", "m_indexHash"); std::vector<uint16> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GVPhysXAggregateData_t::SetIndexHash(std::vector<uint16> value) {
    SetSchemaValueCUtlVector<uint16>(m_ptr, "VPhysXAggregateData_t", "m_indexHash", true, value);
}

std::vector<matrix3x4a_t> GVPhysXAggregateData_t::GetBindPose() const {
    CUtlVector<matrix3x4a_t>* vec = GetSchemaValue<CUtlVector<matrix3x4a_t>*>(m_ptr, "VPhysXAggregateData_t", "m_bindPose"); std::vector<matrix3x4a_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GVPhysXAggregateData_t::SetBindPose(std::vector<matrix3x4a_t> value) {
    SetSchemaValueCUtlVector<matrix3x4a_t>(m_ptr, "VPhysXAggregateData_t", "m_bindPose", true, value);
}

std::vector<GVPhysXBodyPart_t> GVPhysXAggregateData_t::GetParts() const {
    CUtlVector<GVPhysXBodyPart_t>* vec = GetSchemaValue<CUtlVector<GVPhysXBodyPart_t>*>(m_ptr, "VPhysXAggregateData_t", "m_parts"); std::vector<GVPhysXBodyPart_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GVPhysXAggregateData_t::SetParts(std::vector<GVPhysXBodyPart_t> value) {
    SetSchemaValueCUtlVector<GVPhysXBodyPart_t>(m_ptr, "VPhysXAggregateData_t", "m_parts", true, value);
}

std::vector<GVPhysXConstraint2_t> GVPhysXAggregateData_t::GetConstraints2() const {
    CUtlVector<GVPhysXConstraint2_t>* vec = GetSchemaValue<CUtlVector<GVPhysXConstraint2_t>*>(m_ptr, "VPhysXAggregateData_t", "m_constraints2"); std::vector<GVPhysXConstraint2_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GVPhysXAggregateData_t::SetConstraints2(std::vector<GVPhysXConstraint2_t> value) {
    SetSchemaValueCUtlVector<GVPhysXConstraint2_t>(m_ptr, "VPhysXAggregateData_t", "m_constraints2", true, value);
}

std::vector<GVPhysXJoint_t> GVPhysXAggregateData_t::GetJoints() const {
    CUtlVector<GVPhysXJoint_t>* vec = GetSchemaValue<CUtlVector<GVPhysXJoint_t>*>(m_ptr, "VPhysXAggregateData_t", "m_joints"); std::vector<GVPhysXJoint_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GVPhysXAggregateData_t::SetJoints(std::vector<GVPhysXJoint_t> value) {
    SetSchemaValueCUtlVector<GVPhysXJoint_t>(m_ptr, "VPhysXAggregateData_t", "m_joints", true, value);
}

GPhysFeModelDesc_t GVPhysXAggregateData_t::GetFeModel() const {
    GPhysFeModelDesc_t value(GetSchemaValuePtr<void>(m_ptr, "VPhysXAggregateData_t", "m_pFeModel"));
    return value;
}

void GVPhysXAggregateData_t::SetFeModel(GPhysFeModelDesc_t* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'FeModel' is not possible.\n");
}

std::vector<uint16> GVPhysXAggregateData_t::GetBoneParents() const {
    CUtlVector<uint16>* vec = GetSchemaValue<CUtlVector<uint16>*>(m_ptr, "VPhysXAggregateData_t", "m_boneParents"); std::vector<uint16> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GVPhysXAggregateData_t::SetBoneParents(std::vector<uint16> value) {
    SetSchemaValueCUtlVector<uint16>(m_ptr, "VPhysXAggregateData_t", "m_boneParents", true, value);
}

std::vector<uint32> GVPhysXAggregateData_t::GetSurfacePropertyHashes() const {
    CUtlVector<uint32>* vec = GetSchemaValue<CUtlVector<uint32>*>(m_ptr, "VPhysXAggregateData_t", "m_surfacePropertyHashes"); std::vector<uint32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GVPhysXAggregateData_t::SetSurfacePropertyHashes(std::vector<uint32> value) {
    SetSchemaValueCUtlVector<uint32>(m_ptr, "VPhysXAggregateData_t", "m_surfacePropertyHashes", true, value);
}

std::vector<GVPhysXCollisionAttributes_t> GVPhysXAggregateData_t::GetCollisionAttributes() const {
    CUtlVector<GVPhysXCollisionAttributes_t>* vec = GetSchemaValue<CUtlVector<GVPhysXCollisionAttributes_t>*>(m_ptr, "VPhysXAggregateData_t", "m_collisionAttributes"); std::vector<GVPhysXCollisionAttributes_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GVPhysXAggregateData_t::SetCollisionAttributes(std::vector<GVPhysXCollisionAttributes_t> value) {
    SetSchemaValueCUtlVector<GVPhysXCollisionAttributes_t>(m_ptr, "VPhysXAggregateData_t", "m_collisionAttributes", true, value);
}

std::vector<CUtlString> GVPhysXAggregateData_t::GetDebugPartNames() const {
    CUtlVector<CUtlString>* vec = GetSchemaValue<CUtlVector<CUtlString>*>(m_ptr, "VPhysXAggregateData_t", "m_debugPartNames"); std::vector<CUtlString> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GVPhysXAggregateData_t::SetDebugPartNames(std::vector<CUtlString> value) {
    SetSchemaValueCUtlVector<CUtlString>(m_ptr, "VPhysXAggregateData_t", "m_debugPartNames", true, value);
}

CUtlString GVPhysXAggregateData_t::GetEmbeddedKeyvalues() const {
    return GetSchemaValue<CUtlString>(m_ptr, "VPhysXAggregateData_t", "m_embeddedKeyvalues");
}

void GVPhysXAggregateData_t::SetEmbeddedKeyvalues(CUtlString value) {
    SetSchemaValue(m_ptr, "VPhysXAggregateData_t", "m_embeddedKeyvalues", true, value);
}

std::string GVPhysXAggregateData_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVPhysXAggregateData_t::IsValid() {
    return (m_ptr != nullptr);
}

GCSequenceUpdateNode::GCSequenceUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSequenceUpdateNode::GCSequenceUpdateNode(void *ptr) {
    m_ptr = ptr;
}

GCParamSpanUpdater GCSequenceUpdateNode::GetParamSpans() const {
    return GetSchemaValue<GCParamSpanUpdater>(m_ptr, "CSequenceUpdateNode", "m_paramSpans");
}

void GCSequenceUpdateNode::SetParamSpans(GCParamSpanUpdater value) {
    SetSchemaValue(m_ptr, "CSequenceUpdateNode", "m_paramSpans", false, value);
}

std::vector<GTagSpan_t> GCSequenceUpdateNode::GetTags() const {
    CUtlVector<GTagSpan_t>* vec = GetSchemaValue<CUtlVector<GTagSpan_t>*>(m_ptr, "CSequenceUpdateNode", "m_tags"); std::vector<GTagSpan_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSequenceUpdateNode::SetTags(std::vector<GTagSpan_t> value) {
    SetSchemaValueCUtlVector<GTagSpan_t>(m_ptr, "CSequenceUpdateNode", "m_tags", false, value);
}

float GCSequenceUpdateNode::GetPlaybackSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CSequenceUpdateNode", "m_playbackSpeed");
}

void GCSequenceUpdateNode::SetPlaybackSpeed(float value) {
    SetSchemaValue(m_ptr, "CSequenceUpdateNode", "m_playbackSpeed", false, value);
}

float GCSequenceUpdateNode::GetDuration() const {
    return GetSchemaValue<float>(m_ptr, "CSequenceUpdateNode", "m_duration");
}

void GCSequenceUpdateNode::SetDuration(float value) {
    SetSchemaValue(m_ptr, "CSequenceUpdateNode", "m_duration", false, value);
}

bool GCSequenceUpdateNode::GetLoop() const {
    return GetSchemaValue<bool>(m_ptr, "CSequenceUpdateNode", "m_bLoop");
}

void GCSequenceUpdateNode::SetLoop(bool value) {
    SetSchemaValue(m_ptr, "CSequenceUpdateNode", "m_bLoop", false, value);
}

std::string GCSequenceUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSequenceUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GCModelConfigElement_Command::GCModelConfigElement_Command(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCModelConfigElement_Command::GCModelConfigElement_Command(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCModelConfigElement_Command::GetCommand() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CModelConfigElement_Command", "m_Command");
}

void GCModelConfigElement_Command::SetCommand(CUtlString value) {
    SetSchemaValue(m_ptr, "CModelConfigElement_Command", "m_Command", false, value);
}

std::string GCModelConfigElement_Command::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCModelConfigElement_Command::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimParameterBase::GCAnimParameterBase(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimParameterBase::GCAnimParameterBase(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCAnimParameterBase::GetComment() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CAnimParameterBase", "m_sComment");
}

void GCAnimParameterBase::SetComment(CUtlString value) {
    SetSchemaValue(m_ptr, "CAnimParameterBase", "m_sComment", false, value);
}

CUtlString GCAnimParameterBase::GetGroup() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CAnimParameterBase", "m_group");
}

void GCAnimParameterBase::SetGroup(CUtlString value) {
    SetSchemaValue(m_ptr, "CAnimParameterBase", "m_group", false, value);
}

GAnimParamID GCAnimParameterBase::GetId() const {
    return GetSchemaValue<GAnimParamID>(m_ptr, "CAnimParameterBase", "m_id");
}

void GCAnimParameterBase::SetId(GAnimParamID value) {
    SetSchemaValue(m_ptr, "CAnimParameterBase", "m_id", false, value);
}

CUtlString GCAnimParameterBase::GetComponentName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CAnimParameterBase", "m_componentName");
}

void GCAnimParameterBase::SetComponentName(CUtlString value) {
    SetSchemaValue(m_ptr, "CAnimParameterBase", "m_componentName", false, value);
}

bool GCAnimParameterBase::GetNetworkingRequested() const {
    return GetSchemaValue<bool>(m_ptr, "CAnimParameterBase", "m_bNetworkingRequested");
}

void GCAnimParameterBase::SetNetworkingRequested(bool value) {
    SetSchemaValue(m_ptr, "CAnimParameterBase", "m_bNetworkingRequested", false, value);
}

bool GCAnimParameterBase::GetIsReferenced() const {
    return GetSchemaValue<bool>(m_ptr, "CAnimParameterBase", "m_bIsReferenced");
}

void GCAnimParameterBase::SetIsReferenced(bool value) {
    SetSchemaValue(m_ptr, "CAnimParameterBase", "m_bIsReferenced", false, value);
}

std::string GCAnimParameterBase::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimParameterBase::IsValid() {
    return (m_ptr != nullptr);
}

GCompositeMaterialInputLooseVariable_t::GCompositeMaterialInputLooseVariable_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCompositeMaterialInputLooseVariable_t::GCompositeMaterialInputLooseVariable_t(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCompositeMaterialInputLooseVariable_t::GetStrName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_strName");
}

void GCompositeMaterialInputLooseVariable_t::SetStrName(CUtlString value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_strName", true, value);
}

bool GCompositeMaterialInputLooseVariable_t::GetExposeExternally() const {
    return GetSchemaValue<bool>(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_bExposeExternally");
}

void GCompositeMaterialInputLooseVariable_t::SetExposeExternally(bool value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_bExposeExternally", true, value);
}

CUtlString GCompositeMaterialInputLooseVariable_t::GetStrExposedFriendlyName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_strExposedFriendlyName");
}

void GCompositeMaterialInputLooseVariable_t::SetStrExposedFriendlyName(CUtlString value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_strExposedFriendlyName", true, value);
}

CUtlString GCompositeMaterialInputLooseVariable_t::GetStrExposedFriendlyGroupName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_strExposedFriendlyGroupName");
}

void GCompositeMaterialInputLooseVariable_t::SetStrExposedFriendlyGroupName(CUtlString value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_strExposedFriendlyGroupName", true, value);
}

bool GCompositeMaterialInputLooseVariable_t::GetExposedVariableIsFixedRange() const {
    return GetSchemaValue<bool>(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_bExposedVariableIsFixedRange");
}

void GCompositeMaterialInputLooseVariable_t::SetExposedVariableIsFixedRange(bool value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_bExposedVariableIsFixedRange", true, value);
}

CUtlString GCompositeMaterialInputLooseVariable_t::GetStrExposedVisibleWhenTrue() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_strExposedVisibleWhenTrue");
}

void GCompositeMaterialInputLooseVariable_t::SetStrExposedVisibleWhenTrue(CUtlString value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_strExposedVisibleWhenTrue", true, value);
}

CUtlString GCompositeMaterialInputLooseVariable_t::GetStrExposedHiddenWhenTrue() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_strExposedHiddenWhenTrue");
}

void GCompositeMaterialInputLooseVariable_t::SetStrExposedHiddenWhenTrue(CUtlString value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_strExposedHiddenWhenTrue", true, value);
}

CompositeMaterialInputLooseVariableType_t GCompositeMaterialInputLooseVariable_t::GetVariableType() const {
    return GetSchemaValue<CompositeMaterialInputLooseVariableType_t>(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_nVariableType");
}

void GCompositeMaterialInputLooseVariable_t::SetVariableType(CompositeMaterialInputLooseVariableType_t value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_nVariableType", true, value);
}

bool GCompositeMaterialInputLooseVariable_t::GetValueBoolean() const {
    return GetSchemaValue<bool>(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_bValueBoolean");
}

void GCompositeMaterialInputLooseVariable_t::SetValueBoolean(bool value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_bValueBoolean", true, value);
}

int32_t GCompositeMaterialInputLooseVariable_t::GetValueIntX() const {
    return GetSchemaValue<int32_t>(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_nValueIntX");
}

void GCompositeMaterialInputLooseVariable_t::SetValueIntX(int32_t value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_nValueIntX", true, value);
}

int32_t GCompositeMaterialInputLooseVariable_t::GetValueIntY() const {
    return GetSchemaValue<int32_t>(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_nValueIntY");
}

void GCompositeMaterialInputLooseVariable_t::SetValueIntY(int32_t value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_nValueIntY", true, value);
}

int32_t GCompositeMaterialInputLooseVariable_t::GetValueIntZ() const {
    return GetSchemaValue<int32_t>(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_nValueIntZ");
}

void GCompositeMaterialInputLooseVariable_t::SetValueIntZ(int32_t value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_nValueIntZ", true, value);
}

int32_t GCompositeMaterialInputLooseVariable_t::GetValueIntW() const {
    return GetSchemaValue<int32_t>(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_nValueIntW");
}

void GCompositeMaterialInputLooseVariable_t::SetValueIntW(int32_t value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_nValueIntW", true, value);
}

bool GCompositeMaterialInputLooseVariable_t::GetHasFloatBounds() const {
    return GetSchemaValue<bool>(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_bHasFloatBounds");
}

void GCompositeMaterialInputLooseVariable_t::SetHasFloatBounds(bool value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_bHasFloatBounds", true, value);
}

float GCompositeMaterialInputLooseVariable_t::GetValueFloatX() const {
    return GetSchemaValue<float>(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_flValueFloatX");
}

void GCompositeMaterialInputLooseVariable_t::SetValueFloatX(float value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_flValueFloatX", true, value);
}

float GCompositeMaterialInputLooseVariable_t::GetValueFloatX_Min() const {
    return GetSchemaValue<float>(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_flValueFloatX_Min");
}

void GCompositeMaterialInputLooseVariable_t::SetValueFloatX_Min(float value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_flValueFloatX_Min", true, value);
}

float GCompositeMaterialInputLooseVariable_t::GetValueFloatX_Max() const {
    return GetSchemaValue<float>(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_flValueFloatX_Max");
}

void GCompositeMaterialInputLooseVariable_t::SetValueFloatX_Max(float value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_flValueFloatX_Max", true, value);
}

float GCompositeMaterialInputLooseVariable_t::GetValueFloatY() const {
    return GetSchemaValue<float>(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_flValueFloatY");
}

void GCompositeMaterialInputLooseVariable_t::SetValueFloatY(float value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_flValueFloatY", true, value);
}

float GCompositeMaterialInputLooseVariable_t::GetValueFloatY_Min() const {
    return GetSchemaValue<float>(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_flValueFloatY_Min");
}

void GCompositeMaterialInputLooseVariable_t::SetValueFloatY_Min(float value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_flValueFloatY_Min", true, value);
}

float GCompositeMaterialInputLooseVariable_t::GetValueFloatY_Max() const {
    return GetSchemaValue<float>(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_flValueFloatY_Max");
}

void GCompositeMaterialInputLooseVariable_t::SetValueFloatY_Max(float value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_flValueFloatY_Max", true, value);
}

float GCompositeMaterialInputLooseVariable_t::GetValueFloatZ() const {
    return GetSchemaValue<float>(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_flValueFloatZ");
}

void GCompositeMaterialInputLooseVariable_t::SetValueFloatZ(float value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_flValueFloatZ", true, value);
}

float GCompositeMaterialInputLooseVariable_t::GetValueFloatZ_Min() const {
    return GetSchemaValue<float>(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_flValueFloatZ_Min");
}

void GCompositeMaterialInputLooseVariable_t::SetValueFloatZ_Min(float value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_flValueFloatZ_Min", true, value);
}

float GCompositeMaterialInputLooseVariable_t::GetValueFloatZ_Max() const {
    return GetSchemaValue<float>(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_flValueFloatZ_Max");
}

void GCompositeMaterialInputLooseVariable_t::SetValueFloatZ_Max(float value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_flValueFloatZ_Max", true, value);
}

float GCompositeMaterialInputLooseVariable_t::GetValueFloatW() const {
    return GetSchemaValue<float>(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_flValueFloatW");
}

void GCompositeMaterialInputLooseVariable_t::SetValueFloatW(float value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_flValueFloatW", true, value);
}

float GCompositeMaterialInputLooseVariable_t::GetValueFloatW_Min() const {
    return GetSchemaValue<float>(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_flValueFloatW_Min");
}

void GCompositeMaterialInputLooseVariable_t::SetValueFloatW_Min(float value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_flValueFloatW_Min", true, value);
}

float GCompositeMaterialInputLooseVariable_t::GetValueFloatW_Max() const {
    return GetSchemaValue<float>(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_flValueFloatW_Max");
}

void GCompositeMaterialInputLooseVariable_t::SetValueFloatW_Max(float value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_flValueFloatW_Max", true, value);
}

Color GCompositeMaterialInputLooseVariable_t::GetCValueColor4() const {
    return GetSchemaValue<Color>(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_cValueColor4");
}

void GCompositeMaterialInputLooseVariable_t::SetCValueColor4(Color value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_cValueColor4", true, value);
}

CompositeMaterialVarSystemVar_t GCompositeMaterialInputLooseVariable_t::GetValueSystemVar() const {
    return GetSchemaValue<CompositeMaterialVarSystemVar_t>(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_nValueSystemVar");
}

void GCompositeMaterialInputLooseVariable_t::SetValueSystemVar(CompositeMaterialVarSystemVar_t value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_nValueSystemVar", true, value);
}

CUtlString GCompositeMaterialInputLooseVariable_t::GetStrTextureContentAssetPath() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_strTextureContentAssetPath");
}

void GCompositeMaterialInputLooseVariable_t::SetStrTextureContentAssetPath(CUtlString value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_strTextureContentAssetPath", true, value);
}

CUtlString GCompositeMaterialInputLooseVariable_t::GetStrTextureCompilationVtexTemplate() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_strTextureCompilationVtexTemplate");
}

void GCompositeMaterialInputLooseVariable_t::SetStrTextureCompilationVtexTemplate(CUtlString value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_strTextureCompilationVtexTemplate", true, value);
}

CompositeMaterialInputTextureType_t GCompositeMaterialInputLooseVariable_t::GetTextureType() const {
    return GetSchemaValue<CompositeMaterialInputTextureType_t>(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_nTextureType");
}

void GCompositeMaterialInputLooseVariable_t::SetTextureType(CompositeMaterialInputTextureType_t value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_nTextureType", true, value);
}

CUtlString GCompositeMaterialInputLooseVariable_t::GetStrString() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_strString");
}

void GCompositeMaterialInputLooseVariable_t::SetStrString(CUtlString value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_strString", true, value);
}

CUtlString GCompositeMaterialInputLooseVariable_t::GetStrPanoramaPanelPath() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_strPanoramaPanelPath");
}

void GCompositeMaterialInputLooseVariable_t::SetStrPanoramaPanelPath(CUtlString value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_strPanoramaPanelPath", true, value);
}

int32_t GCompositeMaterialInputLooseVariable_t::GetPanoramaRenderRes() const {
    return GetSchemaValue<int32_t>(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_nPanoramaRenderRes");
}

void GCompositeMaterialInputLooseVariable_t::SetPanoramaRenderRes(int32_t value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputLooseVariable_t", "m_nPanoramaRenderRes", true, value);
}

std::string GCompositeMaterialInputLooseVariable_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCompositeMaterialInputLooseVariable_t::IsValid() {
    return (m_ptr != nullptr);
}

GVecInputMaterialVariable_t::GVecInputMaterialVariable_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVecInputMaterialVariable_t::GVecInputMaterialVariable_t(void *ptr) {
    m_ptr = ptr;
}

CUtlString GVecInputMaterialVariable_t::GetStrVariable() const {
    return GetSchemaValue<CUtlString>(m_ptr, "VecInputMaterialVariable_t", "m_strVariable");
}

void GVecInputMaterialVariable_t::SetStrVariable(CUtlString value) {
    SetSchemaValue(m_ptr, "VecInputMaterialVariable_t", "m_strVariable", true, value);
}

std::string GVecInputMaterialVariable_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVecInputMaterialVariable_t::IsValid() {
    return (m_ptr != nullptr);
}

GCCachedPose::GCCachedPose(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCachedPose::GCCachedPose(void *ptr) {
    m_ptr = ptr;
}

std::vector<float32> GCCachedPose::GetMorphWeights() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "CCachedPose", "m_morphWeights"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCCachedPose::SetMorphWeights(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "CCachedPose", "m_morphWeights", false, value);
}

float GCCachedPose::GetCycle() const {
    return GetSchemaValue<float>(m_ptr, "CCachedPose", "m_flCycle");
}

void GCCachedPose::SetCycle(float value) {
    SetSchemaValue(m_ptr, "CCachedPose", "m_flCycle", false, value);
}

std::string GCCachedPose::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCachedPose::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimGraphSettingsGroup::GCAnimGraphSettingsGroup(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimGraphSettingsGroup::GCAnimGraphSettingsGroup(void *ptr) {
    m_ptr = ptr;
}

std::string GCAnimGraphSettingsGroup::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimGraphSettingsGroup::IsValid() {
    return (m_ptr != nullptr);
}

GCModelConfig::GCModelConfig(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCModelConfig::GCModelConfig(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCModelConfig::GetConfigName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CModelConfig", "m_ConfigName");
}

void GCModelConfig::SetConfigName(CUtlString value) {
    SetSchemaValue(m_ptr, "CModelConfig", "m_ConfigName", false, value);
}

std::vector<GCModelConfigElement*> GCModelConfig::GetElements() const {
    CUtlVector<GCModelConfigElement*>* vec = GetSchemaValue<CUtlVector<GCModelConfigElement*>*>(m_ptr, "CModelConfig", "m_Elements"); std::vector<GCModelConfigElement*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCModelConfig::SetElements(std::vector<GCModelConfigElement*> value) {
    SetSchemaValueCUtlVector<GCModelConfigElement*>(m_ptr, "CModelConfig", "m_Elements", false, value);
}

bool GCModelConfig::GetTopLevel() const {
    return GetSchemaValue<bool>(m_ptr, "CModelConfig", "m_bTopLevel");
}

void GCModelConfig::SetTopLevel(bool value) {
    SetSchemaValue(m_ptr, "CModelConfig", "m_bTopLevel", false, value);
}

std::string GCModelConfig::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCModelConfig::IsValid() {
    return (m_ptr != nullptr);
}

GFootLockPoseOpFixedSettings::GFootLockPoseOpFixedSettings(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFootLockPoseOpFixedSettings::GFootLockPoseOpFixedSettings(void *ptr) {
    m_ptr = ptr;
}

std::vector<GFootFixedData_t> GFootLockPoseOpFixedSettings::GetFootInfo() const {
    CUtlVector<GFootFixedData_t>* vec = GetSchemaValue<CUtlVector<GFootFixedData_t>*>(m_ptr, "FootLockPoseOpFixedSettings", "m_footInfo"); std::vector<GFootFixedData_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GFootLockPoseOpFixedSettings::SetFootInfo(std::vector<GFootFixedData_t> value) {
    SetSchemaValueCUtlVector<GFootFixedData_t>(m_ptr, "FootLockPoseOpFixedSettings", "m_footInfo", false, value);
}

GCAnimInputDamping GFootLockPoseOpFixedSettings::GetHipDampingSettings() const {
    return GetSchemaValue<GCAnimInputDamping>(m_ptr, "FootLockPoseOpFixedSettings", "m_hipDampingSettings");
}

void GFootLockPoseOpFixedSettings::SetHipDampingSettings(GCAnimInputDamping value) {
    SetSchemaValue(m_ptr, "FootLockPoseOpFixedSettings", "m_hipDampingSettings", false, value);
}

int32_t GFootLockPoseOpFixedSettings::GetHipBoneIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "FootLockPoseOpFixedSettings", "m_nHipBoneIndex");
}

void GFootLockPoseOpFixedSettings::SetHipBoneIndex(int32_t value) {
    SetSchemaValue(m_ptr, "FootLockPoseOpFixedSettings", "m_nHipBoneIndex", false, value);
}

IKSolverType GFootLockPoseOpFixedSettings::GetIkSolverType() const {
    return GetSchemaValue<IKSolverType>(m_ptr, "FootLockPoseOpFixedSettings", "m_ikSolverType");
}

void GFootLockPoseOpFixedSettings::SetIkSolverType(IKSolverType value) {
    SetSchemaValue(m_ptr, "FootLockPoseOpFixedSettings", "m_ikSolverType", false, value);
}

bool GFootLockPoseOpFixedSettings::GetApplyTilt() const {
    return GetSchemaValue<bool>(m_ptr, "FootLockPoseOpFixedSettings", "m_bApplyTilt");
}

void GFootLockPoseOpFixedSettings::SetApplyTilt(bool value) {
    SetSchemaValue(m_ptr, "FootLockPoseOpFixedSettings", "m_bApplyTilt", false, value);
}

bool GFootLockPoseOpFixedSettings::GetApplyHipDrop() const {
    return GetSchemaValue<bool>(m_ptr, "FootLockPoseOpFixedSettings", "m_bApplyHipDrop");
}

void GFootLockPoseOpFixedSettings::SetApplyHipDrop(bool value) {
    SetSchemaValue(m_ptr, "FootLockPoseOpFixedSettings", "m_bApplyHipDrop", false, value);
}

bool GFootLockPoseOpFixedSettings::GetAlwaysUseFallbackHinge() const {
    return GetSchemaValue<bool>(m_ptr, "FootLockPoseOpFixedSettings", "m_bAlwaysUseFallbackHinge");
}

void GFootLockPoseOpFixedSettings::SetAlwaysUseFallbackHinge(bool value) {
    SetSchemaValue(m_ptr, "FootLockPoseOpFixedSettings", "m_bAlwaysUseFallbackHinge", false, value);
}

bool GFootLockPoseOpFixedSettings::GetApplyFootRotationLimits() const {
    return GetSchemaValue<bool>(m_ptr, "FootLockPoseOpFixedSettings", "m_bApplyFootRotationLimits");
}

void GFootLockPoseOpFixedSettings::SetApplyFootRotationLimits(bool value) {
    SetSchemaValue(m_ptr, "FootLockPoseOpFixedSettings", "m_bApplyFootRotationLimits", false, value);
}

bool GFootLockPoseOpFixedSettings::GetApplyLegTwistLimits() const {
    return GetSchemaValue<bool>(m_ptr, "FootLockPoseOpFixedSettings", "m_bApplyLegTwistLimits");
}

void GFootLockPoseOpFixedSettings::SetApplyLegTwistLimits(bool value) {
    SetSchemaValue(m_ptr, "FootLockPoseOpFixedSettings", "m_bApplyLegTwistLimits", false, value);
}

float GFootLockPoseOpFixedSettings::GetMaxFootHeight() const {
    return GetSchemaValue<float>(m_ptr, "FootLockPoseOpFixedSettings", "m_flMaxFootHeight");
}

void GFootLockPoseOpFixedSettings::SetMaxFootHeight(float value) {
    SetSchemaValue(m_ptr, "FootLockPoseOpFixedSettings", "m_flMaxFootHeight", false, value);
}

float GFootLockPoseOpFixedSettings::GetExtensionScale() const {
    return GetSchemaValue<float>(m_ptr, "FootLockPoseOpFixedSettings", "m_flExtensionScale");
}

void GFootLockPoseOpFixedSettings::SetExtensionScale(float value) {
    SetSchemaValue(m_ptr, "FootLockPoseOpFixedSettings", "m_flExtensionScale", false, value);
}

float GFootLockPoseOpFixedSettings::GetMaxLegTwist() const {
    return GetSchemaValue<float>(m_ptr, "FootLockPoseOpFixedSettings", "m_flMaxLegTwist");
}

void GFootLockPoseOpFixedSettings::SetMaxLegTwist(float value) {
    SetSchemaValue(m_ptr, "FootLockPoseOpFixedSettings", "m_flMaxLegTwist", false, value);
}

bool GFootLockPoseOpFixedSettings::GetEnableLockBreaking() const {
    return GetSchemaValue<bool>(m_ptr, "FootLockPoseOpFixedSettings", "m_bEnableLockBreaking");
}

void GFootLockPoseOpFixedSettings::SetEnableLockBreaking(bool value) {
    SetSchemaValue(m_ptr, "FootLockPoseOpFixedSettings", "m_bEnableLockBreaking", false, value);
}

float GFootLockPoseOpFixedSettings::GetLockBreakTolerance() const {
    return GetSchemaValue<float>(m_ptr, "FootLockPoseOpFixedSettings", "m_flLockBreakTolerance");
}

void GFootLockPoseOpFixedSettings::SetLockBreakTolerance(float value) {
    SetSchemaValue(m_ptr, "FootLockPoseOpFixedSettings", "m_flLockBreakTolerance", false, value);
}

float GFootLockPoseOpFixedSettings::GetLockBlendTime() const {
    return GetSchemaValue<float>(m_ptr, "FootLockPoseOpFixedSettings", "m_flLockBlendTime");
}

void GFootLockPoseOpFixedSettings::SetLockBlendTime(float value) {
    SetSchemaValue(m_ptr, "FootLockPoseOpFixedSettings", "m_flLockBlendTime", false, value);
}

bool GFootLockPoseOpFixedSettings::GetEnableStretching() const {
    return GetSchemaValue<bool>(m_ptr, "FootLockPoseOpFixedSettings", "m_bEnableStretching");
}

void GFootLockPoseOpFixedSettings::SetEnableStretching(bool value) {
    SetSchemaValue(m_ptr, "FootLockPoseOpFixedSettings", "m_bEnableStretching", false, value);
}

float GFootLockPoseOpFixedSettings::GetMaxStretchAmount() const {
    return GetSchemaValue<float>(m_ptr, "FootLockPoseOpFixedSettings", "m_flMaxStretchAmount");
}

void GFootLockPoseOpFixedSettings::SetMaxStretchAmount(float value) {
    SetSchemaValue(m_ptr, "FootLockPoseOpFixedSettings", "m_flMaxStretchAmount", false, value);
}

float GFootLockPoseOpFixedSettings::GetStretchExtensionScale() const {
    return GetSchemaValue<float>(m_ptr, "FootLockPoseOpFixedSettings", "m_flStretchExtensionScale");
}

void GFootLockPoseOpFixedSettings::SetStretchExtensionScale(float value) {
    SetSchemaValue(m_ptr, "FootLockPoseOpFixedSettings", "m_flStretchExtensionScale", false, value);
}

std::string GFootLockPoseOpFixedSettings::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFootLockPoseOpFixedSettings::IsValid() {
    return (m_ptr != nullptr);
}

GCFlexRule::GCFlexRule(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFlexRule::GCFlexRule(void *ptr) {
    m_ptr = ptr;
}

int32_t GCFlexRule::GetFlex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CFlexRule", "m_nFlex");
}

void GCFlexRule::SetFlex(int32_t value) {
    SetSchemaValue(m_ptr, "CFlexRule", "m_nFlex", false, value);
}

std::vector<GCFlexOp> GCFlexRule::GetFlexOps() const {
    CUtlVector<GCFlexOp>* vec = GetSchemaValue<CUtlVector<GCFlexOp>*>(m_ptr, "CFlexRule", "m_FlexOps"); std::vector<GCFlexOp> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCFlexRule::SetFlexOps(std::vector<GCFlexOp> value) {
    SetSchemaValueCUtlVector<GCFlexOp>(m_ptr, "CFlexRule", "m_FlexOps", false, value);
}

std::string GCFlexRule::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFlexRule::IsValid() {
    return (m_ptr != nullptr);
}

GCSosGroupActionSetSoundeventParameterSchema::GCSosGroupActionSetSoundeventParameterSchema(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSosGroupActionSetSoundeventParameterSchema::GCSosGroupActionSetSoundeventParameterSchema(void *ptr) {
    m_ptr = ptr;
}

int32_t GCSosGroupActionSetSoundeventParameterSchema::GetMaxCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSosGroupActionSetSoundeventParameterSchema", "m_nMaxCount");
}

void GCSosGroupActionSetSoundeventParameterSchema::SetMaxCount(int32_t value) {
    SetSchemaValue(m_ptr, "CSosGroupActionSetSoundeventParameterSchema", "m_nMaxCount", false, value);
}

float GCSosGroupActionSetSoundeventParameterSchema::GetMinValue() const {
    return GetSchemaValue<float>(m_ptr, "CSosGroupActionSetSoundeventParameterSchema", "m_flMinValue");
}

void GCSosGroupActionSetSoundeventParameterSchema::SetMinValue(float value) {
    SetSchemaValue(m_ptr, "CSosGroupActionSetSoundeventParameterSchema", "m_flMinValue", false, value);
}

float GCSosGroupActionSetSoundeventParameterSchema::GetMaxValue() const {
    return GetSchemaValue<float>(m_ptr, "CSosGroupActionSetSoundeventParameterSchema", "m_flMaxValue");
}

void GCSosGroupActionSetSoundeventParameterSchema::SetMaxValue(float value) {
    SetSchemaValue(m_ptr, "CSosGroupActionSetSoundeventParameterSchema", "m_flMaxValue", false, value);
}

CUtlString GCSosGroupActionSetSoundeventParameterSchema::GetOpvarName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CSosGroupActionSetSoundeventParameterSchema", "m_opvarName");
}

void GCSosGroupActionSetSoundeventParameterSchema::SetOpvarName(CUtlString value) {
    SetSchemaValue(m_ptr, "CSosGroupActionSetSoundeventParameterSchema", "m_opvarName", false, value);
}

SosActionSortType_t GCSosGroupActionSetSoundeventParameterSchema::GetSortType() const {
    return GetSchemaValue<SosActionSortType_t>(m_ptr, "CSosGroupActionSetSoundeventParameterSchema", "m_nSortType");
}

void GCSosGroupActionSetSoundeventParameterSchema::SetSortType(SosActionSortType_t value) {
    SetSchemaValue(m_ptr, "CSosGroupActionSetSoundeventParameterSchema", "m_nSortType", false, value);
}

std::string GCSosGroupActionSetSoundeventParameterSchema::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSosGroupActionSetSoundeventParameterSchema::IsValid() {
    return (m_ptr != nullptr);
}

GCStepsRemainingMetricEvaluator::GCStepsRemainingMetricEvaluator(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCStepsRemainingMetricEvaluator::GCStepsRemainingMetricEvaluator(void *ptr) {
    m_ptr = ptr;
}

std::vector<int32> GCStepsRemainingMetricEvaluator::GetFootIndices() const {
    CUtlVector<int32>* vec = GetSchemaValue<CUtlVector<int32>*>(m_ptr, "CStepsRemainingMetricEvaluator", "m_footIndices"); std::vector<int32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCStepsRemainingMetricEvaluator::SetFootIndices(std::vector<int32> value) {
    SetSchemaValueCUtlVector<int32>(m_ptr, "CStepsRemainingMetricEvaluator", "m_footIndices", false, value);
}

float GCStepsRemainingMetricEvaluator::GetMinStepsRemaining() const {
    return GetSchemaValue<float>(m_ptr, "CStepsRemainingMetricEvaluator", "m_flMinStepsRemaining");
}

void GCStepsRemainingMetricEvaluator::SetMinStepsRemaining(float value) {
    SetSchemaValue(m_ptr, "CStepsRemainingMetricEvaluator", "m_flMinStepsRemaining", false, value);
}

std::string GCStepsRemainingMetricEvaluator::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCStepsRemainingMetricEvaluator::IsValid() {
    return (m_ptr != nullptr);
}

GNmCompressionSettings_t__QuantizationRange_t::GNmCompressionSettings_t__QuantizationRange_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GNmCompressionSettings_t__QuantizationRange_t::GNmCompressionSettings_t__QuantizationRange_t(void *ptr) {
    m_ptr = ptr;
}

float GNmCompressionSettings_t__QuantizationRange_t::GetRangeStart() const {
    return GetSchemaValue<float>(m_ptr, "NmCompressionSettings_t__QuantizationRange_t", "m_flRangeStart");
}

void GNmCompressionSettings_t__QuantizationRange_t::SetRangeStart(float value) {
    SetSchemaValue(m_ptr, "NmCompressionSettings_t__QuantizationRange_t", "m_flRangeStart", true, value);
}

float GNmCompressionSettings_t__QuantizationRange_t::GetRangeLength() const {
    return GetSchemaValue<float>(m_ptr, "NmCompressionSettings_t__QuantizationRange_t", "m_flRangeLength");
}

void GNmCompressionSettings_t__QuantizationRange_t::SetRangeLength(float value) {
    SetSchemaValue(m_ptr, "NmCompressionSettings_t__QuantizationRange_t", "m_flRangeLength", true, value);
}

std::string GNmCompressionSettings_t__QuantizationRange_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GNmCompressionSettings_t__QuantizationRange_t::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimParameterManagerUpdater::GCAnimParameterManagerUpdater(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimParameterManagerUpdater::GCAnimParameterManagerUpdater(void *ptr) {
    m_ptr = ptr;
}

std::vector<GCAnimParamHandle> GCAnimParameterManagerUpdater::GetIndexToHandle() const {
    CUtlVector<GCAnimParamHandle>* vec = GetSchemaValue<CUtlVector<GCAnimParamHandle>*>(m_ptr, "CAnimParameterManagerUpdater", "m_indexToHandle"); std::vector<GCAnimParamHandle> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimParameterManagerUpdater::SetIndexToHandle(std::vector<GCAnimParamHandle> value) {
    SetSchemaValueCUtlVector<GCAnimParamHandle>(m_ptr, "CAnimParameterManagerUpdater", "m_indexToHandle", false, value);
}

std::string GCAnimParameterManagerUpdater::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimParameterManagerUpdater::IsValid() {
    return (m_ptr != nullptr);
}

GCModelConfigElement_RandomColor::GCModelConfigElement_RandomColor(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCModelConfigElement_RandomColor::GCModelConfigElement_RandomColor(void *ptr) {
    m_ptr = ptr;
}

std::string GCModelConfigElement_RandomColor::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCModelConfigElement_RandomColor::IsValid() {
    return (m_ptr != nullptr);
}

GCMotionNode::GCMotionNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMotionNode::GCMotionNode(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCMotionNode::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CMotionNode", "m_name");
}

void GCMotionNode::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "CMotionNode", "m_name", false, value);
}

GAnimNodeID GCMotionNode::GetId() const {
    return GetSchemaValue<GAnimNodeID>(m_ptr, "CMotionNode", "m_id");
}

void GCMotionNode::SetId(GAnimNodeID value) {
    SetSchemaValue(m_ptr, "CMotionNode", "m_id", false, value);
}

std::string GCMotionNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMotionNode::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimTagBase::GCAnimTagBase(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimTagBase::GCAnimTagBase(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCAnimTagBase::GetComment() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CAnimTagBase", "m_sComment");
}

void GCAnimTagBase::SetComment(CUtlString value) {
    SetSchemaValue(m_ptr, "CAnimTagBase", "m_sComment", false, value);
}

GAnimTagID GCAnimTagBase::GetTagID() const {
    return GetSchemaValue<GAnimTagID>(m_ptr, "CAnimTagBase", "m_tagID");
}

void GCAnimTagBase::SetTagID(GAnimTagID value) {
    SetSchemaValue(m_ptr, "CAnimTagBase", "m_tagID", false, value);
}

bool GCAnimTagBase::GetIsReferenced() const {
    return GetSchemaValue<bool>(m_ptr, "CAnimTagBase", "m_bIsReferenced");
}

void GCAnimTagBase::SetIsReferenced(bool value) {
    SetSchemaValue(m_ptr, "CAnimTagBase", "m_bIsReferenced", false, value);
}

std::string GCAnimTagBase::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimTagBase::IsValid() {
    return (m_ptr != nullptr);
}

GAnimComponentID::GAnimComponentID(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GAnimComponentID::GAnimComponentID(void *ptr) {
    m_ptr = ptr;
}

uint32_t GAnimComponentID::GetId() const {
    return GetSchemaValue<uint32_t>(m_ptr, "AnimComponentID", "m_id");
}

void GAnimComponentID::SetId(uint32_t value) {
    SetSchemaValue(m_ptr, "AnimComponentID", "m_id", false, value);
}

std::string GAnimComponentID::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GAnimComponentID::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimLocalHierarchy::GCAnimLocalHierarchy(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimLocalHierarchy::GCAnimLocalHierarchy(void *ptr) {
    m_ptr = ptr;
}

CBufferString GCAnimLocalHierarchy::GetBone() const {
    return GetSchemaValue<CBufferString>(m_ptr, "CAnimLocalHierarchy", "m_sBone");
}

void GCAnimLocalHierarchy::SetBone(CBufferString value) {
    SetSchemaValue(m_ptr, "CAnimLocalHierarchy", "m_sBone", false, value);
}

CBufferString GCAnimLocalHierarchy::GetNewParent() const {
    return GetSchemaValue<CBufferString>(m_ptr, "CAnimLocalHierarchy", "m_sNewParent");
}

void GCAnimLocalHierarchy::SetNewParent(CBufferString value) {
    SetSchemaValue(m_ptr, "CAnimLocalHierarchy", "m_sNewParent", false, value);
}

int32_t GCAnimLocalHierarchy::GetStartFrame() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimLocalHierarchy", "m_nStartFrame");
}

void GCAnimLocalHierarchy::SetStartFrame(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimLocalHierarchy", "m_nStartFrame", false, value);
}

int32_t GCAnimLocalHierarchy::GetPeakFrame() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimLocalHierarchy", "m_nPeakFrame");
}

void GCAnimLocalHierarchy::SetPeakFrame(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimLocalHierarchy", "m_nPeakFrame", false, value);
}

int32_t GCAnimLocalHierarchy::GetTailFrame() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimLocalHierarchy", "m_nTailFrame");
}

void GCAnimLocalHierarchy::SetTailFrame(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimLocalHierarchy", "m_nTailFrame", false, value);
}

int32_t GCAnimLocalHierarchy::GetEndFrame() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimLocalHierarchy", "m_nEndFrame");
}

void GCAnimLocalHierarchy::SetEndFrame(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimLocalHierarchy", "m_nEndFrame", false, value);
}

std::string GCAnimLocalHierarchy::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimLocalHierarchy::IsValid() {
    return (m_ptr != nullptr);
}

GRnShapeDesc_t::GRnShapeDesc_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GRnShapeDesc_t::GRnShapeDesc_t(void *ptr) {
    m_ptr = ptr;
}

uint32_t GRnShapeDesc_t::GetCollisionAttributeIndex() const {
    return GetSchemaValue<uint32_t>(m_ptr, "RnShapeDesc_t", "m_nCollisionAttributeIndex");
}

void GRnShapeDesc_t::SetCollisionAttributeIndex(uint32_t value) {
    SetSchemaValue(m_ptr, "RnShapeDesc_t", "m_nCollisionAttributeIndex", true, value);
}

uint32_t GRnShapeDesc_t::GetSurfacePropertyIndex() const {
    return GetSchemaValue<uint32_t>(m_ptr, "RnShapeDesc_t", "m_nSurfacePropertyIndex");
}

void GRnShapeDesc_t::SetSurfacePropertyIndex(uint32_t value) {
    SetSchemaValue(m_ptr, "RnShapeDesc_t", "m_nSurfacePropertyIndex", true, value);
}

CUtlString GRnShapeDesc_t::GetUserFriendlyName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "RnShapeDesc_t", "m_UserFriendlyName");
}

void GRnShapeDesc_t::SetUserFriendlyName(CUtlString value) {
    SetSchemaValue(m_ptr, "RnShapeDesc_t", "m_UserFriendlyName", true, value);
}

std::string GRnShapeDesc_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GRnShapeDesc_t::IsValid() {
    return (m_ptr != nullptr);
}

GCBoneConstraintPoseSpaceBone__Input_t::GCBoneConstraintPoseSpaceBone__Input_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBoneConstraintPoseSpaceBone__Input_t::GCBoneConstraintPoseSpaceBone__Input_t(void *ptr) {
    m_ptr = ptr;
}

Vector GCBoneConstraintPoseSpaceBone__Input_t::GetInputValue() const {
    return GetSchemaValue<Vector>(m_ptr, "CBoneConstraintPoseSpaceBone__Input_t", "m_inputValue");
}

void GCBoneConstraintPoseSpaceBone__Input_t::SetInputValue(Vector value) {
    SetSchemaValue(m_ptr, "CBoneConstraintPoseSpaceBone__Input_t", "m_inputValue", true, value);
}

std::string GCBoneConstraintPoseSpaceBone__Input_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBoneConstraintPoseSpaceBone__Input_t::IsValid() {
    return (m_ptr != nullptr);
}

GCModelConfigElement_SetRenderColor::GCModelConfigElement_SetRenderColor(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCModelConfigElement_SetRenderColor::GCModelConfigElement_SetRenderColor(void *ptr) {
    m_ptr = ptr;
}

Color GCModelConfigElement_SetRenderColor::GetColor() const {
    return GetSchemaValue<Color>(m_ptr, "CModelConfigElement_SetRenderColor", "m_Color");
}

void GCModelConfigElement_SetRenderColor::SetColor(Color value) {
    SetSchemaValue(m_ptr, "CModelConfigElement_SetRenderColor", "m_Color", false, value);
}

std::string GCModelConfigElement_SetRenderColor::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCModelConfigElement_SetRenderColor::IsValid() {
    return (m_ptr != nullptr);
}

GPhysSoftbodyDesc_t::GPhysSoftbodyDesc_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GPhysSoftbodyDesc_t::GPhysSoftbodyDesc_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<uint32> GPhysSoftbodyDesc_t::GetParticleBoneHash() const {
    CUtlVector<uint32>* vec = GetSchemaValue<CUtlVector<uint32>*>(m_ptr, "PhysSoftbodyDesc_t", "m_ParticleBoneHash"); std::vector<uint32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysSoftbodyDesc_t::SetParticleBoneHash(std::vector<uint32> value) {
    SetSchemaValueCUtlVector<uint32>(m_ptr, "PhysSoftbodyDesc_t", "m_ParticleBoneHash", true, value);
}

std::vector<GRnSoftbodyParticle_t> GPhysSoftbodyDesc_t::GetParticles() const {
    CUtlVector<GRnSoftbodyParticle_t>* vec = GetSchemaValue<CUtlVector<GRnSoftbodyParticle_t>*>(m_ptr, "PhysSoftbodyDesc_t", "m_Particles"); std::vector<GRnSoftbodyParticle_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysSoftbodyDesc_t::SetParticles(std::vector<GRnSoftbodyParticle_t> value) {
    SetSchemaValueCUtlVector<GRnSoftbodyParticle_t>(m_ptr, "PhysSoftbodyDesc_t", "m_Particles", true, value);
}

std::vector<GRnSoftbodySpring_t> GPhysSoftbodyDesc_t::GetSprings() const {
    CUtlVector<GRnSoftbodySpring_t>* vec = GetSchemaValue<CUtlVector<GRnSoftbodySpring_t>*>(m_ptr, "PhysSoftbodyDesc_t", "m_Springs"); std::vector<GRnSoftbodySpring_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysSoftbodyDesc_t::SetSprings(std::vector<GRnSoftbodySpring_t> value) {
    SetSchemaValueCUtlVector<GRnSoftbodySpring_t>(m_ptr, "PhysSoftbodyDesc_t", "m_Springs", true, value);
}

std::vector<GRnSoftbodyCapsule_t> GPhysSoftbodyDesc_t::GetCapsules() const {
    CUtlVector<GRnSoftbodyCapsule_t>* vec = GetSchemaValue<CUtlVector<GRnSoftbodyCapsule_t>*>(m_ptr, "PhysSoftbodyDesc_t", "m_Capsules"); std::vector<GRnSoftbodyCapsule_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysSoftbodyDesc_t::SetCapsules(std::vector<GRnSoftbodyCapsule_t> value) {
    SetSchemaValueCUtlVector<GRnSoftbodyCapsule_t>(m_ptr, "PhysSoftbodyDesc_t", "m_Capsules", true, value);
}

std::vector<CUtlString> GPhysSoftbodyDesc_t::GetParticleBoneName() const {
    CUtlVector<CUtlString>* vec = GetSchemaValue<CUtlVector<CUtlString>*>(m_ptr, "PhysSoftbodyDesc_t", "m_ParticleBoneName"); std::vector<CUtlString> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPhysSoftbodyDesc_t::SetParticleBoneName(std::vector<CUtlString> value) {
    SetSchemaValueCUtlVector<CUtlString>(m_ptr, "PhysSoftbodyDesc_t", "m_ParticleBoneName", true, value);
}

std::string GPhysSoftbodyDesc_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GPhysSoftbodyDesc_t::IsValid() {
    return (m_ptr != nullptr);
}

GVMapResourceData_t::GVMapResourceData_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVMapResourceData_t::GVMapResourceData_t(void *ptr) {
    m_ptr = ptr;
}

std::string GVMapResourceData_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVMapResourceData_t::IsValid() {
    return (m_ptr != nullptr);
}

GFeCtrlSoftOffset_t::GFeCtrlSoftOffset_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeCtrlSoftOffset_t::GFeCtrlSoftOffset_t(void *ptr) {
    m_ptr = ptr;
}

uint16_t GFeCtrlSoftOffset_t::GetCtrlParent() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeCtrlSoftOffset_t", "nCtrlParent");
}

void GFeCtrlSoftOffset_t::SetCtrlParent(uint16_t value) {
    SetSchemaValue(m_ptr, "FeCtrlSoftOffset_t", "nCtrlParent", true, value);
}

uint16_t GFeCtrlSoftOffset_t::GetCtrlChild() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeCtrlSoftOffset_t", "nCtrlChild");
}

void GFeCtrlSoftOffset_t::SetCtrlChild(uint16_t value) {
    SetSchemaValue(m_ptr, "FeCtrlSoftOffset_t", "nCtrlChild", true, value);
}

Vector GFeCtrlSoftOffset_t::GetOffset() const {
    return GetSchemaValue<Vector>(m_ptr, "FeCtrlSoftOffset_t", "vOffset");
}

void GFeCtrlSoftOffset_t::SetOffset(Vector value) {
    SetSchemaValue(m_ptr, "FeCtrlSoftOffset_t", "vOffset", true, value);
}

float GFeCtrlSoftOffset_t::GetAlpha() const {
    return GetSchemaValue<float>(m_ptr, "FeCtrlSoftOffset_t", "flAlpha");
}

void GFeCtrlSoftOffset_t::SetAlpha(float value) {
    SetSchemaValue(m_ptr, "FeCtrlSoftOffset_t", "flAlpha", true, value);
}

std::string GFeCtrlSoftOffset_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeCtrlSoftOffset_t::IsValid() {
    return (m_ptr != nullptr);
}

GCMorphBundleData::GCMorphBundleData(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMorphBundleData::GCMorphBundleData(void *ptr) {
    m_ptr = ptr;
}

float GCMorphBundleData::GetULeftSrc() const {
    return GetSchemaValue<float>(m_ptr, "CMorphBundleData", "m_flULeftSrc");
}

void GCMorphBundleData::SetULeftSrc(float value) {
    SetSchemaValue(m_ptr, "CMorphBundleData", "m_flULeftSrc", false, value);
}

float GCMorphBundleData::GetVTopSrc() const {
    return GetSchemaValue<float>(m_ptr, "CMorphBundleData", "m_flVTopSrc");
}

void GCMorphBundleData::SetVTopSrc(float value) {
    SetSchemaValue(m_ptr, "CMorphBundleData", "m_flVTopSrc", false, value);
}

std::vector<float32> GCMorphBundleData::GetOffsets() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "CMorphBundleData", "m_offsets"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCMorphBundleData::SetOffsets(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "CMorphBundleData", "m_offsets", false, value);
}

std::vector<float32> GCMorphBundleData::GetRanges() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "CMorphBundleData", "m_ranges"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCMorphBundleData::SetRanges(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "CMorphBundleData", "m_ranges", false, value);
}

std::string GCMorphBundleData::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMorphBundleData::IsValid() {
    return (m_ptr != nullptr);
}

GCNmBoneMask::GCNmBoneMask(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmBoneMask::GCNmBoneMask(void *ptr) {
    m_ptr = ptr;
}

GCNmBoneMask GCNmBoneMask::GetWeightInfo() const {
    return GetSchemaValue<GCNmBoneMask>(m_ptr, "CNmBoneMask", "m_weightInfo");
}

void GCNmBoneMask::SetWeightInfo(GCNmBoneMask value) {
    SetSchemaValue(m_ptr, "CNmBoneMask", "m_weightInfo", false, value);
}

std::vector<float32> GCNmBoneMask::GetWeights() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "CNmBoneMask", "m_weights"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCNmBoneMask::SetWeights(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "CNmBoneMask", "m_weights", false, value);
}

std::string GCNmBoneMask::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmBoneMask::IsValid() {
    return (m_ptr != nullptr);
}

GCAudioEmphasisSample::GCAudioEmphasisSample(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAudioEmphasisSample::GCAudioEmphasisSample(void *ptr) {
    m_ptr = ptr;
}

float GCAudioEmphasisSample::GetTime() const {
    return GetSchemaValue<float>(m_ptr, "CAudioEmphasisSample", "m_flTime");
}

void GCAudioEmphasisSample::SetTime(float value) {
    SetSchemaValue(m_ptr, "CAudioEmphasisSample", "m_flTime", false, value);
}

float GCAudioEmphasisSample::GetValue() const {
    return GetSchemaValue<float>(m_ptr, "CAudioEmphasisSample", "m_flValue");
}

void GCAudioEmphasisSample::SetValue(float value) {
    SetSchemaValue(m_ptr, "CAudioEmphasisSample", "m_flValue", false, value);
}

std::string GCAudioEmphasisSample::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAudioEmphasisSample::IsValid() {
    return (m_ptr != nullptr);
}

GCNmFrameSnapEvent::GCNmFrameSnapEvent(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmFrameSnapEvent::GCNmFrameSnapEvent(void *ptr) {
    m_ptr = ptr;
}

NmFrameSnapEventMode_t GCNmFrameSnapEvent::GetFrameSnapMode() const {
    return GetSchemaValue<NmFrameSnapEventMode_t>(m_ptr, "CNmFrameSnapEvent", "m_frameSnapMode");
}

void GCNmFrameSnapEvent::SetFrameSnapMode(NmFrameSnapEventMode_t value) {
    SetSchemaValue(m_ptr, "CNmFrameSnapEvent", "m_frameSnapMode", false, value);
}

std::string GCNmFrameSnapEvent::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmFrameSnapEvent::IsValid() {
    return (m_ptr != nullptr);
}

GCJumpHelperUpdateNode::GCJumpHelperUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCJumpHelperUpdateNode::GCJumpHelperUpdateNode(void *ptr) {
    m_ptr = ptr;
}

GCAnimParamHandle GCJumpHelperUpdateNode::GetTargetParam() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CJumpHelperUpdateNode", "m_hTargetParam");
}

void GCJumpHelperUpdateNode::SetTargetParam(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CJumpHelperUpdateNode", "m_hTargetParam", false, value);
}

Vector GCJumpHelperUpdateNode::GetOriginalJumpMovement() const {
    return GetSchemaValue<Vector>(m_ptr, "CJumpHelperUpdateNode", "m_flOriginalJumpMovement");
}

void GCJumpHelperUpdateNode::SetOriginalJumpMovement(Vector value) {
    SetSchemaValue(m_ptr, "CJumpHelperUpdateNode", "m_flOriginalJumpMovement", false, value);
}

float GCJumpHelperUpdateNode::GetOriginalJumpDuration() const {
    return GetSchemaValue<float>(m_ptr, "CJumpHelperUpdateNode", "m_flOriginalJumpDuration");
}

void GCJumpHelperUpdateNode::SetOriginalJumpDuration(float value) {
    SetSchemaValue(m_ptr, "CJumpHelperUpdateNode", "m_flOriginalJumpDuration", false, value);
}

float GCJumpHelperUpdateNode::GetJumpStartCycle() const {
    return GetSchemaValue<float>(m_ptr, "CJumpHelperUpdateNode", "m_flJumpStartCycle");
}

void GCJumpHelperUpdateNode::SetJumpStartCycle(float value) {
    SetSchemaValue(m_ptr, "CJumpHelperUpdateNode", "m_flJumpStartCycle", false, value);
}

float GCJumpHelperUpdateNode::GetJumpEndCycle() const {
    return GetSchemaValue<float>(m_ptr, "CJumpHelperUpdateNode", "m_flJumpEndCycle");
}

void GCJumpHelperUpdateNode::SetJumpEndCycle(float value) {
    SetSchemaValue(m_ptr, "CJumpHelperUpdateNode", "m_flJumpEndCycle", false, value);
}

JumpCorrectionMethod GCJumpHelperUpdateNode::GetCorrectionMethod() const {
    return GetSchemaValue<JumpCorrectionMethod>(m_ptr, "CJumpHelperUpdateNode", "m_eCorrectionMethod");
}

void GCJumpHelperUpdateNode::SetCorrectionMethod(JumpCorrectionMethod value) {
    SetSchemaValue(m_ptr, "CJumpHelperUpdateNode", "m_eCorrectionMethod", false, value);
}

std::vector<bool> GCJumpHelperUpdateNode::GetTranslationAxis() const {
    bool* outValue = GetSchemaValue<bool*>(m_ptr, "CJumpHelperUpdateNode", "m_bTranslationAxis"); std::vector<bool> ret; for(int i = 0; i < 3; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCJumpHelperUpdateNode::SetTranslationAxis(std::vector<bool> value) {
    bool* outValue = GetSchemaValue<bool*>(m_ptr, "CJumpHelperUpdateNode", "m_bTranslationAxis"); for(int i = 0; i < 3; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CJumpHelperUpdateNode", "m_bTranslationAxis", false, outValue);
}

bool GCJumpHelperUpdateNode::GetScaleSpeed() const {
    return GetSchemaValue<bool>(m_ptr, "CJumpHelperUpdateNode", "m_bScaleSpeed");
}

void GCJumpHelperUpdateNode::SetScaleSpeed(bool value) {
    SetSchemaValue(m_ptr, "CJumpHelperUpdateNode", "m_bScaleSpeed", false, value);
}

std::string GCJumpHelperUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCJumpHelperUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GSolveIKChainPoseOpFixedSettings_t::GSolveIKChainPoseOpFixedSettings_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GSolveIKChainPoseOpFixedSettings_t::GSolveIKChainPoseOpFixedSettings_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<GChainToSolveData_t> GSolveIKChainPoseOpFixedSettings_t::GetChainsToSolveData() const {
    CUtlVector<GChainToSolveData_t>* vec = GetSchemaValue<CUtlVector<GChainToSolveData_t>*>(m_ptr, "SolveIKChainPoseOpFixedSettings_t", "m_ChainsToSolveData"); std::vector<GChainToSolveData_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GSolveIKChainPoseOpFixedSettings_t::SetChainsToSolveData(std::vector<GChainToSolveData_t> value) {
    SetSchemaValueCUtlVector<GChainToSolveData_t>(m_ptr, "SolveIKChainPoseOpFixedSettings_t", "m_ChainsToSolveData", true, value);
}

bool GSolveIKChainPoseOpFixedSettings_t::GetMatchTargetOrientation() const {
    return GetSchemaValue<bool>(m_ptr, "SolveIKChainPoseOpFixedSettings_t", "m_bMatchTargetOrientation");
}

void GSolveIKChainPoseOpFixedSettings_t::SetMatchTargetOrientation(bool value) {
    SetSchemaValue(m_ptr, "SolveIKChainPoseOpFixedSettings_t", "m_bMatchTargetOrientation", true, value);
}

std::string GSolveIKChainPoseOpFixedSettings_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GSolveIKChainPoseOpFixedSettings_t::IsValid() {
    return (m_ptr != nullptr);
}

GCMaterialAttributeAnimTag::GCMaterialAttributeAnimTag(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMaterialAttributeAnimTag::GCMaterialAttributeAnimTag(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCMaterialAttributeAnimTag::GetAttributeName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CMaterialAttributeAnimTag", "m_AttributeName");
}

void GCMaterialAttributeAnimTag::SetAttributeName(CUtlString value) {
    SetSchemaValue(m_ptr, "CMaterialAttributeAnimTag", "m_AttributeName", false, value);
}

MatterialAttributeTagType_t GCMaterialAttributeAnimTag::GetAttributeType() const {
    return GetSchemaValue<MatterialAttributeTagType_t>(m_ptr, "CMaterialAttributeAnimTag", "m_AttributeType");
}

void GCMaterialAttributeAnimTag::SetAttributeType(MatterialAttributeTagType_t value) {
    SetSchemaValue(m_ptr, "CMaterialAttributeAnimTag", "m_AttributeType", false, value);
}

float GCMaterialAttributeAnimTag::GetValue() const {
    return GetSchemaValue<float>(m_ptr, "CMaterialAttributeAnimTag", "m_flValue");
}

void GCMaterialAttributeAnimTag::SetValue(float value) {
    SetSchemaValue(m_ptr, "CMaterialAttributeAnimTag", "m_flValue", false, value);
}

Color GCMaterialAttributeAnimTag::GetColor() const {
    return GetSchemaValue<Color>(m_ptr, "CMaterialAttributeAnimTag", "m_Color");
}

void GCMaterialAttributeAnimTag::SetColor(Color value) {
    SetSchemaValue(m_ptr, "CMaterialAttributeAnimTag", "m_Color", false, value);
}

std::string GCMaterialAttributeAnimTag::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMaterialAttributeAnimTag::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimComponentUpdater::GCAnimComponentUpdater(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimComponentUpdater::GCAnimComponentUpdater(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCAnimComponentUpdater::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CAnimComponentUpdater", "m_name");
}

void GCAnimComponentUpdater::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "CAnimComponentUpdater", "m_name", false, value);
}

GAnimComponentID GCAnimComponentUpdater::GetId() const {
    return GetSchemaValue<GAnimComponentID>(m_ptr, "CAnimComponentUpdater", "m_id");
}

void GCAnimComponentUpdater::SetId(GAnimComponentID value) {
    SetSchemaValue(m_ptr, "CAnimComponentUpdater", "m_id", false, value);
}

AnimNodeNetworkMode GCAnimComponentUpdater::GetNetworkMode() const {
    return GetSchemaValue<AnimNodeNetworkMode>(m_ptr, "CAnimComponentUpdater", "m_networkMode");
}

void GCAnimComponentUpdater::SetNetworkMode(AnimNodeNetworkMode value) {
    SetSchemaValue(m_ptr, "CAnimComponentUpdater", "m_networkMode", false, value);
}

bool GCAnimComponentUpdater::GetStartEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CAnimComponentUpdater", "m_bStartEnabled");
}

void GCAnimComponentUpdater::SetStartEnabled(bool value) {
    SetSchemaValue(m_ptr, "CAnimComponentUpdater", "m_bStartEnabled", false, value);
}

std::string GCAnimComponentUpdater::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimComponentUpdater::IsValid() {
    return (m_ptr != nullptr);
}

GCReplicationParameters::GCReplicationParameters(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCReplicationParameters::GCReplicationParameters(void *ptr) {
    m_ptr = ptr;
}

ParticleReplicationMode_t GCReplicationParameters::GetReplicationMode() const {
    return GetSchemaValue<ParticleReplicationMode_t>(m_ptr, "CReplicationParameters", "m_nReplicationMode");
}

void GCReplicationParameters::SetReplicationMode(ParticleReplicationMode_t value) {
    SetSchemaValue(m_ptr, "CReplicationParameters", "m_nReplicationMode", false, value);
}

bool GCReplicationParameters::GetScaleChildParticleRadii() const {
    return GetSchemaValue<bool>(m_ptr, "CReplicationParameters", "m_bScaleChildParticleRadii");
}

void GCReplicationParameters::SetScaleChildParticleRadii(bool value) {
    SetSchemaValue(m_ptr, "CReplicationParameters", "m_bScaleChildParticleRadii", false, value);
}

GCParticleCollectionFloatInput GCReplicationParameters::GetMinRandomRadiusScale() const {
    return GetSchemaValue<GCParticleCollectionFloatInput>(m_ptr, "CReplicationParameters", "m_flMinRandomRadiusScale");
}

void GCReplicationParameters::SetMinRandomRadiusScale(GCParticleCollectionFloatInput value) {
    SetSchemaValue(m_ptr, "CReplicationParameters", "m_flMinRandomRadiusScale", false, value);
}

GCParticleCollectionFloatInput GCReplicationParameters::GetMaxRandomRadiusScale() const {
    return GetSchemaValue<GCParticleCollectionFloatInput>(m_ptr, "CReplicationParameters", "m_flMaxRandomRadiusScale");
}

void GCReplicationParameters::SetMaxRandomRadiusScale(GCParticleCollectionFloatInput value) {
    SetSchemaValue(m_ptr, "CReplicationParameters", "m_flMaxRandomRadiusScale", false, value);
}

GCParticleCollectionFloatInput GCReplicationParameters::GetModellingScale() const {
    return GetSchemaValue<GCParticleCollectionFloatInput>(m_ptr, "CReplicationParameters", "m_flModellingScale");
}

void GCReplicationParameters::SetModellingScale(GCParticleCollectionFloatInput value) {
    SetSchemaValue(m_ptr, "CReplicationParameters", "m_flModellingScale", false, value);
}

std::string GCReplicationParameters::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCReplicationParameters::IsValid() {
    return (m_ptr != nullptr);
}

GVMixEnvelopeDesc_t::GVMixEnvelopeDesc_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVMixEnvelopeDesc_t::GVMixEnvelopeDesc_t(void *ptr) {
    m_ptr = ptr;
}

float GVMixEnvelopeDesc_t::GetAttackTimeMS() const {
    return GetSchemaValue<float>(m_ptr, "VMixEnvelopeDesc_t", "m_flAttackTimeMS");
}

void GVMixEnvelopeDesc_t::SetAttackTimeMS(float value) {
    SetSchemaValue(m_ptr, "VMixEnvelopeDesc_t", "m_flAttackTimeMS", true, value);
}

float GVMixEnvelopeDesc_t::GetHoldTimeMS() const {
    return GetSchemaValue<float>(m_ptr, "VMixEnvelopeDesc_t", "m_flHoldTimeMS");
}

void GVMixEnvelopeDesc_t::SetHoldTimeMS(float value) {
    SetSchemaValue(m_ptr, "VMixEnvelopeDesc_t", "m_flHoldTimeMS", true, value);
}

float GVMixEnvelopeDesc_t::GetReleaseTimeMS() const {
    return GetSchemaValue<float>(m_ptr, "VMixEnvelopeDesc_t", "m_flReleaseTimeMS");
}

void GVMixEnvelopeDesc_t::SetReleaseTimeMS(float value) {
    SetSchemaValue(m_ptr, "VMixEnvelopeDesc_t", "m_flReleaseTimeMS", true, value);
}

std::string GVMixEnvelopeDesc_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVMixEnvelopeDesc_t::IsValid() {
    return (m_ptr != nullptr);
}

GCNmValueNode::GCNmValueNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmValueNode::GCNmValueNode(void *ptr) {
    m_ptr = ptr;
}

std::string GCNmValueNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmValueNode::IsValid() {
    return (m_ptr != nullptr);
}

GCFollowPathUpdateNode::GCFollowPathUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFollowPathUpdateNode::GCFollowPathUpdateNode(void *ptr) {
    m_ptr = ptr;
}

float GCFollowPathUpdateNode::GetBlendOutTime() const {
    return GetSchemaValue<float>(m_ptr, "CFollowPathUpdateNode", "m_flBlendOutTime");
}

void GCFollowPathUpdateNode::SetBlendOutTime(float value) {
    SetSchemaValue(m_ptr, "CFollowPathUpdateNode", "m_flBlendOutTime", false, value);
}

bool GCFollowPathUpdateNode::GetBlockNonPathMovement() const {
    return GetSchemaValue<bool>(m_ptr, "CFollowPathUpdateNode", "m_bBlockNonPathMovement");
}

void GCFollowPathUpdateNode::SetBlockNonPathMovement(bool value) {
    SetSchemaValue(m_ptr, "CFollowPathUpdateNode", "m_bBlockNonPathMovement", false, value);
}

bool GCFollowPathUpdateNode::GetStopFeetAtGoal() const {
    return GetSchemaValue<bool>(m_ptr, "CFollowPathUpdateNode", "m_bStopFeetAtGoal");
}

void GCFollowPathUpdateNode::SetStopFeetAtGoal(bool value) {
    SetSchemaValue(m_ptr, "CFollowPathUpdateNode", "m_bStopFeetAtGoal", false, value);
}

bool GCFollowPathUpdateNode::GetScaleSpeed() const {
    return GetSchemaValue<bool>(m_ptr, "CFollowPathUpdateNode", "m_bScaleSpeed");
}

void GCFollowPathUpdateNode::SetScaleSpeed(bool value) {
    SetSchemaValue(m_ptr, "CFollowPathUpdateNode", "m_bScaleSpeed", false, value);
}

float GCFollowPathUpdateNode::GetScale() const {
    return GetSchemaValue<float>(m_ptr, "CFollowPathUpdateNode", "m_flScale");
}

void GCFollowPathUpdateNode::SetScale(float value) {
    SetSchemaValue(m_ptr, "CFollowPathUpdateNode", "m_flScale", false, value);
}

float GCFollowPathUpdateNode::GetMinAngle() const {
    return GetSchemaValue<float>(m_ptr, "CFollowPathUpdateNode", "m_flMinAngle");
}

void GCFollowPathUpdateNode::SetMinAngle(float value) {
    SetSchemaValue(m_ptr, "CFollowPathUpdateNode", "m_flMinAngle", false, value);
}

float GCFollowPathUpdateNode::GetMaxAngle() const {
    return GetSchemaValue<float>(m_ptr, "CFollowPathUpdateNode", "m_flMaxAngle");
}

void GCFollowPathUpdateNode::SetMaxAngle(float value) {
    SetSchemaValue(m_ptr, "CFollowPathUpdateNode", "m_flMaxAngle", false, value);
}

float GCFollowPathUpdateNode::GetSpeedScaleBlending() const {
    return GetSchemaValue<float>(m_ptr, "CFollowPathUpdateNode", "m_flSpeedScaleBlending");
}

void GCFollowPathUpdateNode::SetSpeedScaleBlending(float value) {
    SetSchemaValue(m_ptr, "CFollowPathUpdateNode", "m_flSpeedScaleBlending", false, value);
}

GCAnimInputDamping GCFollowPathUpdateNode::GetTurnDamping() const {
    return GetSchemaValue<GCAnimInputDamping>(m_ptr, "CFollowPathUpdateNode", "m_turnDamping");
}

void GCFollowPathUpdateNode::SetTurnDamping(GCAnimInputDamping value) {
    SetSchemaValue(m_ptr, "CFollowPathUpdateNode", "m_turnDamping", false, value);
}

AnimValueSource GCFollowPathUpdateNode::GetFacingTarget() const {
    return GetSchemaValue<AnimValueSource>(m_ptr, "CFollowPathUpdateNode", "m_facingTarget");
}

void GCFollowPathUpdateNode::SetFacingTarget(AnimValueSource value) {
    SetSchemaValue(m_ptr, "CFollowPathUpdateNode", "m_facingTarget", false, value);
}

GCAnimParamHandle GCFollowPathUpdateNode::GetParam() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CFollowPathUpdateNode", "m_hParam");
}

void GCFollowPathUpdateNode::SetParam(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CFollowPathUpdateNode", "m_hParam", false, value);
}

float GCFollowPathUpdateNode::GetTurnToFaceOffset() const {
    return GetSchemaValue<float>(m_ptr, "CFollowPathUpdateNode", "m_flTurnToFaceOffset");
}

void GCFollowPathUpdateNode::SetTurnToFaceOffset(float value) {
    SetSchemaValue(m_ptr, "CFollowPathUpdateNode", "m_flTurnToFaceOffset", false, value);
}

bool GCFollowPathUpdateNode::GetTurnToFace() const {
    return GetSchemaValue<bool>(m_ptr, "CFollowPathUpdateNode", "m_bTurnToFace");
}

void GCFollowPathUpdateNode::SetTurnToFace(bool value) {
    SetSchemaValue(m_ptr, "CFollowPathUpdateNode", "m_bTurnToFace", false, value);
}

std::string GCFollowPathUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFollowPathUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GEventClientPostSimulate_t::GEventClientPostSimulate_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEventClientPostSimulate_t::GEventClientPostSimulate_t(void *ptr) {
    m_ptr = ptr;
}

std::string GEventClientPostSimulate_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEventClientPostSimulate_t::IsValid() {
    return (m_ptr != nullptr);
}

GAABB_t::GAABB_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GAABB_t::GAABB_t(void *ptr) {
    m_ptr = ptr;
}

Vector GAABB_t::GetMinBounds() const {
    return GetSchemaValue<Vector>(m_ptr, "AABB_t", "m_vMinBounds");
}

void GAABB_t::SetMinBounds(Vector value) {
    SetSchemaValue(m_ptr, "AABB_t", "m_vMinBounds", true, value);
}

Vector GAABB_t::GetMaxBounds() const {
    return GetSchemaValue<Vector>(m_ptr, "AABB_t", "m_vMaxBounds");
}

void GAABB_t::SetMaxBounds(Vector value) {
    SetSchemaValue(m_ptr, "AABB_t", "m_vMaxBounds", true, value);
}

std::string GAABB_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GAABB_t::IsValid() {
    return (m_ptr != nullptr);
}

GFeNodeBase_t::GFeNodeBase_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeNodeBase_t::GFeNodeBase_t(void *ptr) {
    m_ptr = ptr;
}

uint16_t GFeNodeBase_t::GetNode() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeNodeBase_t", "nNode");
}

void GFeNodeBase_t::SetNode(uint16_t value) {
    SetSchemaValue(m_ptr, "FeNodeBase_t", "nNode", true, value);
}

std::vector<uint16_t> GFeNodeBase_t::GetDummy() const {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeNodeBase_t", "nDummy"); std::vector<uint16_t> ret; for(int i = 0; i < 3; i++) { ret.push_back(outValue[i]); } return ret;
}

void GFeNodeBase_t::SetDummy(std::vector<uint16_t> value) {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeNodeBase_t", "nDummy"); for(int i = 0; i < 3; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "FeNodeBase_t", "nDummy", true, outValue);
}

uint16_t GFeNodeBase_t::GetNodeX0() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeNodeBase_t", "nNodeX0");
}

void GFeNodeBase_t::SetNodeX0(uint16_t value) {
    SetSchemaValue(m_ptr, "FeNodeBase_t", "nNodeX0", true, value);
}

uint16_t GFeNodeBase_t::GetNodeX1() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeNodeBase_t", "nNodeX1");
}

void GFeNodeBase_t::SetNodeX1(uint16_t value) {
    SetSchemaValue(m_ptr, "FeNodeBase_t", "nNodeX1", true, value);
}

uint16_t GFeNodeBase_t::GetNodeY0() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeNodeBase_t", "nNodeY0");
}

void GFeNodeBase_t::SetNodeY0(uint16_t value) {
    SetSchemaValue(m_ptr, "FeNodeBase_t", "nNodeY0", true, value);
}

uint16_t GFeNodeBase_t::GetNodeY1() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeNodeBase_t", "nNodeY1");
}

void GFeNodeBase_t::SetNodeY1(uint16_t value) {
    SetSchemaValue(m_ptr, "FeNodeBase_t", "nNodeY1", true, value);
}

std::string GFeNodeBase_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeNodeBase_t::IsValid() {
    return (m_ptr != nullptr);
}

GModelBoneFlexDriverControl_t::GModelBoneFlexDriverControl_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GModelBoneFlexDriverControl_t::GModelBoneFlexDriverControl_t(void *ptr) {
    m_ptr = ptr;
}

ModelBoneFlexComponent_t GModelBoneFlexDriverControl_t::GetBoneComponent() const {
    return GetSchemaValue<ModelBoneFlexComponent_t>(m_ptr, "ModelBoneFlexDriverControl_t", "m_nBoneComponent");
}

void GModelBoneFlexDriverControl_t::SetBoneComponent(ModelBoneFlexComponent_t value) {
    SetSchemaValue(m_ptr, "ModelBoneFlexDriverControl_t", "m_nBoneComponent", true, value);
}

CUtlString GModelBoneFlexDriverControl_t::GetFlexController() const {
    return GetSchemaValue<CUtlString>(m_ptr, "ModelBoneFlexDriverControl_t", "m_flexController");
}

void GModelBoneFlexDriverControl_t::SetFlexController(CUtlString value) {
    SetSchemaValue(m_ptr, "ModelBoneFlexDriverControl_t", "m_flexController", true, value);
}

uint32_t GModelBoneFlexDriverControl_t::GetFlexControllerToken() const {
    return GetSchemaValue<uint32_t>(m_ptr, "ModelBoneFlexDriverControl_t", "m_flexControllerToken");
}

void GModelBoneFlexDriverControl_t::SetFlexControllerToken(uint32_t value) {
    SetSchemaValue(m_ptr, "ModelBoneFlexDriverControl_t", "m_flexControllerToken", true, value);
}

float GModelBoneFlexDriverControl_t::GetMin() const {
    return GetSchemaValue<float>(m_ptr, "ModelBoneFlexDriverControl_t", "m_flMin");
}

void GModelBoneFlexDriverControl_t::SetMin(float value) {
    SetSchemaValue(m_ptr, "ModelBoneFlexDriverControl_t", "m_flMin", true, value);
}

float GModelBoneFlexDriverControl_t::GetMax() const {
    return GetSchemaValue<float>(m_ptr, "ModelBoneFlexDriverControl_t", "m_flMax");
}

void GModelBoneFlexDriverControl_t::SetMax(float value) {
    SetSchemaValue(m_ptr, "ModelBoneFlexDriverControl_t", "m_flMax", true, value);
}

std::string GModelBoneFlexDriverControl_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GModelBoneFlexDriverControl_t::IsValid() {
    return (m_ptr != nullptr);
}

GPostProcessingVignetteParameters_t::GPostProcessingVignetteParameters_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GPostProcessingVignetteParameters_t::GPostProcessingVignetteParameters_t(void *ptr) {
    m_ptr = ptr;
}

float GPostProcessingVignetteParameters_t::GetVignetteStrength() const {
    return GetSchemaValue<float>(m_ptr, "PostProcessingVignetteParameters_t", "m_flVignetteStrength");
}

void GPostProcessingVignetteParameters_t::SetVignetteStrength(float value) {
    SetSchemaValue(m_ptr, "PostProcessingVignetteParameters_t", "m_flVignetteStrength", true, value);
}

Vector2D GPostProcessingVignetteParameters_t::GetCenter() const {
    return GetSchemaValue<Vector2D>(m_ptr, "PostProcessingVignetteParameters_t", "m_vCenter");
}

void GPostProcessingVignetteParameters_t::SetCenter(Vector2D value) {
    SetSchemaValue(m_ptr, "PostProcessingVignetteParameters_t", "m_vCenter", true, value);
}

float GPostProcessingVignetteParameters_t::GetRadius() const {
    return GetSchemaValue<float>(m_ptr, "PostProcessingVignetteParameters_t", "m_flRadius");
}

void GPostProcessingVignetteParameters_t::SetRadius(float value) {
    SetSchemaValue(m_ptr, "PostProcessingVignetteParameters_t", "m_flRadius", true, value);
}

float GPostProcessingVignetteParameters_t::GetRoundness() const {
    return GetSchemaValue<float>(m_ptr, "PostProcessingVignetteParameters_t", "m_flRoundness");
}

void GPostProcessingVignetteParameters_t::SetRoundness(float value) {
    SetSchemaValue(m_ptr, "PostProcessingVignetteParameters_t", "m_flRoundness", true, value);
}

float GPostProcessingVignetteParameters_t::GetFeather() const {
    return GetSchemaValue<float>(m_ptr, "PostProcessingVignetteParameters_t", "m_flFeather");
}

void GPostProcessingVignetteParameters_t::SetFeather(float value) {
    SetSchemaValue(m_ptr, "PostProcessingVignetteParameters_t", "m_flFeather", true, value);
}

Vector GPostProcessingVignetteParameters_t::GetColorTint() const {
    return GetSchemaValue<Vector>(m_ptr, "PostProcessingVignetteParameters_t", "m_vColorTint");
}

void GPostProcessingVignetteParameters_t::SetColorTint(Vector value) {
    SetSchemaValue(m_ptr, "PostProcessingVignetteParameters_t", "m_vColorTint", true, value);
}

std::string GPostProcessingVignetteParameters_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GPostProcessingVignetteParameters_t::IsValid() {
    return (m_ptr != nullptr);
}

GConstantInfo_t::GConstantInfo_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GConstantInfo_t::GConstantInfo_t(void *ptr) {
    m_ptr = ptr;
}

CUtlString GConstantInfo_t::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "ConstantInfo_t", "m_name");
}

void GConstantInfo_t::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "ConstantInfo_t", "m_name", true, value);
}

CUtlStringToken GConstantInfo_t::GetNameToken() const {
    return GetSchemaValue<CUtlStringToken>(m_ptr, "ConstantInfo_t", "m_nameToken");
}

void GConstantInfo_t::SetNameToken(CUtlStringToken value) {
    SetSchemaValue(m_ptr, "ConstantInfo_t", "m_nameToken", true, value);
}

float GConstantInfo_t::GetValue() const {
    return GetSchemaValue<float>(m_ptr, "ConstantInfo_t", "m_flValue");
}

void GConstantInfo_t::SetValue(float value) {
    SetSchemaValue(m_ptr, "ConstantInfo_t", "m_flValue", true, value);
}

std::string GConstantInfo_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GConstantInfo_t::IsValid() {
    return (m_ptr != nullptr);
}

GFuseVariableIndex_t::GFuseVariableIndex_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFuseVariableIndex_t::GFuseVariableIndex_t(void *ptr) {
    m_ptr = ptr;
}

uint16_t GFuseVariableIndex_t::GetValue() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FuseVariableIndex_t", "m_Value");
}

void GFuseVariableIndex_t::SetValue(uint16_t value) {
    SetSchemaValue(m_ptr, "FuseVariableIndex_t", "m_Value", true, value);
}

std::string GFuseVariableIndex_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFuseVariableIndex_t::IsValid() {
    return (m_ptr != nullptr);
}

GIParticleEffect::GIParticleEffect(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GIParticleEffect::GIParticleEffect(void *ptr) {
    m_ptr = ptr;
}

std::string GIParticleEffect::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GIParticleEffect::IsValid() {
    return (m_ptr != nullptr);
}

GCStopAtGoalUpdateNode::GCStopAtGoalUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCStopAtGoalUpdateNode::GCStopAtGoalUpdateNode(void *ptr) {
    m_ptr = ptr;
}

float GCStopAtGoalUpdateNode::GetOuterRadius() const {
    return GetSchemaValue<float>(m_ptr, "CStopAtGoalUpdateNode", "m_flOuterRadius");
}

void GCStopAtGoalUpdateNode::SetOuterRadius(float value) {
    SetSchemaValue(m_ptr, "CStopAtGoalUpdateNode", "m_flOuterRadius", false, value);
}

float GCStopAtGoalUpdateNode::GetInnerRadius() const {
    return GetSchemaValue<float>(m_ptr, "CStopAtGoalUpdateNode", "m_flInnerRadius");
}

void GCStopAtGoalUpdateNode::SetInnerRadius(float value) {
    SetSchemaValue(m_ptr, "CStopAtGoalUpdateNode", "m_flInnerRadius", false, value);
}

float GCStopAtGoalUpdateNode::GetMaxScale() const {
    return GetSchemaValue<float>(m_ptr, "CStopAtGoalUpdateNode", "m_flMaxScale");
}

void GCStopAtGoalUpdateNode::SetMaxScale(float value) {
    SetSchemaValue(m_ptr, "CStopAtGoalUpdateNode", "m_flMaxScale", false, value);
}

float GCStopAtGoalUpdateNode::GetMinScale() const {
    return GetSchemaValue<float>(m_ptr, "CStopAtGoalUpdateNode", "m_flMinScale");
}

void GCStopAtGoalUpdateNode::SetMinScale(float value) {
    SetSchemaValue(m_ptr, "CStopAtGoalUpdateNode", "m_flMinScale", false, value);
}

GCAnimInputDamping GCStopAtGoalUpdateNode::GetDamping() const {
    return GetSchemaValue<GCAnimInputDamping>(m_ptr, "CStopAtGoalUpdateNode", "m_damping");
}

void GCStopAtGoalUpdateNode::SetDamping(GCAnimInputDamping value) {
    SetSchemaValue(m_ptr, "CStopAtGoalUpdateNode", "m_damping", false, value);
}

std::string GCStopAtGoalUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCStopAtGoalUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GCSequenceGroupData::GCSequenceGroupData(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSequenceGroupData::GCSequenceGroupData(void *ptr) {
    m_ptr = ptr;
}

CBufferString GCSequenceGroupData::GetName() const {
    return GetSchemaValue<CBufferString>(m_ptr, "CSequenceGroupData", "m_sName");
}

void GCSequenceGroupData::SetName(CBufferString value) {
    SetSchemaValue(m_ptr, "CSequenceGroupData", "m_sName", false, value);
}

uint32_t GCSequenceGroupData::GetFlags() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CSequenceGroupData", "m_nFlags");
}

void GCSequenceGroupData::SetFlags(uint32_t value) {
    SetSchemaValue(m_ptr, "CSequenceGroupData", "m_nFlags", false, value);
}

std::vector<CBufferString> GCSequenceGroupData::GetLocalSequenceNameArray() const {
    CUtlVector<CBufferString>* vec = GetSchemaValue<CUtlVector<CBufferString>*>(m_ptr, "CSequenceGroupData", "m_localSequenceNameArray"); std::vector<CBufferString> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSequenceGroupData::SetLocalSequenceNameArray(std::vector<CBufferString> value) {
    SetSchemaValueCUtlVector<CBufferString>(m_ptr, "CSequenceGroupData", "m_localSequenceNameArray", false, value);
}

std::vector<GCSeqS1SeqDesc> GCSequenceGroupData::GetLocalS1SeqDescArray() const {
    CUtlVector<GCSeqS1SeqDesc>* vec = GetSchemaValue<CUtlVector<GCSeqS1SeqDesc>*>(m_ptr, "CSequenceGroupData", "m_localS1SeqDescArray"); std::vector<GCSeqS1SeqDesc> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSequenceGroupData::SetLocalS1SeqDescArray(std::vector<GCSeqS1SeqDesc> value) {
    SetSchemaValueCUtlVector<GCSeqS1SeqDesc>(m_ptr, "CSequenceGroupData", "m_localS1SeqDescArray", false, value);
}

std::vector<GCSeqS1SeqDesc> GCSequenceGroupData::GetLocalMultiSeqDescArray() const {
    CUtlVector<GCSeqS1SeqDesc>* vec = GetSchemaValue<CUtlVector<GCSeqS1SeqDesc>*>(m_ptr, "CSequenceGroupData", "m_localMultiSeqDescArray"); std::vector<GCSeqS1SeqDesc> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSequenceGroupData::SetLocalMultiSeqDescArray(std::vector<GCSeqS1SeqDesc> value) {
    SetSchemaValueCUtlVector<GCSeqS1SeqDesc>(m_ptr, "CSequenceGroupData", "m_localMultiSeqDescArray", false, value);
}

std::vector<GCSeqSynthAnimDesc> GCSequenceGroupData::GetLocalSynthAnimDescArray() const {
    CUtlVector<GCSeqSynthAnimDesc>* vec = GetSchemaValue<CUtlVector<GCSeqSynthAnimDesc>*>(m_ptr, "CSequenceGroupData", "m_localSynthAnimDescArray"); std::vector<GCSeqSynthAnimDesc> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSequenceGroupData::SetLocalSynthAnimDescArray(std::vector<GCSeqSynthAnimDesc> value) {
    SetSchemaValueCUtlVector<GCSeqSynthAnimDesc>(m_ptr, "CSequenceGroupData", "m_localSynthAnimDescArray", false, value);
}

std::vector<GCSeqCmdSeqDesc> GCSequenceGroupData::GetLocalCmdSeqDescArray() const {
    CUtlVector<GCSeqCmdSeqDesc>* vec = GetSchemaValue<CUtlVector<GCSeqCmdSeqDesc>*>(m_ptr, "CSequenceGroupData", "m_localCmdSeqDescArray"); std::vector<GCSeqCmdSeqDesc> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSequenceGroupData::SetLocalCmdSeqDescArray(std::vector<GCSeqCmdSeqDesc> value) {
    SetSchemaValueCUtlVector<GCSeqCmdSeqDesc>(m_ptr, "CSequenceGroupData", "m_localCmdSeqDescArray", false, value);
}

std::vector<GCSeqBoneMaskList> GCSequenceGroupData::GetLocalBoneMaskArray() const {
    CUtlVector<GCSeqBoneMaskList>* vec = GetSchemaValue<CUtlVector<GCSeqBoneMaskList>*>(m_ptr, "CSequenceGroupData", "m_localBoneMaskArray"); std::vector<GCSeqBoneMaskList> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSequenceGroupData::SetLocalBoneMaskArray(std::vector<GCSeqBoneMaskList> value) {
    SetSchemaValueCUtlVector<GCSeqBoneMaskList>(m_ptr, "CSequenceGroupData", "m_localBoneMaskArray", false, value);
}

std::vector<GCSeqScaleSet> GCSequenceGroupData::GetLocalScaleSetArray() const {
    CUtlVector<GCSeqScaleSet>* vec = GetSchemaValue<CUtlVector<GCSeqScaleSet>*>(m_ptr, "CSequenceGroupData", "m_localScaleSetArray"); std::vector<GCSeqScaleSet> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSequenceGroupData::SetLocalScaleSetArray(std::vector<GCSeqScaleSet> value) {
    SetSchemaValueCUtlVector<GCSeqScaleSet>(m_ptr, "CSequenceGroupData", "m_localScaleSetArray", false, value);
}

std::vector<CBufferString> GCSequenceGroupData::GetLocalBoneNameArray() const {
    CUtlVector<CBufferString>* vec = GetSchemaValue<CUtlVector<CBufferString>*>(m_ptr, "CSequenceGroupData", "m_localBoneNameArray"); std::vector<CBufferString> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSequenceGroupData::SetLocalBoneNameArray(std::vector<CBufferString> value) {
    SetSchemaValueCUtlVector<CBufferString>(m_ptr, "CSequenceGroupData", "m_localBoneNameArray", false, value);
}

CBufferString GCSequenceGroupData::GetLocalNodeName() const {
    return GetSchemaValue<CBufferString>(m_ptr, "CSequenceGroupData", "m_localNodeName");
}

void GCSequenceGroupData::SetLocalNodeName(CBufferString value) {
    SetSchemaValue(m_ptr, "CSequenceGroupData", "m_localNodeName", false, value);
}

std::vector<GCSeqPoseParamDesc> GCSequenceGroupData::GetLocalPoseParamArray() const {
    CUtlVector<GCSeqPoseParamDesc>* vec = GetSchemaValue<CUtlVector<GCSeqPoseParamDesc>*>(m_ptr, "CSequenceGroupData", "m_localPoseParamArray"); std::vector<GCSeqPoseParamDesc> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSequenceGroupData::SetLocalPoseParamArray(std::vector<GCSeqPoseParamDesc> value) {
    SetSchemaValueCUtlVector<GCSeqPoseParamDesc>(m_ptr, "CSequenceGroupData", "m_localPoseParamArray", false, value);
}

std::vector<GCSeqIKLock> GCSequenceGroupData::GetLocalIKAutoplayLockArray() const {
    CUtlVector<GCSeqIKLock>* vec = GetSchemaValue<CUtlVector<GCSeqIKLock>*>(m_ptr, "CSequenceGroupData", "m_localIKAutoplayLockArray"); std::vector<GCSeqIKLock> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSequenceGroupData::SetLocalIKAutoplayLockArray(std::vector<GCSeqIKLock> value) {
    SetSchemaValueCUtlVector<GCSeqIKLock>(m_ptr, "CSequenceGroupData", "m_localIKAutoplayLockArray", false, value);
}

std::string GCSequenceGroupData::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSequenceGroupData::IsValid() {
    return (m_ptr != nullptr);
}

GParticleNamedValueConfiguration_t::GParticleNamedValueConfiguration_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GParticleNamedValueConfiguration_t::GParticleNamedValueConfiguration_t(void *ptr) {
    m_ptr = ptr;
}

CUtlString GParticleNamedValueConfiguration_t::GetConfigName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "ParticleNamedValueConfiguration_t", "m_ConfigName");
}

void GParticleNamedValueConfiguration_t::SetConfigName(CUtlString value) {
    SetSchemaValue(m_ptr, "ParticleNamedValueConfiguration_t", "m_ConfigName", true, value);
}

ParticleAttachment_t GParticleNamedValueConfiguration_t::GetAttachType() const {
    return GetSchemaValue<ParticleAttachment_t>(m_ptr, "ParticleNamedValueConfiguration_t", "m_iAttachType");
}

void GParticleNamedValueConfiguration_t::SetAttachType(ParticleAttachment_t value) {
    SetSchemaValue(m_ptr, "ParticleNamedValueConfiguration_t", "m_iAttachType", true, value);
}

CUtlString GParticleNamedValueConfiguration_t::GetBoundEntityPath() const {
    return GetSchemaValue<CUtlString>(m_ptr, "ParticleNamedValueConfiguration_t", "m_BoundEntityPath");
}

void GParticleNamedValueConfiguration_t::SetBoundEntityPath(CUtlString value) {
    SetSchemaValue(m_ptr, "ParticleNamedValueConfiguration_t", "m_BoundEntityPath", true, value);
}

CUtlString GParticleNamedValueConfiguration_t::GetStrEntityScope() const {
    return GetSchemaValue<CUtlString>(m_ptr, "ParticleNamedValueConfiguration_t", "m_strEntityScope");
}

void GParticleNamedValueConfiguration_t::SetStrEntityScope(CUtlString value) {
    SetSchemaValue(m_ptr, "ParticleNamedValueConfiguration_t", "m_strEntityScope", true, value);
}

CUtlString GParticleNamedValueConfiguration_t::GetStrAttachmentName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "ParticleNamedValueConfiguration_t", "m_strAttachmentName");
}

void GParticleNamedValueConfiguration_t::SetStrAttachmentName(CUtlString value) {
    SetSchemaValue(m_ptr, "ParticleNamedValueConfiguration_t", "m_strAttachmentName", true, value);
}

std::string GParticleNamedValueConfiguration_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GParticleNamedValueConfiguration_t::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimSkeleton::GCAnimSkeleton(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimSkeleton::GCAnimSkeleton(void *ptr) {
    m_ptr = ptr;
}

std::vector<CUtlString> GCAnimSkeleton::GetBoneNames() const {
    CUtlVector<CUtlString>* vec = GetSchemaValue<CUtlVector<CUtlString>*>(m_ptr, "CAnimSkeleton", "m_boneNames"); std::vector<CUtlString> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimSkeleton::SetBoneNames(std::vector<CUtlString> value) {
    SetSchemaValueCUtlVector<CUtlString>(m_ptr, "CAnimSkeleton", "m_boneNames", false, value);
}

std::vector<int32> GCAnimSkeleton::GetParents() const {
    CUtlVector<int32>* vec = GetSchemaValue<CUtlVector<int32>*>(m_ptr, "CAnimSkeleton", "m_parents"); std::vector<int32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimSkeleton::SetParents(std::vector<int32> value) {
    SetSchemaValueCUtlVector<int32>(m_ptr, "CAnimSkeleton", "m_parents", false, value);
}

std::vector<GCAnimFoot> GCAnimSkeleton::GetFeet() const {
    CUtlVector<GCAnimFoot>* vec = GetSchemaValue<CUtlVector<GCAnimFoot>*>(m_ptr, "CAnimSkeleton", "m_feet"); std::vector<GCAnimFoot> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimSkeleton::SetFeet(std::vector<GCAnimFoot> value) {
    SetSchemaValueCUtlVector<GCAnimFoot>(m_ptr, "CAnimSkeleton", "m_feet", false, value);
}

std::vector<CUtlString> GCAnimSkeleton::GetMorphNames() const {
    CUtlVector<CUtlString>* vec = GetSchemaValue<CUtlVector<CUtlString>*>(m_ptr, "CAnimSkeleton", "m_morphNames"); std::vector<CUtlString> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimSkeleton::SetMorphNames(std::vector<CUtlString> value) {
    SetSchemaValueCUtlVector<CUtlString>(m_ptr, "CAnimSkeleton", "m_morphNames", false, value);
}

std::vector<int32> GCAnimSkeleton::GetLodBoneCounts() const {
    CUtlVector<int32>* vec = GetSchemaValue<CUtlVector<int32>*>(m_ptr, "CAnimSkeleton", "m_lodBoneCounts"); std::vector<int32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimSkeleton::SetLodBoneCounts(std::vector<int32> value) {
    SetSchemaValueCUtlVector<int32>(m_ptr, "CAnimSkeleton", "m_lodBoneCounts", false, value);
}

std::string GCAnimSkeleton::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimSkeleton::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimationGraphVisualizerPrimitiveBase::GCAnimationGraphVisualizerPrimitiveBase(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimationGraphVisualizerPrimitiveBase::GCAnimationGraphVisualizerPrimitiveBase(void *ptr) {
    m_ptr = ptr;
}

CAnimationGraphVisualizerPrimitiveType GCAnimationGraphVisualizerPrimitiveBase::GetType() const {
    return GetSchemaValue<CAnimationGraphVisualizerPrimitiveType>(m_ptr, "CAnimationGraphVisualizerPrimitiveBase", "m_Type");
}

void GCAnimationGraphVisualizerPrimitiveBase::SetType(CAnimationGraphVisualizerPrimitiveType value) {
    SetSchemaValue(m_ptr, "CAnimationGraphVisualizerPrimitiveBase", "m_Type", false, value);
}

std::vector<GAnimNodeID> GCAnimationGraphVisualizerPrimitiveBase::GetOwningAnimNodePaths() const {
    GAnimNodeID* outValue = GetSchemaValue<GAnimNodeID*>(m_ptr, "CAnimationGraphVisualizerPrimitiveBase", "m_OwningAnimNodePaths"); std::vector<GAnimNodeID> ret; for(int i = 0; i < 11; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCAnimationGraphVisualizerPrimitiveBase::SetOwningAnimNodePaths(std::vector<GAnimNodeID> value) {
    GAnimNodeID* outValue = GetSchemaValue<GAnimNodeID*>(m_ptr, "CAnimationGraphVisualizerPrimitiveBase", "m_OwningAnimNodePaths"); for(int i = 0; i < 11; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CAnimationGraphVisualizerPrimitiveBase", "m_OwningAnimNodePaths", false, outValue);
}

int32_t GCAnimationGraphVisualizerPrimitiveBase::GetOwningAnimNodePathCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimationGraphVisualizerPrimitiveBase", "m_nOwningAnimNodePathCount");
}

void GCAnimationGraphVisualizerPrimitiveBase::SetOwningAnimNodePathCount(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimationGraphVisualizerPrimitiveBase", "m_nOwningAnimNodePathCount", false, value);
}

std::string GCAnimationGraphVisualizerPrimitiveBase::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimationGraphVisualizerPrimitiveBase::IsValid() {
    return (m_ptr != nullptr);
}

GCBodyGroupAnimTag::GCBodyGroupAnimTag(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBodyGroupAnimTag::GCBodyGroupAnimTag(void *ptr) {
    m_ptr = ptr;
}

int32_t GCBodyGroupAnimTag::GetPriority() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBodyGroupAnimTag", "m_nPriority");
}

void GCBodyGroupAnimTag::SetPriority(int32_t value) {
    SetSchemaValue(m_ptr, "CBodyGroupAnimTag", "m_nPriority", false, value);
}

std::vector<GCBodyGroupSetting> GCBodyGroupAnimTag::GetBodyGroupSettings() const {
    CUtlVector<GCBodyGroupSetting>* vec = GetSchemaValue<CUtlVector<GCBodyGroupSetting>*>(m_ptr, "CBodyGroupAnimTag", "m_bodyGroupSettings"); std::vector<GCBodyGroupSetting> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCBodyGroupAnimTag::SetBodyGroupSettings(std::vector<GCBodyGroupSetting> value) {
    SetSchemaValueCUtlVector<GCBodyGroupSetting>(m_ptr, "CBodyGroupAnimTag", "m_bodyGroupSettings", false, value);
}

std::string GCBodyGroupAnimTag::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBodyGroupAnimTag::IsValid() {
    return (m_ptr != nullptr);
}

GFeAxialEdgeBend_t::GFeAxialEdgeBend_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeAxialEdgeBend_t::GFeAxialEdgeBend_t(void *ptr) {
    m_ptr = ptr;
}

float GFeAxialEdgeBend_t::GetTe() const {
    return GetSchemaValue<float>(m_ptr, "FeAxialEdgeBend_t", "te");
}

void GFeAxialEdgeBend_t::SetTe(float value) {
    SetSchemaValue(m_ptr, "FeAxialEdgeBend_t", "te", true, value);
}

float GFeAxialEdgeBend_t::GetTv() const {
    return GetSchemaValue<float>(m_ptr, "FeAxialEdgeBend_t", "tv");
}

void GFeAxialEdgeBend_t::SetTv(float value) {
    SetSchemaValue(m_ptr, "FeAxialEdgeBend_t", "tv", true, value);
}

float GFeAxialEdgeBend_t::GetDist() const {
    return GetSchemaValue<float>(m_ptr, "FeAxialEdgeBend_t", "flDist");
}

void GFeAxialEdgeBend_t::SetDist(float value) {
    SetSchemaValue(m_ptr, "FeAxialEdgeBend_t", "flDist", true, value);
}

std::vector<float> GFeAxialEdgeBend_t::GetWeight() const {
    float* outValue = GetSchemaValue<float*>(m_ptr, "FeAxialEdgeBend_t", "flWeight"); std::vector<float> ret; for(int i = 0; i < 4; i++) { ret.push_back(outValue[i]); } return ret;
}

void GFeAxialEdgeBend_t::SetWeight(std::vector<float> value) {
    float* outValue = GetSchemaValue<float*>(m_ptr, "FeAxialEdgeBend_t", "flWeight"); for(int i = 0; i < 4; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "FeAxialEdgeBend_t", "flWeight", true, outValue);
}

std::vector<uint16_t> GFeAxialEdgeBend_t::GetNode() const {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeAxialEdgeBend_t", "nNode"); std::vector<uint16_t> ret; for(int i = 0; i < 6; i++) { ret.push_back(outValue[i]); } return ret;
}

void GFeAxialEdgeBend_t::SetNode(std::vector<uint16_t> value) {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeAxialEdgeBend_t", "nNode"); for(int i = 0; i < 6; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "FeAxialEdgeBend_t", "nNode", true, outValue);
}

std::string GFeAxialEdgeBend_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeAxialEdgeBend_t::IsValid() {
    return (m_ptr != nullptr);
}

GParamSpanSample_t::GParamSpanSample_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GParamSpanSample_t::GParamSpanSample_t(void *ptr) {
    m_ptr = ptr;
}

float GParamSpanSample_t::GetCycle() const {
    return GetSchemaValue<float>(m_ptr, "ParamSpanSample_t", "m_flCycle");
}

void GParamSpanSample_t::SetCycle(float value) {
    SetSchemaValue(m_ptr, "ParamSpanSample_t", "m_flCycle", true, value);
}

std::string GParamSpanSample_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GParamSpanSample_t::IsValid() {
    return (m_ptr != nullptr);
}

GFunctionInfo_t::GFunctionInfo_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFunctionInfo_t::GFunctionInfo_t(void *ptr) {
    m_ptr = ptr;
}

CUtlString GFunctionInfo_t::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "FunctionInfo_t", "m_name");
}

void GFunctionInfo_t::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "FunctionInfo_t", "m_name", true, value);
}

CUtlStringToken GFunctionInfo_t::GetNameToken() const {
    return GetSchemaValue<CUtlStringToken>(m_ptr, "FunctionInfo_t", "m_nameToken");
}

void GFunctionInfo_t::SetNameToken(CUtlStringToken value) {
    SetSchemaValue(m_ptr, "FunctionInfo_t", "m_nameToken", true, value);
}

int32_t GFunctionInfo_t::GetParamCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "FunctionInfo_t", "m_nParamCount");
}

void GFunctionInfo_t::SetParamCount(int32_t value) {
    SetSchemaValue(m_ptr, "FunctionInfo_t", "m_nParamCount", true, value);
}

GFuseFunctionIndex_t GFunctionInfo_t::GetIndex() const {
    return GetSchemaValue<GFuseFunctionIndex_t>(m_ptr, "FunctionInfo_t", "m_nIndex");
}

void GFunctionInfo_t::SetIndex(GFuseFunctionIndex_t value) {
    SetSchemaValue(m_ptr, "FunctionInfo_t", "m_nIndex", true, value);
}

bool GFunctionInfo_t::GetIsPure() const {
    return GetSchemaValue<bool>(m_ptr, "FunctionInfo_t", "m_bIsPure");
}

void GFunctionInfo_t::SetIsPure(bool value) {
    SetSchemaValue(m_ptr, "FunctionInfo_t", "m_bIsPure", true, value);
}

std::string GFunctionInfo_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFunctionInfo_t::IsValid() {
    return (m_ptr != nullptr);
}

GFourQuaternions::GFourQuaternions(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFourQuaternions::GFourQuaternions(void *ptr) {
    m_ptr = ptr;
}

float GFourQuaternions::GetX() const {
    return GetSchemaValue<float>(m_ptr, "FourQuaternions", "x");
}

void GFourQuaternions::SetX(float value) {
    SetSchemaValue(m_ptr, "FourQuaternions", "x", false, value);
}

float GFourQuaternions::GetY() const {
    return GetSchemaValue<float>(m_ptr, "FourQuaternions", "y");
}

void GFourQuaternions::SetY(float value) {
    SetSchemaValue(m_ptr, "FourQuaternions", "y", false, value);
}

float GFourQuaternions::GetZ() const {
    return GetSchemaValue<float>(m_ptr, "FourQuaternions", "z");
}

void GFourQuaternions::SetZ(float value) {
    SetSchemaValue(m_ptr, "FourQuaternions", "z", false, value);
}

float GFourQuaternions::GetW() const {
    return GetSchemaValue<float>(m_ptr, "FourQuaternions", "w");
}

void GFourQuaternions::SetW(float value) {
    SetSchemaValue(m_ptr, "FourQuaternions", "w", false, value);
}

std::string GFourQuaternions::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFourQuaternions::IsValid() {
    return (m_ptr != nullptr);
}

GSkeletonAnimCapture_t__FrameStamp_t::GSkeletonAnimCapture_t__FrameStamp_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GSkeletonAnimCapture_t__FrameStamp_t::GSkeletonAnimCapture_t__FrameStamp_t(void *ptr) {
    m_ptr = ptr;
}

float GSkeletonAnimCapture_t__FrameStamp_t::GetTime() const {
    return GetSchemaValue<float>(m_ptr, "SkeletonAnimCapture_t__FrameStamp_t", "m_flTime");
}

void GSkeletonAnimCapture_t__FrameStamp_t::SetTime(float value) {
    SetSchemaValue(m_ptr, "SkeletonAnimCapture_t__FrameStamp_t", "m_flTime", true, value);
}

float GSkeletonAnimCapture_t__FrameStamp_t::GetEntitySimTime() const {
    return GetSchemaValue<float>(m_ptr, "SkeletonAnimCapture_t__FrameStamp_t", "m_flEntitySimTime");
}

void GSkeletonAnimCapture_t__FrameStamp_t::SetEntitySimTime(float value) {
    SetSchemaValue(m_ptr, "SkeletonAnimCapture_t__FrameStamp_t", "m_flEntitySimTime", true, value);
}

bool GSkeletonAnimCapture_t__FrameStamp_t::GetTeleportTick() const {
    return GetSchemaValue<bool>(m_ptr, "SkeletonAnimCapture_t__FrameStamp_t", "m_bTeleportTick");
}

void GSkeletonAnimCapture_t__FrameStamp_t::SetTeleportTick(bool value) {
    SetSchemaValue(m_ptr, "SkeletonAnimCapture_t__FrameStamp_t", "m_bTeleportTick", true, value);
}

bool GSkeletonAnimCapture_t__FrameStamp_t::GetPredicted() const {
    return GetSchemaValue<bool>(m_ptr, "SkeletonAnimCapture_t__FrameStamp_t", "m_bPredicted");
}

void GSkeletonAnimCapture_t__FrameStamp_t::SetPredicted(bool value) {
    SetSchemaValue(m_ptr, "SkeletonAnimCapture_t__FrameStamp_t", "m_bPredicted", true, value);
}

float GSkeletonAnimCapture_t__FrameStamp_t::GetCurTime() const {
    return GetSchemaValue<float>(m_ptr, "SkeletonAnimCapture_t__FrameStamp_t", "m_flCurTime");
}

void GSkeletonAnimCapture_t__FrameStamp_t::SetCurTime(float value) {
    SetSchemaValue(m_ptr, "SkeletonAnimCapture_t__FrameStamp_t", "m_flCurTime", true, value);
}

float GSkeletonAnimCapture_t__FrameStamp_t::GetRealTime() const {
    return GetSchemaValue<float>(m_ptr, "SkeletonAnimCapture_t__FrameStamp_t", "m_flRealTime");
}

void GSkeletonAnimCapture_t__FrameStamp_t::SetRealTime(float value) {
    SetSchemaValue(m_ptr, "SkeletonAnimCapture_t__FrameStamp_t", "m_flRealTime", true, value);
}

int32_t GSkeletonAnimCapture_t__FrameStamp_t::GetFrameCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "SkeletonAnimCapture_t__FrameStamp_t", "m_nFrameCount");
}

void GSkeletonAnimCapture_t__FrameStamp_t::SetFrameCount(int32_t value) {
    SetSchemaValue(m_ptr, "SkeletonAnimCapture_t__FrameStamp_t", "m_nFrameCount", true, value);
}

int32_t GSkeletonAnimCapture_t__FrameStamp_t::GetTickCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "SkeletonAnimCapture_t__FrameStamp_t", "m_nTickCount");
}

void GSkeletonAnimCapture_t__FrameStamp_t::SetTickCount(int32_t value) {
    SetSchemaValue(m_ptr, "SkeletonAnimCapture_t__FrameStamp_t", "m_nTickCount", true, value);
}

std::string GSkeletonAnimCapture_t__FrameStamp_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GSkeletonAnimCapture_t__FrameStamp_t::IsValid() {
    return (m_ptr != nullptr);
}

GCSeqAutoLayerFlag::GCSeqAutoLayerFlag(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSeqAutoLayerFlag::GCSeqAutoLayerFlag(void *ptr) {
    m_ptr = ptr;
}

bool GCSeqAutoLayerFlag::GetPost() const {
    return GetSchemaValue<bool>(m_ptr, "CSeqAutoLayerFlag", "m_bPost");
}

void GCSeqAutoLayerFlag::SetPost(bool value) {
    SetSchemaValue(m_ptr, "CSeqAutoLayerFlag", "m_bPost", false, value);
}

bool GCSeqAutoLayerFlag::GetSpline() const {
    return GetSchemaValue<bool>(m_ptr, "CSeqAutoLayerFlag", "m_bSpline");
}

void GCSeqAutoLayerFlag::SetSpline(bool value) {
    SetSchemaValue(m_ptr, "CSeqAutoLayerFlag", "m_bSpline", false, value);
}

bool GCSeqAutoLayerFlag::GetXFade() const {
    return GetSchemaValue<bool>(m_ptr, "CSeqAutoLayerFlag", "m_bXFade");
}

void GCSeqAutoLayerFlag::SetXFade(bool value) {
    SetSchemaValue(m_ptr, "CSeqAutoLayerFlag", "m_bXFade", false, value);
}

bool GCSeqAutoLayerFlag::GetNoBlend() const {
    return GetSchemaValue<bool>(m_ptr, "CSeqAutoLayerFlag", "m_bNoBlend");
}

void GCSeqAutoLayerFlag::SetNoBlend(bool value) {
    SetSchemaValue(m_ptr, "CSeqAutoLayerFlag", "m_bNoBlend", false, value);
}

bool GCSeqAutoLayerFlag::GetLocal() const {
    return GetSchemaValue<bool>(m_ptr, "CSeqAutoLayerFlag", "m_bLocal");
}

void GCSeqAutoLayerFlag::SetLocal(bool value) {
    SetSchemaValue(m_ptr, "CSeqAutoLayerFlag", "m_bLocal", false, value);
}

bool GCSeqAutoLayerFlag::GetPose() const {
    return GetSchemaValue<bool>(m_ptr, "CSeqAutoLayerFlag", "m_bPose");
}

void GCSeqAutoLayerFlag::SetPose(bool value) {
    SetSchemaValue(m_ptr, "CSeqAutoLayerFlag", "m_bPose", false, value);
}

bool GCSeqAutoLayerFlag::GetFetchFrame() const {
    return GetSchemaValue<bool>(m_ptr, "CSeqAutoLayerFlag", "m_bFetchFrame");
}

void GCSeqAutoLayerFlag::SetFetchFrame(bool value) {
    SetSchemaValue(m_ptr, "CSeqAutoLayerFlag", "m_bFetchFrame", false, value);
}

bool GCSeqAutoLayerFlag::GetSubtract() const {
    return GetSchemaValue<bool>(m_ptr, "CSeqAutoLayerFlag", "m_bSubtract");
}

void GCSeqAutoLayerFlag::SetSubtract(bool value) {
    SetSchemaValue(m_ptr, "CSeqAutoLayerFlag", "m_bSubtract", false, value);
}

std::string GCSeqAutoLayerFlag::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSeqAutoLayerFlag::IsValid() {
    return (m_ptr != nullptr);
}

GParamSpan_t::GParamSpan_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GParamSpan_t::GParamSpan_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<GParamSpanSample_t> GParamSpan_t::GetSamples() const {
    CUtlVector<GParamSpanSample_t>* vec = GetSchemaValue<CUtlVector<GParamSpanSample_t>*>(m_ptr, "ParamSpan_t", "m_samples"); std::vector<GParamSpanSample_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GParamSpan_t::SetSamples(std::vector<GParamSpanSample_t> value) {
    SetSchemaValueCUtlVector<GParamSpanSample_t>(m_ptr, "ParamSpan_t", "m_samples", true, value);
}

GCAnimParamHandle GParamSpan_t::GetParam() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "ParamSpan_t", "m_hParam");
}

void GParamSpan_t::SetParam(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "ParamSpan_t", "m_hParam", true, value);
}

AnimParamType_t GParamSpan_t::GetParamType() const {
    return GetSchemaValue<AnimParamType_t>(m_ptr, "ParamSpan_t", "m_eParamType");
}

void GParamSpan_t::SetParamType(AnimParamType_t value) {
    SetSchemaValue(m_ptr, "ParamSpan_t", "m_eParamType", true, value);
}

float GParamSpan_t::GetStartCycle() const {
    return GetSchemaValue<float>(m_ptr, "ParamSpan_t", "m_flStartCycle");
}

void GParamSpan_t::SetStartCycle(float value) {
    SetSchemaValue(m_ptr, "ParamSpan_t", "m_flStartCycle", true, value);
}

float GParamSpan_t::GetEndCycle() const {
    return GetSchemaValue<float>(m_ptr, "ParamSpan_t", "m_flEndCycle");
}

void GParamSpan_t::SetEndCycle(float value) {
    SetSchemaValue(m_ptr, "ParamSpan_t", "m_flEndCycle", true, value);
}

std::string GParamSpan_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GParamSpan_t::IsValid() {
    return (m_ptr != nullptr);
}

GCNmBoolValueNode::GCNmBoolValueNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmBoolValueNode::GCNmBoolValueNode(void *ptr) {
    m_ptr = ptr;
}

std::string GCNmBoolValueNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmBoolValueNode::IsValid() {
    return (m_ptr != nullptr);
}

GRenderInputLayoutField_t::GRenderInputLayoutField_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GRenderInputLayoutField_t::GRenderInputLayoutField_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<uint8_t> GRenderInputLayoutField_t::GetSemanticName() const {
    uint8_t* outValue = GetSchemaValue<uint8_t*>(m_ptr, "RenderInputLayoutField_t", "m_pSemanticName"); std::vector<uint8_t> ret; for(int i = 0; i < 32; i++) { ret.push_back(outValue[i]); } return ret;
}

void GRenderInputLayoutField_t::SetSemanticName(std::vector<uint8_t> value) {
    uint8_t* outValue = GetSchemaValue<uint8_t*>(m_ptr, "RenderInputLayoutField_t", "m_pSemanticName"); for(int i = 0; i < 32; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "RenderInputLayoutField_t", "m_pSemanticName", true, outValue);
}

int32_t GRenderInputLayoutField_t::GetSemanticIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "RenderInputLayoutField_t", "m_nSemanticIndex");
}

void GRenderInputLayoutField_t::SetSemanticIndex(int32_t value) {
    SetSchemaValue(m_ptr, "RenderInputLayoutField_t", "m_nSemanticIndex", true, value);
}

uint32_t GRenderInputLayoutField_t::GetFormat() const {
    return GetSchemaValue<uint32_t>(m_ptr, "RenderInputLayoutField_t", "m_Format");
}

void GRenderInputLayoutField_t::SetFormat(uint32_t value) {
    SetSchemaValue(m_ptr, "RenderInputLayoutField_t", "m_Format", true, value);
}

int32_t GRenderInputLayoutField_t::GetOffset() const {
    return GetSchemaValue<int32_t>(m_ptr, "RenderInputLayoutField_t", "m_nOffset");
}

void GRenderInputLayoutField_t::SetOffset(int32_t value) {
    SetSchemaValue(m_ptr, "RenderInputLayoutField_t", "m_nOffset", true, value);
}

int32_t GRenderInputLayoutField_t::GetSlot() const {
    return GetSchemaValue<int32_t>(m_ptr, "RenderInputLayoutField_t", "m_nSlot");
}

void GRenderInputLayoutField_t::SetSlot(int32_t value) {
    SetSchemaValue(m_ptr, "RenderInputLayoutField_t", "m_nSlot", true, value);
}

RenderSlotType_t GRenderInputLayoutField_t::GetSlotType() const {
    return GetSchemaValue<RenderSlotType_t>(m_ptr, "RenderInputLayoutField_t", "m_nSlotType");
}

void GRenderInputLayoutField_t::SetSlotType(RenderSlotType_t value) {
    SetSchemaValue(m_ptr, "RenderInputLayoutField_t", "m_nSlotType", true, value);
}

int32_t GRenderInputLayoutField_t::GetInstanceStepRate() const {
    return GetSchemaValue<int32_t>(m_ptr, "RenderInputLayoutField_t", "m_nInstanceStepRate");
}

void GRenderInputLayoutField_t::SetInstanceStepRate(int32_t value) {
    SetSchemaValue(m_ptr, "RenderInputLayoutField_t", "m_nInstanceStepRate", true, value);
}

std::string GRenderInputLayoutField_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GRenderInputLayoutField_t::IsValid() {
    return (m_ptr != nullptr);
}

GCCPPScriptComponentUpdater::GCCPPScriptComponentUpdater(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCPPScriptComponentUpdater::GCCPPScriptComponentUpdater(void *ptr) {
    m_ptr = ptr;
}

std::string GCCPPScriptComponentUpdater::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCPPScriptComponentUpdater::IsValid() {
    return (m_ptr != nullptr);
}

GCDampedValueComponentUpdater::GCDampedValueComponentUpdater(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCDampedValueComponentUpdater::GCDampedValueComponentUpdater(void *ptr) {
    m_ptr = ptr;
}

std::vector<GCDampedValueUpdateItem> GCDampedValueComponentUpdater::GetItems() const {
    CUtlVector<GCDampedValueUpdateItem>* vec = GetSchemaValue<CUtlVector<GCDampedValueUpdateItem>*>(m_ptr, "CDampedValueComponentUpdater", "m_items"); std::vector<GCDampedValueUpdateItem> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCDampedValueComponentUpdater::SetItems(std::vector<GCDampedValueUpdateItem> value) {
    SetSchemaValueCUtlVector<GCDampedValueUpdateItem>(m_ptr, "CDampedValueComponentUpdater", "m_items", false, value);
}

std::string GCDampedValueComponentUpdater::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCDampedValueComponentUpdater::IsValid() {
    return (m_ptr != nullptr);
}

GCSeqPoseSetting::GCSeqPoseSetting(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSeqPoseSetting::GCSeqPoseSetting(void *ptr) {
    m_ptr = ptr;
}

CBufferString GCSeqPoseSetting::GetPoseParameter() const {
    return GetSchemaValue<CBufferString>(m_ptr, "CSeqPoseSetting", "m_sPoseParameter");
}

void GCSeqPoseSetting::SetPoseParameter(CBufferString value) {
    SetSchemaValue(m_ptr, "CSeqPoseSetting", "m_sPoseParameter", false, value);
}

CBufferString GCSeqPoseSetting::GetAttachment() const {
    return GetSchemaValue<CBufferString>(m_ptr, "CSeqPoseSetting", "m_sAttachment");
}

void GCSeqPoseSetting::SetAttachment(CBufferString value) {
    SetSchemaValue(m_ptr, "CSeqPoseSetting", "m_sAttachment", false, value);
}

CBufferString GCSeqPoseSetting::GetReferenceSequence() const {
    return GetSchemaValue<CBufferString>(m_ptr, "CSeqPoseSetting", "m_sReferenceSequence");
}

void GCSeqPoseSetting::SetReferenceSequence(CBufferString value) {
    SetSchemaValue(m_ptr, "CSeqPoseSetting", "m_sReferenceSequence", false, value);
}

float GCSeqPoseSetting::GetValue() const {
    return GetSchemaValue<float>(m_ptr, "CSeqPoseSetting", "m_flValue");
}

void GCSeqPoseSetting::SetValue(float value) {
    SetSchemaValue(m_ptr, "CSeqPoseSetting", "m_flValue", false, value);
}

bool GCSeqPoseSetting::GetX() const {
    return GetSchemaValue<bool>(m_ptr, "CSeqPoseSetting", "m_bX");
}

void GCSeqPoseSetting::SetX(bool value) {
    SetSchemaValue(m_ptr, "CSeqPoseSetting", "m_bX", false, value);
}

bool GCSeqPoseSetting::GetY() const {
    return GetSchemaValue<bool>(m_ptr, "CSeqPoseSetting", "m_bY");
}

void GCSeqPoseSetting::SetY(bool value) {
    SetSchemaValue(m_ptr, "CSeqPoseSetting", "m_bY", false, value);
}

bool GCSeqPoseSetting::GetZ() const {
    return GetSchemaValue<bool>(m_ptr, "CSeqPoseSetting", "m_bZ");
}

void GCSeqPoseSetting::SetZ(bool value) {
    SetSchemaValue(m_ptr, "CSeqPoseSetting", "m_bZ", false, value);
}

int32_t GCSeqPoseSetting::GetType() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSeqPoseSetting", "m_eType");
}

void GCSeqPoseSetting::SetType(int32_t value) {
    SetSchemaValue(m_ptr, "CSeqPoseSetting", "m_eType", false, value);
}

std::string GCSeqPoseSetting::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSeqPoseSetting::IsValid() {
    return (m_ptr != nullptr);
}

GRenderHairStrandInfo_t::GRenderHairStrandInfo_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GRenderHairStrandInfo_t::GRenderHairStrandInfo_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<uint32_t> GRenderHairStrandInfo_t::GetGuideHairIndices_nSurfaceTriIndex() const {
    uint32_t* outValue = GetSchemaValue<uint32_t*>(m_ptr, "RenderHairStrandInfo_t", "m_nGuideHairIndices_nSurfaceTriIndex"); std::vector<uint32_t> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}

void GRenderHairStrandInfo_t::SetGuideHairIndices_nSurfaceTriIndex(std::vector<uint32_t> value) {
    uint32_t* outValue = GetSchemaValue<uint32_t*>(m_ptr, "RenderHairStrandInfo_t", "m_nGuideHairIndices_nSurfaceTriIndex"); for(int i = 0; i < 2; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "RenderHairStrandInfo_t", "m_nGuideHairIndices_nSurfaceTriIndex", true, outValue);
}

std::vector<uint16_t> GRenderHairStrandInfo_t::GetGuideBary_vBaseBary() const {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "RenderHairStrandInfo_t", "m_vGuideBary_vBaseBary"); std::vector<uint16_t> ret; for(int i = 0; i < 4; i++) { ret.push_back(outValue[i]); } return ret;
}

void GRenderHairStrandInfo_t::SetGuideBary_vBaseBary(std::vector<uint16_t> value) {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "RenderHairStrandInfo_t", "m_vGuideBary_vBaseBary"); for(int i = 0; i < 4; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "RenderHairStrandInfo_t", "m_vGuideBary_vBaseBary", true, outValue);
}

std::vector<uint16_t> GRenderHairStrandInfo_t::GetRootOffset_flLengthScale() const {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "RenderHairStrandInfo_t", "m_vRootOffset_flLengthScale"); std::vector<uint16_t> ret; for(int i = 0; i < 4; i++) { ret.push_back(outValue[i]); } return ret;
}

void GRenderHairStrandInfo_t::SetRootOffset_flLengthScale(std::vector<uint16_t> value) {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "RenderHairStrandInfo_t", "m_vRootOffset_flLengthScale"); for(int i = 0; i < 4; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "RenderHairStrandInfo_t", "m_vRootOffset_flLengthScale", true, outValue);
}

std::vector<uint16_t> GRenderHairStrandInfo_t::GetPackedBaseUv() const {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "RenderHairStrandInfo_t", "m_nPackedBaseUv"); std::vector<uint16_t> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}

void GRenderHairStrandInfo_t::SetPackedBaseUv(std::vector<uint16_t> value) {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "RenderHairStrandInfo_t", "m_nPackedBaseUv"); for(int i = 0; i < 2; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "RenderHairStrandInfo_t", "m_nPackedBaseUv", true, outValue);
}

uint32_t GRenderHairStrandInfo_t::GetPackedSurfaceNormalOs() const {
    return GetSchemaValue<uint32_t>(m_ptr, "RenderHairStrandInfo_t", "m_nPackedSurfaceNormalOs");
}

void GRenderHairStrandInfo_t::SetPackedSurfaceNormalOs(uint32_t value) {
    SetSchemaValue(m_ptr, "RenderHairStrandInfo_t", "m_nPackedSurfaceNormalOs", true, value);
}

uint32_t GRenderHairStrandInfo_t::GetPackedSurfaceTangentOs() const {
    return GetSchemaValue<uint32_t>(m_ptr, "RenderHairStrandInfo_t", "m_nPackedSurfaceTangentOs");
}

void GRenderHairStrandInfo_t::SetPackedSurfaceTangentOs(uint32_t value) {
    SetSchemaValue(m_ptr, "RenderHairStrandInfo_t", "m_nPackedSurfaceTangentOs", true, value);
}

std::string GRenderHairStrandInfo_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GRenderHairStrandInfo_t::IsValid() {
    return (m_ptr != nullptr);
}

GCExampleSchemaVData_Monomorphic::GCExampleSchemaVData_Monomorphic(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCExampleSchemaVData_Monomorphic::GCExampleSchemaVData_Monomorphic(void *ptr) {
    m_ptr = ptr;
}

int32_t GCExampleSchemaVData_Monomorphic::GetExample1() const {
    return GetSchemaValue<int32_t>(m_ptr, "CExampleSchemaVData_Monomorphic", "m_nExample1");
}

void GCExampleSchemaVData_Monomorphic::SetExample1(int32_t value) {
    SetSchemaValue(m_ptr, "CExampleSchemaVData_Monomorphic", "m_nExample1", false, value);
}

int32_t GCExampleSchemaVData_Monomorphic::GetExample2() const {
    return GetSchemaValue<int32_t>(m_ptr, "CExampleSchemaVData_Monomorphic", "m_nExample2");
}

void GCExampleSchemaVData_Monomorphic::SetExample2(int32_t value) {
    SetSchemaValue(m_ptr, "CExampleSchemaVData_Monomorphic", "m_nExample2", false, value);
}

std::string GCExampleSchemaVData_Monomorphic::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCExampleSchemaVData_Monomorphic::IsValid() {
    return (m_ptr != nullptr);
}

GCPlayerSprayDecalRenderHelper::GCPlayerSprayDecalRenderHelper(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPlayerSprayDecalRenderHelper::GCPlayerSprayDecalRenderHelper(void *ptr) {
    m_ptr = ptr;
}

std::string GCPlayerSprayDecalRenderHelper::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPlayerSprayDecalRenderHelper::IsValid() {
    return (m_ptr != nullptr);
}

GFeTaperedCapsuleRigid_t::GFeTaperedCapsuleRigid_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeTaperedCapsuleRigid_t::GFeTaperedCapsuleRigid_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<float> GFeTaperedCapsuleRigid_t::GetSphere() const {
    float* outValue = GetSchemaValue<float*>(m_ptr, "FeTaperedCapsuleRigid_t", "vSphere"); std::vector<float> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}

void GFeTaperedCapsuleRigid_t::SetSphere(std::vector<float> value) {
    float* outValue = GetSchemaValue<float*>(m_ptr, "FeTaperedCapsuleRigid_t", "vSphere"); for(int i = 0; i < 2; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "FeTaperedCapsuleRigid_t", "vSphere", true, outValue);
}

uint16_t GFeTaperedCapsuleRigid_t::GetNode() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeTaperedCapsuleRigid_t", "nNode");
}

void GFeTaperedCapsuleRigid_t::SetNode(uint16_t value) {
    SetSchemaValue(m_ptr, "FeTaperedCapsuleRigid_t", "nNode", true, value);
}

uint16_t GFeTaperedCapsuleRigid_t::GetCollisionMask() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeTaperedCapsuleRigid_t", "nCollisionMask");
}

void GFeTaperedCapsuleRigid_t::SetCollisionMask(uint16_t value) {
    SetSchemaValue(m_ptr, "FeTaperedCapsuleRigid_t", "nCollisionMask", true, value);
}

uint16_t GFeTaperedCapsuleRigid_t::GetVertexMapIndex() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeTaperedCapsuleRigid_t", "nVertexMapIndex");
}

void GFeTaperedCapsuleRigid_t::SetVertexMapIndex(uint16_t value) {
    SetSchemaValue(m_ptr, "FeTaperedCapsuleRigid_t", "nVertexMapIndex", true, value);
}

uint16_t GFeTaperedCapsuleRigid_t::GetFlags() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeTaperedCapsuleRigid_t", "nFlags");
}

void GFeTaperedCapsuleRigid_t::SetFlags(uint16_t value) {
    SetSchemaValue(m_ptr, "FeTaperedCapsuleRigid_t", "nFlags", true, value);
}

std::string GFeTaperedCapsuleRigid_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeTaperedCapsuleRigid_t::IsValid() {
    return (m_ptr != nullptr);
}

GCChoiceUpdateNode::GCChoiceUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCChoiceUpdateNode::GCChoiceUpdateNode(void *ptr) {
    m_ptr = ptr;
}

std::vector<GCAnimUpdateNodeRef> GCChoiceUpdateNode::GetChildren() const {
    CUtlVector<GCAnimUpdateNodeRef>* vec = GetSchemaValue<CUtlVector<GCAnimUpdateNodeRef>*>(m_ptr, "CChoiceUpdateNode", "m_children"); std::vector<GCAnimUpdateNodeRef> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCChoiceUpdateNode::SetChildren(std::vector<GCAnimUpdateNodeRef> value) {
    SetSchemaValueCUtlVector<GCAnimUpdateNodeRef>(m_ptr, "CChoiceUpdateNode", "m_children", false, value);
}

std::vector<float32> GCChoiceUpdateNode::GetWeights() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "CChoiceUpdateNode", "m_weights"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCChoiceUpdateNode::SetWeights(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "CChoiceUpdateNode", "m_weights", false, value);
}

std::vector<float32> GCChoiceUpdateNode::GetBlendTimes() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "CChoiceUpdateNode", "m_blendTimes"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCChoiceUpdateNode::SetBlendTimes(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "CChoiceUpdateNode", "m_blendTimes", false, value);
}

ChoiceMethod GCChoiceUpdateNode::GetChoiceMethod() const {
    return GetSchemaValue<ChoiceMethod>(m_ptr, "CChoiceUpdateNode", "m_choiceMethod");
}

void GCChoiceUpdateNode::SetChoiceMethod(ChoiceMethod value) {
    SetSchemaValue(m_ptr, "CChoiceUpdateNode", "m_choiceMethod", false, value);
}

ChoiceChangeMethod GCChoiceUpdateNode::GetChoiceChangeMethod() const {
    return GetSchemaValue<ChoiceChangeMethod>(m_ptr, "CChoiceUpdateNode", "m_choiceChangeMethod");
}

void GCChoiceUpdateNode::SetChoiceChangeMethod(ChoiceChangeMethod value) {
    SetSchemaValue(m_ptr, "CChoiceUpdateNode", "m_choiceChangeMethod", false, value);
}

ChoiceBlendMethod GCChoiceUpdateNode::GetBlendMethod() const {
    return GetSchemaValue<ChoiceBlendMethod>(m_ptr, "CChoiceUpdateNode", "m_blendMethod");
}

void GCChoiceUpdateNode::SetBlendMethod(ChoiceBlendMethod value) {
    SetSchemaValue(m_ptr, "CChoiceUpdateNode", "m_blendMethod", false, value);
}

float GCChoiceUpdateNode::GetBlendTime() const {
    return GetSchemaValue<float>(m_ptr, "CChoiceUpdateNode", "m_blendTime");
}

void GCChoiceUpdateNode::SetBlendTime(float value) {
    SetSchemaValue(m_ptr, "CChoiceUpdateNode", "m_blendTime", false, value);
}

bool GCChoiceUpdateNode::GetCrossFade() const {
    return GetSchemaValue<bool>(m_ptr, "CChoiceUpdateNode", "m_bCrossFade");
}

void GCChoiceUpdateNode::SetCrossFade(bool value) {
    SetSchemaValue(m_ptr, "CChoiceUpdateNode", "m_bCrossFade", false, value);
}

bool GCChoiceUpdateNode::GetResetChosen() const {
    return GetSchemaValue<bool>(m_ptr, "CChoiceUpdateNode", "m_bResetChosen");
}

void GCChoiceUpdateNode::SetResetChosen(bool value) {
    SetSchemaValue(m_ptr, "CChoiceUpdateNode", "m_bResetChosen", false, value);
}

bool GCChoiceUpdateNode::GetDontResetSameSelection() const {
    return GetSchemaValue<bool>(m_ptr, "CChoiceUpdateNode", "m_bDontResetSameSelection");
}

void GCChoiceUpdateNode::SetDontResetSameSelection(bool value) {
    SetSchemaValue(m_ptr, "CChoiceUpdateNode", "m_bDontResetSameSelection", false, value);
}

std::string GCChoiceUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCChoiceUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GIKSolverSettings_t::GIKSolverSettings_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GIKSolverSettings_t::GIKSolverSettings_t(void *ptr) {
    m_ptr = ptr;
}

IKSolverType GIKSolverSettings_t::GetSolverType() const {
    return GetSchemaValue<IKSolverType>(m_ptr, "IKSolverSettings_t", "m_SolverType");
}

void GIKSolverSettings_t::SetSolverType(IKSolverType value) {
    SetSchemaValue(m_ptr, "IKSolverSettings_t", "m_SolverType", true, value);
}

int32_t GIKSolverSettings_t::GetNumIterations() const {
    return GetSchemaValue<int32_t>(m_ptr, "IKSolverSettings_t", "m_nNumIterations");
}

void GIKSolverSettings_t::SetNumIterations(int32_t value) {
    SetSchemaValue(m_ptr, "IKSolverSettings_t", "m_nNumIterations", true, value);
}

std::string GIKSolverSettings_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GIKSolverSettings_t::IsValid() {
    return (m_ptr != nullptr);
}

GCNmLayerBlendNode::GCNmLayerBlendNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmLayerBlendNode::GCNmLayerBlendNode(void *ptr) {
    m_ptr = ptr;
}

int16_t GCNmLayerBlendNode::GetBaseNodeIdx() const {
    return GetSchemaValue<int16_t>(m_ptr, "CNmLayerBlendNode", "m_nBaseNodeIdx");
}

void GCNmLayerBlendNode::SetBaseNodeIdx(int16_t value) {
    SetSchemaValue(m_ptr, "CNmLayerBlendNode", "m_nBaseNodeIdx", false, value);
}

bool GCNmLayerBlendNode::GetOnlySampleBaseRootMotion() const {
    return GetSchemaValue<bool>(m_ptr, "CNmLayerBlendNode", "m_bOnlySampleBaseRootMotion");
}

void GCNmLayerBlendNode::SetOnlySampleBaseRootMotion(bool value) {
    SetSchemaValue(m_ptr, "CNmLayerBlendNode", "m_bOnlySampleBaseRootMotion", false, value);
}

std::string GCNmLayerBlendNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmLayerBlendNode::IsValid() {
    return (m_ptr != nullptr);
}

GCRandomNumberGeneratorParameters::GCRandomNumberGeneratorParameters(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCRandomNumberGeneratorParameters::GCRandomNumberGeneratorParameters(void *ptr) {
    m_ptr = ptr;
}

bool GCRandomNumberGeneratorParameters::GetDistributeEvenly() const {
    return GetSchemaValue<bool>(m_ptr, "CRandomNumberGeneratorParameters", "m_bDistributeEvenly");
}

void GCRandomNumberGeneratorParameters::SetDistributeEvenly(bool value) {
    SetSchemaValue(m_ptr, "CRandomNumberGeneratorParameters", "m_bDistributeEvenly", false, value);
}

int32_t GCRandomNumberGeneratorParameters::GetSeed() const {
    return GetSchemaValue<int32_t>(m_ptr, "CRandomNumberGeneratorParameters", "m_nSeed");
}

void GCRandomNumberGeneratorParameters::SetSeed(int32_t value) {
    SetSchemaValue(m_ptr, "CRandomNumberGeneratorParameters", "m_nSeed", false, value);
}

std::string GCRandomNumberGeneratorParameters::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCRandomNumberGeneratorParameters::IsValid() {
    return (m_ptr != nullptr);
}

GAnimationDecodeDebugDumpElement_t::GAnimationDecodeDebugDumpElement_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GAnimationDecodeDebugDumpElement_t::GAnimationDecodeDebugDumpElement_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GAnimationDecodeDebugDumpElement_t::GetEntityIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "AnimationDecodeDebugDumpElement_t", "m_nEntityIndex");
}

void GAnimationDecodeDebugDumpElement_t::SetEntityIndex(int32_t value) {
    SetSchemaValue(m_ptr, "AnimationDecodeDebugDumpElement_t", "m_nEntityIndex", true, value);
}

CUtlString GAnimationDecodeDebugDumpElement_t::GetModelName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "AnimationDecodeDebugDumpElement_t", "m_modelName");
}

void GAnimationDecodeDebugDumpElement_t::SetModelName(CUtlString value) {
    SetSchemaValue(m_ptr, "AnimationDecodeDebugDumpElement_t", "m_modelName", true, value);
}

std::vector<CUtlString> GAnimationDecodeDebugDumpElement_t::GetPoseParams() const {
    CUtlVector<CUtlString>* vec = GetSchemaValue<CUtlVector<CUtlString>*>(m_ptr, "AnimationDecodeDebugDumpElement_t", "m_poseParams"); std::vector<CUtlString> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GAnimationDecodeDebugDumpElement_t::SetPoseParams(std::vector<CUtlString> value) {
    SetSchemaValueCUtlVector<CUtlString>(m_ptr, "AnimationDecodeDebugDumpElement_t", "m_poseParams", true, value);
}

std::vector<CUtlString> GAnimationDecodeDebugDumpElement_t::GetDecodeOps() const {
    CUtlVector<CUtlString>* vec = GetSchemaValue<CUtlVector<CUtlString>*>(m_ptr, "AnimationDecodeDebugDumpElement_t", "m_decodeOps"); std::vector<CUtlString> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GAnimationDecodeDebugDumpElement_t::SetDecodeOps(std::vector<CUtlString> value) {
    SetSchemaValueCUtlVector<CUtlString>(m_ptr, "AnimationDecodeDebugDumpElement_t", "m_decodeOps", true, value);
}

std::vector<CUtlString> GAnimationDecodeDebugDumpElement_t::GetInternalOps() const {
    CUtlVector<CUtlString>* vec = GetSchemaValue<CUtlVector<CUtlString>*>(m_ptr, "AnimationDecodeDebugDumpElement_t", "m_internalOps"); std::vector<CUtlString> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GAnimationDecodeDebugDumpElement_t::SetInternalOps(std::vector<CUtlString> value) {
    SetSchemaValueCUtlVector<CUtlString>(m_ptr, "AnimationDecodeDebugDumpElement_t", "m_internalOps", true, value);
}

std::vector<CUtlString> GAnimationDecodeDebugDumpElement_t::GetDecodedAnims() const {
    CUtlVector<CUtlString>* vec = GetSchemaValue<CUtlVector<CUtlString>*>(m_ptr, "AnimationDecodeDebugDumpElement_t", "m_decodedAnims"); std::vector<CUtlString> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GAnimationDecodeDebugDumpElement_t::SetDecodedAnims(std::vector<CUtlString> value) {
    SetSchemaValueCUtlVector<CUtlString>(m_ptr, "AnimationDecodeDebugDumpElement_t", "m_decodedAnims", true, value);
}

std::string GAnimationDecodeDebugDumpElement_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GAnimationDecodeDebugDumpElement_t::IsValid() {
    return (m_ptr != nullptr);
}

GCNmFloatValueNode::GCNmFloatValueNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmFloatValueNode::GCNmFloatValueNode(void *ptr) {
    m_ptr = ptr;
}

std::string GCNmFloatValueNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmFloatValueNode::IsValid() {
    return (m_ptr != nullptr);
}

GCSSDSMsg_LayerBase::GCSSDSMsg_LayerBase(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSSDSMsg_LayerBase::GCSSDSMsg_LayerBase(void *ptr) {
    m_ptr = ptr;
}

GSceneViewId_t GCSSDSMsg_LayerBase::GetViewId() const {
    return GetSchemaValue<GSceneViewId_t>(m_ptr, "CSSDSMsg_LayerBase", "m_viewId");
}

void GCSSDSMsg_LayerBase::SetViewId(GSceneViewId_t value) {
    SetSchemaValue(m_ptr, "CSSDSMsg_LayerBase", "m_viewId", false, value);
}

CUtlString GCSSDSMsg_LayerBase::GetViewName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CSSDSMsg_LayerBase", "m_ViewName");
}

void GCSSDSMsg_LayerBase::SetViewName(CUtlString value) {
    SetSchemaValue(m_ptr, "CSSDSMsg_LayerBase", "m_ViewName", false, value);
}

int32_t GCSSDSMsg_LayerBase::GetLayerIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSSDSMsg_LayerBase", "m_nLayerIndex");
}

void GCSSDSMsg_LayerBase::SetLayerIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CSSDSMsg_LayerBase", "m_nLayerIndex", false, value);
}

uint64_t GCSSDSMsg_LayerBase::GetLayerId() const {
    return GetSchemaValue<uint64_t>(m_ptr, "CSSDSMsg_LayerBase", "m_nLayerId");
}

void GCSSDSMsg_LayerBase::SetLayerId(uint64_t value) {
    SetSchemaValue(m_ptr, "CSSDSMsg_LayerBase", "m_nLayerId", false, value);
}

CUtlString GCSSDSMsg_LayerBase::GetLayerName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CSSDSMsg_LayerBase", "m_LayerName");
}

void GCSSDSMsg_LayerBase::SetLayerName(CUtlString value) {
    SetSchemaValue(m_ptr, "CSSDSMsg_LayerBase", "m_LayerName", false, value);
}

CUtlString GCSSDSMsg_LayerBase::GetDisplayText() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CSSDSMsg_LayerBase", "m_displayText");
}

void GCSSDSMsg_LayerBase::SetDisplayText(CUtlString value) {
    SetSchemaValue(m_ptr, "CSSDSMsg_LayerBase", "m_displayText", false, value);
}

std::string GCSSDSMsg_LayerBase::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSSDSMsg_LayerBase::IsValid() {
    return (m_ptr != nullptr);
}

GCSosGroupActionSoundeventClusterSchema::GCSosGroupActionSoundeventClusterSchema(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSosGroupActionSoundeventClusterSchema::GCSosGroupActionSoundeventClusterSchema(void *ptr) {
    m_ptr = ptr;
}

int32_t GCSosGroupActionSoundeventClusterSchema::GetMinNearby() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSosGroupActionSoundeventClusterSchema", "m_nMinNearby");
}

void GCSosGroupActionSoundeventClusterSchema::SetMinNearby(int32_t value) {
    SetSchemaValue(m_ptr, "CSosGroupActionSoundeventClusterSchema", "m_nMinNearby", false, value);
}

float GCSosGroupActionSoundeventClusterSchema::GetClusterEpsilon() const {
    return GetSchemaValue<float>(m_ptr, "CSosGroupActionSoundeventClusterSchema", "m_flClusterEpsilon");
}

void GCSosGroupActionSoundeventClusterSchema::SetClusterEpsilon(float value) {
    SetSchemaValue(m_ptr, "CSosGroupActionSoundeventClusterSchema", "m_flClusterEpsilon", false, value);
}

CUtlString GCSosGroupActionSoundeventClusterSchema::GetShouldPlayOpvar() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CSosGroupActionSoundeventClusterSchema", "m_shouldPlayOpvar");
}

void GCSosGroupActionSoundeventClusterSchema::SetShouldPlayOpvar(CUtlString value) {
    SetSchemaValue(m_ptr, "CSosGroupActionSoundeventClusterSchema", "m_shouldPlayOpvar", false, value);
}

CUtlString GCSosGroupActionSoundeventClusterSchema::GetShouldPlayClusterChild() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CSosGroupActionSoundeventClusterSchema", "m_shouldPlayClusterChild");
}

void GCSosGroupActionSoundeventClusterSchema::SetShouldPlayClusterChild(CUtlString value) {
    SetSchemaValue(m_ptr, "CSosGroupActionSoundeventClusterSchema", "m_shouldPlayClusterChild", false, value);
}

CUtlString GCSosGroupActionSoundeventClusterSchema::GetClusterSizeOpvar() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CSosGroupActionSoundeventClusterSchema", "m_clusterSizeOpvar");
}

void GCSosGroupActionSoundeventClusterSchema::SetClusterSizeOpvar(CUtlString value) {
    SetSchemaValue(m_ptr, "CSosGroupActionSoundeventClusterSchema", "m_clusterSizeOpvar", false, value);
}

CUtlString GCSosGroupActionSoundeventClusterSchema::GetGroupBoundingBoxMinsOpvar() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CSosGroupActionSoundeventClusterSchema", "m_groupBoundingBoxMinsOpvar");
}

void GCSosGroupActionSoundeventClusterSchema::SetGroupBoundingBoxMinsOpvar(CUtlString value) {
    SetSchemaValue(m_ptr, "CSosGroupActionSoundeventClusterSchema", "m_groupBoundingBoxMinsOpvar", false, value);
}

CUtlString GCSosGroupActionSoundeventClusterSchema::GetGroupBoundingBoxMaxsOpvar() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CSosGroupActionSoundeventClusterSchema", "m_groupBoundingBoxMaxsOpvar");
}

void GCSosGroupActionSoundeventClusterSchema::SetGroupBoundingBoxMaxsOpvar(CUtlString value) {
    SetSchemaValue(m_ptr, "CSosGroupActionSoundeventClusterSchema", "m_groupBoundingBoxMaxsOpvar", false, value);
}

std::string GCSosGroupActionSoundeventClusterSchema::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSosGroupActionSoundeventClusterSchema::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimationGraphVisualizerAxis::GCAnimationGraphVisualizerAxis(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimationGraphVisualizerAxis::GCAnimationGraphVisualizerAxis(void *ptr) {
    m_ptr = ptr;
}

float GCAnimationGraphVisualizerAxis::GetAxisSize() const {
    return GetSchemaValue<float>(m_ptr, "CAnimationGraphVisualizerAxis", "m_flAxisSize");
}

void GCAnimationGraphVisualizerAxis::SetAxisSize(float value) {
    SetSchemaValue(m_ptr, "CAnimationGraphVisualizerAxis", "m_flAxisSize", false, value);
}

std::string GCAnimationGraphVisualizerAxis::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimationGraphVisualizerAxis::IsValid() {
    return (m_ptr != nullptr);
}

GMaterialResourceData_t::GMaterialResourceData_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GMaterialResourceData_t::GMaterialResourceData_t(void *ptr) {
    m_ptr = ptr;
}

CUtlString GMaterialResourceData_t::GetMaterialName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "MaterialResourceData_t", "m_materialName");
}

void GMaterialResourceData_t::SetMaterialName(CUtlString value) {
    SetSchemaValue(m_ptr, "MaterialResourceData_t", "m_materialName", true, value);
}

CUtlString GMaterialResourceData_t::GetShaderName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "MaterialResourceData_t", "m_shaderName");
}

void GMaterialResourceData_t::SetShaderName(CUtlString value) {
    SetSchemaValue(m_ptr, "MaterialResourceData_t", "m_shaderName", true, value);
}

std::vector<GMaterialParamInt_t> GMaterialResourceData_t::GetIntParams() const {
    CUtlVector<GMaterialParamInt_t>* vec = GetSchemaValue<CUtlVector<GMaterialParamInt_t>*>(m_ptr, "MaterialResourceData_t", "m_intParams"); std::vector<GMaterialParamInt_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GMaterialResourceData_t::SetIntParams(std::vector<GMaterialParamInt_t> value) {
    SetSchemaValueCUtlVector<GMaterialParamInt_t>(m_ptr, "MaterialResourceData_t", "m_intParams", true, value);
}

std::vector<GMaterialParamFloat_t> GMaterialResourceData_t::GetFloatParams() const {
    CUtlVector<GMaterialParamFloat_t>* vec = GetSchemaValue<CUtlVector<GMaterialParamFloat_t>*>(m_ptr, "MaterialResourceData_t", "m_floatParams"); std::vector<GMaterialParamFloat_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GMaterialResourceData_t::SetFloatParams(std::vector<GMaterialParamFloat_t> value) {
    SetSchemaValueCUtlVector<GMaterialParamFloat_t>(m_ptr, "MaterialResourceData_t", "m_floatParams", true, value);
}

std::vector<GMaterialParamVector_t> GMaterialResourceData_t::GetVectorParams() const {
    CUtlVector<GMaterialParamVector_t>* vec = GetSchemaValue<CUtlVector<GMaterialParamVector_t>*>(m_ptr, "MaterialResourceData_t", "m_vectorParams"); std::vector<GMaterialParamVector_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GMaterialResourceData_t::SetVectorParams(std::vector<GMaterialParamVector_t> value) {
    SetSchemaValueCUtlVector<GMaterialParamVector_t>(m_ptr, "MaterialResourceData_t", "m_vectorParams", true, value);
}

std::vector<GMaterialParamTexture_t> GMaterialResourceData_t::GetTextureParams() const {
    CUtlVector<GMaterialParamTexture_t>* vec = GetSchemaValue<CUtlVector<GMaterialParamTexture_t>*>(m_ptr, "MaterialResourceData_t", "m_textureParams"); std::vector<GMaterialParamTexture_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GMaterialResourceData_t::SetTextureParams(std::vector<GMaterialParamTexture_t> value) {
    SetSchemaValueCUtlVector<GMaterialParamTexture_t>(m_ptr, "MaterialResourceData_t", "m_textureParams", true, value);
}

std::vector<GMaterialParamBuffer_t> GMaterialResourceData_t::GetDynamicParams() const {
    CUtlVector<GMaterialParamBuffer_t>* vec = GetSchemaValue<CUtlVector<GMaterialParamBuffer_t>*>(m_ptr, "MaterialResourceData_t", "m_dynamicParams"); std::vector<GMaterialParamBuffer_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GMaterialResourceData_t::SetDynamicParams(std::vector<GMaterialParamBuffer_t> value) {
    SetSchemaValueCUtlVector<GMaterialParamBuffer_t>(m_ptr, "MaterialResourceData_t", "m_dynamicParams", true, value);
}

std::vector<GMaterialParamBuffer_t> GMaterialResourceData_t::GetDynamicTextureParams() const {
    CUtlVector<GMaterialParamBuffer_t>* vec = GetSchemaValue<CUtlVector<GMaterialParamBuffer_t>*>(m_ptr, "MaterialResourceData_t", "m_dynamicTextureParams"); std::vector<GMaterialParamBuffer_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GMaterialResourceData_t::SetDynamicTextureParams(std::vector<GMaterialParamBuffer_t> value) {
    SetSchemaValueCUtlVector<GMaterialParamBuffer_t>(m_ptr, "MaterialResourceData_t", "m_dynamicTextureParams", true, value);
}

std::vector<GMaterialParamInt_t> GMaterialResourceData_t::GetIntAttributes() const {
    CUtlVector<GMaterialParamInt_t>* vec = GetSchemaValue<CUtlVector<GMaterialParamInt_t>*>(m_ptr, "MaterialResourceData_t", "m_intAttributes"); std::vector<GMaterialParamInt_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GMaterialResourceData_t::SetIntAttributes(std::vector<GMaterialParamInt_t> value) {
    SetSchemaValueCUtlVector<GMaterialParamInt_t>(m_ptr, "MaterialResourceData_t", "m_intAttributes", true, value);
}

std::vector<GMaterialParamFloat_t> GMaterialResourceData_t::GetFloatAttributes() const {
    CUtlVector<GMaterialParamFloat_t>* vec = GetSchemaValue<CUtlVector<GMaterialParamFloat_t>*>(m_ptr, "MaterialResourceData_t", "m_floatAttributes"); std::vector<GMaterialParamFloat_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GMaterialResourceData_t::SetFloatAttributes(std::vector<GMaterialParamFloat_t> value) {
    SetSchemaValueCUtlVector<GMaterialParamFloat_t>(m_ptr, "MaterialResourceData_t", "m_floatAttributes", true, value);
}

std::vector<GMaterialParamVector_t> GMaterialResourceData_t::GetVectorAttributes() const {
    CUtlVector<GMaterialParamVector_t>* vec = GetSchemaValue<CUtlVector<GMaterialParamVector_t>*>(m_ptr, "MaterialResourceData_t", "m_vectorAttributes"); std::vector<GMaterialParamVector_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GMaterialResourceData_t::SetVectorAttributes(std::vector<GMaterialParamVector_t> value) {
    SetSchemaValueCUtlVector<GMaterialParamVector_t>(m_ptr, "MaterialResourceData_t", "m_vectorAttributes", true, value);
}

std::vector<GMaterialParamTexture_t> GMaterialResourceData_t::GetTextureAttributes() const {
    CUtlVector<GMaterialParamTexture_t>* vec = GetSchemaValue<CUtlVector<GMaterialParamTexture_t>*>(m_ptr, "MaterialResourceData_t", "m_textureAttributes"); std::vector<GMaterialParamTexture_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GMaterialResourceData_t::SetTextureAttributes(std::vector<GMaterialParamTexture_t> value) {
    SetSchemaValueCUtlVector<GMaterialParamTexture_t>(m_ptr, "MaterialResourceData_t", "m_textureAttributes", true, value);
}

std::vector<GMaterialParamString_t> GMaterialResourceData_t::GetStringAttributes() const {
    CUtlVector<GMaterialParamString_t>* vec = GetSchemaValue<CUtlVector<GMaterialParamString_t>*>(m_ptr, "MaterialResourceData_t", "m_stringAttributes"); std::vector<GMaterialParamString_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GMaterialResourceData_t::SetStringAttributes(std::vector<GMaterialParamString_t> value) {
    SetSchemaValueCUtlVector<GMaterialParamString_t>(m_ptr, "MaterialResourceData_t", "m_stringAttributes", true, value);
}

std::vector<CUtlString> GMaterialResourceData_t::GetRenderAttributesUsed() const {
    CUtlVector<CUtlString>* vec = GetSchemaValue<CUtlVector<CUtlString>*>(m_ptr, "MaterialResourceData_t", "m_renderAttributesUsed"); std::vector<CUtlString> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GMaterialResourceData_t::SetRenderAttributesUsed(std::vector<CUtlString> value) {
    SetSchemaValueCUtlVector<CUtlString>(m_ptr, "MaterialResourceData_t", "m_renderAttributesUsed", true, value);
}

std::string GMaterialResourceData_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GMaterialResourceData_t::IsValid() {
    return (m_ptr != nullptr);
}

GBlendItem_t::GBlendItem_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GBlendItem_t::GBlendItem_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<GTagSpan_t> GBlendItem_t::GetTags() const {
    CUtlVector<GTagSpan_t>* vec = GetSchemaValue<CUtlVector<GTagSpan_t>*>(m_ptr, "BlendItem_t", "m_tags"); std::vector<GTagSpan_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GBlendItem_t::SetTags(std::vector<GTagSpan_t> value) {
    SetSchemaValueCUtlVector<GTagSpan_t>(m_ptr, "BlendItem_t", "m_tags", true, value);
}

GCAnimUpdateNodeRef GBlendItem_t::GetChild() const {
    return GetSchemaValue<GCAnimUpdateNodeRef>(m_ptr, "BlendItem_t", "m_pChild");
}

void GBlendItem_t::SetChild(GCAnimUpdateNodeRef value) {
    SetSchemaValue(m_ptr, "BlendItem_t", "m_pChild", true, value);
}

Vector2D GBlendItem_t::GetPos() const {
    return GetSchemaValue<Vector2D>(m_ptr, "BlendItem_t", "m_vPos");
}

void GBlendItem_t::SetPos(Vector2D value) {
    SetSchemaValue(m_ptr, "BlendItem_t", "m_vPos", true, value);
}

float GBlendItem_t::GetDuration() const {
    return GetSchemaValue<float>(m_ptr, "BlendItem_t", "m_flDuration");
}

void GBlendItem_t::SetDuration(float value) {
    SetSchemaValue(m_ptr, "BlendItem_t", "m_flDuration", true, value);
}

bool GBlendItem_t::GetUseCustomDuration() const {
    return GetSchemaValue<bool>(m_ptr, "BlendItem_t", "m_bUseCustomDuration");
}

void GBlendItem_t::SetUseCustomDuration(bool value) {
    SetSchemaValue(m_ptr, "BlendItem_t", "m_bUseCustomDuration", true, value);
}

std::string GBlendItem_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GBlendItem_t::IsValid() {
    return (m_ptr != nullptr);
}

GCVoiceContainerAnalysisBase::GCVoiceContainerAnalysisBase(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCVoiceContainerAnalysisBase::GCVoiceContainerAnalysisBase(void *ptr) {
    m_ptr = ptr;
}

bool GCVoiceContainerAnalysisBase::GetRegenerateCurveOnCompile() const {
    return GetSchemaValue<bool>(m_ptr, "CVoiceContainerAnalysisBase", "m_bRegenerateCurveOnCompile");
}

void GCVoiceContainerAnalysisBase::SetRegenerateCurveOnCompile(bool value) {
    SetSchemaValue(m_ptr, "CVoiceContainerAnalysisBase", "m_bRegenerateCurveOnCompile", false, value);
}

std::string GCVoiceContainerAnalysisBase::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCVoiceContainerAnalysisBase::IsValid() {
    return (m_ptr != nullptr);
}

GCSosGroupActionLimitSchema::GCSosGroupActionLimitSchema(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSosGroupActionLimitSchema::GCSosGroupActionLimitSchema(void *ptr) {
    m_ptr = ptr;
}

int32_t GCSosGroupActionLimitSchema::GetMaxCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSosGroupActionLimitSchema", "m_nMaxCount");
}

void GCSosGroupActionLimitSchema::SetMaxCount(int32_t value) {
    SetSchemaValue(m_ptr, "CSosGroupActionLimitSchema", "m_nMaxCount", false, value);
}

SosActionStopType_t GCSosGroupActionLimitSchema::GetStopType() const {
    return GetSchemaValue<SosActionStopType_t>(m_ptr, "CSosGroupActionLimitSchema", "m_nStopType");
}

void GCSosGroupActionLimitSchema::SetStopType(SosActionStopType_t value) {
    SetSchemaValue(m_ptr, "CSosGroupActionLimitSchema", "m_nStopType", false, value);
}

SosActionSortType_t GCSosGroupActionLimitSchema::GetSortType() const {
    return GetSchemaValue<SosActionSortType_t>(m_ptr, "CSosGroupActionLimitSchema", "m_nSortType");
}

void GCSosGroupActionLimitSchema::SetSortType(SosActionSortType_t value) {
    SetSchemaValue(m_ptr, "CSosGroupActionLimitSchema", "m_nSortType", false, value);
}

std::string GCSosGroupActionLimitSchema::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSosGroupActionLimitSchema::IsValid() {
    return (m_ptr != nullptr);
}

GFeWeightedNode_t::GFeWeightedNode_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeWeightedNode_t::GFeWeightedNode_t(void *ptr) {
    m_ptr = ptr;
}

uint16_t GFeWeightedNode_t::GetNode() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeWeightedNode_t", "nNode");
}

void GFeWeightedNode_t::SetNode(uint16_t value) {
    SetSchemaValue(m_ptr, "FeWeightedNode_t", "nNode", true, value);
}

uint16_t GFeWeightedNode_t::GetWeight() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeWeightedNode_t", "nWeight");
}

void GFeWeightedNode_t::SetWeight(uint16_t value) {
    SetSchemaValue(m_ptr, "FeWeightedNode_t", "nWeight", true, value);
}

std::string GFeWeightedNode_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeWeightedNode_t::IsValid() {
    return (m_ptr != nullptr);
}

GCLookComponentUpdater::GCLookComponentUpdater(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCLookComponentUpdater::GCLookComponentUpdater(void *ptr) {
    m_ptr = ptr;
}

GCAnimParamHandle GCLookComponentUpdater::GetLookHeading() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CLookComponentUpdater", "m_hLookHeading");
}

void GCLookComponentUpdater::SetLookHeading(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CLookComponentUpdater", "m_hLookHeading", false, value);
}

GCAnimParamHandle GCLookComponentUpdater::GetLookHeadingVelocity() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CLookComponentUpdater", "m_hLookHeadingVelocity");
}

void GCLookComponentUpdater::SetLookHeadingVelocity(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CLookComponentUpdater", "m_hLookHeadingVelocity", false, value);
}

GCAnimParamHandle GCLookComponentUpdater::GetLookPitch() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CLookComponentUpdater", "m_hLookPitch");
}

void GCLookComponentUpdater::SetLookPitch(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CLookComponentUpdater", "m_hLookPitch", false, value);
}

GCAnimParamHandle GCLookComponentUpdater::GetLookDistance() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CLookComponentUpdater", "m_hLookDistance");
}

void GCLookComponentUpdater::SetLookDistance(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CLookComponentUpdater", "m_hLookDistance", false, value);
}

GCAnimParamHandle GCLookComponentUpdater::GetLookDirection() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CLookComponentUpdater", "m_hLookDirection");
}

void GCLookComponentUpdater::SetLookDirection(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CLookComponentUpdater", "m_hLookDirection", false, value);
}

GCAnimParamHandle GCLookComponentUpdater::GetLookTarget() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CLookComponentUpdater", "m_hLookTarget");
}

void GCLookComponentUpdater::SetLookTarget(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CLookComponentUpdater", "m_hLookTarget", false, value);
}

GCAnimParamHandle GCLookComponentUpdater::GetLookTargetWorldSpace() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CLookComponentUpdater", "m_hLookTargetWorldSpace");
}

void GCLookComponentUpdater::SetLookTargetWorldSpace(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CLookComponentUpdater", "m_hLookTargetWorldSpace", false, value);
}

bool GCLookComponentUpdater::GetNetworkLookTarget() const {
    return GetSchemaValue<bool>(m_ptr, "CLookComponentUpdater", "m_bNetworkLookTarget");
}

void GCLookComponentUpdater::SetNetworkLookTarget(bool value) {
    SetSchemaValue(m_ptr, "CLookComponentUpdater", "m_bNetworkLookTarget", false, value);
}

std::string GCLookComponentUpdater::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCLookComponentUpdater::IsValid() {
    return (m_ptr != nullptr);
}

GCCycleControlUpdateNode::GCCycleControlUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCycleControlUpdateNode::GCCycleControlUpdateNode(void *ptr) {
    m_ptr = ptr;
}

AnimValueSource GCCycleControlUpdateNode::GetValueSource() const {
    return GetSchemaValue<AnimValueSource>(m_ptr, "CCycleControlUpdateNode", "m_valueSource");
}

void GCCycleControlUpdateNode::SetValueSource(AnimValueSource value) {
    SetSchemaValue(m_ptr, "CCycleControlUpdateNode", "m_valueSource", false, value);
}

GCAnimParamHandle GCCycleControlUpdateNode::GetParamIndex() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CCycleControlUpdateNode", "m_paramIndex");
}

void GCCycleControlUpdateNode::SetParamIndex(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CCycleControlUpdateNode", "m_paramIndex", false, value);
}

std::string GCCycleControlUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCycleControlUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GCNetworkVarChainer::GCNetworkVarChainer(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNetworkVarChainer::GCNetworkVarChainer(void *ptr) {
    m_ptr = ptr;
}

GChangeAccessorFieldPathIndex_t GCNetworkVarChainer::GetPathIndex() const {
    return GetSchemaValue<GChangeAccessorFieldPathIndex_t>(m_ptr, "CNetworkVarChainer", "m_PathIndex");
}

void GCNetworkVarChainer::SetPathIndex(GChangeAccessorFieldPathIndex_t value) {
    SetSchemaValue(m_ptr, "CNetworkVarChainer", "m_PathIndex", false, value);
}

std::string GCNetworkVarChainer::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNetworkVarChainer::IsValid() {
    return (m_ptr != nullptr);
}

GRnTriangle_t::GRnTriangle_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GRnTriangle_t::GRnTriangle_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<int32_t> GRnTriangle_t::GetIndex() const {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "RnTriangle_t", "m_nIndex"); std::vector<int32_t> ret; for(int i = 0; i < 3; i++) { ret.push_back(outValue[i]); } return ret;
}

void GRnTriangle_t::SetIndex(std::vector<int32_t> value) {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "RnTriangle_t", "m_nIndex"); for(int i = 0; i < 3; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "RnTriangle_t", "m_nIndex", true, outValue);
}

std::string GRnTriangle_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GRnTriangle_t::IsValid() {
    return (m_ptr != nullptr);
}

GCNmVectorValueNode::GCNmVectorValueNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmVectorValueNode::GCNmVectorValueNode(void *ptr) {
    m_ptr = ptr;
}

std::string GCNmVectorValueNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmVectorValueNode::IsValid() {
    return (m_ptr != nullptr);
}

GCSeqSeqDescFlag::GCSeqSeqDescFlag(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSeqSeqDescFlag::GCSeqSeqDescFlag(void *ptr) {
    m_ptr = ptr;
}

bool GCSeqSeqDescFlag::GetLooping() const {
    return GetSchemaValue<bool>(m_ptr, "CSeqSeqDescFlag", "m_bLooping");
}

void GCSeqSeqDescFlag::SetLooping(bool value) {
    SetSchemaValue(m_ptr, "CSeqSeqDescFlag", "m_bLooping", false, value);
}

bool GCSeqSeqDescFlag::GetSnap() const {
    return GetSchemaValue<bool>(m_ptr, "CSeqSeqDescFlag", "m_bSnap");
}

void GCSeqSeqDescFlag::SetSnap(bool value) {
    SetSchemaValue(m_ptr, "CSeqSeqDescFlag", "m_bSnap", false, value);
}

bool GCSeqSeqDescFlag::GetAutoplay() const {
    return GetSchemaValue<bool>(m_ptr, "CSeqSeqDescFlag", "m_bAutoplay");
}

void GCSeqSeqDescFlag::SetAutoplay(bool value) {
    SetSchemaValue(m_ptr, "CSeqSeqDescFlag", "m_bAutoplay", false, value);
}

bool GCSeqSeqDescFlag::GetPost() const {
    return GetSchemaValue<bool>(m_ptr, "CSeqSeqDescFlag", "m_bPost");
}

void GCSeqSeqDescFlag::SetPost(bool value) {
    SetSchemaValue(m_ptr, "CSeqSeqDescFlag", "m_bPost", false, value);
}

bool GCSeqSeqDescFlag::GetHidden() const {
    return GetSchemaValue<bool>(m_ptr, "CSeqSeqDescFlag", "m_bHidden");
}

void GCSeqSeqDescFlag::SetHidden(bool value) {
    SetSchemaValue(m_ptr, "CSeqSeqDescFlag", "m_bHidden", false, value);
}

bool GCSeqSeqDescFlag::GetMulti() const {
    return GetSchemaValue<bool>(m_ptr, "CSeqSeqDescFlag", "m_bMulti");
}

void GCSeqSeqDescFlag::SetMulti(bool value) {
    SetSchemaValue(m_ptr, "CSeqSeqDescFlag", "m_bMulti", false, value);
}

bool GCSeqSeqDescFlag::GetLegacyDelta() const {
    return GetSchemaValue<bool>(m_ptr, "CSeqSeqDescFlag", "m_bLegacyDelta");
}

void GCSeqSeqDescFlag::SetLegacyDelta(bool value) {
    SetSchemaValue(m_ptr, "CSeqSeqDescFlag", "m_bLegacyDelta", false, value);
}

bool GCSeqSeqDescFlag::GetLegacyWorldspace() const {
    return GetSchemaValue<bool>(m_ptr, "CSeqSeqDescFlag", "m_bLegacyWorldspace");
}

void GCSeqSeqDescFlag::SetLegacyWorldspace(bool value) {
    SetSchemaValue(m_ptr, "CSeqSeqDescFlag", "m_bLegacyWorldspace", false, value);
}

bool GCSeqSeqDescFlag::GetLegacyCyclepose() const {
    return GetSchemaValue<bool>(m_ptr, "CSeqSeqDescFlag", "m_bLegacyCyclepose");
}

void GCSeqSeqDescFlag::SetLegacyCyclepose(bool value) {
    SetSchemaValue(m_ptr, "CSeqSeqDescFlag", "m_bLegacyCyclepose", false, value);
}

bool GCSeqSeqDescFlag::GetLegacyRealtime() const {
    return GetSchemaValue<bool>(m_ptr, "CSeqSeqDescFlag", "m_bLegacyRealtime");
}

void GCSeqSeqDescFlag::SetLegacyRealtime(bool value) {
    SetSchemaValue(m_ptr, "CSeqSeqDescFlag", "m_bLegacyRealtime", false, value);
}

bool GCSeqSeqDescFlag::GetModelDoc() const {
    return GetSchemaValue<bool>(m_ptr, "CSeqSeqDescFlag", "m_bModelDoc");
}

void GCSeqSeqDescFlag::SetModelDoc(bool value) {
    SetSchemaValue(m_ptr, "CSeqSeqDescFlag", "m_bModelDoc", false, value);
}

std::string GCSeqSeqDescFlag::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSeqSeqDescFlag::IsValid() {
    return (m_ptr != nullptr);
}

GAimCameraOpFixedSettings_t::GAimCameraOpFixedSettings_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GAimCameraOpFixedSettings_t::GAimCameraOpFixedSettings_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GAimCameraOpFixedSettings_t::GetChainIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "AimCameraOpFixedSettings_t", "m_nChainIndex");
}

void GAimCameraOpFixedSettings_t::SetChainIndex(int32_t value) {
    SetSchemaValue(m_ptr, "AimCameraOpFixedSettings_t", "m_nChainIndex", true, value);
}

int32_t GAimCameraOpFixedSettings_t::GetCameraJointIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "AimCameraOpFixedSettings_t", "m_nCameraJointIndex");
}

void GAimCameraOpFixedSettings_t::SetCameraJointIndex(int32_t value) {
    SetSchemaValue(m_ptr, "AimCameraOpFixedSettings_t", "m_nCameraJointIndex", true, value);
}

int32_t GAimCameraOpFixedSettings_t::GetPelvisJointIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "AimCameraOpFixedSettings_t", "m_nPelvisJointIndex");
}

void GAimCameraOpFixedSettings_t::SetPelvisJointIndex(int32_t value) {
    SetSchemaValue(m_ptr, "AimCameraOpFixedSettings_t", "m_nPelvisJointIndex", true, value);
}

int32_t GAimCameraOpFixedSettings_t::GetClavicleLeftJointIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "AimCameraOpFixedSettings_t", "m_nClavicleLeftJointIndex");
}

void GAimCameraOpFixedSettings_t::SetClavicleLeftJointIndex(int32_t value) {
    SetSchemaValue(m_ptr, "AimCameraOpFixedSettings_t", "m_nClavicleLeftJointIndex", true, value);
}

int32_t GAimCameraOpFixedSettings_t::GetClavicleRightJointIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "AimCameraOpFixedSettings_t", "m_nClavicleRightJointIndex");
}

void GAimCameraOpFixedSettings_t::SetClavicleRightJointIndex(int32_t value) {
    SetSchemaValue(m_ptr, "AimCameraOpFixedSettings_t", "m_nClavicleRightJointIndex", true, value);
}

int32_t GAimCameraOpFixedSettings_t::GetDepenetrationJointIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "AimCameraOpFixedSettings_t", "m_nDepenetrationJointIndex");
}

void GAimCameraOpFixedSettings_t::SetDepenetrationJointIndex(int32_t value) {
    SetSchemaValue(m_ptr, "AimCameraOpFixedSettings_t", "m_nDepenetrationJointIndex", true, value);
}

std::vector<int32> GAimCameraOpFixedSettings_t::GetPropJoints() const {
    CUtlVector<int32>* vec = GetSchemaValue<CUtlVector<int32>*>(m_ptr, "AimCameraOpFixedSettings_t", "m_propJoints"); std::vector<int32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GAimCameraOpFixedSettings_t::SetPropJoints(std::vector<int32> value) {
    SetSchemaValueCUtlVector<int32>(m_ptr, "AimCameraOpFixedSettings_t", "m_propJoints", true, value);
}

std::string GAimCameraOpFixedSettings_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GAimCameraOpFixedSettings_t::IsValid() {
    return (m_ptr != nullptr);
}

GCParticleRemapFloatInput::GCParticleRemapFloatInput(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCParticleRemapFloatInput::GCParticleRemapFloatInput(void *ptr) {
    m_ptr = ptr;
}

std::string GCParticleRemapFloatInput::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCParticleRemapFloatInput::IsValid() {
    return (m_ptr != nullptr);
}

GBaseSceneObjectOverride_t::GBaseSceneObjectOverride_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GBaseSceneObjectOverride_t::GBaseSceneObjectOverride_t(void *ptr) {
    m_ptr = ptr;
}

uint32_t GBaseSceneObjectOverride_t::GetSceneObjectIndex() const {
    return GetSchemaValue<uint32_t>(m_ptr, "BaseSceneObjectOverride_t", "m_nSceneObjectIndex");
}

void GBaseSceneObjectOverride_t::SetSceneObjectIndex(uint32_t value) {
    SetSchemaValue(m_ptr, "BaseSceneObjectOverride_t", "m_nSceneObjectIndex", true, value);
}

std::string GBaseSceneObjectOverride_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GBaseSceneObjectOverride_t::IsValid() {
    return (m_ptr != nullptr);
}

GCConcreteAnimParameter::GCConcreteAnimParameter(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCConcreteAnimParameter::GCConcreteAnimParameter(void *ptr) {
    m_ptr = ptr;
}

AnimParamButton_t GCConcreteAnimParameter::GetPreviewButton() const {
    return GetSchemaValue<AnimParamButton_t>(m_ptr, "CConcreteAnimParameter", "m_previewButton");
}

void GCConcreteAnimParameter::SetPreviewButton(AnimParamButton_t value) {
    SetSchemaValue(m_ptr, "CConcreteAnimParameter", "m_previewButton", false, value);
}

AnimParamNetworkSetting GCConcreteAnimParameter::GetNetworkSetting() const {
    return GetSchemaValue<AnimParamNetworkSetting>(m_ptr, "CConcreteAnimParameter", "m_eNetworkSetting");
}

void GCConcreteAnimParameter::SetNetworkSetting(AnimParamNetworkSetting value) {
    SetSchemaValue(m_ptr, "CConcreteAnimParameter", "m_eNetworkSetting", false, value);
}

bool GCConcreteAnimParameter::GetUseMostRecentValue() const {
    return GetSchemaValue<bool>(m_ptr, "CConcreteAnimParameter", "m_bUseMostRecentValue");
}

void GCConcreteAnimParameter::SetUseMostRecentValue(bool value) {
    SetSchemaValue(m_ptr, "CConcreteAnimParameter", "m_bUseMostRecentValue", false, value);
}

bool GCConcreteAnimParameter::GetAutoReset() const {
    return GetSchemaValue<bool>(m_ptr, "CConcreteAnimParameter", "m_bAutoReset");
}

void GCConcreteAnimParameter::SetAutoReset(bool value) {
    SetSchemaValue(m_ptr, "CConcreteAnimParameter", "m_bAutoReset", false, value);
}

bool GCConcreteAnimParameter::GetGameWritable() const {
    return GetSchemaValue<bool>(m_ptr, "CConcreteAnimParameter", "m_bGameWritable");
}

void GCConcreteAnimParameter::SetGameWritable(bool value) {
    SetSchemaValue(m_ptr, "CConcreteAnimParameter", "m_bGameWritable", false, value);
}

bool GCConcreteAnimParameter::GetGraphWritable() const {
    return GetSchemaValue<bool>(m_ptr, "CConcreteAnimParameter", "m_bGraphWritable");
}

void GCConcreteAnimParameter::SetGraphWritable(bool value) {
    SetSchemaValue(m_ptr, "CConcreteAnimParameter", "m_bGraphWritable", false, value);
}

std::string GCConcreteAnimParameter::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCConcreteAnimParameter::IsValid() {
    return (m_ptr != nullptr);
}

GFeAnimStrayRadius_t::GFeAnimStrayRadius_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeAnimStrayRadius_t::GFeAnimStrayRadius_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<uint16_t> GFeAnimStrayRadius_t::GetNode() const {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeAnimStrayRadius_t", "nNode"); std::vector<uint16_t> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}

void GFeAnimStrayRadius_t::SetNode(std::vector<uint16_t> value) {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeAnimStrayRadius_t", "nNode"); for(int i = 0; i < 2; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "FeAnimStrayRadius_t", "nNode", true, outValue);
}

float GFeAnimStrayRadius_t::GetMaxDist() const {
    return GetSchemaValue<float>(m_ptr, "FeAnimStrayRadius_t", "flMaxDist");
}

void GFeAnimStrayRadius_t::SetMaxDist(float value) {
    SetSchemaValue(m_ptr, "FeAnimStrayRadius_t", "flMaxDist", true, value);
}

float GFeAnimStrayRadius_t::GetRelaxationFactor() const {
    return GetSchemaValue<float>(m_ptr, "FeAnimStrayRadius_t", "flRelaxationFactor");
}

void GFeAnimStrayRadius_t::SetRelaxationFactor(float value) {
    SetSchemaValue(m_ptr, "FeAnimStrayRadius_t", "flRelaxationFactor", true, value);
}

std::string GFeAnimStrayRadius_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeAnimStrayRadius_t::IsValid() {
    return (m_ptr != nullptr);
}

GModelReference_t::GModelReference_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GModelReference_t::GModelReference_t(void *ptr) {
    m_ptr = ptr;
}

float GModelReference_t::GetRelativeProbabilityOfSpawn() const {
    return GetSchemaValue<float>(m_ptr, "ModelReference_t", "m_flRelativeProbabilityOfSpawn");
}

void GModelReference_t::SetRelativeProbabilityOfSpawn(float value) {
    SetSchemaValue(m_ptr, "ModelReference_t", "m_flRelativeProbabilityOfSpawn", true, value);
}

std::string GModelReference_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GModelReference_t::IsValid() {
    return (m_ptr != nullptr);
}

GRnCapsuleDesc_t::GRnCapsuleDesc_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GRnCapsuleDesc_t::GRnCapsuleDesc_t(void *ptr) {
    m_ptr = ptr;
}

GRnCapsule_t GRnCapsuleDesc_t::GetCapsule() const {
    return GetSchemaValue<GRnCapsule_t>(m_ptr, "RnCapsuleDesc_t", "m_Capsule");
}

void GRnCapsuleDesc_t::SetCapsule(GRnCapsule_t value) {
    SetSchemaValue(m_ptr, "RnCapsuleDesc_t", "m_Capsule", true, value);
}

std::string GRnCapsuleDesc_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GRnCapsuleDesc_t::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimGraphDebugReplay::GCAnimGraphDebugReplay(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimGraphDebugReplay::GCAnimGraphDebugReplay(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCAnimGraphDebugReplay::GetAnimGraphFileName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CAnimGraphDebugReplay", "m_animGraphFileName");
}

void GCAnimGraphDebugReplay::SetAnimGraphFileName(CUtlString value) {
    SetSchemaValue(m_ptr, "CAnimGraphDebugReplay", "m_animGraphFileName", false, value);
}

int32_t GCAnimGraphDebugReplay::GetStartIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimGraphDebugReplay", "m_startIndex");
}

void GCAnimGraphDebugReplay::SetStartIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimGraphDebugReplay", "m_startIndex", false, value);
}

int32_t GCAnimGraphDebugReplay::GetWriteIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimGraphDebugReplay", "m_writeIndex");
}

void GCAnimGraphDebugReplay::SetWriteIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimGraphDebugReplay", "m_writeIndex", false, value);
}

int32_t GCAnimGraphDebugReplay::GetFrameCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimGraphDebugReplay", "m_frameCount");
}

void GCAnimGraphDebugReplay::SetFrameCount(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimGraphDebugReplay", "m_frameCount", false, value);
}

std::string GCAnimGraphDebugReplay::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimGraphDebugReplay::IsValid() {
    return (m_ptr != nullptr);
}

GCVoiceContainerSwitch::GCVoiceContainerSwitch(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCVoiceContainerSwitch::GCVoiceContainerSwitch(void *ptr) {
    m_ptr = ptr;
}

std::vector<GCVoiceContainerBase*> GCVoiceContainerSwitch::GetSoundsToPlay() const {
    CUtlVector<GCVoiceContainerBase*>* vec = GetSchemaValue<CUtlVector<GCVoiceContainerBase*>*>(m_ptr, "CVoiceContainerSwitch", "m_soundsToPlay"); std::vector<GCVoiceContainerBase*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCVoiceContainerSwitch::SetSoundsToPlay(std::vector<GCVoiceContainerBase*> value) {
    SetSchemaValueCUtlVector<GCVoiceContainerBase*>(m_ptr, "CVoiceContainerSwitch", "m_soundsToPlay", false, value);
}

std::string GCVoiceContainerSwitch::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCVoiceContainerSwitch::IsValid() {
    return (m_ptr != nullptr);
}

GLookAtBone_t::GLookAtBone_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GLookAtBone_t::GLookAtBone_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GLookAtBone_t::GetIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "LookAtBone_t", "m_index");
}

void GLookAtBone_t::SetIndex(int32_t value) {
    SetSchemaValue(m_ptr, "LookAtBone_t", "m_index", true, value);
}

float GLookAtBone_t::GetWeight() const {
    return GetSchemaValue<float>(m_ptr, "LookAtBone_t", "m_weight");
}

void GLookAtBone_t::SetWeight(float value) {
    SetSchemaValue(m_ptr, "LookAtBone_t", "m_weight", true, value);
}

std::string GLookAtBone_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GLookAtBone_t::IsValid() {
    return (m_ptr != nullptr);
}

GCNmBoneMaskValueNode::GCNmBoneMaskValueNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmBoneMaskValueNode::GCNmBoneMaskValueNode(void *ptr) {
    m_ptr = ptr;
}

std::string GCNmBoneMaskValueNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmBoneMaskValueNode::IsValid() {
    return (m_ptr != nullptr);
}

GCNmTransitionEvent::GCNmTransitionEvent(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmTransitionEvent::GCNmTransitionEvent(void *ptr) {
    m_ptr = ptr;
}

NmTransitionRule_t GCNmTransitionEvent::GetRule() const {
    return GetSchemaValue<NmTransitionRule_t>(m_ptr, "CNmTransitionEvent", "m_rule");
}

void GCNmTransitionEvent::SetRule(NmTransitionRule_t value) {
    SetSchemaValue(m_ptr, "CNmTransitionEvent", "m_rule", false, value);
}

std::string GCNmTransitionEvent::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmTransitionEvent::IsValid() {
    return (m_ptr != nullptr);
}

GCStringAnimTag::GCStringAnimTag(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCStringAnimTag::GCStringAnimTag(void *ptr) {
    m_ptr = ptr;
}

std::string GCStringAnimTag::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCStringAnimTag::IsValid() {
    return (m_ptr != nullptr);
}

GSkeletonAnimCapture_t__Bone_t::GSkeletonAnimCapture_t__Bone_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GSkeletonAnimCapture_t__Bone_t::GSkeletonAnimCapture_t__Bone_t(void *ptr) {
    m_ptr = ptr;
}

CUtlString GSkeletonAnimCapture_t__Bone_t::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "SkeletonAnimCapture_t__Bone_t", "m_Name");
}

void GSkeletonAnimCapture_t__Bone_t::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "SkeletonAnimCapture_t__Bone_t", "m_Name", true, value);
}

int32_t GSkeletonAnimCapture_t__Bone_t::GetParent() const {
    return GetSchemaValue<int32_t>(m_ptr, "SkeletonAnimCapture_t__Bone_t", "m_nParent");
}

void GSkeletonAnimCapture_t__Bone_t::SetParent(int32_t value) {
    SetSchemaValue(m_ptr, "SkeletonAnimCapture_t__Bone_t", "m_nParent", true, value);
}

std::string GSkeletonAnimCapture_t__Bone_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GSkeletonAnimCapture_t__Bone_t::IsValid() {
    return (m_ptr != nullptr);
}

GCStaticPoseCache::GCStaticPoseCache(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCStaticPoseCache::GCStaticPoseCache(void *ptr) {
    m_ptr = ptr;
}

std::vector<GCCachedPose> GCStaticPoseCache::GetPoses() const {
    CUtlVector<GCCachedPose>* vec = GetSchemaValue<CUtlVector<GCCachedPose>*>(m_ptr, "CStaticPoseCache", "m_poses"); std::vector<GCCachedPose> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCStaticPoseCache::SetPoses(std::vector<GCCachedPose> value) {
    SetSchemaValueCUtlVector<GCCachedPose>(m_ptr, "CStaticPoseCache", "m_poses", false, value);
}

int32_t GCStaticPoseCache::GetBoneCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CStaticPoseCache", "m_nBoneCount");
}

void GCStaticPoseCache::SetBoneCount(int32_t value) {
    SetSchemaValue(m_ptr, "CStaticPoseCache", "m_nBoneCount", false, value);
}

int32_t GCStaticPoseCache::GetMorphCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CStaticPoseCache", "m_nMorphCount");
}

void GCStaticPoseCache::SetMorphCount(int32_t value) {
    SetSchemaValue(m_ptr, "CStaticPoseCache", "m_nMorphCount", false, value);
}

std::string GCStaticPoseCache::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCStaticPoseCache::IsValid() {
    return (m_ptr != nullptr);
}

GParticlePreviewBodyGroup_t::GParticlePreviewBodyGroup_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GParticlePreviewBodyGroup_t::GParticlePreviewBodyGroup_t(void *ptr) {
    m_ptr = ptr;
}

CUtlString GParticlePreviewBodyGroup_t::GetBodyGroupName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "ParticlePreviewBodyGroup_t", "m_bodyGroupName");
}

void GParticlePreviewBodyGroup_t::SetBodyGroupName(CUtlString value) {
    SetSchemaValue(m_ptr, "ParticlePreviewBodyGroup_t", "m_bodyGroupName", true, value);
}

int32_t GParticlePreviewBodyGroup_t::GetValue() const {
    return GetSchemaValue<int32_t>(m_ptr, "ParticlePreviewBodyGroup_t", "m_nValue");
}

void GParticlePreviewBodyGroup_t::SetValue(int32_t value) {
    SetSchemaValue(m_ptr, "ParticlePreviewBodyGroup_t", "m_nValue", true, value);
}

std::string GParticlePreviewBodyGroup_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GParticlePreviewBodyGroup_t::IsValid() {
    return (m_ptr != nullptr);
}

GFeWorldCollisionParams_t::GFeWorldCollisionParams_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeWorldCollisionParams_t::GFeWorldCollisionParams_t(void *ptr) {
    m_ptr = ptr;
}

float GFeWorldCollisionParams_t::GetWorldFriction() const {
    return GetSchemaValue<float>(m_ptr, "FeWorldCollisionParams_t", "flWorldFriction");
}

void GFeWorldCollisionParams_t::SetWorldFriction(float value) {
    SetSchemaValue(m_ptr, "FeWorldCollisionParams_t", "flWorldFriction", true, value);
}

float GFeWorldCollisionParams_t::GetGroundFriction() const {
    return GetSchemaValue<float>(m_ptr, "FeWorldCollisionParams_t", "flGroundFriction");
}

void GFeWorldCollisionParams_t::SetGroundFriction(float value) {
    SetSchemaValue(m_ptr, "FeWorldCollisionParams_t", "flGroundFriction", true, value);
}

uint16_t GFeWorldCollisionParams_t::GetListBegin() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeWorldCollisionParams_t", "nListBegin");
}

void GFeWorldCollisionParams_t::SetListBegin(uint16_t value) {
    SetSchemaValue(m_ptr, "FeWorldCollisionParams_t", "nListBegin", true, value);
}

uint16_t GFeWorldCollisionParams_t::GetListEnd() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeWorldCollisionParams_t", "nListEnd");
}

void GFeWorldCollisionParams_t::SetListEnd(uint16_t value) {
    SetSchemaValue(m_ptr, "FeWorldCollisionParams_t", "nListEnd", true, value);
}

std::string GFeWorldCollisionParams_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeWorldCollisionParams_t::IsValid() {
    return (m_ptr != nullptr);
}

GCPlayerInputAnimMotorUpdater::GCPlayerInputAnimMotorUpdater(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPlayerInputAnimMotorUpdater::GCPlayerInputAnimMotorUpdater(void *ptr) {
    m_ptr = ptr;
}

std::vector<float32> GCPlayerInputAnimMotorUpdater::GetSampleTimes() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "CPlayerInputAnimMotorUpdater", "m_sampleTimes"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCPlayerInputAnimMotorUpdater::SetSampleTimes(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "CPlayerInputAnimMotorUpdater", "m_sampleTimes", false, value);
}

float GCPlayerInputAnimMotorUpdater::GetSpringConstant() const {
    return GetSchemaValue<float>(m_ptr, "CPlayerInputAnimMotorUpdater", "m_flSpringConstant");
}

void GCPlayerInputAnimMotorUpdater::SetSpringConstant(float value) {
    SetSchemaValue(m_ptr, "CPlayerInputAnimMotorUpdater", "m_flSpringConstant", false, value);
}

float GCPlayerInputAnimMotorUpdater::GetAnticipationDistance() const {
    return GetSchemaValue<float>(m_ptr, "CPlayerInputAnimMotorUpdater", "m_flAnticipationDistance");
}

void GCPlayerInputAnimMotorUpdater::SetAnticipationDistance(float value) {
    SetSchemaValue(m_ptr, "CPlayerInputAnimMotorUpdater", "m_flAnticipationDistance", false, value);
}

GCAnimParamHandle GCPlayerInputAnimMotorUpdater::GetAnticipationPosParam() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CPlayerInputAnimMotorUpdater", "m_hAnticipationPosParam");
}

void GCPlayerInputAnimMotorUpdater::SetAnticipationPosParam(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CPlayerInputAnimMotorUpdater", "m_hAnticipationPosParam", false, value);
}

GCAnimParamHandle GCPlayerInputAnimMotorUpdater::GetAnticipationHeadingParam() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CPlayerInputAnimMotorUpdater", "m_hAnticipationHeadingParam");
}

void GCPlayerInputAnimMotorUpdater::SetAnticipationHeadingParam(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CPlayerInputAnimMotorUpdater", "m_hAnticipationHeadingParam", false, value);
}

bool GCPlayerInputAnimMotorUpdater::GetUseAcceleration() const {
    return GetSchemaValue<bool>(m_ptr, "CPlayerInputAnimMotorUpdater", "m_bUseAcceleration");
}

void GCPlayerInputAnimMotorUpdater::SetUseAcceleration(bool value) {
    SetSchemaValue(m_ptr, "CPlayerInputAnimMotorUpdater", "m_bUseAcceleration", false, value);
}

std::string GCPlayerInputAnimMotorUpdater::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPlayerInputAnimMotorUpdater::IsValid() {
    return (m_ptr != nullptr);
}

GCParticleCollectionRendererVecInput::GCParticleCollectionRendererVecInput(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCParticleCollectionRendererVecInput::GCParticleCollectionRendererVecInput(void *ptr) {
    m_ptr = ptr;
}

std::string GCParticleCollectionRendererVecInput::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCParticleCollectionRendererVecInput::IsValid() {
    return (m_ptr != nullptr);
}

GFeBandBendLimit_t::GFeBandBendLimit_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeBandBendLimit_t::GFeBandBendLimit_t(void *ptr) {
    m_ptr = ptr;
}

float GFeBandBendLimit_t::GetDistMin() const {
    return GetSchemaValue<float>(m_ptr, "FeBandBendLimit_t", "flDistMin");
}

void GFeBandBendLimit_t::SetDistMin(float value) {
    SetSchemaValue(m_ptr, "FeBandBendLimit_t", "flDistMin", true, value);
}

float GFeBandBendLimit_t::GetDistMax() const {
    return GetSchemaValue<float>(m_ptr, "FeBandBendLimit_t", "flDistMax");
}

void GFeBandBendLimit_t::SetDistMax(float value) {
    SetSchemaValue(m_ptr, "FeBandBendLimit_t", "flDistMax", true, value);
}

std::vector<uint16_t> GFeBandBendLimit_t::GetNode() const {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeBandBendLimit_t", "nNode"); std::vector<uint16_t> ret; for(int i = 0; i < 6; i++) { ret.push_back(outValue[i]); } return ret;
}

void GFeBandBendLimit_t::SetNode(std::vector<uint16_t> value) {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeBandBendLimit_t", "nNode"); for(int i = 0; i < 6; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "FeBandBendLimit_t", "nNode", true, outValue);
}

std::string GFeBandBendLimit_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeBandBendLimit_t::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimFoot::GCAnimFoot(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimFoot::GCAnimFoot(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCAnimFoot::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CAnimFoot", "m_name");
}

void GCAnimFoot::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "CAnimFoot", "m_name", false, value);
}

Vector GCAnimFoot::GetBallOffset() const {
    return GetSchemaValue<Vector>(m_ptr, "CAnimFoot", "m_vBallOffset");
}

void GCAnimFoot::SetBallOffset(Vector value) {
    SetSchemaValue(m_ptr, "CAnimFoot", "m_vBallOffset", false, value);
}

Vector GCAnimFoot::GetHeelOffset() const {
    return GetSchemaValue<Vector>(m_ptr, "CAnimFoot", "m_vHeelOffset");
}

void GCAnimFoot::SetHeelOffset(Vector value) {
    SetSchemaValue(m_ptr, "CAnimFoot", "m_vHeelOffset", false, value);
}

int32_t GCAnimFoot::GetAnkleBoneIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimFoot", "m_ankleBoneIndex");
}

void GCAnimFoot::SetAnkleBoneIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimFoot", "m_ankleBoneIndex", false, value);
}

int32_t GCAnimFoot::GetToeBoneIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimFoot", "m_toeBoneIndex");
}

void GCAnimFoot::SetToeBoneIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimFoot", "m_toeBoneIndex", false, value);
}

std::string GCAnimFoot::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimFoot::IsValid() {
    return (m_ptr != nullptr);
}

GEventClientAdvanceTick_t::GEventClientAdvanceTick_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEventClientAdvanceTick_t::GEventClientAdvanceTick_t(void *ptr) {
    m_ptr = ptr;
}

std::string GEventClientAdvanceTick_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEventClientAdvanceTick_t::IsValid() {
    return (m_ptr != nullptr);
}

GMaterialOverride_t::GMaterialOverride_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GMaterialOverride_t::GMaterialOverride_t(void *ptr) {
    m_ptr = ptr;
}

uint32_t GMaterialOverride_t::GetSubSceneObject() const {
    return GetSchemaValue<uint32_t>(m_ptr, "MaterialOverride_t", "m_nSubSceneObject");
}

void GMaterialOverride_t::SetSubSceneObject(uint32_t value) {
    SetSchemaValue(m_ptr, "MaterialOverride_t", "m_nSubSceneObject", true, value);
}

uint32_t GMaterialOverride_t::GetDrawCallIndex() const {
    return GetSchemaValue<uint32_t>(m_ptr, "MaterialOverride_t", "m_nDrawCallIndex");
}

void GMaterialOverride_t::SetDrawCallIndex(uint32_t value) {
    SetSchemaValue(m_ptr, "MaterialOverride_t", "m_nDrawCallIndex", true, value);
}

std::string GMaterialOverride_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GMaterialOverride_t::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimDemoCaptureSettings::GCAnimDemoCaptureSettings(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimDemoCaptureSettings::GCAnimDemoCaptureSettings(void *ptr) {
    m_ptr = ptr;
}

Vector2D GCAnimDemoCaptureSettings::GetErrorRangeSplineRotation() const {
    return GetSchemaValue<Vector2D>(m_ptr, "CAnimDemoCaptureSettings", "m_vecErrorRangeSplineRotation");
}

void GCAnimDemoCaptureSettings::SetErrorRangeSplineRotation(Vector2D value) {
    SetSchemaValue(m_ptr, "CAnimDemoCaptureSettings", "m_vecErrorRangeSplineRotation", false, value);
}

Vector2D GCAnimDemoCaptureSettings::GetErrorRangeSplineTranslation() const {
    return GetSchemaValue<Vector2D>(m_ptr, "CAnimDemoCaptureSettings", "m_vecErrorRangeSplineTranslation");
}

void GCAnimDemoCaptureSettings::SetErrorRangeSplineTranslation(Vector2D value) {
    SetSchemaValue(m_ptr, "CAnimDemoCaptureSettings", "m_vecErrorRangeSplineTranslation", false, value);
}

Vector2D GCAnimDemoCaptureSettings::GetErrorRangeSplineScale() const {
    return GetSchemaValue<Vector2D>(m_ptr, "CAnimDemoCaptureSettings", "m_vecErrorRangeSplineScale");
}

void GCAnimDemoCaptureSettings::SetErrorRangeSplineScale(Vector2D value) {
    SetSchemaValue(m_ptr, "CAnimDemoCaptureSettings", "m_vecErrorRangeSplineScale", false, value);
}

float GCAnimDemoCaptureSettings::GetIkRotation_MaxSplineError() const {
    return GetSchemaValue<float>(m_ptr, "CAnimDemoCaptureSettings", "m_flIkRotation_MaxSplineError");
}

void GCAnimDemoCaptureSettings::SetIkRotation_MaxSplineError(float value) {
    SetSchemaValue(m_ptr, "CAnimDemoCaptureSettings", "m_flIkRotation_MaxSplineError", false, value);
}

float GCAnimDemoCaptureSettings::GetIkTranslation_MaxSplineError() const {
    return GetSchemaValue<float>(m_ptr, "CAnimDemoCaptureSettings", "m_flIkTranslation_MaxSplineError");
}

void GCAnimDemoCaptureSettings::SetIkTranslation_MaxSplineError(float value) {
    SetSchemaValue(m_ptr, "CAnimDemoCaptureSettings", "m_flIkTranslation_MaxSplineError", false, value);
}

Vector2D GCAnimDemoCaptureSettings::GetErrorRangeQuantizationRotation() const {
    return GetSchemaValue<Vector2D>(m_ptr, "CAnimDemoCaptureSettings", "m_vecErrorRangeQuantizationRotation");
}

void GCAnimDemoCaptureSettings::SetErrorRangeQuantizationRotation(Vector2D value) {
    SetSchemaValue(m_ptr, "CAnimDemoCaptureSettings", "m_vecErrorRangeQuantizationRotation", false, value);
}

Vector2D GCAnimDemoCaptureSettings::GetErrorRangeQuantizationTranslation() const {
    return GetSchemaValue<Vector2D>(m_ptr, "CAnimDemoCaptureSettings", "m_vecErrorRangeQuantizationTranslation");
}

void GCAnimDemoCaptureSettings::SetErrorRangeQuantizationTranslation(Vector2D value) {
    SetSchemaValue(m_ptr, "CAnimDemoCaptureSettings", "m_vecErrorRangeQuantizationTranslation", false, value);
}

Vector2D GCAnimDemoCaptureSettings::GetErrorRangeQuantizationScale() const {
    return GetSchemaValue<Vector2D>(m_ptr, "CAnimDemoCaptureSettings", "m_vecErrorRangeQuantizationScale");
}

void GCAnimDemoCaptureSettings::SetErrorRangeQuantizationScale(Vector2D value) {
    SetSchemaValue(m_ptr, "CAnimDemoCaptureSettings", "m_vecErrorRangeQuantizationScale", false, value);
}

float GCAnimDemoCaptureSettings::GetIkRotation_MaxQuantizationError() const {
    return GetSchemaValue<float>(m_ptr, "CAnimDemoCaptureSettings", "m_flIkRotation_MaxQuantizationError");
}

void GCAnimDemoCaptureSettings::SetIkRotation_MaxQuantizationError(float value) {
    SetSchemaValue(m_ptr, "CAnimDemoCaptureSettings", "m_flIkRotation_MaxQuantizationError", false, value);
}

float GCAnimDemoCaptureSettings::GetIkTranslation_MaxQuantizationError() const {
    return GetSchemaValue<float>(m_ptr, "CAnimDemoCaptureSettings", "m_flIkTranslation_MaxQuantizationError");
}

void GCAnimDemoCaptureSettings::SetIkTranslation_MaxQuantizationError(float value) {
    SetSchemaValue(m_ptr, "CAnimDemoCaptureSettings", "m_flIkTranslation_MaxQuantizationError", false, value);
}

CUtlString GCAnimDemoCaptureSettings::GetBaseSequence() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CAnimDemoCaptureSettings", "m_baseSequence");
}

void GCAnimDemoCaptureSettings::SetBaseSequence(CUtlString value) {
    SetSchemaValue(m_ptr, "CAnimDemoCaptureSettings", "m_baseSequence", false, value);
}

int32_t GCAnimDemoCaptureSettings::GetBaseSequenceFrame() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimDemoCaptureSettings", "m_nBaseSequenceFrame");
}

void GCAnimDemoCaptureSettings::SetBaseSequenceFrame(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimDemoCaptureSettings", "m_nBaseSequenceFrame", false, value);
}

EDemoBoneSelectionMode GCAnimDemoCaptureSettings::GetBoneSelectionMode() const {
    return GetSchemaValue<EDemoBoneSelectionMode>(m_ptr, "CAnimDemoCaptureSettings", "m_boneSelectionMode");
}

void GCAnimDemoCaptureSettings::SetBoneSelectionMode(EDemoBoneSelectionMode value) {
    SetSchemaValue(m_ptr, "CAnimDemoCaptureSettings", "m_boneSelectionMode", false, value);
}

std::vector<GBoneDemoCaptureSettings_t> GCAnimDemoCaptureSettings::GetBones() const {
    CUtlVector<GBoneDemoCaptureSettings_t>* vec = GetSchemaValue<CUtlVector<GBoneDemoCaptureSettings_t>*>(m_ptr, "CAnimDemoCaptureSettings", "m_bones"); std::vector<GBoneDemoCaptureSettings_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimDemoCaptureSettings::SetBones(std::vector<GBoneDemoCaptureSettings_t> value) {
    SetSchemaValueCUtlVector<GBoneDemoCaptureSettings_t>(m_ptr, "CAnimDemoCaptureSettings", "m_bones", false, value);
}

std::vector<GIKDemoCaptureSettings_t> GCAnimDemoCaptureSettings::GetIkChains() const {
    CUtlVector<GIKDemoCaptureSettings_t>* vec = GetSchemaValue<CUtlVector<GIKDemoCaptureSettings_t>*>(m_ptr, "CAnimDemoCaptureSettings", "m_ikChains"); std::vector<GIKDemoCaptureSettings_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimDemoCaptureSettings::SetIkChains(std::vector<GIKDemoCaptureSettings_t> value) {
    SetSchemaValueCUtlVector<GIKDemoCaptureSettings_t>(m_ptr, "CAnimDemoCaptureSettings", "m_ikChains", false, value);
}

std::string GCAnimDemoCaptureSettings::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimDemoCaptureSettings::IsValid() {
    return (m_ptr != nullptr);
}

GCNmIDEvent::GCNmIDEvent(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmIDEvent::GCNmIDEvent(void *ptr) {
    m_ptr = ptr;
}

std::string GCNmIDEvent::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmIDEvent::IsValid() {
    return (m_ptr != nullptr);
}

GCPathMetricEvaluator::GCPathMetricEvaluator(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPathMetricEvaluator::GCPathMetricEvaluator(void *ptr) {
    m_ptr = ptr;
}

std::vector<float32> GCPathMetricEvaluator::GetPathTimeSamples() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "CPathMetricEvaluator", "m_pathTimeSamples"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCPathMetricEvaluator::SetPathTimeSamples(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "CPathMetricEvaluator", "m_pathTimeSamples", false, value);
}

float GCPathMetricEvaluator::GetDistance() const {
    return GetSchemaValue<float>(m_ptr, "CPathMetricEvaluator", "m_flDistance");
}

void GCPathMetricEvaluator::SetDistance(float value) {
    SetSchemaValue(m_ptr, "CPathMetricEvaluator", "m_flDistance", false, value);
}

bool GCPathMetricEvaluator::GetExtrapolateMovement() const {
    return GetSchemaValue<bool>(m_ptr, "CPathMetricEvaluator", "m_bExtrapolateMovement");
}

void GCPathMetricEvaluator::SetExtrapolateMovement(bool value) {
    SetSchemaValue(m_ptr, "CPathMetricEvaluator", "m_bExtrapolateMovement", false, value);
}

float GCPathMetricEvaluator::GetMinExtrapolationSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CPathMetricEvaluator", "m_flMinExtrapolationSpeed");
}

void GCPathMetricEvaluator::SetMinExtrapolationSpeed(float value) {
    SetSchemaValue(m_ptr, "CPathMetricEvaluator", "m_flMinExtrapolationSpeed", false, value);
}

std::string GCPathMetricEvaluator::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPathMetricEvaluator::IsValid() {
    return (m_ptr != nullptr);
}

GMaterialParam_t::GMaterialParam_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GMaterialParam_t::GMaterialParam_t(void *ptr) {
    m_ptr = ptr;
}

CUtlString GMaterialParam_t::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "MaterialParam_t", "m_name");
}

void GMaterialParam_t::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "MaterialParam_t", "m_name", true, value);
}

std::string GMaterialParam_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GMaterialParam_t::IsValid() {
    return (m_ptr != nullptr);
}

GCSpeedScaleUpdateNode::GCSpeedScaleUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSpeedScaleUpdateNode::GCSpeedScaleUpdateNode(void *ptr) {
    m_ptr = ptr;
}

GCAnimParamHandle GCSpeedScaleUpdateNode::GetParamIndex() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CSpeedScaleUpdateNode", "m_paramIndex");
}

void GCSpeedScaleUpdateNode::SetParamIndex(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CSpeedScaleUpdateNode", "m_paramIndex", false, value);
}

std::string GCSpeedScaleUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSpeedScaleUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GVMixEQ8Desc_t::GVMixEQ8Desc_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVMixEQ8Desc_t::GVMixEQ8Desc_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<GVMixFilterDesc_t> GVMixEQ8Desc_t::GetStages() const {
    GVMixFilterDesc_t* outValue = GetSchemaValue<GVMixFilterDesc_t*>(m_ptr, "VMixEQ8Desc_t", "m_stages"); std::vector<GVMixFilterDesc_t> ret; for(int i = 0; i < 8; i++) { ret.push_back(outValue[i]); } return ret;
}

void GVMixEQ8Desc_t::SetStages(std::vector<GVMixFilterDesc_t> value) {
    GVMixFilterDesc_t* outValue = GetSchemaValue<GVMixFilterDesc_t*>(m_ptr, "VMixEQ8Desc_t", "m_stages"); for(int i = 0; i < 8; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "VMixEQ8Desc_t", "m_stages", true, outValue);
}

std::string GVMixEQ8Desc_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVMixEQ8Desc_t::IsValid() {
    return (m_ptr != nullptr);
}

GCModelConfigElement_SetMaterialGroupOnAttachedModels::GCModelConfigElement_SetMaterialGroupOnAttachedModels(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCModelConfigElement_SetMaterialGroupOnAttachedModels::GCModelConfigElement_SetMaterialGroupOnAttachedModels(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCModelConfigElement_SetMaterialGroupOnAttachedModels::GetMaterialGroupName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CModelConfigElement_SetMaterialGroupOnAttachedModels", "m_MaterialGroupName");
}

void GCModelConfigElement_SetMaterialGroupOnAttachedModels::SetMaterialGroupName(CUtlString value) {
    SetSchemaValue(m_ptr, "CModelConfigElement_SetMaterialGroupOnAttachedModels", "m_MaterialGroupName", false, value);
}

std::string GCModelConfigElement_SetMaterialGroupOnAttachedModels::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCModelConfigElement_SetMaterialGroupOnAttachedModels::IsValid() {
    return (m_ptr != nullptr);
}

GTwoBoneIKSettings_t::GTwoBoneIKSettings_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GTwoBoneIKSettings_t::GTwoBoneIKSettings_t(void *ptr) {
    m_ptr = ptr;
}

IkEndEffectorType GTwoBoneIKSettings_t::GetEndEffectorType() const {
    return GetSchemaValue<IkEndEffectorType>(m_ptr, "TwoBoneIKSettings_t", "m_endEffectorType");
}

void GTwoBoneIKSettings_t::SetEndEffectorType(IkEndEffectorType value) {
    SetSchemaValue(m_ptr, "TwoBoneIKSettings_t", "m_endEffectorType", true, value);
}

GCAnimAttachment GTwoBoneIKSettings_t::GetEndEffectorAttachment() const {
    return GetSchemaValue<GCAnimAttachment>(m_ptr, "TwoBoneIKSettings_t", "m_endEffectorAttachment");
}

void GTwoBoneIKSettings_t::SetEndEffectorAttachment(GCAnimAttachment value) {
    SetSchemaValue(m_ptr, "TwoBoneIKSettings_t", "m_endEffectorAttachment", true, value);
}

IkTargetType GTwoBoneIKSettings_t::GetTargetType() const {
    return GetSchemaValue<IkTargetType>(m_ptr, "TwoBoneIKSettings_t", "m_targetType");
}

void GTwoBoneIKSettings_t::SetTargetType(IkTargetType value) {
    SetSchemaValue(m_ptr, "TwoBoneIKSettings_t", "m_targetType", true, value);
}

GCAnimAttachment GTwoBoneIKSettings_t::GetTargetAttachment() const {
    return GetSchemaValue<GCAnimAttachment>(m_ptr, "TwoBoneIKSettings_t", "m_targetAttachment");
}

void GTwoBoneIKSettings_t::SetTargetAttachment(GCAnimAttachment value) {
    SetSchemaValue(m_ptr, "TwoBoneIKSettings_t", "m_targetAttachment", true, value);
}

int32_t GTwoBoneIKSettings_t::GetTargetBoneIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "TwoBoneIKSettings_t", "m_targetBoneIndex");
}

void GTwoBoneIKSettings_t::SetTargetBoneIndex(int32_t value) {
    SetSchemaValue(m_ptr, "TwoBoneIKSettings_t", "m_targetBoneIndex", true, value);
}

GCAnimParamHandle GTwoBoneIKSettings_t::GetPositionParam() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "TwoBoneIKSettings_t", "m_hPositionParam");
}

void GTwoBoneIKSettings_t::SetPositionParam(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "TwoBoneIKSettings_t", "m_hPositionParam", true, value);
}

GCAnimParamHandle GTwoBoneIKSettings_t::GetRotationParam() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "TwoBoneIKSettings_t", "m_hRotationParam");
}

void GTwoBoneIKSettings_t::SetRotationParam(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "TwoBoneIKSettings_t", "m_hRotationParam", true, value);
}

bool GTwoBoneIKSettings_t::GetAlwaysUseFallbackHinge() const {
    return GetSchemaValue<bool>(m_ptr, "TwoBoneIKSettings_t", "m_bAlwaysUseFallbackHinge");
}

void GTwoBoneIKSettings_t::SetAlwaysUseFallbackHinge(bool value) {
    SetSchemaValue(m_ptr, "TwoBoneIKSettings_t", "m_bAlwaysUseFallbackHinge", true, value);
}

Vector GTwoBoneIKSettings_t::GetLsFallbackHingeAxis() const {
    return GetSchemaValue<Vector>(m_ptr, "TwoBoneIKSettings_t", "m_vLsFallbackHingeAxis");
}

void GTwoBoneIKSettings_t::SetLsFallbackHingeAxis(Vector value) {
    SetSchemaValue(m_ptr, "TwoBoneIKSettings_t", "m_vLsFallbackHingeAxis", true, value);
}

int32_t GTwoBoneIKSettings_t::GetFixedBoneIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "TwoBoneIKSettings_t", "m_nFixedBoneIndex");
}

void GTwoBoneIKSettings_t::SetFixedBoneIndex(int32_t value) {
    SetSchemaValue(m_ptr, "TwoBoneIKSettings_t", "m_nFixedBoneIndex", true, value);
}

int32_t GTwoBoneIKSettings_t::GetMiddleBoneIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "TwoBoneIKSettings_t", "m_nMiddleBoneIndex");
}

void GTwoBoneIKSettings_t::SetMiddleBoneIndex(int32_t value) {
    SetSchemaValue(m_ptr, "TwoBoneIKSettings_t", "m_nMiddleBoneIndex", true, value);
}

int32_t GTwoBoneIKSettings_t::GetEndBoneIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "TwoBoneIKSettings_t", "m_nEndBoneIndex");
}

void GTwoBoneIKSettings_t::SetEndBoneIndex(int32_t value) {
    SetSchemaValue(m_ptr, "TwoBoneIKSettings_t", "m_nEndBoneIndex", true, value);
}

bool GTwoBoneIKSettings_t::GetMatchTargetOrientation() const {
    return GetSchemaValue<bool>(m_ptr, "TwoBoneIKSettings_t", "m_bMatchTargetOrientation");
}

void GTwoBoneIKSettings_t::SetMatchTargetOrientation(bool value) {
    SetSchemaValue(m_ptr, "TwoBoneIKSettings_t", "m_bMatchTargetOrientation", true, value);
}

bool GTwoBoneIKSettings_t::GetConstrainTwist() const {
    return GetSchemaValue<bool>(m_ptr, "TwoBoneIKSettings_t", "m_bConstrainTwist");
}

void GTwoBoneIKSettings_t::SetConstrainTwist(bool value) {
    SetSchemaValue(m_ptr, "TwoBoneIKSettings_t", "m_bConstrainTwist", true, value);
}

float GTwoBoneIKSettings_t::GetMaxTwist() const {
    return GetSchemaValue<float>(m_ptr, "TwoBoneIKSettings_t", "m_flMaxTwist");
}

void GTwoBoneIKSettings_t::SetMaxTwist(float value) {
    SetSchemaValue(m_ptr, "TwoBoneIKSettings_t", "m_flMaxTwist", true, value);
}

std::string GTwoBoneIKSettings_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GTwoBoneIKSettings_t::IsValid() {
    return (m_ptr != nullptr);
}

GCompositeMaterialInputContainer_t::GCompositeMaterialInputContainer_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCompositeMaterialInputContainer_t::GCompositeMaterialInputContainer_t(void *ptr) {
    m_ptr = ptr;
}

bool GCompositeMaterialInputContainer_t::GetEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CompositeMaterialInputContainer_t", "m_bEnabled");
}

void GCompositeMaterialInputContainer_t::SetEnabled(bool value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputContainer_t", "m_bEnabled", true, value);
}

CompositeMaterialInputContainerSourceType_t GCompositeMaterialInputContainer_t::GetCompositeMaterialInputContainerSourceType() const {
    return GetSchemaValue<CompositeMaterialInputContainerSourceType_t>(m_ptr, "CompositeMaterialInputContainer_t", "m_nCompositeMaterialInputContainerSourceType");
}

void GCompositeMaterialInputContainer_t::SetCompositeMaterialInputContainerSourceType(CompositeMaterialInputContainerSourceType_t value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputContainer_t", "m_nCompositeMaterialInputContainerSourceType", true, value);
}

CUtlString GCompositeMaterialInputContainer_t::GetStrAttrName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CompositeMaterialInputContainer_t", "m_strAttrName");
}

void GCompositeMaterialInputContainer_t::SetStrAttrName(CUtlString value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputContainer_t", "m_strAttrName", true, value);
}

CUtlString GCompositeMaterialInputContainer_t::GetStrAlias() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CompositeMaterialInputContainer_t", "m_strAlias");
}

void GCompositeMaterialInputContainer_t::SetStrAlias(CUtlString value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputContainer_t", "m_strAlias", true, value);
}

std::vector<GCompositeMaterialInputLooseVariable_t> GCompositeMaterialInputContainer_t::GetLooseVariables() const {
    CUtlVector<GCompositeMaterialInputLooseVariable_t>* vec = GetSchemaValue<CUtlVector<GCompositeMaterialInputLooseVariable_t>*>(m_ptr, "CompositeMaterialInputContainer_t", "m_vecLooseVariables"); std::vector<GCompositeMaterialInputLooseVariable_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCompositeMaterialInputContainer_t::SetLooseVariables(std::vector<GCompositeMaterialInputLooseVariable_t> value) {
    SetSchemaValueCUtlVector<GCompositeMaterialInputLooseVariable_t>(m_ptr, "CompositeMaterialInputContainer_t", "m_vecLooseVariables", true, value);
}

CUtlString GCompositeMaterialInputContainer_t::GetStrAttrNameForVar() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CompositeMaterialInputContainer_t", "m_strAttrNameForVar");
}

void GCompositeMaterialInputContainer_t::SetStrAttrNameForVar(CUtlString value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputContainer_t", "m_strAttrNameForVar", true, value);
}

bool GCompositeMaterialInputContainer_t::GetExposeExternally() const {
    return GetSchemaValue<bool>(m_ptr, "CompositeMaterialInputContainer_t", "m_bExposeExternally");
}

void GCompositeMaterialInputContainer_t::SetExposeExternally(bool value) {
    SetSchemaValue(m_ptr, "CompositeMaterialInputContainer_t", "m_bExposeExternally", true, value);
}

std::string GCompositeMaterialInputContainer_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCompositeMaterialInputContainer_t::IsValid() {
    return (m_ptr != nullptr);
}

GCStateNodeStateData::GCStateNodeStateData(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCStateNodeStateData::GCStateNodeStateData(void *ptr) {
    m_ptr = ptr;
}

GCAnimUpdateNodeRef GCStateNodeStateData::GetChild() const {
    return GetSchemaValue<GCAnimUpdateNodeRef>(m_ptr, "CStateNodeStateData", "m_pChild");
}

void GCStateNodeStateData::SetChild(GCAnimUpdateNodeRef value) {
    SetSchemaValue(m_ptr, "CStateNodeStateData", "m_pChild", false, value);
}

std::string GCStateNodeStateData::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCStateNodeStateData::IsValid() {
    return (m_ptr != nullptr);
}

GFeTwistConstraint_t::GFeTwistConstraint_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeTwistConstraint_t::GFeTwistConstraint_t(void *ptr) {
    m_ptr = ptr;
}

uint16_t GFeTwistConstraint_t::GetNodeOrient() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeTwistConstraint_t", "nNodeOrient");
}

void GFeTwistConstraint_t::SetNodeOrient(uint16_t value) {
    SetSchemaValue(m_ptr, "FeTwistConstraint_t", "nNodeOrient", true, value);
}

uint16_t GFeTwistConstraint_t::GetNodeEnd() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeTwistConstraint_t", "nNodeEnd");
}

void GFeTwistConstraint_t::SetNodeEnd(uint16_t value) {
    SetSchemaValue(m_ptr, "FeTwistConstraint_t", "nNodeEnd", true, value);
}

float GFeTwistConstraint_t::GetTwistRelax() const {
    return GetSchemaValue<float>(m_ptr, "FeTwistConstraint_t", "flTwistRelax");
}

void GFeTwistConstraint_t::SetTwistRelax(float value) {
    SetSchemaValue(m_ptr, "FeTwistConstraint_t", "flTwistRelax", true, value);
}

float GFeTwistConstraint_t::GetSwingRelax() const {
    return GetSchemaValue<float>(m_ptr, "FeTwistConstraint_t", "flSwingRelax");
}

void GFeTwistConstraint_t::SetSwingRelax(float value) {
    SetSchemaValue(m_ptr, "FeTwistConstraint_t", "flSwingRelax", true, value);
}

std::string GFeTwistConstraint_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeTwistConstraint_t::IsValid() {
    return (m_ptr != nullptr);
}

GFootFixedData_t::GFootFixedData_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFootFixedData_t::GFootFixedData_t(void *ptr) {
    m_ptr = ptr;
}

Vector GFootFixedData_t::GetToeOffset() const {
    return GetSchemaValue<Vector>(m_ptr, "FootFixedData_t", "m_vToeOffset");
}

void GFootFixedData_t::SetToeOffset(Vector value) {
    SetSchemaValue(m_ptr, "FootFixedData_t", "m_vToeOffset", true, value);
}

Vector GFootFixedData_t::GetHeelOffset() const {
    return GetSchemaValue<Vector>(m_ptr, "FootFixedData_t", "m_vHeelOffset");
}

void GFootFixedData_t::SetHeelOffset(Vector value) {
    SetSchemaValue(m_ptr, "FootFixedData_t", "m_vHeelOffset", true, value);
}

int32_t GFootFixedData_t::GetTargetBoneIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "FootFixedData_t", "m_nTargetBoneIndex");
}

void GFootFixedData_t::SetTargetBoneIndex(int32_t value) {
    SetSchemaValue(m_ptr, "FootFixedData_t", "m_nTargetBoneIndex", true, value);
}

int32_t GFootFixedData_t::GetAnkleBoneIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "FootFixedData_t", "m_nAnkleBoneIndex");
}

void GFootFixedData_t::SetAnkleBoneIndex(int32_t value) {
    SetSchemaValue(m_ptr, "FootFixedData_t", "m_nAnkleBoneIndex", true, value);
}

int32_t GFootFixedData_t::GetIKAnchorBoneIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "FootFixedData_t", "m_nIKAnchorBoneIndex");
}

void GFootFixedData_t::SetIKAnchorBoneIndex(int32_t value) {
    SetSchemaValue(m_ptr, "FootFixedData_t", "m_nIKAnchorBoneIndex", true, value);
}

int32_t GFootFixedData_t::GetIkChainIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "FootFixedData_t", "m_ikChainIndex");
}

void GFootFixedData_t::SetIkChainIndex(int32_t value) {
    SetSchemaValue(m_ptr, "FootFixedData_t", "m_ikChainIndex", true, value);
}

float GFootFixedData_t::GetMaxIKLength() const {
    return GetSchemaValue<float>(m_ptr, "FootFixedData_t", "m_flMaxIKLength");
}

void GFootFixedData_t::SetMaxIKLength(float value) {
    SetSchemaValue(m_ptr, "FootFixedData_t", "m_flMaxIKLength", true, value);
}

int32_t GFootFixedData_t::GetFootIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "FootFixedData_t", "m_nFootIndex");
}

void GFootFixedData_t::SetFootIndex(int32_t value) {
    SetSchemaValue(m_ptr, "FootFixedData_t", "m_nFootIndex", true, value);
}

int32_t GFootFixedData_t::GetTagIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "FootFixedData_t", "m_nTagIndex");
}

void GFootFixedData_t::SetTagIndex(int32_t value) {
    SetSchemaValue(m_ptr, "FootFixedData_t", "m_nTagIndex", true, value);
}

float GFootFixedData_t::GetMaxRotationLeft() const {
    return GetSchemaValue<float>(m_ptr, "FootFixedData_t", "m_flMaxRotationLeft");
}

void GFootFixedData_t::SetMaxRotationLeft(float value) {
    SetSchemaValue(m_ptr, "FootFixedData_t", "m_flMaxRotationLeft", true, value);
}

float GFootFixedData_t::GetMaxRotationRight() const {
    return GetSchemaValue<float>(m_ptr, "FootFixedData_t", "m_flMaxRotationRight");
}

void GFootFixedData_t::SetMaxRotationRight(float value) {
    SetSchemaValue(m_ptr, "FootFixedData_t", "m_flMaxRotationRight", true, value);
}

std::string GFootFixedData_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFootFixedData_t::IsValid() {
    return (m_ptr != nullptr);
}

GVMixDiffusorDesc_t::GVMixDiffusorDesc_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVMixDiffusorDesc_t::GVMixDiffusorDesc_t(void *ptr) {
    m_ptr = ptr;
}

float GVMixDiffusorDesc_t::GetSize() const {
    return GetSchemaValue<float>(m_ptr, "VMixDiffusorDesc_t", "m_flSize");
}

void GVMixDiffusorDesc_t::SetSize(float value) {
    SetSchemaValue(m_ptr, "VMixDiffusorDesc_t", "m_flSize", true, value);
}

float GVMixDiffusorDesc_t::GetComplexity() const {
    return GetSchemaValue<float>(m_ptr, "VMixDiffusorDesc_t", "m_flComplexity");
}

void GVMixDiffusorDesc_t::SetComplexity(float value) {
    SetSchemaValue(m_ptr, "VMixDiffusorDesc_t", "m_flComplexity", true, value);
}

float GVMixDiffusorDesc_t::GetFeedback() const {
    return GetSchemaValue<float>(m_ptr, "VMixDiffusorDesc_t", "m_flFeedback");
}

void GVMixDiffusorDesc_t::SetFeedback(float value) {
    SetSchemaValue(m_ptr, "VMixDiffusorDesc_t", "m_flFeedback", true, value);
}

float GVMixDiffusorDesc_t::GetOutputGain() const {
    return GetSchemaValue<float>(m_ptr, "VMixDiffusorDesc_t", "m_flOutputGain");
}

void GVMixDiffusorDesc_t::SetOutputGain(float value) {
    SetSchemaValue(m_ptr, "VMixDiffusorDesc_t", "m_flOutputGain", true, value);
}

std::string GVMixDiffusorDesc_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVMixDiffusorDesc_t::IsValid() {
    return (m_ptr != nullptr);
}

GFeProxyVertexMap_t::GFeProxyVertexMap_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeProxyVertexMap_t::GFeProxyVertexMap_t(void *ptr) {
    m_ptr = ptr;
}

CUtlString GFeProxyVertexMap_t::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "FeProxyVertexMap_t", "m_Name");
}

void GFeProxyVertexMap_t::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "FeProxyVertexMap_t", "m_Name", true, value);
}

float GFeProxyVertexMap_t::GetWeight() const {
    return GetSchemaValue<float>(m_ptr, "FeProxyVertexMap_t", "m_flWeight");
}

void GFeProxyVertexMap_t::SetWeight(float value) {
    SetSchemaValue(m_ptr, "FeProxyVertexMap_t", "m_flWeight", true, value);
}

std::string GFeProxyVertexMap_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeProxyVertexMap_t::IsValid() {
    return (m_ptr != nullptr);
}

GCDirectPlaybackUpdateNode::GCDirectPlaybackUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCDirectPlaybackUpdateNode::GCDirectPlaybackUpdateNode(void *ptr) {
    m_ptr = ptr;
}

bool GCDirectPlaybackUpdateNode::GetFinishEarly() const {
    return GetSchemaValue<bool>(m_ptr, "CDirectPlaybackUpdateNode", "m_bFinishEarly");
}

void GCDirectPlaybackUpdateNode::SetFinishEarly(bool value) {
    SetSchemaValue(m_ptr, "CDirectPlaybackUpdateNode", "m_bFinishEarly", false, value);
}

bool GCDirectPlaybackUpdateNode::GetResetOnFinish() const {
    return GetSchemaValue<bool>(m_ptr, "CDirectPlaybackUpdateNode", "m_bResetOnFinish");
}

void GCDirectPlaybackUpdateNode::SetResetOnFinish(bool value) {
    SetSchemaValue(m_ptr, "CDirectPlaybackUpdateNode", "m_bResetOnFinish", false, value);
}

std::vector<GCDirectPlaybackTagData> GCDirectPlaybackUpdateNode::GetAllTags() const {
    CUtlVector<GCDirectPlaybackTagData>* vec = GetSchemaValue<CUtlVector<GCDirectPlaybackTagData>*>(m_ptr, "CDirectPlaybackUpdateNode", "m_allTags"); std::vector<GCDirectPlaybackTagData> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCDirectPlaybackUpdateNode::SetAllTags(std::vector<GCDirectPlaybackTagData> value) {
    SetSchemaValueCUtlVector<GCDirectPlaybackTagData>(m_ptr, "CDirectPlaybackUpdateNode", "m_allTags", false, value);
}

std::string GCDirectPlaybackUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCDirectPlaybackUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GPostProcessingLocalContrastParameters_t::GPostProcessingLocalContrastParameters_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GPostProcessingLocalContrastParameters_t::GPostProcessingLocalContrastParameters_t(void *ptr) {
    m_ptr = ptr;
}

float GPostProcessingLocalContrastParameters_t::GetLocalContrastStrength() const {
    return GetSchemaValue<float>(m_ptr, "PostProcessingLocalContrastParameters_t", "m_flLocalContrastStrength");
}

void GPostProcessingLocalContrastParameters_t::SetLocalContrastStrength(float value) {
    SetSchemaValue(m_ptr, "PostProcessingLocalContrastParameters_t", "m_flLocalContrastStrength", true, value);
}

float GPostProcessingLocalContrastParameters_t::GetLocalContrastEdgeStrength() const {
    return GetSchemaValue<float>(m_ptr, "PostProcessingLocalContrastParameters_t", "m_flLocalContrastEdgeStrength");
}

void GPostProcessingLocalContrastParameters_t::SetLocalContrastEdgeStrength(float value) {
    SetSchemaValue(m_ptr, "PostProcessingLocalContrastParameters_t", "m_flLocalContrastEdgeStrength", true, value);
}

float GPostProcessingLocalContrastParameters_t::GetLocalContrastVignetteStart() const {
    return GetSchemaValue<float>(m_ptr, "PostProcessingLocalContrastParameters_t", "m_flLocalContrastVignetteStart");
}

void GPostProcessingLocalContrastParameters_t::SetLocalContrastVignetteStart(float value) {
    SetSchemaValue(m_ptr, "PostProcessingLocalContrastParameters_t", "m_flLocalContrastVignetteStart", true, value);
}

float GPostProcessingLocalContrastParameters_t::GetLocalContrastVignetteEnd() const {
    return GetSchemaValue<float>(m_ptr, "PostProcessingLocalContrastParameters_t", "m_flLocalContrastVignetteEnd");
}

void GPostProcessingLocalContrastParameters_t::SetLocalContrastVignetteEnd(float value) {
    SetSchemaValue(m_ptr, "PostProcessingLocalContrastParameters_t", "m_flLocalContrastVignetteEnd", true, value);
}

float GPostProcessingLocalContrastParameters_t::GetLocalContrastVignetteBlur() const {
    return GetSchemaValue<float>(m_ptr, "PostProcessingLocalContrastParameters_t", "m_flLocalContrastVignetteBlur");
}

void GPostProcessingLocalContrastParameters_t::SetLocalContrastVignetteBlur(float value) {
    SetSchemaValue(m_ptr, "PostProcessingLocalContrastParameters_t", "m_flLocalContrastVignetteBlur", true, value);
}

std::string GPostProcessingLocalContrastParameters_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GPostProcessingLocalContrastParameters_t::IsValid() {
    return (m_ptr != nullptr);
}

GCFootLockUpdateNode::GCFootLockUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFootLockUpdateNode::GCFootLockUpdateNode(void *ptr) {
    m_ptr = ptr;
}

GFootLockPoseOpFixedSettings GCFootLockUpdateNode::GetOpFixedSettings() const {
    return GetSchemaValue<GFootLockPoseOpFixedSettings>(m_ptr, "CFootLockUpdateNode", "m_opFixedSettings");
}

void GCFootLockUpdateNode::SetOpFixedSettings(GFootLockPoseOpFixedSettings value) {
    SetSchemaValue(m_ptr, "CFootLockUpdateNode", "m_opFixedSettings", false, value);
}

std::vector<GFootFixedSettings> GCFootLockUpdateNode::GetFootSettings() const {
    CUtlVector<GFootFixedSettings>* vec = GetSchemaValue<CUtlVector<GFootFixedSettings>*>(m_ptr, "CFootLockUpdateNode", "m_footSettings"); std::vector<GFootFixedSettings> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCFootLockUpdateNode::SetFootSettings(std::vector<GFootFixedSettings> value) {
    SetSchemaValueCUtlVector<GFootFixedSettings>(m_ptr, "CFootLockUpdateNode", "m_footSettings", false, value);
}

GCAnimInputDamping GCFootLockUpdateNode::GetHipShiftDamping() const {
    return GetSchemaValue<GCAnimInputDamping>(m_ptr, "CFootLockUpdateNode", "m_hipShiftDamping");
}

void GCFootLockUpdateNode::SetHipShiftDamping(GCAnimInputDamping value) {
    SetSchemaValue(m_ptr, "CFootLockUpdateNode", "m_hipShiftDamping", false, value);
}

GCAnimInputDamping GCFootLockUpdateNode::GetRootHeightDamping() const {
    return GetSchemaValue<GCAnimInputDamping>(m_ptr, "CFootLockUpdateNode", "m_rootHeightDamping");
}

void GCFootLockUpdateNode::SetRootHeightDamping(GCAnimInputDamping value) {
    SetSchemaValue(m_ptr, "CFootLockUpdateNode", "m_rootHeightDamping", false, value);
}

float GCFootLockUpdateNode::GetStrideCurveScale() const {
    return GetSchemaValue<float>(m_ptr, "CFootLockUpdateNode", "m_flStrideCurveScale");
}

void GCFootLockUpdateNode::SetStrideCurveScale(float value) {
    SetSchemaValue(m_ptr, "CFootLockUpdateNode", "m_flStrideCurveScale", false, value);
}

float GCFootLockUpdateNode::GetStrideCurveLimitScale() const {
    return GetSchemaValue<float>(m_ptr, "CFootLockUpdateNode", "m_flStrideCurveLimitScale");
}

void GCFootLockUpdateNode::SetStrideCurveLimitScale(float value) {
    SetSchemaValue(m_ptr, "CFootLockUpdateNode", "m_flStrideCurveLimitScale", false, value);
}

float GCFootLockUpdateNode::GetStepHeightIncreaseScale() const {
    return GetSchemaValue<float>(m_ptr, "CFootLockUpdateNode", "m_flStepHeightIncreaseScale");
}

void GCFootLockUpdateNode::SetStepHeightIncreaseScale(float value) {
    SetSchemaValue(m_ptr, "CFootLockUpdateNode", "m_flStepHeightIncreaseScale", false, value);
}

float GCFootLockUpdateNode::GetStepHeightDecreaseScale() const {
    return GetSchemaValue<float>(m_ptr, "CFootLockUpdateNode", "m_flStepHeightDecreaseScale");
}

void GCFootLockUpdateNode::SetStepHeightDecreaseScale(float value) {
    SetSchemaValue(m_ptr, "CFootLockUpdateNode", "m_flStepHeightDecreaseScale", false, value);
}

float GCFootLockUpdateNode::GetHipShiftScale() const {
    return GetSchemaValue<float>(m_ptr, "CFootLockUpdateNode", "m_flHipShiftScale");
}

void GCFootLockUpdateNode::SetHipShiftScale(float value) {
    SetSchemaValue(m_ptr, "CFootLockUpdateNode", "m_flHipShiftScale", false, value);
}

float GCFootLockUpdateNode::GetBlendTime() const {
    return GetSchemaValue<float>(m_ptr, "CFootLockUpdateNode", "m_flBlendTime");
}

void GCFootLockUpdateNode::SetBlendTime(float value) {
    SetSchemaValue(m_ptr, "CFootLockUpdateNode", "m_flBlendTime", false, value);
}

float GCFootLockUpdateNode::GetMaxRootHeightOffset() const {
    return GetSchemaValue<float>(m_ptr, "CFootLockUpdateNode", "m_flMaxRootHeightOffset");
}

void GCFootLockUpdateNode::SetMaxRootHeightOffset(float value) {
    SetSchemaValue(m_ptr, "CFootLockUpdateNode", "m_flMaxRootHeightOffset", false, value);
}

float GCFootLockUpdateNode::GetMinRootHeightOffset() const {
    return GetSchemaValue<float>(m_ptr, "CFootLockUpdateNode", "m_flMinRootHeightOffset");
}

void GCFootLockUpdateNode::SetMinRootHeightOffset(float value) {
    SetSchemaValue(m_ptr, "CFootLockUpdateNode", "m_flMinRootHeightOffset", false, value);
}

float GCFootLockUpdateNode::GetTiltPlanePitchSpringStrength() const {
    return GetSchemaValue<float>(m_ptr, "CFootLockUpdateNode", "m_flTiltPlanePitchSpringStrength");
}

void GCFootLockUpdateNode::SetTiltPlanePitchSpringStrength(float value) {
    SetSchemaValue(m_ptr, "CFootLockUpdateNode", "m_flTiltPlanePitchSpringStrength", false, value);
}

float GCFootLockUpdateNode::GetTiltPlaneRollSpringStrength() const {
    return GetSchemaValue<float>(m_ptr, "CFootLockUpdateNode", "m_flTiltPlaneRollSpringStrength");
}

void GCFootLockUpdateNode::SetTiltPlaneRollSpringStrength(float value) {
    SetSchemaValue(m_ptr, "CFootLockUpdateNode", "m_flTiltPlaneRollSpringStrength", false, value);
}

bool GCFootLockUpdateNode::GetApplyFootRotationLimits() const {
    return GetSchemaValue<bool>(m_ptr, "CFootLockUpdateNode", "m_bApplyFootRotationLimits");
}

void GCFootLockUpdateNode::SetApplyFootRotationLimits(bool value) {
    SetSchemaValue(m_ptr, "CFootLockUpdateNode", "m_bApplyFootRotationLimits", false, value);
}

bool GCFootLockUpdateNode::GetApplyHipShift() const {
    return GetSchemaValue<bool>(m_ptr, "CFootLockUpdateNode", "m_bApplyHipShift");
}

void GCFootLockUpdateNode::SetApplyHipShift(bool value) {
    SetSchemaValue(m_ptr, "CFootLockUpdateNode", "m_bApplyHipShift", false, value);
}

bool GCFootLockUpdateNode::GetModulateStepHeight() const {
    return GetSchemaValue<bool>(m_ptr, "CFootLockUpdateNode", "m_bModulateStepHeight");
}

void GCFootLockUpdateNode::SetModulateStepHeight(bool value) {
    SetSchemaValue(m_ptr, "CFootLockUpdateNode", "m_bModulateStepHeight", false, value);
}

bool GCFootLockUpdateNode::GetResetChild() const {
    return GetSchemaValue<bool>(m_ptr, "CFootLockUpdateNode", "m_bResetChild");
}

void GCFootLockUpdateNode::SetResetChild(bool value) {
    SetSchemaValue(m_ptr, "CFootLockUpdateNode", "m_bResetChild", false, value);
}

bool GCFootLockUpdateNode::GetEnableVerticalCurvedPaths() const {
    return GetSchemaValue<bool>(m_ptr, "CFootLockUpdateNode", "m_bEnableVerticalCurvedPaths");
}

void GCFootLockUpdateNode::SetEnableVerticalCurvedPaths(bool value) {
    SetSchemaValue(m_ptr, "CFootLockUpdateNode", "m_bEnableVerticalCurvedPaths", false, value);
}

bool GCFootLockUpdateNode::GetEnableRootHeightDamping() const {
    return GetSchemaValue<bool>(m_ptr, "CFootLockUpdateNode", "m_bEnableRootHeightDamping");
}

void GCFootLockUpdateNode::SetEnableRootHeightDamping(bool value) {
    SetSchemaValue(m_ptr, "CFootLockUpdateNode", "m_bEnableRootHeightDamping", false, value);
}

std::string GCFootLockUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFootLockUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GCParentConstraint::GCParentConstraint(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCParentConstraint::GCParentConstraint(void *ptr) {
    m_ptr = ptr;
}

std::string GCParentConstraint::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCParentConstraint::IsValid() {
    return (m_ptr != nullptr);
}

GSkeletonAnimCapture_t__Frame_t::GSkeletonAnimCapture_t__Frame_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GSkeletonAnimCapture_t__Frame_t::GSkeletonAnimCapture_t__Frame_t(void *ptr) {
    m_ptr = ptr;
}

float GSkeletonAnimCapture_t__Frame_t::GetTime() const {
    return GetSchemaValue<float>(m_ptr, "SkeletonAnimCapture_t__Frame_t", "m_flTime");
}

void GSkeletonAnimCapture_t__Frame_t::SetTime(float value) {
    SetSchemaValue(m_ptr, "SkeletonAnimCapture_t__Frame_t", "m_flTime", true, value);
}

GSkeletonAnimCapture_t GSkeletonAnimCapture_t__Frame_t::GetStamp() const {
    return GetSchemaValue<GSkeletonAnimCapture_t>(m_ptr, "SkeletonAnimCapture_t__Frame_t", "m_Stamp");
}

void GSkeletonAnimCapture_t__Frame_t::SetStamp(GSkeletonAnimCapture_t value) {
    SetSchemaValue(m_ptr, "SkeletonAnimCapture_t__Frame_t", "m_Stamp", true, value);
}

bool GSkeletonAnimCapture_t__Frame_t::GetTeleport() const {
    return GetSchemaValue<bool>(m_ptr, "SkeletonAnimCapture_t__Frame_t", "m_bTeleport");
}

void GSkeletonAnimCapture_t__Frame_t::SetTeleport(bool value) {
    SetSchemaValue(m_ptr, "SkeletonAnimCapture_t__Frame_t", "m_bTeleport", true, value);
}

std::vector<Vector> GSkeletonAnimCapture_t__Frame_t::GetFeModelPos() const {
    CUtlVector<Vector>* vec = GetSchemaValue<CUtlVector<Vector>*>(m_ptr, "SkeletonAnimCapture_t__Frame_t", "m_FeModelPos"); std::vector<Vector> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GSkeletonAnimCapture_t__Frame_t::SetFeModelPos(std::vector<Vector> value) {
    SetSchemaValueCUtlVector<Vector>(m_ptr, "SkeletonAnimCapture_t__Frame_t", "m_FeModelPos", true, value);
}

std::vector<float32> GSkeletonAnimCapture_t__Frame_t::GetFlexControllerWeights() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "SkeletonAnimCapture_t__Frame_t", "m_FlexControllerWeights"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GSkeletonAnimCapture_t__Frame_t::SetFlexControllerWeights(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "SkeletonAnimCapture_t__Frame_t", "m_FlexControllerWeights", true, value);
}

std::string GSkeletonAnimCapture_t__Frame_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GSkeletonAnimCapture_t__Frame_t::IsValid() {
    return (m_ptr != nullptr);
}

GCPathParameters::GCPathParameters(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPathParameters::GCPathParameters(void *ptr) {
    m_ptr = ptr;
}

int32_t GCPathParameters::GetStartControlPointNumber() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPathParameters", "m_nStartControlPointNumber");
}

void GCPathParameters::SetStartControlPointNumber(int32_t value) {
    SetSchemaValue(m_ptr, "CPathParameters", "m_nStartControlPointNumber", false, value);
}

int32_t GCPathParameters::GetEndControlPointNumber() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPathParameters", "m_nEndControlPointNumber");
}

void GCPathParameters::SetEndControlPointNumber(int32_t value) {
    SetSchemaValue(m_ptr, "CPathParameters", "m_nEndControlPointNumber", false, value);
}

int32_t GCPathParameters::GetBulgeControl() const {
    return GetSchemaValue<int32_t>(m_ptr, "CPathParameters", "m_nBulgeControl");
}

void GCPathParameters::SetBulgeControl(int32_t value) {
    SetSchemaValue(m_ptr, "CPathParameters", "m_nBulgeControl", false, value);
}

float GCPathParameters::GetBulge() const {
    return GetSchemaValue<float>(m_ptr, "CPathParameters", "m_flBulge");
}

void GCPathParameters::SetBulge(float value) {
    SetSchemaValue(m_ptr, "CPathParameters", "m_flBulge", false, value);
}

float GCPathParameters::GetMidPoint() const {
    return GetSchemaValue<float>(m_ptr, "CPathParameters", "m_flMidPoint");
}

void GCPathParameters::SetMidPoint(float value) {
    SetSchemaValue(m_ptr, "CPathParameters", "m_flMidPoint", false, value);
}

Vector GCPathParameters::GetStartPointOffset() const {
    return GetSchemaValue<Vector>(m_ptr, "CPathParameters", "m_vStartPointOffset");
}

void GCPathParameters::SetStartPointOffset(Vector value) {
    SetSchemaValue(m_ptr, "CPathParameters", "m_vStartPointOffset", false, value);
}

Vector GCPathParameters::GetMidPointOffset() const {
    return GetSchemaValue<Vector>(m_ptr, "CPathParameters", "m_vMidPointOffset");
}

void GCPathParameters::SetMidPointOffset(Vector value) {
    SetSchemaValue(m_ptr, "CPathParameters", "m_vMidPointOffset", false, value);
}

Vector GCPathParameters::GetEndOffset() const {
    return GetSchemaValue<Vector>(m_ptr, "CPathParameters", "m_vEndOffset");
}

void GCPathParameters::SetEndOffset(Vector value) {
    SetSchemaValue(m_ptr, "CPathParameters", "m_vEndOffset", false, value);
}

std::string GCPathParameters::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPathParameters::IsValid() {
    return (m_ptr != nullptr);
}

GCSlowDownOnSlopesUpdateNode::GCSlowDownOnSlopesUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSlowDownOnSlopesUpdateNode::GCSlowDownOnSlopesUpdateNode(void *ptr) {
    m_ptr = ptr;
}

float GCSlowDownOnSlopesUpdateNode::GetSlowDownStrength() const {
    return GetSchemaValue<float>(m_ptr, "CSlowDownOnSlopesUpdateNode", "m_flSlowDownStrength");
}

void GCSlowDownOnSlopesUpdateNode::SetSlowDownStrength(float value) {
    SetSchemaValue(m_ptr, "CSlowDownOnSlopesUpdateNode", "m_flSlowDownStrength", false, value);
}

std::string GCSlowDownOnSlopesUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSlowDownOnSlopesUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GCAttachment::GCAttachment(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAttachment::GCAttachment(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCAttachment::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CAttachment", "m_name");
}

void GCAttachment::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "CAttachment", "m_name", false, value);
}

std::vector<CUtlString> GCAttachment::GetInfluenceNames() const {
    CUtlString* outValue = GetSchemaValue<CUtlString*>(m_ptr, "CAttachment", "m_influenceNames"); std::vector<CUtlString> ret; for(int i = 0; i < 3; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCAttachment::SetInfluenceNames(std::vector<CUtlString> value) {
    CUtlString* outValue = GetSchemaValue<CUtlString*>(m_ptr, "CAttachment", "m_influenceNames"); for(int i = 0; i < 3; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CAttachment", "m_influenceNames", false, outValue);
}

std::vector<Quaternion> GCAttachment::GetInfluenceRotations() const {
    Quaternion* outValue = GetSchemaValue<Quaternion*>(m_ptr, "CAttachment", "m_vInfluenceRotations"); std::vector<Quaternion> ret; for(int i = 0; i < 3; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCAttachment::SetInfluenceRotations(std::vector<Quaternion> value) {
    Quaternion* outValue = GetSchemaValue<Quaternion*>(m_ptr, "CAttachment", "m_vInfluenceRotations"); for(int i = 0; i < 3; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CAttachment", "m_vInfluenceRotations", false, outValue);
}

std::vector<Vector> GCAttachment::GetInfluenceOffsets() const {
    Vector* outValue = GetSchemaValue<Vector*>(m_ptr, "CAttachment", "m_vInfluenceOffsets"); std::vector<Vector> ret; for(int i = 0; i < 3; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCAttachment::SetInfluenceOffsets(std::vector<Vector> value) {
    Vector* outValue = GetSchemaValue<Vector*>(m_ptr, "CAttachment", "m_vInfluenceOffsets"); for(int i = 0; i < 3; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CAttachment", "m_vInfluenceOffsets", false, outValue);
}

std::vector<float> GCAttachment::GetInfluenceWeights() const {
    float* outValue = GetSchemaValue<float*>(m_ptr, "CAttachment", "m_influenceWeights"); std::vector<float> ret; for(int i = 0; i < 3; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCAttachment::SetInfluenceWeights(std::vector<float> value) {
    float* outValue = GetSchemaValue<float*>(m_ptr, "CAttachment", "m_influenceWeights"); for(int i = 0; i < 3; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CAttachment", "m_influenceWeights", false, outValue);
}

std::vector<bool> GCAttachment::GetInfluenceRootTransform() const {
    bool* outValue = GetSchemaValue<bool*>(m_ptr, "CAttachment", "m_bInfluenceRootTransform"); std::vector<bool> ret; for(int i = 0; i < 3; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCAttachment::SetInfluenceRootTransform(std::vector<bool> value) {
    bool* outValue = GetSchemaValue<bool*>(m_ptr, "CAttachment", "m_bInfluenceRootTransform"); for(int i = 0; i < 3; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CAttachment", "m_bInfluenceRootTransform", false, outValue);
}

uint8_t GCAttachment::GetInfluences() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CAttachment", "m_nInfluences");
}

void GCAttachment::SetInfluences(uint8_t value) {
    SetSchemaValue(m_ptr, "CAttachment", "m_nInfluences", false, value);
}

bool GCAttachment::GetIgnoreRotation() const {
    return GetSchemaValue<bool>(m_ptr, "CAttachment", "m_bIgnoreRotation");
}

void GCAttachment::SetIgnoreRotation(bool value) {
    SetSchemaValue(m_ptr, "CAttachment", "m_bIgnoreRotation", false, value);
}

std::string GCAttachment::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAttachment::IsValid() {
    return (m_ptr != nullptr);
}

GCEmptyEntityInstance::GCEmptyEntityInstance(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEmptyEntityInstance::GCEmptyEntityInstance(void *ptr) {
    m_ptr = ptr;
}

std::string GCEmptyEntityInstance::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEmptyEntityInstance::IsValid() {
    return (m_ptr != nullptr);
}

GCCompositeMaterialEditorDoc::GCCompositeMaterialEditorDoc(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCompositeMaterialEditorDoc::GCCompositeMaterialEditorDoc(void *ptr) {
    m_ptr = ptr;
}

int32_t GCCompositeMaterialEditorDoc::GetVersion() const {
    return GetSchemaValue<int32_t>(m_ptr, "CCompositeMaterialEditorDoc", "m_nVersion");
}

void GCCompositeMaterialEditorDoc::SetVersion(int32_t value) {
    SetSchemaValue(m_ptr, "CCompositeMaterialEditorDoc", "m_nVersion", false, value);
}

std::vector<GCompositeMaterialEditorPoint_t> GCCompositeMaterialEditorDoc::GetPoints() const {
    CUtlVector<GCompositeMaterialEditorPoint_t>* vec = GetSchemaValue<CUtlVector<GCompositeMaterialEditorPoint_t>*>(m_ptr, "CCompositeMaterialEditorDoc", "m_Points"); std::vector<GCompositeMaterialEditorPoint_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCCompositeMaterialEditorDoc::SetPoints(std::vector<GCompositeMaterialEditorPoint_t> value) {
    SetSchemaValueCUtlVector<GCompositeMaterialEditorPoint_t>(m_ptr, "CCompositeMaterialEditorDoc", "m_Points", false, value);
}

std::string GCCompositeMaterialEditorDoc::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCompositeMaterialEditorDoc::IsValid() {
    return (m_ptr != nullptr);
}

GCPhysSurfacePropertiesPhysics::GCPhysSurfacePropertiesPhysics(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPhysSurfacePropertiesPhysics::GCPhysSurfacePropertiesPhysics(void *ptr) {
    m_ptr = ptr;
}

float GCPhysSurfacePropertiesPhysics::GetFriction() const {
    return GetSchemaValue<float>(m_ptr, "CPhysSurfacePropertiesPhysics", "m_friction");
}

void GCPhysSurfacePropertiesPhysics::SetFriction(float value) {
    SetSchemaValue(m_ptr, "CPhysSurfacePropertiesPhysics", "m_friction", false, value);
}

float GCPhysSurfacePropertiesPhysics::GetElasticity() const {
    return GetSchemaValue<float>(m_ptr, "CPhysSurfacePropertiesPhysics", "m_elasticity");
}

void GCPhysSurfacePropertiesPhysics::SetElasticity(float value) {
    SetSchemaValue(m_ptr, "CPhysSurfacePropertiesPhysics", "m_elasticity", false, value);
}

float GCPhysSurfacePropertiesPhysics::GetDensity() const {
    return GetSchemaValue<float>(m_ptr, "CPhysSurfacePropertiesPhysics", "m_density");
}

void GCPhysSurfacePropertiesPhysics::SetDensity(float value) {
    SetSchemaValue(m_ptr, "CPhysSurfacePropertiesPhysics", "m_density", false, value);
}

float GCPhysSurfacePropertiesPhysics::GetThickness() const {
    return GetSchemaValue<float>(m_ptr, "CPhysSurfacePropertiesPhysics", "m_thickness");
}

void GCPhysSurfacePropertiesPhysics::SetThickness(float value) {
    SetSchemaValue(m_ptr, "CPhysSurfacePropertiesPhysics", "m_thickness", false, value);
}

float GCPhysSurfacePropertiesPhysics::GetSoftContactFrequency() const {
    return GetSchemaValue<float>(m_ptr, "CPhysSurfacePropertiesPhysics", "m_softContactFrequency");
}

void GCPhysSurfacePropertiesPhysics::SetSoftContactFrequency(float value) {
    SetSchemaValue(m_ptr, "CPhysSurfacePropertiesPhysics", "m_softContactFrequency", false, value);
}

float GCPhysSurfacePropertiesPhysics::GetSoftContactDampingRatio() const {
    return GetSchemaValue<float>(m_ptr, "CPhysSurfacePropertiesPhysics", "m_softContactDampingRatio");
}

void GCPhysSurfacePropertiesPhysics::SetSoftContactDampingRatio(float value) {
    SetSchemaValue(m_ptr, "CPhysSurfacePropertiesPhysics", "m_softContactDampingRatio", false, value);
}

float GCPhysSurfacePropertiesPhysics::GetWheelDrag() const {
    return GetSchemaValue<float>(m_ptr, "CPhysSurfacePropertiesPhysics", "m_wheelDrag");
}

void GCPhysSurfacePropertiesPhysics::SetWheelDrag(float value) {
    SetSchemaValue(m_ptr, "CPhysSurfacePropertiesPhysics", "m_wheelDrag", false, value);
}

std::string GCPhysSurfacePropertiesPhysics::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPhysSurfacePropertiesPhysics::IsValid() {
    return (m_ptr != nullptr);
}

GEventClientPostOutput_t::GEventClientPostOutput_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEventClientPostOutput_t::GEventClientPostOutput_t(void *ptr) {
    m_ptr = ptr;
}

GEngineLoopState_t GEventClientPostOutput_t::GetLoopState() const {
    return GetSchemaValue<GEngineLoopState_t>(m_ptr, "EventClientPostOutput_t", "m_LoopState");
}

void GEventClientPostOutput_t::SetLoopState(GEngineLoopState_t value) {
    SetSchemaValue(m_ptr, "EventClientPostOutput_t", "m_LoopState", true, value);
}

double GEventClientPostOutput_t::GetRenderTime() const {
    return GetSchemaValue<double>(m_ptr, "EventClientPostOutput_t", "m_flRenderTime");
}

void GEventClientPostOutput_t::SetRenderTime(double value) {
    SetSchemaValue(m_ptr, "EventClientPostOutput_t", "m_flRenderTime", true, value);
}

float GEventClientPostOutput_t::GetRenderFrameTime() const {
    return GetSchemaValue<float>(m_ptr, "EventClientPostOutput_t", "m_flRenderFrameTime");
}

void GEventClientPostOutput_t::SetRenderFrameTime(float value) {
    SetSchemaValue(m_ptr, "EventClientPostOutput_t", "m_flRenderFrameTime", true, value);
}

float GEventClientPostOutput_t::GetRenderFrameTimeUnbounded() const {
    return GetSchemaValue<float>(m_ptr, "EventClientPostOutput_t", "m_flRenderFrameTimeUnbounded");
}

void GEventClientPostOutput_t::SetRenderFrameTimeUnbounded(float value) {
    SetSchemaValue(m_ptr, "EventClientPostOutput_t", "m_flRenderFrameTimeUnbounded", true, value);
}

bool GEventClientPostOutput_t::GetRenderOnly() const {
    return GetSchemaValue<bool>(m_ptr, "EventClientPostOutput_t", "m_bRenderOnly");
}

void GEventClientPostOutput_t::SetRenderOnly(bool value) {
    SetSchemaValue(m_ptr, "EventClientPostOutput_t", "m_bRenderOnly", true, value);
}

std::string GEventClientPostOutput_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEventClientPostOutput_t::IsValid() {
    return (m_ptr != nullptr);
}

GFeNodeIntegrator_t::GFeNodeIntegrator_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeNodeIntegrator_t::GFeNodeIntegrator_t(void *ptr) {
    m_ptr = ptr;
}

float GFeNodeIntegrator_t::GetPointDamping() const {
    return GetSchemaValue<float>(m_ptr, "FeNodeIntegrator_t", "flPointDamping");
}

void GFeNodeIntegrator_t::SetPointDamping(float value) {
    SetSchemaValue(m_ptr, "FeNodeIntegrator_t", "flPointDamping", true, value);
}

float GFeNodeIntegrator_t::GetAnimationForceAttraction() const {
    return GetSchemaValue<float>(m_ptr, "FeNodeIntegrator_t", "flAnimationForceAttraction");
}

void GFeNodeIntegrator_t::SetAnimationForceAttraction(float value) {
    SetSchemaValue(m_ptr, "FeNodeIntegrator_t", "flAnimationForceAttraction", true, value);
}

float GFeNodeIntegrator_t::GetAnimationVertexAttraction() const {
    return GetSchemaValue<float>(m_ptr, "FeNodeIntegrator_t", "flAnimationVertexAttraction");
}

void GFeNodeIntegrator_t::SetAnimationVertexAttraction(float value) {
    SetSchemaValue(m_ptr, "FeNodeIntegrator_t", "flAnimationVertexAttraction", true, value);
}

float GFeNodeIntegrator_t::GetGravity() const {
    return GetSchemaValue<float>(m_ptr, "FeNodeIntegrator_t", "flGravity");
}

void GFeNodeIntegrator_t::SetGravity(float value) {
    SetSchemaValue(m_ptr, "FeNodeIntegrator_t", "flGravity", true, value);
}

std::string GFeNodeIntegrator_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeNodeIntegrator_t::IsValid() {
    return (m_ptr != nullptr);
}

GRnMeshDesc_t::GRnMeshDesc_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GRnMeshDesc_t::GRnMeshDesc_t(void *ptr) {
    m_ptr = ptr;
}

GRnMesh_t GRnMeshDesc_t::GetMesh() const {
    return GetSchemaValue<GRnMesh_t>(m_ptr, "RnMeshDesc_t", "m_Mesh");
}

void GRnMeshDesc_t::SetMesh(GRnMesh_t value) {
    SetSchemaValue(m_ptr, "RnMeshDesc_t", "m_Mesh", true, value);
}

std::string GRnMeshDesc_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GRnMeshDesc_t::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimGraphNetworkSettings::GCAnimGraphNetworkSettings(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimGraphNetworkSettings::GCAnimGraphNetworkSettings(void *ptr) {
    m_ptr = ptr;
}

bool GCAnimGraphNetworkSettings::GetNetworkingEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CAnimGraphNetworkSettings", "m_bNetworkingEnabled");
}

void GCAnimGraphNetworkSettings::SetNetworkingEnabled(bool value) {
    SetSchemaValue(m_ptr, "CAnimGraphNetworkSettings", "m_bNetworkingEnabled", false, value);
}

std::string GCAnimGraphNetworkSettings::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimGraphNetworkSettings::IsValid() {
    return (m_ptr != nullptr);
}

GCAimConstraint::GCAimConstraint(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAimConstraint::GCAimConstraint(void *ptr) {
    m_ptr = ptr;
}

Quaternion GCAimConstraint::GetAimOffset() const {
    return GetSchemaValue<Quaternion>(m_ptr, "CAimConstraint", "m_qAimOffset");
}

void GCAimConstraint::SetAimOffset(Quaternion value) {
    SetSchemaValue(m_ptr, "CAimConstraint", "m_qAimOffset", false, value);
}

uint32_t GCAimConstraint::GetUpType() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CAimConstraint", "m_nUpType");
}

void GCAimConstraint::SetUpType(uint32_t value) {
    SetSchemaValue(m_ptr, "CAimConstraint", "m_nUpType", false, value);
}

std::string GCAimConstraint::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAimConstraint::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimActionUpdater::GCAnimActionUpdater(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimActionUpdater::GCAnimActionUpdater(void *ptr) {
    m_ptr = ptr;
}

std::string GCAnimActionUpdater::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimActionUpdater::IsValid() {
    return (m_ptr != nullptr);
}

GCParticleFunctionForce::GCParticleFunctionForce(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCParticleFunctionForce::GCParticleFunctionForce(void *ptr) {
    m_ptr = ptr;
}

std::string GCParticleFunctionForce::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCParticleFunctionForce::IsValid() {
    return (m_ptr != nullptr);
}

GCSpinUpdateBase::GCSpinUpdateBase(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSpinUpdateBase::GCSpinUpdateBase(void *ptr) {
    m_ptr = ptr;
}

std::string GCSpinUpdateBase::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSpinUpdateBase::IsValid() {
    return (m_ptr != nullptr);
}

GControlPointReference_t::GControlPointReference_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GControlPointReference_t::GControlPointReference_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GControlPointReference_t::GetControlPointNameString() const {
    return GetSchemaValue<int32_t>(m_ptr, "ControlPointReference_t", "m_controlPointNameString");
}

void GControlPointReference_t::SetControlPointNameString(int32_t value) {
    SetSchemaValue(m_ptr, "ControlPointReference_t", "m_controlPointNameString", true, value);
}

Vector GControlPointReference_t::GetOffsetFromControlPoint() const {
    return GetSchemaValue<Vector>(m_ptr, "ControlPointReference_t", "m_vOffsetFromControlPoint");
}

void GControlPointReference_t::SetOffsetFromControlPoint(Vector value) {
    SetSchemaValue(m_ptr, "ControlPointReference_t", "m_vOffsetFromControlPoint", true, value);
}

bool GControlPointReference_t::GetOffsetInLocalSpace() const {
    return GetSchemaValue<bool>(m_ptr, "ControlPointReference_t", "m_bOffsetInLocalSpace");
}

void GControlPointReference_t::SetOffsetInLocalSpace(bool value) {
    SetSchemaValue(m_ptr, "ControlPointReference_t", "m_bOffsetInLocalSpace", true, value);
}

std::string GControlPointReference_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GControlPointReference_t::IsValid() {
    return (m_ptr != nullptr);
}

GCVoiceContainerRandomSampler::GCVoiceContainerRandomSampler(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCVoiceContainerRandomSampler::GCVoiceContainerRandomSampler(void *ptr) {
    m_ptr = ptr;
}

float GCVoiceContainerRandomSampler::GetAmplitude() const {
    return GetSchemaValue<float>(m_ptr, "CVoiceContainerRandomSampler", "m_flAmplitude");
}

void GCVoiceContainerRandomSampler::SetAmplitude(float value) {
    SetSchemaValue(m_ptr, "CVoiceContainerRandomSampler", "m_flAmplitude", false, value);
}

float GCVoiceContainerRandomSampler::GetAmplitudeJitter() const {
    return GetSchemaValue<float>(m_ptr, "CVoiceContainerRandomSampler", "m_flAmplitudeJitter");
}

void GCVoiceContainerRandomSampler::SetAmplitudeJitter(float value) {
    SetSchemaValue(m_ptr, "CVoiceContainerRandomSampler", "m_flAmplitudeJitter", false, value);
}

float GCVoiceContainerRandomSampler::GetTimeJitter() const {
    return GetSchemaValue<float>(m_ptr, "CVoiceContainerRandomSampler", "m_flTimeJitter");
}

void GCVoiceContainerRandomSampler::SetTimeJitter(float value) {
    SetSchemaValue(m_ptr, "CVoiceContainerRandomSampler", "m_flTimeJitter", false, value);
}

float GCVoiceContainerRandomSampler::GetMaxLength() const {
    return GetSchemaValue<float>(m_ptr, "CVoiceContainerRandomSampler", "m_flMaxLength");
}

void GCVoiceContainerRandomSampler::SetMaxLength(float value) {
    SetSchemaValue(m_ptr, "CVoiceContainerRandomSampler", "m_flMaxLength", false, value);
}

int32_t GCVoiceContainerRandomSampler::GetNumDelayVariations() const {
    return GetSchemaValue<int32_t>(m_ptr, "CVoiceContainerRandomSampler", "m_nNumDelayVariations");
}

void GCVoiceContainerRandomSampler::SetNumDelayVariations(int32_t value) {
    SetSchemaValue(m_ptr, "CVoiceContainerRandomSampler", "m_nNumDelayVariations", false, value);
}

std::string GCVoiceContainerRandomSampler::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCVoiceContainerRandomSampler::IsValid() {
    return (m_ptr != nullptr);
}

GFeFollowNode_t::GFeFollowNode_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeFollowNode_t::GFeFollowNode_t(void *ptr) {
    m_ptr = ptr;
}

uint16_t GFeFollowNode_t::GetParentNode() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeFollowNode_t", "nParentNode");
}

void GFeFollowNode_t::SetParentNode(uint16_t value) {
    SetSchemaValue(m_ptr, "FeFollowNode_t", "nParentNode", true, value);
}

uint16_t GFeFollowNode_t::GetChildNode() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeFollowNode_t", "nChildNode");
}

void GFeFollowNode_t::SetChildNode(uint16_t value) {
    SetSchemaValue(m_ptr, "FeFollowNode_t", "nChildNode", true, value);
}

float GFeFollowNode_t::GetWeight() const {
    return GetSchemaValue<float>(m_ptr, "FeFollowNode_t", "flWeight");
}

void GFeFollowNode_t::SetWeight(float value) {
    SetSchemaValue(m_ptr, "FeFollowNode_t", "flWeight", true, value);
}

std::string GFeFollowNode_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeFollowNode_t::IsValid() {
    return (m_ptr != nullptr);
}

GCovMatrix3::GCovMatrix3(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCovMatrix3::GCovMatrix3(void *ptr) {
    m_ptr = ptr;
}

Vector GCovMatrix3::GetDiag() const {
    return GetSchemaValue<Vector>(m_ptr, "CovMatrix3", "m_vDiag");
}

void GCovMatrix3::SetDiag(Vector value) {
    SetSchemaValue(m_ptr, "CovMatrix3", "m_vDiag", false, value);
}

float GCovMatrix3::GetXY() const {
    return GetSchemaValue<float>(m_ptr, "CovMatrix3", "m_flXY");
}

void GCovMatrix3::SetXY(float value) {
    SetSchemaValue(m_ptr, "CovMatrix3", "m_flXY", false, value);
}

float GCovMatrix3::GetXZ() const {
    return GetSchemaValue<float>(m_ptr, "CovMatrix3", "m_flXZ");
}

void GCovMatrix3::SetXZ(float value) {
    SetSchemaValue(m_ptr, "CovMatrix3", "m_flXZ", false, value);
}

float GCovMatrix3::GetYZ() const {
    return GetSchemaValue<float>(m_ptr, "CovMatrix3", "m_flYZ");
}

void GCovMatrix3::SetYZ(float value) {
    SetSchemaValue(m_ptr, "CovMatrix3", "m_flYZ", false, value);
}

std::string GCovMatrix3::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCovMatrix3::IsValid() {
    return (m_ptr != nullptr);
}

GAnimStateID::GAnimStateID(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GAnimStateID::GAnimStateID(void *ptr) {
    m_ptr = ptr;
}

uint32_t GAnimStateID::GetId() const {
    return GetSchemaValue<uint32_t>(m_ptr, "AnimStateID", "m_id");
}

void GAnimStateID::SetId(uint32_t value) {
    SetSchemaValue(m_ptr, "AnimStateID", "m_id", false, value);
}

std::string GAnimStateID::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GAnimStateID::IsValid() {
    return (m_ptr != nullptr);
}

GCVoiceContainerStaticAdditiveSynth::GCVoiceContainerStaticAdditiveSynth(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCVoiceContainerStaticAdditiveSynth::GCVoiceContainerStaticAdditiveSynth(void *ptr) {
    m_ptr = ptr;
}

float GCVoiceContainerStaticAdditiveSynth::GetMinVolume() const {
    return GetSchemaValue<float>(m_ptr, "CVoiceContainerStaticAdditiveSynth", "m_flMinVolume");
}

void GCVoiceContainerStaticAdditiveSynth::SetMinVolume(float value) {
    SetSchemaValue(m_ptr, "CVoiceContainerStaticAdditiveSynth", "m_flMinVolume", false, value);
}

int32_t GCVoiceContainerStaticAdditiveSynth::GetInstancesAtMinVolume() const {
    return GetSchemaValue<int32_t>(m_ptr, "CVoiceContainerStaticAdditiveSynth", "m_nInstancesAtMinVolume");
}

void GCVoiceContainerStaticAdditiveSynth::SetInstancesAtMinVolume(int32_t value) {
    SetSchemaValue(m_ptr, "CVoiceContainerStaticAdditiveSynth", "m_nInstancesAtMinVolume", false, value);
}

float GCVoiceContainerStaticAdditiveSynth::GetMaxVolume() const {
    return GetSchemaValue<float>(m_ptr, "CVoiceContainerStaticAdditiveSynth", "m_flMaxVolume");
}

void GCVoiceContainerStaticAdditiveSynth::SetMaxVolume(float value) {
    SetSchemaValue(m_ptr, "CVoiceContainerStaticAdditiveSynth", "m_flMaxVolume", false, value);
}

int32_t GCVoiceContainerStaticAdditiveSynth::GetInstancesAtMaxVolume() const {
    return GetSchemaValue<int32_t>(m_ptr, "CVoiceContainerStaticAdditiveSynth", "m_nInstancesAtMaxVolume");
}

void GCVoiceContainerStaticAdditiveSynth::SetInstancesAtMaxVolume(int32_t value) {
    SetSchemaValue(m_ptr, "CVoiceContainerStaticAdditiveSynth", "m_nInstancesAtMaxVolume", false, value);
}

std::string GCVoiceContainerStaticAdditiveSynth::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCVoiceContainerStaticAdditiveSynth::IsValid() {
    return (m_ptr != nullptr);
}

GRnSoftbodyCapsule_t::GRnSoftbodyCapsule_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GRnSoftbodyCapsule_t::GRnSoftbodyCapsule_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<Vector> GRnSoftbodyCapsule_t::GetCenter() const {
    Vector* outValue = GetSchemaValue<Vector*>(m_ptr, "RnSoftbodyCapsule_t", "m_vCenter"); std::vector<Vector> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}

void GRnSoftbodyCapsule_t::SetCenter(std::vector<Vector> value) {
    Vector* outValue = GetSchemaValue<Vector*>(m_ptr, "RnSoftbodyCapsule_t", "m_vCenter"); for(int i = 0; i < 2; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "RnSoftbodyCapsule_t", "m_vCenter", true, outValue);
}

float GRnSoftbodyCapsule_t::GetRadius() const {
    return GetSchemaValue<float>(m_ptr, "RnSoftbodyCapsule_t", "m_flRadius");
}

void GRnSoftbodyCapsule_t::SetRadius(float value) {
    SetSchemaValue(m_ptr, "RnSoftbodyCapsule_t", "m_flRadius", true, value);
}

std::vector<uint16_t> GRnSoftbodyCapsule_t::GetParticle() const {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "RnSoftbodyCapsule_t", "m_nParticle"); std::vector<uint16_t> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}

void GRnSoftbodyCapsule_t::SetParticle(std::vector<uint16_t> value) {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "RnSoftbodyCapsule_t", "m_nParticle"); for(int i = 0; i < 2; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "RnSoftbodyCapsule_t", "m_nParticle", true, outValue);
}

std::string GRnSoftbodyCapsule_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GRnSoftbodyCapsule_t::IsValid() {
    return (m_ptr != nullptr);
}

GCModelConfigElement_RandomPick::GCModelConfigElement_RandomPick(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCModelConfigElement_RandomPick::GCModelConfigElement_RandomPick(void *ptr) {
    m_ptr = ptr;
}

std::vector<CUtlString> GCModelConfigElement_RandomPick::GetChoices() const {
    CUtlVector<CUtlString>* vec = GetSchemaValue<CUtlVector<CUtlString>*>(m_ptr, "CModelConfigElement_RandomPick", "m_Choices"); std::vector<CUtlString> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCModelConfigElement_RandomPick::SetChoices(std::vector<CUtlString> value) {
    SetSchemaValueCUtlVector<CUtlString>(m_ptr, "CModelConfigElement_RandomPick", "m_Choices", false, value);
}

std::vector<float32> GCModelConfigElement_RandomPick::GetChoiceWeights() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "CModelConfigElement_RandomPick", "m_ChoiceWeights"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCModelConfigElement_RandomPick::SetChoiceWeights(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "CModelConfigElement_RandomPick", "m_ChoiceWeights", false, value);
}

std::string GCModelConfigElement_RandomPick::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCModelConfigElement_RandomPick::IsValid() {
    return (m_ptr != nullptr);
}

GNmSyncTrackTime_t::GNmSyncTrackTime_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GNmSyncTrackTime_t::GNmSyncTrackTime_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GNmSyncTrackTime_t::GetEventIdx() const {
    return GetSchemaValue<int32_t>(m_ptr, "NmSyncTrackTime_t", "m_nEventIdx");
}

void GNmSyncTrackTime_t::SetEventIdx(int32_t value) {
    SetSchemaValue(m_ptr, "NmSyncTrackTime_t", "m_nEventIdx", true, value);
}

GNmPercent_t GNmSyncTrackTime_t::GetPercentageThrough() const {
    return GetSchemaValue<GNmPercent_t>(m_ptr, "NmSyncTrackTime_t", "m_percentageThrough");
}

void GNmSyncTrackTime_t::SetPercentageThrough(GNmPercent_t value) {
    SetSchemaValue(m_ptr, "NmSyncTrackTime_t", "m_percentageThrough", true, value);
}

std::string GNmSyncTrackTime_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GNmSyncTrackTime_t::IsValid() {
    return (m_ptr != nullptr);
}

GCGeneralRandomRotation::GCGeneralRandomRotation(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCGeneralRandomRotation::GCGeneralRandomRotation(void *ptr) {
    m_ptr = ptr;
}

GParticleAttributeIndex_t GCGeneralRandomRotation::GetFieldOutput() const {
    return GetSchemaValue<GParticleAttributeIndex_t>(m_ptr, "CGeneralRandomRotation", "m_nFieldOutput");
}

void GCGeneralRandomRotation::SetFieldOutput(GParticleAttributeIndex_t value) {
    SetSchemaValue(m_ptr, "CGeneralRandomRotation", "m_nFieldOutput", false, value);
}

float GCGeneralRandomRotation::GetDegrees() const {
    return GetSchemaValue<float>(m_ptr, "CGeneralRandomRotation", "m_flDegrees");
}

void GCGeneralRandomRotation::SetDegrees(float value) {
    SetSchemaValue(m_ptr, "CGeneralRandomRotation", "m_flDegrees", false, value);
}

float GCGeneralRandomRotation::GetDegreesMin() const {
    return GetSchemaValue<float>(m_ptr, "CGeneralRandomRotation", "m_flDegreesMin");
}

void GCGeneralRandomRotation::SetDegreesMin(float value) {
    SetSchemaValue(m_ptr, "CGeneralRandomRotation", "m_flDegreesMin", false, value);
}

float GCGeneralRandomRotation::GetDegreesMax() const {
    return GetSchemaValue<float>(m_ptr, "CGeneralRandomRotation", "m_flDegreesMax");
}

void GCGeneralRandomRotation::SetDegreesMax(float value) {
    SetSchemaValue(m_ptr, "CGeneralRandomRotation", "m_flDegreesMax", false, value);
}

float GCGeneralRandomRotation::GetRotationRandExponent() const {
    return GetSchemaValue<float>(m_ptr, "CGeneralRandomRotation", "m_flRotationRandExponent");
}

void GCGeneralRandomRotation::SetRotationRandExponent(float value) {
    SetSchemaValue(m_ptr, "CGeneralRandomRotation", "m_flRotationRandExponent", false, value);
}

bool GCGeneralRandomRotation::GetRandomlyFlipDirection() const {
    return GetSchemaValue<bool>(m_ptr, "CGeneralRandomRotation", "m_bRandomlyFlipDirection");
}

void GCGeneralRandomRotation::SetRandomlyFlipDirection(bool value) {
    SetSchemaValue(m_ptr, "CGeneralRandomRotation", "m_bRandomlyFlipDirection", false, value);
}

std::string GCGeneralRandomRotation::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCGeneralRandomRotation::IsValid() {
    return (m_ptr != nullptr);
}

GRnPlane_t::GRnPlane_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GRnPlane_t::GRnPlane_t(void *ptr) {
    m_ptr = ptr;
}

Vector GRnPlane_t::GetNormal() const {
    return GetSchemaValue<Vector>(m_ptr, "RnPlane_t", "m_vNormal");
}

void GRnPlane_t::SetNormal(Vector value) {
    SetSchemaValue(m_ptr, "RnPlane_t", "m_vNormal", true, value);
}

float GRnPlane_t::GetOffset() const {
    return GetSchemaValue<float>(m_ptr, "RnPlane_t", "m_flOffset");
}

void GRnPlane_t::SetOffset(float value) {
    SetSchemaValue(m_ptr, "RnPlane_t", "m_flOffset", true, value);
}

std::string GRnPlane_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GRnPlane_t::IsValid() {
    return (m_ptr != nullptr);
}

GFeNodeWindBase_t::GFeNodeWindBase_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeNodeWindBase_t::GFeNodeWindBase_t(void *ptr) {
    m_ptr = ptr;
}

uint16_t GFeNodeWindBase_t::GetNodeX0() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeNodeWindBase_t", "nNodeX0");
}

void GFeNodeWindBase_t::SetNodeX0(uint16_t value) {
    SetSchemaValue(m_ptr, "FeNodeWindBase_t", "nNodeX0", true, value);
}

uint16_t GFeNodeWindBase_t::GetNodeX1() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeNodeWindBase_t", "nNodeX1");
}

void GFeNodeWindBase_t::SetNodeX1(uint16_t value) {
    SetSchemaValue(m_ptr, "FeNodeWindBase_t", "nNodeX1", true, value);
}

uint16_t GFeNodeWindBase_t::GetNodeY0() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeNodeWindBase_t", "nNodeY0");
}

void GFeNodeWindBase_t::SetNodeY0(uint16_t value) {
    SetSchemaValue(m_ptr, "FeNodeWindBase_t", "nNodeY0", true, value);
}

uint16_t GFeNodeWindBase_t::GetNodeY1() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeNodeWindBase_t", "nNodeY1");
}

void GFeNodeWindBase_t::SetNodeY1(uint16_t value) {
    SetSchemaValue(m_ptr, "FeNodeWindBase_t", "nNodeY1", true, value);
}

std::string GFeNodeWindBase_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeNodeWindBase_t::IsValid() {
    return (m_ptr != nullptr);
}

GCQuaternionAnimParameter::GCQuaternionAnimParameter(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCQuaternionAnimParameter::GCQuaternionAnimParameter(void *ptr) {
    m_ptr = ptr;
}

Quaternion GCQuaternionAnimParameter::GetDefaultValue() const {
    return GetSchemaValue<Quaternion>(m_ptr, "CQuaternionAnimParameter", "m_defaultValue");
}

void GCQuaternionAnimParameter::SetDefaultValue(Quaternion value) {
    SetSchemaValue(m_ptr, "CQuaternionAnimParameter", "m_defaultValue", false, value);
}

bool GCQuaternionAnimParameter::GetInterpolate() const {
    return GetSchemaValue<bool>(m_ptr, "CQuaternionAnimParameter", "m_bInterpolate");
}

void GCQuaternionAnimParameter::SetInterpolate(bool value) {
    SetSchemaValue(m_ptr, "CQuaternionAnimParameter", "m_bInterpolate", false, value);
}

std::string GCQuaternionAnimParameter::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCQuaternionAnimParameter::IsValid() {
    return (m_ptr != nullptr);
}

GSkeletonAnimCapture_t__Camera_t::GSkeletonAnimCapture_t__Camera_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GSkeletonAnimCapture_t__Camera_t::GSkeletonAnimCapture_t__Camera_t(void *ptr) {
    m_ptr = ptr;
}

float GSkeletonAnimCapture_t__Camera_t::GetTime() const {
    return GetSchemaValue<float>(m_ptr, "SkeletonAnimCapture_t__Camera_t", "m_flTime");
}

void GSkeletonAnimCapture_t__Camera_t::SetTime(float value) {
    SetSchemaValue(m_ptr, "SkeletonAnimCapture_t__Camera_t", "m_flTime", true, value);
}

std::string GSkeletonAnimCapture_t__Camera_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GSkeletonAnimCapture_t__Camera_t::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimEncodeDifference::GCAnimEncodeDifference(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimEncodeDifference::GCAnimEncodeDifference(void *ptr) {
    m_ptr = ptr;
}

std::vector<GCAnimBoneDifference> GCAnimEncodeDifference::GetBoneArray() const {
    CUtlVector<GCAnimBoneDifference>* vec = GetSchemaValue<CUtlVector<GCAnimBoneDifference>*>(m_ptr, "CAnimEncodeDifference", "m_boneArray"); std::vector<GCAnimBoneDifference> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimEncodeDifference::SetBoneArray(std::vector<GCAnimBoneDifference> value) {
    SetSchemaValueCUtlVector<GCAnimBoneDifference>(m_ptr, "CAnimEncodeDifference", "m_boneArray", false, value);
}

std::vector<GCAnimMorphDifference> GCAnimEncodeDifference::GetMorphArray() const {
    CUtlVector<GCAnimMorphDifference>* vec = GetSchemaValue<CUtlVector<GCAnimMorphDifference>*>(m_ptr, "CAnimEncodeDifference", "m_morphArray"); std::vector<GCAnimMorphDifference> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimEncodeDifference::SetMorphArray(std::vector<GCAnimMorphDifference> value) {
    SetSchemaValueCUtlVector<GCAnimMorphDifference>(m_ptr, "CAnimEncodeDifference", "m_morphArray", false, value);
}

std::vector<GCAnimUserDifference> GCAnimEncodeDifference::GetUserArray() const {
    CUtlVector<GCAnimUserDifference>* vec = GetSchemaValue<CUtlVector<GCAnimUserDifference>*>(m_ptr, "CAnimEncodeDifference", "m_userArray"); std::vector<GCAnimUserDifference> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimEncodeDifference::SetUserArray(std::vector<GCAnimUserDifference> value) {
    SetSchemaValueCUtlVector<GCAnimUserDifference>(m_ptr, "CAnimEncodeDifference", "m_userArray", false, value);
}

std::vector<uint8> GCAnimEncodeDifference::GetHasRotationBitArray() const {
    CUtlVector<uint8>* vec = GetSchemaValue<CUtlVector<uint8>*>(m_ptr, "CAnimEncodeDifference", "m_bHasRotationBitArray"); std::vector<uint8> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimEncodeDifference::SetHasRotationBitArray(std::vector<uint8> value) {
    SetSchemaValueCUtlVector<uint8>(m_ptr, "CAnimEncodeDifference", "m_bHasRotationBitArray", false, value);
}

std::vector<uint8> GCAnimEncodeDifference::GetHasMovementBitArray() const {
    CUtlVector<uint8>* vec = GetSchemaValue<CUtlVector<uint8>*>(m_ptr, "CAnimEncodeDifference", "m_bHasMovementBitArray"); std::vector<uint8> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimEncodeDifference::SetHasMovementBitArray(std::vector<uint8> value) {
    SetSchemaValueCUtlVector<uint8>(m_ptr, "CAnimEncodeDifference", "m_bHasMovementBitArray", false, value);
}

std::vector<uint8> GCAnimEncodeDifference::GetHasMorphBitArray() const {
    CUtlVector<uint8>* vec = GetSchemaValue<CUtlVector<uint8>*>(m_ptr, "CAnimEncodeDifference", "m_bHasMorphBitArray"); std::vector<uint8> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimEncodeDifference::SetHasMorphBitArray(std::vector<uint8> value) {
    SetSchemaValueCUtlVector<uint8>(m_ptr, "CAnimEncodeDifference", "m_bHasMorphBitArray", false, value);
}

std::vector<uint8> GCAnimEncodeDifference::GetHasUserBitArray() const {
    CUtlVector<uint8>* vec = GetSchemaValue<CUtlVector<uint8>*>(m_ptr, "CAnimEncodeDifference", "m_bHasUserBitArray"); std::vector<uint8> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimEncodeDifference::SetHasUserBitArray(std::vector<uint8> value) {
    SetSchemaValueCUtlVector<uint8>(m_ptr, "CAnimEncodeDifference", "m_bHasUserBitArray", false, value);
}

std::string GCAnimEncodeDifference::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimEncodeDifference::IsValid() {
    return (m_ptr != nullptr);
}

GAggregateSceneObject_t::GAggregateSceneObject_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GAggregateSceneObject_t::GAggregateSceneObject_t(void *ptr) {
    m_ptr = ptr;
}

ObjectTypeFlags_t GAggregateSceneObject_t::GetAllFlags() const {
    return GetSchemaValue<ObjectTypeFlags_t>(m_ptr, "AggregateSceneObject_t", "m_allFlags");
}

void GAggregateSceneObject_t::SetAllFlags(ObjectTypeFlags_t value) {
    SetSchemaValue(m_ptr, "AggregateSceneObject_t", "m_allFlags", true, value);
}

ObjectTypeFlags_t GAggregateSceneObject_t::GetAnyFlags() const {
    return GetSchemaValue<ObjectTypeFlags_t>(m_ptr, "AggregateSceneObject_t", "m_anyFlags");
}

void GAggregateSceneObject_t::SetAnyFlags(ObjectTypeFlags_t value) {
    SetSchemaValue(m_ptr, "AggregateSceneObject_t", "m_anyFlags", true, value);
}

int16_t GAggregateSceneObject_t::GetLayer() const {
    return GetSchemaValue<int16_t>(m_ptr, "AggregateSceneObject_t", "m_nLayer");
}

void GAggregateSceneObject_t::SetLayer(int16_t value) {
    SetSchemaValue(m_ptr, "AggregateSceneObject_t", "m_nLayer", true, value);
}

std::vector<GAggregateMeshInfo_t> GAggregateSceneObject_t::GetAggregateMeshes() const {
    CUtlVector<GAggregateMeshInfo_t>* vec = GetSchemaValue<CUtlVector<GAggregateMeshInfo_t>*>(m_ptr, "AggregateSceneObject_t", "m_aggregateMeshes"); std::vector<GAggregateMeshInfo_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GAggregateSceneObject_t::SetAggregateMeshes(std::vector<GAggregateMeshInfo_t> value) {
    SetSchemaValueCUtlVector<GAggregateMeshInfo_t>(m_ptr, "AggregateSceneObject_t", "m_aggregateMeshes", true, value);
}

std::vector<GAggregateLODSetup_t> GAggregateSceneObject_t::GetLodSetups() const {
    CUtlVector<GAggregateLODSetup_t>* vec = GetSchemaValue<CUtlVector<GAggregateLODSetup_t>*>(m_ptr, "AggregateSceneObject_t", "m_lodSetups"); std::vector<GAggregateLODSetup_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GAggregateSceneObject_t::SetLodSetups(std::vector<GAggregateLODSetup_t> value) {
    SetSchemaValueCUtlVector<GAggregateLODSetup_t>(m_ptr, "AggregateSceneObject_t", "m_lodSetups", true, value);
}

std::vector<uint16> GAggregateSceneObject_t::GetVisClusterMembership() const {
    CUtlVector<uint16>* vec = GetSchemaValue<CUtlVector<uint16>*>(m_ptr, "AggregateSceneObject_t", "m_visClusterMembership"); std::vector<uint16> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GAggregateSceneObject_t::SetVisClusterMembership(std::vector<uint16> value) {
    SetSchemaValueCUtlVector<uint16>(m_ptr, "AggregateSceneObject_t", "m_visClusterMembership", true, value);
}

std::vector<matrix3x4_t> GAggregateSceneObject_t::GetFragmentTransforms() const {
    CUtlVector<matrix3x4_t>* vec = GetSchemaValue<CUtlVector<matrix3x4_t>*>(m_ptr, "AggregateSceneObject_t", "m_fragmentTransforms"); std::vector<matrix3x4_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GAggregateSceneObject_t::SetFragmentTransforms(std::vector<matrix3x4_t> value) {
    SetSchemaValueCUtlVector<matrix3x4_t>(m_ptr, "AggregateSceneObject_t", "m_fragmentTransforms", true, value);
}

std::string GAggregateSceneObject_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GAggregateSceneObject_t::IsValid() {
    return (m_ptr != nullptr);
}

GIKDemoCaptureSettings_t::GIKDemoCaptureSettings_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GIKDemoCaptureSettings_t::GIKDemoCaptureSettings_t(void *ptr) {
    m_ptr = ptr;
}

CUtlString GIKDemoCaptureSettings_t::GetParentBoneName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "IKDemoCaptureSettings_t", "m_parentBoneName");
}

void GIKDemoCaptureSettings_t::SetParentBoneName(CUtlString value) {
    SetSchemaValue(m_ptr, "IKDemoCaptureSettings_t", "m_parentBoneName", true, value);
}

IKChannelMode GIKDemoCaptureSettings_t::GetMode() const {
    return GetSchemaValue<IKChannelMode>(m_ptr, "IKDemoCaptureSettings_t", "m_eMode");
}

void GIKDemoCaptureSettings_t::SetMode(IKChannelMode value) {
    SetSchemaValue(m_ptr, "IKDemoCaptureSettings_t", "m_eMode", true, value);
}

CUtlString GIKDemoCaptureSettings_t::GetIkChainName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "IKDemoCaptureSettings_t", "m_ikChainName");
}

void GIKDemoCaptureSettings_t::SetIkChainName(CUtlString value) {
    SetSchemaValue(m_ptr, "IKDemoCaptureSettings_t", "m_ikChainName", true, value);
}

CUtlString GIKDemoCaptureSettings_t::GetOneBoneStart() const {
    return GetSchemaValue<CUtlString>(m_ptr, "IKDemoCaptureSettings_t", "m_oneBoneStart");
}

void GIKDemoCaptureSettings_t::SetOneBoneStart(CUtlString value) {
    SetSchemaValue(m_ptr, "IKDemoCaptureSettings_t", "m_oneBoneStart", true, value);
}

CUtlString GIKDemoCaptureSettings_t::GetOneBoneEnd() const {
    return GetSchemaValue<CUtlString>(m_ptr, "IKDemoCaptureSettings_t", "m_oneBoneEnd");
}

void GIKDemoCaptureSettings_t::SetOneBoneEnd(CUtlString value) {
    SetSchemaValue(m_ptr, "IKDemoCaptureSettings_t", "m_oneBoneEnd", true, value);
}

std::string GIKDemoCaptureSettings_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GIKDemoCaptureSettings_t::IsValid() {
    return (m_ptr != nullptr);
}

GCParticleCollectionBindingInstance::GCParticleCollectionBindingInstance(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCParticleCollectionBindingInstance::GCParticleCollectionBindingInstance(void *ptr) {
    m_ptr = ptr;
}

std::string GCParticleCollectionBindingInstance::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCParticleCollectionBindingInstance::IsValid() {
    return (m_ptr != nullptr);
}

GCVoiceContainerDefault::GCVoiceContainerDefault(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCVoiceContainerDefault::GCVoiceContainerDefault(void *ptr) {
    m_ptr = ptr;
}

std::string GCVoiceContainerDefault::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCVoiceContainerDefault::IsValid() {
    return (m_ptr != nullptr);
}

GCSoundEventMetaData::GCSoundEventMetaData(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSoundEventMetaData::GCSoundEventMetaData(void *ptr) {
    m_ptr = ptr;
}

std::string GCSoundEventMetaData::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSoundEventMetaData::IsValid() {
    return (m_ptr != nullptr);
}

GCMorphConstraint::GCMorphConstraint(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMorphConstraint::GCMorphConstraint(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCMorphConstraint::GetTargetMorph() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CMorphConstraint", "m_sTargetMorph");
}

void GCMorphConstraint::SetTargetMorph(CUtlString value) {
    SetSchemaValue(m_ptr, "CMorphConstraint", "m_sTargetMorph", false, value);
}

int32_t GCMorphConstraint::GetSlaveChannel() const {
    return GetSchemaValue<int32_t>(m_ptr, "CMorphConstraint", "m_nSlaveChannel");
}

void GCMorphConstraint::SetSlaveChannel(int32_t value) {
    SetSchemaValue(m_ptr, "CMorphConstraint", "m_nSlaveChannel", false, value);
}

float GCMorphConstraint::GetMin() const {
    return GetSchemaValue<float>(m_ptr, "CMorphConstraint", "m_flMin");
}

void GCMorphConstraint::SetMin(float value) {
    SetSchemaValue(m_ptr, "CMorphConstraint", "m_flMin", false, value);
}

float GCMorphConstraint::GetMax() const {
    return GetSchemaValue<float>(m_ptr, "CMorphConstraint", "m_flMax");
}

void GCMorphConstraint::SetMax(float value) {
    SetSchemaValue(m_ptr, "CMorphConstraint", "m_flMax", false, value);
}

std::string GCMorphConstraint::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMorphConstraint::IsValid() {
    return (m_ptr != nullptr);
}

GDop26_t::GDop26_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GDop26_t::GDop26_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<float> GDop26_t::GetSupport() const {
    float* outValue = GetSchemaValue<float*>(m_ptr, "Dop26_t", "m_flSupport"); std::vector<float> ret; for(int i = 0; i < 26; i++) { ret.push_back(outValue[i]); } return ret;
}

void GDop26_t::SetSupport(std::vector<float> value) {
    float* outValue = GetSchemaValue<float*>(m_ptr, "Dop26_t", "m_flSupport"); for(int i = 0; i < 26; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "Dop26_t", "m_flSupport", true, outValue);
}

std::string GDop26_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GDop26_t::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimGraphModelBinding::GCAnimGraphModelBinding(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimGraphModelBinding::GCAnimGraphModelBinding(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCAnimGraphModelBinding::GetModelName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CAnimGraphModelBinding", "m_modelName");
}

void GCAnimGraphModelBinding::SetModelName(CUtlString value) {
    SetSchemaValue(m_ptr, "CAnimGraphModelBinding", "m_modelName", false, value);
}

std::string GCAnimGraphModelBinding::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimGraphModelBinding::IsValid() {
    return (m_ptr != nullptr);
}

GFakeEntityDerivedA_tAPI::GFakeEntityDerivedA_tAPI(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFakeEntityDerivedA_tAPI::GFakeEntityDerivedA_tAPI(void *ptr) {
    m_ptr = ptr;
}

std::string GFakeEntityDerivedA_tAPI::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFakeEntityDerivedA_tAPI::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimParamHandleMap::GCAnimParamHandleMap(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimParamHandleMap::GCAnimParamHandleMap(void *ptr) {
    m_ptr = ptr;
}

std::string GCAnimParamHandleMap::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimParamHandleMap::IsValid() {
    return (m_ptr != nullptr);
}

GFeMorphLayerDepr_t::GFeMorphLayerDepr_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeMorphLayerDepr_t::GFeMorphLayerDepr_t(void *ptr) {
    m_ptr = ptr;
}

CUtlString GFeMorphLayerDepr_t::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "FeMorphLayerDepr_t", "m_Name");
}

void GFeMorphLayerDepr_t::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "FeMorphLayerDepr_t", "m_Name", true, value);
}

uint32_t GFeMorphLayerDepr_t::GetNameHash() const {
    return GetSchemaValue<uint32_t>(m_ptr, "FeMorphLayerDepr_t", "m_nNameHash");
}

void GFeMorphLayerDepr_t::SetNameHash(uint32_t value) {
    SetSchemaValue(m_ptr, "FeMorphLayerDepr_t", "m_nNameHash", true, value);
}

std::vector<uint16> GFeMorphLayerDepr_t::GetNodes() const {
    CUtlVector<uint16>* vec = GetSchemaValue<CUtlVector<uint16>*>(m_ptr, "FeMorphLayerDepr_t", "m_Nodes"); std::vector<uint16> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GFeMorphLayerDepr_t::SetNodes(std::vector<uint16> value) {
    SetSchemaValueCUtlVector<uint16>(m_ptr, "FeMorphLayerDepr_t", "m_Nodes", true, value);
}

std::vector<Vector> GFeMorphLayerDepr_t::GetInitPos() const {
    CUtlVector<Vector>* vec = GetSchemaValue<CUtlVector<Vector>*>(m_ptr, "FeMorphLayerDepr_t", "m_InitPos"); std::vector<Vector> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GFeMorphLayerDepr_t::SetInitPos(std::vector<Vector> value) {
    SetSchemaValueCUtlVector<Vector>(m_ptr, "FeMorphLayerDepr_t", "m_InitPos", true, value);
}

std::vector<float32> GFeMorphLayerDepr_t::GetGravity() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "FeMorphLayerDepr_t", "m_Gravity"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GFeMorphLayerDepr_t::SetGravity(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "FeMorphLayerDepr_t", "m_Gravity", true, value);
}

std::vector<float32> GFeMorphLayerDepr_t::GetGoalStrength() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "FeMorphLayerDepr_t", "m_GoalStrength"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GFeMorphLayerDepr_t::SetGoalStrength(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "FeMorphLayerDepr_t", "m_GoalStrength", true, value);
}

std::vector<float32> GFeMorphLayerDepr_t::GetGoalDamping() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "FeMorphLayerDepr_t", "m_GoalDamping"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GFeMorphLayerDepr_t::SetGoalDamping(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "FeMorphLayerDepr_t", "m_GoalDamping", true, value);
}

uint32_t GFeMorphLayerDepr_t::GetFlags() const {
    return GetSchemaValue<uint32_t>(m_ptr, "FeMorphLayerDepr_t", "m_nFlags");
}

void GFeMorphLayerDepr_t::SetFlags(uint32_t value) {
    SetSchemaValue(m_ptr, "FeMorphLayerDepr_t", "m_nFlags", true, value);
}

std::string GFeMorphLayerDepr_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeMorphLayerDepr_t::IsValid() {
    return (m_ptr != nullptr);
}

GFourCovMatrices3::GFourCovMatrices3(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFourCovMatrices3::GFourCovMatrices3(void *ptr) {
    m_ptr = ptr;
}

float GFourCovMatrices3::GetXY() const {
    return GetSchemaValue<float>(m_ptr, "FourCovMatrices3", "m_flXY");
}

void GFourCovMatrices3::SetXY(float value) {
    SetSchemaValue(m_ptr, "FourCovMatrices3", "m_flXY", false, value);
}

float GFourCovMatrices3::GetXZ() const {
    return GetSchemaValue<float>(m_ptr, "FourCovMatrices3", "m_flXZ");
}

void GFourCovMatrices3::SetXZ(float value) {
    SetSchemaValue(m_ptr, "FourCovMatrices3", "m_flXZ", false, value);
}

float GFourCovMatrices3::GetYZ() const {
    return GetSchemaValue<float>(m_ptr, "FourCovMatrices3", "m_flYZ");
}

void GFourCovMatrices3::SetYZ(float value) {
    SetSchemaValue(m_ptr, "FourCovMatrices3", "m_flYZ", false, value);
}

std::string GFourCovMatrices3::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFourCovMatrices3::IsValid() {
    return (m_ptr != nullptr);
}

GFeFitMatrix_t::GFeFitMatrix_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeFitMatrix_t::GFeFitMatrix_t(void *ptr) {
    m_ptr = ptr;
}

Vector GFeFitMatrix_t::GetCenter() const {
    return GetSchemaValue<Vector>(m_ptr, "FeFitMatrix_t", "vCenter");
}

void GFeFitMatrix_t::SetCenter(Vector value) {
    SetSchemaValue(m_ptr, "FeFitMatrix_t", "vCenter", true, value);
}

uint16_t GFeFitMatrix_t::GetEnd() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeFitMatrix_t", "nEnd");
}

void GFeFitMatrix_t::SetEnd(uint16_t value) {
    SetSchemaValue(m_ptr, "FeFitMatrix_t", "nEnd", true, value);
}

uint16_t GFeFitMatrix_t::GetNode() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeFitMatrix_t", "nNode");
}

void GFeFitMatrix_t::SetNode(uint16_t value) {
    SetSchemaValue(m_ptr, "FeFitMatrix_t", "nNode", true, value);
}

uint16_t GFeFitMatrix_t::GetBeginDynamic() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeFitMatrix_t", "nBeginDynamic");
}

void GFeFitMatrix_t::SetBeginDynamic(uint16_t value) {
    SetSchemaValue(m_ptr, "FeFitMatrix_t", "nBeginDynamic", true, value);
}

std::string GFeFitMatrix_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeFitMatrix_t::IsValid() {
    return (m_ptr != nullptr);
}

GRnVertex_t::GRnVertex_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GRnVertex_t::GRnVertex_t(void *ptr) {
    m_ptr = ptr;
}

uint8_t GRnVertex_t::GetEdge() const {
    return GetSchemaValue<uint8_t>(m_ptr, "RnVertex_t", "m_nEdge");
}

void GRnVertex_t::SetEdge(uint8_t value) {
    SetSchemaValue(m_ptr, "RnVertex_t", "m_nEdge", true, value);
}

std::string GRnVertex_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GRnVertex_t::IsValid() {
    return (m_ptr != nullptr);
}

GTraceSettings_t::GTraceSettings_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GTraceSettings_t::GTraceSettings_t(void *ptr) {
    m_ptr = ptr;
}

float GTraceSettings_t::GetTraceHeight() const {
    return GetSchemaValue<float>(m_ptr, "TraceSettings_t", "m_flTraceHeight");
}

void GTraceSettings_t::SetTraceHeight(float value) {
    SetSchemaValue(m_ptr, "TraceSettings_t", "m_flTraceHeight", true, value);
}

float GTraceSettings_t::GetTraceRadius() const {
    return GetSchemaValue<float>(m_ptr, "TraceSettings_t", "m_flTraceRadius");
}

void GTraceSettings_t::SetTraceRadius(float value) {
    SetSchemaValue(m_ptr, "TraceSettings_t", "m_flTraceRadius", true, value);
}

std::string GTraceSettings_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GTraceSettings_t::IsValid() {
    return (m_ptr != nullptr);
}

GCConstraintTarget::GCConstraintTarget(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCConstraintTarget::GCConstraintTarget(void *ptr) {
    m_ptr = ptr;
}

Quaternion GCConstraintTarget::GetOffset() const {
    return GetSchemaValue<Quaternion>(m_ptr, "CConstraintTarget", "m_qOffset");
}

void GCConstraintTarget::SetOffset(Quaternion value) {
    SetSchemaValue(m_ptr, "CConstraintTarget", "m_qOffset", false, value);
}

Vector GCConstraintTarget::GetOffset1() const {
    return GetSchemaValue<Vector>(m_ptr, "CConstraintTarget", "m_vOffset");
}

void GCConstraintTarget::SetOffset1(Vector value) {
    SetSchemaValue(m_ptr, "CConstraintTarget", "m_vOffset", false, value);
}

uint32_t GCConstraintTarget::GetBoneHash() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CConstraintTarget", "m_nBoneHash");
}

void GCConstraintTarget::SetBoneHash(uint32_t value) {
    SetSchemaValue(m_ptr, "CConstraintTarget", "m_nBoneHash", false, value);
}

CUtlString GCConstraintTarget::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CConstraintTarget", "m_sName");
}

void GCConstraintTarget::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "CConstraintTarget", "m_sName", false, value);
}

float GCConstraintTarget::GetWeight() const {
    return GetSchemaValue<float>(m_ptr, "CConstraintTarget", "m_flWeight");
}

void GCConstraintTarget::SetWeight(float value) {
    SetSchemaValue(m_ptr, "CConstraintTarget", "m_flWeight", false, value);
}

bool GCConstraintTarget::GetIsAttachment() const {
    return GetSchemaValue<bool>(m_ptr, "CConstraintTarget", "m_bIsAttachment");
}

void GCConstraintTarget::SetIsAttachment(bool value) {
    SetSchemaValue(m_ptr, "CConstraintTarget", "m_bIsAttachment", false, value);
}

std::string GCConstraintTarget::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCConstraintTarget::IsValid() {
    return (m_ptr != nullptr);
}

GCompMatPropertyMutator_t::GCompMatPropertyMutator_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCompMatPropertyMutator_t::GCompMatPropertyMutator_t(void *ptr) {
    m_ptr = ptr;
}

bool GCompMatPropertyMutator_t::GetEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CompMatPropertyMutator_t", "m_bEnabled");
}

void GCompMatPropertyMutator_t::SetEnabled(bool value) {
    SetSchemaValue(m_ptr, "CompMatPropertyMutator_t", "m_bEnabled", true, value);
}

CompMatPropertyMutatorType_t GCompMatPropertyMutator_t::GetMutatorCommandType() const {
    return GetSchemaValue<CompMatPropertyMutatorType_t>(m_ptr, "CompMatPropertyMutator_t", "m_nMutatorCommandType");
}

void GCompMatPropertyMutator_t::SetMutatorCommandType(CompMatPropertyMutatorType_t value) {
    SetSchemaValue(m_ptr, "CompMatPropertyMutator_t", "m_nMutatorCommandType", true, value);
}

CUtlString GCompMatPropertyMutator_t::GetStrInitWith_Container() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CompMatPropertyMutator_t", "m_strInitWith_Container");
}

void GCompMatPropertyMutator_t::SetStrInitWith_Container(CUtlString value) {
    SetSchemaValue(m_ptr, "CompMatPropertyMutator_t", "m_strInitWith_Container", true, value);
}

CUtlString GCompMatPropertyMutator_t::GetStrCopyProperty_InputContainerSrc() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CompMatPropertyMutator_t", "m_strCopyProperty_InputContainerSrc");
}

void GCompMatPropertyMutator_t::SetStrCopyProperty_InputContainerSrc(CUtlString value) {
    SetSchemaValue(m_ptr, "CompMatPropertyMutator_t", "m_strCopyProperty_InputContainerSrc", true, value);
}

CUtlString GCompMatPropertyMutator_t::GetStrCopyProperty_InputContainerProperty() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CompMatPropertyMutator_t", "m_strCopyProperty_InputContainerProperty");
}

void GCompMatPropertyMutator_t::SetStrCopyProperty_InputContainerProperty(CUtlString value) {
    SetSchemaValue(m_ptr, "CompMatPropertyMutator_t", "m_strCopyProperty_InputContainerProperty", true, value);
}

CUtlString GCompMatPropertyMutator_t::GetStrCopyProperty_TargetProperty() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CompMatPropertyMutator_t", "m_strCopyProperty_TargetProperty");
}

void GCompMatPropertyMutator_t::SetStrCopyProperty_TargetProperty(CUtlString value) {
    SetSchemaValue(m_ptr, "CompMatPropertyMutator_t", "m_strCopyProperty_TargetProperty", true, value);
}

CUtlString GCompMatPropertyMutator_t::GetStrRandomRollInputVars_SeedInputVar() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CompMatPropertyMutator_t", "m_strRandomRollInputVars_SeedInputVar");
}

void GCompMatPropertyMutator_t::SetStrRandomRollInputVars_SeedInputVar(CUtlString value) {
    SetSchemaValue(m_ptr, "CompMatPropertyMutator_t", "m_strRandomRollInputVars_SeedInputVar", true, value);
}

std::vector<CUtlString> GCompMatPropertyMutator_t::GetRandomRollInputVars_InputVarsToRoll() const {
    CUtlVector<CUtlString>* vec = GetSchemaValue<CUtlVector<CUtlString>*>(m_ptr, "CompMatPropertyMutator_t", "m_vecRandomRollInputVars_InputVarsToRoll"); std::vector<CUtlString> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCompMatPropertyMutator_t::SetRandomRollInputVars_InputVarsToRoll(std::vector<CUtlString> value) {
    SetSchemaValueCUtlVector<CUtlString>(m_ptr, "CompMatPropertyMutator_t", "m_vecRandomRollInputVars_InputVarsToRoll", true, value);
}

CUtlString GCompMatPropertyMutator_t::GetStrCopyMatchingKeys_InputContainerSrc() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CompMatPropertyMutator_t", "m_strCopyMatchingKeys_InputContainerSrc");
}

void GCompMatPropertyMutator_t::SetStrCopyMatchingKeys_InputContainerSrc(CUtlString value) {
    SetSchemaValue(m_ptr, "CompMatPropertyMutator_t", "m_strCopyMatchingKeys_InputContainerSrc", true, value);
}

CUtlString GCompMatPropertyMutator_t::GetStrCopyKeysWithSuffix_InputContainerSrc() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CompMatPropertyMutator_t", "m_strCopyKeysWithSuffix_InputContainerSrc");
}

void GCompMatPropertyMutator_t::SetStrCopyKeysWithSuffix_InputContainerSrc(CUtlString value) {
    SetSchemaValue(m_ptr, "CompMatPropertyMutator_t", "m_strCopyKeysWithSuffix_InputContainerSrc", true, value);
}

CUtlString GCompMatPropertyMutator_t::GetStrCopyKeysWithSuffix_FindSuffix() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CompMatPropertyMutator_t", "m_strCopyKeysWithSuffix_FindSuffix");
}

void GCompMatPropertyMutator_t::SetStrCopyKeysWithSuffix_FindSuffix(CUtlString value) {
    SetSchemaValue(m_ptr, "CompMatPropertyMutator_t", "m_strCopyKeysWithSuffix_FindSuffix", true, value);
}

CUtlString GCompMatPropertyMutator_t::GetStrCopyKeysWithSuffix_ReplaceSuffix() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CompMatPropertyMutator_t", "m_strCopyKeysWithSuffix_ReplaceSuffix");
}

void GCompMatPropertyMutator_t::SetStrCopyKeysWithSuffix_ReplaceSuffix(CUtlString value) {
    SetSchemaValue(m_ptr, "CompMatPropertyMutator_t", "m_strCopyKeysWithSuffix_ReplaceSuffix", true, value);
}

GCompositeMaterialInputLooseVariable_t GCompMatPropertyMutator_t::GetSetValue_Value() const {
    return GetSchemaValue<GCompositeMaterialInputLooseVariable_t>(m_ptr, "CompMatPropertyMutator_t", "m_nSetValue_Value");
}

void GCompMatPropertyMutator_t::SetSetValue_Value(GCompositeMaterialInputLooseVariable_t value) {
    SetSchemaValue(m_ptr, "CompMatPropertyMutator_t", "m_nSetValue_Value", true, value);
}

CUtlString GCompMatPropertyMutator_t::GetStrGenerateTexture_TargetParam() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CompMatPropertyMutator_t", "m_strGenerateTexture_TargetParam");
}

void GCompMatPropertyMutator_t::SetStrGenerateTexture_TargetParam(CUtlString value) {
    SetSchemaValue(m_ptr, "CompMatPropertyMutator_t", "m_strGenerateTexture_TargetParam", true, value);
}

CUtlString GCompMatPropertyMutator_t::GetStrGenerateTexture_InitialContainer() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CompMatPropertyMutator_t", "m_strGenerateTexture_InitialContainer");
}

void GCompMatPropertyMutator_t::SetStrGenerateTexture_InitialContainer(CUtlString value) {
    SetSchemaValue(m_ptr, "CompMatPropertyMutator_t", "m_strGenerateTexture_InitialContainer", true, value);
}

int32_t GCompMatPropertyMutator_t::GetResolution() const {
    return GetSchemaValue<int32_t>(m_ptr, "CompMatPropertyMutator_t", "m_nResolution");
}

void GCompMatPropertyMutator_t::SetResolution(int32_t value) {
    SetSchemaValue(m_ptr, "CompMatPropertyMutator_t", "m_nResolution", true, value);
}

bool GCompMatPropertyMutator_t::GetIsScratchTarget() const {
    return GetSchemaValue<bool>(m_ptr, "CompMatPropertyMutator_t", "m_bIsScratchTarget");
}

void GCompMatPropertyMutator_t::SetIsScratchTarget(bool value) {
    SetSchemaValue(m_ptr, "CompMatPropertyMutator_t", "m_bIsScratchTarget", true, value);
}

bool GCompMatPropertyMutator_t::GetSplatDebugInfo() const {
    return GetSchemaValue<bool>(m_ptr, "CompMatPropertyMutator_t", "m_bSplatDebugInfo");
}

void GCompMatPropertyMutator_t::SetSplatDebugInfo(bool value) {
    SetSchemaValue(m_ptr, "CompMatPropertyMutator_t", "m_bSplatDebugInfo", true, value);
}

bool GCompMatPropertyMutator_t::GetCaptureInRenderDoc() const {
    return GetSchemaValue<bool>(m_ptr, "CompMatPropertyMutator_t", "m_bCaptureInRenderDoc");
}

void GCompMatPropertyMutator_t::SetCaptureInRenderDoc(bool value) {
    SetSchemaValue(m_ptr, "CompMatPropertyMutator_t", "m_bCaptureInRenderDoc", true, value);
}

std::vector<GCompMatPropertyMutator_t> GCompMatPropertyMutator_t::GetTexGenInstructions() const {
    CUtlVector<GCompMatPropertyMutator_t>* vec = GetSchemaValue<CUtlVector<GCompMatPropertyMutator_t>*>(m_ptr, "CompMatPropertyMutator_t", "m_vecTexGenInstructions"); std::vector<GCompMatPropertyMutator_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCompMatPropertyMutator_t::SetTexGenInstructions(std::vector<GCompMatPropertyMutator_t> value) {
    SetSchemaValueCUtlVector<GCompMatPropertyMutator_t>(m_ptr, "CompMatPropertyMutator_t", "m_vecTexGenInstructions", true, value);
}

std::vector<GCompMatPropertyMutator_t> GCompMatPropertyMutator_t::GetConditionalMutators() const {
    CUtlVector<GCompMatPropertyMutator_t>* vec = GetSchemaValue<CUtlVector<GCompMatPropertyMutator_t>*>(m_ptr, "CompMatPropertyMutator_t", "m_vecConditionalMutators"); std::vector<GCompMatPropertyMutator_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCompMatPropertyMutator_t::SetConditionalMutators(std::vector<GCompMatPropertyMutator_t> value) {
    SetSchemaValueCUtlVector<GCompMatPropertyMutator_t>(m_ptr, "CompMatPropertyMutator_t", "m_vecConditionalMutators", true, value);
}

CUtlString GCompMatPropertyMutator_t::GetStrPopInputQueue_Container() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CompMatPropertyMutator_t", "m_strPopInputQueue_Container");
}

void GCompMatPropertyMutator_t::SetStrPopInputQueue_Container(CUtlString value) {
    SetSchemaValue(m_ptr, "CompMatPropertyMutator_t", "m_strPopInputQueue_Container", true, value);
}

CUtlString GCompMatPropertyMutator_t::GetStrDrawText_InputContainerSrc() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CompMatPropertyMutator_t", "m_strDrawText_InputContainerSrc");
}

void GCompMatPropertyMutator_t::SetStrDrawText_InputContainerSrc(CUtlString value) {
    SetSchemaValue(m_ptr, "CompMatPropertyMutator_t", "m_strDrawText_InputContainerSrc", true, value);
}

CUtlString GCompMatPropertyMutator_t::GetStrDrawText_InputContainerProperty() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CompMatPropertyMutator_t", "m_strDrawText_InputContainerProperty");
}

void GCompMatPropertyMutator_t::SetStrDrawText_InputContainerProperty(CUtlString value) {
    SetSchemaValue(m_ptr, "CompMatPropertyMutator_t", "m_strDrawText_InputContainerProperty", true, value);
}

Vector2D GCompMatPropertyMutator_t::GetDrawText_Position() const {
    return GetSchemaValue<Vector2D>(m_ptr, "CompMatPropertyMutator_t", "m_vecDrawText_Position");
}

void GCompMatPropertyMutator_t::SetDrawText_Position(Vector2D value) {
    SetSchemaValue(m_ptr, "CompMatPropertyMutator_t", "m_vecDrawText_Position", true, value);
}

Color GCompMatPropertyMutator_t::GetColDrawText_Color() const {
    return GetSchemaValue<Color>(m_ptr, "CompMatPropertyMutator_t", "m_colDrawText_Color");
}

void GCompMatPropertyMutator_t::SetColDrawText_Color(Color value) {
    SetSchemaValue(m_ptr, "CompMatPropertyMutator_t", "m_colDrawText_Color", true, value);
}

CUtlString GCompMatPropertyMutator_t::GetStrDrawText_Font() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CompMatPropertyMutator_t", "m_strDrawText_Font");
}

void GCompMatPropertyMutator_t::SetStrDrawText_Font(CUtlString value) {
    SetSchemaValue(m_ptr, "CompMatPropertyMutator_t", "m_strDrawText_Font", true, value);
}

std::vector<GCompMatMutatorCondition_t> GCompMatPropertyMutator_t::GetConditions() const {
    CUtlVector<GCompMatMutatorCondition_t>* vec = GetSchemaValue<CUtlVector<GCompMatMutatorCondition_t>*>(m_ptr, "CompMatPropertyMutator_t", "m_vecConditions"); std::vector<GCompMatMutatorCondition_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCompMatPropertyMutator_t::SetConditions(std::vector<GCompMatMutatorCondition_t> value) {
    SetSchemaValueCUtlVector<GCompMatMutatorCondition_t>(m_ptr, "CompMatPropertyMutator_t", "m_vecConditions", true, value);
}

std::string GCompMatPropertyMutator_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCompMatPropertyMutator_t::IsValid() {
    return (m_ptr != nullptr);
}

GIKBoneNameAndIndex_t::GIKBoneNameAndIndex_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GIKBoneNameAndIndex_t::GIKBoneNameAndIndex_t(void *ptr) {
    m_ptr = ptr;
}

CUtlString GIKBoneNameAndIndex_t::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "IKBoneNameAndIndex_t", "m_Name");
}

void GIKBoneNameAndIndex_t::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "IKBoneNameAndIndex_t", "m_Name", true, value);
}

std::string GIKBoneNameAndIndex_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GIKBoneNameAndIndex_t::IsValid() {
    return (m_ptr != nullptr);
}

GPermEntityLumpData_t::GPermEntityLumpData_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GPermEntityLumpData_t::GPermEntityLumpData_t(void *ptr) {
    m_ptr = ptr;
}

CUtlString GPermEntityLumpData_t::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "PermEntityLumpData_t", "m_name");
}

void GPermEntityLumpData_t::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "PermEntityLumpData_t", "m_name", true, value);
}

std::string GPermEntityLumpData_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GPermEntityLumpData_t::IsValid() {
    return (m_ptr != nullptr);
}

GVMixDelayDesc_t::GVMixDelayDesc_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVMixDelayDesc_t::GVMixDelayDesc_t(void *ptr) {
    m_ptr = ptr;
}

GVMixFilterDesc_t GVMixDelayDesc_t::GetFeedbackFilter() const {
    return GetSchemaValue<GVMixFilterDesc_t>(m_ptr, "VMixDelayDesc_t", "m_feedbackFilter");
}

void GVMixDelayDesc_t::SetFeedbackFilter(GVMixFilterDesc_t value) {
    SetSchemaValue(m_ptr, "VMixDelayDesc_t", "m_feedbackFilter", true, value);
}

bool GVMixDelayDesc_t::GetEnableFilter() const {
    return GetSchemaValue<bool>(m_ptr, "VMixDelayDesc_t", "m_bEnableFilter");
}

void GVMixDelayDesc_t::SetEnableFilter(bool value) {
    SetSchemaValue(m_ptr, "VMixDelayDesc_t", "m_bEnableFilter", true, value);
}

float GVMixDelayDesc_t::GetDelay() const {
    return GetSchemaValue<float>(m_ptr, "VMixDelayDesc_t", "m_flDelay");
}

void GVMixDelayDesc_t::SetDelay(float value) {
    SetSchemaValue(m_ptr, "VMixDelayDesc_t", "m_flDelay", true, value);
}

float GVMixDelayDesc_t::GetDirectGain() const {
    return GetSchemaValue<float>(m_ptr, "VMixDelayDesc_t", "m_flDirectGain");
}

void GVMixDelayDesc_t::SetDirectGain(float value) {
    SetSchemaValue(m_ptr, "VMixDelayDesc_t", "m_flDirectGain", true, value);
}

float GVMixDelayDesc_t::GetDelayGain() const {
    return GetSchemaValue<float>(m_ptr, "VMixDelayDesc_t", "m_flDelayGain");
}

void GVMixDelayDesc_t::SetDelayGain(float value) {
    SetSchemaValue(m_ptr, "VMixDelayDesc_t", "m_flDelayGain", true, value);
}

float GVMixDelayDesc_t::GetFeedbackGain() const {
    return GetSchemaValue<float>(m_ptr, "VMixDelayDesc_t", "m_flFeedbackGain");
}

void GVMixDelayDesc_t::SetFeedbackGain(float value) {
    SetSchemaValue(m_ptr, "VMixDelayDesc_t", "m_flFeedbackGain", true, value);
}

float GVMixDelayDesc_t::GetWidth() const {
    return GetSchemaValue<float>(m_ptr, "VMixDelayDesc_t", "m_flWidth");
}

void GVMixDelayDesc_t::SetWidth(float value) {
    SetSchemaValue(m_ptr, "VMixDelayDesc_t", "m_flWidth", true, value);
}

std::string GVMixDelayDesc_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVMixDelayDesc_t::IsValid() {
    return (m_ptr != nullptr);
}

GCBoneConstraintDotToMorph::GCBoneConstraintDotToMorph(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBoneConstraintDotToMorph::GCBoneConstraintDotToMorph(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCBoneConstraintDotToMorph::GetBoneName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CBoneConstraintDotToMorph", "m_sBoneName");
}

void GCBoneConstraintDotToMorph::SetBoneName(CUtlString value) {
    SetSchemaValue(m_ptr, "CBoneConstraintDotToMorph", "m_sBoneName", false, value);
}

CUtlString GCBoneConstraintDotToMorph::GetTargetBoneName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CBoneConstraintDotToMorph", "m_sTargetBoneName");
}

void GCBoneConstraintDotToMorph::SetTargetBoneName(CUtlString value) {
    SetSchemaValue(m_ptr, "CBoneConstraintDotToMorph", "m_sTargetBoneName", false, value);
}

CUtlString GCBoneConstraintDotToMorph::GetMorphChannelName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CBoneConstraintDotToMorph", "m_sMorphChannelName");
}

void GCBoneConstraintDotToMorph::SetMorphChannelName(CUtlString value) {
    SetSchemaValue(m_ptr, "CBoneConstraintDotToMorph", "m_sMorphChannelName", false, value);
}

std::vector<float> GCBoneConstraintDotToMorph::GetRemap() const {
    float* outValue = GetSchemaValue<float*>(m_ptr, "CBoneConstraintDotToMorph", "m_flRemap"); std::vector<float> ret; for(int i = 0; i < 4; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCBoneConstraintDotToMorph::SetRemap(std::vector<float> value) {
    float* outValue = GetSchemaValue<float*>(m_ptr, "CBoneConstraintDotToMorph", "m_flRemap"); for(int i = 0; i < 4; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CBoneConstraintDotToMorph", "m_flRemap", false, outValue);
}

std::string GCBoneConstraintDotToMorph::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBoneConstraintDotToMorph::IsValid() {
    return (m_ptr != nullptr);
}

GPostProcessingBloomParameters_t::GPostProcessingBloomParameters_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GPostProcessingBloomParameters_t::GPostProcessingBloomParameters_t(void *ptr) {
    m_ptr = ptr;
}

BloomBlendMode_t GPostProcessingBloomParameters_t::GetBlendMode() const {
    return GetSchemaValue<BloomBlendMode_t>(m_ptr, "PostProcessingBloomParameters_t", "m_blendMode");
}

void GPostProcessingBloomParameters_t::SetBlendMode(BloomBlendMode_t value) {
    SetSchemaValue(m_ptr, "PostProcessingBloomParameters_t", "m_blendMode", true, value);
}

float GPostProcessingBloomParameters_t::GetBloomStrength() const {
    return GetSchemaValue<float>(m_ptr, "PostProcessingBloomParameters_t", "m_flBloomStrength");
}

void GPostProcessingBloomParameters_t::SetBloomStrength(float value) {
    SetSchemaValue(m_ptr, "PostProcessingBloomParameters_t", "m_flBloomStrength", true, value);
}

float GPostProcessingBloomParameters_t::GetScreenBloomStrength() const {
    return GetSchemaValue<float>(m_ptr, "PostProcessingBloomParameters_t", "m_flScreenBloomStrength");
}

void GPostProcessingBloomParameters_t::SetScreenBloomStrength(float value) {
    SetSchemaValue(m_ptr, "PostProcessingBloomParameters_t", "m_flScreenBloomStrength", true, value);
}

float GPostProcessingBloomParameters_t::GetBlurBloomStrength() const {
    return GetSchemaValue<float>(m_ptr, "PostProcessingBloomParameters_t", "m_flBlurBloomStrength");
}

void GPostProcessingBloomParameters_t::SetBlurBloomStrength(float value) {
    SetSchemaValue(m_ptr, "PostProcessingBloomParameters_t", "m_flBlurBloomStrength", true, value);
}

float GPostProcessingBloomParameters_t::GetBloomThreshold() const {
    return GetSchemaValue<float>(m_ptr, "PostProcessingBloomParameters_t", "m_flBloomThreshold");
}

void GPostProcessingBloomParameters_t::SetBloomThreshold(float value) {
    SetSchemaValue(m_ptr, "PostProcessingBloomParameters_t", "m_flBloomThreshold", true, value);
}

float GPostProcessingBloomParameters_t::GetBloomThresholdWidth() const {
    return GetSchemaValue<float>(m_ptr, "PostProcessingBloomParameters_t", "m_flBloomThresholdWidth");
}

void GPostProcessingBloomParameters_t::SetBloomThresholdWidth(float value) {
    SetSchemaValue(m_ptr, "PostProcessingBloomParameters_t", "m_flBloomThresholdWidth", true, value);
}

float GPostProcessingBloomParameters_t::GetSkyboxBloomStrength() const {
    return GetSchemaValue<float>(m_ptr, "PostProcessingBloomParameters_t", "m_flSkyboxBloomStrength");
}

void GPostProcessingBloomParameters_t::SetSkyboxBloomStrength(float value) {
    SetSchemaValue(m_ptr, "PostProcessingBloomParameters_t", "m_flSkyboxBloomStrength", true, value);
}

float GPostProcessingBloomParameters_t::GetBloomStartValue() const {
    return GetSchemaValue<float>(m_ptr, "PostProcessingBloomParameters_t", "m_flBloomStartValue");
}

void GPostProcessingBloomParameters_t::SetBloomStartValue(float value) {
    SetSchemaValue(m_ptr, "PostProcessingBloomParameters_t", "m_flBloomStartValue", true, value);
}

std::vector<float> GPostProcessingBloomParameters_t::GetBlurWeight() const {
    float* outValue = GetSchemaValue<float*>(m_ptr, "PostProcessingBloomParameters_t", "m_flBlurWeight"); std::vector<float> ret; for(int i = 0; i < 5; i++) { ret.push_back(outValue[i]); } return ret;
}

void GPostProcessingBloomParameters_t::SetBlurWeight(std::vector<float> value) {
    float* outValue = GetSchemaValue<float*>(m_ptr, "PostProcessingBloomParameters_t", "m_flBlurWeight"); for(int i = 0; i < 5; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "PostProcessingBloomParameters_t", "m_flBlurWeight", true, outValue);
}

std::vector<Vector> GPostProcessingBloomParameters_t::GetBlurTint() const {
    Vector* outValue = GetSchemaValue<Vector*>(m_ptr, "PostProcessingBloomParameters_t", "m_vBlurTint"); std::vector<Vector> ret; for(int i = 0; i < 5; i++) { ret.push_back(outValue[i]); } return ret;
}

void GPostProcessingBloomParameters_t::SetBlurTint(std::vector<Vector> value) {
    Vector* outValue = GetSchemaValue<Vector*>(m_ptr, "PostProcessingBloomParameters_t", "m_vBlurTint"); for(int i = 0; i < 5; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "PostProcessingBloomParameters_t", "m_vBlurTint", true, outValue);
}

std::string GPostProcessingBloomParameters_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GPostProcessingBloomParameters_t::IsValid() {
    return (m_ptr != nullptr);
}

GEntOutput_t::GEntOutput_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEntOutput_t::GEntOutput_t(void *ptr) {
    m_ptr = ptr;
}

std::string GEntOutput_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEntOutput_t::IsValid() {
    return (m_ptr != nullptr);
}

GFakeEntityDerivedB_tAPI::GFakeEntityDerivedB_tAPI(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFakeEntityDerivedB_tAPI::GFakeEntityDerivedB_tAPI(void *ptr) {
    m_ptr = ptr;
}

std::string GFakeEntityDerivedB_tAPI::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFakeEntityDerivedB_tAPI::IsValid() {
    return (m_ptr != nullptr);
}

GCSlopeComponentUpdater::GCSlopeComponentUpdater(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSlopeComponentUpdater::GCSlopeComponentUpdater(void *ptr) {
    m_ptr = ptr;
}

float GCSlopeComponentUpdater::GetTraceDistance() const {
    return GetSchemaValue<float>(m_ptr, "CSlopeComponentUpdater", "m_flTraceDistance");
}

void GCSlopeComponentUpdater::SetTraceDistance(float value) {
    SetSchemaValue(m_ptr, "CSlopeComponentUpdater", "m_flTraceDistance", false, value);
}

GCAnimParamHandle GCSlopeComponentUpdater::GetSlopeAngle() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CSlopeComponentUpdater", "m_hSlopeAngle");
}

void GCSlopeComponentUpdater::SetSlopeAngle(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CSlopeComponentUpdater", "m_hSlopeAngle", false, value);
}

GCAnimParamHandle GCSlopeComponentUpdater::GetSlopeAngleFront() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CSlopeComponentUpdater", "m_hSlopeAngleFront");
}

void GCSlopeComponentUpdater::SetSlopeAngleFront(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CSlopeComponentUpdater", "m_hSlopeAngleFront", false, value);
}

GCAnimParamHandle GCSlopeComponentUpdater::GetSlopeAngleSide() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CSlopeComponentUpdater", "m_hSlopeAngleSide");
}

void GCSlopeComponentUpdater::SetSlopeAngleSide(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CSlopeComponentUpdater", "m_hSlopeAngleSide", false, value);
}

GCAnimParamHandle GCSlopeComponentUpdater::GetSlopeHeading() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CSlopeComponentUpdater", "m_hSlopeHeading");
}

void GCSlopeComponentUpdater::SetSlopeHeading(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CSlopeComponentUpdater", "m_hSlopeHeading", false, value);
}

GCAnimParamHandle GCSlopeComponentUpdater::GetSlopeNormal() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CSlopeComponentUpdater", "m_hSlopeNormal");
}

void GCSlopeComponentUpdater::SetSlopeNormal(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CSlopeComponentUpdater", "m_hSlopeNormal", false, value);
}

GCAnimParamHandle GCSlopeComponentUpdater::GetSlopeNormal_WorldSpace() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CSlopeComponentUpdater", "m_hSlopeNormal_WorldSpace");
}

void GCSlopeComponentUpdater::SetSlopeNormal_WorldSpace(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CSlopeComponentUpdater", "m_hSlopeNormal_WorldSpace", false, value);
}

std::string GCSlopeComponentUpdater::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSlopeComponentUpdater::IsValid() {
    return (m_ptr != nullptr);
}

GRnNode_t::GRnNode_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GRnNode_t::GRnNode_t(void *ptr) {
    m_ptr = ptr;
}

Vector GRnNode_t::GetMin() const {
    return GetSchemaValue<Vector>(m_ptr, "RnNode_t", "m_vMin");
}

void GRnNode_t::SetMin(Vector value) {
    SetSchemaValue(m_ptr, "RnNode_t", "m_vMin", true, value);
}

uint32_t GRnNode_t::GetChildren() const {
    return GetSchemaValue<uint32_t>(m_ptr, "RnNode_t", "m_nChildren");
}

void GRnNode_t::SetChildren(uint32_t value) {
    SetSchemaValue(m_ptr, "RnNode_t", "m_nChildren", true, value);
}

Vector GRnNode_t::GetMax() const {
    return GetSchemaValue<Vector>(m_ptr, "RnNode_t", "m_vMax");
}

void GRnNode_t::SetMax(Vector value) {
    SetSchemaValue(m_ptr, "RnNode_t", "m_vMax", true, value);
}

uint32_t GRnNode_t::GetTriangleOffset() const {
    return GetSchemaValue<uint32_t>(m_ptr, "RnNode_t", "m_nTriangleOffset");
}

void GRnNode_t::SetTriangleOffset(uint32_t value) {
    SetSchemaValue(m_ptr, "RnNode_t", "m_nTriangleOffset", true, value);
}

std::string GRnNode_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GRnNode_t::IsValid() {
    return (m_ptr != nullptr);
}

GCSeqCmdSeqDesc::GCSeqCmdSeqDesc(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSeqCmdSeqDesc::GCSeqCmdSeqDesc(void *ptr) {
    m_ptr = ptr;
}

CBufferString GCSeqCmdSeqDesc::GetName() const {
    return GetSchemaValue<CBufferString>(m_ptr, "CSeqCmdSeqDesc", "m_sName");
}

void GCSeqCmdSeqDesc::SetName(CBufferString value) {
    SetSchemaValue(m_ptr, "CSeqCmdSeqDesc", "m_sName", false, value);
}

GCSeqSeqDescFlag GCSeqCmdSeqDesc::GetFlags() const {
    return GetSchemaValue<GCSeqSeqDescFlag>(m_ptr, "CSeqCmdSeqDesc", "m_flags");
}

void GCSeqCmdSeqDesc::SetFlags(GCSeqSeqDescFlag value) {
    SetSchemaValue(m_ptr, "CSeqCmdSeqDesc", "m_flags", false, value);
}

GCSeqTransition GCSeqCmdSeqDesc::GetTransition() const {
    return GetSchemaValue<GCSeqTransition>(m_ptr, "CSeqCmdSeqDesc", "m_transition");
}

void GCSeqCmdSeqDesc::SetTransition(GCSeqTransition value) {
    SetSchemaValue(m_ptr, "CSeqCmdSeqDesc", "m_transition", false, value);
}

int16_t GCSeqCmdSeqDesc::GetFrameRangeSequence() const {
    return GetSchemaValue<int16_t>(m_ptr, "CSeqCmdSeqDesc", "m_nFrameRangeSequence");
}

void GCSeqCmdSeqDesc::SetFrameRangeSequence(int16_t value) {
    SetSchemaValue(m_ptr, "CSeqCmdSeqDesc", "m_nFrameRangeSequence", false, value);
}

int16_t GCSeqCmdSeqDesc::GetFrameCount() const {
    return GetSchemaValue<int16_t>(m_ptr, "CSeqCmdSeqDesc", "m_nFrameCount");
}

void GCSeqCmdSeqDesc::SetFrameCount(int16_t value) {
    SetSchemaValue(m_ptr, "CSeqCmdSeqDesc", "m_nFrameCount", false, value);
}

float GCSeqCmdSeqDesc::GetFPS() const {
    return GetSchemaValue<float>(m_ptr, "CSeqCmdSeqDesc", "m_flFPS");
}

void GCSeqCmdSeqDesc::SetFPS(float value) {
    SetSchemaValue(m_ptr, "CSeqCmdSeqDesc", "m_flFPS", false, value);
}

int16_t GCSeqCmdSeqDesc::GetSubCycles() const {
    return GetSchemaValue<int16_t>(m_ptr, "CSeqCmdSeqDesc", "m_nSubCycles");
}

void GCSeqCmdSeqDesc::SetSubCycles(int16_t value) {
    SetSchemaValue(m_ptr, "CSeqCmdSeqDesc", "m_nSubCycles", false, value);
}

int16_t GCSeqCmdSeqDesc::GetNumLocalResults() const {
    return GetSchemaValue<int16_t>(m_ptr, "CSeqCmdSeqDesc", "m_numLocalResults");
}

void GCSeqCmdSeqDesc::SetNumLocalResults(int16_t value) {
    SetSchemaValue(m_ptr, "CSeqCmdSeqDesc", "m_numLocalResults", false, value);
}

std::vector<GCSeqCmdLayer> GCSeqCmdSeqDesc::GetCmdLayerArray() const {
    CUtlVector<GCSeqCmdLayer>* vec = GetSchemaValue<CUtlVector<GCSeqCmdLayer>*>(m_ptr, "CSeqCmdSeqDesc", "m_cmdLayerArray"); std::vector<GCSeqCmdLayer> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSeqCmdSeqDesc::SetCmdLayerArray(std::vector<GCSeqCmdLayer> value) {
    SetSchemaValueCUtlVector<GCSeqCmdLayer>(m_ptr, "CSeqCmdSeqDesc", "m_cmdLayerArray", false, value);
}

std::vector<GCAnimEventDefinition> GCSeqCmdSeqDesc::GetEventArray() const {
    CUtlVector<GCAnimEventDefinition>* vec = GetSchemaValue<CUtlVector<GCAnimEventDefinition>*>(m_ptr, "CSeqCmdSeqDesc", "m_eventArray"); std::vector<GCAnimEventDefinition> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSeqCmdSeqDesc::SetEventArray(std::vector<GCAnimEventDefinition> value) {
    SetSchemaValueCUtlVector<GCAnimEventDefinition>(m_ptr, "CSeqCmdSeqDesc", "m_eventArray", false, value);
}

std::vector<GCAnimActivity> GCSeqCmdSeqDesc::GetActivityArray() const {
    CUtlVector<GCAnimActivity>* vec = GetSchemaValue<CUtlVector<GCAnimActivity>*>(m_ptr, "CSeqCmdSeqDesc", "m_activityArray"); std::vector<GCAnimActivity> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSeqCmdSeqDesc::SetActivityArray(std::vector<GCAnimActivity> value) {
    SetSchemaValueCUtlVector<GCAnimActivity>(m_ptr, "CSeqCmdSeqDesc", "m_activityArray", false, value);
}

std::vector<GCSeqPoseSetting> GCSeqCmdSeqDesc::GetPoseSettingArray() const {
    CUtlVector<GCSeqPoseSetting>* vec = GetSchemaValue<CUtlVector<GCSeqPoseSetting>*>(m_ptr, "CSeqCmdSeqDesc", "m_poseSettingArray"); std::vector<GCSeqPoseSetting> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSeqCmdSeqDesc::SetPoseSettingArray(std::vector<GCSeqPoseSetting> value) {
    SetSchemaValueCUtlVector<GCSeqPoseSetting>(m_ptr, "CSeqCmdSeqDesc", "m_poseSettingArray", false, value);
}

std::string GCSeqCmdSeqDesc::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSeqCmdSeqDesc::IsValid() {
    return (m_ptr != nullptr);
}

GCPathAnimMotorUpdaterBase::GCPathAnimMotorUpdaterBase(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPathAnimMotorUpdaterBase::GCPathAnimMotorUpdaterBase(void *ptr) {
    m_ptr = ptr;
}

bool GCPathAnimMotorUpdaterBase::GetLockToPath() const {
    return GetSchemaValue<bool>(m_ptr, "CPathAnimMotorUpdaterBase", "m_bLockToPath");
}

void GCPathAnimMotorUpdaterBase::SetLockToPath(bool value) {
    SetSchemaValue(m_ptr, "CPathAnimMotorUpdaterBase", "m_bLockToPath", false, value);
}

std::string GCPathAnimMotorUpdaterBase::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPathAnimMotorUpdaterBase::IsValid() {
    return (m_ptr != nullptr);
}

GCVariantDefaultAllocator::GCVariantDefaultAllocator(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCVariantDefaultAllocator::GCVariantDefaultAllocator(void *ptr) {
    m_ptr = ptr;
}

std::string GCVariantDefaultAllocator::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCVariantDefaultAllocator::IsValid() {
    return (m_ptr != nullptr);
}

GVMixOscDesc_t::GVMixOscDesc_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVMixOscDesc_t::GVMixOscDesc_t(void *ptr) {
    m_ptr = ptr;
}

VMixLFOShape_t GVMixOscDesc_t::GetOscType() const {
    return GetSchemaValue<VMixLFOShape_t>(m_ptr, "VMixOscDesc_t", "oscType");
}

void GVMixOscDesc_t::SetOscType(VMixLFOShape_t value) {
    SetSchemaValue(m_ptr, "VMixOscDesc_t", "oscType", true, value);
}

float GVMixOscDesc_t::GetFreq() const {
    return GetSchemaValue<float>(m_ptr, "VMixOscDesc_t", "m_freq");
}

void GVMixOscDesc_t::SetFreq(float value) {
    SetSchemaValue(m_ptr, "VMixOscDesc_t", "m_freq", true, value);
}

float GVMixOscDesc_t::GetPhase() const {
    return GetSchemaValue<float>(m_ptr, "VMixOscDesc_t", "m_flPhase");
}

void GVMixOscDesc_t::SetPhase(float value) {
    SetSchemaValue(m_ptr, "VMixOscDesc_t", "m_flPhase", true, value);
}

std::string GVMixOscDesc_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVMixOscDesc_t::IsValid() {
    return (m_ptr != nullptr);
}

GFeEdgeDesc_t::GFeEdgeDesc_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeEdgeDesc_t::GFeEdgeDesc_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<uint16_t> GFeEdgeDesc_t::GetEdge() const {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeEdgeDesc_t", "nEdge"); std::vector<uint16_t> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}

void GFeEdgeDesc_t::SetEdge(std::vector<uint16_t> value) {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeEdgeDesc_t", "nEdge"); for(int i = 0; i < 2; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "FeEdgeDesc_t", "nEdge", true, outValue);
}

std::vector<uint16_t> GFeEdgeDesc_t::GetVirtElem() const {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeEdgeDesc_t", "nVirtElem"); std::vector<uint16_t> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}

void GFeEdgeDesc_t::SetVirtElem(std::vector<uint16_t> value) {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeEdgeDesc_t", "nVirtElem"); for(int i = 0; i < 2; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "FeEdgeDesc_t", "nVirtElem", true, outValue);
}

std::string GFeEdgeDesc_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeEdgeDesc_t::IsValid() {
    return (m_ptr != nullptr);
}

GCPathAnimMotorUpdater::GCPathAnimMotorUpdater(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPathAnimMotorUpdater::GCPathAnimMotorUpdater(void *ptr) {
    m_ptr = ptr;
}

std::string GCPathAnimMotorUpdater::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPathAnimMotorUpdater::IsValid() {
    return (m_ptr != nullptr);
}

GCWayPointHelperUpdateNode::GCWayPointHelperUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCWayPointHelperUpdateNode::GCWayPointHelperUpdateNode(void *ptr) {
    m_ptr = ptr;
}

float GCWayPointHelperUpdateNode::GetStartCycle() const {
    return GetSchemaValue<float>(m_ptr, "CWayPointHelperUpdateNode", "m_flStartCycle");
}

void GCWayPointHelperUpdateNode::SetStartCycle(float value) {
    SetSchemaValue(m_ptr, "CWayPointHelperUpdateNode", "m_flStartCycle", false, value);
}

float GCWayPointHelperUpdateNode::GetEndCycle() const {
    return GetSchemaValue<float>(m_ptr, "CWayPointHelperUpdateNode", "m_flEndCycle");
}

void GCWayPointHelperUpdateNode::SetEndCycle(float value) {
    SetSchemaValue(m_ptr, "CWayPointHelperUpdateNode", "m_flEndCycle", false, value);
}

bool GCWayPointHelperUpdateNode::GetOnlyGoals() const {
    return GetSchemaValue<bool>(m_ptr, "CWayPointHelperUpdateNode", "m_bOnlyGoals");
}

void GCWayPointHelperUpdateNode::SetOnlyGoals(bool value) {
    SetSchemaValue(m_ptr, "CWayPointHelperUpdateNode", "m_bOnlyGoals", false, value);
}

bool GCWayPointHelperUpdateNode::GetPreventOvershoot() const {
    return GetSchemaValue<bool>(m_ptr, "CWayPointHelperUpdateNode", "m_bPreventOvershoot");
}

void GCWayPointHelperUpdateNode::SetPreventOvershoot(bool value) {
    SetSchemaValue(m_ptr, "CWayPointHelperUpdateNode", "m_bPreventOvershoot", false, value);
}

bool GCWayPointHelperUpdateNode::GetPreventUndershoot() const {
    return GetSchemaValue<bool>(m_ptr, "CWayPointHelperUpdateNode", "m_bPreventUndershoot");
}

void GCWayPointHelperUpdateNode::SetPreventUndershoot(bool value) {
    SetSchemaValue(m_ptr, "CWayPointHelperUpdateNode", "m_bPreventUndershoot", false, value);
}

std::string GCWayPointHelperUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCWayPointHelperUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GMaterialParamInt_t::GMaterialParamInt_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GMaterialParamInt_t::GMaterialParamInt_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GMaterialParamInt_t::GetValue() const {
    return GetSchemaValue<int32_t>(m_ptr, "MaterialParamInt_t", "m_nValue");
}

void GMaterialParamInt_t::SetValue(int32_t value) {
    SetSchemaValue(m_ptr, "MaterialParamInt_t", "m_nValue", true, value);
}

std::string GMaterialParamInt_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GMaterialParamInt_t::IsValid() {
    return (m_ptr != nullptr);
}

GPermModelInfo_t::GPermModelInfo_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GPermModelInfo_t::GPermModelInfo_t(void *ptr) {
    m_ptr = ptr;
}

uint32_t GPermModelInfo_t::GetFlags() const {
    return GetSchemaValue<uint32_t>(m_ptr, "PermModelInfo_t", "m_nFlags");
}

void GPermModelInfo_t::SetFlags(uint32_t value) {
    SetSchemaValue(m_ptr, "PermModelInfo_t", "m_nFlags", true, value);
}

Vector GPermModelInfo_t::GetHullMin() const {
    return GetSchemaValue<Vector>(m_ptr, "PermModelInfo_t", "m_vHullMin");
}

void GPermModelInfo_t::SetHullMin(Vector value) {
    SetSchemaValue(m_ptr, "PermModelInfo_t", "m_vHullMin", true, value);
}

Vector GPermModelInfo_t::GetHullMax() const {
    return GetSchemaValue<Vector>(m_ptr, "PermModelInfo_t", "m_vHullMax");
}

void GPermModelInfo_t::SetHullMax(Vector value) {
    SetSchemaValue(m_ptr, "PermModelInfo_t", "m_vHullMax", true, value);
}

Vector GPermModelInfo_t::GetViewMin() const {
    return GetSchemaValue<Vector>(m_ptr, "PermModelInfo_t", "m_vViewMin");
}

void GPermModelInfo_t::SetViewMin(Vector value) {
    SetSchemaValue(m_ptr, "PermModelInfo_t", "m_vViewMin", true, value);
}

Vector GPermModelInfo_t::GetViewMax() const {
    return GetSchemaValue<Vector>(m_ptr, "PermModelInfo_t", "m_vViewMax");
}

void GPermModelInfo_t::SetViewMax(Vector value) {
    SetSchemaValue(m_ptr, "PermModelInfo_t", "m_vViewMax", true, value);
}

float GPermModelInfo_t::GetMass() const {
    return GetSchemaValue<float>(m_ptr, "PermModelInfo_t", "m_flMass");
}

void GPermModelInfo_t::SetMass(float value) {
    SetSchemaValue(m_ptr, "PermModelInfo_t", "m_flMass", true, value);
}

Vector GPermModelInfo_t::GetEyePosition() const {
    return GetSchemaValue<Vector>(m_ptr, "PermModelInfo_t", "m_vEyePosition");
}

void GPermModelInfo_t::SetEyePosition(Vector value) {
    SetSchemaValue(m_ptr, "PermModelInfo_t", "m_vEyePosition", true, value);
}

float GPermModelInfo_t::GetMaxEyeDeflection() const {
    return GetSchemaValue<float>(m_ptr, "PermModelInfo_t", "m_flMaxEyeDeflection");
}

void GPermModelInfo_t::SetMaxEyeDeflection(float value) {
    SetSchemaValue(m_ptr, "PermModelInfo_t", "m_flMaxEyeDeflection", true, value);
}

CUtlString GPermModelInfo_t::GetSurfaceProperty() const {
    return GetSchemaValue<CUtlString>(m_ptr, "PermModelInfo_t", "m_sSurfaceProperty");
}

void GPermModelInfo_t::SetSurfaceProperty(CUtlString value) {
    SetSchemaValue(m_ptr, "PermModelInfo_t", "m_sSurfaceProperty", true, value);
}

CUtlString GPermModelInfo_t::GetKeyValueText() const {
    return GetSchemaValue<CUtlString>(m_ptr, "PermModelInfo_t", "m_keyValueText");
}

void GPermModelInfo_t::SetKeyValueText(CUtlString value) {
    SetSchemaValue(m_ptr, "PermModelInfo_t", "m_keyValueText", true, value);
}

std::string GPermModelInfo_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GPermModelInfo_t::IsValid() {
    return (m_ptr != nullptr);
}

GAnimScriptHandle::GAnimScriptHandle(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GAnimScriptHandle::GAnimScriptHandle(void *ptr) {
    m_ptr = ptr;
}

uint32_t GAnimScriptHandle::GetId() const {
    return GetSchemaValue<uint32_t>(m_ptr, "AnimScriptHandle", "m_id");
}

void GAnimScriptHandle::SetId(uint32_t value) {
    SetSchemaValue(m_ptr, "AnimScriptHandle", "m_id", false, value);
}

std::string GAnimScriptHandle::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GAnimScriptHandle::IsValid() {
    return (m_ptr != nullptr);
}

GFeCtrlOffset_t::GFeCtrlOffset_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeCtrlOffset_t::GFeCtrlOffset_t(void *ptr) {
    m_ptr = ptr;
}

Vector GFeCtrlOffset_t::GetOffset() const {
    return GetSchemaValue<Vector>(m_ptr, "FeCtrlOffset_t", "vOffset");
}

void GFeCtrlOffset_t::SetOffset(Vector value) {
    SetSchemaValue(m_ptr, "FeCtrlOffset_t", "vOffset", true, value);
}

uint16_t GFeCtrlOffset_t::GetCtrlParent() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeCtrlOffset_t", "nCtrlParent");
}

void GFeCtrlOffset_t::SetCtrlParent(uint16_t value) {
    SetSchemaValue(m_ptr, "FeCtrlOffset_t", "nCtrlParent", true, value);
}

uint16_t GFeCtrlOffset_t::GetCtrlChild() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeCtrlOffset_t", "nCtrlChild");
}

void GFeCtrlOffset_t::SetCtrlChild(uint16_t value) {
    SetSchemaValue(m_ptr, "FeCtrlOffset_t", "nCtrlChild", true, value);
}

std::string GFeCtrlOffset_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeCtrlOffset_t::IsValid() {
    return (m_ptr != nullptr);
}

GFeTri_t::GFeTri_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeTri_t::GFeTri_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<uint16_t> GFeTri_t::GetNode() const {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeTri_t", "nNode"); std::vector<uint16_t> ret; for(int i = 0; i < 3; i++) { ret.push_back(outValue[i]); } return ret;
}

void GFeTri_t::SetNode(std::vector<uint16_t> value) {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeTri_t", "nNode"); for(int i = 0; i < 3; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "FeTri_t", "nNode", true, outValue);
}

float GFeTri_t::GetW1() const {
    return GetSchemaValue<float>(m_ptr, "FeTri_t", "w1");
}

void GFeTri_t::SetW1(float value) {
    SetSchemaValue(m_ptr, "FeTri_t", "w1", true, value);
}

float GFeTri_t::GetW2() const {
    return GetSchemaValue<float>(m_ptr, "FeTri_t", "w2");
}

void GFeTri_t::SetW2(float value) {
    SetSchemaValue(m_ptr, "FeTri_t", "w2", true, value);
}

float GFeTri_t::Get1x() const {
    return GetSchemaValue<float>(m_ptr, "FeTri_t", "v1x");
}

void GFeTri_t::Set1x(float value) {
    SetSchemaValue(m_ptr, "FeTri_t", "v1x", true, value);
}

Vector2D GFeTri_t::Get2() const {
    return GetSchemaValue<Vector2D>(m_ptr, "FeTri_t", "v2");
}

void GFeTri_t::Set2(Vector2D value) {
    SetSchemaValue(m_ptr, "FeTri_t", "v2", true, value);
}

std::string GFeTri_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeTri_t::IsValid() {
    return (m_ptr != nullptr);
}

GCLeanMatrixUpdateNode::GCLeanMatrixUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCLeanMatrixUpdateNode::GCLeanMatrixUpdateNode(void *ptr) {
    m_ptr = ptr;
}

std::vector<GCPoseHandle> GCLeanMatrixUpdateNode::GetPoses() const {
    GCPoseHandle* outValue = GetSchemaValue<GCPoseHandle*>(m_ptr, "CLeanMatrixUpdateNode", "m_poses"); std::vector<GCPoseHandle> ret; for(int i = 0; i < 9; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCLeanMatrixUpdateNode::SetPoses(std::vector<GCPoseHandle> value) {
    GCPoseHandle* outValue = GetSchemaValue<GCPoseHandle*>(m_ptr, "CLeanMatrixUpdateNode", "m_poses"); for(int i = 0; i < 9; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CLeanMatrixUpdateNode", "m_poses", false, outValue);
}

GCAnimInputDamping GCLeanMatrixUpdateNode::GetDamping() const {
    return GetSchemaValue<GCAnimInputDamping>(m_ptr, "CLeanMatrixUpdateNode", "m_damping");
}

void GCLeanMatrixUpdateNode::SetDamping(GCAnimInputDamping value) {
    SetSchemaValue(m_ptr, "CLeanMatrixUpdateNode", "m_damping", false, value);
}

AnimVectorSource GCLeanMatrixUpdateNode::GetBlendSource() const {
    return GetSchemaValue<AnimVectorSource>(m_ptr, "CLeanMatrixUpdateNode", "m_blendSource");
}

void GCLeanMatrixUpdateNode::SetBlendSource(AnimVectorSource value) {
    SetSchemaValue(m_ptr, "CLeanMatrixUpdateNode", "m_blendSource", false, value);
}

GCAnimParamHandle GCLeanMatrixUpdateNode::GetParamIndex() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CLeanMatrixUpdateNode", "m_paramIndex");
}

void GCLeanMatrixUpdateNode::SetParamIndex(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CLeanMatrixUpdateNode", "m_paramIndex", false, value);
}

Vector GCLeanMatrixUpdateNode::GetVerticalAxis() const {
    return GetSchemaValue<Vector>(m_ptr, "CLeanMatrixUpdateNode", "m_verticalAxis");
}

void GCLeanMatrixUpdateNode::SetVerticalAxis(Vector value) {
    SetSchemaValue(m_ptr, "CLeanMatrixUpdateNode", "m_verticalAxis", false, value);
}

Vector GCLeanMatrixUpdateNode::GetHorizontalAxis() const {
    return GetSchemaValue<Vector>(m_ptr, "CLeanMatrixUpdateNode", "m_horizontalAxis");
}

void GCLeanMatrixUpdateNode::SetHorizontalAxis(Vector value) {
    SetSchemaValue(m_ptr, "CLeanMatrixUpdateNode", "m_horizontalAxis", false, value);
}

float GCLeanMatrixUpdateNode::GetMaxValue() const {
    return GetSchemaValue<float>(m_ptr, "CLeanMatrixUpdateNode", "m_flMaxValue");
}

void GCLeanMatrixUpdateNode::SetMaxValue(float value) {
    SetSchemaValue(m_ptr, "CLeanMatrixUpdateNode", "m_flMaxValue", false, value);
}

int32_t GCLeanMatrixUpdateNode::GetSequenceMaxFrame() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLeanMatrixUpdateNode", "m_nSequenceMaxFrame");
}

void GCLeanMatrixUpdateNode::SetSequenceMaxFrame(int32_t value) {
    SetSchemaValue(m_ptr, "CLeanMatrixUpdateNode", "m_nSequenceMaxFrame", false, value);
}

std::string GCLeanMatrixUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCLeanMatrixUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GCStanceScaleUpdateNode::GCStanceScaleUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCStanceScaleUpdateNode::GCStanceScaleUpdateNode(void *ptr) {
    m_ptr = ptr;
}

GCAnimParamHandle GCStanceScaleUpdateNode::GetParam() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CStanceScaleUpdateNode", "m_hParam");
}

void GCStanceScaleUpdateNode::SetParam(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CStanceScaleUpdateNode", "m_hParam", false, value);
}

std::string GCStanceScaleUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCStanceScaleUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GIKTargetSettings_t::GIKTargetSettings_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GIKTargetSettings_t::GIKTargetSettings_t(void *ptr) {
    m_ptr = ptr;
}

IKTargetSource GIKTargetSettings_t::GetTargetSource() const {
    return GetSchemaValue<IKTargetSource>(m_ptr, "IKTargetSettings_t", "m_TargetSource");
}

void GIKTargetSettings_t::SetTargetSource(IKTargetSource value) {
    SetSchemaValue(m_ptr, "IKTargetSettings_t", "m_TargetSource", true, value);
}

GIKBoneNameAndIndex_t GIKTargetSettings_t::GetBone() const {
    return GetSchemaValue<GIKBoneNameAndIndex_t>(m_ptr, "IKTargetSettings_t", "m_Bone");
}

void GIKTargetSettings_t::SetBone(GIKBoneNameAndIndex_t value) {
    SetSchemaValue(m_ptr, "IKTargetSettings_t", "m_Bone", true, value);
}

GAnimParamID GIKTargetSettings_t::GetAnimgraphParameterNamePosition() const {
    return GetSchemaValue<GAnimParamID>(m_ptr, "IKTargetSettings_t", "m_AnimgraphParameterNamePosition");
}

void GIKTargetSettings_t::SetAnimgraphParameterNamePosition(GAnimParamID value) {
    SetSchemaValue(m_ptr, "IKTargetSettings_t", "m_AnimgraphParameterNamePosition", true, value);
}

GAnimParamID GIKTargetSettings_t::GetAnimgraphParameterNameOrientation() const {
    return GetSchemaValue<GAnimParamID>(m_ptr, "IKTargetSettings_t", "m_AnimgraphParameterNameOrientation");
}

void GIKTargetSettings_t::SetAnimgraphParameterNameOrientation(GAnimParamID value) {
    SetSchemaValue(m_ptr, "IKTargetSettings_t", "m_AnimgraphParameterNameOrientation", true, value);
}

IKTargetCoordinateSystem GIKTargetSettings_t::GetTargetCoordSystem() const {
    return GetSchemaValue<IKTargetCoordinateSystem>(m_ptr, "IKTargetSettings_t", "m_TargetCoordSystem");
}

void GIKTargetSettings_t::SetTargetCoordSystem(IKTargetCoordinateSystem value) {
    SetSchemaValue(m_ptr, "IKTargetSettings_t", "m_TargetCoordSystem", true, value);
}

std::string GIKTargetSettings_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GIKTargetSettings_t::IsValid() {
    return (m_ptr != nullptr);
}

GTestResource_t::GTestResource_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GTestResource_t::GTestResource_t(void *ptr) {
    m_ptr = ptr;
}

CUtlString GTestResource_t::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "TestResource_t", "m_name");
}

void GTestResource_t::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "TestResource_t", "m_name", true, value);
}

std::string GTestResource_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GTestResource_t::IsValid() {
    return (m_ptr != nullptr);
}

GCBaseRendererSource2::GCBaseRendererSource2(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBaseRendererSource2::GCBaseRendererSource2(void *ptr) {
    m_ptr = ptr;
}

GCParticleCollectionRendererFloatInput GCBaseRendererSource2::GetRadiusScale() const {
    return GetSchemaValue<GCParticleCollectionRendererFloatInput>(m_ptr, "CBaseRendererSource2", "m_flRadiusScale");
}

void GCBaseRendererSource2::SetRadiusScale(GCParticleCollectionRendererFloatInput value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_flRadiusScale", false, value);
}

GCParticleCollectionRendererFloatInput GCBaseRendererSource2::GetAlphaScale() const {
    return GetSchemaValue<GCParticleCollectionRendererFloatInput>(m_ptr, "CBaseRendererSource2", "m_flAlphaScale");
}

void GCBaseRendererSource2::SetAlphaScale(GCParticleCollectionRendererFloatInput value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_flAlphaScale", false, value);
}

GCParticleCollectionRendererFloatInput GCBaseRendererSource2::GetRollScale() const {
    return GetSchemaValue<GCParticleCollectionRendererFloatInput>(m_ptr, "CBaseRendererSource2", "m_flRollScale");
}

void GCBaseRendererSource2::SetRollScale(GCParticleCollectionRendererFloatInput value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_flRollScale", false, value);
}

GParticleAttributeIndex_t GCBaseRendererSource2::GetAlpha2Field() const {
    return GetSchemaValue<GParticleAttributeIndex_t>(m_ptr, "CBaseRendererSource2", "m_nAlpha2Field");
}

void GCBaseRendererSource2::SetAlpha2Field(GParticleAttributeIndex_t value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_nAlpha2Field", false, value);
}

GCParticleCollectionRendererVecInput GCBaseRendererSource2::GetColorScale() const {
    return GetSchemaValue<GCParticleCollectionRendererVecInput>(m_ptr, "CBaseRendererSource2", "m_vecColorScale");
}

void GCBaseRendererSource2::SetColorScale(GCParticleCollectionRendererVecInput value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_vecColorScale", false, value);
}

ParticleColorBlendType_t GCBaseRendererSource2::GetColorBlendType() const {
    return GetSchemaValue<ParticleColorBlendType_t>(m_ptr, "CBaseRendererSource2", "m_nColorBlendType");
}

void GCBaseRendererSource2::SetColorBlendType(ParticleColorBlendType_t value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_nColorBlendType", false, value);
}

SpriteCardShaderType_t GCBaseRendererSource2::GetShaderType() const {
    return GetSchemaValue<SpriteCardShaderType_t>(m_ptr, "CBaseRendererSource2", "m_nShaderType");
}

void GCBaseRendererSource2::SetShaderType(SpriteCardShaderType_t value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_nShaderType", false, value);
}

CUtlString GCBaseRendererSource2::GetStrShaderOverride() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CBaseRendererSource2", "m_strShaderOverride");
}

void GCBaseRendererSource2::SetStrShaderOverride(CUtlString value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_strShaderOverride", false, value);
}

GCParticleCollectionRendererFloatInput GCBaseRendererSource2::GetCenterXOffset() const {
    return GetSchemaValue<GCParticleCollectionRendererFloatInput>(m_ptr, "CBaseRendererSource2", "m_flCenterXOffset");
}

void GCBaseRendererSource2::SetCenterXOffset(GCParticleCollectionRendererFloatInput value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_flCenterXOffset", false, value);
}

GCParticleCollectionRendererFloatInput GCBaseRendererSource2::GetCenterYOffset() const {
    return GetSchemaValue<GCParticleCollectionRendererFloatInput>(m_ptr, "CBaseRendererSource2", "m_flCenterYOffset");
}

void GCBaseRendererSource2::SetCenterYOffset(GCParticleCollectionRendererFloatInput value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_flCenterYOffset", false, value);
}

float GCBaseRendererSource2::GetBumpStrength() const {
    return GetSchemaValue<float>(m_ptr, "CBaseRendererSource2", "m_flBumpStrength");
}

void GCBaseRendererSource2::SetBumpStrength(float value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_flBumpStrength", false, value);
}

ParticleSequenceCropOverride_t GCBaseRendererSource2::GetCropTextureOverride() const {
    return GetSchemaValue<ParticleSequenceCropOverride_t>(m_ptr, "CBaseRendererSource2", "m_nCropTextureOverride");
}

void GCBaseRendererSource2::SetCropTextureOverride(ParticleSequenceCropOverride_t value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_nCropTextureOverride", false, value);
}

std::vector<GTextureGroup_t> GCBaseRendererSource2::GetTexturesInput() const {
    CUtlVector<GTextureGroup_t>* vec = GetSchemaValue<CUtlVector<GTextureGroup_t>*>(m_ptr, "CBaseRendererSource2", "m_vecTexturesInput"); std::vector<GTextureGroup_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCBaseRendererSource2::SetTexturesInput(std::vector<GTextureGroup_t> value) {
    SetSchemaValueCUtlVector<GTextureGroup_t>(m_ptr, "CBaseRendererSource2", "m_vecTexturesInput", false, value);
}

float GCBaseRendererSource2::GetAnimationRate() const {
    return GetSchemaValue<float>(m_ptr, "CBaseRendererSource2", "m_flAnimationRate");
}

void GCBaseRendererSource2::SetAnimationRate(float value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_flAnimationRate", false, value);
}

AnimationType_t GCBaseRendererSource2::GetAnimationType() const {
    return GetSchemaValue<AnimationType_t>(m_ptr, "CBaseRendererSource2", "m_nAnimationType");
}

void GCBaseRendererSource2::SetAnimationType(AnimationType_t value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_nAnimationType", false, value);
}

bool GCBaseRendererSource2::GetAnimateInFPS() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseRendererSource2", "m_bAnimateInFPS");
}

void GCBaseRendererSource2::SetAnimateInFPS(bool value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_bAnimateInFPS", false, value);
}

GCParticleCollectionRendererFloatInput GCBaseRendererSource2::GetSelfIllumAmount() const {
    return GetSchemaValue<GCParticleCollectionRendererFloatInput>(m_ptr, "CBaseRendererSource2", "m_flSelfIllumAmount");
}

void GCBaseRendererSource2::SetSelfIllumAmount(GCParticleCollectionRendererFloatInput value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_flSelfIllumAmount", false, value);
}

GCParticleCollectionRendererFloatInput GCBaseRendererSource2::GetDiffuseAmount() const {
    return GetSchemaValue<GCParticleCollectionRendererFloatInput>(m_ptr, "CBaseRendererSource2", "m_flDiffuseAmount");
}

void GCBaseRendererSource2::SetDiffuseAmount(GCParticleCollectionRendererFloatInput value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_flDiffuseAmount", false, value);
}

GCParticleCollectionRendererFloatInput GCBaseRendererSource2::GetDiffuseClamp() const {
    return GetSchemaValue<GCParticleCollectionRendererFloatInput>(m_ptr, "CBaseRendererSource2", "m_flDiffuseClamp");
}

void GCBaseRendererSource2::SetDiffuseClamp(GCParticleCollectionRendererFloatInput value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_flDiffuseClamp", false, value);
}

int32_t GCBaseRendererSource2::GetLightingControlPoint() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBaseRendererSource2", "m_nLightingControlPoint");
}

void GCBaseRendererSource2::SetLightingControlPoint(int32_t value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_nLightingControlPoint", false, value);
}

GParticleAttributeIndex_t GCBaseRendererSource2::GetSelfIllumPerParticle() const {
    return GetSchemaValue<GParticleAttributeIndex_t>(m_ptr, "CBaseRendererSource2", "m_nSelfIllumPerParticle");
}

void GCBaseRendererSource2::SetSelfIllumPerParticle(GParticleAttributeIndex_t value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_nSelfIllumPerParticle", false, value);
}

ParticleOutputBlendMode_t GCBaseRendererSource2::GetOutputBlendMode() const {
    return GetSchemaValue<ParticleOutputBlendMode_t>(m_ptr, "CBaseRendererSource2", "m_nOutputBlendMode");
}

void GCBaseRendererSource2::SetOutputBlendMode(ParticleOutputBlendMode_t value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_nOutputBlendMode", false, value);
}

bool GCBaseRendererSource2::GetGammaCorrectVertexColors() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseRendererSource2", "m_bGammaCorrectVertexColors");
}

void GCBaseRendererSource2::SetGammaCorrectVertexColors(bool value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_bGammaCorrectVertexColors", false, value);
}

bool GCBaseRendererSource2::GetSaturateColorPreAlphaBlend() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseRendererSource2", "m_bSaturateColorPreAlphaBlend");
}

void GCBaseRendererSource2::SetSaturateColorPreAlphaBlend(bool value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_bSaturateColorPreAlphaBlend", false, value);
}

GCParticleCollectionRendererFloatInput GCBaseRendererSource2::GetAddSelfAmount() const {
    return GetSchemaValue<GCParticleCollectionRendererFloatInput>(m_ptr, "CBaseRendererSource2", "m_flAddSelfAmount");
}

void GCBaseRendererSource2::SetAddSelfAmount(GCParticleCollectionRendererFloatInput value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_flAddSelfAmount", false, value);
}

GCParticleCollectionRendererFloatInput GCBaseRendererSource2::GetDesaturation() const {
    return GetSchemaValue<GCParticleCollectionRendererFloatInput>(m_ptr, "CBaseRendererSource2", "m_flDesaturation");
}

void GCBaseRendererSource2::SetDesaturation(GCParticleCollectionRendererFloatInput value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_flDesaturation", false, value);
}

GCParticleCollectionRendererFloatInput GCBaseRendererSource2::GetOverbrightFactor() const {
    return GetSchemaValue<GCParticleCollectionRendererFloatInput>(m_ptr, "CBaseRendererSource2", "m_flOverbrightFactor");
}

void GCBaseRendererSource2::SetOverbrightFactor(GCParticleCollectionRendererFloatInput value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_flOverbrightFactor", false, value);
}

int32_t GCBaseRendererSource2::GetHSVShiftControlPoint() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBaseRendererSource2", "m_nHSVShiftControlPoint");
}

void GCBaseRendererSource2::SetHSVShiftControlPoint(int32_t value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_nHSVShiftControlPoint", false, value);
}

ParticleFogType_t GCBaseRendererSource2::GetFogType() const {
    return GetSchemaValue<ParticleFogType_t>(m_ptr, "CBaseRendererSource2", "m_nFogType");
}

void GCBaseRendererSource2::SetFogType(ParticleFogType_t value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_nFogType", false, value);
}

GCParticleCollectionRendererFloatInput GCBaseRendererSource2::GetFogAmount() const {
    return GetSchemaValue<GCParticleCollectionRendererFloatInput>(m_ptr, "CBaseRendererSource2", "m_flFogAmount");
}

void GCBaseRendererSource2::SetFogAmount(GCParticleCollectionRendererFloatInput value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_flFogAmount", false, value);
}

bool GCBaseRendererSource2::GetTintByFOW() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseRendererSource2", "m_bTintByFOW");
}

void GCBaseRendererSource2::SetTintByFOW(bool value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_bTintByFOW", false, value);
}

bool GCBaseRendererSource2::GetTintByGlobalLight() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseRendererSource2", "m_bTintByGlobalLight");
}

void GCBaseRendererSource2::SetTintByGlobalLight(bool value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_bTintByGlobalLight", false, value);
}

SpriteCardPerParticleScale_t GCBaseRendererSource2::GetPerParticleAlphaReference() const {
    return GetSchemaValue<SpriteCardPerParticleScale_t>(m_ptr, "CBaseRendererSource2", "m_nPerParticleAlphaReference");
}

void GCBaseRendererSource2::SetPerParticleAlphaReference(SpriteCardPerParticleScale_t value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_nPerParticleAlphaReference", false, value);
}

SpriteCardPerParticleScale_t GCBaseRendererSource2::GetPerParticleAlphaRefWindow() const {
    return GetSchemaValue<SpriteCardPerParticleScale_t>(m_ptr, "CBaseRendererSource2", "m_nPerParticleAlphaRefWindow");
}

void GCBaseRendererSource2::SetPerParticleAlphaRefWindow(SpriteCardPerParticleScale_t value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_nPerParticleAlphaRefWindow", false, value);
}

ParticleAlphaReferenceType_t GCBaseRendererSource2::GetAlphaReferenceType() const {
    return GetSchemaValue<ParticleAlphaReferenceType_t>(m_ptr, "CBaseRendererSource2", "m_nAlphaReferenceType");
}

void GCBaseRendererSource2::SetAlphaReferenceType(ParticleAlphaReferenceType_t value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_nAlphaReferenceType", false, value);
}

GCParticleCollectionRendererFloatInput GCBaseRendererSource2::GetAlphaReferenceSoftness() const {
    return GetSchemaValue<GCParticleCollectionRendererFloatInput>(m_ptr, "CBaseRendererSource2", "m_flAlphaReferenceSoftness");
}

void GCBaseRendererSource2::SetAlphaReferenceSoftness(GCParticleCollectionRendererFloatInput value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_flAlphaReferenceSoftness", false, value);
}

GCParticleCollectionRendererFloatInput GCBaseRendererSource2::GetSourceAlphaValueToMapToZero() const {
    return GetSchemaValue<GCParticleCollectionRendererFloatInput>(m_ptr, "CBaseRendererSource2", "m_flSourceAlphaValueToMapToZero");
}

void GCBaseRendererSource2::SetSourceAlphaValueToMapToZero(GCParticleCollectionRendererFloatInput value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_flSourceAlphaValueToMapToZero", false, value);
}

GCParticleCollectionRendererFloatInput GCBaseRendererSource2::GetSourceAlphaValueToMapToOne() const {
    return GetSchemaValue<GCParticleCollectionRendererFloatInput>(m_ptr, "CBaseRendererSource2", "m_flSourceAlphaValueToMapToOne");
}

void GCBaseRendererSource2::SetSourceAlphaValueToMapToOne(GCParticleCollectionRendererFloatInput value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_flSourceAlphaValueToMapToOne", false, value);
}

bool GCBaseRendererSource2::GetRefract() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseRendererSource2", "m_bRefract");
}

void GCBaseRendererSource2::SetRefract(bool value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_bRefract", false, value);
}

bool GCBaseRendererSource2::GetRefractSolid() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseRendererSource2", "m_bRefractSolid");
}

void GCBaseRendererSource2::SetRefractSolid(bool value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_bRefractSolid", false, value);
}

GCParticleCollectionRendererFloatInput GCBaseRendererSource2::GetRefractAmount() const {
    return GetSchemaValue<GCParticleCollectionRendererFloatInput>(m_ptr, "CBaseRendererSource2", "m_flRefractAmount");
}

void GCBaseRendererSource2::SetRefractAmount(GCParticleCollectionRendererFloatInput value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_flRefractAmount", false, value);
}

int32_t GCBaseRendererSource2::GetRefractBlurRadius() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBaseRendererSource2", "m_nRefractBlurRadius");
}

void GCBaseRendererSource2::SetRefractBlurRadius(int32_t value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_nRefractBlurRadius", false, value);
}

BlurFilterType_t GCBaseRendererSource2::GetRefractBlurType() const {
    return GetSchemaValue<BlurFilterType_t>(m_ptr, "CBaseRendererSource2", "m_nRefractBlurType");
}

void GCBaseRendererSource2::SetRefractBlurType(BlurFilterType_t value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_nRefractBlurType", false, value);
}

bool GCBaseRendererSource2::GetOnlyRenderInEffectsBloomPass() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseRendererSource2", "m_bOnlyRenderInEffectsBloomPass");
}

void GCBaseRendererSource2::SetOnlyRenderInEffectsBloomPass(bool value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_bOnlyRenderInEffectsBloomPass", false, value);
}

bool GCBaseRendererSource2::GetOnlyRenderInEffectsWaterPass() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseRendererSource2", "m_bOnlyRenderInEffectsWaterPass");
}

void GCBaseRendererSource2::SetOnlyRenderInEffectsWaterPass(bool value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_bOnlyRenderInEffectsWaterPass", false, value);
}

bool GCBaseRendererSource2::GetUseMixedResolutionRendering() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseRendererSource2", "m_bUseMixedResolutionRendering");
}

void GCBaseRendererSource2::SetUseMixedResolutionRendering(bool value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_bUseMixedResolutionRendering", false, value);
}

bool GCBaseRendererSource2::GetOnlyRenderInEffecsGameOverlay() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseRendererSource2", "m_bOnlyRenderInEffecsGameOverlay");
}

void GCBaseRendererSource2::SetOnlyRenderInEffecsGameOverlay(bool value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_bOnlyRenderInEffecsGameOverlay", false, value);
}

std::string GCBaseRendererSource2::GetStencilTestID() const {
    return GetSchemaValuePtr<char>(m_ptr, "CBaseRendererSource2", "m_stencilTestID");
}

void GCBaseRendererSource2::SetStencilTestID(std::string value) {
    WriteSchemaPtrValue(m_ptr, "CBaseRendererSource2", "m_stencilTestID", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 128);
}

bool GCBaseRendererSource2::GetStencilTestExclude() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseRendererSource2", "m_bStencilTestExclude");
}

void GCBaseRendererSource2::SetStencilTestExclude(bool value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_bStencilTestExclude", false, value);
}

std::string GCBaseRendererSource2::GetStencilWriteID() const {
    return GetSchemaValuePtr<char>(m_ptr, "CBaseRendererSource2", "m_stencilWriteID");
}

void GCBaseRendererSource2::SetStencilWriteID(std::string value) {
    WriteSchemaPtrValue(m_ptr, "CBaseRendererSource2", "m_stencilWriteID", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 128);
}

bool GCBaseRendererSource2::GetWriteStencilOnDepthPass() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseRendererSource2", "m_bWriteStencilOnDepthPass");
}

void GCBaseRendererSource2::SetWriteStencilOnDepthPass(bool value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_bWriteStencilOnDepthPass", false, value);
}

bool GCBaseRendererSource2::GetWriteStencilOnDepthFail() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseRendererSource2", "m_bWriteStencilOnDepthFail");
}

void GCBaseRendererSource2::SetWriteStencilOnDepthFail(bool value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_bWriteStencilOnDepthFail", false, value);
}

bool GCBaseRendererSource2::GetReverseZBuffering() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseRendererSource2", "m_bReverseZBuffering");
}

void GCBaseRendererSource2::SetReverseZBuffering(bool value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_bReverseZBuffering", false, value);
}

bool GCBaseRendererSource2::GetDisableZBuffering() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseRendererSource2", "m_bDisableZBuffering");
}

void GCBaseRendererSource2::SetDisableZBuffering(bool value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_bDisableZBuffering", false, value);
}

ParticleDepthFeatheringMode_t GCBaseRendererSource2::GetFeatheringMode() const {
    return GetSchemaValue<ParticleDepthFeatheringMode_t>(m_ptr, "CBaseRendererSource2", "m_nFeatheringMode");
}

void GCBaseRendererSource2::SetFeatheringMode(ParticleDepthFeatheringMode_t value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_nFeatheringMode", false, value);
}

GCParticleCollectionRendererFloatInput GCBaseRendererSource2::GetFeatheringMinDist() const {
    return GetSchemaValue<GCParticleCollectionRendererFloatInput>(m_ptr, "CBaseRendererSource2", "m_flFeatheringMinDist");
}

void GCBaseRendererSource2::SetFeatheringMinDist(GCParticleCollectionRendererFloatInput value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_flFeatheringMinDist", false, value);
}

GCParticleCollectionRendererFloatInput GCBaseRendererSource2::GetFeatheringMaxDist() const {
    return GetSchemaValue<GCParticleCollectionRendererFloatInput>(m_ptr, "CBaseRendererSource2", "m_flFeatheringMaxDist");
}

void GCBaseRendererSource2::SetFeatheringMaxDist(GCParticleCollectionRendererFloatInput value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_flFeatheringMaxDist", false, value);
}

GCParticleCollectionRendererFloatInput GCBaseRendererSource2::GetFeatheringFilter() const {
    return GetSchemaValue<GCParticleCollectionRendererFloatInput>(m_ptr, "CBaseRendererSource2", "m_flFeatheringFilter");
}

void GCBaseRendererSource2::SetFeatheringFilter(GCParticleCollectionRendererFloatInput value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_flFeatheringFilter", false, value);
}

GCParticleCollectionRendererFloatInput GCBaseRendererSource2::GetDepthBias() const {
    return GetSchemaValue<GCParticleCollectionRendererFloatInput>(m_ptr, "CBaseRendererSource2", "m_flDepthBias");
}

void GCBaseRendererSource2::SetDepthBias(GCParticleCollectionRendererFloatInput value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_flDepthBias", false, value);
}

ParticleSortingChoiceList_t GCBaseRendererSource2::GetSortMethod() const {
    return GetSchemaValue<ParticleSortingChoiceList_t>(m_ptr, "CBaseRendererSource2", "m_nSortMethod");
}

void GCBaseRendererSource2::SetSortMethod(ParticleSortingChoiceList_t value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_nSortMethod", false, value);
}

bool GCBaseRendererSource2::GetBlendFramesSeq0() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseRendererSource2", "m_bBlendFramesSeq0");
}

void GCBaseRendererSource2::SetBlendFramesSeq0(bool value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_bBlendFramesSeq0", false, value);
}

bool GCBaseRendererSource2::GetMaxLuminanceBlendingSequence0() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseRendererSource2", "m_bMaxLuminanceBlendingSequence0");
}

void GCBaseRendererSource2::SetMaxLuminanceBlendingSequence0(bool value) {
    SetSchemaValue(m_ptr, "CBaseRendererSource2", "m_bMaxLuminanceBlendingSequence0", false, value);
}

std::string GCBaseRendererSource2::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBaseRendererSource2::IsValid() {
    return (m_ptr != nullptr);
}

GCSSDSMsg_ViewRender::GCSSDSMsg_ViewRender(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSSDSMsg_ViewRender::GCSSDSMsg_ViewRender(void *ptr) {
    m_ptr = ptr;
}

GSceneViewId_t GCSSDSMsg_ViewRender::GetViewId() const {
    return GetSchemaValue<GSceneViewId_t>(m_ptr, "CSSDSMsg_ViewRender", "m_viewId");
}

void GCSSDSMsg_ViewRender::SetViewId(GSceneViewId_t value) {
    SetSchemaValue(m_ptr, "CSSDSMsg_ViewRender", "m_viewId", false, value);
}

CUtlString GCSSDSMsg_ViewRender::GetViewName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CSSDSMsg_ViewRender", "m_ViewName");
}

void GCSSDSMsg_ViewRender::SetViewName(CUtlString value) {
    SetSchemaValue(m_ptr, "CSSDSMsg_ViewRender", "m_ViewName", false, value);
}

std::string GCSSDSMsg_ViewRender::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSSDSMsg_ViewRender::IsValid() {
    return (m_ptr != nullptr);
}

GCZeroPoseUpdateNode::GCZeroPoseUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCZeroPoseUpdateNode::GCZeroPoseUpdateNode(void *ptr) {
    m_ptr = ptr;
}

std::string GCZeroPoseUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCZeroPoseUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GFeFitWeight_t::GFeFitWeight_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeFitWeight_t::GFeFitWeight_t(void *ptr) {
    m_ptr = ptr;
}

float GFeFitWeight_t::GetWeight() const {
    return GetSchemaValue<float>(m_ptr, "FeFitWeight_t", "flWeight");
}

void GFeFitWeight_t::SetWeight(float value) {
    SetSchemaValue(m_ptr, "FeFitWeight_t", "flWeight", true, value);
}

uint16_t GFeFitWeight_t::GetNode() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeFitWeight_t", "nNode");
}

void GFeFitWeight_t::SetNode(uint16_t value) {
    SetSchemaValue(m_ptr, "FeFitWeight_t", "nNode", true, value);
}

uint16_t GFeFitWeight_t::GetDummy() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeFitWeight_t", "nDummy");
}

void GFeFitWeight_t::SetDummy(uint16_t value) {
    SetSchemaValue(m_ptr, "FeFitWeight_t", "nDummy", true, value);
}

std::string GFeFitWeight_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeFitWeight_t::IsValid() {
    return (m_ptr != nullptr);
}

GCFootCycleMetricEvaluator::GCFootCycleMetricEvaluator(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFootCycleMetricEvaluator::GCFootCycleMetricEvaluator(void *ptr) {
    m_ptr = ptr;
}

std::vector<int32> GCFootCycleMetricEvaluator::GetFootIndices() const {
    CUtlVector<int32>* vec = GetSchemaValue<CUtlVector<int32>*>(m_ptr, "CFootCycleMetricEvaluator", "m_footIndices"); std::vector<int32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCFootCycleMetricEvaluator::SetFootIndices(std::vector<int32> value) {
    SetSchemaValueCUtlVector<int32>(m_ptr, "CFootCycleMetricEvaluator", "m_footIndices", false, value);
}

std::string GCFootCycleMetricEvaluator::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFootCycleMetricEvaluator::IsValid() {
    return (m_ptr != nullptr);
}

GCFootPositionMetricEvaluator::GCFootPositionMetricEvaluator(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFootPositionMetricEvaluator::GCFootPositionMetricEvaluator(void *ptr) {
    m_ptr = ptr;
}

std::vector<int32> GCFootPositionMetricEvaluator::GetFootIndices() const {
    CUtlVector<int32>* vec = GetSchemaValue<CUtlVector<int32>*>(m_ptr, "CFootPositionMetricEvaluator", "m_footIndices"); std::vector<int32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCFootPositionMetricEvaluator::SetFootIndices(std::vector<int32> value) {
    SetSchemaValueCUtlVector<int32>(m_ptr, "CFootPositionMetricEvaluator", "m_footIndices", false, value);
}

bool GCFootPositionMetricEvaluator::GetIgnoreSlope() const {
    return GetSchemaValue<bool>(m_ptr, "CFootPositionMetricEvaluator", "m_bIgnoreSlope");
}

void GCFootPositionMetricEvaluator::SetIgnoreSlope(bool value) {
    SetSchemaValue(m_ptr, "CFootPositionMetricEvaluator", "m_bIgnoreSlope", false, value);
}

std::string GCFootPositionMetricEvaluator::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFootPositionMetricEvaluator::IsValid() {
    return (m_ptr != nullptr);
}

GCFlexOp::GCFlexOp(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFlexOp::GCFlexOp(void *ptr) {
    m_ptr = ptr;
}

FlexOpCode_t GCFlexOp::GetOpCode() const {
    return GetSchemaValue<FlexOpCode_t>(m_ptr, "CFlexOp", "m_OpCode");
}

void GCFlexOp::SetOpCode(FlexOpCode_t value) {
    SetSchemaValue(m_ptr, "CFlexOp", "m_OpCode", false, value);
}

int32_t GCFlexOp::GetData() const {
    return GetSchemaValue<int32_t>(m_ptr, "CFlexOp", "m_Data");
}

void GCFlexOp::SetData(int32_t value) {
    SetSchemaValue(m_ptr, "CFlexOp", "m_Data", false, value);
}

std::string GCFlexOp::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFlexOp::IsValid() {
    return (m_ptr != nullptr);
}

GCPointConstraint::GCPointConstraint(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPointConstraint::GCPointConstraint(void *ptr) {
    m_ptr = ptr;
}

std::string GCPointConstraint::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPointConstraint::IsValid() {
    return (m_ptr != nullptr);
}

GMotionBlendItem::GMotionBlendItem(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GMotionBlendItem::GMotionBlendItem(void *ptr) {
    m_ptr = ptr;
}

float GMotionBlendItem::GetKeyValue() const {
    return GetSchemaValue<float>(m_ptr, "MotionBlendItem", "m_flKeyValue");
}

void GMotionBlendItem::SetKeyValue(float value) {
    SetSchemaValue(m_ptr, "MotionBlendItem", "m_flKeyValue", false, value);
}

std::string GMotionBlendItem::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GMotionBlendItem::IsValid() {
    return (m_ptr != nullptr);
}

GCVectorQuantizer::GCVectorQuantizer(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCVectorQuantizer::GCVectorQuantizer(void *ptr) {
    m_ptr = ptr;
}

std::vector<float32> GCVectorQuantizer::GetCentroidVectors() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "CVectorQuantizer", "m_centroidVectors"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCVectorQuantizer::SetCentroidVectors(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "CVectorQuantizer", "m_centroidVectors", false, value);
}

int32_t GCVectorQuantizer::GetCentroids() const {
    return GetSchemaValue<int32_t>(m_ptr, "CVectorQuantizer", "m_nCentroids");
}

void GCVectorQuantizer::SetCentroids(int32_t value) {
    SetSchemaValue(m_ptr, "CVectorQuantizer", "m_nCentroids", false, value);
}

int32_t GCVectorQuantizer::GetDimensions() const {
    return GetSchemaValue<int32_t>(m_ptr, "CVectorQuantizer", "m_nDimensions");
}

void GCVectorQuantizer::SetDimensions(int32_t value) {
    SetSchemaValue(m_ptr, "CVectorQuantizer", "m_nDimensions", false, value);
}

std::string GCVectorQuantizer::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCVectorQuantizer::IsValid() {
    return (m_ptr != nullptr);
}

GSignatureOutflow_Resume::GSignatureOutflow_Resume(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GSignatureOutflow_Resume::GSignatureOutflow_Resume(void *ptr) {
    m_ptr = ptr;
}

std::string GSignatureOutflow_Resume::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GSignatureOutflow_Resume::IsValid() {
    return (m_ptr != nullptr);
}

GFeBoxRigid_t::GFeBoxRigid_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeBoxRigid_t::GFeBoxRigid_t(void *ptr) {
    m_ptr = ptr;
}

uint16_t GFeBoxRigid_t::GetNode() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeBoxRigid_t", "nNode");
}

void GFeBoxRigid_t::SetNode(uint16_t value) {
    SetSchemaValue(m_ptr, "FeBoxRigid_t", "nNode", true, value);
}

uint16_t GFeBoxRigid_t::GetCollisionMask() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeBoxRigid_t", "nCollisionMask");
}

void GFeBoxRigid_t::SetCollisionMask(uint16_t value) {
    SetSchemaValue(m_ptr, "FeBoxRigid_t", "nCollisionMask", true, value);
}

Vector GFeBoxRigid_t::GetSize() const {
    return GetSchemaValue<Vector>(m_ptr, "FeBoxRigid_t", "vSize");
}

void GFeBoxRigid_t::SetSize(Vector value) {
    SetSchemaValue(m_ptr, "FeBoxRigid_t", "vSize", true, value);
}

uint16_t GFeBoxRigid_t::GetVertexMapIndex() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeBoxRigid_t", "nVertexMapIndex");
}

void GFeBoxRigid_t::SetVertexMapIndex(uint16_t value) {
    SetSchemaValue(m_ptr, "FeBoxRigid_t", "nVertexMapIndex", true, value);
}

uint16_t GFeBoxRigid_t::GetFlags() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeBoxRigid_t", "nFlags");
}

void GFeBoxRigid_t::SetFlags(uint16_t value) {
    SetSchemaValue(m_ptr, "FeBoxRigid_t", "nFlags", true, value);
}

std::string GFeBoxRigid_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeBoxRigid_t::IsValid() {
    return (m_ptr != nullptr);
}

GCIntAnimParameter::GCIntAnimParameter(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCIntAnimParameter::GCIntAnimParameter(void *ptr) {
    m_ptr = ptr;
}

int32_t GCIntAnimParameter::GetDefaultValue() const {
    return GetSchemaValue<int32_t>(m_ptr, "CIntAnimParameter", "m_defaultValue");
}

void GCIntAnimParameter::SetDefaultValue(int32_t value) {
    SetSchemaValue(m_ptr, "CIntAnimParameter", "m_defaultValue", false, value);
}

int32_t GCIntAnimParameter::GetMinValue() const {
    return GetSchemaValue<int32_t>(m_ptr, "CIntAnimParameter", "m_minValue");
}

void GCIntAnimParameter::SetMinValue(int32_t value) {
    SetSchemaValue(m_ptr, "CIntAnimParameter", "m_minValue", false, value);
}

int32_t GCIntAnimParameter::GetMaxValue() const {
    return GetSchemaValue<int32_t>(m_ptr, "CIntAnimParameter", "m_maxValue");
}

void GCIntAnimParameter::SetMaxValue(int32_t value) {
    SetSchemaValue(m_ptr, "CIntAnimParameter", "m_maxValue", false, value);
}

std::string GCIntAnimParameter::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCIntAnimParameter::IsValid() {
    return (m_ptr != nullptr);
}

GCNmTargetValueNode::GCNmTargetValueNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmTargetValueNode::GCNmTargetValueNode(void *ptr) {
    m_ptr = ptr;
}

std::string GCNmTargetValueNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmTargetValueNode::IsValid() {
    return (m_ptr != nullptr);
}

GEventSimpleLoopFrameUpdate_t::GEventSimpleLoopFrameUpdate_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEventSimpleLoopFrameUpdate_t::GEventSimpleLoopFrameUpdate_t(void *ptr) {
    m_ptr = ptr;
}

GEngineLoopState_t GEventSimpleLoopFrameUpdate_t::GetLoopState() const {
    return GetSchemaValue<GEngineLoopState_t>(m_ptr, "EventSimpleLoopFrameUpdate_t", "m_LoopState");
}

void GEventSimpleLoopFrameUpdate_t::SetLoopState(GEngineLoopState_t value) {
    SetSchemaValue(m_ptr, "EventSimpleLoopFrameUpdate_t", "m_LoopState", true, value);
}

float GEventSimpleLoopFrameUpdate_t::GetRealTime() const {
    return GetSchemaValue<float>(m_ptr, "EventSimpleLoopFrameUpdate_t", "m_flRealTime");
}

void GEventSimpleLoopFrameUpdate_t::SetRealTime(float value) {
    SetSchemaValue(m_ptr, "EventSimpleLoopFrameUpdate_t", "m_flRealTime", true, value);
}

float GEventSimpleLoopFrameUpdate_t::GetFrameTime() const {
    return GetSchemaValue<float>(m_ptr, "EventSimpleLoopFrameUpdate_t", "m_flFrameTime");
}

void GEventSimpleLoopFrameUpdate_t::SetFrameTime(float value) {
    SetSchemaValue(m_ptr, "EventSimpleLoopFrameUpdate_t", "m_flFrameTime", true, value);
}

std::string GEventSimpleLoopFrameUpdate_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEventSimpleLoopFrameUpdate_t::IsValid() {
    return (m_ptr != nullptr);
}

GEventServerAdvanceTick_t::GEventServerAdvanceTick_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEventServerAdvanceTick_t::GEventServerAdvanceTick_t(void *ptr) {
    m_ptr = ptr;
}

std::string GEventServerAdvanceTick_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEventServerAdvanceTick_t::IsValid() {
    return (m_ptr != nullptr);
}

GTimedEvent::GTimedEvent(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GTimedEvent::GTimedEvent(void *ptr) {
    m_ptr = ptr;
}

float GTimedEvent::GetTimeBetweenEvents() const {
    return GetSchemaValue<float>(m_ptr, "TimedEvent", "m_TimeBetweenEvents");
}

void GTimedEvent::SetTimeBetweenEvents(float value) {
    SetSchemaValue(m_ptr, "TimedEvent", "m_TimeBetweenEvents", false, value);
}

float GTimedEvent::GetNextEvent() const {
    return GetSchemaValue<float>(m_ptr, "TimedEvent", "m_fNextEvent");
}

void GTimedEvent::SetNextEvent(float value) {
    SetSchemaValue(m_ptr, "TimedEvent", "m_fNextEvent", false, value);
}

std::string GTimedEvent::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GTimedEvent::IsValid() {
    return (m_ptr != nullptr);
}

GTextureGroup_t::GTextureGroup_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GTextureGroup_t::GTextureGroup_t(void *ptr) {
    m_ptr = ptr;
}

bool GTextureGroup_t::GetEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "TextureGroup_t", "m_bEnabled");
}

void GTextureGroup_t::SetEnabled(bool value) {
    SetSchemaValue(m_ptr, "TextureGroup_t", "m_bEnabled", true, value);
}

bool GTextureGroup_t::GetReplaceTextureWithGradient() const {
    return GetSchemaValue<bool>(m_ptr, "TextureGroup_t", "m_bReplaceTextureWithGradient");
}

void GTextureGroup_t::SetReplaceTextureWithGradient(bool value) {
    SetSchemaValue(m_ptr, "TextureGroup_t", "m_bReplaceTextureWithGradient", true, value);
}

SpriteCardTextureType_t GTextureGroup_t::GetTextureType() const {
    return GetSchemaValue<SpriteCardTextureType_t>(m_ptr, "TextureGroup_t", "m_nTextureType");
}

void GTextureGroup_t::SetTextureType(SpriteCardTextureType_t value) {
    SetSchemaValue(m_ptr, "TextureGroup_t", "m_nTextureType", true, value);
}

SpriteCardTextureChannel_t GTextureGroup_t::GetTextureChannels() const {
    return GetSchemaValue<SpriteCardTextureChannel_t>(m_ptr, "TextureGroup_t", "m_nTextureChannels");
}

void GTextureGroup_t::SetTextureChannels(SpriteCardTextureChannel_t value) {
    SetSchemaValue(m_ptr, "TextureGroup_t", "m_nTextureChannels", true, value);
}

ParticleTextureLayerBlendType_t GTextureGroup_t::GetTextureBlendMode() const {
    return GetSchemaValue<ParticleTextureLayerBlendType_t>(m_ptr, "TextureGroup_t", "m_nTextureBlendMode");
}

void GTextureGroup_t::SetTextureBlendMode(ParticleTextureLayerBlendType_t value) {
    SetSchemaValue(m_ptr, "TextureGroup_t", "m_nTextureBlendMode", true, value);
}

GCParticleCollectionRendererFloatInput GTextureGroup_t::GetTextureBlend() const {
    return GetSchemaValue<GCParticleCollectionRendererFloatInput>(m_ptr, "TextureGroup_t", "m_flTextureBlend");
}

void GTextureGroup_t::SetTextureBlend(GCParticleCollectionRendererFloatInput value) {
    SetSchemaValue(m_ptr, "TextureGroup_t", "m_flTextureBlend", true, value);
}

GTextureControls_t GTextureGroup_t::GetTextureControls() const {
    return GetSchemaValue<GTextureControls_t>(m_ptr, "TextureGroup_t", "m_TextureControls");
}

void GTextureGroup_t::SetTextureControls(GTextureControls_t value) {
    SetSchemaValue(m_ptr, "TextureGroup_t", "m_TextureControls", true, value);
}

std::string GTextureGroup_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GTextureGroup_t::IsValid() {
    return (m_ptr != nullptr);
}

GCSosGroupActionSoundeventPrioritySchema::GCSosGroupActionSoundeventPrioritySchema(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSosGroupActionSoundeventPrioritySchema::GCSosGroupActionSoundeventPrioritySchema(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCSosGroupActionSoundeventPrioritySchema::GetPriorityValue() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CSosGroupActionSoundeventPrioritySchema", "m_priorityValue");
}

void GCSosGroupActionSoundeventPrioritySchema::SetPriorityValue(CUtlString value) {
    SetSchemaValue(m_ptr, "CSosGroupActionSoundeventPrioritySchema", "m_priorityValue", false, value);
}

CUtlString GCSosGroupActionSoundeventPrioritySchema::GetPriorityVolumeScalar() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CSosGroupActionSoundeventPrioritySchema", "m_priorityVolumeScalar");
}

void GCSosGroupActionSoundeventPrioritySchema::SetPriorityVolumeScalar(CUtlString value) {
    SetSchemaValue(m_ptr, "CSosGroupActionSoundeventPrioritySchema", "m_priorityVolumeScalar", false, value);
}

CUtlString GCSosGroupActionSoundeventPrioritySchema::GetPriorityContributeButDontRead() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CSosGroupActionSoundeventPrioritySchema", "m_priorityContributeButDontRead");
}

void GCSosGroupActionSoundeventPrioritySchema::SetPriorityContributeButDontRead(CUtlString value) {
    SetSchemaValue(m_ptr, "CSosGroupActionSoundeventPrioritySchema", "m_priorityContributeButDontRead", false, value);
}

CUtlString GCSosGroupActionSoundeventPrioritySchema::GetPriorityReadButDontContribute() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CSosGroupActionSoundeventPrioritySchema", "m_bPriorityReadButDontContribute");
}

void GCSosGroupActionSoundeventPrioritySchema::SetPriorityReadButDontContribute(CUtlString value) {
    SetSchemaValue(m_ptr, "CSosGroupActionSoundeventPrioritySchema", "m_bPriorityReadButDontContribute", false, value);
}

std::string GCSosGroupActionSoundeventPrioritySchema::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSosGroupActionSoundeventPrioritySchema::IsValid() {
    return (m_ptr != nullptr);
}

GCBonePositionMetricEvaluator::GCBonePositionMetricEvaluator(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBonePositionMetricEvaluator::GCBonePositionMetricEvaluator(void *ptr) {
    m_ptr = ptr;
}

int32_t GCBonePositionMetricEvaluator::GetBoneIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBonePositionMetricEvaluator", "m_nBoneIndex");
}

void GCBonePositionMetricEvaluator::SetBoneIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CBonePositionMetricEvaluator", "m_nBoneIndex", false, value);
}

std::string GCBonePositionMetricEvaluator::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBonePositionMetricEvaluator::IsValid() {
    return (m_ptr != nullptr);
}

GCPhysSurfacePropertiesAudio::GCPhysSurfacePropertiesAudio(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPhysSurfacePropertiesAudio::GCPhysSurfacePropertiesAudio(void *ptr) {
    m_ptr = ptr;
}

float GCPhysSurfacePropertiesAudio::GetReflectivity() const {
    return GetSchemaValue<float>(m_ptr, "CPhysSurfacePropertiesAudio", "m_reflectivity");
}

void GCPhysSurfacePropertiesAudio::SetReflectivity(float value) {
    SetSchemaValue(m_ptr, "CPhysSurfacePropertiesAudio", "m_reflectivity", false, value);
}

float GCPhysSurfacePropertiesAudio::GetHardnessFactor() const {
    return GetSchemaValue<float>(m_ptr, "CPhysSurfacePropertiesAudio", "m_hardnessFactor");
}

void GCPhysSurfacePropertiesAudio::SetHardnessFactor(float value) {
    SetSchemaValue(m_ptr, "CPhysSurfacePropertiesAudio", "m_hardnessFactor", false, value);
}

float GCPhysSurfacePropertiesAudio::GetRoughnessFactor() const {
    return GetSchemaValue<float>(m_ptr, "CPhysSurfacePropertiesAudio", "m_roughnessFactor");
}

void GCPhysSurfacePropertiesAudio::SetRoughnessFactor(float value) {
    SetSchemaValue(m_ptr, "CPhysSurfacePropertiesAudio", "m_roughnessFactor", false, value);
}

float GCPhysSurfacePropertiesAudio::GetRoughThreshold() const {
    return GetSchemaValue<float>(m_ptr, "CPhysSurfacePropertiesAudio", "m_roughThreshold");
}

void GCPhysSurfacePropertiesAudio::SetRoughThreshold(float value) {
    SetSchemaValue(m_ptr, "CPhysSurfacePropertiesAudio", "m_roughThreshold", false, value);
}

float GCPhysSurfacePropertiesAudio::GetHardThreshold() const {
    return GetSchemaValue<float>(m_ptr, "CPhysSurfacePropertiesAudio", "m_hardThreshold");
}

void GCPhysSurfacePropertiesAudio::SetHardThreshold(float value) {
    SetSchemaValue(m_ptr, "CPhysSurfacePropertiesAudio", "m_hardThreshold", false, value);
}

float GCPhysSurfacePropertiesAudio::GetHardVelocityThreshold() const {
    return GetSchemaValue<float>(m_ptr, "CPhysSurfacePropertiesAudio", "m_hardVelocityThreshold");
}

void GCPhysSurfacePropertiesAudio::SetHardVelocityThreshold(float value) {
    SetSchemaValue(m_ptr, "CPhysSurfacePropertiesAudio", "m_hardVelocityThreshold", false, value);
}

float GCPhysSurfacePropertiesAudio::GetStaticImpactVolume() const {
    return GetSchemaValue<float>(m_ptr, "CPhysSurfacePropertiesAudio", "m_flStaticImpactVolume");
}

void GCPhysSurfacePropertiesAudio::SetStaticImpactVolume(float value) {
    SetSchemaValue(m_ptr, "CPhysSurfacePropertiesAudio", "m_flStaticImpactVolume", false, value);
}

float GCPhysSurfacePropertiesAudio::GetOcclusionFactor() const {
    return GetSchemaValue<float>(m_ptr, "CPhysSurfacePropertiesAudio", "m_flOcclusionFactor");
}

void GCPhysSurfacePropertiesAudio::SetOcclusionFactor(float value) {
    SetSchemaValue(m_ptr, "CPhysSurfacePropertiesAudio", "m_flOcclusionFactor", false, value);
}

std::string GCPhysSurfacePropertiesAudio::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPhysSurfacePropertiesAudio::IsValid() {
    return (m_ptr != nullptr);
}

GCNmIDValueNode::GCNmIDValueNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmIDValueNode::GCNmIDValueNode(void *ptr) {
    m_ptr = ptr;
}

std::string GCNmIDValueNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmIDValueNode::IsValid() {
    return (m_ptr != nullptr);
}

GFeSimdNodeBase_t::GFeSimdNodeBase_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeSimdNodeBase_t::GFeSimdNodeBase_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<uint16_t> GFeSimdNodeBase_t::GetNode() const {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeSimdNodeBase_t", "nNode"); std::vector<uint16_t> ret; for(int i = 0; i < 4; i++) { ret.push_back(outValue[i]); } return ret;
}

void GFeSimdNodeBase_t::SetNode(std::vector<uint16_t> value) {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeSimdNodeBase_t", "nNode"); for(int i = 0; i < 4; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "FeSimdNodeBase_t", "nNode", true, outValue);
}

std::vector<uint16_t> GFeSimdNodeBase_t::GetNodeX0() const {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeSimdNodeBase_t", "nNodeX0"); std::vector<uint16_t> ret; for(int i = 0; i < 4; i++) { ret.push_back(outValue[i]); } return ret;
}

void GFeSimdNodeBase_t::SetNodeX0(std::vector<uint16_t> value) {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeSimdNodeBase_t", "nNodeX0"); for(int i = 0; i < 4; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "FeSimdNodeBase_t", "nNodeX0", true, outValue);
}

std::vector<uint16_t> GFeSimdNodeBase_t::GetNodeX1() const {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeSimdNodeBase_t", "nNodeX1"); std::vector<uint16_t> ret; for(int i = 0; i < 4; i++) { ret.push_back(outValue[i]); } return ret;
}

void GFeSimdNodeBase_t::SetNodeX1(std::vector<uint16_t> value) {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeSimdNodeBase_t", "nNodeX1"); for(int i = 0; i < 4; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "FeSimdNodeBase_t", "nNodeX1", true, outValue);
}

std::vector<uint16_t> GFeSimdNodeBase_t::GetNodeY0() const {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeSimdNodeBase_t", "nNodeY0"); std::vector<uint16_t> ret; for(int i = 0; i < 4; i++) { ret.push_back(outValue[i]); } return ret;
}

void GFeSimdNodeBase_t::SetNodeY0(std::vector<uint16_t> value) {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeSimdNodeBase_t", "nNodeY0"); for(int i = 0; i < 4; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "FeSimdNodeBase_t", "nNodeY0", true, outValue);
}

std::vector<uint16_t> GFeSimdNodeBase_t::GetNodeY1() const {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeSimdNodeBase_t", "nNodeY1"); std::vector<uint16_t> ret; for(int i = 0; i < 4; i++) { ret.push_back(outValue[i]); } return ret;
}

void GFeSimdNodeBase_t::SetNodeY1(std::vector<uint16_t> value) {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeSimdNodeBase_t", "nNodeY1"); for(int i = 0; i < 4; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "FeSimdNodeBase_t", "nNodeY1", true, outValue);
}

std::vector<uint16_t> GFeSimdNodeBase_t::GetDummy() const {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeSimdNodeBase_t", "nDummy"); std::vector<uint16_t> ret; for(int i = 0; i < 4; i++) { ret.push_back(outValue[i]); } return ret;
}

void GFeSimdNodeBase_t::SetDummy(std::vector<uint16_t> value) {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeSimdNodeBase_t", "nDummy"); for(int i = 0; i < 4; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "FeSimdNodeBase_t", "nDummy", true, outValue);
}

GFourQuaternions GFeSimdNodeBase_t::GetAdjust() const {
    return GetSchemaValue<GFourQuaternions>(m_ptr, "FeSimdNodeBase_t", "qAdjust");
}

void GFeSimdNodeBase_t::SetAdjust(GFourQuaternions value) {
    SetSchemaValue(m_ptr, "FeSimdNodeBase_t", "qAdjust", true, value);
}

std::string GFeSimdNodeBase_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeSimdNodeBase_t::IsValid() {
    return (m_ptr != nullptr);
}

GPermModelExtPart_t::GPermModelExtPart_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GPermModelExtPart_t::GPermModelExtPart_t(void *ptr) {
    m_ptr = ptr;
}

CUtlString GPermModelExtPart_t::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "PermModelExtPart_t", "m_Name");
}

void GPermModelExtPart_t::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "PermModelExtPart_t", "m_Name", true, value);
}

int32_t GPermModelExtPart_t::GetParent() const {
    return GetSchemaValue<int32_t>(m_ptr, "PermModelExtPart_t", "m_nParent");
}

void GPermModelExtPart_t::SetParent(int32_t value) {
    SetSchemaValue(m_ptr, "PermModelExtPart_t", "m_nParent", true, value);
}

std::string GPermModelExtPart_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GPermModelExtPart_t::IsValid() {
    return (m_ptr != nullptr);
}

GCCurrentRotationVelocityMetricEvaluator::GCCurrentRotationVelocityMetricEvaluator(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCurrentRotationVelocityMetricEvaluator::GCCurrentRotationVelocityMetricEvaluator(void *ptr) {
    m_ptr = ptr;
}

std::string GCCurrentRotationVelocityMetricEvaluator::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCurrentRotationVelocityMetricEvaluator::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimEventDefinition::GCAnimEventDefinition(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimEventDefinition::GCAnimEventDefinition(void *ptr) {
    m_ptr = ptr;
}

int32_t GCAnimEventDefinition::GetFrame() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimEventDefinition", "m_nFrame");
}

void GCAnimEventDefinition::SetFrame(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimEventDefinition", "m_nFrame", false, value);
}

int32_t GCAnimEventDefinition::GetEndFrame() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimEventDefinition", "m_nEndFrame");
}

void GCAnimEventDefinition::SetEndFrame(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimEventDefinition", "m_nEndFrame", false, value);
}

float GCAnimEventDefinition::GetCycle() const {
    return GetSchemaValue<float>(m_ptr, "CAnimEventDefinition", "m_flCycle");
}

void GCAnimEventDefinition::SetCycle(float value) {
    SetSchemaValue(m_ptr, "CAnimEventDefinition", "m_flCycle", false, value);
}

float GCAnimEventDefinition::GetDuration() const {
    return GetSchemaValue<float>(m_ptr, "CAnimEventDefinition", "m_flDuration");
}

void GCAnimEventDefinition::SetDuration(float value) {
    SetSchemaValue(m_ptr, "CAnimEventDefinition", "m_flDuration", false, value);
}

CBufferString GCAnimEventDefinition::GetLegacyOptions() const {
    return GetSchemaValue<CBufferString>(m_ptr, "CAnimEventDefinition", "m_sLegacyOptions");
}

void GCAnimEventDefinition::SetLegacyOptions(CBufferString value) {
    SetSchemaValue(m_ptr, "CAnimEventDefinition", "m_sLegacyOptions", false, value);
}

std::string GCAnimEventDefinition::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimEventDefinition::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimEnum::GCAnimEnum(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimEnum::GCAnimEnum(void *ptr) {
    m_ptr = ptr;
}

uint8_t GCAnimEnum::GetValue() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CAnimEnum", "m_value");
}

void GCAnimEnum::SetValue(uint8_t value) {
    SetSchemaValue(m_ptr, "CAnimEnum", "m_value", false, value);
}

std::string GCAnimEnum::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimEnum::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimFrameBlockAnim::GCAnimFrameBlockAnim(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimFrameBlockAnim::GCAnimFrameBlockAnim(void *ptr) {
    m_ptr = ptr;
}

int32_t GCAnimFrameBlockAnim::GetStartFrame() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimFrameBlockAnim", "m_nStartFrame");
}

void GCAnimFrameBlockAnim::SetStartFrame(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimFrameBlockAnim", "m_nStartFrame", false, value);
}

int32_t GCAnimFrameBlockAnim::GetEndFrame() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimFrameBlockAnim", "m_nEndFrame");
}

void GCAnimFrameBlockAnim::SetEndFrame(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimFrameBlockAnim", "m_nEndFrame", false, value);
}

std::vector<int32> GCAnimFrameBlockAnim::GetSegmentIndexArray() const {
    CUtlVector<int32>* vec = GetSchemaValue<CUtlVector<int32>*>(m_ptr, "CAnimFrameBlockAnim", "m_segmentIndexArray"); std::vector<int32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimFrameBlockAnim::SetSegmentIndexArray(std::vector<int32> value) {
    SetSchemaValueCUtlVector<int32>(m_ptr, "CAnimFrameBlockAnim", "m_segmentIndexArray", false, value);
}

std::string GCAnimFrameBlockAnim::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimFrameBlockAnim::IsValid() {
    return (m_ptr != nullptr);
}

GCNmVirtualParameterIDNode::GCNmVirtualParameterIDNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmVirtualParameterIDNode::GCNmVirtualParameterIDNode(void *ptr) {
    m_ptr = ptr;
}

int16_t GCNmVirtualParameterIDNode::GetChildNodeIdx() const {
    return GetSchemaValue<int16_t>(m_ptr, "CNmVirtualParameterIDNode", "m_nChildNodeIdx");
}

void GCNmVirtualParameterIDNode::SetChildNodeIdx(int16_t value) {
    SetSchemaValue(m_ptr, "CNmVirtualParameterIDNode", "m_nChildNodeIdx", false, value);
}

std::string GCNmVirtualParameterIDNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmVirtualParameterIDNode::IsValid() {
    return (m_ptr != nullptr);
}

GCFlashlightEffect::GCFlashlightEffect(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFlashlightEffect::GCFlashlightEffect(void *ptr) {
    m_ptr = ptr;
}

bool GCFlashlightEffect::GetIsOn() const {
    return GetSchemaValue<bool>(m_ptr, "CFlashlightEffect", "m_bIsOn");
}

void GCFlashlightEffect::SetIsOn(bool value) {
    SetSchemaValue(m_ptr, "CFlashlightEffect", "m_bIsOn", false, value);
}

bool GCFlashlightEffect::GetMuzzleFlashEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CFlashlightEffect", "m_bMuzzleFlashEnabled");
}

void GCFlashlightEffect::SetMuzzleFlashEnabled(bool value) {
    SetSchemaValue(m_ptr, "CFlashlightEffect", "m_bMuzzleFlashEnabled", false, value);
}

float GCFlashlightEffect::GetMuzzleFlashBrightness() const {
    return GetSchemaValue<float>(m_ptr, "CFlashlightEffect", "m_flMuzzleFlashBrightness");
}

void GCFlashlightEffect::SetMuzzleFlashBrightness(float value) {
    SetSchemaValue(m_ptr, "CFlashlightEffect", "m_flMuzzleFlashBrightness", false, value);
}

Quaternion GCFlashlightEffect::GetQuatMuzzleFlashOrientation() const {
    return GetSchemaValue<Quaternion>(m_ptr, "CFlashlightEffect", "m_quatMuzzleFlashOrientation");
}

void GCFlashlightEffect::SetQuatMuzzleFlashOrientation(Quaternion value) {
    SetSchemaValue(m_ptr, "CFlashlightEffect", "m_quatMuzzleFlashOrientation", false, value);
}

Vector GCFlashlightEffect::GetMuzzleFlashOrigin() const {
    return GetSchemaValue<Vector>(m_ptr, "CFlashlightEffect", "m_vecMuzzleFlashOrigin");
}

void GCFlashlightEffect::SetMuzzleFlashOrigin(Vector value) {
    SetSchemaValue(m_ptr, "CFlashlightEffect", "m_vecMuzzleFlashOrigin", false, value);
}

float GCFlashlightEffect::GetFov() const {
    return GetSchemaValue<float>(m_ptr, "CFlashlightEffect", "m_flFov");
}

void GCFlashlightEffect::SetFov(float value) {
    SetSchemaValue(m_ptr, "CFlashlightEffect", "m_flFov", false, value);
}

float GCFlashlightEffect::GetFarZ() const {
    return GetSchemaValue<float>(m_ptr, "CFlashlightEffect", "m_flFarZ");
}

void GCFlashlightEffect::SetFarZ(float value) {
    SetSchemaValue(m_ptr, "CFlashlightEffect", "m_flFarZ", false, value);
}

float GCFlashlightEffect::GetLinearAtten() const {
    return GetSchemaValue<float>(m_ptr, "CFlashlightEffect", "m_flLinearAtten");
}

void GCFlashlightEffect::SetLinearAtten(float value) {
    SetSchemaValue(m_ptr, "CFlashlightEffect", "m_flLinearAtten", false, value);
}

bool GCFlashlightEffect::GetCastsShadows() const {
    return GetSchemaValue<bool>(m_ptr, "CFlashlightEffect", "m_bCastsShadows");
}

void GCFlashlightEffect::SetCastsShadows(bool value) {
    SetSchemaValue(m_ptr, "CFlashlightEffect", "m_bCastsShadows", false, value);
}

float GCFlashlightEffect::GetCurrentPullBackDist() const {
    return GetSchemaValue<float>(m_ptr, "CFlashlightEffect", "m_flCurrentPullBackDist");
}

void GCFlashlightEffect::SetCurrentPullBackDist(float value) {
    SetSchemaValue(m_ptr, "CFlashlightEffect", "m_flCurrentPullBackDist", false, value);
}

std::string GCFlashlightEffect::GetTextureName() const {
    return GetSchemaValuePtr<char>(m_ptr, "CFlashlightEffect", "m_textureName");
}

void GCFlashlightEffect::SetTextureName(std::string value) {
    WriteSchemaPtrValue(m_ptr, "CFlashlightEffect", "m_textureName", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 64);
}

std::string GCFlashlightEffect::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFlashlightEffect::IsValid() {
    return (m_ptr != nullptr);
}

GFeBuildSphereRigid_t::GFeBuildSphereRigid_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeBuildSphereRigid_t::GFeBuildSphereRigid_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GFeBuildSphereRigid_t::GetPriority() const {
    return GetSchemaValue<int32_t>(m_ptr, "FeBuildSphereRigid_t", "m_nPriority");
}

void GFeBuildSphereRigid_t::SetPriority(int32_t value) {
    SetSchemaValue(m_ptr, "FeBuildSphereRigid_t", "m_nPriority", true, value);
}

uint32_t GFeBuildSphereRigid_t::GetVertexMapHash() const {
    return GetSchemaValue<uint32_t>(m_ptr, "FeBuildSphereRigid_t", "m_nVertexMapHash");
}

void GFeBuildSphereRigid_t::SetVertexMapHash(uint32_t value) {
    SetSchemaValue(m_ptr, "FeBuildSphereRigid_t", "m_nVertexMapHash", true, value);
}

std::string GFeBuildSphereRigid_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeBuildSphereRigid_t::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimEncodedFrames::GCAnimEncodedFrames(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimEncodedFrames::GCAnimEncodedFrames(void *ptr) {
    m_ptr = ptr;
}

CBufferString GCAnimEncodedFrames::GetFileName() const {
    return GetSchemaValue<CBufferString>(m_ptr, "CAnimEncodedFrames", "m_fileName");
}

void GCAnimEncodedFrames::SetFileName(CBufferString value) {
    SetSchemaValue(m_ptr, "CAnimEncodedFrames", "m_fileName", false, value);
}

int32_t GCAnimEncodedFrames::GetFrames() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimEncodedFrames", "m_nFrames");
}

void GCAnimEncodedFrames::SetFrames(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimEncodedFrames", "m_nFrames", false, value);
}

int32_t GCAnimEncodedFrames::GetFramesPerBlock() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimEncodedFrames", "m_nFramesPerBlock");
}

void GCAnimEncodedFrames::SetFramesPerBlock(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimEncodedFrames", "m_nFramesPerBlock", false, value);
}

std::vector<GCAnimFrameBlockAnim> GCAnimEncodedFrames::GetFrameblockArray() const {
    CUtlVector<GCAnimFrameBlockAnim>* vec = GetSchemaValue<CUtlVector<GCAnimFrameBlockAnim>*>(m_ptr, "CAnimEncodedFrames", "m_frameblockArray"); std::vector<GCAnimFrameBlockAnim> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimEncodedFrames::SetFrameblockArray(std::vector<GCAnimFrameBlockAnim> value) {
    SetSchemaValueCUtlVector<GCAnimFrameBlockAnim>(m_ptr, "CAnimEncodedFrames", "m_frameblockArray", false, value);
}

GCAnimEncodeDifference GCAnimEncodedFrames::GetUsageDifferences() const {
    return GetSchemaValue<GCAnimEncodeDifference>(m_ptr, "CAnimEncodedFrames", "m_usageDifferences");
}

void GCAnimEncodedFrames::SetUsageDifferences(GCAnimEncodeDifference value) {
    SetSchemaValue(m_ptr, "CAnimEncodedFrames", "m_usageDifferences", false, value);
}

std::string GCAnimEncodedFrames::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimEncodedFrames::IsValid() {
    return (m_ptr != nullptr);
}

GEventSetTime_t::GEventSetTime_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEventSetTime_t::GEventSetTime_t(void *ptr) {
    m_ptr = ptr;
}

GEngineLoopState_t GEventSetTime_t::GetLoopState() const {
    return GetSchemaValue<GEngineLoopState_t>(m_ptr, "EventSetTime_t", "m_LoopState");
}

void GEventSetTime_t::SetLoopState(GEngineLoopState_t value) {
    SetSchemaValue(m_ptr, "EventSetTime_t", "m_LoopState", true, value);
}

int32_t GEventSetTime_t::GetClientOutputFrames() const {
    return GetSchemaValue<int32_t>(m_ptr, "EventSetTime_t", "m_nClientOutputFrames");
}

void GEventSetTime_t::SetClientOutputFrames(int32_t value) {
    SetSchemaValue(m_ptr, "EventSetTime_t", "m_nClientOutputFrames", true, value);
}

double GEventSetTime_t::GetRealTime() const {
    return GetSchemaValue<double>(m_ptr, "EventSetTime_t", "m_flRealTime");
}

void GEventSetTime_t::SetRealTime(double value) {
    SetSchemaValue(m_ptr, "EventSetTime_t", "m_flRealTime", true, value);
}

double GEventSetTime_t::GetRenderTime() const {
    return GetSchemaValue<double>(m_ptr, "EventSetTime_t", "m_flRenderTime");
}

void GEventSetTime_t::SetRenderTime(double value) {
    SetSchemaValue(m_ptr, "EventSetTime_t", "m_flRenderTime", true, value);
}

double GEventSetTime_t::GetRenderFrameTime() const {
    return GetSchemaValue<double>(m_ptr, "EventSetTime_t", "m_flRenderFrameTime");
}

void GEventSetTime_t::SetRenderFrameTime(double value) {
    SetSchemaValue(m_ptr, "EventSetTime_t", "m_flRenderFrameTime", true, value);
}

double GEventSetTime_t::GetRenderFrameTimeUnbounded() const {
    return GetSchemaValue<double>(m_ptr, "EventSetTime_t", "m_flRenderFrameTimeUnbounded");
}

void GEventSetTime_t::SetRenderFrameTimeUnbounded(double value) {
    SetSchemaValue(m_ptr, "EventSetTime_t", "m_flRenderFrameTimeUnbounded", true, value);
}

double GEventSetTime_t::GetRenderFrameTimeUnscaled() const {
    return GetSchemaValue<double>(m_ptr, "EventSetTime_t", "m_flRenderFrameTimeUnscaled");
}

void GEventSetTime_t::SetRenderFrameTimeUnscaled(double value) {
    SetSchemaValue(m_ptr, "EventSetTime_t", "m_flRenderFrameTimeUnscaled", true, value);
}

double GEventSetTime_t::GetTickRemainder() const {
    return GetSchemaValue<double>(m_ptr, "EventSetTime_t", "m_flTickRemainder");
}

void GEventSetTime_t::SetTickRemainder(double value) {
    SetSchemaValue(m_ptr, "EventSetTime_t", "m_flTickRemainder", true, value);
}

std::string GEventSetTime_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEventSetTime_t::IsValid() {
    return (m_ptr != nullptr);
}

GOldFeEdge_t::GOldFeEdge_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GOldFeEdge_t::GOldFeEdge_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<float> GOldFeEdge_t::GetK() const {
    float* outValue = GetSchemaValue<float*>(m_ptr, "OldFeEdge_t", "m_flK"); std::vector<float> ret; for(int i = 0; i < 3; i++) { ret.push_back(outValue[i]); } return ret;
}

void GOldFeEdge_t::SetK(std::vector<float> value) {
    float* outValue = GetSchemaValue<float*>(m_ptr, "OldFeEdge_t", "m_flK"); for(int i = 0; i < 3; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "OldFeEdge_t", "m_flK", true, outValue);
}

float GOldFeEdge_t::GetInvA() const {
    return GetSchemaValue<float>(m_ptr, "OldFeEdge_t", "invA");
}

void GOldFeEdge_t::SetInvA(float value) {
    SetSchemaValue(m_ptr, "OldFeEdge_t", "invA", true, value);
}

float GOldFeEdge_t::GetT() const {
    return GetSchemaValue<float>(m_ptr, "OldFeEdge_t", "t");
}

void GOldFeEdge_t::SetT(float value) {
    SetSchemaValue(m_ptr, "OldFeEdge_t", "t", true, value);
}

float GOldFeEdge_t::GetThetaRelaxed() const {
    return GetSchemaValue<float>(m_ptr, "OldFeEdge_t", "flThetaRelaxed");
}

void GOldFeEdge_t::SetThetaRelaxed(float value) {
    SetSchemaValue(m_ptr, "OldFeEdge_t", "flThetaRelaxed", true, value);
}

float GOldFeEdge_t::GetThetaFactor() const {
    return GetSchemaValue<float>(m_ptr, "OldFeEdge_t", "flThetaFactor");
}

void GOldFeEdge_t::SetThetaFactor(float value) {
    SetSchemaValue(m_ptr, "OldFeEdge_t", "flThetaFactor", true, value);
}

float GOldFeEdge_t::GetC01() const {
    return GetSchemaValue<float>(m_ptr, "OldFeEdge_t", "c01");
}

void GOldFeEdge_t::SetC01(float value) {
    SetSchemaValue(m_ptr, "OldFeEdge_t", "c01", true, value);
}

float GOldFeEdge_t::GetC02() const {
    return GetSchemaValue<float>(m_ptr, "OldFeEdge_t", "c02");
}

void GOldFeEdge_t::SetC02(float value) {
    SetSchemaValue(m_ptr, "OldFeEdge_t", "c02", true, value);
}

float GOldFeEdge_t::GetC03() const {
    return GetSchemaValue<float>(m_ptr, "OldFeEdge_t", "c03");
}

void GOldFeEdge_t::SetC03(float value) {
    SetSchemaValue(m_ptr, "OldFeEdge_t", "c03", true, value);
}

float GOldFeEdge_t::GetC04() const {
    return GetSchemaValue<float>(m_ptr, "OldFeEdge_t", "c04");
}

void GOldFeEdge_t::SetC04(float value) {
    SetSchemaValue(m_ptr, "OldFeEdge_t", "c04", true, value);
}

float GOldFeEdge_t::GetAxialModelDist() const {
    return GetSchemaValue<float>(m_ptr, "OldFeEdge_t", "flAxialModelDist");
}

void GOldFeEdge_t::SetAxialModelDist(float value) {
    SetSchemaValue(m_ptr, "OldFeEdge_t", "flAxialModelDist", true, value);
}

std::vector<float> GOldFeEdge_t::GetAxialModelWeights() const {
    float* outValue = GetSchemaValue<float*>(m_ptr, "OldFeEdge_t", "flAxialModelWeights"); std::vector<float> ret; for(int i = 0; i < 4; i++) { ret.push_back(outValue[i]); } return ret;
}

void GOldFeEdge_t::SetAxialModelWeights(std::vector<float> value) {
    float* outValue = GetSchemaValue<float*>(m_ptr, "OldFeEdge_t", "flAxialModelWeights"); for(int i = 0; i < 4; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "OldFeEdge_t", "flAxialModelWeights", true, outValue);
}

std::vector<uint16_t> GOldFeEdge_t::GetNode() const {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "OldFeEdge_t", "m_nNode"); std::vector<uint16_t> ret; for(int i = 0; i < 4; i++) { ret.push_back(outValue[i]); } return ret;
}

void GOldFeEdge_t::SetNode(std::vector<uint16_t> value) {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "OldFeEdge_t", "m_nNode"); for(int i = 0; i < 4; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "OldFeEdge_t", "m_nNode", true, outValue);
}

std::string GOldFeEdge_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GOldFeEdge_t::IsValid() {
    return (m_ptr != nullptr);
}

GCStanceOverrideUpdateNode::GCStanceOverrideUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCStanceOverrideUpdateNode::GCStanceOverrideUpdateNode(void *ptr) {
    m_ptr = ptr;
}

std::vector<GStanceInfo_t> GCStanceOverrideUpdateNode::GetFootStanceInfo() const {
    CUtlVector<GStanceInfo_t>* vec = GetSchemaValue<CUtlVector<GStanceInfo_t>*>(m_ptr, "CStanceOverrideUpdateNode", "m_footStanceInfo"); std::vector<GStanceInfo_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCStanceOverrideUpdateNode::SetFootStanceInfo(std::vector<GStanceInfo_t> value) {
    SetSchemaValueCUtlVector<GStanceInfo_t>(m_ptr, "CStanceOverrideUpdateNode", "m_footStanceInfo", false, value);
}

GCAnimUpdateNodeRef GCStanceOverrideUpdateNode::GetStanceSourceNode() const {
    return GetSchemaValue<GCAnimUpdateNodeRef>(m_ptr, "CStanceOverrideUpdateNode", "m_pStanceSourceNode");
}

void GCStanceOverrideUpdateNode::SetStanceSourceNode(GCAnimUpdateNodeRef value) {
    SetSchemaValue(m_ptr, "CStanceOverrideUpdateNode", "m_pStanceSourceNode", false, value);
}

GCAnimParamHandle GCStanceOverrideUpdateNode::GetParameter() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CStanceOverrideUpdateNode", "m_hParameter");
}

void GCStanceOverrideUpdateNode::SetParameter(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CStanceOverrideUpdateNode", "m_hParameter", false, value);
}

StanceOverrideMode GCStanceOverrideUpdateNode::GetMode() const {
    return GetSchemaValue<StanceOverrideMode>(m_ptr, "CStanceOverrideUpdateNode", "m_eMode");
}

void GCStanceOverrideUpdateNode::SetMode(StanceOverrideMode value) {
    SetSchemaValue(m_ptr, "CStanceOverrideUpdateNode", "m_eMode", false, value);
}

std::string GCStanceOverrideUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCStanceOverrideUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

Gconstraint_breakableparams_t::Gconstraint_breakableparams_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

Gconstraint_breakableparams_t::Gconstraint_breakableparams_t(void *ptr) {
    m_ptr = ptr;
}

float Gconstraint_breakableparams_t::GetStrength() const {
    return GetSchemaValue<float>(m_ptr, "constraint_breakableparams_t", "strength");
}

void Gconstraint_breakableparams_t::SetStrength(float value) {
    SetSchemaValue(m_ptr, "constraint_breakableparams_t", "strength", true, value);
}

float Gconstraint_breakableparams_t::GetForceLimit() const {
    return GetSchemaValue<float>(m_ptr, "constraint_breakableparams_t", "forceLimit");
}

void Gconstraint_breakableparams_t::SetForceLimit(float value) {
    SetSchemaValue(m_ptr, "constraint_breakableparams_t", "forceLimit", true, value);
}

float Gconstraint_breakableparams_t::GetTorqueLimit() const {
    return GetSchemaValue<float>(m_ptr, "constraint_breakableparams_t", "torqueLimit");
}

void Gconstraint_breakableparams_t::SetTorqueLimit(float value) {
    SetSchemaValue(m_ptr, "constraint_breakableparams_t", "torqueLimit", true, value);
}

std::vector<float> Gconstraint_breakableparams_t::GetBodyMassScale() const {
    float* outValue = GetSchemaValue<float*>(m_ptr, "constraint_breakableparams_t", "bodyMassScale"); std::vector<float> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}

void Gconstraint_breakableparams_t::SetBodyMassScale(std::vector<float> value) {
    float* outValue = GetSchemaValue<float*>(m_ptr, "constraint_breakableparams_t", "bodyMassScale"); for(int i = 0; i < 2; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "constraint_breakableparams_t", "bodyMassScale", true, outValue);
}

bool Gconstraint_breakableparams_t::GetIsActive() const {
    return GetSchemaValue<bool>(m_ptr, "constraint_breakableparams_t", "isActive");
}

void Gconstraint_breakableparams_t::SetIsActive(bool value) {
    SetSchemaValue(m_ptr, "constraint_breakableparams_t", "isActive", true, value);
}

std::string Gconstraint_breakableparams_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool Gconstraint_breakableparams_t::IsValid() {
    return (m_ptr != nullptr);
}

GCStateNodeTransitionData::GCStateNodeTransitionData(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCStateNodeTransitionData::GCStateNodeTransitionData(void *ptr) {
    m_ptr = ptr;
}

GCBlendCurve GCStateNodeTransitionData::GetCurve() const {
    return GetSchemaValue<GCBlendCurve>(m_ptr, "CStateNodeTransitionData", "m_curve");
}

void GCStateNodeTransitionData::SetCurve(GCBlendCurve value) {
    SetSchemaValue(m_ptr, "CStateNodeTransitionData", "m_curve", false, value);
}

std::string GCStateNodeTransitionData::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCStateNodeTransitionData::IsValid() {
    return (m_ptr != nullptr);
}

GCMotionMatchingUpdateNode::GCMotionMatchingUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMotionMatchingUpdateNode::GCMotionMatchingUpdateNode(void *ptr) {
    m_ptr = ptr;
}

GCMotionDataSet GCMotionMatchingUpdateNode::GetDataSet() const {
    return GetSchemaValue<GCMotionDataSet>(m_ptr, "CMotionMatchingUpdateNode", "m_dataSet");
}

void GCMotionMatchingUpdateNode::SetDataSet(GCMotionDataSet value) {
    SetSchemaValue(m_ptr, "CMotionMatchingUpdateNode", "m_dataSet", false, value);
}

std::vector<float32> GCMotionMatchingUpdateNode::GetWeights() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "CMotionMatchingUpdateNode", "m_weights"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCMotionMatchingUpdateNode::SetWeights(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "CMotionMatchingUpdateNode", "m_weights", false, value);
}

bool GCMotionMatchingUpdateNode::GetSearchEveryTick() const {
    return GetSchemaValue<bool>(m_ptr, "CMotionMatchingUpdateNode", "m_bSearchEveryTick");
}

void GCMotionMatchingUpdateNode::SetSearchEveryTick(bool value) {
    SetSchemaValue(m_ptr, "CMotionMatchingUpdateNode", "m_bSearchEveryTick", false, value);
}

float GCMotionMatchingUpdateNode::GetSearchInterval() const {
    return GetSchemaValue<float>(m_ptr, "CMotionMatchingUpdateNode", "m_flSearchInterval");
}

void GCMotionMatchingUpdateNode::SetSearchInterval(float value) {
    SetSchemaValue(m_ptr, "CMotionMatchingUpdateNode", "m_flSearchInterval", false, value);
}

bool GCMotionMatchingUpdateNode::GetSearchWhenClipEnds() const {
    return GetSchemaValue<bool>(m_ptr, "CMotionMatchingUpdateNode", "m_bSearchWhenClipEnds");
}

void GCMotionMatchingUpdateNode::SetSearchWhenClipEnds(bool value) {
    SetSchemaValue(m_ptr, "CMotionMatchingUpdateNode", "m_bSearchWhenClipEnds", false, value);
}

bool GCMotionMatchingUpdateNode::GetSearchWhenGoalChanges() const {
    return GetSchemaValue<bool>(m_ptr, "CMotionMatchingUpdateNode", "m_bSearchWhenGoalChanges");
}

void GCMotionMatchingUpdateNode::SetSearchWhenGoalChanges(bool value) {
    SetSchemaValue(m_ptr, "CMotionMatchingUpdateNode", "m_bSearchWhenGoalChanges", false, value);
}

GCBlendCurve GCMotionMatchingUpdateNode::GetBlendCurve() const {
    return GetSchemaValue<GCBlendCurve>(m_ptr, "CMotionMatchingUpdateNode", "m_blendCurve");
}

void GCMotionMatchingUpdateNode::SetBlendCurve(GCBlendCurve value) {
    SetSchemaValue(m_ptr, "CMotionMatchingUpdateNode", "m_blendCurve", false, value);
}

float GCMotionMatchingUpdateNode::GetSampleRate() const {
    return GetSchemaValue<float>(m_ptr, "CMotionMatchingUpdateNode", "m_flSampleRate");
}

void GCMotionMatchingUpdateNode::SetSampleRate(float value) {
    SetSchemaValue(m_ptr, "CMotionMatchingUpdateNode", "m_flSampleRate", false, value);
}

float GCMotionMatchingUpdateNode::GetBlendTime() const {
    return GetSchemaValue<float>(m_ptr, "CMotionMatchingUpdateNode", "m_flBlendTime");
}

void GCMotionMatchingUpdateNode::SetBlendTime(float value) {
    SetSchemaValue(m_ptr, "CMotionMatchingUpdateNode", "m_flBlendTime", false, value);
}

bool GCMotionMatchingUpdateNode::GetLockClipWhenWaning() const {
    return GetSchemaValue<bool>(m_ptr, "CMotionMatchingUpdateNode", "m_bLockClipWhenWaning");
}

void GCMotionMatchingUpdateNode::SetLockClipWhenWaning(bool value) {
    SetSchemaValue(m_ptr, "CMotionMatchingUpdateNode", "m_bLockClipWhenWaning", false, value);
}

float GCMotionMatchingUpdateNode::GetSelectionThreshold() const {
    return GetSchemaValue<float>(m_ptr, "CMotionMatchingUpdateNode", "m_flSelectionThreshold");
}

void GCMotionMatchingUpdateNode::SetSelectionThreshold(float value) {
    SetSchemaValue(m_ptr, "CMotionMatchingUpdateNode", "m_flSelectionThreshold", false, value);
}

float GCMotionMatchingUpdateNode::GetReselectionTimeWindow() const {
    return GetSchemaValue<float>(m_ptr, "CMotionMatchingUpdateNode", "m_flReselectionTimeWindow");
}

void GCMotionMatchingUpdateNode::SetReselectionTimeWindow(float value) {
    SetSchemaValue(m_ptr, "CMotionMatchingUpdateNode", "m_flReselectionTimeWindow", false, value);
}

bool GCMotionMatchingUpdateNode::GetEnableRotationCorrection() const {
    return GetSchemaValue<bool>(m_ptr, "CMotionMatchingUpdateNode", "m_bEnableRotationCorrection");
}

void GCMotionMatchingUpdateNode::SetEnableRotationCorrection(bool value) {
    SetSchemaValue(m_ptr, "CMotionMatchingUpdateNode", "m_bEnableRotationCorrection", false, value);
}

bool GCMotionMatchingUpdateNode::GetGoalAssist() const {
    return GetSchemaValue<bool>(m_ptr, "CMotionMatchingUpdateNode", "m_bGoalAssist");
}

void GCMotionMatchingUpdateNode::SetGoalAssist(bool value) {
    SetSchemaValue(m_ptr, "CMotionMatchingUpdateNode", "m_bGoalAssist", false, value);
}

float GCMotionMatchingUpdateNode::GetGoalAssistDistance() const {
    return GetSchemaValue<float>(m_ptr, "CMotionMatchingUpdateNode", "m_flGoalAssistDistance");
}

void GCMotionMatchingUpdateNode::SetGoalAssistDistance(float value) {
    SetSchemaValue(m_ptr, "CMotionMatchingUpdateNode", "m_flGoalAssistDistance", false, value);
}

float GCMotionMatchingUpdateNode::GetGoalAssistTolerance() const {
    return GetSchemaValue<float>(m_ptr, "CMotionMatchingUpdateNode", "m_flGoalAssistTolerance");
}

void GCMotionMatchingUpdateNode::SetGoalAssistTolerance(float value) {
    SetSchemaValue(m_ptr, "CMotionMatchingUpdateNode", "m_flGoalAssistTolerance", false, value);
}

GCAnimInputDamping GCMotionMatchingUpdateNode::GetDistanceScale_Damping() const {
    return GetSchemaValue<GCAnimInputDamping>(m_ptr, "CMotionMatchingUpdateNode", "m_distanceScale_Damping");
}

void GCMotionMatchingUpdateNode::SetDistanceScale_Damping(GCAnimInputDamping value) {
    SetSchemaValue(m_ptr, "CMotionMatchingUpdateNode", "m_distanceScale_Damping", false, value);
}

float GCMotionMatchingUpdateNode::GetDistanceScale_OuterRadius() const {
    return GetSchemaValue<float>(m_ptr, "CMotionMatchingUpdateNode", "m_flDistanceScale_OuterRadius");
}

void GCMotionMatchingUpdateNode::SetDistanceScale_OuterRadius(float value) {
    SetSchemaValue(m_ptr, "CMotionMatchingUpdateNode", "m_flDistanceScale_OuterRadius", false, value);
}

float GCMotionMatchingUpdateNode::GetDistanceScale_InnerRadius() const {
    return GetSchemaValue<float>(m_ptr, "CMotionMatchingUpdateNode", "m_flDistanceScale_InnerRadius");
}

void GCMotionMatchingUpdateNode::SetDistanceScale_InnerRadius(float value) {
    SetSchemaValue(m_ptr, "CMotionMatchingUpdateNode", "m_flDistanceScale_InnerRadius", false, value);
}

float GCMotionMatchingUpdateNode::GetDistanceScale_MaxScale() const {
    return GetSchemaValue<float>(m_ptr, "CMotionMatchingUpdateNode", "m_flDistanceScale_MaxScale");
}

void GCMotionMatchingUpdateNode::SetDistanceScale_MaxScale(float value) {
    SetSchemaValue(m_ptr, "CMotionMatchingUpdateNode", "m_flDistanceScale_MaxScale", false, value);
}

float GCMotionMatchingUpdateNode::GetDistanceScale_MinScale() const {
    return GetSchemaValue<float>(m_ptr, "CMotionMatchingUpdateNode", "m_flDistanceScale_MinScale");
}

void GCMotionMatchingUpdateNode::SetDistanceScale_MinScale(float value) {
    SetSchemaValue(m_ptr, "CMotionMatchingUpdateNode", "m_flDistanceScale_MinScale", false, value);
}

bool GCMotionMatchingUpdateNode::GetEnableDistanceScaling() const {
    return GetSchemaValue<bool>(m_ptr, "CMotionMatchingUpdateNode", "m_bEnableDistanceScaling");
}

void GCMotionMatchingUpdateNode::SetEnableDistanceScaling(bool value) {
    SetSchemaValue(m_ptr, "CMotionMatchingUpdateNode", "m_bEnableDistanceScaling", false, value);
}

std::string GCMotionMatchingUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMotionMatchingUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GCNmSyncTrack__Event_t::GCNmSyncTrack__Event_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmSyncTrack__Event_t::GCNmSyncTrack__Event_t(void *ptr) {
    m_ptr = ptr;
}

GNmPercent_t GCNmSyncTrack__Event_t::GetStartTime() const {
    return GetSchemaValue<GNmPercent_t>(m_ptr, "CNmSyncTrack__Event_t", "m_startTime");
}

void GCNmSyncTrack__Event_t::SetStartTime(GNmPercent_t value) {
    SetSchemaValue(m_ptr, "CNmSyncTrack__Event_t", "m_startTime", true, value);
}

GNmPercent_t GCNmSyncTrack__Event_t::GetDuration() const {
    return GetSchemaValue<GNmPercent_t>(m_ptr, "CNmSyncTrack__Event_t", "m_duration");
}

void GCNmSyncTrack__Event_t::SetDuration(GNmPercent_t value) {
    SetSchemaValue(m_ptr, "CNmSyncTrack__Event_t", "m_duration", true, value);
}

std::string GCNmSyncTrack__Event_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmSyncTrack__Event_t::IsValid() {
    return (m_ptr != nullptr);
}

GEventSplitScreenStateChanged_t::GEventSplitScreenStateChanged_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEventSplitScreenStateChanged_t::GEventSplitScreenStateChanged_t(void *ptr) {
    m_ptr = ptr;
}

std::string GEventSplitScreenStateChanged_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEventSplitScreenStateChanged_t::IsValid() {
    return (m_ptr != nullptr);
}

GParticleNamedValueSource_t::GParticleNamedValueSource_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GParticleNamedValueSource_t::GParticleNamedValueSource_t(void *ptr) {
    m_ptr = ptr;
}

CUtlString GParticleNamedValueSource_t::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "ParticleNamedValueSource_t", "m_Name");
}

void GParticleNamedValueSource_t::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "ParticleNamedValueSource_t", "m_Name", true, value);
}

bool GParticleNamedValueSource_t::GetIsPublic() const {
    return GetSchemaValue<bool>(m_ptr, "ParticleNamedValueSource_t", "m_IsPublic");
}

void GParticleNamedValueSource_t::SetIsPublic(bool value) {
    SetSchemaValue(m_ptr, "ParticleNamedValueSource_t", "m_IsPublic", true, value);
}

PulseValueType_t GParticleNamedValueSource_t::GetValueType() const {
    return GetSchemaValue<PulseValueType_t>(m_ptr, "ParticleNamedValueSource_t", "m_ValueType");
}

void GParticleNamedValueSource_t::SetValueType(PulseValueType_t value) {
    SetSchemaValue(m_ptr, "ParticleNamedValueSource_t", "m_ValueType", true, value);
}

GParticleNamedValueConfiguration_t GParticleNamedValueSource_t::GetDefaultConfig() const {
    return GetSchemaValue<GParticleNamedValueConfiguration_t>(m_ptr, "ParticleNamedValueSource_t", "m_DefaultConfig");
}

void GParticleNamedValueSource_t::SetDefaultConfig(GParticleNamedValueConfiguration_t value) {
    SetSchemaValue(m_ptr, "ParticleNamedValueSource_t", "m_DefaultConfig", true, value);
}

std::vector<GParticleNamedValueConfiguration_t> GParticleNamedValueSource_t::GetNamedConfigs() const {
    CUtlVector<GParticleNamedValueConfiguration_t>* vec = GetSchemaValue<CUtlVector<GParticleNamedValueConfiguration_t>*>(m_ptr, "ParticleNamedValueSource_t", "m_NamedConfigs"); std::vector<GParticleNamedValueConfiguration_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GParticleNamedValueSource_t::SetNamedConfigs(std::vector<GParticleNamedValueConfiguration_t> value) {
    SetSchemaValueCUtlVector<GParticleNamedValueConfiguration_t>(m_ptr, "ParticleNamedValueSource_t", "m_NamedConfigs", true, value);
}

std::string GParticleNamedValueSource_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GParticleNamedValueSource_t::IsValid() {
    return (m_ptr != nullptr);
}

GMaterialParamBuffer_t::GMaterialParamBuffer_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GMaterialParamBuffer_t::GMaterialParamBuffer_t(void *ptr) {
    m_ptr = ptr;
}

std::string GMaterialParamBuffer_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GMaterialParamBuffer_t::IsValid() {
    return (m_ptr != nullptr);
}

GEventPostDataUpdate_t::GEventPostDataUpdate_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEventPostDataUpdate_t::GEventPostDataUpdate_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GEventPostDataUpdate_t::GetCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "EventPostDataUpdate_t", "m_nCount");
}

void GEventPostDataUpdate_t::SetCount(int32_t value) {
    SetSchemaValue(m_ptr, "EventPostDataUpdate_t", "m_nCount", true, value);
}

std::string GEventPostDataUpdate_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEventPostDataUpdate_t::IsValid() {
    return (m_ptr != nullptr);
}

GRenderProjectedMaterial_t::GRenderProjectedMaterial_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GRenderProjectedMaterial_t::GRenderProjectedMaterial_t(void *ptr) {
    m_ptr = ptr;
}

std::string GRenderProjectedMaterial_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GRenderProjectedMaterial_t::IsValid() {
    return (m_ptr != nullptr);
}

GCSSDSMsg_ViewTargetList::GCSSDSMsg_ViewTargetList(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSSDSMsg_ViewTargetList::GCSSDSMsg_ViewTargetList(void *ptr) {
    m_ptr = ptr;
}

GSceneViewId_t GCSSDSMsg_ViewTargetList::GetViewId() const {
    return GetSchemaValue<GSceneViewId_t>(m_ptr, "CSSDSMsg_ViewTargetList", "m_viewId");
}

void GCSSDSMsg_ViewTargetList::SetViewId(GSceneViewId_t value) {
    SetSchemaValue(m_ptr, "CSSDSMsg_ViewTargetList", "m_viewId", false, value);
}

CUtlString GCSSDSMsg_ViewTargetList::GetViewName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CSSDSMsg_ViewTargetList", "m_ViewName");
}

void GCSSDSMsg_ViewTargetList::SetViewName(CUtlString value) {
    SetSchemaValue(m_ptr, "CSSDSMsg_ViewTargetList", "m_ViewName", false, value);
}

std::vector<GCSSDSMsg_ViewTarget> GCSSDSMsg_ViewTargetList::GetTargets() const {
    CUtlVector<GCSSDSMsg_ViewTarget>* vec = GetSchemaValue<CUtlVector<GCSSDSMsg_ViewTarget>*>(m_ptr, "CSSDSMsg_ViewTargetList", "m_Targets"); std::vector<GCSSDSMsg_ViewTarget> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSSDSMsg_ViewTargetList::SetTargets(std::vector<GCSSDSMsg_ViewTarget> value) {
    SetSchemaValueCUtlVector<GCSSDSMsg_ViewTarget>(m_ptr, "CSSDSMsg_ViewTargetList", "m_Targets", false, value);
}

std::string GCSSDSMsg_ViewTargetList::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSSDSMsg_ViewTargetList::IsValid() {
    return (m_ptr != nullptr);
}

GFeSimdAnimStrayRadius_t::GFeSimdAnimStrayRadius_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeSimdAnimStrayRadius_t::GFeSimdAnimStrayRadius_t(void *ptr) {
    m_ptr = ptr;
}

float GFeSimdAnimStrayRadius_t::GetMaxDist() const {
    return GetSchemaValue<float>(m_ptr, "FeSimdAnimStrayRadius_t", "flMaxDist");
}

void GFeSimdAnimStrayRadius_t::SetMaxDist(float value) {
    SetSchemaValue(m_ptr, "FeSimdAnimStrayRadius_t", "flMaxDist", true, value);
}

float GFeSimdAnimStrayRadius_t::GetRelaxationFactor() const {
    return GetSchemaValue<float>(m_ptr, "FeSimdAnimStrayRadius_t", "flRelaxationFactor");
}

void GFeSimdAnimStrayRadius_t::SetRelaxationFactor(float value) {
    SetSchemaValue(m_ptr, "FeSimdAnimStrayRadius_t", "flRelaxationFactor", true, value);
}

std::string GFeSimdAnimStrayRadius_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeSimdAnimStrayRadius_t::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimUser::GCAnimUser(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimUser::GCAnimUser(void *ptr) {
    m_ptr = ptr;
}

CBufferString GCAnimUser::GetName() const {
    return GetSchemaValue<CBufferString>(m_ptr, "CAnimUser", "m_name");
}

void GCAnimUser::SetName(CBufferString value) {
    SetSchemaValue(m_ptr, "CAnimUser", "m_name", false, value);
}

int32_t GCAnimUser::GetType() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimUser", "m_nType");
}

void GCAnimUser::SetType(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimUser", "m_nType", false, value);
}

std::string GCAnimUser::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimUser::IsValid() {
    return (m_ptr != nullptr);
}

GFeSpringIntegrator_t::GFeSpringIntegrator_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeSpringIntegrator_t::GFeSpringIntegrator_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<uint16_t> GFeSpringIntegrator_t::GetNode() const {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeSpringIntegrator_t", "nNode"); std::vector<uint16_t> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}

void GFeSpringIntegrator_t::SetNode(std::vector<uint16_t> value) {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeSpringIntegrator_t", "nNode"); for(int i = 0; i < 2; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "FeSpringIntegrator_t", "nNode", true, outValue);
}

float GFeSpringIntegrator_t::GetSpringRestLength() const {
    return GetSchemaValue<float>(m_ptr, "FeSpringIntegrator_t", "flSpringRestLength");
}

void GFeSpringIntegrator_t::SetSpringRestLength(float value) {
    SetSchemaValue(m_ptr, "FeSpringIntegrator_t", "flSpringRestLength", true, value);
}

float GFeSpringIntegrator_t::GetSpringConstant() const {
    return GetSchemaValue<float>(m_ptr, "FeSpringIntegrator_t", "flSpringConstant");
}

void GFeSpringIntegrator_t::SetSpringConstant(float value) {
    SetSchemaValue(m_ptr, "FeSpringIntegrator_t", "flSpringConstant", true, value);
}

float GFeSpringIntegrator_t::GetSpringDamping() const {
    return GetSchemaValue<float>(m_ptr, "FeSpringIntegrator_t", "flSpringDamping");
}

void GFeSpringIntegrator_t::SetSpringDamping(float value) {
    SetSchemaValue(m_ptr, "FeSpringIntegrator_t", "flSpringDamping", true, value);
}

float GFeSpringIntegrator_t::GetNodeWeight0() const {
    return GetSchemaValue<float>(m_ptr, "FeSpringIntegrator_t", "flNodeWeight0");
}

void GFeSpringIntegrator_t::SetNodeWeight0(float value) {
    SetSchemaValue(m_ptr, "FeSpringIntegrator_t", "flNodeWeight0", true, value);
}

std::string GFeSpringIntegrator_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeSpringIntegrator_t::IsValid() {
    return (m_ptr != nullptr);
}

GCModelConfigElement_UserPick::GCModelConfigElement_UserPick(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCModelConfigElement_UserPick::GCModelConfigElement_UserPick(void *ptr) {
    m_ptr = ptr;
}

std::vector<CUtlString> GCModelConfigElement_UserPick::GetChoices() const {
    CUtlVector<CUtlString>* vec = GetSchemaValue<CUtlVector<CUtlString>*>(m_ptr, "CModelConfigElement_UserPick", "m_Choices"); std::vector<CUtlString> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCModelConfigElement_UserPick::SetChoices(std::vector<CUtlString> value) {
    SetSchemaValueCUtlVector<CUtlString>(m_ptr, "CModelConfigElement_UserPick", "m_Choices", false, value);
}

std::string GCModelConfigElement_UserPick::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCModelConfigElement_UserPick::IsValid() {
    return (m_ptr != nullptr);
}

GRenderSkeletonBone_t::GRenderSkeletonBone_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GRenderSkeletonBone_t::GRenderSkeletonBone_t(void *ptr) {
    m_ptr = ptr;
}

CUtlString GRenderSkeletonBone_t::GetBoneName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "RenderSkeletonBone_t", "m_boneName");
}

void GRenderSkeletonBone_t::SetBoneName(CUtlString value) {
    SetSchemaValue(m_ptr, "RenderSkeletonBone_t", "m_boneName", true, value);
}

CUtlString GRenderSkeletonBone_t::GetParentName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "RenderSkeletonBone_t", "m_parentName");
}

void GRenderSkeletonBone_t::SetParentName(CUtlString value) {
    SetSchemaValue(m_ptr, "RenderSkeletonBone_t", "m_parentName", true, value);
}

matrix3x4_t GRenderSkeletonBone_t::GetInvBindPose() const {
    return GetSchemaValue<matrix3x4_t>(m_ptr, "RenderSkeletonBone_t", "m_invBindPose");
}

void GRenderSkeletonBone_t::SetInvBindPose(matrix3x4_t value) {
    SetSchemaValue(m_ptr, "RenderSkeletonBone_t", "m_invBindPose", true, value);
}

GSkeletonBoneBounds_t GRenderSkeletonBone_t::GetBbox() const {
    return GetSchemaValue<GSkeletonBoneBounds_t>(m_ptr, "RenderSkeletonBone_t", "m_bbox");
}

void GRenderSkeletonBone_t::SetBbox(GSkeletonBoneBounds_t value) {
    SetSchemaValue(m_ptr, "RenderSkeletonBone_t", "m_bbox", true, value);
}

float GRenderSkeletonBone_t::GetSphereRadius() const {
    return GetSchemaValue<float>(m_ptr, "RenderSkeletonBone_t", "m_flSphereRadius");
}

void GRenderSkeletonBone_t::SetSphereRadius(float value) {
    SetSchemaValue(m_ptr, "RenderSkeletonBone_t", "m_flSphereRadius", true, value);
}

std::string GRenderSkeletonBone_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GRenderSkeletonBone_t::IsValid() {
    return (m_ptr != nullptr);
}

GAnimationDecodeDebugDump_t::GAnimationDecodeDebugDump_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GAnimationDecodeDebugDump_t::GAnimationDecodeDebugDump_t(void *ptr) {
    m_ptr = ptr;
}

AnimationProcessingType_t GAnimationDecodeDebugDump_t::GetProcessingType() const {
    return GetSchemaValue<AnimationProcessingType_t>(m_ptr, "AnimationDecodeDebugDump_t", "m_processingType");
}

void GAnimationDecodeDebugDump_t::SetProcessingType(AnimationProcessingType_t value) {
    SetSchemaValue(m_ptr, "AnimationDecodeDebugDump_t", "m_processingType", true, value);
}

std::vector<GAnimationDecodeDebugDumpElement_t> GAnimationDecodeDebugDump_t::GetElems() const {
    CUtlVector<GAnimationDecodeDebugDumpElement_t>* vec = GetSchemaValue<CUtlVector<GAnimationDecodeDebugDumpElement_t>*>(m_ptr, "AnimationDecodeDebugDump_t", "m_elems"); std::vector<GAnimationDecodeDebugDumpElement_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GAnimationDecodeDebugDump_t::SetElems(std::vector<GAnimationDecodeDebugDumpElement_t> value) {
    SetSchemaValueCUtlVector<GAnimationDecodeDebugDumpElement_t>(m_ptr, "AnimationDecodeDebugDump_t", "m_elems", true, value);
}

std::string GAnimationDecodeDebugDump_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GAnimationDecodeDebugDump_t::IsValid() {
    return (m_ptr != nullptr);
}

GPARTICLE_EHANDLE__::GPARTICLE_EHANDLE__(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GPARTICLE_EHANDLE__::GPARTICLE_EHANDLE__(void *ptr) {
    m_ptr = ptr;
}

int32_t GPARTICLE_EHANDLE__::GetUnused() const {
    return GetSchemaValue<int32_t>(m_ptr, "PARTICLE_EHANDLE__", "unused");
}

void GPARTICLE_EHANDLE__::SetUnused(int32_t value) {
    SetSchemaValue(m_ptr, "PARTICLE_EHANDLE__", "unused", false, value);
}

std::string GPARTICLE_EHANDLE__::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GPARTICLE_EHANDLE__::IsValid() {
    return (m_ptr != nullptr);
}

GFeCollisionPlane_t::GFeCollisionPlane_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeCollisionPlane_t::GFeCollisionPlane_t(void *ptr) {
    m_ptr = ptr;
}

uint16_t GFeCollisionPlane_t::GetCtrlParent() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeCollisionPlane_t", "nCtrlParent");
}

void GFeCollisionPlane_t::SetCtrlParent(uint16_t value) {
    SetSchemaValue(m_ptr, "FeCollisionPlane_t", "nCtrlParent", true, value);
}

uint16_t GFeCollisionPlane_t::GetChildNode() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeCollisionPlane_t", "nChildNode");
}

void GFeCollisionPlane_t::SetChildNode(uint16_t value) {
    SetSchemaValue(m_ptr, "FeCollisionPlane_t", "nChildNode", true, value);
}

GRnPlane_t GFeCollisionPlane_t::GetPlane() const {
    return GetSchemaValue<GRnPlane_t>(m_ptr, "FeCollisionPlane_t", "m_Plane");
}

void GFeCollisionPlane_t::SetPlane(GRnPlane_t value) {
    SetSchemaValue(m_ptr, "FeCollisionPlane_t", "m_Plane", true, value);
}

float GFeCollisionPlane_t::GetStrength() const {
    return GetSchemaValue<float>(m_ptr, "FeCollisionPlane_t", "flStrength");
}

void GFeCollisionPlane_t::SetStrength(float value) {
    SetSchemaValue(m_ptr, "FeCollisionPlane_t", "flStrength", true, value);
}

std::string GFeCollisionPlane_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeCollisionPlane_t::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimCycle::GCAnimCycle(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimCycle::GCAnimCycle(void *ptr) {
    m_ptr = ptr;
}

std::string GCAnimCycle::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimCycle::IsValid() {
    return (m_ptr != nullptr);
}

GCNmSyncTrack__EventMarker_t::GCNmSyncTrack__EventMarker_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmSyncTrack__EventMarker_t::GCNmSyncTrack__EventMarker_t(void *ptr) {
    m_ptr = ptr;
}

GNmPercent_t GCNmSyncTrack__EventMarker_t::GetStartTime() const {
    return GetSchemaValue<GNmPercent_t>(m_ptr, "CNmSyncTrack__EventMarker_t", "m_startTime");
}

void GCNmSyncTrack__EventMarker_t::SetStartTime(GNmPercent_t value) {
    SetSchemaValue(m_ptr, "CNmSyncTrack__EventMarker_t", "m_startTime", true, value);
}

std::string GCNmSyncTrack__EventMarker_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmSyncTrack__EventMarker_t::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimGraphSettingsManager::GCAnimGraphSettingsManager(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimGraphSettingsManager::GCAnimGraphSettingsManager(void *ptr) {
    m_ptr = ptr;
}

std::string GCAnimGraphSettingsManager::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimGraphSettingsManager::IsValid() {
    return (m_ptr != nullptr);
}

GCRagdollUpdateNode::GCRagdollUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCRagdollUpdateNode::GCRagdollUpdateNode(void *ptr) {
    m_ptr = ptr;
}

int32_t GCRagdollUpdateNode::GetWeightListIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CRagdollUpdateNode", "m_nWeightListIndex");
}

void GCRagdollUpdateNode::SetWeightListIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CRagdollUpdateNode", "m_nWeightListIndex", false, value);
}

RagdollPoseControl GCRagdollUpdateNode::GetPoseControlMethod() const {
    return GetSchemaValue<RagdollPoseControl>(m_ptr, "CRagdollUpdateNode", "m_poseControlMethod");
}

void GCRagdollUpdateNode::SetPoseControlMethod(RagdollPoseControl value) {
    SetSchemaValue(m_ptr, "CRagdollUpdateNode", "m_poseControlMethod", false, value);
}

std::string GCRagdollUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCRagdollUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GCEntityComponentHelper::GCEntityComponentHelper(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEntityComponentHelper::GCEntityComponentHelper(void *ptr) {
    m_ptr = ptr;
}

uint32_t GCEntityComponentHelper::GetFlags() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CEntityComponentHelper", "m_flags");
}

void GCEntityComponentHelper::SetFlags(uint32_t value) {
    SetSchemaValue(m_ptr, "CEntityComponentHelper", "m_flags", false, value);
}

GEntComponentInfo_t GCEntityComponentHelper::GetInfo() const {
    GEntComponentInfo_t value(GetSchemaValuePtr<void>(m_ptr, "CEntityComponentHelper", "m_pInfo"));
    return value;
}

void GCEntityComponentHelper::SetInfo(GEntComponentInfo_t* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Info' is not possible.\n");
}

int32_t GCEntityComponentHelper::GetPriority() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEntityComponentHelper", "m_nPriority");
}

void GCEntityComponentHelper::SetPriority(int32_t value) {
    SetSchemaValue(m_ptr, "CEntityComponentHelper", "m_nPriority", false, value);
}

GCEntityComponentHelper GCEntityComponentHelper::GetNext() const {
    GCEntityComponentHelper value(GetSchemaValuePtr<void>(m_ptr, "CEntityComponentHelper", "m_pNext"));
    return value;
}

void GCEntityComponentHelper::SetNext(GCEntityComponentHelper* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Next' is not possible.\n");
}

std::string GCEntityComponentHelper::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEntityComponentHelper::IsValid() {
    return (m_ptr != nullptr);
}

GCompositeMaterial_t::GCompositeMaterial_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCompositeMaterial_t::GCompositeMaterial_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<GGeneratedTextureHandle_t> GCompositeMaterial_t::GetGeneratedTextures() const {
    CUtlVector<GGeneratedTextureHandle_t>* vec = GetSchemaValue<CUtlVector<GGeneratedTextureHandle_t>*>(m_ptr, "CompositeMaterial_t", "m_vecGeneratedTextures"); std::vector<GGeneratedTextureHandle_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCompositeMaterial_t::SetGeneratedTextures(std::vector<GGeneratedTextureHandle_t> value) {
    SetSchemaValueCUtlVector<GGeneratedTextureHandle_t>(m_ptr, "CompositeMaterial_t", "m_vecGeneratedTextures", true, value);
}

std::string GCompositeMaterial_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCompositeMaterial_t::IsValid() {
    return (m_ptr != nullptr);
}

GSignatureOutflow_Continue::GSignatureOutflow_Continue(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GSignatureOutflow_Continue::GSignatureOutflow_Continue(void *ptr) {
    m_ptr = ptr;
}

std::string GSignatureOutflow_Continue::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GSignatureOutflow_Continue::IsValid() {
    return (m_ptr != nullptr);
}

GWeightList::GWeightList(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GWeightList::GWeightList(void *ptr) {
    m_ptr = ptr;
}

CUtlString GWeightList::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "WeightList", "m_name");
}

void GWeightList::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "WeightList", "m_name", false, value);
}

std::vector<float32> GWeightList::GetWeights() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "WeightList", "m_weights"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GWeightList::SetWeights(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "WeightList", "m_weights", false, value);
}

std::string GWeightList::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GWeightList::IsValid() {
    return (m_ptr != nullptr);
}

GRnBodyDesc_t::GRnBodyDesc_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GRnBodyDesc_t::GRnBodyDesc_t(void *ptr) {
    m_ptr = ptr;
}

CUtlString GRnBodyDesc_t::GetDebugName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "RnBodyDesc_t", "m_sDebugName");
}

void GRnBodyDesc_t::SetDebugName(CUtlString value) {
    SetSchemaValue(m_ptr, "RnBodyDesc_t", "m_sDebugName", true, value);
}

Vector GRnBodyDesc_t::GetPosition() const {
    return GetSchemaValue<Vector>(m_ptr, "RnBodyDesc_t", "m_vPosition");
}

void GRnBodyDesc_t::SetPosition(Vector value) {
    SetSchemaValue(m_ptr, "RnBodyDesc_t", "m_vPosition", true, value);
}

Vector GRnBodyDesc_t::GetLinearVelocity() const {
    return GetSchemaValue<Vector>(m_ptr, "RnBodyDesc_t", "m_vLinearVelocity");
}

void GRnBodyDesc_t::SetLinearVelocity(Vector value) {
    SetSchemaValue(m_ptr, "RnBodyDesc_t", "m_vLinearVelocity", true, value);
}

Vector GRnBodyDesc_t::GetAngularVelocity() const {
    return GetSchemaValue<Vector>(m_ptr, "RnBodyDesc_t", "m_vAngularVelocity");
}

void GRnBodyDesc_t::SetAngularVelocity(Vector value) {
    SetSchemaValue(m_ptr, "RnBodyDesc_t", "m_vAngularVelocity", true, value);
}

Vector GRnBodyDesc_t::GetLocalMassCenter() const {
    return GetSchemaValue<Vector>(m_ptr, "RnBodyDesc_t", "m_vLocalMassCenter");
}

void GRnBodyDesc_t::SetLocalMassCenter(Vector value) {
    SetSchemaValue(m_ptr, "RnBodyDesc_t", "m_vLocalMassCenter", true, value);
}

std::vector<Vector> GRnBodyDesc_t::GetLocalInertiaInv() const {
    Vector* outValue = GetSchemaValue<Vector*>(m_ptr, "RnBodyDesc_t", "m_LocalInertiaInv"); std::vector<Vector> ret; for(int i = 0; i < 3; i++) { ret.push_back(outValue[i]); } return ret;
}

void GRnBodyDesc_t::SetLocalInertiaInv(std::vector<Vector> value) {
    Vector* outValue = GetSchemaValue<Vector*>(m_ptr, "RnBodyDesc_t", "m_LocalInertiaInv"); for(int i = 0; i < 3; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "RnBodyDesc_t", "m_LocalInertiaInv", true, outValue);
}

float GRnBodyDesc_t::GetMassInv() const {
    return GetSchemaValue<float>(m_ptr, "RnBodyDesc_t", "m_flMassInv");
}

void GRnBodyDesc_t::SetMassInv(float value) {
    SetSchemaValue(m_ptr, "RnBodyDesc_t", "m_flMassInv", true, value);
}

float GRnBodyDesc_t::GetGameMass() const {
    return GetSchemaValue<float>(m_ptr, "RnBodyDesc_t", "m_flGameMass");
}

void GRnBodyDesc_t::SetGameMass(float value) {
    SetSchemaValue(m_ptr, "RnBodyDesc_t", "m_flGameMass", true, value);
}

float GRnBodyDesc_t::GetInertiaScaleInv() const {
    return GetSchemaValue<float>(m_ptr, "RnBodyDesc_t", "m_flInertiaScaleInv");
}

void GRnBodyDesc_t::SetInertiaScaleInv(float value) {
    SetSchemaValue(m_ptr, "RnBodyDesc_t", "m_flInertiaScaleInv", true, value);
}

float GRnBodyDesc_t::GetLinearDamping() const {
    return GetSchemaValue<float>(m_ptr, "RnBodyDesc_t", "m_flLinearDamping");
}

void GRnBodyDesc_t::SetLinearDamping(float value) {
    SetSchemaValue(m_ptr, "RnBodyDesc_t", "m_flLinearDamping", true, value);
}

float GRnBodyDesc_t::GetAngularDamping() const {
    return GetSchemaValue<float>(m_ptr, "RnBodyDesc_t", "m_flAngularDamping");
}

void GRnBodyDesc_t::SetAngularDamping(float value) {
    SetSchemaValue(m_ptr, "RnBodyDesc_t", "m_flAngularDamping", true, value);
}

float GRnBodyDesc_t::GetLinearDrag() const {
    return GetSchemaValue<float>(m_ptr, "RnBodyDesc_t", "m_flLinearDrag");
}

void GRnBodyDesc_t::SetLinearDrag(float value) {
    SetSchemaValue(m_ptr, "RnBodyDesc_t", "m_flLinearDrag", true, value);
}

float GRnBodyDesc_t::GetAngularDrag() const {
    return GetSchemaValue<float>(m_ptr, "RnBodyDesc_t", "m_flAngularDrag");
}

void GRnBodyDesc_t::SetAngularDrag(float value) {
    SetSchemaValue(m_ptr, "RnBodyDesc_t", "m_flAngularDrag", true, value);
}

float GRnBodyDesc_t::GetLinearBuoyancyDrag() const {
    return GetSchemaValue<float>(m_ptr, "RnBodyDesc_t", "m_flLinearBuoyancyDrag");
}

void GRnBodyDesc_t::SetLinearBuoyancyDrag(float value) {
    SetSchemaValue(m_ptr, "RnBodyDesc_t", "m_flLinearBuoyancyDrag", true, value);
}

float GRnBodyDesc_t::GetAngularBuoyancyDrag() const {
    return GetSchemaValue<float>(m_ptr, "RnBodyDesc_t", "m_flAngularBuoyancyDrag");
}

void GRnBodyDesc_t::SetAngularBuoyancyDrag(float value) {
    SetSchemaValue(m_ptr, "RnBodyDesc_t", "m_flAngularBuoyancyDrag", true, value);
}

Vector GRnBodyDesc_t::GetLastAwakeForceAccum() const {
    return GetSchemaValue<Vector>(m_ptr, "RnBodyDesc_t", "m_vLastAwakeForceAccum");
}

void GRnBodyDesc_t::SetLastAwakeForceAccum(Vector value) {
    SetSchemaValue(m_ptr, "RnBodyDesc_t", "m_vLastAwakeForceAccum", true, value);
}

Vector GRnBodyDesc_t::GetLastAwakeTorqueAccum() const {
    return GetSchemaValue<Vector>(m_ptr, "RnBodyDesc_t", "m_vLastAwakeTorqueAccum");
}

void GRnBodyDesc_t::SetLastAwakeTorqueAccum(Vector value) {
    SetSchemaValue(m_ptr, "RnBodyDesc_t", "m_vLastAwakeTorqueAccum", true, value);
}

float GRnBodyDesc_t::GetBuoyancyFactor() const {
    return GetSchemaValue<float>(m_ptr, "RnBodyDesc_t", "m_flBuoyancyFactor");
}

void GRnBodyDesc_t::SetBuoyancyFactor(float value) {
    SetSchemaValue(m_ptr, "RnBodyDesc_t", "m_flBuoyancyFactor", true, value);
}

float GRnBodyDesc_t::GetGravityScale() const {
    return GetSchemaValue<float>(m_ptr, "RnBodyDesc_t", "m_flGravityScale");
}

void GRnBodyDesc_t::SetGravityScale(float value) {
    SetSchemaValue(m_ptr, "RnBodyDesc_t", "m_flGravityScale", true, value);
}

float GRnBodyDesc_t::GetTimeScale() const {
    return GetSchemaValue<float>(m_ptr, "RnBodyDesc_t", "m_flTimeScale");
}

void GRnBodyDesc_t::SetTimeScale(float value) {
    SetSchemaValue(m_ptr, "RnBodyDesc_t", "m_flTimeScale", true, value);
}

int32_t GRnBodyDesc_t::GetBodyType() const {
    return GetSchemaValue<int32_t>(m_ptr, "RnBodyDesc_t", "m_nBodyType");
}

void GRnBodyDesc_t::SetBodyType(int32_t value) {
    SetSchemaValue(m_ptr, "RnBodyDesc_t", "m_nBodyType", true, value);
}

uint32_t GRnBodyDesc_t::GetGameIndex() const {
    return GetSchemaValue<uint32_t>(m_ptr, "RnBodyDesc_t", "m_nGameIndex");
}

void GRnBodyDesc_t::SetGameIndex(uint32_t value) {
    SetSchemaValue(m_ptr, "RnBodyDesc_t", "m_nGameIndex", true, value);
}

uint32_t GRnBodyDesc_t::GetGameFlags() const {
    return GetSchemaValue<uint32_t>(m_ptr, "RnBodyDesc_t", "m_nGameFlags");
}

void GRnBodyDesc_t::SetGameFlags(uint32_t value) {
    SetSchemaValue(m_ptr, "RnBodyDesc_t", "m_nGameFlags", true, value);
}

int8_t GRnBodyDesc_t::GetMinVelocityIterations() const {
    return GetSchemaValue<int8_t>(m_ptr, "RnBodyDesc_t", "m_nMinVelocityIterations");
}

void GRnBodyDesc_t::SetMinVelocityIterations(int8_t value) {
    SetSchemaValue(m_ptr, "RnBodyDesc_t", "m_nMinVelocityIterations", true, value);
}

int8_t GRnBodyDesc_t::GetMinPositionIterations() const {
    return GetSchemaValue<int8_t>(m_ptr, "RnBodyDesc_t", "m_nMinPositionIterations");
}

void GRnBodyDesc_t::SetMinPositionIterations(int8_t value) {
    SetSchemaValue(m_ptr, "RnBodyDesc_t", "m_nMinPositionIterations", true, value);
}

int8_t GRnBodyDesc_t::GetMassPriority() const {
    return GetSchemaValue<int8_t>(m_ptr, "RnBodyDesc_t", "m_nMassPriority");
}

void GRnBodyDesc_t::SetMassPriority(int8_t value) {
    SetSchemaValue(m_ptr, "RnBodyDesc_t", "m_nMassPriority", true, value);
}

bool GRnBodyDesc_t::GetEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "RnBodyDesc_t", "m_bEnabled");
}

void GRnBodyDesc_t::SetEnabled(bool value) {
    SetSchemaValue(m_ptr, "RnBodyDesc_t", "m_bEnabled", true, value);
}

bool GRnBodyDesc_t::GetSleeping() const {
    return GetSchemaValue<bool>(m_ptr, "RnBodyDesc_t", "m_bSleeping");
}

void GRnBodyDesc_t::SetSleeping(bool value) {
    SetSchemaValue(m_ptr, "RnBodyDesc_t", "m_bSleeping", true, value);
}

bool GRnBodyDesc_t::GetIsContinuousEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "RnBodyDesc_t", "m_bIsContinuousEnabled");
}

void GRnBodyDesc_t::SetIsContinuousEnabled(bool value) {
    SetSchemaValue(m_ptr, "RnBodyDesc_t", "m_bIsContinuousEnabled", true, value);
}

bool GRnBodyDesc_t::GetDragEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "RnBodyDesc_t", "m_bDragEnabled");
}

void GRnBodyDesc_t::SetDragEnabled(bool value) {
    SetSchemaValue(m_ptr, "RnBodyDesc_t", "m_bDragEnabled", true, value);
}

bool GRnBodyDesc_t::GetBuoyancyDragEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "RnBodyDesc_t", "m_bBuoyancyDragEnabled");
}

void GRnBodyDesc_t::SetBuoyancyDragEnabled(bool value) {
    SetSchemaValue(m_ptr, "RnBodyDesc_t", "m_bBuoyancyDragEnabled", true, value);
}

bool GRnBodyDesc_t::GetGravityDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "RnBodyDesc_t", "m_bGravityDisabled");
}

void GRnBodyDesc_t::SetGravityDisabled(bool value) {
    SetSchemaValue(m_ptr, "RnBodyDesc_t", "m_bGravityDisabled", true, value);
}

bool GRnBodyDesc_t::GetSpeculativeEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "RnBodyDesc_t", "m_bSpeculativeEnabled");
}

void GRnBodyDesc_t::SetSpeculativeEnabled(bool value) {
    SetSchemaValue(m_ptr, "RnBodyDesc_t", "m_bSpeculativeEnabled", true, value);
}

bool GRnBodyDesc_t::GetHasShadowController() const {
    return GetSchemaValue<bool>(m_ptr, "RnBodyDesc_t", "m_bHasShadowController");
}

void GRnBodyDesc_t::SetHasShadowController(bool value) {
    SetSchemaValue(m_ptr, "RnBodyDesc_t", "m_bHasShadowController", true, value);
}

std::string GRnBodyDesc_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GRnBodyDesc_t::IsValid() {
    return (m_ptr != nullptr);
}

GCFeMorphLayer::GCFeMorphLayer(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFeMorphLayer::GCFeMorphLayer(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCFeMorphLayer::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CFeMorphLayer", "m_Name");
}

void GCFeMorphLayer::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "CFeMorphLayer", "m_Name", false, value);
}

uint32_t GCFeMorphLayer::GetNameHash() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CFeMorphLayer", "m_nNameHash");
}

void GCFeMorphLayer::SetNameHash(uint32_t value) {
    SetSchemaValue(m_ptr, "CFeMorphLayer", "m_nNameHash", false, value);
}

std::vector<uint16> GCFeMorphLayer::GetNodes() const {
    CUtlVector<uint16>* vec = GetSchemaValue<CUtlVector<uint16>*>(m_ptr, "CFeMorphLayer", "m_Nodes"); std::vector<uint16> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCFeMorphLayer::SetNodes(std::vector<uint16> value) {
    SetSchemaValueCUtlVector<uint16>(m_ptr, "CFeMorphLayer", "m_Nodes", false, value);
}

std::vector<Vector> GCFeMorphLayer::GetInitPos() const {
    CUtlVector<Vector>* vec = GetSchemaValue<CUtlVector<Vector>*>(m_ptr, "CFeMorphLayer", "m_InitPos"); std::vector<Vector> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCFeMorphLayer::SetInitPos(std::vector<Vector> value) {
    SetSchemaValueCUtlVector<Vector>(m_ptr, "CFeMorphLayer", "m_InitPos", false, value);
}

std::vector<float32> GCFeMorphLayer::GetGravity() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "CFeMorphLayer", "m_Gravity"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCFeMorphLayer::SetGravity(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "CFeMorphLayer", "m_Gravity", false, value);
}

std::vector<float32> GCFeMorphLayer::GetGoalStrength() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "CFeMorphLayer", "m_GoalStrength"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCFeMorphLayer::SetGoalStrength(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "CFeMorphLayer", "m_GoalStrength", false, value);
}

std::vector<float32> GCFeMorphLayer::GetGoalDamping() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "CFeMorphLayer", "m_GoalDamping"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCFeMorphLayer::SetGoalDamping(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "CFeMorphLayer", "m_GoalDamping", false, value);
}

std::string GCFeMorphLayer::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFeMorphLayer::IsValid() {
    return (m_ptr != nullptr);
}

GAnimNodeOutputID::GAnimNodeOutputID(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GAnimNodeOutputID::GAnimNodeOutputID(void *ptr) {
    m_ptr = ptr;
}

uint32_t GAnimNodeOutputID::GetId() const {
    return GetSchemaValue<uint32_t>(m_ptr, "AnimNodeOutputID", "m_id");
}

void GAnimNodeOutputID::SetId(uint32_t value) {
    SetSchemaValue(m_ptr, "AnimNodeOutputID", "m_id", false, value);
}

std::string GAnimNodeOutputID::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GAnimNodeOutputID::IsValid() {
    return (m_ptr != nullptr);
}

GEventClientSceneSystemThreadStateChange_t::GEventClientSceneSystemThreadStateChange_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEventClientSceneSystemThreadStateChange_t::GEventClientSceneSystemThreadStateChange_t(void *ptr) {
    m_ptr = ptr;
}

bool GEventClientSceneSystemThreadStateChange_t::GetThreadsActive() const {
    return GetSchemaValue<bool>(m_ptr, "EventClientSceneSystemThreadStateChange_t", "m_bThreadsActive");
}

void GEventClientSceneSystemThreadStateChange_t::SetThreadsActive(bool value) {
    SetSchemaValue(m_ptr, "EventClientSceneSystemThreadStateChange_t", "m_bThreadsActive", true, value);
}

std::string GEventClientSceneSystemThreadStateChange_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEventClientSceneSystemThreadStateChange_t::IsValid() {
    return (m_ptr != nullptr);
}

GEventClientPreSimulate_t::GEventClientPreSimulate_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEventClientPreSimulate_t::GEventClientPreSimulate_t(void *ptr) {
    m_ptr = ptr;
}

std::string GEventClientPreSimulate_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEventClientPreSimulate_t::IsValid() {
    return (m_ptr != nullptr);
}

GClutterSceneObject_t::GClutterSceneObject_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GClutterSceneObject_t::GClutterSceneObject_t(void *ptr) {
    m_ptr = ptr;
}

GAABB_t GClutterSceneObject_t::GetBounds() const {
    return GetSchemaValue<GAABB_t>(m_ptr, "ClutterSceneObject_t", "m_Bounds");
}

void GClutterSceneObject_t::SetBounds(GAABB_t value) {
    SetSchemaValue(m_ptr, "ClutterSceneObject_t", "m_Bounds", true, value);
}

ObjectTypeFlags_t GClutterSceneObject_t::GetFlags() const {
    return GetSchemaValue<ObjectTypeFlags_t>(m_ptr, "ClutterSceneObject_t", "m_flags");
}

void GClutterSceneObject_t::SetFlags(ObjectTypeFlags_t value) {
    SetSchemaValue(m_ptr, "ClutterSceneObject_t", "m_flags", true, value);
}

int16_t GClutterSceneObject_t::GetLayer() const {
    return GetSchemaValue<int16_t>(m_ptr, "ClutterSceneObject_t", "m_nLayer");
}

void GClutterSceneObject_t::SetLayer(int16_t value) {
    SetSchemaValue(m_ptr, "ClutterSceneObject_t", "m_nLayer", true, value);
}

std::vector<Vector> GClutterSceneObject_t::GetInstancePositions() const {
    CUtlVector<Vector>* vec = GetSchemaValue<CUtlVector<Vector>*>(m_ptr, "ClutterSceneObject_t", "m_instancePositions"); std::vector<Vector> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GClutterSceneObject_t::SetInstancePositions(std::vector<Vector> value) {
    SetSchemaValueCUtlVector<Vector>(m_ptr, "ClutterSceneObject_t", "m_instancePositions", true, value);
}

std::vector<float32> GClutterSceneObject_t::GetInstanceScales() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "ClutterSceneObject_t", "m_instanceScales"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GClutterSceneObject_t::SetInstanceScales(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "ClutterSceneObject_t", "m_instanceScales", true, value);
}

std::vector<Color> GClutterSceneObject_t::GetInstanceTintSrgb() const {
    CUtlVector<Color>* vec = GetSchemaValue<CUtlVector<Color>*>(m_ptr, "ClutterSceneObject_t", "m_instanceTintSrgb"); std::vector<Color> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GClutterSceneObject_t::SetInstanceTintSrgb(std::vector<Color> value) {
    SetSchemaValueCUtlVector<Color>(m_ptr, "ClutterSceneObject_t", "m_instanceTintSrgb", true, value);
}

std::vector<GClutterTile_t> GClutterSceneObject_t::GetTiles() const {
    CUtlVector<GClutterTile_t>* vec = GetSchemaValue<CUtlVector<GClutterTile_t>*>(m_ptr, "ClutterSceneObject_t", "m_tiles"); std::vector<GClutterTile_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GClutterSceneObject_t::SetTiles(std::vector<GClutterTile_t> value) {
    SetSchemaValueCUtlVector<GClutterTile_t>(m_ptr, "ClutterSceneObject_t", "m_tiles", true, value);
}

std::string GClutterSceneObject_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GClutterSceneObject_t::IsValid() {
    return (m_ptr != nullptr);
}

GCPoseHandle::GCPoseHandle(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPoseHandle::GCPoseHandle(void *ptr) {
    m_ptr = ptr;
}

uint16_t GCPoseHandle::GetIndex() const {
    return GetSchemaValue<uint16_t>(m_ptr, "CPoseHandle", "m_nIndex");
}

void GCPoseHandle::SetIndex(uint16_t value) {
    SetSchemaValue(m_ptr, "CPoseHandle", "m_nIndex", false, value);
}

PoseType_t GCPoseHandle::GetType() const {
    return GetSchemaValue<PoseType_t>(m_ptr, "CPoseHandle", "m_eType");
}

void GCPoseHandle::SetType(PoseType_t value) {
    SetSchemaValue(m_ptr, "CPoseHandle", "m_eType", false, value);
}

std::string GCPoseHandle::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPoseHandle::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimScriptBase::GCAnimScriptBase(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimScriptBase::GCAnimScriptBase(void *ptr) {
    m_ptr = ptr;
}

bool GCAnimScriptBase::GetIsValid() const {
    return GetSchemaValue<bool>(m_ptr, "CAnimScriptBase", "m_bIsValid");
}

void GCAnimScriptBase::SetIsValid(bool value) {
    SetSchemaValue(m_ptr, "CAnimScriptBase", "m_bIsValid", false, value);
}

std::string GCAnimScriptBase::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimScriptBase::IsValid() {
    return (m_ptr != nullptr);
}

GCVoiceContainerBlender::GCVoiceContainerBlender(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCVoiceContainerBlender::GCVoiceContainerBlender(void *ptr) {
    m_ptr = ptr;
}

float GCVoiceContainerBlender::GetBlendFactor() const {
    return GetSchemaValue<float>(m_ptr, "CVoiceContainerBlender", "m_flBlendFactor");
}

void GCVoiceContainerBlender::SetBlendFactor(float value) {
    SetSchemaValue(m_ptr, "CVoiceContainerBlender", "m_flBlendFactor", false, value);
}

std::string GCVoiceContainerBlender::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCVoiceContainerBlender::IsValid() {
    return (m_ptr != nullptr);
}

Gvphysics_save_cphysicsbody_t::Gvphysics_save_cphysicsbody_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

Gvphysics_save_cphysicsbody_t::Gvphysics_save_cphysicsbody_t(void *ptr) {
    m_ptr = ptr;
}

uint64_t Gvphysics_save_cphysicsbody_t::GetOldPointer() const {
    return GetSchemaValue<uint64_t>(m_ptr, "vphysics_save_cphysicsbody_t", "m_nOldPointer");
}

void Gvphysics_save_cphysicsbody_t::SetOldPointer(uint64_t value) {
    SetSchemaValue(m_ptr, "vphysics_save_cphysicsbody_t", "m_nOldPointer", true, value);
}

std::string Gvphysics_save_cphysicsbody_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool Gvphysics_save_cphysicsbody_t::IsValid() {
    return (m_ptr != nullptr);
}

GCRagdollAnimTag::GCRagdollAnimTag(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCRagdollAnimTag::GCRagdollAnimTag(void *ptr) {
    m_ptr = ptr;
}

AnimPoseControl GCRagdollAnimTag::GetPoseControl() const {
    return GetSchemaValue<AnimPoseControl>(m_ptr, "CRagdollAnimTag", "m_nPoseControl");
}

void GCRagdollAnimTag::SetPoseControl(AnimPoseControl value) {
    SetSchemaValue(m_ptr, "CRagdollAnimTag", "m_nPoseControl", false, value);
}

float GCRagdollAnimTag::GetFrequency() const {
    return GetSchemaValue<float>(m_ptr, "CRagdollAnimTag", "m_flFrequency");
}

void GCRagdollAnimTag::SetFrequency(float value) {
    SetSchemaValue(m_ptr, "CRagdollAnimTag", "m_flFrequency", false, value);
}

float GCRagdollAnimTag::GetDampingRatio() const {
    return GetSchemaValue<float>(m_ptr, "CRagdollAnimTag", "m_flDampingRatio");
}

void GCRagdollAnimTag::SetDampingRatio(float value) {
    SetSchemaValue(m_ptr, "CRagdollAnimTag", "m_flDampingRatio", false, value);
}

float GCRagdollAnimTag::GetDecayDuration() const {
    return GetSchemaValue<float>(m_ptr, "CRagdollAnimTag", "m_flDecayDuration");
}

void GCRagdollAnimTag::SetDecayDuration(float value) {
    SetSchemaValue(m_ptr, "CRagdollAnimTag", "m_flDecayDuration", false, value);
}

float GCRagdollAnimTag::GetDecayBias() const {
    return GetSchemaValue<float>(m_ptr, "CRagdollAnimTag", "m_flDecayBias");
}

void GCRagdollAnimTag::SetDecayBias(float value) {
    SetSchemaValue(m_ptr, "CRagdollAnimTag", "m_flDecayBias", false, value);
}

bool GCRagdollAnimTag::GetDestroy() const {
    return GetSchemaValue<bool>(m_ptr, "CRagdollAnimTag", "m_bDestroy");
}

void GCRagdollAnimTag::SetDestroy(bool value) {
    SetSchemaValue(m_ptr, "CRagdollAnimTag", "m_bDestroy", false, value);
}

std::string GCRagdollAnimTag::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCRagdollAnimTag::IsValid() {
    return (m_ptr != nullptr);
}

GIClientAlphaProperty::GIClientAlphaProperty(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GIClientAlphaProperty::GIClientAlphaProperty(void *ptr) {
    m_ptr = ptr;
}

std::string GIClientAlphaProperty::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GIClientAlphaProperty::IsValid() {
    return (m_ptr != nullptr);
}

GPermModelData_t::GPermModelData_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GPermModelData_t::GPermModelData_t(void *ptr) {
    m_ptr = ptr;
}

CUtlString GPermModelData_t::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "PermModelData_t", "m_name");
}

void GPermModelData_t::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "PermModelData_t", "m_name", true, value);
}

GPermModelInfo_t GPermModelData_t::GetModelInfo() const {
    return GetSchemaValue<GPermModelInfo_t>(m_ptr, "PermModelData_t", "m_modelInfo");
}

void GPermModelData_t::SetModelInfo(GPermModelInfo_t value) {
    SetSchemaValue(m_ptr, "PermModelData_t", "m_modelInfo", true, value);
}

std::vector<GPermModelExtPart_t> GPermModelData_t::GetExtParts() const {
    CUtlVector<GPermModelExtPart_t>* vec = GetSchemaValue<CUtlVector<GPermModelExtPart_t>*>(m_ptr, "PermModelData_t", "m_ExtParts"); std::vector<GPermModelExtPart_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPermModelData_t::SetExtParts(std::vector<GPermModelExtPart_t> value) {
    SetSchemaValueCUtlVector<GPermModelExtPart_t>(m_ptr, "PermModelData_t", "m_ExtParts", true, value);
}

std::vector<uint64> GPermModelData_t::GetRefMeshGroupMasks() const {
    CUtlVector<uint64>* vec = GetSchemaValue<CUtlVector<uint64>*>(m_ptr, "PermModelData_t", "m_refMeshGroupMasks"); std::vector<uint64> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPermModelData_t::SetRefMeshGroupMasks(std::vector<uint64> value) {
    SetSchemaValueCUtlVector<uint64>(m_ptr, "PermModelData_t", "m_refMeshGroupMasks", true, value);
}

std::vector<uint64> GPermModelData_t::GetRefPhysGroupMasks() const {
    CUtlVector<uint64>* vec = GetSchemaValue<CUtlVector<uint64>*>(m_ptr, "PermModelData_t", "m_refPhysGroupMasks"); std::vector<uint64> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPermModelData_t::SetRefPhysGroupMasks(std::vector<uint64> value) {
    SetSchemaValueCUtlVector<uint64>(m_ptr, "PermModelData_t", "m_refPhysGroupMasks", true, value);
}

std::vector<uint8> GPermModelData_t::GetRefLODGroupMasks() const {
    CUtlVector<uint8>* vec = GetSchemaValue<CUtlVector<uint8>*>(m_ptr, "PermModelData_t", "m_refLODGroupMasks"); std::vector<uint8> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPermModelData_t::SetRefLODGroupMasks(std::vector<uint8> value) {
    SetSchemaValueCUtlVector<uint8>(m_ptr, "PermModelData_t", "m_refLODGroupMasks", true, value);
}

std::vector<float32> GPermModelData_t::GetLodGroupSwitchDistances() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "PermModelData_t", "m_lodGroupSwitchDistances"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPermModelData_t::SetLodGroupSwitchDistances(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "PermModelData_t", "m_lodGroupSwitchDistances", true, value);
}

std::vector<CUtlString> GPermModelData_t::GetMeshGroups() const {
    CUtlVector<CUtlString>* vec = GetSchemaValue<CUtlVector<CUtlString>*>(m_ptr, "PermModelData_t", "m_meshGroups"); std::vector<CUtlString> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPermModelData_t::SetMeshGroups(std::vector<CUtlString> value) {
    SetSchemaValueCUtlVector<CUtlString>(m_ptr, "PermModelData_t", "m_meshGroups", true, value);
}

std::vector<GMaterialGroup_t> GPermModelData_t::GetMaterialGroups() const {
    CUtlVector<GMaterialGroup_t>* vec = GetSchemaValue<CUtlVector<GMaterialGroup_t>*>(m_ptr, "PermModelData_t", "m_materialGroups"); std::vector<GMaterialGroup_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPermModelData_t::SetMaterialGroups(std::vector<GMaterialGroup_t> value) {
    SetSchemaValueCUtlVector<GMaterialGroup_t>(m_ptr, "PermModelData_t", "m_materialGroups", true, value);
}

uint64_t GPermModelData_t::GetDefaultMeshGroupMask() const {
    return GetSchemaValue<uint64_t>(m_ptr, "PermModelData_t", "m_nDefaultMeshGroupMask");
}

void GPermModelData_t::SetDefaultMeshGroupMask(uint64_t value) {
    SetSchemaValue(m_ptr, "PermModelData_t", "m_nDefaultMeshGroupMask", true, value);
}

GModelSkeletonData_t GPermModelData_t::GetModelSkeleton() const {
    return GetSchemaValue<GModelSkeletonData_t>(m_ptr, "PermModelData_t", "m_modelSkeleton");
}

void GPermModelData_t::SetModelSkeleton(GModelSkeletonData_t value) {
    SetSchemaValue(m_ptr, "PermModelData_t", "m_modelSkeleton", true, value);
}

std::vector<int16> GPermModelData_t::GetRemappingTable() const {
    CUtlVector<int16>* vec = GetSchemaValue<CUtlVector<int16>*>(m_ptr, "PermModelData_t", "m_remappingTable"); std::vector<int16> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPermModelData_t::SetRemappingTable(std::vector<int16> value) {
    SetSchemaValueCUtlVector<int16>(m_ptr, "PermModelData_t", "m_remappingTable", true, value);
}

std::vector<uint16> GPermModelData_t::GetRemappingTableStarts() const {
    CUtlVector<uint16>* vec = GetSchemaValue<CUtlVector<uint16>*>(m_ptr, "PermModelData_t", "m_remappingTableStarts"); std::vector<uint16> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPermModelData_t::SetRemappingTableStarts(std::vector<uint16> value) {
    SetSchemaValueCUtlVector<uint16>(m_ptr, "PermModelData_t", "m_remappingTableStarts", true, value);
}

std::vector<GModelBoneFlexDriver_t> GPermModelData_t::GetBoneFlexDrivers() const {
    CUtlVector<GModelBoneFlexDriver_t>* vec = GetSchemaValue<CUtlVector<GModelBoneFlexDriver_t>*>(m_ptr, "PermModelData_t", "m_boneFlexDrivers"); std::vector<GModelBoneFlexDriver_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPermModelData_t::SetBoneFlexDrivers(std::vector<GModelBoneFlexDriver_t> value) {
    SetSchemaValueCUtlVector<GModelBoneFlexDriver_t>(m_ptr, "PermModelData_t", "m_boneFlexDrivers", true, value);
}

GCModelConfigList GPermModelData_t::GetModelConfigList() const {
    GCModelConfigList value(GetSchemaValuePtr<void>(m_ptr, "PermModelData_t", "m_pModelConfigList"));
    return value;
}

void GPermModelData_t::SetModelConfigList(GCModelConfigList* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ModelConfigList' is not possible.\n");
}

std::vector<CUtlString> GPermModelData_t::GetBodyGroupsHiddenInTools() const {
    CUtlVector<CUtlString>* vec = GetSchemaValue<CUtlVector<CUtlString>*>(m_ptr, "PermModelData_t", "m_BodyGroupsHiddenInTools"); std::vector<CUtlString> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPermModelData_t::SetBodyGroupsHiddenInTools(std::vector<CUtlString> value) {
    SetSchemaValueCUtlVector<CUtlString>(m_ptr, "PermModelData_t", "m_BodyGroupsHiddenInTools", true, value);
}

std::vector<GPermModelDataAnimatedMaterialAttribute_t> GPermModelData_t::GetAnimatedMaterialAttributes() const {
    CUtlVector<GPermModelDataAnimatedMaterialAttribute_t>* vec = GetSchemaValue<CUtlVector<GPermModelDataAnimatedMaterialAttribute_t>*>(m_ptr, "PermModelData_t", "m_AnimatedMaterialAttributes"); std::vector<GPermModelDataAnimatedMaterialAttribute_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GPermModelData_t::SetAnimatedMaterialAttributes(std::vector<GPermModelDataAnimatedMaterialAttribute_t> value) {
    SetSchemaValueCUtlVector<GPermModelDataAnimatedMaterialAttribute_t>(m_ptr, "PermModelData_t", "m_AnimatedMaterialAttributes", true, value);
}

std::string GPermModelData_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GPermModelData_t::IsValid() {
    return (m_ptr != nullptr);
}

GFootFixedSettings::GFootFixedSettings(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFootFixedSettings::GFootFixedSettings(void *ptr) {
    m_ptr = ptr;
}

GTraceSettings_t GFootFixedSettings::GetTraceSettings() const {
    return GetSchemaValue<GTraceSettings_t>(m_ptr, "FootFixedSettings", "m_traceSettings");
}

void GFootFixedSettings::SetTraceSettings(GTraceSettings_t value) {
    SetSchemaValue(m_ptr, "FootFixedSettings", "m_traceSettings", false, value);
}

Vector GFootFixedSettings::GetFootBaseBindPosePositionMS() const {
    return GetSchemaValue<Vector>(m_ptr, "FootFixedSettings", "m_vFootBaseBindPosePositionMS");
}

void GFootFixedSettings::SetFootBaseBindPosePositionMS(Vector value) {
    SetSchemaValue(m_ptr, "FootFixedSettings", "m_vFootBaseBindPosePositionMS", false, value);
}

float GFootFixedSettings::GetFootBaseLength() const {
    return GetSchemaValue<float>(m_ptr, "FootFixedSettings", "m_flFootBaseLength");
}

void GFootFixedSettings::SetFootBaseLength(float value) {
    SetSchemaValue(m_ptr, "FootFixedSettings", "m_flFootBaseLength", false, value);
}

float GFootFixedSettings::GetMaxRotationLeft() const {
    return GetSchemaValue<float>(m_ptr, "FootFixedSettings", "m_flMaxRotationLeft");
}

void GFootFixedSettings::SetMaxRotationLeft(float value) {
    SetSchemaValue(m_ptr, "FootFixedSettings", "m_flMaxRotationLeft", false, value);
}

float GFootFixedSettings::GetMaxRotationRight() const {
    return GetSchemaValue<float>(m_ptr, "FootFixedSettings", "m_flMaxRotationRight");
}

void GFootFixedSettings::SetMaxRotationRight(float value) {
    SetSchemaValue(m_ptr, "FootFixedSettings", "m_flMaxRotationRight", false, value);
}

int32_t GFootFixedSettings::GetFootstepLandedTagIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "FootFixedSettings", "m_footstepLandedTagIndex");
}

void GFootFixedSettings::SetFootstepLandedTagIndex(int32_t value) {
    SetSchemaValue(m_ptr, "FootFixedSettings", "m_footstepLandedTagIndex", false, value);
}

bool GFootFixedSettings::GetEnableTracing() const {
    return GetSchemaValue<bool>(m_ptr, "FootFixedSettings", "m_bEnableTracing");
}

void GFootFixedSettings::SetEnableTracing(bool value) {
    SetSchemaValue(m_ptr, "FootFixedSettings", "m_bEnableTracing", false, value);
}

float GFootFixedSettings::GetTraceAngleBlend() const {
    return GetSchemaValue<float>(m_ptr, "FootFixedSettings", "m_flTraceAngleBlend");
}

void GFootFixedSettings::SetTraceAngleBlend(float value) {
    SetSchemaValue(m_ptr, "FootFixedSettings", "m_flTraceAngleBlend", false, value);
}

int32_t GFootFixedSettings::GetDisableTagIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "FootFixedSettings", "m_nDisableTagIndex");
}

void GFootFixedSettings::SetDisableTagIndex(int32_t value) {
    SetSchemaValue(m_ptr, "FootFixedSettings", "m_nDisableTagIndex", false, value);
}

int32_t GFootFixedSettings::GetFootIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "FootFixedSettings", "m_nFootIndex");
}

void GFootFixedSettings::SetFootIndex(int32_t value) {
    SetSchemaValue(m_ptr, "FootFixedSettings", "m_nFootIndex", false, value);
}

std::string GFootFixedSettings::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFootFixedSettings::IsValid() {
    return (m_ptr != nullptr);
}

GCSolveIKTargetHandle_t::GCSolveIKTargetHandle_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSolveIKTargetHandle_t::GCSolveIKTargetHandle_t(void *ptr) {
    m_ptr = ptr;
}

GCAnimParamHandle GCSolveIKTargetHandle_t::GetPositionHandle() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CSolveIKTargetHandle_t", "m_positionHandle");
}

void GCSolveIKTargetHandle_t::SetPositionHandle(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CSolveIKTargetHandle_t", "m_positionHandle", true, value);
}

GCAnimParamHandle GCSolveIKTargetHandle_t::GetOrientationHandle() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CSolveIKTargetHandle_t", "m_orientationHandle");
}

void GCSolveIKTargetHandle_t::SetOrientationHandle(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CSolveIKTargetHandle_t", "m_orientationHandle", true, value);
}

std::string GCSolveIKTargetHandle_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSolveIKTargetHandle_t::IsValid() {
    return (m_ptr != nullptr);
}

GCBlendUpdateNode::GCBlendUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBlendUpdateNode::GCBlendUpdateNode(void *ptr) {
    m_ptr = ptr;
}

std::vector<GCAnimUpdateNodeRef> GCBlendUpdateNode::GetChildren() const {
    CUtlVector<GCAnimUpdateNodeRef>* vec = GetSchemaValue<CUtlVector<GCAnimUpdateNodeRef>*>(m_ptr, "CBlendUpdateNode", "m_children"); std::vector<GCAnimUpdateNodeRef> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCBlendUpdateNode::SetChildren(std::vector<GCAnimUpdateNodeRef> value) {
    SetSchemaValueCUtlVector<GCAnimUpdateNodeRef>(m_ptr, "CBlendUpdateNode", "m_children", false, value);
}

std::vector<uint8> GCBlendUpdateNode::GetSortedOrder() const {
    CUtlVector<uint8>* vec = GetSchemaValue<CUtlVector<uint8>*>(m_ptr, "CBlendUpdateNode", "m_sortedOrder"); std::vector<uint8> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCBlendUpdateNode::SetSortedOrder(std::vector<uint8> value) {
    SetSchemaValueCUtlVector<uint8>(m_ptr, "CBlendUpdateNode", "m_sortedOrder", false, value);
}

std::vector<float32> GCBlendUpdateNode::GetTargetValues() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "CBlendUpdateNode", "m_targetValues"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCBlendUpdateNode::SetTargetValues(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "CBlendUpdateNode", "m_targetValues", false, value);
}

AnimValueSource GCBlendUpdateNode::GetBlendValueSource() const {
    return GetSchemaValue<AnimValueSource>(m_ptr, "CBlendUpdateNode", "m_blendValueSource");
}

void GCBlendUpdateNode::SetBlendValueSource(AnimValueSource value) {
    SetSchemaValue(m_ptr, "CBlendUpdateNode", "m_blendValueSource", false, value);
}

GCAnimParamHandle GCBlendUpdateNode::GetParamIndex() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CBlendUpdateNode", "m_paramIndex");
}

void GCBlendUpdateNode::SetParamIndex(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CBlendUpdateNode", "m_paramIndex", false, value);
}

GCAnimInputDamping GCBlendUpdateNode::GetDamping() const {
    return GetSchemaValue<GCAnimInputDamping>(m_ptr, "CBlendUpdateNode", "m_damping");
}

void GCBlendUpdateNode::SetDamping(GCAnimInputDamping value) {
    SetSchemaValue(m_ptr, "CBlendUpdateNode", "m_damping", false, value);
}

BlendKeyType GCBlendUpdateNode::GetBlendKeyType() const {
    return GetSchemaValue<BlendKeyType>(m_ptr, "CBlendUpdateNode", "m_blendKeyType");
}

void GCBlendUpdateNode::SetBlendKeyType(BlendKeyType value) {
    SetSchemaValue(m_ptr, "CBlendUpdateNode", "m_blendKeyType", false, value);
}

bool GCBlendUpdateNode::GetLockBlendOnReset() const {
    return GetSchemaValue<bool>(m_ptr, "CBlendUpdateNode", "m_bLockBlendOnReset");
}

void GCBlendUpdateNode::SetLockBlendOnReset(bool value) {
    SetSchemaValue(m_ptr, "CBlendUpdateNode", "m_bLockBlendOnReset", false, value);
}

bool GCBlendUpdateNode::GetSyncCycles() const {
    return GetSchemaValue<bool>(m_ptr, "CBlendUpdateNode", "m_bSyncCycles");
}

void GCBlendUpdateNode::SetSyncCycles(bool value) {
    SetSchemaValue(m_ptr, "CBlendUpdateNode", "m_bSyncCycles", false, value);
}

bool GCBlendUpdateNode::GetLoop() const {
    return GetSchemaValue<bool>(m_ptr, "CBlendUpdateNode", "m_bLoop");
}

void GCBlendUpdateNode::SetLoop(bool value) {
    SetSchemaValue(m_ptr, "CBlendUpdateNode", "m_bLoop", false, value);
}

bool GCBlendUpdateNode::GetLockWhenWaning() const {
    return GetSchemaValue<bool>(m_ptr, "CBlendUpdateNode", "m_bLockWhenWaning");
}

void GCBlendUpdateNode::SetLockWhenWaning(bool value) {
    SetSchemaValue(m_ptr, "CBlendUpdateNode", "m_bLockWhenWaning", false, value);
}

std::string GCBlendUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBlendUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimationGraphVisualizerSphere::GCAnimationGraphVisualizerSphere(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimationGraphVisualizerSphere::GCAnimationGraphVisualizerSphere(void *ptr) {
    m_ptr = ptr;
}

Vector GCAnimationGraphVisualizerSphere::GetWsPosition() const {
    return GetSchemaValue<Vector>(m_ptr, "CAnimationGraphVisualizerSphere", "m_vWsPosition");
}

void GCAnimationGraphVisualizerSphere::SetWsPosition(Vector value) {
    SetSchemaValue(m_ptr, "CAnimationGraphVisualizerSphere", "m_vWsPosition", false, value);
}

float GCAnimationGraphVisualizerSphere::GetRadius() const {
    return GetSchemaValue<float>(m_ptr, "CAnimationGraphVisualizerSphere", "m_flRadius");
}

void GCAnimationGraphVisualizerSphere::SetRadius(float value) {
    SetSchemaValue(m_ptr, "CAnimationGraphVisualizerSphere", "m_flRadius", false, value);
}

Color GCAnimationGraphVisualizerSphere::GetColor() const {
    return GetSchemaValue<Color>(m_ptr, "CAnimationGraphVisualizerSphere", "m_Color");
}

void GCAnimationGraphVisualizerSphere::SetColor(Color value) {
    SetSchemaValue(m_ptr, "CAnimationGraphVisualizerSphere", "m_Color", false, value);
}

std::string GCAnimationGraphVisualizerSphere::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimationGraphVisualizerSphere::IsValid() {
    return (m_ptr != nullptr);
}

GMaterialParamFloat_t::GMaterialParamFloat_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GMaterialParamFloat_t::GMaterialParamFloat_t(void *ptr) {
    m_ptr = ptr;
}

float GMaterialParamFloat_t::GetValue() const {
    return GetSchemaValue<float>(m_ptr, "MaterialParamFloat_t", "m_flValue");
}

void GMaterialParamFloat_t::SetValue(float value) {
    SetSchemaValue(m_ptr, "MaterialParamFloat_t", "m_flValue", true, value);
}

std::string GMaterialParamFloat_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GMaterialParamFloat_t::IsValid() {
    return (m_ptr != nullptr);
}

GEventServerSimulate_t::GEventServerSimulate_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEventServerSimulate_t::GEventServerSimulate_t(void *ptr) {
    m_ptr = ptr;
}

std::string GEventServerSimulate_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEventServerSimulate_t::IsValid() {
    return (m_ptr != nullptr);
}

GCVoiceContainerEnvelopeAnalyzer::GCVoiceContainerEnvelopeAnalyzer(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCVoiceContainerEnvelopeAnalyzer::GCVoiceContainerEnvelopeAnalyzer(void *ptr) {
    m_ptr = ptr;
}

EMode_t GCVoiceContainerEnvelopeAnalyzer::GetMode() const {
    return GetSchemaValue<EMode_t>(m_ptr, "CVoiceContainerEnvelopeAnalyzer", "m_mode");
}

void GCVoiceContainerEnvelopeAnalyzer::SetMode(EMode_t value) {
    SetSchemaValue(m_ptr, "CVoiceContainerEnvelopeAnalyzer", "m_mode", false, value);
}

int32_t GCVoiceContainerEnvelopeAnalyzer::GetSamples() const {
    return GetSchemaValue<int32_t>(m_ptr, "CVoiceContainerEnvelopeAnalyzer", "m_nSamples");
}

void GCVoiceContainerEnvelopeAnalyzer::SetSamples(int32_t value) {
    SetSchemaValue(m_ptr, "CVoiceContainerEnvelopeAnalyzer", "m_nSamples", false, value);
}

float GCVoiceContainerEnvelopeAnalyzer::GetThreshold() const {
    return GetSchemaValue<float>(m_ptr, "CVoiceContainerEnvelopeAnalyzer", "m_flThreshold");
}

void GCVoiceContainerEnvelopeAnalyzer::SetThreshold(float value) {
    SetSchemaValue(m_ptr, "CVoiceContainerEnvelopeAnalyzer", "m_flThreshold", false, value);
}

std::string GCVoiceContainerEnvelopeAnalyzer::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCVoiceContainerEnvelopeAnalyzer::IsValid() {
    return (m_ptr != nullptr);
}

GFollowAttachmentSettings_t::GFollowAttachmentSettings_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFollowAttachmentSettings_t::GFollowAttachmentSettings_t(void *ptr) {
    m_ptr = ptr;
}

GCAnimAttachment GFollowAttachmentSettings_t::GetAttachment() const {
    return GetSchemaValue<GCAnimAttachment>(m_ptr, "FollowAttachmentSettings_t", "m_attachment");
}

void GFollowAttachmentSettings_t::SetAttachment(GCAnimAttachment value) {
    SetSchemaValue(m_ptr, "FollowAttachmentSettings_t", "m_attachment", true, value);
}

int32_t GFollowAttachmentSettings_t::GetBoneIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "FollowAttachmentSettings_t", "m_boneIndex");
}

void GFollowAttachmentSettings_t::SetBoneIndex(int32_t value) {
    SetSchemaValue(m_ptr, "FollowAttachmentSettings_t", "m_boneIndex", true, value);
}

bool GFollowAttachmentSettings_t::GetMatchTranslation() const {
    return GetSchemaValue<bool>(m_ptr, "FollowAttachmentSettings_t", "m_bMatchTranslation");
}

void GFollowAttachmentSettings_t::SetMatchTranslation(bool value) {
    SetSchemaValue(m_ptr, "FollowAttachmentSettings_t", "m_bMatchTranslation", true, value);
}

bool GFollowAttachmentSettings_t::GetMatchRotation() const {
    return GetSchemaValue<bool>(m_ptr, "FollowAttachmentSettings_t", "m_bMatchRotation");
}

void GFollowAttachmentSettings_t::SetMatchRotation(bool value) {
    SetSchemaValue(m_ptr, "FollowAttachmentSettings_t", "m_bMatchRotation", true, value);
}

std::string GFollowAttachmentSettings_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFollowAttachmentSettings_t::IsValid() {
    return (m_ptr != nullptr);
}

GJiggleBoneSettings_t::GJiggleBoneSettings_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GJiggleBoneSettings_t::GJiggleBoneSettings_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GJiggleBoneSettings_t::GetBoneIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "JiggleBoneSettings_t", "m_nBoneIndex");
}

void GJiggleBoneSettings_t::SetBoneIndex(int32_t value) {
    SetSchemaValue(m_ptr, "JiggleBoneSettings_t", "m_nBoneIndex", true, value);
}

float GJiggleBoneSettings_t::GetSpringStrength() const {
    return GetSchemaValue<float>(m_ptr, "JiggleBoneSettings_t", "m_flSpringStrength");
}

void GJiggleBoneSettings_t::SetSpringStrength(float value) {
    SetSchemaValue(m_ptr, "JiggleBoneSettings_t", "m_flSpringStrength", true, value);
}

float GJiggleBoneSettings_t::GetMaxTimeStep() const {
    return GetSchemaValue<float>(m_ptr, "JiggleBoneSettings_t", "m_flMaxTimeStep");
}

void GJiggleBoneSettings_t::SetMaxTimeStep(float value) {
    SetSchemaValue(m_ptr, "JiggleBoneSettings_t", "m_flMaxTimeStep", true, value);
}

float GJiggleBoneSettings_t::GetDamping() const {
    return GetSchemaValue<float>(m_ptr, "JiggleBoneSettings_t", "m_flDamping");
}

void GJiggleBoneSettings_t::SetDamping(float value) {
    SetSchemaValue(m_ptr, "JiggleBoneSettings_t", "m_flDamping", true, value);
}

Vector GJiggleBoneSettings_t::GetBoundsMaxLS() const {
    return GetSchemaValue<Vector>(m_ptr, "JiggleBoneSettings_t", "m_vBoundsMaxLS");
}

void GJiggleBoneSettings_t::SetBoundsMaxLS(Vector value) {
    SetSchemaValue(m_ptr, "JiggleBoneSettings_t", "m_vBoundsMaxLS", true, value);
}

Vector GJiggleBoneSettings_t::GetBoundsMinLS() const {
    return GetSchemaValue<Vector>(m_ptr, "JiggleBoneSettings_t", "m_vBoundsMinLS");
}

void GJiggleBoneSettings_t::SetBoundsMinLS(Vector value) {
    SetSchemaValue(m_ptr, "JiggleBoneSettings_t", "m_vBoundsMinLS", true, value);
}

JiggleBoneSimSpace GJiggleBoneSettings_t::GetSimSpace() const {
    return GetSchemaValue<JiggleBoneSimSpace>(m_ptr, "JiggleBoneSettings_t", "m_eSimSpace");
}

void GJiggleBoneSettings_t::SetSimSpace(JiggleBoneSimSpace value) {
    SetSchemaValue(m_ptr, "JiggleBoneSettings_t", "m_eSimSpace", true, value);
}

std::string GJiggleBoneSettings_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GJiggleBoneSettings_t::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimStateMachineUpdater::GCAnimStateMachineUpdater(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimStateMachineUpdater::GCAnimStateMachineUpdater(void *ptr) {
    m_ptr = ptr;
}

std::vector<GCStateUpdateData> GCAnimStateMachineUpdater::GetStates() const {
    CUtlVector<GCStateUpdateData>* vec = GetSchemaValue<CUtlVector<GCStateUpdateData>*>(m_ptr, "CAnimStateMachineUpdater", "m_states"); std::vector<GCStateUpdateData> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimStateMachineUpdater::SetStates(std::vector<GCStateUpdateData> value) {
    SetSchemaValueCUtlVector<GCStateUpdateData>(m_ptr, "CAnimStateMachineUpdater", "m_states", false, value);
}

std::vector<GCTransitionUpdateData> GCAnimStateMachineUpdater::GetTransitions() const {
    CUtlVector<GCTransitionUpdateData>* vec = GetSchemaValue<CUtlVector<GCTransitionUpdateData>*>(m_ptr, "CAnimStateMachineUpdater", "m_transitions"); std::vector<GCTransitionUpdateData> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimStateMachineUpdater::SetTransitions(std::vector<GCTransitionUpdateData> value) {
    SetSchemaValueCUtlVector<GCTransitionUpdateData>(m_ptr, "CAnimStateMachineUpdater", "m_transitions", false, value);
}

int32_t GCAnimStateMachineUpdater::GetStartStateIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimStateMachineUpdater", "m_startStateIndex");
}

void GCAnimStateMachineUpdater::SetStartStateIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimStateMachineUpdater", "m_startStateIndex", false, value);
}

std::string GCAnimStateMachineUpdater::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimStateMachineUpdater::IsValid() {
    return (m_ptr != nullptr);
}

GCNmControlParameterFloatNode::GCNmControlParameterFloatNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmControlParameterFloatNode::GCNmControlParameterFloatNode(void *ptr) {
    m_ptr = ptr;
}

std::string GCNmControlParameterFloatNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmControlParameterFloatNode::IsValid() {
    return (m_ptr != nullptr);
}

GCSeqCmdLayer::GCSeqCmdLayer(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSeqCmdLayer::GCSeqCmdLayer(void *ptr) {
    m_ptr = ptr;
}

int16_t GCSeqCmdLayer::GetCmd() const {
    return GetSchemaValue<int16_t>(m_ptr, "CSeqCmdLayer", "m_cmd");
}

void GCSeqCmdLayer::SetCmd(int16_t value) {
    SetSchemaValue(m_ptr, "CSeqCmdLayer", "m_cmd", false, value);
}

int16_t GCSeqCmdLayer::GetLocalReference() const {
    return GetSchemaValue<int16_t>(m_ptr, "CSeqCmdLayer", "m_nLocalReference");
}

void GCSeqCmdLayer::SetLocalReference(int16_t value) {
    SetSchemaValue(m_ptr, "CSeqCmdLayer", "m_nLocalReference", false, value);
}

int16_t GCSeqCmdLayer::GetLocalBonemask() const {
    return GetSchemaValue<int16_t>(m_ptr, "CSeqCmdLayer", "m_nLocalBonemask");
}

void GCSeqCmdLayer::SetLocalBonemask(int16_t value) {
    SetSchemaValue(m_ptr, "CSeqCmdLayer", "m_nLocalBonemask", false, value);
}

int16_t GCSeqCmdLayer::GetDstResult() const {
    return GetSchemaValue<int16_t>(m_ptr, "CSeqCmdLayer", "m_nDstResult");
}

void GCSeqCmdLayer::SetDstResult(int16_t value) {
    SetSchemaValue(m_ptr, "CSeqCmdLayer", "m_nDstResult", false, value);
}

int16_t GCSeqCmdLayer::GetSrcResult() const {
    return GetSchemaValue<int16_t>(m_ptr, "CSeqCmdLayer", "m_nSrcResult");
}

void GCSeqCmdLayer::SetSrcResult(int16_t value) {
    SetSchemaValue(m_ptr, "CSeqCmdLayer", "m_nSrcResult", false, value);
}

bool GCSeqCmdLayer::GetSpline() const {
    return GetSchemaValue<bool>(m_ptr, "CSeqCmdLayer", "m_bSpline");
}

void GCSeqCmdLayer::SetSpline(bool value) {
    SetSchemaValue(m_ptr, "CSeqCmdLayer", "m_bSpline", false, value);
}

float GCSeqCmdLayer::GetVar1() const {
    return GetSchemaValue<float>(m_ptr, "CSeqCmdLayer", "m_flVar1");
}

void GCSeqCmdLayer::SetVar1(float value) {
    SetSchemaValue(m_ptr, "CSeqCmdLayer", "m_flVar1", false, value);
}

float GCSeqCmdLayer::GetVar2() const {
    return GetSchemaValue<float>(m_ptr, "CSeqCmdLayer", "m_flVar2");
}

void GCSeqCmdLayer::SetVar2(float value) {
    SetSchemaValue(m_ptr, "CSeqCmdLayer", "m_flVar2", false, value);
}

int16_t GCSeqCmdLayer::GetLineNumber() const {
    return GetSchemaValue<int16_t>(m_ptr, "CSeqCmdLayer", "m_nLineNumber");
}

void GCSeqCmdLayer::SetLineNumber(int16_t value) {
    SetSchemaValue(m_ptr, "CSeqCmdLayer", "m_nLineNumber", false, value);
}

std::string GCSeqCmdLayer::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSeqCmdLayer::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimScriptComponentUpdater::GCAnimScriptComponentUpdater(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimScriptComponentUpdater::GCAnimScriptComponentUpdater(void *ptr) {
    m_ptr = ptr;
}

GAnimScriptHandle GCAnimScriptComponentUpdater::GetScript() const {
    return GetSchemaValue<GAnimScriptHandle>(m_ptr, "CAnimScriptComponentUpdater", "m_hScript");
}

void GCAnimScriptComponentUpdater::SetScript(GAnimScriptHandle value) {
    SetSchemaValue(m_ptr, "CAnimScriptComponentUpdater", "m_hScript", false, value);
}

std::string GCAnimScriptComponentUpdater::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimScriptComponentUpdater::IsValid() {
    return (m_ptr != nullptr);
}

GFeRigidColliderIndices_t::GFeRigidColliderIndices_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeRigidColliderIndices_t::GFeRigidColliderIndices_t(void *ptr) {
    m_ptr = ptr;
}

uint16_t GFeRigidColliderIndices_t::GetTaperedCapsuleRigidIndex() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeRigidColliderIndices_t", "m_nTaperedCapsuleRigidIndex");
}

void GFeRigidColliderIndices_t::SetTaperedCapsuleRigidIndex(uint16_t value) {
    SetSchemaValue(m_ptr, "FeRigidColliderIndices_t", "m_nTaperedCapsuleRigidIndex", true, value);
}

uint16_t GFeRigidColliderIndices_t::GetSphereRigidIndex() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeRigidColliderIndices_t", "m_nSphereRigidIndex");
}

void GFeRigidColliderIndices_t::SetSphereRigidIndex(uint16_t value) {
    SetSchemaValue(m_ptr, "FeRigidColliderIndices_t", "m_nSphereRigidIndex", true, value);
}

uint16_t GFeRigidColliderIndices_t::GetBoxRigidIndex() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeRigidColliderIndices_t", "m_nBoxRigidIndex");
}

void GFeRigidColliderIndices_t::SetBoxRigidIndex(uint16_t value) {
    SetSchemaValue(m_ptr, "FeRigidColliderIndices_t", "m_nBoxRigidIndex", true, value);
}

uint16_t GFeRigidColliderIndices_t::GetCollisionPlaneIndex() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeRigidColliderIndices_t", "m_nCollisionPlaneIndex");
}

void GFeRigidColliderIndices_t::SetCollisionPlaneIndex(uint16_t value) {
    SetSchemaValue(m_ptr, "FeRigidColliderIndices_t", "m_nCollisionPlaneIndex", true, value);
}

std::string GFeRigidColliderIndices_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeRigidColliderIndices_t::IsValid() {
    return (m_ptr != nullptr);
}

GCSeqAutoLayer::GCSeqAutoLayer(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSeqAutoLayer::GCSeqAutoLayer(void *ptr) {
    m_ptr = ptr;
}

int16_t GCSeqAutoLayer::GetLocalReference() const {
    return GetSchemaValue<int16_t>(m_ptr, "CSeqAutoLayer", "m_nLocalReference");
}

void GCSeqAutoLayer::SetLocalReference(int16_t value) {
    SetSchemaValue(m_ptr, "CSeqAutoLayer", "m_nLocalReference", false, value);
}

int16_t GCSeqAutoLayer::GetLocalPose() const {
    return GetSchemaValue<int16_t>(m_ptr, "CSeqAutoLayer", "m_nLocalPose");
}

void GCSeqAutoLayer::SetLocalPose(int16_t value) {
    SetSchemaValue(m_ptr, "CSeqAutoLayer", "m_nLocalPose", false, value);
}

GCSeqAutoLayerFlag GCSeqAutoLayer::GetFlags() const {
    return GetSchemaValue<GCSeqAutoLayerFlag>(m_ptr, "CSeqAutoLayer", "m_flags");
}

void GCSeqAutoLayer::SetFlags(GCSeqAutoLayerFlag value) {
    SetSchemaValue(m_ptr, "CSeqAutoLayer", "m_flags", false, value);
}

float GCSeqAutoLayer::GetStart() const {
    return GetSchemaValue<float>(m_ptr, "CSeqAutoLayer", "m_start");
}

void GCSeqAutoLayer::SetStart(float value) {
    SetSchemaValue(m_ptr, "CSeqAutoLayer", "m_start", false, value);
}

float GCSeqAutoLayer::GetPeak() const {
    return GetSchemaValue<float>(m_ptr, "CSeqAutoLayer", "m_peak");
}

void GCSeqAutoLayer::SetPeak(float value) {
    SetSchemaValue(m_ptr, "CSeqAutoLayer", "m_peak", false, value);
}

float GCSeqAutoLayer::GetTail() const {
    return GetSchemaValue<float>(m_ptr, "CSeqAutoLayer", "m_tail");
}

void GCSeqAutoLayer::SetTail(float value) {
    SetSchemaValue(m_ptr, "CSeqAutoLayer", "m_tail", false, value);
}

float GCSeqAutoLayer::GetEnd() const {
    return GetSchemaValue<float>(m_ptr, "CSeqAutoLayer", "m_end");
}

void GCSeqAutoLayer::SetEnd(float value) {
    SetSchemaValue(m_ptr, "CSeqAutoLayer", "m_end", false, value);
}

std::string GCSeqAutoLayer::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSeqAutoLayer::IsValid() {
    return (m_ptr != nullptr);
}

GBakedLightingInfo_t::GBakedLightingInfo_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GBakedLightingInfo_t::GBakedLightingInfo_t(void *ptr) {
    m_ptr = ptr;
}

uint32_t GBakedLightingInfo_t::GetLightmapVersionNumber() const {
    return GetSchemaValue<uint32_t>(m_ptr, "BakedLightingInfo_t", "m_nLightmapVersionNumber");
}

void GBakedLightingInfo_t::SetLightmapVersionNumber(uint32_t value) {
    SetSchemaValue(m_ptr, "BakedLightingInfo_t", "m_nLightmapVersionNumber", true, value);
}

uint32_t GBakedLightingInfo_t::GetLightmapGameVersionNumber() const {
    return GetSchemaValue<uint32_t>(m_ptr, "BakedLightingInfo_t", "m_nLightmapGameVersionNumber");
}

void GBakedLightingInfo_t::SetLightmapGameVersionNumber(uint32_t value) {
    SetSchemaValue(m_ptr, "BakedLightingInfo_t", "m_nLightmapGameVersionNumber", true, value);
}

Vector2D GBakedLightingInfo_t::GetLightmapUvScale() const {
    return GetSchemaValue<Vector2D>(m_ptr, "BakedLightingInfo_t", "m_vLightmapUvScale");
}

void GBakedLightingInfo_t::SetLightmapUvScale(Vector2D value) {
    SetSchemaValue(m_ptr, "BakedLightingInfo_t", "m_vLightmapUvScale", true, value);
}

bool GBakedLightingInfo_t::GetHasLightmaps() const {
    return GetSchemaValue<bool>(m_ptr, "BakedLightingInfo_t", "m_bHasLightmaps");
}

void GBakedLightingInfo_t::SetHasLightmaps(bool value) {
    SetSchemaValue(m_ptr, "BakedLightingInfo_t", "m_bHasLightmaps", true, value);
}

bool GBakedLightingInfo_t::GetBakedShadowsGamma20() const {
    return GetSchemaValue<bool>(m_ptr, "BakedLightingInfo_t", "m_bBakedShadowsGamma20");
}

void GBakedLightingInfo_t::SetBakedShadowsGamma20(bool value) {
    SetSchemaValue(m_ptr, "BakedLightingInfo_t", "m_bBakedShadowsGamma20", true, value);
}

bool GBakedLightingInfo_t::GetCompressionEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "BakedLightingInfo_t", "m_bCompressionEnabled");
}

void GBakedLightingInfo_t::SetCompressionEnabled(bool value) {
    SetSchemaValue(m_ptr, "BakedLightingInfo_t", "m_bCompressionEnabled", true, value);
}

uint8_t GBakedLightingInfo_t::GetChartPackIterations() const {
    return GetSchemaValue<uint8_t>(m_ptr, "BakedLightingInfo_t", "m_nChartPackIterations");
}

void GBakedLightingInfo_t::SetChartPackIterations(uint8_t value) {
    SetSchemaValue(m_ptr, "BakedLightingInfo_t", "m_nChartPackIterations", true, value);
}

uint8_t GBakedLightingInfo_t::GetVradQuality() const {
    return GetSchemaValue<uint8_t>(m_ptr, "BakedLightingInfo_t", "m_nVradQuality");
}

void GBakedLightingInfo_t::SetVradQuality(uint8_t value) {
    SetSchemaValue(m_ptr, "BakedLightingInfo_t", "m_nVradQuality", true, value);
}

std::string GBakedLightingInfo_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GBakedLightingInfo_t::IsValid() {
    return (m_ptr != nullptr);
}

GCExampleSchemaVData_PolymorphicBase::GCExampleSchemaVData_PolymorphicBase(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCExampleSchemaVData_PolymorphicBase::GCExampleSchemaVData_PolymorphicBase(void *ptr) {
    m_ptr = ptr;
}

int32_t GCExampleSchemaVData_PolymorphicBase::GetBase() const {
    return GetSchemaValue<int32_t>(m_ptr, "CExampleSchemaVData_PolymorphicBase", "m_nBase");
}

void GCExampleSchemaVData_PolymorphicBase::SetBase(int32_t value) {
    SetSchemaValue(m_ptr, "CExampleSchemaVData_PolymorphicBase", "m_nBase", false, value);
}

std::string GCExampleSchemaVData_PolymorphicBase::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCExampleSchemaVData_PolymorphicBase::IsValid() {
    return (m_ptr != nullptr);
}

GFourVectors2D::GFourVectors2D(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFourVectors2D::GFourVectors2D(void *ptr) {
    m_ptr = ptr;
}

float GFourVectors2D::GetX() const {
    return GetSchemaValue<float>(m_ptr, "FourVectors2D", "x");
}

void GFourVectors2D::SetX(float value) {
    SetSchemaValue(m_ptr, "FourVectors2D", "x", false, value);
}

float GFourVectors2D::GetY() const {
    return GetSchemaValue<float>(m_ptr, "FourVectors2D", "y");
}

void GFourVectors2D::SetY(float value) {
    SetSchemaValue(m_ptr, "FourVectors2D", "y", false, value);
}

std::string GFourVectors2D::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFourVectors2D::IsValid() {
    return (m_ptr != nullptr);
}

GCOrientConstraint::GCOrientConstraint(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCOrientConstraint::GCOrientConstraint(void *ptr) {
    m_ptr = ptr;
}

std::string GCOrientConstraint::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCOrientConstraint::IsValid() {
    return (m_ptr != nullptr);
}

GSequenceWeightedList_t::GSequenceWeightedList_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GSequenceWeightedList_t::GSequenceWeightedList_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GSequenceWeightedList_t::GetSequence() const {
    return GetSchemaValue<int32_t>(m_ptr, "SequenceWeightedList_t", "m_nSequence");
}

void GSequenceWeightedList_t::SetSequence(int32_t value) {
    SetSchemaValue(m_ptr, "SequenceWeightedList_t", "m_nSequence", true, value);
}

float GSequenceWeightedList_t::GetRelativeWeight() const {
    return GetSchemaValue<float>(m_ptr, "SequenceWeightedList_t", "m_flRelativeWeight");
}

void GSequenceWeightedList_t::SetRelativeWeight(float value) {
    SetSchemaValue(m_ptr, "SequenceWeightedList_t", "m_flRelativeWeight", true, value);
}

std::string GSequenceWeightedList_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GSequenceWeightedList_t::IsValid() {
    return (m_ptr != nullptr);
}

GCSosGroupActionMemberCountEnvelopeSchema::GCSosGroupActionMemberCountEnvelopeSchema(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSosGroupActionMemberCountEnvelopeSchema::GCSosGroupActionMemberCountEnvelopeSchema(void *ptr) {
    m_ptr = ptr;
}

int32_t GCSosGroupActionMemberCountEnvelopeSchema::GetBaseCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSosGroupActionMemberCountEnvelopeSchema", "m_nBaseCount");
}

void GCSosGroupActionMemberCountEnvelopeSchema::SetBaseCount(int32_t value) {
    SetSchemaValue(m_ptr, "CSosGroupActionMemberCountEnvelopeSchema", "m_nBaseCount", false, value);
}

int32_t GCSosGroupActionMemberCountEnvelopeSchema::GetTargetCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSosGroupActionMemberCountEnvelopeSchema", "m_nTargetCount");
}

void GCSosGroupActionMemberCountEnvelopeSchema::SetTargetCount(int32_t value) {
    SetSchemaValue(m_ptr, "CSosGroupActionMemberCountEnvelopeSchema", "m_nTargetCount", false, value);
}

float GCSosGroupActionMemberCountEnvelopeSchema::GetBaseValue() const {
    return GetSchemaValue<float>(m_ptr, "CSosGroupActionMemberCountEnvelopeSchema", "m_flBaseValue");
}

void GCSosGroupActionMemberCountEnvelopeSchema::SetBaseValue(float value) {
    SetSchemaValue(m_ptr, "CSosGroupActionMemberCountEnvelopeSchema", "m_flBaseValue", false, value);
}

float GCSosGroupActionMemberCountEnvelopeSchema::GetTargetValue() const {
    return GetSchemaValue<float>(m_ptr, "CSosGroupActionMemberCountEnvelopeSchema", "m_flTargetValue");
}

void GCSosGroupActionMemberCountEnvelopeSchema::SetTargetValue(float value) {
    SetSchemaValue(m_ptr, "CSosGroupActionMemberCountEnvelopeSchema", "m_flTargetValue", false, value);
}

float GCSosGroupActionMemberCountEnvelopeSchema::GetAttack() const {
    return GetSchemaValue<float>(m_ptr, "CSosGroupActionMemberCountEnvelopeSchema", "m_flAttack");
}

void GCSosGroupActionMemberCountEnvelopeSchema::SetAttack(float value) {
    SetSchemaValue(m_ptr, "CSosGroupActionMemberCountEnvelopeSchema", "m_flAttack", false, value);
}

float GCSosGroupActionMemberCountEnvelopeSchema::GetDecay() const {
    return GetSchemaValue<float>(m_ptr, "CSosGroupActionMemberCountEnvelopeSchema", "m_flDecay");
}

void GCSosGroupActionMemberCountEnvelopeSchema::SetDecay(float value) {
    SetSchemaValue(m_ptr, "CSosGroupActionMemberCountEnvelopeSchema", "m_flDecay", false, value);
}

CUtlString GCSosGroupActionMemberCountEnvelopeSchema::GetResultVarName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CSosGroupActionMemberCountEnvelopeSchema", "m_resultVarName");
}

void GCSosGroupActionMemberCountEnvelopeSchema::SetResultVarName(CUtlString value) {
    SetSchemaValue(m_ptr, "CSosGroupActionMemberCountEnvelopeSchema", "m_resultVarName", false, value);
}

bool GCSosGroupActionMemberCountEnvelopeSchema::GetSaveToGroup() const {
    return GetSchemaValue<bool>(m_ptr, "CSosGroupActionMemberCountEnvelopeSchema", "m_bSaveToGroup");
}

void GCSosGroupActionMemberCountEnvelopeSchema::SetSaveToGroup(bool value) {
    SetSchemaValue(m_ptr, "CSosGroupActionMemberCountEnvelopeSchema", "m_bSaveToGroup", false, value);
}

std::string GCSosGroupActionMemberCountEnvelopeSchema::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSosGroupActionMemberCountEnvelopeSchema::IsValid() {
    return (m_ptr != nullptr);
}

GFeRodConstraint_t::GFeRodConstraint_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeRodConstraint_t::GFeRodConstraint_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<uint16_t> GFeRodConstraint_t::GetNode() const {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeRodConstraint_t", "nNode"); std::vector<uint16_t> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}

void GFeRodConstraint_t::SetNode(std::vector<uint16_t> value) {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeRodConstraint_t", "nNode"); for(int i = 0; i < 2; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "FeRodConstraint_t", "nNode", true, outValue);
}

float GFeRodConstraint_t::GetMaxDist() const {
    return GetSchemaValue<float>(m_ptr, "FeRodConstraint_t", "flMaxDist");
}

void GFeRodConstraint_t::SetMaxDist(float value) {
    SetSchemaValue(m_ptr, "FeRodConstraint_t", "flMaxDist", true, value);
}

float GFeRodConstraint_t::GetMinDist() const {
    return GetSchemaValue<float>(m_ptr, "FeRodConstraint_t", "flMinDist");
}

void GFeRodConstraint_t::SetMinDist(float value) {
    SetSchemaValue(m_ptr, "FeRodConstraint_t", "flMinDist", true, value);
}

float GFeRodConstraint_t::GetWeight0() const {
    return GetSchemaValue<float>(m_ptr, "FeRodConstraint_t", "flWeight0");
}

void GFeRodConstraint_t::SetWeight0(float value) {
    SetSchemaValue(m_ptr, "FeRodConstraint_t", "flWeight0", true, value);
}

float GFeRodConstraint_t::GetRelaxationFactor() const {
    return GetSchemaValue<float>(m_ptr, "FeRodConstraint_t", "flRelaxationFactor");
}

void GFeRodConstraint_t::SetRelaxationFactor(float value) {
    SetSchemaValue(m_ptr, "FeRodConstraint_t", "flRelaxationFactor", true, value);
}

std::string GFeRodConstraint_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeRodConstraint_t::IsValid() {
    return (m_ptr != nullptr);
}

GFollowTargetOpFixedSettings_t::GFollowTargetOpFixedSettings_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFollowTargetOpFixedSettings_t::GFollowTargetOpFixedSettings_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GFollowTargetOpFixedSettings_t::GetBoneIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "FollowTargetOpFixedSettings_t", "m_boneIndex");
}

void GFollowTargetOpFixedSettings_t::SetBoneIndex(int32_t value) {
    SetSchemaValue(m_ptr, "FollowTargetOpFixedSettings_t", "m_boneIndex", true, value);
}

bool GFollowTargetOpFixedSettings_t::GetBoneTarget() const {
    return GetSchemaValue<bool>(m_ptr, "FollowTargetOpFixedSettings_t", "m_bBoneTarget");
}

void GFollowTargetOpFixedSettings_t::SetBoneTarget(bool value) {
    SetSchemaValue(m_ptr, "FollowTargetOpFixedSettings_t", "m_bBoneTarget", true, value);
}

int32_t GFollowTargetOpFixedSettings_t::GetBoneTargetIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "FollowTargetOpFixedSettings_t", "m_boneTargetIndex");
}

void GFollowTargetOpFixedSettings_t::SetBoneTargetIndex(int32_t value) {
    SetSchemaValue(m_ptr, "FollowTargetOpFixedSettings_t", "m_boneTargetIndex", true, value);
}

bool GFollowTargetOpFixedSettings_t::GetWorldCoodinateTarget() const {
    return GetSchemaValue<bool>(m_ptr, "FollowTargetOpFixedSettings_t", "m_bWorldCoodinateTarget");
}

void GFollowTargetOpFixedSettings_t::SetWorldCoodinateTarget(bool value) {
    SetSchemaValue(m_ptr, "FollowTargetOpFixedSettings_t", "m_bWorldCoodinateTarget", true, value);
}

bool GFollowTargetOpFixedSettings_t::GetMatchTargetOrientation() const {
    return GetSchemaValue<bool>(m_ptr, "FollowTargetOpFixedSettings_t", "m_bMatchTargetOrientation");
}

void GFollowTargetOpFixedSettings_t::SetMatchTargetOrientation(bool value) {
    SetSchemaValue(m_ptr, "FollowTargetOpFixedSettings_t", "m_bMatchTargetOrientation", true, value);
}

std::string GFollowTargetOpFixedSettings_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFollowTargetOpFixedSettings_t::IsValid() {
    return (m_ptr != nullptr);
}

GCRenderSkeleton::GCRenderSkeleton(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCRenderSkeleton::GCRenderSkeleton(void *ptr) {
    m_ptr = ptr;
}

std::vector<GRenderSkeletonBone_t> GCRenderSkeleton::GetBones() const {
    CUtlVector<GRenderSkeletonBone_t>* vec = GetSchemaValue<CUtlVector<GRenderSkeletonBone_t>*>(m_ptr, "CRenderSkeleton", "m_bones"); std::vector<GRenderSkeletonBone_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCRenderSkeleton::SetBones(std::vector<GRenderSkeletonBone_t> value) {
    SetSchemaValueCUtlVector<GRenderSkeletonBone_t>(m_ptr, "CRenderSkeleton", "m_bones", false, value);
}

std::vector<int32> GCRenderSkeleton::GetBoneParents() const {
    CUtlVector<int32>* vec = GetSchemaValue<CUtlVector<int32>*>(m_ptr, "CRenderSkeleton", "m_boneParents"); std::vector<int32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCRenderSkeleton::SetBoneParents(std::vector<int32> value) {
    SetSchemaValueCUtlVector<int32>(m_ptr, "CRenderSkeleton", "m_boneParents", false, value);
}

int32_t GCRenderSkeleton::GetBoneWeightCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CRenderSkeleton", "m_nBoneWeightCount");
}

void GCRenderSkeleton::SetBoneWeightCount(int32_t value) {
    SetSchemaValue(m_ptr, "CRenderSkeleton", "m_nBoneWeightCount", false, value);
}

std::string GCRenderSkeleton::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCRenderSkeleton::IsValid() {
    return (m_ptr != nullptr);
}

GVMixConvolutionDesc_t::GVMixConvolutionDesc_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVMixConvolutionDesc_t::GVMixConvolutionDesc_t(void *ptr) {
    m_ptr = ptr;
}

float GVMixConvolutionDesc_t::GetFldbGain() const {
    return GetSchemaValue<float>(m_ptr, "VMixConvolutionDesc_t", "m_fldbGain");
}

void GVMixConvolutionDesc_t::SetFldbGain(float value) {
    SetSchemaValue(m_ptr, "VMixConvolutionDesc_t", "m_fldbGain", true, value);
}

float GVMixConvolutionDesc_t::GetPreDelayMS() const {
    return GetSchemaValue<float>(m_ptr, "VMixConvolutionDesc_t", "m_flPreDelayMS");
}

void GVMixConvolutionDesc_t::SetPreDelayMS(float value) {
    SetSchemaValue(m_ptr, "VMixConvolutionDesc_t", "m_flPreDelayMS", true, value);
}

float GVMixConvolutionDesc_t::GetWetMix() const {
    return GetSchemaValue<float>(m_ptr, "VMixConvolutionDesc_t", "m_flWetMix");
}

void GVMixConvolutionDesc_t::SetWetMix(float value) {
    SetSchemaValue(m_ptr, "VMixConvolutionDesc_t", "m_flWetMix", true, value);
}

float GVMixConvolutionDesc_t::GetFldbLow() const {
    return GetSchemaValue<float>(m_ptr, "VMixConvolutionDesc_t", "m_fldbLow");
}

void GVMixConvolutionDesc_t::SetFldbLow(float value) {
    SetSchemaValue(m_ptr, "VMixConvolutionDesc_t", "m_fldbLow", true, value);
}

float GVMixConvolutionDesc_t::GetFldbMid() const {
    return GetSchemaValue<float>(m_ptr, "VMixConvolutionDesc_t", "m_fldbMid");
}

void GVMixConvolutionDesc_t::SetFldbMid(float value) {
    SetSchemaValue(m_ptr, "VMixConvolutionDesc_t", "m_fldbMid", true, value);
}

float GVMixConvolutionDesc_t::GetFldbHigh() const {
    return GetSchemaValue<float>(m_ptr, "VMixConvolutionDesc_t", "m_fldbHigh");
}

void GVMixConvolutionDesc_t::SetFldbHigh(float value) {
    SetSchemaValue(m_ptr, "VMixConvolutionDesc_t", "m_fldbHigh", true, value);
}

float GVMixConvolutionDesc_t::GetLowCutoffFreq() const {
    return GetSchemaValue<float>(m_ptr, "VMixConvolutionDesc_t", "m_flLowCutoffFreq");
}

void GVMixConvolutionDesc_t::SetLowCutoffFreq(float value) {
    SetSchemaValue(m_ptr, "VMixConvolutionDesc_t", "m_flLowCutoffFreq", true, value);
}

float GVMixConvolutionDesc_t::GetHighCutoffFreq() const {
    return GetSchemaValue<float>(m_ptr, "VMixConvolutionDesc_t", "m_flHighCutoffFreq");
}

void GVMixConvolutionDesc_t::SetHighCutoffFreq(float value) {
    SetSchemaValue(m_ptr, "VMixConvolutionDesc_t", "m_flHighCutoffFreq", true, value);
}

std::string GVMixConvolutionDesc_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVMixConvolutionDesc_t::IsValid() {
    return (m_ptr != nullptr);
}

GCSosGroupBranchPattern::GCSosGroupBranchPattern(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSosGroupBranchPattern::GCSosGroupBranchPattern(void *ptr) {
    m_ptr = ptr;
}

bool GCSosGroupBranchPattern::GetMatchEventName() const {
    return GetSchemaValue<bool>(m_ptr, "CSosGroupBranchPattern", "m_bMatchEventName");
}

void GCSosGroupBranchPattern::SetMatchEventName(bool value) {
    SetSchemaValue(m_ptr, "CSosGroupBranchPattern", "m_bMatchEventName", false, value);
}

bool GCSosGroupBranchPattern::GetMatchEventSubString() const {
    return GetSchemaValue<bool>(m_ptr, "CSosGroupBranchPattern", "m_bMatchEventSubString");
}

void GCSosGroupBranchPattern::SetMatchEventSubString(bool value) {
    SetSchemaValue(m_ptr, "CSosGroupBranchPattern", "m_bMatchEventSubString", false, value);
}

bool GCSosGroupBranchPattern::GetMatchEntIndex() const {
    return GetSchemaValue<bool>(m_ptr, "CSosGroupBranchPattern", "m_bMatchEntIndex");
}

void GCSosGroupBranchPattern::SetMatchEntIndex(bool value) {
    SetSchemaValue(m_ptr, "CSosGroupBranchPattern", "m_bMatchEntIndex", false, value);
}

bool GCSosGroupBranchPattern::GetMatchOpvar() const {
    return GetSchemaValue<bool>(m_ptr, "CSosGroupBranchPattern", "m_bMatchOpvar");
}

void GCSosGroupBranchPattern::SetMatchOpvar(bool value) {
    SetSchemaValue(m_ptr, "CSosGroupBranchPattern", "m_bMatchOpvar", false, value);
}

bool GCSosGroupBranchPattern::GetMatchString() const {
    return GetSchemaValue<bool>(m_ptr, "CSosGroupBranchPattern", "m_bMatchString");
}

void GCSosGroupBranchPattern::SetMatchString(bool value) {
    SetSchemaValue(m_ptr, "CSosGroupBranchPattern", "m_bMatchString", false, value);
}

std::string GCSosGroupBranchPattern::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSosGroupBranchPattern::IsValid() {
    return (m_ptr != nullptr);
}

GCNmGraphDefinition__ExternalGraphSlot_t::GCNmGraphDefinition__ExternalGraphSlot_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmGraphDefinition__ExternalGraphSlot_t::GCNmGraphDefinition__ExternalGraphSlot_t(void *ptr) {
    m_ptr = ptr;
}

int16_t GCNmGraphDefinition__ExternalGraphSlot_t::GetNodeIdx() const {
    return GetSchemaValue<int16_t>(m_ptr, "CNmGraphDefinition__ExternalGraphSlot_t", "m_nNodeIdx");
}

void GCNmGraphDefinition__ExternalGraphSlot_t::SetNodeIdx(int16_t value) {
    SetSchemaValue(m_ptr, "CNmGraphDefinition__ExternalGraphSlot_t", "m_nNodeIdx", true, value);
}

std::string GCNmGraphDefinition__ExternalGraphSlot_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmGraphDefinition__ExternalGraphSlot_t::IsValid() {
    return (m_ptr != nullptr);
}

GCNmStateMachineNode__StateDefinition_t::GCNmStateMachineNode__StateDefinition_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmStateMachineNode__StateDefinition_t::GCNmStateMachineNode__StateDefinition_t(void *ptr) {
    m_ptr = ptr;
}

int16_t GCNmStateMachineNode__StateDefinition_t::GetStateNodeIdx() const {
    return GetSchemaValue<int16_t>(m_ptr, "CNmStateMachineNode__StateDefinition_t", "m_nStateNodeIdx");
}

void GCNmStateMachineNode__StateDefinition_t::SetStateNodeIdx(int16_t value) {
    SetSchemaValue(m_ptr, "CNmStateMachineNode__StateDefinition_t", "m_nStateNodeIdx", true, value);
}

int16_t GCNmStateMachineNode__StateDefinition_t::GetEntryConditionNodeIdx() const {
    return GetSchemaValue<int16_t>(m_ptr, "CNmStateMachineNode__StateDefinition_t", "m_entryConditionNodeIdx");
}

void GCNmStateMachineNode__StateDefinition_t::SetEntryConditionNodeIdx(int16_t value) {
    SetSchemaValue(m_ptr, "CNmStateMachineNode__StateDefinition_t", "m_entryConditionNodeIdx", true, value);
}

std::string GCNmStateMachineNode__StateDefinition_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmStateMachineNode__StateDefinition_t::IsValid() {
    return (m_ptr != nullptr);
}

GCModelConfigElement_SetBodygroupOnAttachedModels::GCModelConfigElement_SetBodygroupOnAttachedModels(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCModelConfigElement_SetBodygroupOnAttachedModels::GCModelConfigElement_SetBodygroupOnAttachedModels(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCModelConfigElement_SetBodygroupOnAttachedModels::GetGroupName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CModelConfigElement_SetBodygroupOnAttachedModels", "m_GroupName");
}

void GCModelConfigElement_SetBodygroupOnAttachedModels::SetGroupName(CUtlString value) {
    SetSchemaValue(m_ptr, "CModelConfigElement_SetBodygroupOnAttachedModels", "m_GroupName", false, value);
}

int32_t GCModelConfigElement_SetBodygroupOnAttachedModels::GetChoice() const {
    return GetSchemaValue<int32_t>(m_ptr, "CModelConfigElement_SetBodygroupOnAttachedModels", "m_nChoice");
}

void GCModelConfigElement_SetBodygroupOnAttachedModels::SetChoice(int32_t value) {
    SetSchemaValue(m_ptr, "CModelConfigElement_SetBodygroupOnAttachedModels", "m_nChoice", false, value);
}

std::string GCModelConfigElement_SetBodygroupOnAttachedModels::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCModelConfigElement_SetBodygroupOnAttachedModels::IsValid() {
    return (m_ptr != nullptr);
}

GCNmFootEvent::GCNmFootEvent(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmFootEvent::GCNmFootEvent(void *ptr) {
    m_ptr = ptr;
}

NmFootPhase_t GCNmFootEvent::GetPhase() const {
    return GetSchemaValue<NmFootPhase_t>(m_ptr, "CNmFootEvent", "m_phase");
}

void GCNmFootEvent::SetPhase(NmFootPhase_t value) {
    SetSchemaValue(m_ptr, "CNmFootEvent", "m_phase", false, value);
}

std::string GCNmFootEvent::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmFootEvent::IsValid() {
    return (m_ptr != nullptr);
}

GCHandshakeAnimTagBase::GCHandshakeAnimTagBase(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCHandshakeAnimTagBase::GCHandshakeAnimTagBase(void *ptr) {
    m_ptr = ptr;
}

bool GCHandshakeAnimTagBase::GetIsDisableTag() const {
    return GetSchemaValue<bool>(m_ptr, "CHandshakeAnimTagBase", "m_bIsDisableTag");
}

void GCHandshakeAnimTagBase::SetIsDisableTag(bool value) {
    SetSchemaValue(m_ptr, "CHandshakeAnimTagBase", "m_bIsDisableTag", false, value);
}

std::string GCHandshakeAnimTagBase::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCHandshakeAnimTagBase::IsValid() {
    return (m_ptr != nullptr);
}

GCBlend2DUpdateNode::GCBlend2DUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBlend2DUpdateNode::GCBlend2DUpdateNode(void *ptr) {
    m_ptr = ptr;
}

std::vector<GBlendItem_t> GCBlend2DUpdateNode::GetItems() const {
    CUtlVector<GBlendItem_t>* vec = GetSchemaValue<CUtlVector<GBlendItem_t>*>(m_ptr, "CBlend2DUpdateNode", "m_items"); std::vector<GBlendItem_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCBlend2DUpdateNode::SetItems(std::vector<GBlendItem_t> value) {
    SetSchemaValueCUtlVector<GBlendItem_t>(m_ptr, "CBlend2DUpdateNode", "m_items", false, value);
}

std::vector<GTagSpan_t> GCBlend2DUpdateNode::GetTags() const {
    CUtlVector<GTagSpan_t>* vec = GetSchemaValue<CUtlVector<GTagSpan_t>*>(m_ptr, "CBlend2DUpdateNode", "m_tags"); std::vector<GTagSpan_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCBlend2DUpdateNode::SetTags(std::vector<GTagSpan_t> value) {
    SetSchemaValueCUtlVector<GTagSpan_t>(m_ptr, "CBlend2DUpdateNode", "m_tags", false, value);
}

GCParamSpanUpdater GCBlend2DUpdateNode::GetParamSpans() const {
    return GetSchemaValue<GCParamSpanUpdater>(m_ptr, "CBlend2DUpdateNode", "m_paramSpans");
}

void GCBlend2DUpdateNode::SetParamSpans(GCParamSpanUpdater value) {
    SetSchemaValue(m_ptr, "CBlend2DUpdateNode", "m_paramSpans", false, value);
}

std::vector<int32> GCBlend2DUpdateNode::GetNodeItemIndices() const {
    CUtlVector<int32>* vec = GetSchemaValue<CUtlVector<int32>*>(m_ptr, "CBlend2DUpdateNode", "m_nodeItemIndices"); std::vector<int32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCBlend2DUpdateNode::SetNodeItemIndices(std::vector<int32> value) {
    SetSchemaValueCUtlVector<int32>(m_ptr, "CBlend2DUpdateNode", "m_nodeItemIndices", false, value);
}

GCAnimInputDamping GCBlend2DUpdateNode::GetDamping() const {
    return GetSchemaValue<GCAnimInputDamping>(m_ptr, "CBlend2DUpdateNode", "m_damping");
}

void GCBlend2DUpdateNode::SetDamping(GCAnimInputDamping value) {
    SetSchemaValue(m_ptr, "CBlend2DUpdateNode", "m_damping", false, value);
}

AnimValueSource GCBlend2DUpdateNode::GetBlendSourceX() const {
    return GetSchemaValue<AnimValueSource>(m_ptr, "CBlend2DUpdateNode", "m_blendSourceX");
}

void GCBlend2DUpdateNode::SetBlendSourceX(AnimValueSource value) {
    SetSchemaValue(m_ptr, "CBlend2DUpdateNode", "m_blendSourceX", false, value);
}

GCAnimParamHandle GCBlend2DUpdateNode::GetParamX() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CBlend2DUpdateNode", "m_paramX");
}

void GCBlend2DUpdateNode::SetParamX(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CBlend2DUpdateNode", "m_paramX", false, value);
}

AnimValueSource GCBlend2DUpdateNode::GetBlendSourceY() const {
    return GetSchemaValue<AnimValueSource>(m_ptr, "CBlend2DUpdateNode", "m_blendSourceY");
}

void GCBlend2DUpdateNode::SetBlendSourceY(AnimValueSource value) {
    SetSchemaValue(m_ptr, "CBlend2DUpdateNode", "m_blendSourceY", false, value);
}

GCAnimParamHandle GCBlend2DUpdateNode::GetParamY() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CBlend2DUpdateNode", "m_paramY");
}

void GCBlend2DUpdateNode::SetParamY(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CBlend2DUpdateNode", "m_paramY", false, value);
}

Blend2DMode GCBlend2DUpdateNode::GetBlendMode() const {
    return GetSchemaValue<Blend2DMode>(m_ptr, "CBlend2DUpdateNode", "m_eBlendMode");
}

void GCBlend2DUpdateNode::SetBlendMode(Blend2DMode value) {
    SetSchemaValue(m_ptr, "CBlend2DUpdateNode", "m_eBlendMode", false, value);
}

float GCBlend2DUpdateNode::GetPlaybackSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CBlend2DUpdateNode", "m_playbackSpeed");
}

void GCBlend2DUpdateNode::SetPlaybackSpeed(float value) {
    SetSchemaValue(m_ptr, "CBlend2DUpdateNode", "m_playbackSpeed", false, value);
}

bool GCBlend2DUpdateNode::GetLoop() const {
    return GetSchemaValue<bool>(m_ptr, "CBlend2DUpdateNode", "m_bLoop");
}

void GCBlend2DUpdateNode::SetLoop(bool value) {
    SetSchemaValue(m_ptr, "CBlend2DUpdateNode", "m_bLoop", false, value);
}

bool GCBlend2DUpdateNode::GetLockBlendOnReset() const {
    return GetSchemaValue<bool>(m_ptr, "CBlend2DUpdateNode", "m_bLockBlendOnReset");
}

void GCBlend2DUpdateNode::SetLockBlendOnReset(bool value) {
    SetSchemaValue(m_ptr, "CBlend2DUpdateNode", "m_bLockBlendOnReset", false, value);
}

bool GCBlend2DUpdateNode::GetLockWhenWaning() const {
    return GetSchemaValue<bool>(m_ptr, "CBlend2DUpdateNode", "m_bLockWhenWaning");
}

void GCBlend2DUpdateNode::SetLockWhenWaning(bool value) {
    SetSchemaValue(m_ptr, "CBlend2DUpdateNode", "m_bLockWhenWaning", false, value);
}

bool GCBlend2DUpdateNode::GetAnimEventsAndTagsOnMostWeightedOnly() const {
    return GetSchemaValue<bool>(m_ptr, "CBlend2DUpdateNode", "m_bAnimEventsAndTagsOnMostWeightedOnly");
}

void GCBlend2DUpdateNode::SetAnimEventsAndTagsOnMostWeightedOnly(bool value) {
    SetSchemaValue(m_ptr, "CBlend2DUpdateNode", "m_bAnimEventsAndTagsOnMostWeightedOnly", false, value);
}

std::string GCBlend2DUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBlend2DUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GAnimationSnapshotBase_t::GAnimationSnapshotBase_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GAnimationSnapshotBase_t::GAnimationSnapshotBase_t(void *ptr) {
    m_ptr = ptr;
}

float GAnimationSnapshotBase_t::GetRealTime() const {
    return GetSchemaValue<float>(m_ptr, "AnimationSnapshotBase_t", "m_flRealTime");
}

void GAnimationSnapshotBase_t::SetRealTime(float value) {
    SetSchemaValue(m_ptr, "AnimationSnapshotBase_t", "m_flRealTime", true, value);
}

matrix3x4a_t GAnimationSnapshotBase_t::GetRootToWorld() const {
    return GetSchemaValue<matrix3x4a_t>(m_ptr, "AnimationSnapshotBase_t", "m_rootToWorld");
}

void GAnimationSnapshotBase_t::SetRootToWorld(matrix3x4a_t value) {
    SetSchemaValue(m_ptr, "AnimationSnapshotBase_t", "m_rootToWorld", true, value);
}

bool GAnimationSnapshotBase_t::GetBonesInWorldSpace() const {
    return GetSchemaValue<bool>(m_ptr, "AnimationSnapshotBase_t", "m_bBonesInWorldSpace");
}

void GAnimationSnapshotBase_t::SetBonesInWorldSpace(bool value) {
    SetSchemaValue(m_ptr, "AnimationSnapshotBase_t", "m_bBonesInWorldSpace", true, value);
}

std::vector<uint32> GAnimationSnapshotBase_t::GetBoneSetupMask() const {
    CUtlVector<uint32>* vec = GetSchemaValue<CUtlVector<uint32>*>(m_ptr, "AnimationSnapshotBase_t", "m_boneSetupMask"); std::vector<uint32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GAnimationSnapshotBase_t::SetBoneSetupMask(std::vector<uint32> value) {
    SetSchemaValueCUtlVector<uint32>(m_ptr, "AnimationSnapshotBase_t", "m_boneSetupMask", true, value);
}

std::vector<matrix3x4a_t> GAnimationSnapshotBase_t::GetBoneTransforms() const {
    CUtlVector<matrix3x4a_t>* vec = GetSchemaValue<CUtlVector<matrix3x4a_t>*>(m_ptr, "AnimationSnapshotBase_t", "m_boneTransforms"); std::vector<matrix3x4a_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GAnimationSnapshotBase_t::SetBoneTransforms(std::vector<matrix3x4a_t> value) {
    SetSchemaValueCUtlVector<matrix3x4a_t>(m_ptr, "AnimationSnapshotBase_t", "m_boneTransforms", true, value);
}

std::vector<float32> GAnimationSnapshotBase_t::GetFlexControllers() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "AnimationSnapshotBase_t", "m_flexControllers"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GAnimationSnapshotBase_t::SetFlexControllers(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "AnimationSnapshotBase_t", "m_flexControllers", true, value);
}

AnimationSnapshotType_t GAnimationSnapshotBase_t::GetSnapshotType() const {
    return GetSchemaValue<AnimationSnapshotType_t>(m_ptr, "AnimationSnapshotBase_t", "m_SnapshotType");
}

void GAnimationSnapshotBase_t::SetSnapshotType(AnimationSnapshotType_t value) {
    SetSchemaValue(m_ptr, "AnimationSnapshotBase_t", "m_SnapshotType", true, value);
}

bool GAnimationSnapshotBase_t::GetHasDecodeDump() const {
    return GetSchemaValue<bool>(m_ptr, "AnimationSnapshotBase_t", "m_bHasDecodeDump");
}

void GAnimationSnapshotBase_t::SetHasDecodeDump(bool value) {
    SetSchemaValue(m_ptr, "AnimationSnapshotBase_t", "m_bHasDecodeDump", true, value);
}

GAnimationDecodeDebugDumpElement_t GAnimationSnapshotBase_t::GetDecodeDump() const {
    return GetSchemaValue<GAnimationDecodeDebugDumpElement_t>(m_ptr, "AnimationSnapshotBase_t", "m_DecodeDump");
}

void GAnimationSnapshotBase_t::SetDecodeDump(GAnimationDecodeDebugDumpElement_t value) {
    SetSchemaValue(m_ptr, "AnimationSnapshotBase_t", "m_DecodeDump", true, value);
}

std::string GAnimationSnapshotBase_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GAnimationSnapshotBase_t::IsValid() {
    return (m_ptr != nullptr);
}

GCTiltTwistConstraint::GCTiltTwistConstraint(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTiltTwistConstraint::GCTiltTwistConstraint(void *ptr) {
    m_ptr = ptr;
}

int32_t GCTiltTwistConstraint::GetTargetAxis() const {
    return GetSchemaValue<int32_t>(m_ptr, "CTiltTwistConstraint", "m_nTargetAxis");
}

void GCTiltTwistConstraint::SetTargetAxis(int32_t value) {
    SetSchemaValue(m_ptr, "CTiltTwistConstraint", "m_nTargetAxis", false, value);
}

int32_t GCTiltTwistConstraint::GetSlaveAxis() const {
    return GetSchemaValue<int32_t>(m_ptr, "CTiltTwistConstraint", "m_nSlaveAxis");
}

void GCTiltTwistConstraint::SetSlaveAxis(int32_t value) {
    SetSchemaValue(m_ptr, "CTiltTwistConstraint", "m_nSlaveAxis", false, value);
}

std::string GCTiltTwistConstraint::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTiltTwistConstraint::IsValid() {
    return (m_ptr != nullptr);
}

GMaterialParamTexture_t::GMaterialParamTexture_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GMaterialParamTexture_t::GMaterialParamTexture_t(void *ptr) {
    m_ptr = ptr;
}

std::string GMaterialParamTexture_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GMaterialParamTexture_t::IsValid() {
    return (m_ptr != nullptr);
}

GCGlobalLightBase::GCGlobalLightBase(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCGlobalLightBase::GCGlobalLightBase(void *ptr) {
    m_ptr = ptr;
}

bool GCGlobalLightBase::GetSpotLight() const {
    return GetSchemaValue<bool>(m_ptr, "CGlobalLightBase", "m_bSpotLight");
}

void GCGlobalLightBase::SetSpotLight(bool value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_bSpotLight", false, value);
}

Vector GCGlobalLightBase::GetSpotLightOrigin() const {
    return GetSchemaValue<Vector>(m_ptr, "CGlobalLightBase", "m_SpotLightOrigin");
}

void GCGlobalLightBase::SetSpotLightOrigin(Vector value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_SpotLightOrigin", false, value);
}

QAngle GCGlobalLightBase::GetSpotLightAngles() const {
    return GetSchemaValue<QAngle>(m_ptr, "CGlobalLightBase", "m_SpotLightAngles");
}

void GCGlobalLightBase::SetSpotLightAngles(QAngle value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_SpotLightAngles", false, value);
}

Vector GCGlobalLightBase::GetShadowDirection() const {
    return GetSchemaValue<Vector>(m_ptr, "CGlobalLightBase", "m_ShadowDirection");
}

void GCGlobalLightBase::SetShadowDirection(Vector value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_ShadowDirection", false, value);
}

Vector GCGlobalLightBase::GetAmbientDirection() const {
    return GetSchemaValue<Vector>(m_ptr, "CGlobalLightBase", "m_AmbientDirection");
}

void GCGlobalLightBase::SetAmbientDirection(Vector value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_AmbientDirection", false, value);
}

Vector GCGlobalLightBase::GetSpecularDirection() const {
    return GetSchemaValue<Vector>(m_ptr, "CGlobalLightBase", "m_SpecularDirection");
}

void GCGlobalLightBase::SetSpecularDirection(Vector value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_SpecularDirection", false, value);
}

Vector GCGlobalLightBase::GetInspectorSpecularDirection() const {
    return GetSchemaValue<Vector>(m_ptr, "CGlobalLightBase", "m_InspectorSpecularDirection");
}

void GCGlobalLightBase::SetInspectorSpecularDirection(Vector value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_InspectorSpecularDirection", false, value);
}

float GCGlobalLightBase::GetSpecularPower() const {
    return GetSchemaValue<float>(m_ptr, "CGlobalLightBase", "m_flSpecularPower");
}

void GCGlobalLightBase::SetSpecularPower(float value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_flSpecularPower", false, value);
}

float GCGlobalLightBase::GetSpecularIndependence() const {
    return GetSchemaValue<float>(m_ptr, "CGlobalLightBase", "m_flSpecularIndependence");
}

void GCGlobalLightBase::SetSpecularIndependence(float value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_flSpecularIndependence", false, value);
}

Color GCGlobalLightBase::GetSpecularColor() const {
    return GetSchemaValue<Color>(m_ptr, "CGlobalLightBase", "m_SpecularColor");
}

void GCGlobalLightBase::SetSpecularColor(Color value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_SpecularColor", false, value);
}

bool GCGlobalLightBase::GetStartDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CGlobalLightBase", "m_bStartDisabled");
}

void GCGlobalLightBase::SetStartDisabled(bool value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_bStartDisabled", false, value);
}

bool GCGlobalLightBase::GetEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CGlobalLightBase", "m_bEnabled");
}

void GCGlobalLightBase::SetEnabled(bool value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_bEnabled", false, value);
}

Color GCGlobalLightBase::GetLightColor() const {
    return GetSchemaValue<Color>(m_ptr, "CGlobalLightBase", "m_LightColor");
}

void GCGlobalLightBase::SetLightColor(Color value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_LightColor", false, value);
}

Color GCGlobalLightBase::GetAmbientColor1() const {
    return GetSchemaValue<Color>(m_ptr, "CGlobalLightBase", "m_AmbientColor1");
}

void GCGlobalLightBase::SetAmbientColor1(Color value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_AmbientColor1", false, value);
}

Color GCGlobalLightBase::GetAmbientColor2() const {
    return GetSchemaValue<Color>(m_ptr, "CGlobalLightBase", "m_AmbientColor2");
}

void GCGlobalLightBase::SetAmbientColor2(Color value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_AmbientColor2", false, value);
}

Color GCGlobalLightBase::GetAmbientColor3() const {
    return GetSchemaValue<Color>(m_ptr, "CGlobalLightBase", "m_AmbientColor3");
}

void GCGlobalLightBase::SetAmbientColor3(Color value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_AmbientColor3", false, value);
}

float GCGlobalLightBase::GetSunDistance() const {
    return GetSchemaValue<float>(m_ptr, "CGlobalLightBase", "m_flSunDistance");
}

void GCGlobalLightBase::SetSunDistance(float value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_flSunDistance", false, value);
}

float GCGlobalLightBase::GetFOV() const {
    return GetSchemaValue<float>(m_ptr, "CGlobalLightBase", "m_flFOV");
}

void GCGlobalLightBase::SetFOV(float value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_flFOV", false, value);
}

float GCGlobalLightBase::GetNearZ() const {
    return GetSchemaValue<float>(m_ptr, "CGlobalLightBase", "m_flNearZ");
}

void GCGlobalLightBase::SetNearZ(float value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_flNearZ", false, value);
}

float GCGlobalLightBase::GetFarZ() const {
    return GetSchemaValue<float>(m_ptr, "CGlobalLightBase", "m_flFarZ");
}

void GCGlobalLightBase::SetFarZ(float value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_flFarZ", false, value);
}

bool GCGlobalLightBase::GetEnableShadows() const {
    return GetSchemaValue<bool>(m_ptr, "CGlobalLightBase", "m_bEnableShadows");
}

void GCGlobalLightBase::SetEnableShadows(bool value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_bEnableShadows", false, value);
}

bool GCGlobalLightBase::GetOldEnableShadows() const {
    return GetSchemaValue<bool>(m_ptr, "CGlobalLightBase", "m_bOldEnableShadows");
}

void GCGlobalLightBase::SetOldEnableShadows(bool value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_bOldEnableShadows", false, value);
}

bool GCGlobalLightBase::GetBackgroundClearNotRequired() const {
    return GetSchemaValue<bool>(m_ptr, "CGlobalLightBase", "m_bBackgroundClearNotRequired");
}

void GCGlobalLightBase::SetBackgroundClearNotRequired(bool value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_bBackgroundClearNotRequired", false, value);
}

float GCGlobalLightBase::GetCloudScale() const {
    return GetSchemaValue<float>(m_ptr, "CGlobalLightBase", "m_flCloudScale");
}

void GCGlobalLightBase::SetCloudScale(float value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_flCloudScale", false, value);
}

float GCGlobalLightBase::GetCloud1Speed() const {
    return GetSchemaValue<float>(m_ptr, "CGlobalLightBase", "m_flCloud1Speed");
}

void GCGlobalLightBase::SetCloud1Speed(float value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_flCloud1Speed", false, value);
}

float GCGlobalLightBase::GetCloud1Direction() const {
    return GetSchemaValue<float>(m_ptr, "CGlobalLightBase", "m_flCloud1Direction");
}

void GCGlobalLightBase::SetCloud1Direction(float value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_flCloud1Direction", false, value);
}

float GCGlobalLightBase::GetCloud2Speed() const {
    return GetSchemaValue<float>(m_ptr, "CGlobalLightBase", "m_flCloud2Speed");
}

void GCGlobalLightBase::SetCloud2Speed(float value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_flCloud2Speed", false, value);
}

float GCGlobalLightBase::GetCloud2Direction() const {
    return GetSchemaValue<float>(m_ptr, "CGlobalLightBase", "m_flCloud2Direction");
}

void GCGlobalLightBase::SetCloud2Direction(float value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_flCloud2Direction", false, value);
}

float GCGlobalLightBase::GetAmbientScale1() const {
    return GetSchemaValue<float>(m_ptr, "CGlobalLightBase", "m_flAmbientScale1");
}

void GCGlobalLightBase::SetAmbientScale1(float value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_flAmbientScale1", false, value);
}

float GCGlobalLightBase::GetAmbientScale2() const {
    return GetSchemaValue<float>(m_ptr, "CGlobalLightBase", "m_flAmbientScale2");
}

void GCGlobalLightBase::SetAmbientScale2(float value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_flAmbientScale2", false, value);
}

float GCGlobalLightBase::GetGroundScale() const {
    return GetSchemaValue<float>(m_ptr, "CGlobalLightBase", "m_flGroundScale");
}

void GCGlobalLightBase::SetGroundScale(float value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_flGroundScale", false, value);
}

float GCGlobalLightBase::GetLightScale() const {
    return GetSchemaValue<float>(m_ptr, "CGlobalLightBase", "m_flLightScale");
}

void GCGlobalLightBase::SetLightScale(float value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_flLightScale", false, value);
}

float GCGlobalLightBase::GetFoWDarkness() const {
    return GetSchemaValue<float>(m_ptr, "CGlobalLightBase", "m_flFoWDarkness");
}

void GCGlobalLightBase::SetFoWDarkness(float value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_flFoWDarkness", false, value);
}

bool GCGlobalLightBase::GetEnableSeparateSkyboxFog() const {
    return GetSchemaValue<bool>(m_ptr, "CGlobalLightBase", "m_bEnableSeparateSkyboxFog");
}

void GCGlobalLightBase::SetEnableSeparateSkyboxFog(bool value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_bEnableSeparateSkyboxFog", false, value);
}

Vector GCGlobalLightBase::GetFowColor() const {
    return GetSchemaValue<Vector>(m_ptr, "CGlobalLightBase", "m_vFowColor");
}

void GCGlobalLightBase::SetFowColor(Vector value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_vFowColor", false, value);
}

Vector GCGlobalLightBase::GetViewOrigin() const {
    return GetSchemaValue<Vector>(m_ptr, "CGlobalLightBase", "m_ViewOrigin");
}

void GCGlobalLightBase::SetViewOrigin(Vector value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_ViewOrigin", false, value);
}

QAngle GCGlobalLightBase::GetViewAngles() const {
    return GetSchemaValue<QAngle>(m_ptr, "CGlobalLightBase", "m_ViewAngles");
}

void GCGlobalLightBase::SetViewAngles(QAngle value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_ViewAngles", false, value);
}

float GCGlobalLightBase::GetViewFoV() const {
    return GetSchemaValue<float>(m_ptr, "CGlobalLightBase", "m_flViewFoV");
}

void GCGlobalLightBase::SetViewFoV(float value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_flViewFoV", false, value);
}

std::vector<Vector> GCGlobalLightBase::GetWorldPoints() const {
    Vector* outValue = GetSchemaValue<Vector*>(m_ptr, "CGlobalLightBase", "m_WorldPoints"); std::vector<Vector> ret; for(int i = 0; i < 8; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCGlobalLightBase::SetWorldPoints(std::vector<Vector> value) {
    Vector* outValue = GetSchemaValue<Vector*>(m_ptr, "CGlobalLightBase", "m_WorldPoints"); for(int i = 0; i < 8; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CGlobalLightBase", "m_WorldPoints", false, outValue);
}

Vector2D GCGlobalLightBase::GetFogOffsetLayer0() const {
    return GetSchemaValue<Vector2D>(m_ptr, "CGlobalLightBase", "m_vFogOffsetLayer0");
}

void GCGlobalLightBase::SetFogOffsetLayer0(Vector2D value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_vFogOffsetLayer0", false, value);
}

Vector2D GCGlobalLightBase::GetFogOffsetLayer1() const {
    return GetSchemaValue<Vector2D>(m_ptr, "CGlobalLightBase", "m_vFogOffsetLayer1");
}

void GCGlobalLightBase::SetFogOffsetLayer1(Vector2D value) {
    SetSchemaValue(m_ptr, "CGlobalLightBase", "m_vFogOffsetLayer1", false, value);
}

std::string GCGlobalLightBase::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCGlobalLightBase::IsValid() {
    return (m_ptr != nullptr);
}

GCModelConfigElement_SetBodygroup::GCModelConfigElement_SetBodygroup(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCModelConfigElement_SetBodygroup::GCModelConfigElement_SetBodygroup(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCModelConfigElement_SetBodygroup::GetGroupName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CModelConfigElement_SetBodygroup", "m_GroupName");
}

void GCModelConfigElement_SetBodygroup::SetGroupName(CUtlString value) {
    SetSchemaValue(m_ptr, "CModelConfigElement_SetBodygroup", "m_GroupName", false, value);
}

int32_t GCModelConfigElement_SetBodygroup::GetChoice() const {
    return GetSchemaValue<int32_t>(m_ptr, "CModelConfigElement_SetBodygroup", "m_nChoice");
}

void GCModelConfigElement_SetBodygroup::SetChoice(int32_t value) {
    SetSchemaValue(m_ptr, "CModelConfigElement_SetBodygroup", "m_nChoice", false, value);
}

std::string GCModelConfigElement_SetBodygroup::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCModelConfigElement_SetBodygroup::IsValid() {
    return (m_ptr != nullptr);
}

GCModelConfigElement_AttachedModel::GCModelConfigElement_AttachedModel(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCModelConfigElement_AttachedModel::GCModelConfigElement_AttachedModel(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCModelConfigElement_AttachedModel::GetInstanceName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CModelConfigElement_AttachedModel", "m_InstanceName");
}

void GCModelConfigElement_AttachedModel::SetInstanceName(CUtlString value) {
    SetSchemaValue(m_ptr, "CModelConfigElement_AttachedModel", "m_InstanceName", false, value);
}

CUtlString GCModelConfigElement_AttachedModel::GetEntityClass() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CModelConfigElement_AttachedModel", "m_EntityClass");
}

void GCModelConfigElement_AttachedModel::SetEntityClass(CUtlString value) {
    SetSchemaValue(m_ptr, "CModelConfigElement_AttachedModel", "m_EntityClass", false, value);
}

Vector GCModelConfigElement_AttachedModel::GetOffset() const {
    return GetSchemaValue<Vector>(m_ptr, "CModelConfigElement_AttachedModel", "m_vOffset");
}

void GCModelConfigElement_AttachedModel::SetOffset(Vector value) {
    SetSchemaValue(m_ptr, "CModelConfigElement_AttachedModel", "m_vOffset", false, value);
}

QAngle GCModelConfigElement_AttachedModel::GetAngOffset() const {
    return GetSchemaValue<QAngle>(m_ptr, "CModelConfigElement_AttachedModel", "m_aAngOffset");
}

void GCModelConfigElement_AttachedModel::SetAngOffset(QAngle value) {
    SetSchemaValue(m_ptr, "CModelConfigElement_AttachedModel", "m_aAngOffset", false, value);
}

CUtlString GCModelConfigElement_AttachedModel::GetAttachmentName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CModelConfigElement_AttachedModel", "m_AttachmentName");
}

void GCModelConfigElement_AttachedModel::SetAttachmentName(CUtlString value) {
    SetSchemaValue(m_ptr, "CModelConfigElement_AttachedModel", "m_AttachmentName", false, value);
}

CUtlString GCModelConfigElement_AttachedModel::GetLocalAttachmentOffsetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CModelConfigElement_AttachedModel", "m_LocalAttachmentOffsetName");
}

void GCModelConfigElement_AttachedModel::SetLocalAttachmentOffsetName(CUtlString value) {
    SetSchemaValue(m_ptr, "CModelConfigElement_AttachedModel", "m_LocalAttachmentOffsetName", false, value);
}

ModelConfigAttachmentType_t GCModelConfigElement_AttachedModel::GetAttachmentType() const {
    return GetSchemaValue<ModelConfigAttachmentType_t>(m_ptr, "CModelConfigElement_AttachedModel", "m_AttachmentType");
}

void GCModelConfigElement_AttachedModel::SetAttachmentType(ModelConfigAttachmentType_t value) {
    SetSchemaValue(m_ptr, "CModelConfigElement_AttachedModel", "m_AttachmentType", false, value);
}

bool GCModelConfigElement_AttachedModel::GetBoneMergeFlex() const {
    return GetSchemaValue<bool>(m_ptr, "CModelConfigElement_AttachedModel", "m_bBoneMergeFlex");
}

void GCModelConfigElement_AttachedModel::SetBoneMergeFlex(bool value) {
    SetSchemaValue(m_ptr, "CModelConfigElement_AttachedModel", "m_bBoneMergeFlex", false, value);
}

bool GCModelConfigElement_AttachedModel::GetUserSpecifiedColor() const {
    return GetSchemaValue<bool>(m_ptr, "CModelConfigElement_AttachedModel", "m_bUserSpecifiedColor");
}

void GCModelConfigElement_AttachedModel::SetUserSpecifiedColor(bool value) {
    SetSchemaValue(m_ptr, "CModelConfigElement_AttachedModel", "m_bUserSpecifiedColor", false, value);
}

bool GCModelConfigElement_AttachedModel::GetUserSpecifiedMaterialGroup() const {
    return GetSchemaValue<bool>(m_ptr, "CModelConfigElement_AttachedModel", "m_bUserSpecifiedMaterialGroup");
}

void GCModelConfigElement_AttachedModel::SetUserSpecifiedMaterialGroup(bool value) {
    SetSchemaValue(m_ptr, "CModelConfigElement_AttachedModel", "m_bUserSpecifiedMaterialGroup", false, value);
}

bool GCModelConfigElement_AttachedModel::GetAcceptParentMaterialDrivenDecals() const {
    return GetSchemaValue<bool>(m_ptr, "CModelConfigElement_AttachedModel", "m_bAcceptParentMaterialDrivenDecals");
}

void GCModelConfigElement_AttachedModel::SetAcceptParentMaterialDrivenDecals(bool value) {
    SetSchemaValue(m_ptr, "CModelConfigElement_AttachedModel", "m_bAcceptParentMaterialDrivenDecals", false, value);
}

CUtlString GCModelConfigElement_AttachedModel::GetBodygroupOnOtherModels() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CModelConfigElement_AttachedModel", "m_BodygroupOnOtherModels");
}

void GCModelConfigElement_AttachedModel::SetBodygroupOnOtherModels(CUtlString value) {
    SetSchemaValue(m_ptr, "CModelConfigElement_AttachedModel", "m_BodygroupOnOtherModels", false, value);
}

CUtlString GCModelConfigElement_AttachedModel::GetMaterialGroupOnOtherModels() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CModelConfigElement_AttachedModel", "m_MaterialGroupOnOtherModels");
}

void GCModelConfigElement_AttachedModel::SetMaterialGroupOnOtherModels(CUtlString value) {
    SetSchemaValue(m_ptr, "CModelConfigElement_AttachedModel", "m_MaterialGroupOnOtherModels", false, value);
}

std::string GCModelConfigElement_AttachedModel::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCModelConfigElement_AttachedModel::IsValid() {
    return (m_ptr != nullptr);
}

GCFollowAttachmentUpdateNode::GCFollowAttachmentUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFollowAttachmentUpdateNode::GCFollowAttachmentUpdateNode(void *ptr) {
    m_ptr = ptr;
}

GFollowAttachmentSettings_t GCFollowAttachmentUpdateNode::GetOpFixedData() const {
    return GetSchemaValue<GFollowAttachmentSettings_t>(m_ptr, "CFollowAttachmentUpdateNode", "m_opFixedData");
}

void GCFollowAttachmentUpdateNode::SetOpFixedData(GFollowAttachmentSettings_t value) {
    SetSchemaValue(m_ptr, "CFollowAttachmentUpdateNode", "m_opFixedData", false, value);
}

std::string GCFollowAttachmentUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFollowAttachmentUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GParticleChildrenInfo_t::GParticleChildrenInfo_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GParticleChildrenInfo_t::GParticleChildrenInfo_t(void *ptr) {
    m_ptr = ptr;
}

float GParticleChildrenInfo_t::GetDelay() const {
    return GetSchemaValue<float>(m_ptr, "ParticleChildrenInfo_t", "m_flDelay");
}

void GParticleChildrenInfo_t::SetDelay(float value) {
    SetSchemaValue(m_ptr, "ParticleChildrenInfo_t", "m_flDelay", true, value);
}

bool GParticleChildrenInfo_t::GetEndCap() const {
    return GetSchemaValue<bool>(m_ptr, "ParticleChildrenInfo_t", "m_bEndCap");
}

void GParticleChildrenInfo_t::SetEndCap(bool value) {
    SetSchemaValue(m_ptr, "ParticleChildrenInfo_t", "m_bEndCap", true, value);
}

bool GParticleChildrenInfo_t::GetDisableChild() const {
    return GetSchemaValue<bool>(m_ptr, "ParticleChildrenInfo_t", "m_bDisableChild");
}

void GParticleChildrenInfo_t::SetDisableChild(bool value) {
    SetSchemaValue(m_ptr, "ParticleChildrenInfo_t", "m_bDisableChild", true, value);
}

ParticleDetailLevel_t GParticleChildrenInfo_t::GetDetailLevel() const {
    return GetSchemaValue<ParticleDetailLevel_t>(m_ptr, "ParticleChildrenInfo_t", "m_nDetailLevel");
}

void GParticleChildrenInfo_t::SetDetailLevel(ParticleDetailLevel_t value) {
    SetSchemaValue(m_ptr, "ParticleChildrenInfo_t", "m_nDetailLevel", true, value);
}

std::string GParticleChildrenInfo_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GParticleChildrenInfo_t::IsValid() {
    return (m_ptr != nullptr);
}

GCVoiceContainerNull::GCVoiceContainerNull(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCVoiceContainerNull::GCVoiceContainerNull(void *ptr) {
    m_ptr = ptr;
}

std::string GCVoiceContainerNull::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCVoiceContainerNull::IsValid() {
    return (m_ptr != nullptr);
}

GMoodAnimation_t::GMoodAnimation_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GMoodAnimation_t::GMoodAnimation_t(void *ptr) {
    m_ptr = ptr;
}

CUtlString GMoodAnimation_t::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "MoodAnimation_t", "m_sName");
}

void GMoodAnimation_t::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "MoodAnimation_t", "m_sName", true, value);
}

float GMoodAnimation_t::GetWeight() const {
    return GetSchemaValue<float>(m_ptr, "MoodAnimation_t", "m_flWeight");
}

void GMoodAnimation_t::SetWeight(float value) {
    SetSchemaValue(m_ptr, "MoodAnimation_t", "m_flWeight", true, value);
}

std::string GMoodAnimation_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GMoodAnimation_t::IsValid() {
    return (m_ptr != nullptr);
}

GCClientAlphaProperty::GCClientAlphaProperty(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCClientAlphaProperty::GCClientAlphaProperty(void *ptr) {
    m_ptr = ptr;
}

uint8_t GCClientAlphaProperty::GetRenderFX() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CClientAlphaProperty", "m_nRenderFX");
}

void GCClientAlphaProperty::SetRenderFX(uint8_t value) {
    SetSchemaValue(m_ptr, "CClientAlphaProperty", "m_nRenderFX", false, value);
}

uint8_t GCClientAlphaProperty::GetRenderMode() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CClientAlphaProperty", "m_nRenderMode");
}

void GCClientAlphaProperty::SetRenderMode(uint8_t value) {
    SetSchemaValue(m_ptr, "CClientAlphaProperty", "m_nRenderMode", false, value);
}

uint8_t GCClientAlphaProperty::GetAlpha() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CClientAlphaProperty", "m_nAlpha");
}

void GCClientAlphaProperty::SetAlpha(uint8_t value) {
    SetSchemaValue(m_ptr, "CClientAlphaProperty", "m_nAlpha", false, value);
}

uint16_t GCClientAlphaProperty::GetDesyncOffset() const {
    return GetSchemaValue<uint16_t>(m_ptr, "CClientAlphaProperty", "m_nDesyncOffset");
}

void GCClientAlphaProperty::SetDesyncOffset(uint16_t value) {
    SetSchemaValue(m_ptr, "CClientAlphaProperty", "m_nDesyncOffset", false, value);
}

uint16_t GCClientAlphaProperty::GetReserved2() const {
    return GetSchemaValue<uint16_t>(m_ptr, "CClientAlphaProperty", "m_nReserved2");
}

void GCClientAlphaProperty::SetReserved2(uint16_t value) {
    SetSchemaValue(m_ptr, "CClientAlphaProperty", "m_nReserved2", false, value);
}

uint16_t GCClientAlphaProperty::GetDistFadeStart() const {
    return GetSchemaValue<uint16_t>(m_ptr, "CClientAlphaProperty", "m_nDistFadeStart");
}

void GCClientAlphaProperty::SetDistFadeStart(uint16_t value) {
    SetSchemaValue(m_ptr, "CClientAlphaProperty", "m_nDistFadeStart", false, value);
}

uint16_t GCClientAlphaProperty::GetDistFadeEnd() const {
    return GetSchemaValue<uint16_t>(m_ptr, "CClientAlphaProperty", "m_nDistFadeEnd");
}

void GCClientAlphaProperty::SetDistFadeEnd(uint16_t value) {
    SetSchemaValue(m_ptr, "CClientAlphaProperty", "m_nDistFadeEnd", false, value);
}

float GCClientAlphaProperty::GetFadeScale() const {
    return GetSchemaValue<float>(m_ptr, "CClientAlphaProperty", "m_flFadeScale");
}

void GCClientAlphaProperty::SetFadeScale(float value) {
    SetSchemaValue(m_ptr, "CClientAlphaProperty", "m_flFadeScale", false, value);
}

float GCClientAlphaProperty::GetRenderFxDuration() const {
    return GetSchemaValue<float>(m_ptr, "CClientAlphaProperty", "m_flRenderFxDuration");
}

void GCClientAlphaProperty::SetRenderFxDuration(float value) {
    SetSchemaValue(m_ptr, "CClientAlphaProperty", "m_flRenderFxDuration", false, value);
}

std::string GCClientAlphaProperty::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCClientAlphaProperty::IsValid() {
    return (m_ptr != nullptr);
}

GCTimeRemainingMetricEvaluator::GCTimeRemainingMetricEvaluator(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTimeRemainingMetricEvaluator::GCTimeRemainingMetricEvaluator(void *ptr) {
    m_ptr = ptr;
}

bool GCTimeRemainingMetricEvaluator::GetMatchByTimeRemaining() const {
    return GetSchemaValue<bool>(m_ptr, "CTimeRemainingMetricEvaluator", "m_bMatchByTimeRemaining");
}

void GCTimeRemainingMetricEvaluator::SetMatchByTimeRemaining(bool value) {
    SetSchemaValue(m_ptr, "CTimeRemainingMetricEvaluator", "m_bMatchByTimeRemaining", false, value);
}

float GCTimeRemainingMetricEvaluator::GetMaxTimeRemaining() const {
    return GetSchemaValue<float>(m_ptr, "CTimeRemainingMetricEvaluator", "m_flMaxTimeRemaining");
}

void GCTimeRemainingMetricEvaluator::SetMaxTimeRemaining(float value) {
    SetSchemaValue(m_ptr, "CTimeRemainingMetricEvaluator", "m_flMaxTimeRemaining", false, value);
}

bool GCTimeRemainingMetricEvaluator::GetFilterByTimeRemaining() const {
    return GetSchemaValue<bool>(m_ptr, "CTimeRemainingMetricEvaluator", "m_bFilterByTimeRemaining");
}

void GCTimeRemainingMetricEvaluator::SetFilterByTimeRemaining(bool value) {
    SetSchemaValue(m_ptr, "CTimeRemainingMetricEvaluator", "m_bFilterByTimeRemaining", false, value);
}

float GCTimeRemainingMetricEvaluator::GetMinTimeRemaining() const {
    return GetSchemaValue<float>(m_ptr, "CTimeRemainingMetricEvaluator", "m_flMinTimeRemaining");
}

void GCTimeRemainingMetricEvaluator::SetMinTimeRemaining(float value) {
    SetSchemaValue(m_ptr, "CTimeRemainingMetricEvaluator", "m_flMinTimeRemaining", false, value);
}

std::string GCTimeRemainingMetricEvaluator::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTimeRemainingMetricEvaluator::IsValid() {
    return (m_ptr != nullptr);
}

GNmSyncTrackTimeRange_t::GNmSyncTrackTimeRange_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GNmSyncTrackTimeRange_t::GNmSyncTrackTimeRange_t(void *ptr) {
    m_ptr = ptr;
}

GNmSyncTrackTime_t GNmSyncTrackTimeRange_t::GetStartTime() const {
    return GetSchemaValue<GNmSyncTrackTime_t>(m_ptr, "NmSyncTrackTimeRange_t", "m_startTime");
}

void GNmSyncTrackTimeRange_t::SetStartTime(GNmSyncTrackTime_t value) {
    SetSchemaValue(m_ptr, "NmSyncTrackTimeRange_t", "m_startTime", true, value);
}

GNmSyncTrackTime_t GNmSyncTrackTimeRange_t::GetEndTime() const {
    return GetSchemaValue<GNmSyncTrackTime_t>(m_ptr, "NmSyncTrackTimeRange_t", "m_endTime");
}

void GNmSyncTrackTimeRange_t::SetEndTime(GNmSyncTrackTime_t value) {
    SetSchemaValue(m_ptr, "NmSyncTrackTimeRange_t", "m_endTime", true, value);
}

std::string GNmSyncTrackTimeRange_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GNmSyncTrackTimeRange_t::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimActivity::GCAnimActivity(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimActivity::GCAnimActivity(void *ptr) {
    m_ptr = ptr;
}

CBufferString GCAnimActivity::GetName() const {
    return GetSchemaValue<CBufferString>(m_ptr, "CAnimActivity", "m_name");
}

void GCAnimActivity::SetName(CBufferString value) {
    SetSchemaValue(m_ptr, "CAnimActivity", "m_name", false, value);
}

int32_t GCAnimActivity::GetActivity() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimActivity", "m_nActivity");
}

void GCAnimActivity::SetActivity(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimActivity", "m_nActivity", false, value);
}

int32_t GCAnimActivity::GetFlags() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimActivity", "m_nFlags");
}

void GCAnimActivity::SetFlags(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimActivity", "m_nFlags", false, value);
}

int32_t GCAnimActivity::GetWeight() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimActivity", "m_nWeight");
}

void GCAnimActivity::SetWeight(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimActivity", "m_nWeight", false, value);
}

std::string GCAnimActivity::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimActivity::IsValid() {
    return (m_ptr != nullptr);
}

GCNmGraphDefinition::GCNmGraphDefinition(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmGraphDefinition::GCNmGraphDefinition(void *ptr) {
    m_ptr = ptr;
}

std::vector<int16> GCNmGraphDefinition::GetPersistentNodeIndices() const {
    CUtlVector<int16>* vec = GetSchemaValue<CUtlVector<int16>*>(m_ptr, "CNmGraphDefinition", "m_persistentNodeIndices"); std::vector<int16> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCNmGraphDefinition::SetPersistentNodeIndices(std::vector<int16> value) {
    SetSchemaValueCUtlVector<int16>(m_ptr, "CNmGraphDefinition", "m_persistentNodeIndices", false, value);
}

int16_t GCNmGraphDefinition::GetRootNodeIdx() const {
    return GetSchemaValue<int16_t>(m_ptr, "CNmGraphDefinition", "m_nRootNodeIdx");
}

void GCNmGraphDefinition::SetRootNodeIdx(int16_t value) {
    SetSchemaValue(m_ptr, "CNmGraphDefinition", "m_nRootNodeIdx", false, value);
}

std::vector<int16> GCNmGraphDefinition::GetVirtualParameterNodeIndices() const {
    CUtlVector<int16>* vec = GetSchemaValue<CUtlVector<int16>*>(m_ptr, "CNmGraphDefinition", "m_virtualParameterNodeIndices"); std::vector<int16> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCNmGraphDefinition::SetVirtualParameterNodeIndices(std::vector<int16> value) {
    SetSchemaValueCUtlVector<int16>(m_ptr, "CNmGraphDefinition", "m_virtualParameterNodeIndices", false, value);
}

std::vector<GCNmGraphDefinition> GCNmGraphDefinition::GetChildGraphSlots() const {
    CUtlVector<GCNmGraphDefinition>* vec = GetSchemaValue<CUtlVector<GCNmGraphDefinition>*>(m_ptr, "CNmGraphDefinition", "m_childGraphSlots"); std::vector<GCNmGraphDefinition> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCNmGraphDefinition::SetChildGraphSlots(std::vector<GCNmGraphDefinition> value) {
    SetSchemaValueCUtlVector<GCNmGraphDefinition>(m_ptr, "CNmGraphDefinition", "m_childGraphSlots", false, value);
}

std::vector<GCNmGraphDefinition> GCNmGraphDefinition::GetExternalGraphSlots() const {
    CUtlVector<GCNmGraphDefinition>* vec = GetSchemaValue<CUtlVector<GCNmGraphDefinition>*>(m_ptr, "CNmGraphDefinition", "m_externalGraphSlots"); std::vector<GCNmGraphDefinition> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCNmGraphDefinition::SetExternalGraphSlots(std::vector<GCNmGraphDefinition> value) {
    SetSchemaValueCUtlVector<GCNmGraphDefinition>(m_ptr, "CNmGraphDefinition", "m_externalGraphSlots", false, value);
}

std::string GCNmGraphDefinition::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmGraphDefinition::IsValid() {
    return (m_ptr != nullptr);
}

GCSolveIKChainUpdateNode::GCSolveIKChainUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSolveIKChainUpdateNode::GCSolveIKChainUpdateNode(void *ptr) {
    m_ptr = ptr;
}

std::vector<GCSolveIKTargetHandle_t> GCSolveIKChainUpdateNode::GetTargetHandles() const {
    CUtlVector<GCSolveIKTargetHandle_t>* vec = GetSchemaValue<CUtlVector<GCSolveIKTargetHandle_t>*>(m_ptr, "CSolveIKChainUpdateNode", "m_targetHandles"); std::vector<GCSolveIKTargetHandle_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSolveIKChainUpdateNode::SetTargetHandles(std::vector<GCSolveIKTargetHandle_t> value) {
    SetSchemaValueCUtlVector<GCSolveIKTargetHandle_t>(m_ptr, "CSolveIKChainUpdateNode", "m_targetHandles", false, value);
}

GSolveIKChainPoseOpFixedSettings_t GCSolveIKChainUpdateNode::GetOpFixedData() const {
    return GetSchemaValue<GSolveIKChainPoseOpFixedSettings_t>(m_ptr, "CSolveIKChainUpdateNode", "m_opFixedData");
}

void GCSolveIKChainUpdateNode::SetOpFixedData(GSolveIKChainPoseOpFixedSettings_t value) {
    SetSchemaValue(m_ptr, "CSolveIKChainUpdateNode", "m_opFixedData", false, value);
}

std::string GCSolveIKChainUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSolveIKChainUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GEventClientPollNetworking_t::GEventClientPollNetworking_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEventClientPollNetworking_t::GEventClientPollNetworking_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GEventClientPollNetworking_t::GetTickCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "EventClientPollNetworking_t", "m_nTickCount");
}

void GEventClientPollNetworking_t::SetTickCount(int32_t value) {
    SetSchemaValue(m_ptr, "EventClientPollNetworking_t", "m_nTickCount", true, value);
}

std::string GEventClientPollNetworking_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEventClientPollNetworking_t::IsValid() {
    return (m_ptr != nullptr);
}

GCMeshletDescriptor::GCMeshletDescriptor(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMeshletDescriptor::GCMeshletDescriptor(void *ptr) {
    m_ptr = ptr;
}

GCDrawCullingData GCMeshletDescriptor::GetCullingData() const {
    return GetSchemaValue<GCDrawCullingData>(m_ptr, "CMeshletDescriptor", "m_CullingData");
}

void GCMeshletDescriptor::SetCullingData(GCDrawCullingData value) {
    SetSchemaValue(m_ptr, "CMeshletDescriptor", "m_CullingData", false, value);
}

std::string GCMeshletDescriptor::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMeshletDescriptor::IsValid() {
    return (m_ptr != nullptr);
}

GCNmLayerBlendNode__LayerDefinition_t::GCNmLayerBlendNode__LayerDefinition_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmLayerBlendNode__LayerDefinition_t::GCNmLayerBlendNode__LayerDefinition_t(void *ptr) {
    m_ptr = ptr;
}

int16_t GCNmLayerBlendNode__LayerDefinition_t::GetInputNodeIdx() const {
    return GetSchemaValue<int16_t>(m_ptr, "CNmLayerBlendNode__LayerDefinition_t", "m_nInputNodeIdx");
}

void GCNmLayerBlendNode__LayerDefinition_t::SetInputNodeIdx(int16_t value) {
    SetSchemaValue(m_ptr, "CNmLayerBlendNode__LayerDefinition_t", "m_nInputNodeIdx", true, value);
}

int16_t GCNmLayerBlendNode__LayerDefinition_t::GetWeightValueNodeIdx() const {
    return GetSchemaValue<int16_t>(m_ptr, "CNmLayerBlendNode__LayerDefinition_t", "m_nWeightValueNodeIdx");
}

void GCNmLayerBlendNode__LayerDefinition_t::SetWeightValueNodeIdx(int16_t value) {
    SetSchemaValue(m_ptr, "CNmLayerBlendNode__LayerDefinition_t", "m_nWeightValueNodeIdx", true, value);
}

int16_t GCNmLayerBlendNode__LayerDefinition_t::GetBoneMaskValueNodeIdx() const {
    return GetSchemaValue<int16_t>(m_ptr, "CNmLayerBlendNode__LayerDefinition_t", "m_nBoneMaskValueNodeIdx");
}

void GCNmLayerBlendNode__LayerDefinition_t::SetBoneMaskValueNodeIdx(int16_t value) {
    SetSchemaValue(m_ptr, "CNmLayerBlendNode__LayerDefinition_t", "m_nBoneMaskValueNodeIdx", true, value);
}

int16_t GCNmLayerBlendNode__LayerDefinition_t::GetRootMotionWeightValueNodeIdx() const {
    return GetSchemaValue<int16_t>(m_ptr, "CNmLayerBlendNode__LayerDefinition_t", "m_nRootMotionWeightValueNodeIdx");
}

void GCNmLayerBlendNode__LayerDefinition_t::SetRootMotionWeightValueNodeIdx(int16_t value) {
    SetSchemaValue(m_ptr, "CNmLayerBlendNode__LayerDefinition_t", "m_nRootMotionWeightValueNodeIdx", true, value);
}

bool GCNmLayerBlendNode__LayerDefinition_t::GetIsSynchronized() const {
    return GetSchemaValue<bool>(m_ptr, "CNmLayerBlendNode__LayerDefinition_t", "m_bIsSynchronized");
}

void GCNmLayerBlendNode__LayerDefinition_t::SetIsSynchronized(bool value) {
    SetSchemaValue(m_ptr, "CNmLayerBlendNode__LayerDefinition_t", "m_bIsSynchronized", true, value);
}

bool GCNmLayerBlendNode__LayerDefinition_t::GetIgnoreEvents() const {
    return GetSchemaValue<bool>(m_ptr, "CNmLayerBlendNode__LayerDefinition_t", "m_bIgnoreEvents");
}

void GCNmLayerBlendNode__LayerDefinition_t::SetIgnoreEvents(bool value) {
    SetSchemaValue(m_ptr, "CNmLayerBlendNode__LayerDefinition_t", "m_bIgnoreEvents", true, value);
}

bool GCNmLayerBlendNode__LayerDefinition_t::GetIsStateMachineLayer() const {
    return GetSchemaValue<bool>(m_ptr, "CNmLayerBlendNode__LayerDefinition_t", "m_bIsStateMachineLayer");
}

void GCNmLayerBlendNode__LayerDefinition_t::SetIsStateMachineLayer(bool value) {
    SetSchemaValue(m_ptr, "CNmLayerBlendNode__LayerDefinition_t", "m_bIsStateMachineLayer", true, value);
}

NmPoseBlendMode_t GCNmLayerBlendNode__LayerDefinition_t::GetBlendMode() const {
    return GetSchemaValue<NmPoseBlendMode_t>(m_ptr, "CNmLayerBlendNode__LayerDefinition_t", "m_blendMode");
}

void GCNmLayerBlendNode__LayerDefinition_t::SetBlendMode(NmPoseBlendMode_t value) {
    SetSchemaValue(m_ptr, "CNmLayerBlendNode__LayerDefinition_t", "m_blendMode", true, value);
}

std::string GCNmLayerBlendNode__LayerDefinition_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmLayerBlendNode__LayerDefinition_t::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimSequenceParams::GCAnimSequenceParams(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimSequenceParams::GCAnimSequenceParams(void *ptr) {
    m_ptr = ptr;
}

float GCAnimSequenceParams::GetFadeInTime() const {
    return GetSchemaValue<float>(m_ptr, "CAnimSequenceParams", "m_flFadeInTime");
}

void GCAnimSequenceParams::SetFadeInTime(float value) {
    SetSchemaValue(m_ptr, "CAnimSequenceParams", "m_flFadeInTime", false, value);
}

float GCAnimSequenceParams::GetFadeOutTime() const {
    return GetSchemaValue<float>(m_ptr, "CAnimSequenceParams", "m_flFadeOutTime");
}

void GCAnimSequenceParams::SetFadeOutTime(float value) {
    SetSchemaValue(m_ptr, "CAnimSequenceParams", "m_flFadeOutTime", false, value);
}

std::string GCAnimSequenceParams::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimSequenceParams::IsValid() {
    return (m_ptr != nullptr);
}

GCDemoSettingsComponentUpdater::GCDemoSettingsComponentUpdater(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCDemoSettingsComponentUpdater::GCDemoSettingsComponentUpdater(void *ptr) {
    m_ptr = ptr;
}

GCAnimDemoCaptureSettings GCDemoSettingsComponentUpdater::GetSettings() const {
    return GetSchemaValue<GCAnimDemoCaptureSettings>(m_ptr, "CDemoSettingsComponentUpdater", "m_settings");
}

void GCDemoSettingsComponentUpdater::SetSettings(GCAnimDemoCaptureSettings value) {
    SetSchemaValue(m_ptr, "CDemoSettingsComponentUpdater", "m_settings", false, value);
}

std::string GCDemoSettingsComponentUpdater::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCDemoSettingsComponentUpdater::IsValid() {
    return (m_ptr != nullptr);
}

GCompositeMaterialAssemblyProcedure_t::GCompositeMaterialAssemblyProcedure_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCompositeMaterialAssemblyProcedure_t::GCompositeMaterialAssemblyProcedure_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<GCompositeMaterialMatchFilter_t> GCompositeMaterialAssemblyProcedure_t::GetMatchFilters() const {
    CUtlVector<GCompositeMaterialMatchFilter_t>* vec = GetSchemaValue<CUtlVector<GCompositeMaterialMatchFilter_t>*>(m_ptr, "CompositeMaterialAssemblyProcedure_t", "m_vecMatchFilters"); std::vector<GCompositeMaterialMatchFilter_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCompositeMaterialAssemblyProcedure_t::SetMatchFilters(std::vector<GCompositeMaterialMatchFilter_t> value) {
    SetSchemaValueCUtlVector<GCompositeMaterialMatchFilter_t>(m_ptr, "CompositeMaterialAssemblyProcedure_t", "m_vecMatchFilters", true, value);
}

std::vector<GCompositeMaterialInputContainer_t> GCompositeMaterialAssemblyProcedure_t::GetCompositeInputContainers() const {
    CUtlVector<GCompositeMaterialInputContainer_t>* vec = GetSchemaValue<CUtlVector<GCompositeMaterialInputContainer_t>*>(m_ptr, "CompositeMaterialAssemblyProcedure_t", "m_vecCompositeInputContainers"); std::vector<GCompositeMaterialInputContainer_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCompositeMaterialAssemblyProcedure_t::SetCompositeInputContainers(std::vector<GCompositeMaterialInputContainer_t> value) {
    SetSchemaValueCUtlVector<GCompositeMaterialInputContainer_t>(m_ptr, "CompositeMaterialAssemblyProcedure_t", "m_vecCompositeInputContainers", true, value);
}

std::vector<GCompMatPropertyMutator_t> GCompositeMaterialAssemblyProcedure_t::GetPropertyMutators() const {
    CUtlVector<GCompMatPropertyMutator_t>* vec = GetSchemaValue<CUtlVector<GCompMatPropertyMutator_t>*>(m_ptr, "CompositeMaterialAssemblyProcedure_t", "m_vecPropertyMutators"); std::vector<GCompMatPropertyMutator_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCompositeMaterialAssemblyProcedure_t::SetPropertyMutators(std::vector<GCompMatPropertyMutator_t> value) {
    SetSchemaValueCUtlVector<GCompMatPropertyMutator_t>(m_ptr, "CompositeMaterialAssemblyProcedure_t", "m_vecPropertyMutators", true, value);
}

std::string GCompositeMaterialAssemblyProcedure_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCompositeMaterialAssemblyProcedure_t::IsValid() {
    return (m_ptr != nullptr);
}

GCTaskHandshakeAnimTag::GCTaskHandshakeAnimTag(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTaskHandshakeAnimTag::GCTaskHandshakeAnimTag(void *ptr) {
    m_ptr = ptr;
}

std::string GCTaskHandshakeAnimTag::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTaskHandshakeAnimTag::IsValid() {
    return (m_ptr != nullptr);
}

GEventClientPauseSimulate_t::GEventClientPauseSimulate_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEventClientPauseSimulate_t::GEventClientPauseSimulate_t(void *ptr) {
    m_ptr = ptr;
}

std::string GEventClientPauseSimulate_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEventClientPauseSimulate_t::IsValid() {
    return (m_ptr != nullptr);
}

GCFireOverlay::GCFireOverlay(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFireOverlay::GCFireOverlay(void *ptr) {
    m_ptr = ptr;
}

std::vector<Vector> GCFireOverlay::GetBaseColors() const {
    Vector* outValue = GetSchemaValue<Vector*>(m_ptr, "CFireOverlay", "m_vBaseColors"); std::vector<Vector> ret; for(int i = 0; i < 4; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCFireOverlay::SetBaseColors(std::vector<Vector> value) {
    Vector* outValue = GetSchemaValue<Vector*>(m_ptr, "CFireOverlay", "m_vBaseColors"); for(int i = 0; i < 4; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CFireOverlay", "m_vBaseColors", false, outValue);
}

float GCFireOverlay::GetScale() const {
    return GetSchemaValue<float>(m_ptr, "CFireOverlay", "m_flScale");
}

void GCFireOverlay::SetScale(float value) {
    SetSchemaValue(m_ptr, "CFireOverlay", "m_flScale", false, value);
}

int32_t GCFireOverlay::GetGUID() const {
    return GetSchemaValue<int32_t>(m_ptr, "CFireOverlay", "m_nGUID");
}

void GCFireOverlay::SetGUID(int32_t value) {
    SetSchemaValue(m_ptr, "CFireOverlay", "m_nGUID", false, value);
}

std::string GCFireOverlay::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFireOverlay::IsValid() {
    return (m_ptr != nullptr);
}

GFeBuildTaperedCapsuleRigid_t::GFeBuildTaperedCapsuleRigid_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeBuildTaperedCapsuleRigid_t::GFeBuildTaperedCapsuleRigid_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GFeBuildTaperedCapsuleRigid_t::GetPriority() const {
    return GetSchemaValue<int32_t>(m_ptr, "FeBuildTaperedCapsuleRigid_t", "m_nPriority");
}

void GFeBuildTaperedCapsuleRigid_t::SetPriority(int32_t value) {
    SetSchemaValue(m_ptr, "FeBuildTaperedCapsuleRigid_t", "m_nPriority", true, value);
}

uint32_t GFeBuildTaperedCapsuleRigid_t::GetVertexMapHash() const {
    return GetSchemaValue<uint32_t>(m_ptr, "FeBuildTaperedCapsuleRigid_t", "m_nVertexMapHash");
}

void GFeBuildTaperedCapsuleRigid_t::SetVertexMapHash(uint32_t value) {
    SetSchemaValue(m_ptr, "FeBuildTaperedCapsuleRigid_t", "m_nVertexMapHash", true, value);
}

std::string GFeBuildTaperedCapsuleRigid_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeBuildTaperedCapsuleRigid_t::IsValid() {
    return (m_ptr != nullptr);
}

GCStateUpdateData::GCStateUpdateData(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCStateUpdateData::GCStateUpdateData(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCStateUpdateData::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CStateUpdateData", "m_name");
}

void GCStateUpdateData::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "CStateUpdateData", "m_name", false, value);
}

GAnimScriptHandle GCStateUpdateData::GetScript() const {
    return GetSchemaValue<GAnimScriptHandle>(m_ptr, "CStateUpdateData", "m_hScript");
}

void GCStateUpdateData::SetScript(GAnimScriptHandle value) {
    SetSchemaValue(m_ptr, "CStateUpdateData", "m_hScript", false, value);
}

std::vector<int32> GCStateUpdateData::GetTransitionIndices() const {
    CUtlVector<int32>* vec = GetSchemaValue<CUtlVector<int32>*>(m_ptr, "CStateUpdateData", "m_transitionIndices"); std::vector<int32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCStateUpdateData::SetTransitionIndices(std::vector<int32> value) {
    SetSchemaValueCUtlVector<int32>(m_ptr, "CStateUpdateData", "m_transitionIndices", false, value);
}

std::vector<GCStateActionUpdater> GCStateUpdateData::GetActions() const {
    CUtlVector<GCStateActionUpdater>* vec = GetSchemaValue<CUtlVector<GCStateActionUpdater>*>(m_ptr, "CStateUpdateData", "m_actions"); std::vector<GCStateActionUpdater> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCStateUpdateData::SetActions(std::vector<GCStateActionUpdater> value) {
    SetSchemaValueCUtlVector<GCStateActionUpdater>(m_ptr, "CStateUpdateData", "m_actions", false, value);
}

GAnimStateID GCStateUpdateData::GetStateID() const {
    return GetSchemaValue<GAnimStateID>(m_ptr, "CStateUpdateData", "m_stateID");
}

void GCStateUpdateData::SetStateID(GAnimStateID value) {
    SetSchemaValue(m_ptr, "CStateUpdateData", "m_stateID", false, value);
}

std::string GCStateUpdateData::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCStateUpdateData::IsValid() {
    return (m_ptr != nullptr);
}

GCPhysSurfaceProperties::GCPhysSurfaceProperties(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPhysSurfaceProperties::GCPhysSurfaceProperties(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCPhysSurfaceProperties::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CPhysSurfaceProperties", "m_name");
}

void GCPhysSurfaceProperties::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "CPhysSurfaceProperties", "m_name", false, value);
}

uint32_t GCPhysSurfaceProperties::GetNameHash() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CPhysSurfaceProperties", "m_nameHash");
}

void GCPhysSurfaceProperties::SetNameHash(uint32_t value) {
    SetSchemaValue(m_ptr, "CPhysSurfaceProperties", "m_nameHash", false, value);
}

uint32_t GCPhysSurfaceProperties::GetBaseNameHash() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CPhysSurfaceProperties", "m_baseNameHash");
}

void GCPhysSurfaceProperties::SetBaseNameHash(uint32_t value) {
    SetSchemaValue(m_ptr, "CPhysSurfaceProperties", "m_baseNameHash", false, value);
}

bool GCPhysSurfaceProperties::GetHidden() const {
    return GetSchemaValue<bool>(m_ptr, "CPhysSurfaceProperties", "m_bHidden");
}

void GCPhysSurfaceProperties::SetHidden(bool value) {
    SetSchemaValue(m_ptr, "CPhysSurfaceProperties", "m_bHidden", false, value);
}

CUtlString GCPhysSurfaceProperties::GetDescription() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CPhysSurfaceProperties", "m_description");
}

void GCPhysSurfaceProperties::SetDescription(CUtlString value) {
    SetSchemaValue(m_ptr, "CPhysSurfaceProperties", "m_description", false, value);
}

GCPhysSurfacePropertiesPhysics GCPhysSurfaceProperties::GetPhysics() const {
    return GetSchemaValue<GCPhysSurfacePropertiesPhysics>(m_ptr, "CPhysSurfaceProperties", "m_physics");
}

void GCPhysSurfaceProperties::SetPhysics(GCPhysSurfacePropertiesPhysics value) {
    SetSchemaValue(m_ptr, "CPhysSurfaceProperties", "m_physics", false, value);
}

GCPhysSurfacePropertiesSoundNames GCPhysSurfaceProperties::GetAudioSounds() const {
    return GetSchemaValue<GCPhysSurfacePropertiesSoundNames>(m_ptr, "CPhysSurfaceProperties", "m_audioSounds");
}

void GCPhysSurfaceProperties::SetAudioSounds(GCPhysSurfacePropertiesSoundNames value) {
    SetSchemaValue(m_ptr, "CPhysSurfaceProperties", "m_audioSounds", false, value);
}

GCPhysSurfacePropertiesAudio GCPhysSurfaceProperties::GetAudioParams() const {
    return GetSchemaValue<GCPhysSurfacePropertiesAudio>(m_ptr, "CPhysSurfaceProperties", "m_audioParams");
}

void GCPhysSurfaceProperties::SetAudioParams(GCPhysSurfacePropertiesAudio value) {
    SetSchemaValue(m_ptr, "CPhysSurfaceProperties", "m_audioParams", false, value);
}

std::string GCPhysSurfaceProperties::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPhysSurfaceProperties::IsValid() {
    return (m_ptr != nullptr);
}

GCMotionSearchNode::GCMotionSearchNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMotionSearchNode::GCMotionSearchNode(void *ptr) {
    m_ptr = ptr;
}

std::vector<GCMotionSearchNode*> GCMotionSearchNode::GetChildren() const {
    CUtlVector<GCMotionSearchNode*>* vec = GetSchemaValue<CUtlVector<GCMotionSearchNode*>*>(m_ptr, "CMotionSearchNode", "m_children"); std::vector<GCMotionSearchNode*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCMotionSearchNode::SetChildren(std::vector<GCMotionSearchNode*> value) {
    SetSchemaValueCUtlVector<GCMotionSearchNode*>(m_ptr, "CMotionSearchNode", "m_children", false, value);
}

GCVectorQuantizer GCMotionSearchNode::GetQuantizer() const {
    return GetSchemaValue<GCVectorQuantizer>(m_ptr, "CMotionSearchNode", "m_quantizer");
}

void GCMotionSearchNode::SetQuantizer(GCVectorQuantizer value) {
    SetSchemaValue(m_ptr, "CMotionSearchNode", "m_quantizer", false, value);
}

std::vector<int32> GCMotionSearchNode::GetSelectableSamples() const {
    CUtlVector<int32>* vec = GetSchemaValue<CUtlVector<int32>*>(m_ptr, "CMotionSearchNode", "m_selectableSamples"); std::vector<int32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCMotionSearchNode::SetSelectableSamples(std::vector<int32> value) {
    SetSchemaValueCUtlVector<int32>(m_ptr, "CMotionSearchNode", "m_selectableSamples", false, value);
}

std::string GCMotionSearchNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMotionSearchNode::IsValid() {
    return (m_ptr != nullptr);
}

GVMixVocoderDesc_t::GVMixVocoderDesc_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVMixVocoderDesc_t::GVMixVocoderDesc_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GVMixVocoderDesc_t::GetBandCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "VMixVocoderDesc_t", "m_nBandCount");
}

void GVMixVocoderDesc_t::SetBandCount(int32_t value) {
    SetSchemaValue(m_ptr, "VMixVocoderDesc_t", "m_nBandCount", true, value);
}

float GVMixVocoderDesc_t::GetBandwidth() const {
    return GetSchemaValue<float>(m_ptr, "VMixVocoderDesc_t", "m_flBandwidth");
}

void GVMixVocoderDesc_t::SetBandwidth(float value) {
    SetSchemaValue(m_ptr, "VMixVocoderDesc_t", "m_flBandwidth", true, value);
}

float GVMixVocoderDesc_t::GetFldBModGain() const {
    return GetSchemaValue<float>(m_ptr, "VMixVocoderDesc_t", "m_fldBModGain");
}

void GVMixVocoderDesc_t::SetFldBModGain(float value) {
    SetSchemaValue(m_ptr, "VMixVocoderDesc_t", "m_fldBModGain", true, value);
}

float GVMixVocoderDesc_t::GetFreqRangeStart() const {
    return GetSchemaValue<float>(m_ptr, "VMixVocoderDesc_t", "m_flFreqRangeStart");
}

void GVMixVocoderDesc_t::SetFreqRangeStart(float value) {
    SetSchemaValue(m_ptr, "VMixVocoderDesc_t", "m_flFreqRangeStart", true, value);
}

float GVMixVocoderDesc_t::GetFreqRangeEnd() const {
    return GetSchemaValue<float>(m_ptr, "VMixVocoderDesc_t", "m_flFreqRangeEnd");
}

void GVMixVocoderDesc_t::SetFreqRangeEnd(float value) {
    SetSchemaValue(m_ptr, "VMixVocoderDesc_t", "m_flFreqRangeEnd", true, value);
}

float GVMixVocoderDesc_t::GetFldBUnvoicedGain() const {
    return GetSchemaValue<float>(m_ptr, "VMixVocoderDesc_t", "m_fldBUnvoicedGain");
}

void GVMixVocoderDesc_t::SetFldBUnvoicedGain(float value) {
    SetSchemaValue(m_ptr, "VMixVocoderDesc_t", "m_fldBUnvoicedGain", true, value);
}

float GVMixVocoderDesc_t::GetAttackTimeMS() const {
    return GetSchemaValue<float>(m_ptr, "VMixVocoderDesc_t", "m_flAttackTimeMS");
}

void GVMixVocoderDesc_t::SetAttackTimeMS(float value) {
    SetSchemaValue(m_ptr, "VMixVocoderDesc_t", "m_flAttackTimeMS", true, value);
}

float GVMixVocoderDesc_t::GetReleaseTimeMS() const {
    return GetSchemaValue<float>(m_ptr, "VMixVocoderDesc_t", "m_flReleaseTimeMS");
}

void GVMixVocoderDesc_t::SetReleaseTimeMS(float value) {
    SetSchemaValue(m_ptr, "VMixVocoderDesc_t", "m_flReleaseTimeMS", true, value);
}

int32_t GVMixVocoderDesc_t::GetDebugBand() const {
    return GetSchemaValue<int32_t>(m_ptr, "VMixVocoderDesc_t", "m_nDebugBand");
}

void GVMixVocoderDesc_t::SetDebugBand(int32_t value) {
    SetSchemaValue(m_ptr, "VMixVocoderDesc_t", "m_nDebugBand", true, value);
}

bool GVMixVocoderDesc_t::GetPeakMode() const {
    return GetSchemaValue<bool>(m_ptr, "VMixVocoderDesc_t", "m_bPeakMode");
}

void GVMixVocoderDesc_t::SetPeakMode(bool value) {
    SetSchemaValue(m_ptr, "VMixVocoderDesc_t", "m_bPeakMode", true, value);
}

std::string GVMixVocoderDesc_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVMixVocoderDesc_t::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimScriptManager::GCAnimScriptManager(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimScriptManager::GCAnimScriptManager(void *ptr) {
    m_ptr = ptr;
}

std::vector<GScriptInfo_t> GCAnimScriptManager::GetScriptInfo() const {
    CUtlVector<GScriptInfo_t>* vec = GetSchemaValue<CUtlVector<GScriptInfo_t>*>(m_ptr, "CAnimScriptManager", "m_scriptInfo"); std::vector<GScriptInfo_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimScriptManager::SetScriptInfo(std::vector<GScriptInfo_t> value) {
    SetSchemaValueCUtlVector<GScriptInfo_t>(m_ptr, "CAnimScriptManager", "m_scriptInfo", false, value);
}

std::string GCAnimScriptManager::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimScriptManager::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimationGraphVisualizerLine::GCAnimationGraphVisualizerLine(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimationGraphVisualizerLine::GCAnimationGraphVisualizerLine(void *ptr) {
    m_ptr = ptr;
}

Vector GCAnimationGraphVisualizerLine::GetWsPositionStart() const {
    return GetSchemaValue<Vector>(m_ptr, "CAnimationGraphVisualizerLine", "m_vWsPositionStart");
}

void GCAnimationGraphVisualizerLine::SetWsPositionStart(Vector value) {
    SetSchemaValue(m_ptr, "CAnimationGraphVisualizerLine", "m_vWsPositionStart", false, value);
}

Vector GCAnimationGraphVisualizerLine::GetWsPositionEnd() const {
    return GetSchemaValue<Vector>(m_ptr, "CAnimationGraphVisualizerLine", "m_vWsPositionEnd");
}

void GCAnimationGraphVisualizerLine::SetWsPositionEnd(Vector value) {
    SetSchemaValue(m_ptr, "CAnimationGraphVisualizerLine", "m_vWsPositionEnd", false, value);
}

Color GCAnimationGraphVisualizerLine::GetColor() const {
    return GetSchemaValue<Color>(m_ptr, "CAnimationGraphVisualizerLine", "m_Color");
}

void GCAnimationGraphVisualizerLine::SetColor(Color value) {
    SetSchemaValue(m_ptr, "CAnimationGraphVisualizerLine", "m_Color", false, value);
}

std::string GCAnimationGraphVisualizerLine::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimationGraphVisualizerLine::IsValid() {
    return (m_ptr != nullptr);
}

GCFootTrajectory::GCFootTrajectory(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFootTrajectory::GCFootTrajectory(void *ptr) {
    m_ptr = ptr;
}

Vector GCFootTrajectory::GetOffset() const {
    return GetSchemaValue<Vector>(m_ptr, "CFootTrajectory", "m_vOffset");
}

void GCFootTrajectory::SetOffset(Vector value) {
    SetSchemaValue(m_ptr, "CFootTrajectory", "m_vOffset", false, value);
}

float GCFootTrajectory::GetRotationOffset() const {
    return GetSchemaValue<float>(m_ptr, "CFootTrajectory", "m_flRotationOffset");
}

void GCFootTrajectory::SetRotationOffset(float value) {
    SetSchemaValue(m_ptr, "CFootTrajectory", "m_flRotationOffset", false, value);
}

float GCFootTrajectory::GetProgression() const {
    return GetSchemaValue<float>(m_ptr, "CFootTrajectory", "m_flProgression");
}

void GCFootTrajectory::SetProgression(float value) {
    SetSchemaValue(m_ptr, "CFootTrajectory", "m_flProgression", false, value);
}

std::string GCFootTrajectory::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFootTrajectory::IsValid() {
    return (m_ptr != nullptr);
}

GVMixModDelayDesc_t::GVMixModDelayDesc_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVMixModDelayDesc_t::GVMixModDelayDesc_t(void *ptr) {
    m_ptr = ptr;
}

GVMixFilterDesc_t GVMixModDelayDesc_t::GetFeedbackFilter() const {
    return GetSchemaValue<GVMixFilterDesc_t>(m_ptr, "VMixModDelayDesc_t", "m_feedbackFilter");
}

void GVMixModDelayDesc_t::SetFeedbackFilter(GVMixFilterDesc_t value) {
    SetSchemaValue(m_ptr, "VMixModDelayDesc_t", "m_feedbackFilter", true, value);
}

bool GVMixModDelayDesc_t::GetPhaseInvert() const {
    return GetSchemaValue<bool>(m_ptr, "VMixModDelayDesc_t", "m_bPhaseInvert");
}

void GVMixModDelayDesc_t::SetPhaseInvert(bool value) {
    SetSchemaValue(m_ptr, "VMixModDelayDesc_t", "m_bPhaseInvert", true, value);
}

float GVMixModDelayDesc_t::GetGlideTime() const {
    return GetSchemaValue<float>(m_ptr, "VMixModDelayDesc_t", "m_flGlideTime");
}

void GVMixModDelayDesc_t::SetGlideTime(float value) {
    SetSchemaValue(m_ptr, "VMixModDelayDesc_t", "m_flGlideTime", true, value);
}

float GVMixModDelayDesc_t::GetDelay() const {
    return GetSchemaValue<float>(m_ptr, "VMixModDelayDesc_t", "m_flDelay");
}

void GVMixModDelayDesc_t::SetDelay(float value) {
    SetSchemaValue(m_ptr, "VMixModDelayDesc_t", "m_flDelay", true, value);
}

float GVMixModDelayDesc_t::GetOutputGain() const {
    return GetSchemaValue<float>(m_ptr, "VMixModDelayDesc_t", "m_flOutputGain");
}

void GVMixModDelayDesc_t::SetOutputGain(float value) {
    SetSchemaValue(m_ptr, "VMixModDelayDesc_t", "m_flOutputGain", true, value);
}

float GVMixModDelayDesc_t::GetFeedbackGain() const {
    return GetSchemaValue<float>(m_ptr, "VMixModDelayDesc_t", "m_flFeedbackGain");
}

void GVMixModDelayDesc_t::SetFeedbackGain(float value) {
    SetSchemaValue(m_ptr, "VMixModDelayDesc_t", "m_flFeedbackGain", true, value);
}

float GVMixModDelayDesc_t::GetModRate() const {
    return GetSchemaValue<float>(m_ptr, "VMixModDelayDesc_t", "m_flModRate");
}

void GVMixModDelayDesc_t::SetModRate(float value) {
    SetSchemaValue(m_ptr, "VMixModDelayDesc_t", "m_flModRate", true, value);
}

float GVMixModDelayDesc_t::GetModDepth() const {
    return GetSchemaValue<float>(m_ptr, "VMixModDelayDesc_t", "m_flModDepth");
}

void GVMixModDelayDesc_t::SetModDepth(float value) {
    SetSchemaValue(m_ptr, "VMixModDelayDesc_t", "m_flModDepth", true, value);
}

bool GVMixModDelayDesc_t::GetApplyAntialiasing() const {
    return GetSchemaValue<bool>(m_ptr, "VMixModDelayDesc_t", "m_bApplyAntialiasing");
}

void GVMixModDelayDesc_t::SetApplyAntialiasing(bool value) {
    SetSchemaValue(m_ptr, "VMixModDelayDesc_t", "m_bApplyAntialiasing", true, value);
}

std::string GVMixModDelayDesc_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVMixModDelayDesc_t::IsValid() {
    return (m_ptr != nullptr);
}

GCHitBox::GCHitBox(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCHitBox::GCHitBox(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCHitBox::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CHitBox", "m_name");
}

void GCHitBox::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "CHitBox", "m_name", false, value);
}

CUtlString GCHitBox::GetSurfaceProperty() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CHitBox", "m_sSurfaceProperty");
}

void GCHitBox::SetSurfaceProperty(CUtlString value) {
    SetSchemaValue(m_ptr, "CHitBox", "m_sSurfaceProperty", false, value);
}

CUtlString GCHitBox::GetBoneName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CHitBox", "m_sBoneName");
}

void GCHitBox::SetBoneName(CUtlString value) {
    SetSchemaValue(m_ptr, "CHitBox", "m_sBoneName", false, value);
}

Vector GCHitBox::GetMinBounds() const {
    return GetSchemaValue<Vector>(m_ptr, "CHitBox", "m_vMinBounds");
}

void GCHitBox::SetMinBounds(Vector value) {
    SetSchemaValue(m_ptr, "CHitBox", "m_vMinBounds", false, value);
}

Vector GCHitBox::GetMaxBounds() const {
    return GetSchemaValue<Vector>(m_ptr, "CHitBox", "m_vMaxBounds");
}

void GCHitBox::SetMaxBounds(Vector value) {
    SetSchemaValue(m_ptr, "CHitBox", "m_vMaxBounds", false, value);
}

float GCHitBox::GetShapeRadius() const {
    return GetSchemaValue<float>(m_ptr, "CHitBox", "m_flShapeRadius");
}

void GCHitBox::SetShapeRadius(float value) {
    SetSchemaValue(m_ptr, "CHitBox", "m_flShapeRadius", false, value);
}

uint32_t GCHitBox::GetBoneNameHash() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CHitBox", "m_nBoneNameHash");
}

void GCHitBox::SetBoneNameHash(uint32_t value) {
    SetSchemaValue(m_ptr, "CHitBox", "m_nBoneNameHash", false, value);
}

int32_t GCHitBox::GetGroupId() const {
    return GetSchemaValue<int32_t>(m_ptr, "CHitBox", "m_nGroupId");
}

void GCHitBox::SetGroupId(int32_t value) {
    SetSchemaValue(m_ptr, "CHitBox", "m_nGroupId", false, value);
}

uint8_t GCHitBox::GetShapeType() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CHitBox", "m_nShapeType");
}

void GCHitBox::SetShapeType(uint8_t value) {
    SetSchemaValue(m_ptr, "CHitBox", "m_nShapeType", false, value);
}

bool GCHitBox::GetTranslationOnly() const {
    return GetSchemaValue<bool>(m_ptr, "CHitBox", "m_bTranslationOnly");
}

void GCHitBox::SetTranslationOnly(bool value) {
    SetSchemaValue(m_ptr, "CHitBox", "m_bTranslationOnly", false, value);
}

uint32_t GCHitBox::GetCRC() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CHitBox", "m_CRC");
}

void GCHitBox::SetCRC(uint32_t value) {
    SetSchemaValue(m_ptr, "CHitBox", "m_CRC", false, value);
}

Color GCHitBox::GetCRenderColor() const {
    return GetSchemaValue<Color>(m_ptr, "CHitBox", "m_cRenderColor");
}

void GCHitBox::SetCRenderColor(Color value) {
    SetSchemaValue(m_ptr, "CHitBox", "m_cRenderColor", false, value);
}

uint16_t GCHitBox::GetHitBoxIndex() const {
    return GetSchemaValue<uint16_t>(m_ptr, "CHitBox", "m_nHitBoxIndex");
}

void GCHitBox::SetHitBoxIndex(uint16_t value) {
    SetSchemaValue(m_ptr, "CHitBox", "m_nHitBoxIndex", false, value);
}

std::string GCHitBox::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCHitBox::IsValid() {
    return (m_ptr != nullptr);
}

GCTestDomainDerived_Cursor::GCTestDomainDerived_Cursor(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTestDomainDerived_Cursor::GCTestDomainDerived_Cursor(void *ptr) {
    m_ptr = ptr;
}

int32_t GCTestDomainDerived_Cursor::GetCursorValueA() const {
    return GetSchemaValue<int32_t>(m_ptr, "CTestDomainDerived_Cursor", "m_nCursorValueA");
}

void GCTestDomainDerived_Cursor::SetCursorValueA(int32_t value) {
    SetSchemaValue(m_ptr, "CTestDomainDerived_Cursor", "m_nCursorValueA", false, value);
}

int32_t GCTestDomainDerived_Cursor::GetCursorValueB() const {
    return GetSchemaValue<int32_t>(m_ptr, "CTestDomainDerived_Cursor", "m_nCursorValueB");
}

void GCTestDomainDerived_Cursor::SetCursorValueB(int32_t value) {
    SetSchemaValue(m_ptr, "CTestDomainDerived_Cursor", "m_nCursorValueB", false, value);
}

std::string GCTestDomainDerived_Cursor::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTestDomainDerived_Cursor::IsValid() {
    return (m_ptr != nullptr);
}

GCAudioMorphData::GCAudioMorphData(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAudioMorphData::GCAudioMorphData(void *ptr) {
    m_ptr = ptr;
}

std::vector<float32> GCAudioMorphData::GetTimes() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "CAudioMorphData", "m_times"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAudioMorphData::SetTimes(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "CAudioMorphData", "m_times", false, value);
}

std::vector<uint32> GCAudioMorphData::GetNameHashCodes() const {
    CUtlVector<uint32>* vec = GetSchemaValue<CUtlVector<uint32>*>(m_ptr, "CAudioMorphData", "m_nameHashCodes"); std::vector<uint32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAudioMorphData::SetNameHashCodes(std::vector<uint32> value) {
    SetSchemaValueCUtlVector<uint32>(m_ptr, "CAudioMorphData", "m_nameHashCodes", false, value);
}

std::vector<CUtlString> GCAudioMorphData::GetNameStrings() const {
    CUtlVector<CUtlString>* vec = GetSchemaValue<CUtlVector<CUtlString>*>(m_ptr, "CAudioMorphData", "m_nameStrings"); std::vector<CUtlString> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAudioMorphData::SetNameStrings(std::vector<CUtlString> value) {
    SetSchemaValueCUtlVector<CUtlString>(m_ptr, "CAudioMorphData", "m_nameStrings", false, value);
}

float GCAudioMorphData::GetEaseIn() const {
    return GetSchemaValue<float>(m_ptr, "CAudioMorphData", "m_flEaseIn");
}

void GCAudioMorphData::SetEaseIn(float value) {
    SetSchemaValue(m_ptr, "CAudioMorphData", "m_flEaseIn", false, value);
}

float GCAudioMorphData::GetEaseOut() const {
    return GetSchemaValue<float>(m_ptr, "CAudioMorphData", "m_flEaseOut");
}

void GCAudioMorphData::SetEaseOut(float value) {
    SetSchemaValue(m_ptr, "CAudioMorphData", "m_flEaseOut", false, value);
}

std::string GCAudioMorphData::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAudioMorphData::IsValid() {
    return (m_ptr != nullptr);
}

GCSeqIKLock::GCSeqIKLock(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSeqIKLock::GCSeqIKLock(void *ptr) {
    m_ptr = ptr;
}

float GCSeqIKLock::GetPosWeight() const {
    return GetSchemaValue<float>(m_ptr, "CSeqIKLock", "m_flPosWeight");
}

void GCSeqIKLock::SetPosWeight(float value) {
    SetSchemaValue(m_ptr, "CSeqIKLock", "m_flPosWeight", false, value);
}

float GCSeqIKLock::GetAngleWeight() const {
    return GetSchemaValue<float>(m_ptr, "CSeqIKLock", "m_flAngleWeight");
}

void GCSeqIKLock::SetAngleWeight(float value) {
    SetSchemaValue(m_ptr, "CSeqIKLock", "m_flAngleWeight", false, value);
}

int16_t GCSeqIKLock::GetLocalBone() const {
    return GetSchemaValue<int16_t>(m_ptr, "CSeqIKLock", "m_nLocalBone");
}

void GCSeqIKLock::SetLocalBone(int16_t value) {
    SetSchemaValue(m_ptr, "CSeqIKLock", "m_nLocalBone", false, value);
}

bool GCSeqIKLock::GetBonesOrientedAlongPositiveX() const {
    return GetSchemaValue<bool>(m_ptr, "CSeqIKLock", "m_bBonesOrientedAlongPositiveX");
}

void GCSeqIKLock::SetBonesOrientedAlongPositiveX(bool value) {
    SetSchemaValue(m_ptr, "CSeqIKLock", "m_bBonesOrientedAlongPositiveX", false, value);
}

std::string GCSeqIKLock::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSeqIKLock::IsValid() {
    return (m_ptr != nullptr);
}

GFeQuad_t::GFeQuad_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeQuad_t::GFeQuad_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<uint16_t> GFeQuad_t::GetNode() const {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeQuad_t", "nNode"); std::vector<uint16_t> ret; for(int i = 0; i < 4; i++) { ret.push_back(outValue[i]); } return ret;
}

void GFeQuad_t::SetNode(std::vector<uint16_t> value) {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeQuad_t", "nNode"); for(int i = 0; i < 4; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "FeQuad_t", "nNode", true, outValue);
}

float GFeQuad_t::GetSlack() const {
    return GetSchemaValue<float>(m_ptr, "FeQuad_t", "flSlack");
}

void GFeQuad_t::SetSlack(float value) {
    SetSchemaValue(m_ptr, "FeQuad_t", "flSlack", true, value);
}

std::vector<Vector4D> GFeQuad_t::GetShape() const {
    Vector4D* outValue = GetSchemaValue<Vector4D*>(m_ptr, "FeQuad_t", "vShape"); std::vector<Vector4D> ret; for(int i = 0; i < 4; i++) { ret.push_back(outValue[i]); } return ret;
}

void GFeQuad_t::SetShape(std::vector<Vector4D> value) {
    Vector4D* outValue = GetSchemaValue<Vector4D*>(m_ptr, "FeQuad_t", "vShape"); for(int i = 0; i < 4; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "FeQuad_t", "vShape", true, outValue);
}

std::string GFeQuad_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeQuad_t::IsValid() {
    return (m_ptr != nullptr);
}

GCSosGroupMatchPattern::GCSosGroupMatchPattern(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSosGroupMatchPattern::GCSosGroupMatchPattern(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCSosGroupMatchPattern::GetMatchSoundEventName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CSosGroupMatchPattern", "m_matchSoundEventName");
}

void GCSosGroupMatchPattern::SetMatchSoundEventName(CUtlString value) {
    SetSchemaValue(m_ptr, "CSosGroupMatchPattern", "m_matchSoundEventName", false, value);
}

CUtlString GCSosGroupMatchPattern::GetMatchSoundEventSubString() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CSosGroupMatchPattern", "m_matchSoundEventSubString");
}

void GCSosGroupMatchPattern::SetMatchSoundEventSubString(CUtlString value) {
    SetSchemaValue(m_ptr, "CSosGroupMatchPattern", "m_matchSoundEventSubString", false, value);
}

float GCSosGroupMatchPattern::GetEntIndex() const {
    return GetSchemaValue<float>(m_ptr, "CSosGroupMatchPattern", "m_flEntIndex");
}

void GCSosGroupMatchPattern::SetEntIndex(float value) {
    SetSchemaValue(m_ptr, "CSosGroupMatchPattern", "m_flEntIndex", false, value);
}

float GCSosGroupMatchPattern::GetOpvar() const {
    return GetSchemaValue<float>(m_ptr, "CSosGroupMatchPattern", "m_flOpvar");
}

void GCSosGroupMatchPattern::SetOpvar(float value) {
    SetSchemaValue(m_ptr, "CSosGroupMatchPattern", "m_flOpvar", false, value);
}

CUtlString GCSosGroupMatchPattern::GetOpvarString() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CSosGroupMatchPattern", "m_opvarString");
}

void GCSosGroupMatchPattern::SetOpvarString(CUtlString value) {
    SetSchemaValue(m_ptr, "CSosGroupMatchPattern", "m_opvarString", false, value);
}

std::string GCSosGroupMatchPattern::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSosGroupMatchPattern::IsValid() {
    return (m_ptr != nullptr);
}

GCSSDSEndFrameViewInfo::GCSSDSEndFrameViewInfo(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSSDSEndFrameViewInfo::GCSSDSEndFrameViewInfo(void *ptr) {
    m_ptr = ptr;
}

uint64_t GCSSDSEndFrameViewInfo::GetViewId() const {
    return GetSchemaValue<uint64_t>(m_ptr, "CSSDSEndFrameViewInfo", "m_nViewId");
}

void GCSSDSEndFrameViewInfo::SetViewId(uint64_t value) {
    SetSchemaValue(m_ptr, "CSSDSEndFrameViewInfo", "m_nViewId", false, value);
}

CUtlString GCSSDSEndFrameViewInfo::GetViewName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CSSDSEndFrameViewInfo", "m_ViewName");
}

void GCSSDSEndFrameViewInfo::SetViewName(CUtlString value) {
    SetSchemaValue(m_ptr, "CSSDSEndFrameViewInfo", "m_ViewName", false, value);
}

std::string GCSSDSEndFrameViewInfo::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSSDSEndFrameViewInfo::IsValid() {
    return (m_ptr != nullptr);
}

GCNmExternalGraphNode::GCNmExternalGraphNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmExternalGraphNode::GCNmExternalGraphNode(void *ptr) {
    m_ptr = ptr;
}

std::string GCNmExternalGraphNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmExternalGraphNode::IsValid() {
    return (m_ptr != nullptr);
}

GCMoverUpdateNode::GCMoverUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMoverUpdateNode::GCMoverUpdateNode(void *ptr) {
    m_ptr = ptr;
}

GCAnimInputDamping GCMoverUpdateNode::GetDamping() const {
    return GetSchemaValue<GCAnimInputDamping>(m_ptr, "CMoverUpdateNode", "m_damping");
}

void GCMoverUpdateNode::SetDamping(GCAnimInputDamping value) {
    SetSchemaValue(m_ptr, "CMoverUpdateNode", "m_damping", false, value);
}

AnimValueSource GCMoverUpdateNode::GetFacingTarget() const {
    return GetSchemaValue<AnimValueSource>(m_ptr, "CMoverUpdateNode", "m_facingTarget");
}

void GCMoverUpdateNode::SetFacingTarget(AnimValueSource value) {
    SetSchemaValue(m_ptr, "CMoverUpdateNode", "m_facingTarget", false, value);
}

GCAnimParamHandle GCMoverUpdateNode::GetMoveVecParam() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CMoverUpdateNode", "m_hMoveVecParam");
}

void GCMoverUpdateNode::SetMoveVecParam(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CMoverUpdateNode", "m_hMoveVecParam", false, value);
}

GCAnimParamHandle GCMoverUpdateNode::GetMoveHeadingParam() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CMoverUpdateNode", "m_hMoveHeadingParam");
}

void GCMoverUpdateNode::SetMoveHeadingParam(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CMoverUpdateNode", "m_hMoveHeadingParam", false, value);
}

GCAnimParamHandle GCMoverUpdateNode::GetTurnToFaceParam() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CMoverUpdateNode", "m_hTurnToFaceParam");
}

void GCMoverUpdateNode::SetTurnToFaceParam(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CMoverUpdateNode", "m_hTurnToFaceParam", false, value);
}

float GCMoverUpdateNode::GetTurnToFaceOffset() const {
    return GetSchemaValue<float>(m_ptr, "CMoverUpdateNode", "m_flTurnToFaceOffset");
}

void GCMoverUpdateNode::SetTurnToFaceOffset(float value) {
    SetSchemaValue(m_ptr, "CMoverUpdateNode", "m_flTurnToFaceOffset", false, value);
}

float GCMoverUpdateNode::GetTurnToFaceLimit() const {
    return GetSchemaValue<float>(m_ptr, "CMoverUpdateNode", "m_flTurnToFaceLimit");
}

void GCMoverUpdateNode::SetTurnToFaceLimit(float value) {
    SetSchemaValue(m_ptr, "CMoverUpdateNode", "m_flTurnToFaceLimit", false, value);
}

bool GCMoverUpdateNode::GetAdditive() const {
    return GetSchemaValue<bool>(m_ptr, "CMoverUpdateNode", "m_bAdditive");
}

void GCMoverUpdateNode::SetAdditive(bool value) {
    SetSchemaValue(m_ptr, "CMoverUpdateNode", "m_bAdditive", false, value);
}

bool GCMoverUpdateNode::GetApplyMovement() const {
    return GetSchemaValue<bool>(m_ptr, "CMoverUpdateNode", "m_bApplyMovement");
}

void GCMoverUpdateNode::SetApplyMovement(bool value) {
    SetSchemaValue(m_ptr, "CMoverUpdateNode", "m_bApplyMovement", false, value);
}

bool GCMoverUpdateNode::GetOrientMovement() const {
    return GetSchemaValue<bool>(m_ptr, "CMoverUpdateNode", "m_bOrientMovement");
}

void GCMoverUpdateNode::SetOrientMovement(bool value) {
    SetSchemaValue(m_ptr, "CMoverUpdateNode", "m_bOrientMovement", false, value);
}

bool GCMoverUpdateNode::GetApplyRotation() const {
    return GetSchemaValue<bool>(m_ptr, "CMoverUpdateNode", "m_bApplyRotation");
}

void GCMoverUpdateNode::SetApplyRotation(bool value) {
    SetSchemaValue(m_ptr, "CMoverUpdateNode", "m_bApplyRotation", false, value);
}

bool GCMoverUpdateNode::GetLimitOnly() const {
    return GetSchemaValue<bool>(m_ptr, "CMoverUpdateNode", "m_bLimitOnly");
}

void GCMoverUpdateNode::SetLimitOnly(bool value) {
    SetSchemaValue(m_ptr, "CMoverUpdateNode", "m_bLimitOnly", false, value);
}

std::string GCMoverUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMoverUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GRnHull_t::GRnHull_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GRnHull_t::GRnHull_t(void *ptr) {
    m_ptr = ptr;
}

Vector GRnHull_t::GetCentroid() const {
    return GetSchemaValue<Vector>(m_ptr, "RnHull_t", "m_vCentroid");
}

void GRnHull_t::SetCentroid(Vector value) {
    SetSchemaValue(m_ptr, "RnHull_t", "m_vCentroid", true, value);
}

float GRnHull_t::GetMaxAngularRadius() const {
    return GetSchemaValue<float>(m_ptr, "RnHull_t", "m_flMaxAngularRadius");
}

void GRnHull_t::SetMaxAngularRadius(float value) {
    SetSchemaValue(m_ptr, "RnHull_t", "m_flMaxAngularRadius", true, value);
}

GAABB_t GRnHull_t::GetBounds() const {
    return GetSchemaValue<GAABB_t>(m_ptr, "RnHull_t", "m_Bounds");
}

void GRnHull_t::SetBounds(GAABB_t value) {
    SetSchemaValue(m_ptr, "RnHull_t", "m_Bounds", true, value);
}

Vector GRnHull_t::GetOrthographicAreas() const {
    return GetSchemaValue<Vector>(m_ptr, "RnHull_t", "m_vOrthographicAreas");
}

void GRnHull_t::SetOrthographicAreas(Vector value) {
    SetSchemaValue(m_ptr, "RnHull_t", "m_vOrthographicAreas", true, value);
}

matrix3x4_t GRnHull_t::GetMassProperties() const {
    return GetSchemaValue<matrix3x4_t>(m_ptr, "RnHull_t", "m_MassProperties");
}

void GRnHull_t::SetMassProperties(matrix3x4_t value) {
    SetSchemaValue(m_ptr, "RnHull_t", "m_MassProperties", true, value);
}

float GRnHull_t::GetVolume() const {
    return GetSchemaValue<float>(m_ptr, "RnHull_t", "m_flVolume");
}

void GRnHull_t::SetVolume(float value) {
    SetSchemaValue(m_ptr, "RnHull_t", "m_flVolume", true, value);
}

float GRnHull_t::GetSurfaceArea() const {
    return GetSchemaValue<float>(m_ptr, "RnHull_t", "m_flSurfaceArea");
}

void GRnHull_t::SetSurfaceArea(float value) {
    SetSchemaValue(m_ptr, "RnHull_t", "m_flSurfaceArea", true, value);
}

std::vector<GRnVertex_t> GRnHull_t::GetVertices() const {
    CUtlVector<GRnVertex_t>* vec = GetSchemaValue<CUtlVector<GRnVertex_t>*>(m_ptr, "RnHull_t", "m_Vertices"); std::vector<GRnVertex_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GRnHull_t::SetVertices(std::vector<GRnVertex_t> value) {
    SetSchemaValueCUtlVector<GRnVertex_t>(m_ptr, "RnHull_t", "m_Vertices", true, value);
}

std::vector<Vector> GRnHull_t::GetVertexPositions() const {
    CUtlVector<Vector>* vec = GetSchemaValue<CUtlVector<Vector>*>(m_ptr, "RnHull_t", "m_VertexPositions"); std::vector<Vector> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GRnHull_t::SetVertexPositions(std::vector<Vector> value) {
    SetSchemaValueCUtlVector<Vector>(m_ptr, "RnHull_t", "m_VertexPositions", true, value);
}

std::vector<GRnHalfEdge_t> GRnHull_t::GetEdges() const {
    CUtlVector<GRnHalfEdge_t>* vec = GetSchemaValue<CUtlVector<GRnHalfEdge_t>*>(m_ptr, "RnHull_t", "m_Edges"); std::vector<GRnHalfEdge_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GRnHull_t::SetEdges(std::vector<GRnHalfEdge_t> value) {
    SetSchemaValueCUtlVector<GRnHalfEdge_t>(m_ptr, "RnHull_t", "m_Edges", true, value);
}

std::vector<GRnFace_t> GRnHull_t::GetFaces() const {
    CUtlVector<GRnFace_t>* vec = GetSchemaValue<CUtlVector<GRnFace_t>*>(m_ptr, "RnHull_t", "m_Faces"); std::vector<GRnFace_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GRnHull_t::SetFaces(std::vector<GRnFace_t> value) {
    SetSchemaValueCUtlVector<GRnFace_t>(m_ptr, "RnHull_t", "m_Faces", true, value);
}

std::vector<GRnPlane_t> GRnHull_t::GetFacePlanes() const {
    CUtlVector<GRnPlane_t>* vec = GetSchemaValue<CUtlVector<GRnPlane_t>*>(m_ptr, "RnHull_t", "m_FacePlanes"); std::vector<GRnPlane_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GRnHull_t::SetFacePlanes(std::vector<GRnPlane_t> value) {
    SetSchemaValueCUtlVector<GRnPlane_t>(m_ptr, "RnHull_t", "m_FacePlanes", true, value);
}

uint32_t GRnHull_t::GetFlags() const {
    return GetSchemaValue<uint32_t>(m_ptr, "RnHull_t", "m_nFlags");
}

void GRnHull_t::SetFlags(uint32_t value) {
    SetSchemaValue(m_ptr, "RnHull_t", "m_nFlags", true, value);
}

GCRegionSVM GRnHull_t::GetRegionSVM() const {
    GCRegionSVM value(GetSchemaValuePtr<void>(m_ptr, "RnHull_t", "m_pRegionSVM"));
    return value;
}

void GRnHull_t::SetRegionSVM(GCRegionSVM* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'RegionSVM' is not possible.\n");
}

std::string GRnHull_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GRnHull_t::IsValid() {
    return (m_ptr != nullptr);
}

GCMoodVData::GCMoodVData(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMoodVData::GCMoodVData(void *ptr) {
    m_ptr = ptr;
}

MoodType_t GCMoodVData::GetMoodType() const {
    return GetSchemaValue<MoodType_t>(m_ptr, "CMoodVData", "m_nMoodType");
}

void GCMoodVData::SetMoodType(MoodType_t value) {
    SetSchemaValue(m_ptr, "CMoodVData", "m_nMoodType", false, value);
}

std::string GCMoodVData::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMoodVData::IsValid() {
    return (m_ptr != nullptr);
}

GEventClientFrameSimulate_t::GEventClientFrameSimulate_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEventClientFrameSimulate_t::GEventClientFrameSimulate_t(void *ptr) {
    m_ptr = ptr;
}

GEngineLoopState_t GEventClientFrameSimulate_t::GetLoopState() const {
    return GetSchemaValue<GEngineLoopState_t>(m_ptr, "EventClientFrameSimulate_t", "m_LoopState");
}

void GEventClientFrameSimulate_t::SetLoopState(GEngineLoopState_t value) {
    SetSchemaValue(m_ptr, "EventClientFrameSimulate_t", "m_LoopState", true, value);
}

float GEventClientFrameSimulate_t::GetRealTime() const {
    return GetSchemaValue<float>(m_ptr, "EventClientFrameSimulate_t", "m_flRealTime");
}

void GEventClientFrameSimulate_t::SetRealTime(float value) {
    SetSchemaValue(m_ptr, "EventClientFrameSimulate_t", "m_flRealTime", true, value);
}

float GEventClientFrameSimulate_t::GetFrameTime() const {
    return GetSchemaValue<float>(m_ptr, "EventClientFrameSimulate_t", "m_flFrameTime");
}

void GEventClientFrameSimulate_t::SetFrameTime(float value) {
    SetSchemaValue(m_ptr, "EventClientFrameSimulate_t", "m_flFrameTime", true, value);
}

double GEventClientFrameSimulate_t::GetWhenScheduleSendTickPacket() const {
    return GetSchemaValue<double>(m_ptr, "EventClientFrameSimulate_t", "m_flWhenScheduleSendTickPacket");
}

void GEventClientFrameSimulate_t::SetWhenScheduleSendTickPacket(double value) {
    SetSchemaValue(m_ptr, "EventClientFrameSimulate_t", "m_flWhenScheduleSendTickPacket", true, value);
}

std::string GEventClientFrameSimulate_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEventClientFrameSimulate_t::IsValid() {
    return (m_ptr != nullptr);
}

GCRagdollComponentUpdater::GCRagdollComponentUpdater(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCRagdollComponentUpdater::GCRagdollComponentUpdater(void *ptr) {
    m_ptr = ptr;
}

std::vector<GCAnimNodePath> GCRagdollComponentUpdater::GetRagdollNodePaths() const {
    CUtlVector<GCAnimNodePath>* vec = GetSchemaValue<CUtlVector<GCAnimNodePath>*>(m_ptr, "CRagdollComponentUpdater", "m_ragdollNodePaths"); std::vector<GCAnimNodePath> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCRagdollComponentUpdater::SetRagdollNodePaths(std::vector<GCAnimNodePath> value) {
    SetSchemaValueCUtlVector<GCAnimNodePath>(m_ptr, "CRagdollComponentUpdater", "m_ragdollNodePaths", false, value);
}

std::vector<int32> GCRagdollComponentUpdater::GetBoneIndices() const {
    CUtlVector<int32>* vec = GetSchemaValue<CUtlVector<int32>*>(m_ptr, "CRagdollComponentUpdater", "m_boneIndices"); std::vector<int32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCRagdollComponentUpdater::SetBoneIndices(std::vector<int32> value) {
    SetSchemaValueCUtlVector<int32>(m_ptr, "CRagdollComponentUpdater", "m_boneIndices", false, value);
}

std::vector<CUtlString> GCRagdollComponentUpdater::GetBoneNames() const {
    CUtlVector<CUtlString>* vec = GetSchemaValue<CUtlVector<CUtlString>*>(m_ptr, "CRagdollComponentUpdater", "m_boneNames"); std::vector<CUtlString> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCRagdollComponentUpdater::SetBoneNames(std::vector<CUtlString> value) {
    SetSchemaValueCUtlVector<CUtlString>(m_ptr, "CRagdollComponentUpdater", "m_boneNames", false, value);
}

std::vector<GWeightList> GCRagdollComponentUpdater::GetWeightLists() const {
    CUtlVector<GWeightList>* vec = GetSchemaValue<CUtlVector<GWeightList>*>(m_ptr, "CRagdollComponentUpdater", "m_weightLists"); std::vector<GWeightList> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCRagdollComponentUpdater::SetWeightLists(std::vector<GWeightList> value) {
    SetSchemaValueCUtlVector<GWeightList>(m_ptr, "CRagdollComponentUpdater", "m_weightLists", false, value);
}

float GCRagdollComponentUpdater::GetSpringFrequencyMin() const {
    return GetSchemaValue<float>(m_ptr, "CRagdollComponentUpdater", "m_flSpringFrequencyMin");
}

void GCRagdollComponentUpdater::SetSpringFrequencyMin(float value) {
    SetSchemaValue(m_ptr, "CRagdollComponentUpdater", "m_flSpringFrequencyMin", false, value);
}

float GCRagdollComponentUpdater::GetSpringFrequencyMax() const {
    return GetSchemaValue<float>(m_ptr, "CRagdollComponentUpdater", "m_flSpringFrequencyMax");
}

void GCRagdollComponentUpdater::SetSpringFrequencyMax(float value) {
    SetSchemaValue(m_ptr, "CRagdollComponentUpdater", "m_flSpringFrequencyMax", false, value);
}

float GCRagdollComponentUpdater::GetMaxStretch() const {
    return GetSchemaValue<float>(m_ptr, "CRagdollComponentUpdater", "m_flMaxStretch");
}

void GCRagdollComponentUpdater::SetMaxStretch(float value) {
    SetSchemaValue(m_ptr, "CRagdollComponentUpdater", "m_flMaxStretch", false, value);
}

bool GCRagdollComponentUpdater::GetSolidCollisionAtZeroWeight() const {
    return GetSchemaValue<bool>(m_ptr, "CRagdollComponentUpdater", "m_bSolidCollisionAtZeroWeight");
}

void GCRagdollComponentUpdater::SetSolidCollisionAtZeroWeight(bool value) {
    SetSchemaValue(m_ptr, "CRagdollComponentUpdater", "m_bSolidCollisionAtZeroWeight", false, value);
}

std::string GCRagdollComponentUpdater::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCRagdollComponentUpdater::IsValid() {
    return (m_ptr != nullptr);
}

GCMotionNodeBlend1D::GCMotionNodeBlend1D(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMotionNodeBlend1D::GCMotionNodeBlend1D(void *ptr) {
    m_ptr = ptr;
}

std::vector<GMotionBlendItem> GCMotionNodeBlend1D::GetBlendItems() const {
    CUtlVector<GMotionBlendItem>* vec = GetSchemaValue<CUtlVector<GMotionBlendItem>*>(m_ptr, "CMotionNodeBlend1D", "m_blendItems"); std::vector<GMotionBlendItem> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCMotionNodeBlend1D::SetBlendItems(std::vector<GMotionBlendItem> value) {
    SetSchemaValueCUtlVector<GMotionBlendItem>(m_ptr, "CMotionNodeBlend1D", "m_blendItems", false, value);
}

int32_t GCMotionNodeBlend1D::GetParamIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CMotionNodeBlend1D", "m_nParamIndex");
}

void GCMotionNodeBlend1D::SetParamIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CMotionNodeBlend1D", "m_nParamIndex", false, value);
}

std::string GCMotionNodeBlend1D::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMotionNodeBlend1D::IsValid() {
    return (m_ptr != nullptr);
}

GCNmControlParameterVectorNode::GCNmControlParameterVectorNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmControlParameterVectorNode::GCNmControlParameterVectorNode(void *ptr) {
    m_ptr = ptr;
}

std::string GCNmControlParameterVectorNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmControlParameterVectorNode::IsValid() {
    return (m_ptr != nullptr);
}

GCPathHelperUpdateNode::GCPathHelperUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCPathHelperUpdateNode::GCPathHelperUpdateNode(void *ptr) {
    m_ptr = ptr;
}

float GCPathHelperUpdateNode::GetStoppingRadius() const {
    return GetSchemaValue<float>(m_ptr, "CPathHelperUpdateNode", "m_flStoppingRadius");
}

void GCPathHelperUpdateNode::SetStoppingRadius(float value) {
    SetSchemaValue(m_ptr, "CPathHelperUpdateNode", "m_flStoppingRadius", false, value);
}

float GCPathHelperUpdateNode::GetStoppingSpeedScale() const {
    return GetSchemaValue<float>(m_ptr, "CPathHelperUpdateNode", "m_flStoppingSpeedScale");
}

void GCPathHelperUpdateNode::SetStoppingSpeedScale(float value) {
    SetSchemaValue(m_ptr, "CPathHelperUpdateNode", "m_flStoppingSpeedScale", false, value);
}

std::string GCPathHelperUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCPathHelperUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GCSeqPoseParamDesc::GCSeqPoseParamDesc(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSeqPoseParamDesc::GCSeqPoseParamDesc(void *ptr) {
    m_ptr = ptr;
}

CBufferString GCSeqPoseParamDesc::GetName() const {
    return GetSchemaValue<CBufferString>(m_ptr, "CSeqPoseParamDesc", "m_sName");
}

void GCSeqPoseParamDesc::SetName(CBufferString value) {
    SetSchemaValue(m_ptr, "CSeqPoseParamDesc", "m_sName", false, value);
}

float GCSeqPoseParamDesc::GetStart() const {
    return GetSchemaValue<float>(m_ptr, "CSeqPoseParamDesc", "m_flStart");
}

void GCSeqPoseParamDesc::SetStart(float value) {
    SetSchemaValue(m_ptr, "CSeqPoseParamDesc", "m_flStart", false, value);
}

float GCSeqPoseParamDesc::GetEnd() const {
    return GetSchemaValue<float>(m_ptr, "CSeqPoseParamDesc", "m_flEnd");
}

void GCSeqPoseParamDesc::SetEnd(float value) {
    SetSchemaValue(m_ptr, "CSeqPoseParamDesc", "m_flEnd", false, value);
}

float GCSeqPoseParamDesc::GetLoop() const {
    return GetSchemaValue<float>(m_ptr, "CSeqPoseParamDesc", "m_flLoop");
}

void GCSeqPoseParamDesc::SetLoop(float value) {
    SetSchemaValue(m_ptr, "CSeqPoseParamDesc", "m_flLoop", false, value);
}

bool GCSeqPoseParamDesc::GetLooping() const {
    return GetSchemaValue<bool>(m_ptr, "CSeqPoseParamDesc", "m_bLooping");
}

void GCSeqPoseParamDesc::SetLooping(bool value) {
    SetSchemaValue(m_ptr, "CSeqPoseParamDesc", "m_bLooping", false, value);
}

std::string GCSeqPoseParamDesc::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSeqPoseParamDesc::IsValid() {
    return (m_ptr != nullptr);
}

GVMixPitchShiftDesc_t::GVMixPitchShiftDesc_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVMixPitchShiftDesc_t::GVMixPitchShiftDesc_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GVMixPitchShiftDesc_t::GetGrainSampleCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "VMixPitchShiftDesc_t", "m_nGrainSampleCount");
}

void GVMixPitchShiftDesc_t::SetGrainSampleCount(int32_t value) {
    SetSchemaValue(m_ptr, "VMixPitchShiftDesc_t", "m_nGrainSampleCount", true, value);
}

float GVMixPitchShiftDesc_t::GetPitchShift() const {
    return GetSchemaValue<float>(m_ptr, "VMixPitchShiftDesc_t", "m_flPitchShift");
}

void GVMixPitchShiftDesc_t::SetPitchShift(float value) {
    SetSchemaValue(m_ptr, "VMixPitchShiftDesc_t", "m_flPitchShift", true, value);
}

int32_t GVMixPitchShiftDesc_t::GetQuality() const {
    return GetSchemaValue<int32_t>(m_ptr, "VMixPitchShiftDesc_t", "m_nQuality");
}

void GVMixPitchShiftDesc_t::SetQuality(int32_t value) {
    SetSchemaValue(m_ptr, "VMixPitchShiftDesc_t", "m_nQuality", true, value);
}

int32_t GVMixPitchShiftDesc_t::GetProcType() const {
    return GetSchemaValue<int32_t>(m_ptr, "VMixPitchShiftDesc_t", "m_nProcType");
}

void GVMixPitchShiftDesc_t::SetProcType(int32_t value) {
    SetSchemaValue(m_ptr, "VMixPitchShiftDesc_t", "m_nProcType", true, value);
}

std::string GVMixPitchShiftDesc_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVMixPitchShiftDesc_t::IsValid() {
    return (m_ptr != nullptr);
}

GCAudioSentence::GCAudioSentence(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAudioSentence::GCAudioSentence(void *ptr) {
    m_ptr = ptr;
}

bool GCAudioSentence::GetShouldVoiceDuck() const {
    return GetSchemaValue<bool>(m_ptr, "CAudioSentence", "m_bShouldVoiceDuck");
}

void GCAudioSentence::SetShouldVoiceDuck(bool value) {
    SetSchemaValue(m_ptr, "CAudioSentence", "m_bShouldVoiceDuck", false, value);
}

std::vector<GCAudioPhonemeTag> GCAudioSentence::GetRunTimePhonemes() const {
    CUtlVector<GCAudioPhonemeTag>* vec = GetSchemaValue<CUtlVector<GCAudioPhonemeTag>*>(m_ptr, "CAudioSentence", "m_RunTimePhonemes"); std::vector<GCAudioPhonemeTag> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAudioSentence::SetRunTimePhonemes(std::vector<GCAudioPhonemeTag> value) {
    SetSchemaValueCUtlVector<GCAudioPhonemeTag>(m_ptr, "CAudioSentence", "m_RunTimePhonemes", false, value);
}

std::vector<GCAudioEmphasisSample> GCAudioSentence::GetEmphasisSamples() const {
    CUtlVector<GCAudioEmphasisSample>* vec = GetSchemaValue<CUtlVector<GCAudioEmphasisSample>*>(m_ptr, "CAudioSentence", "m_EmphasisSamples"); std::vector<GCAudioEmphasisSample> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAudioSentence::SetEmphasisSamples(std::vector<GCAudioEmphasisSample> value) {
    SetSchemaValueCUtlVector<GCAudioEmphasisSample>(m_ptr, "CAudioSentence", "m_EmphasisSamples", false, value);
}

GCAudioMorphData GCAudioSentence::GetMorphData() const {
    return GetSchemaValue<GCAudioMorphData>(m_ptr, "CAudioSentence", "m_morphData");
}

void GCAudioSentence::SetMorphData(GCAudioMorphData value) {
    SetSchemaValue(m_ptr, "CAudioSentence", "m_morphData", false, value);
}

std::string GCAudioSentence::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAudioSentence::IsValid() {
    return (m_ptr != nullptr);
}

GCRenderBufferBinding::GCRenderBufferBinding(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCRenderBufferBinding::GCRenderBufferBinding(void *ptr) {
    m_ptr = ptr;
}

uint64_t GCRenderBufferBinding::GetBuffer() const {
    return GetSchemaValue<uint64_t>(m_ptr, "CRenderBufferBinding", "m_hBuffer");
}

void GCRenderBufferBinding::SetBuffer(uint64_t value) {
    SetSchemaValue(m_ptr, "CRenderBufferBinding", "m_hBuffer", false, value);
}

uint32_t GCRenderBufferBinding::GetBindOffsetBytes() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CRenderBufferBinding", "m_nBindOffsetBytes");
}

void GCRenderBufferBinding::SetBindOffsetBytes(uint32_t value) {
    SetSchemaValue(m_ptr, "CRenderBufferBinding", "m_nBindOffsetBytes", false, value);
}

std::string GCRenderBufferBinding::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCRenderBufferBinding::IsValid() {
    return (m_ptr != nullptr);
}

GCParticleAnimTag::GCParticleAnimTag(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCParticleAnimTag::GCParticleAnimTag(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCParticleAnimTag::GetParticleSystemName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CParticleAnimTag", "m_particleSystemName");
}

void GCParticleAnimTag::SetParticleSystemName(CUtlString value) {
    SetSchemaValue(m_ptr, "CParticleAnimTag", "m_particleSystemName", false, value);
}

CUtlString GCParticleAnimTag::GetConfigName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CParticleAnimTag", "m_configName");
}

void GCParticleAnimTag::SetConfigName(CUtlString value) {
    SetSchemaValue(m_ptr, "CParticleAnimTag", "m_configName", false, value);
}

bool GCParticleAnimTag::GetDetachFromOwner() const {
    return GetSchemaValue<bool>(m_ptr, "CParticleAnimTag", "m_bDetachFromOwner");
}

void GCParticleAnimTag::SetDetachFromOwner(bool value) {
    SetSchemaValue(m_ptr, "CParticleAnimTag", "m_bDetachFromOwner", false, value);
}

bool GCParticleAnimTag::GetStopWhenTagEnds() const {
    return GetSchemaValue<bool>(m_ptr, "CParticleAnimTag", "m_bStopWhenTagEnds");
}

void GCParticleAnimTag::SetStopWhenTagEnds(bool value) {
    SetSchemaValue(m_ptr, "CParticleAnimTag", "m_bStopWhenTagEnds", false, value);
}

bool GCParticleAnimTag::GetTagEndStopIsInstant() const {
    return GetSchemaValue<bool>(m_ptr, "CParticleAnimTag", "m_bTagEndStopIsInstant");
}

void GCParticleAnimTag::SetTagEndStopIsInstant(bool value) {
    SetSchemaValue(m_ptr, "CParticleAnimTag", "m_bTagEndStopIsInstant", false, value);
}

CUtlString GCParticleAnimTag::GetAttachmentName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CParticleAnimTag", "m_attachmentName");
}

void GCParticleAnimTag::SetAttachmentName(CUtlString value) {
    SetSchemaValue(m_ptr, "CParticleAnimTag", "m_attachmentName", false, value);
}

ParticleAttachment_t GCParticleAnimTag::GetAttachmentType() const {
    return GetSchemaValue<ParticleAttachment_t>(m_ptr, "CParticleAnimTag", "m_attachmentType");
}

void GCParticleAnimTag::SetAttachmentType(ParticleAttachment_t value) {
    SetSchemaValue(m_ptr, "CParticleAnimTag", "m_attachmentType", false, value);
}

CUtlString GCParticleAnimTag::GetAttachmentCP1Name() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CParticleAnimTag", "m_attachmentCP1Name");
}

void GCParticleAnimTag::SetAttachmentCP1Name(CUtlString value) {
    SetSchemaValue(m_ptr, "CParticleAnimTag", "m_attachmentCP1Name", false, value);
}

ParticleAttachment_t GCParticleAnimTag::GetAttachmentCP1Type() const {
    return GetSchemaValue<ParticleAttachment_t>(m_ptr, "CParticleAnimTag", "m_attachmentCP1Type");
}

void GCParticleAnimTag::SetAttachmentCP1Type(ParticleAttachment_t value) {
    SetSchemaValue(m_ptr, "CParticleAnimTag", "m_attachmentCP1Type", false, value);
}

std::string GCParticleAnimTag::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCParticleAnimTag::IsValid() {
    return (m_ptr != nullptr);
}

GCStaticPoseCacheBuilder::GCStaticPoseCacheBuilder(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCStaticPoseCacheBuilder::GCStaticPoseCacheBuilder(void *ptr) {
    m_ptr = ptr;
}

std::string GCStaticPoseCacheBuilder::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCStaticPoseCacheBuilder::IsValid() {
    return (m_ptr != nullptr);
}

GCNmRootMotionData::GCNmRootMotionData(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmRootMotionData::GCNmRootMotionData(void *ptr) {
    m_ptr = ptr;
}

int32_t GCNmRootMotionData::GetNumFrames() const {
    return GetSchemaValue<int32_t>(m_ptr, "CNmRootMotionData", "m_nNumFrames");
}

void GCNmRootMotionData::SetNumFrames(int32_t value) {
    SetSchemaValue(m_ptr, "CNmRootMotionData", "m_nNumFrames", false, value);
}

float GCNmRootMotionData::GetAverageLinearVelocity() const {
    return GetSchemaValue<float>(m_ptr, "CNmRootMotionData", "m_flAverageLinearVelocity");
}

void GCNmRootMotionData::SetAverageLinearVelocity(float value) {
    SetSchemaValue(m_ptr, "CNmRootMotionData", "m_flAverageLinearVelocity", false, value);
}

float GCNmRootMotionData::GetAverageAngularVelocityRadians() const {
    return GetSchemaValue<float>(m_ptr, "CNmRootMotionData", "m_flAverageAngularVelocityRadians");
}

void GCNmRootMotionData::SetAverageAngularVelocityRadians(float value) {
    SetSchemaValue(m_ptr, "CNmRootMotionData", "m_flAverageAngularVelocityRadians", false, value);
}

std::string GCNmRootMotionData::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmRootMotionData::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimReplayFrame::GCAnimReplayFrame(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimReplayFrame::GCAnimReplayFrame(void *ptr) {
    m_ptr = ptr;
}

float GCAnimReplayFrame::GetTimeStamp() const {
    return GetSchemaValue<float>(m_ptr, "CAnimReplayFrame", "m_timeStamp");
}

void GCAnimReplayFrame::SetTimeStamp(float value) {
    SetSchemaValue(m_ptr, "CAnimReplayFrame", "m_timeStamp", false, value);
}

std::string GCAnimReplayFrame::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimReplayFrame::IsValid() {
    return (m_ptr != nullptr);
}

GCNmVirtualParameterBoneMaskNode::GCNmVirtualParameterBoneMaskNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmVirtualParameterBoneMaskNode::GCNmVirtualParameterBoneMaskNode(void *ptr) {
    m_ptr = ptr;
}

int16_t GCNmVirtualParameterBoneMaskNode::GetChildNodeIdx() const {
    return GetSchemaValue<int16_t>(m_ptr, "CNmVirtualParameterBoneMaskNode", "m_nChildNodeIdx");
}

void GCNmVirtualParameterBoneMaskNode::SetChildNodeIdx(int16_t value) {
    SetSchemaValue(m_ptr, "CNmVirtualParameterBoneMaskNode", "m_nChildNodeIdx", false, value);
}

std::string GCNmVirtualParameterBoneMaskNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmVirtualParameterBoneMaskNode::IsValid() {
    return (m_ptr != nullptr);
}

GCBlockSelectionMetricEvaluator::GCBlockSelectionMetricEvaluator(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBlockSelectionMetricEvaluator::GCBlockSelectionMetricEvaluator(void *ptr) {
    m_ptr = ptr;
}

std::string GCBlockSelectionMetricEvaluator::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBlockSelectionMetricEvaluator::IsValid() {
    return (m_ptr != nullptr);
}

GCMotionGraph::GCMotionGraph(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMotionGraph::GCMotionGraph(void *ptr) {
    m_ptr = ptr;
}

GCParamSpanUpdater GCMotionGraph::GetParamSpans() const {
    return GetSchemaValue<GCParamSpanUpdater>(m_ptr, "CMotionGraph", "m_paramSpans");
}

void GCMotionGraph::SetParamSpans(GCParamSpanUpdater value) {
    SetSchemaValue(m_ptr, "CMotionGraph", "m_paramSpans", false, value);
}

std::vector<GTagSpan_t> GCMotionGraph::GetTags() const {
    CUtlVector<GTagSpan_t>* vec = GetSchemaValue<CUtlVector<GTagSpan_t>*>(m_ptr, "CMotionGraph", "m_tags"); std::vector<GTagSpan_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCMotionGraph::SetTags(std::vector<GTagSpan_t> value) {
    SetSchemaValueCUtlVector<GTagSpan_t>(m_ptr, "CMotionGraph", "m_tags", false, value);
}

int32_t GCMotionGraph::GetParameterCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CMotionGraph", "m_nParameterCount");
}

void GCMotionGraph::SetParameterCount(int32_t value) {
    SetSchemaValue(m_ptr, "CMotionGraph", "m_nParameterCount", false, value);
}

int32_t GCMotionGraph::GetConfigStartIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CMotionGraph", "m_nConfigStartIndex");
}

void GCMotionGraph::SetConfigStartIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CMotionGraph", "m_nConfigStartIndex", false, value);
}

int32_t GCMotionGraph::GetConfigCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CMotionGraph", "m_nConfigCount");
}

void GCMotionGraph::SetConfigCount(int32_t value) {
    SetSchemaValue(m_ptr, "CMotionGraph", "m_nConfigCount", false, value);
}

bool GCMotionGraph::GetLoop() const {
    return GetSchemaValue<bool>(m_ptr, "CMotionGraph", "m_bLoop");
}

void GCMotionGraph::SetLoop(bool value) {
    SetSchemaValue(m_ptr, "CMotionGraph", "m_bLoop", false, value);
}

std::string GCMotionGraph::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMotionGraph::IsValid() {
    return (m_ptr != nullptr);
}

GCSosSoundEventGroupSchema::GCSosSoundEventGroupSchema(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSosSoundEventGroupSchema::GCSosSoundEventGroupSchema(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCSosSoundEventGroupSchema::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CSosSoundEventGroupSchema", "m_name");
}

void GCSosSoundEventGroupSchema::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "CSosSoundEventGroupSchema", "m_name", false, value);
}

SosGroupType_t GCSosSoundEventGroupSchema::GetType() const {
    return GetSchemaValue<SosGroupType_t>(m_ptr, "CSosSoundEventGroupSchema", "m_nType");
}

void GCSosSoundEventGroupSchema::SetType(SosGroupType_t value) {
    SetSchemaValue(m_ptr, "CSosSoundEventGroupSchema", "m_nType", false, value);
}

bool GCSosSoundEventGroupSchema::GetIsBlocking() const {
    return GetSchemaValue<bool>(m_ptr, "CSosSoundEventGroupSchema", "m_bIsBlocking");
}

void GCSosSoundEventGroupSchema::SetIsBlocking(bool value) {
    SetSchemaValue(m_ptr, "CSosSoundEventGroupSchema", "m_bIsBlocking", false, value);
}

int32_t GCSosSoundEventGroupSchema::GetBlockMaxCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSosSoundEventGroupSchema", "m_nBlockMaxCount");
}

void GCSosSoundEventGroupSchema::SetBlockMaxCount(int32_t value) {
    SetSchemaValue(m_ptr, "CSosSoundEventGroupSchema", "m_nBlockMaxCount", false, value);
}

bool GCSosSoundEventGroupSchema::GetInvertMatch() const {
    return GetSchemaValue<bool>(m_ptr, "CSosSoundEventGroupSchema", "m_bInvertMatch");
}

void GCSosSoundEventGroupSchema::SetInvertMatch(bool value) {
    SetSchemaValue(m_ptr, "CSosSoundEventGroupSchema", "m_bInvertMatch", false, value);
}

GCSosGroupMatchPattern GCSosSoundEventGroupSchema::GetMatchPattern() const {
    return GetSchemaValue<GCSosGroupMatchPattern>(m_ptr, "CSosSoundEventGroupSchema", "m_matchPattern");
}

void GCSosSoundEventGroupSchema::SetMatchPattern(GCSosGroupMatchPattern value) {
    SetSchemaValue(m_ptr, "CSosSoundEventGroupSchema", "m_matchPattern", false, value);
}

GCSosGroupBranchPattern GCSosSoundEventGroupSchema::GetBranchPattern() const {
    return GetSchemaValue<GCSosGroupBranchPattern>(m_ptr, "CSosSoundEventGroupSchema", "m_branchPattern");
}

void GCSosSoundEventGroupSchema::SetBranchPattern(GCSosGroupBranchPattern value) {
    SetSchemaValue(m_ptr, "CSosSoundEventGroupSchema", "m_branchPattern", false, value);
}

float GCSosSoundEventGroupSchema::GetLifeSpanTime() const {
    return GetSchemaValue<float>(m_ptr, "CSosSoundEventGroupSchema", "m_flLifeSpanTime");
}

void GCSosSoundEventGroupSchema::SetLifeSpanTime(float value) {
    SetSchemaValue(m_ptr, "CSosSoundEventGroupSchema", "m_flLifeSpanTime", false, value);
}

std::vector<GCSosGroupActionSchema*> GCSosSoundEventGroupSchema::GetActions() const {
    GCSosGroupActionSchema** outValue = GetSchemaValue<GCSosGroupActionSchema**>(m_ptr, "CSosSoundEventGroupSchema", "m_vActions"); std::vector<GCSosGroupActionSchema*> ret; for(int i = 0; i < 4; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCSosSoundEventGroupSchema::SetActions(std::vector<GCSosGroupActionSchema*> value) {
    GCSosGroupActionSchema** outValue = GetSchemaValue<GCSosGroupActionSchema**>(m_ptr, "CSosSoundEventGroupSchema", "m_vActions"); for(int i = 0; i < 4; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CSosSoundEventGroupSchema", "m_vActions", false, outValue);
}

std::string GCSosSoundEventGroupSchema::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSosSoundEventGroupSchema::IsValid() {
    return (m_ptr != nullptr);
}

GCFootMotion::GCFootMotion(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFootMotion::GCFootMotion(void *ptr) {
    m_ptr = ptr;
}

std::vector<GCFootStride> GCFootMotion::GetStrides() const {
    CUtlVector<GCFootStride>* vec = GetSchemaValue<CUtlVector<GCFootStride>*>(m_ptr, "CFootMotion", "m_strides"); std::vector<GCFootStride> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCFootMotion::SetStrides(std::vector<GCFootStride> value) {
    SetSchemaValueCUtlVector<GCFootStride>(m_ptr, "CFootMotion", "m_strides", false, value);
}

CUtlString GCFootMotion::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CFootMotion", "m_name");
}

void GCFootMotion::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "CFootMotion", "m_name", false, value);
}

bool GCFootMotion::GetAdditive() const {
    return GetSchemaValue<bool>(m_ptr, "CFootMotion", "m_bAdditive");
}

void GCFootMotion::SetAdditive(bool value) {
    SetSchemaValue(m_ptr, "CFootMotion", "m_bAdditive", false, value);
}

std::string GCFootMotion::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFootMotion::IsValid() {
    return (m_ptr != nullptr);
}

GCDampedValueUpdateItem::GCDampedValueUpdateItem(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCDampedValueUpdateItem::GCDampedValueUpdateItem(void *ptr) {
    m_ptr = ptr;
}

GCAnimInputDamping GCDampedValueUpdateItem::GetDamping() const {
    return GetSchemaValue<GCAnimInputDamping>(m_ptr, "CDampedValueUpdateItem", "m_damping");
}

void GCDampedValueUpdateItem::SetDamping(GCAnimInputDamping value) {
    SetSchemaValue(m_ptr, "CDampedValueUpdateItem", "m_damping", false, value);
}

GCAnimParamHandle GCDampedValueUpdateItem::GetParamIn() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CDampedValueUpdateItem", "m_hParamIn");
}

void GCDampedValueUpdateItem::SetParamIn(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CDampedValueUpdateItem", "m_hParamIn", false, value);
}

GCAnimParamHandle GCDampedValueUpdateItem::GetParamOut() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CDampedValueUpdateItem", "m_hParamOut");
}

void GCDampedValueUpdateItem::SetParamOut(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CDampedValueUpdateItem", "m_hParamOut", false, value);
}

std::string GCDampedValueUpdateItem::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCDampedValueUpdateItem::IsValid() {
    return (m_ptr != nullptr);
}

GRnHalfEdge_t::GRnHalfEdge_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GRnHalfEdge_t::GRnHalfEdge_t(void *ptr) {
    m_ptr = ptr;
}

uint8_t GRnHalfEdge_t::GetNext() const {
    return GetSchemaValue<uint8_t>(m_ptr, "RnHalfEdge_t", "m_nNext");
}

void GRnHalfEdge_t::SetNext(uint8_t value) {
    SetSchemaValue(m_ptr, "RnHalfEdge_t", "m_nNext", true, value);
}

uint8_t GRnHalfEdge_t::GetTwin() const {
    return GetSchemaValue<uint8_t>(m_ptr, "RnHalfEdge_t", "m_nTwin");
}

void GRnHalfEdge_t::SetTwin(uint8_t value) {
    SetSchemaValue(m_ptr, "RnHalfEdge_t", "m_nTwin", true, value);
}

uint8_t GRnHalfEdge_t::GetOrigin() const {
    return GetSchemaValue<uint8_t>(m_ptr, "RnHalfEdge_t", "m_nOrigin");
}

void GRnHalfEdge_t::SetOrigin(uint8_t value) {
    SetSchemaValue(m_ptr, "RnHalfEdge_t", "m_nOrigin", true, value);
}

uint8_t GRnHalfEdge_t::GetFace() const {
    return GetSchemaValue<uint8_t>(m_ptr, "RnHalfEdge_t", "m_nFace");
}

void GRnHalfEdge_t::SetFace(uint8_t value) {
    SetSchemaValue(m_ptr, "RnHalfEdge_t", "m_nFace", true, value);
}

std::string GRnHalfEdge_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GRnHalfEdge_t::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimDataChannelDesc::GCAnimDataChannelDesc(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimDataChannelDesc::GCAnimDataChannelDesc(void *ptr) {
    m_ptr = ptr;
}

CBufferString GCAnimDataChannelDesc::GetChannelClass() const {
    return GetSchemaValue<CBufferString>(m_ptr, "CAnimDataChannelDesc", "m_szChannelClass");
}

void GCAnimDataChannelDesc::SetChannelClass(CBufferString value) {
    SetSchemaValue(m_ptr, "CAnimDataChannelDesc", "m_szChannelClass", false, value);
}

CBufferString GCAnimDataChannelDesc::GetVariableName() const {
    return GetSchemaValue<CBufferString>(m_ptr, "CAnimDataChannelDesc", "m_szVariableName");
}

void GCAnimDataChannelDesc::SetVariableName(CBufferString value) {
    SetSchemaValue(m_ptr, "CAnimDataChannelDesc", "m_szVariableName", false, value);
}

int32_t GCAnimDataChannelDesc::GetFlags() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimDataChannelDesc", "m_nFlags");
}

void GCAnimDataChannelDesc::SetFlags(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimDataChannelDesc", "m_nFlags", false, value);
}

int32_t GCAnimDataChannelDesc::GetType() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimDataChannelDesc", "m_nType");
}

void GCAnimDataChannelDesc::SetType(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimDataChannelDesc", "m_nType", false, value);
}

CBufferString GCAnimDataChannelDesc::GetGrouping() const {
    return GetSchemaValue<CBufferString>(m_ptr, "CAnimDataChannelDesc", "m_szGrouping");
}

void GCAnimDataChannelDesc::SetGrouping(CBufferString value) {
    SetSchemaValue(m_ptr, "CAnimDataChannelDesc", "m_szGrouping", false, value);
}

CBufferString GCAnimDataChannelDesc::GetDescription() const {
    return GetSchemaValue<CBufferString>(m_ptr, "CAnimDataChannelDesc", "m_szDescription");
}

void GCAnimDataChannelDesc::SetDescription(CBufferString value) {
    SetSchemaValue(m_ptr, "CAnimDataChannelDesc", "m_szDescription", false, value);
}

std::vector<CBufferString> GCAnimDataChannelDesc::GetElementNameArray() const {
    CUtlVector<CBufferString>* vec = GetSchemaValue<CUtlVector<CBufferString>*>(m_ptr, "CAnimDataChannelDesc", "m_szElementNameArray"); std::vector<CBufferString> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimDataChannelDesc::SetElementNameArray(std::vector<CBufferString> value) {
    SetSchemaValueCUtlVector<CBufferString>(m_ptr, "CAnimDataChannelDesc", "m_szElementNameArray", false, value);
}

std::vector<int32> GCAnimDataChannelDesc::GetElementIndexArray() const {
    CUtlVector<int32>* vec = GetSchemaValue<CUtlVector<int32>*>(m_ptr, "CAnimDataChannelDesc", "m_nElementIndexArray"); std::vector<int32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimDataChannelDesc::SetElementIndexArray(std::vector<int32> value) {
    SetSchemaValueCUtlVector<int32>(m_ptr, "CAnimDataChannelDesc", "m_nElementIndexArray", false, value);
}

std::vector<uint32> GCAnimDataChannelDesc::GetElementMaskArray() const {
    CUtlVector<uint32>* vec = GetSchemaValue<CUtlVector<uint32>*>(m_ptr, "CAnimDataChannelDesc", "m_nElementMaskArray"); std::vector<uint32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimDataChannelDesc::SetElementMaskArray(std::vector<uint32> value) {
    SetSchemaValueCUtlVector<uint32>(m_ptr, "CAnimDataChannelDesc", "m_nElementMaskArray", false, value);
}

std::string GCAnimDataChannelDesc::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimDataChannelDesc::IsValid() {
    return (m_ptr != nullptr);
}

GEventClientProcessNetworking_t::GEventClientProcessNetworking_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEventClientProcessNetworking_t::GEventClientProcessNetworking_t(void *ptr) {
    m_ptr = ptr;
}

std::string GEventClientProcessNetworking_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEventClientProcessNetworking_t::IsValid() {
    return (m_ptr != nullptr);
}

GCModelConfigList::GCModelConfigList(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCModelConfigList::GCModelConfigList(void *ptr) {
    m_ptr = ptr;
}

bool GCModelConfigList::GetHideMaterialGroupInTools() const {
    return GetSchemaValue<bool>(m_ptr, "CModelConfigList", "m_bHideMaterialGroupInTools");
}

void GCModelConfigList::SetHideMaterialGroupInTools(bool value) {
    SetSchemaValue(m_ptr, "CModelConfigList", "m_bHideMaterialGroupInTools", false, value);
}

bool GCModelConfigList::GetHideRenderColorInTools() const {
    return GetSchemaValue<bool>(m_ptr, "CModelConfigList", "m_bHideRenderColorInTools");
}

void GCModelConfigList::SetHideRenderColorInTools(bool value) {
    SetSchemaValue(m_ptr, "CModelConfigList", "m_bHideRenderColorInTools", false, value);
}

std::vector<GCModelConfig*> GCModelConfigList::GetConfigs() const {
    CUtlVector<GCModelConfig*>* vec = GetSchemaValue<CUtlVector<GCModelConfig*>*>(m_ptr, "CModelConfigList", "m_Configs"); std::vector<GCModelConfig*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCModelConfigList::SetConfigs(std::vector<GCModelConfig*> value) {
    SetSchemaValueCUtlVector<GCModelConfig*>(m_ptr, "CModelConfigList", "m_Configs", false, value);
}

std::string GCModelConfigList::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCModelConfigList::IsValid() {
    return (m_ptr != nullptr);
}

GCNmGraphVariation::GCNmGraphVariation(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmGraphVariation::GCNmGraphVariation(void *ptr) {
    m_ptr = ptr;
}

std::string GCNmGraphVariation::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmGraphVariation::IsValid() {
    return (m_ptr != nullptr);
}

GCSosGroupActionTimeBlockLimitSchema::GCSosGroupActionTimeBlockLimitSchema(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSosGroupActionTimeBlockLimitSchema::GCSosGroupActionTimeBlockLimitSchema(void *ptr) {
    m_ptr = ptr;
}

int32_t GCSosGroupActionTimeBlockLimitSchema::GetMaxCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSosGroupActionTimeBlockLimitSchema", "m_nMaxCount");
}

void GCSosGroupActionTimeBlockLimitSchema::SetMaxCount(int32_t value) {
    SetSchemaValue(m_ptr, "CSosGroupActionTimeBlockLimitSchema", "m_nMaxCount", false, value);
}

float GCSosGroupActionTimeBlockLimitSchema::GetMaxDuration() const {
    return GetSchemaValue<float>(m_ptr, "CSosGroupActionTimeBlockLimitSchema", "m_flMaxDuration");
}

void GCSosGroupActionTimeBlockLimitSchema::SetMaxDuration(float value) {
    SetSchemaValue(m_ptr, "CSosGroupActionTimeBlockLimitSchema", "m_flMaxDuration", false, value);
}

std::string GCSosGroupActionTimeBlockLimitSchema::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSosGroupActionTimeBlockLimitSchema::IsValid() {
    return (m_ptr != nullptr);
}

GVMixDynamics3BandDesc_t::GVMixDynamics3BandDesc_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVMixDynamics3BandDesc_t::GVMixDynamics3BandDesc_t(void *ptr) {
    m_ptr = ptr;
}

float GVMixDynamics3BandDesc_t::GetFldbGainOutput() const {
    return GetSchemaValue<float>(m_ptr, "VMixDynamics3BandDesc_t", "m_fldbGainOutput");
}

void GVMixDynamics3BandDesc_t::SetFldbGainOutput(float value) {
    SetSchemaValue(m_ptr, "VMixDynamics3BandDesc_t", "m_fldbGainOutput", true, value);
}

float GVMixDynamics3BandDesc_t::GetRMSTimeMS() const {
    return GetSchemaValue<float>(m_ptr, "VMixDynamics3BandDesc_t", "m_flRMSTimeMS");
}

void GVMixDynamics3BandDesc_t::SetRMSTimeMS(float value) {
    SetSchemaValue(m_ptr, "VMixDynamics3BandDesc_t", "m_flRMSTimeMS", true, value);
}

float GVMixDynamics3BandDesc_t::GetFldbKneeWidth() const {
    return GetSchemaValue<float>(m_ptr, "VMixDynamics3BandDesc_t", "m_fldbKneeWidth");
}

void GVMixDynamics3BandDesc_t::SetFldbKneeWidth(float value) {
    SetSchemaValue(m_ptr, "VMixDynamics3BandDesc_t", "m_fldbKneeWidth", true, value);
}

float GVMixDynamics3BandDesc_t::GetDepth() const {
    return GetSchemaValue<float>(m_ptr, "VMixDynamics3BandDesc_t", "m_flDepth");
}

void GVMixDynamics3BandDesc_t::SetDepth(float value) {
    SetSchemaValue(m_ptr, "VMixDynamics3BandDesc_t", "m_flDepth", true, value);
}

float GVMixDynamics3BandDesc_t::GetWetMix() const {
    return GetSchemaValue<float>(m_ptr, "VMixDynamics3BandDesc_t", "m_flWetMix");
}

void GVMixDynamics3BandDesc_t::SetWetMix(float value) {
    SetSchemaValue(m_ptr, "VMixDynamics3BandDesc_t", "m_flWetMix", true, value);
}

float GVMixDynamics3BandDesc_t::GetTimeScale() const {
    return GetSchemaValue<float>(m_ptr, "VMixDynamics3BandDesc_t", "m_flTimeScale");
}

void GVMixDynamics3BandDesc_t::SetTimeScale(float value) {
    SetSchemaValue(m_ptr, "VMixDynamics3BandDesc_t", "m_flTimeScale", true, value);
}

float GVMixDynamics3BandDesc_t::GetLowCutoffFreq() const {
    return GetSchemaValue<float>(m_ptr, "VMixDynamics3BandDesc_t", "m_flLowCutoffFreq");
}

void GVMixDynamics3BandDesc_t::SetLowCutoffFreq(float value) {
    SetSchemaValue(m_ptr, "VMixDynamics3BandDesc_t", "m_flLowCutoffFreq", true, value);
}

float GVMixDynamics3BandDesc_t::GetHighCutoffFreq() const {
    return GetSchemaValue<float>(m_ptr, "VMixDynamics3BandDesc_t", "m_flHighCutoffFreq");
}

void GVMixDynamics3BandDesc_t::SetHighCutoffFreq(float value) {
    SetSchemaValue(m_ptr, "VMixDynamics3BandDesc_t", "m_flHighCutoffFreq", true, value);
}

bool GVMixDynamics3BandDesc_t::GetPeakMode() const {
    return GetSchemaValue<bool>(m_ptr, "VMixDynamics3BandDesc_t", "m_bPeakMode");
}

void GVMixDynamics3BandDesc_t::SetPeakMode(bool value) {
    SetSchemaValue(m_ptr, "VMixDynamics3BandDesc_t", "m_bPeakMode", true, value);
}

std::vector<GVMixDynamicsBand_t> GVMixDynamics3BandDesc_t::GetBandDesc() const {
    GVMixDynamicsBand_t* outValue = GetSchemaValue<GVMixDynamicsBand_t*>(m_ptr, "VMixDynamics3BandDesc_t", "m_bandDesc"); std::vector<GVMixDynamicsBand_t> ret; for(int i = 0; i < 3; i++) { ret.push_back(outValue[i]); } return ret;
}

void GVMixDynamics3BandDesc_t::SetBandDesc(std::vector<GVMixDynamicsBand_t> value) {
    GVMixDynamicsBand_t* outValue = GetSchemaValue<GVMixDynamicsBand_t*>(m_ptr, "VMixDynamics3BandDesc_t", "m_bandDesc"); for(int i = 0; i < 3; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "VMixDynamics3BandDesc_t", "m_bandDesc", true, outValue);
}

std::string GVMixDynamics3BandDesc_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVMixDynamics3BandDesc_t::IsValid() {
    return (m_ptr != nullptr);
}

GCModelConfigElement_SetMaterialGroup::GCModelConfigElement_SetMaterialGroup(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCModelConfigElement_SetMaterialGroup::GCModelConfigElement_SetMaterialGroup(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCModelConfigElement_SetMaterialGroup::GetMaterialGroupName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CModelConfigElement_SetMaterialGroup", "m_MaterialGroupName");
}

void GCModelConfigElement_SetMaterialGroup::SetMaterialGroupName(CUtlString value) {
    SetSchemaValue(m_ptr, "CModelConfigElement_SetMaterialGroup", "m_MaterialGroupName", false, value);
}

std::string GCModelConfigElement_SetMaterialGroup::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCModelConfigElement_SetMaterialGroup::IsValid() {
    return (m_ptr != nullptr);
}

GCMovementHandshakeAnimTag::GCMovementHandshakeAnimTag(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMovementHandshakeAnimTag::GCMovementHandshakeAnimTag(void *ptr) {
    m_ptr = ptr;
}

std::string GCMovementHandshakeAnimTag::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMovementHandshakeAnimTag::IsValid() {
    return (m_ptr != nullptr);
}

GCSeqScaleSet::GCSeqScaleSet(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSeqScaleSet::GCSeqScaleSet(void *ptr) {
    m_ptr = ptr;
}

CBufferString GCSeqScaleSet::GetName() const {
    return GetSchemaValue<CBufferString>(m_ptr, "CSeqScaleSet", "m_sName");
}

void GCSeqScaleSet::SetName(CBufferString value) {
    SetSchemaValue(m_ptr, "CSeqScaleSet", "m_sName", false, value);
}

bool GCSeqScaleSet::GetRootOffset() const {
    return GetSchemaValue<bool>(m_ptr, "CSeqScaleSet", "m_bRootOffset");
}

void GCSeqScaleSet::SetRootOffset(bool value) {
    SetSchemaValue(m_ptr, "CSeqScaleSet", "m_bRootOffset", false, value);
}

Vector GCSeqScaleSet::GetRootOffset1() const {
    return GetSchemaValue<Vector>(m_ptr, "CSeqScaleSet", "m_vRootOffset");
}

void GCSeqScaleSet::SetRootOffset1(Vector value) {
    SetSchemaValue(m_ptr, "CSeqScaleSet", "m_vRootOffset", false, value);
}

std::vector<int16> GCSeqScaleSet::GetLocalBoneArray() const {
    CUtlVector<int16>* vec = GetSchemaValue<CUtlVector<int16>*>(m_ptr, "CSeqScaleSet", "m_nLocalBoneArray"); std::vector<int16> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSeqScaleSet::SetLocalBoneArray(std::vector<int16> value) {
    SetSchemaValueCUtlVector<int16>(m_ptr, "CSeqScaleSet", "m_nLocalBoneArray", false, value);
}

std::vector<float32> GCSeqScaleSet::GetBoneScaleArray() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "CSeqScaleSet", "m_flBoneScaleArray"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSeqScaleSet::SetBoneScaleArray(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "CSeqScaleSet", "m_flBoneScaleArray", false, value);
}

std::string GCSeqScaleSet::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSeqScaleSet::IsValid() {
    return (m_ptr != nullptr);
}

GEventClientProcessGameInput_t::GEventClientProcessGameInput_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEventClientProcessGameInput_t::GEventClientProcessGameInput_t(void *ptr) {
    m_ptr = ptr;
}

GEngineLoopState_t GEventClientProcessGameInput_t::GetLoopState() const {
    return GetSchemaValue<GEngineLoopState_t>(m_ptr, "EventClientProcessGameInput_t", "m_LoopState");
}

void GEventClientProcessGameInput_t::SetLoopState(GEngineLoopState_t value) {
    SetSchemaValue(m_ptr, "EventClientProcessGameInput_t", "m_LoopState", true, value);
}

float GEventClientProcessGameInput_t::GetRealTime() const {
    return GetSchemaValue<float>(m_ptr, "EventClientProcessGameInput_t", "m_flRealTime");
}

void GEventClientProcessGameInput_t::SetRealTime(float value) {
    SetSchemaValue(m_ptr, "EventClientProcessGameInput_t", "m_flRealTime", true, value);
}

float GEventClientProcessGameInput_t::GetFrameTime() const {
    return GetSchemaValue<float>(m_ptr, "EventClientProcessGameInput_t", "m_flFrameTime");
}

void GEventClientProcessGameInput_t::SetFrameTime(float value) {
    SetSchemaValue(m_ptr, "EventClientProcessGameInput_t", "m_flFrameTime", true, value);
}

std::string GEventClientProcessGameInput_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEventClientProcessGameInput_t::IsValid() {
    return (m_ptr != nullptr);
}

GVsInputSignatureElement_t::GVsInputSignatureElement_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVsInputSignatureElement_t::GVsInputSignatureElement_t(void *ptr) {
    m_ptr = ptr;
}

std::string GVsInputSignatureElement_t::GetName() const {
    return GetSchemaValuePtr<char>(m_ptr, "VsInputSignatureElement_t", "m_pName");
}

void GVsInputSignatureElement_t::SetName(std::string value) {
    WriteSchemaPtrValue(m_ptr, "VsInputSignatureElement_t", "m_pName", true, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 64);
}

std::string GVsInputSignatureElement_t::GetSemantic() const {
    return GetSchemaValuePtr<char>(m_ptr, "VsInputSignatureElement_t", "m_pSemantic");
}

void GVsInputSignatureElement_t::SetSemantic(std::string value) {
    WriteSchemaPtrValue(m_ptr, "VsInputSignatureElement_t", "m_pSemantic", true, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 64);
}

std::string GVsInputSignatureElement_t::GetD3DSemanticName() const {
    return GetSchemaValuePtr<char>(m_ptr, "VsInputSignatureElement_t", "m_pD3DSemanticName");
}

void GVsInputSignatureElement_t::SetD3DSemanticName(std::string value) {
    WriteSchemaPtrValue(m_ptr, "VsInputSignatureElement_t", "m_pD3DSemanticName", true, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 64);
}

int32_t GVsInputSignatureElement_t::GetD3DSemanticIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "VsInputSignatureElement_t", "m_nD3DSemanticIndex");
}

void GVsInputSignatureElement_t::SetD3DSemanticIndex(int32_t value) {
    SetSchemaValue(m_ptr, "VsInputSignatureElement_t", "m_nD3DSemanticIndex", true, value);
}

std::string GVsInputSignatureElement_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVsInputSignatureElement_t::IsValid() {
    return (m_ptr != nullptr);
}

GCompositeMaterialMatchFilter_t::GCompositeMaterialMatchFilter_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCompositeMaterialMatchFilter_t::GCompositeMaterialMatchFilter_t(void *ptr) {
    m_ptr = ptr;
}

CompositeMaterialMatchFilterType_t GCompositeMaterialMatchFilter_t::GetCompositeMaterialMatchFilterType() const {
    return GetSchemaValue<CompositeMaterialMatchFilterType_t>(m_ptr, "CompositeMaterialMatchFilter_t", "m_nCompositeMaterialMatchFilterType");
}

void GCompositeMaterialMatchFilter_t::SetCompositeMaterialMatchFilterType(CompositeMaterialMatchFilterType_t value) {
    SetSchemaValue(m_ptr, "CompositeMaterialMatchFilter_t", "m_nCompositeMaterialMatchFilterType", true, value);
}

CUtlString GCompositeMaterialMatchFilter_t::GetStrMatchFilter() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CompositeMaterialMatchFilter_t", "m_strMatchFilter");
}

void GCompositeMaterialMatchFilter_t::SetStrMatchFilter(CUtlString value) {
    SetSchemaValue(m_ptr, "CompositeMaterialMatchFilter_t", "m_strMatchFilter", true, value);
}

CUtlString GCompositeMaterialMatchFilter_t::GetStrMatchValue() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CompositeMaterialMatchFilter_t", "m_strMatchValue");
}

void GCompositeMaterialMatchFilter_t::SetStrMatchValue(CUtlString value) {
    SetSchemaValue(m_ptr, "CompositeMaterialMatchFilter_t", "m_strMatchValue", true, value);
}

bool GCompositeMaterialMatchFilter_t::GetPassWhenTrue() const {
    return GetSchemaValue<bool>(m_ptr, "CompositeMaterialMatchFilter_t", "m_bPassWhenTrue");
}

void GCompositeMaterialMatchFilter_t::SetPassWhenTrue(bool value) {
    SetSchemaValue(m_ptr, "CompositeMaterialMatchFilter_t", "m_bPassWhenTrue", true, value);
}

std::string GCompositeMaterialMatchFilter_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCompositeMaterialMatchFilter_t::IsValid() {
    return (m_ptr != nullptr);
}

GVertexPositionColor_t::GVertexPositionColor_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVertexPositionColor_t::GVertexPositionColor_t(void *ptr) {
    m_ptr = ptr;
}

Vector GVertexPositionColor_t::GetPosition() const {
    return GetSchemaValue<Vector>(m_ptr, "VertexPositionColor_t", "m_vPosition");
}

void GVertexPositionColor_t::SetPosition(Vector value) {
    SetSchemaValue(m_ptr, "VertexPositionColor_t", "m_vPosition", true, value);
}

std::string GVertexPositionColor_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVertexPositionColor_t::IsValid() {
    return (m_ptr != nullptr);
}

GCFootTrajectories::GCFootTrajectories(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFootTrajectories::GCFootTrajectories(void *ptr) {
    m_ptr = ptr;
}

std::vector<GCFootTrajectory> GCFootTrajectories::GetTrajectories() const {
    CUtlVector<GCFootTrajectory>* vec = GetSchemaValue<CUtlVector<GCFootTrajectory>*>(m_ptr, "CFootTrajectories", "m_trajectories"); std::vector<GCFootTrajectory> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCFootTrajectories::SetTrajectories(std::vector<GCFootTrajectory> value) {
    SetSchemaValueCUtlVector<GCFootTrajectory>(m_ptr, "CFootTrajectories", "m_trajectories", false, value);
}

std::string GCFootTrajectories::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFootTrajectories::IsValid() {
    return (m_ptr != nullptr);
}

GSceneObject_t::GSceneObject_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GSceneObject_t::GSceneObject_t(void *ptr) {
    m_ptr = ptr;
}

uint32_t GSceneObject_t::GetObjectID() const {
    return GetSchemaValue<uint32_t>(m_ptr, "SceneObject_t", "m_nObjectID");
}

void GSceneObject_t::SetObjectID(uint32_t value) {
    SetSchemaValue(m_ptr, "SceneObject_t", "m_nObjectID", true, value);
}

std::vector<Vector4D> GSceneObject_t::GetTransform() const {
    Vector4D* outValue = GetSchemaValue<Vector4D*>(m_ptr, "SceneObject_t", "m_vTransform"); std::vector<Vector4D> ret; for(int i = 0; i < 3; i++) { ret.push_back(outValue[i]); } return ret;
}

void GSceneObject_t::SetTransform(std::vector<Vector4D> value) {
    Vector4D* outValue = GetSchemaValue<Vector4D*>(m_ptr, "SceneObject_t", "m_vTransform"); for(int i = 0; i < 3; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "SceneObject_t", "m_vTransform", true, outValue);
}

float GSceneObject_t::GetFadeStartDistance() const {
    return GetSchemaValue<float>(m_ptr, "SceneObject_t", "m_flFadeStartDistance");
}

void GSceneObject_t::SetFadeStartDistance(float value) {
    SetSchemaValue(m_ptr, "SceneObject_t", "m_flFadeStartDistance", true, value);
}

float GSceneObject_t::GetFadeEndDistance() const {
    return GetSchemaValue<float>(m_ptr, "SceneObject_t", "m_flFadeEndDistance");
}

void GSceneObject_t::SetFadeEndDistance(float value) {
    SetSchemaValue(m_ptr, "SceneObject_t", "m_flFadeEndDistance", true, value);
}

Vector4D GSceneObject_t::GetTintColor() const {
    return GetSchemaValue<Vector4D>(m_ptr, "SceneObject_t", "m_vTintColor");
}

void GSceneObject_t::SetTintColor(Vector4D value) {
    SetSchemaValue(m_ptr, "SceneObject_t", "m_vTintColor", true, value);
}

CUtlString GSceneObject_t::GetSkin() const {
    return GetSchemaValue<CUtlString>(m_ptr, "SceneObject_t", "m_skin");
}

void GSceneObject_t::SetSkin(CUtlString value) {
    SetSchemaValue(m_ptr, "SceneObject_t", "m_skin", true, value);
}

ObjectTypeFlags_t GSceneObject_t::GetObjectTypeFlags() const {
    return GetSchemaValue<ObjectTypeFlags_t>(m_ptr, "SceneObject_t", "m_nObjectTypeFlags");
}

void GSceneObject_t::SetObjectTypeFlags(ObjectTypeFlags_t value) {
    SetSchemaValue(m_ptr, "SceneObject_t", "m_nObjectTypeFlags", true, value);
}

Vector GSceneObject_t::GetLightingOrigin() const {
    return GetSchemaValue<Vector>(m_ptr, "SceneObject_t", "m_vLightingOrigin");
}

void GSceneObject_t::SetLightingOrigin(Vector value) {
    SetSchemaValue(m_ptr, "SceneObject_t", "m_vLightingOrigin", true, value);
}

int16_t GSceneObject_t::GetOverlayRenderOrder() const {
    return GetSchemaValue<int16_t>(m_ptr, "SceneObject_t", "m_nOverlayRenderOrder");
}

void GSceneObject_t::SetOverlayRenderOrder(int16_t value) {
    SetSchemaValue(m_ptr, "SceneObject_t", "m_nOverlayRenderOrder", true, value);
}

int16_t GSceneObject_t::GetLODOverride() const {
    return GetSchemaValue<int16_t>(m_ptr, "SceneObject_t", "m_nLODOverride");
}

void GSceneObject_t::SetLODOverride(int16_t value) {
    SetSchemaValue(m_ptr, "SceneObject_t", "m_nLODOverride", true, value);
}

int32_t GSceneObject_t::GetCubeMapPrecomputedHandshake() const {
    return GetSchemaValue<int32_t>(m_ptr, "SceneObject_t", "m_nCubeMapPrecomputedHandshake");
}

void GSceneObject_t::SetCubeMapPrecomputedHandshake(int32_t value) {
    SetSchemaValue(m_ptr, "SceneObject_t", "m_nCubeMapPrecomputedHandshake", true, value);
}

int32_t GSceneObject_t::GetLightProbeVolumePrecomputedHandshake() const {
    return GetSchemaValue<int32_t>(m_ptr, "SceneObject_t", "m_nLightProbeVolumePrecomputedHandshake");
}

void GSceneObject_t::SetLightProbeVolumePrecomputedHandshake(int32_t value) {
    SetSchemaValue(m_ptr, "SceneObject_t", "m_nLightProbeVolumePrecomputedHandshake", true, value);
}

std::string GSceneObject_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GSceneObject_t::IsValid() {
    return (m_ptr != nullptr);
}

GCSSDSMsg_ViewTarget::GCSSDSMsg_ViewTarget(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSSDSMsg_ViewTarget::GCSSDSMsg_ViewTarget(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCSSDSMsg_ViewTarget::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CSSDSMsg_ViewTarget", "m_Name");
}

void GCSSDSMsg_ViewTarget::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "CSSDSMsg_ViewTarget", "m_Name", false, value);
}

uint64_t GCSSDSMsg_ViewTarget::GetTextureId() const {
    return GetSchemaValue<uint64_t>(m_ptr, "CSSDSMsg_ViewTarget", "m_TextureId");
}

void GCSSDSMsg_ViewTarget::SetTextureId(uint64_t value) {
    SetSchemaValue(m_ptr, "CSSDSMsg_ViewTarget", "m_TextureId", false, value);
}

int32_t GCSSDSMsg_ViewTarget::GetWidth() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSSDSMsg_ViewTarget", "m_nWidth");
}

void GCSSDSMsg_ViewTarget::SetWidth(int32_t value) {
    SetSchemaValue(m_ptr, "CSSDSMsg_ViewTarget", "m_nWidth", false, value);
}

int32_t GCSSDSMsg_ViewTarget::GetHeight() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSSDSMsg_ViewTarget", "m_nHeight");
}

void GCSSDSMsg_ViewTarget::SetHeight(int32_t value) {
    SetSchemaValue(m_ptr, "CSSDSMsg_ViewTarget", "m_nHeight", false, value);
}

int32_t GCSSDSMsg_ViewTarget::GetRequestedWidth() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSSDSMsg_ViewTarget", "m_nRequestedWidth");
}

void GCSSDSMsg_ViewTarget::SetRequestedWidth(int32_t value) {
    SetSchemaValue(m_ptr, "CSSDSMsg_ViewTarget", "m_nRequestedWidth", false, value);
}

int32_t GCSSDSMsg_ViewTarget::GetRequestedHeight() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSSDSMsg_ViewTarget", "m_nRequestedHeight");
}

void GCSSDSMsg_ViewTarget::SetRequestedHeight(int32_t value) {
    SetSchemaValue(m_ptr, "CSSDSMsg_ViewTarget", "m_nRequestedHeight", false, value);
}

int32_t GCSSDSMsg_ViewTarget::GetNumMipLevels() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSSDSMsg_ViewTarget", "m_nNumMipLevels");
}

void GCSSDSMsg_ViewTarget::SetNumMipLevels(int32_t value) {
    SetSchemaValue(m_ptr, "CSSDSMsg_ViewTarget", "m_nNumMipLevels", false, value);
}

int32_t GCSSDSMsg_ViewTarget::GetDepth() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSSDSMsg_ViewTarget", "m_nDepth");
}

void GCSSDSMsg_ViewTarget::SetDepth(int32_t value) {
    SetSchemaValue(m_ptr, "CSSDSMsg_ViewTarget", "m_nDepth", false, value);
}

int32_t GCSSDSMsg_ViewTarget::GetMultisampleNumSamples() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSSDSMsg_ViewTarget", "m_nMultisampleNumSamples");
}

void GCSSDSMsg_ViewTarget::SetMultisampleNumSamples(int32_t value) {
    SetSchemaValue(m_ptr, "CSSDSMsg_ViewTarget", "m_nMultisampleNumSamples", false, value);
}

int32_t GCSSDSMsg_ViewTarget::GetFormat() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSSDSMsg_ViewTarget", "m_nFormat");
}

void GCSSDSMsg_ViewTarget::SetFormat(int32_t value) {
    SetSchemaValue(m_ptr, "CSSDSMsg_ViewTarget", "m_nFormat", false, value);
}

std::string GCSSDSMsg_ViewTarget::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSSDSMsg_ViewTarget::IsValid() {
    return (m_ptr != nullptr);
}

GVMixSubgraphSwitchDesc_t::GVMixSubgraphSwitchDesc_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVMixSubgraphSwitchDesc_t::GVMixSubgraphSwitchDesc_t(void *ptr) {
    m_ptr = ptr;
}

VMixSubgraphSwitchInterpolationType_t GVMixSubgraphSwitchDesc_t::GetInterpolationMode() const {
    return GetSchemaValue<VMixSubgraphSwitchInterpolationType_t>(m_ptr, "VMixSubgraphSwitchDesc_t", "m_interpolationMode");
}

void GVMixSubgraphSwitchDesc_t::SetInterpolationMode(VMixSubgraphSwitchInterpolationType_t value) {
    SetSchemaValue(m_ptr, "VMixSubgraphSwitchDesc_t", "m_interpolationMode", true, value);
}

bool GVMixSubgraphSwitchDesc_t::GetOnlyTailsOnFadeOut() const {
    return GetSchemaValue<bool>(m_ptr, "VMixSubgraphSwitchDesc_t", "m_bOnlyTailsOnFadeOut");
}

void GVMixSubgraphSwitchDesc_t::SetOnlyTailsOnFadeOut(bool value) {
    SetSchemaValue(m_ptr, "VMixSubgraphSwitchDesc_t", "m_bOnlyTailsOnFadeOut", true, value);
}

float GVMixSubgraphSwitchDesc_t::GetInterpolationTime() const {
    return GetSchemaValue<float>(m_ptr, "VMixSubgraphSwitchDesc_t", "m_flInterpolationTime");
}

void GVMixSubgraphSwitchDesc_t::SetInterpolationTime(float value) {
    SetSchemaValue(m_ptr, "VMixSubgraphSwitchDesc_t", "m_flInterpolationTime", true, value);
}

std::string GVMixSubgraphSwitchDesc_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVMixSubgraphSwitchDesc_t::IsValid() {
    return (m_ptr != nullptr);
}

GCNmTransitionNode::GCNmTransitionNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmTransitionNode::GCNmTransitionNode(void *ptr) {
    m_ptr = ptr;
}

int16_t GCNmTransitionNode::GetTargetCNmStateNodeIdx() const {
    return GetSchemaValue<int16_t>(m_ptr, "CNmTransitionNode", "m_targetCNmStateNodeIdx");
}

void GCNmTransitionNode::SetTargetCNmStateNodeIdx(int16_t value) {
    SetSchemaValue(m_ptr, "CNmTransitionNode", "m_targetCNmStateNodeIdx", false, value);
}

int16_t GCNmTransitionNode::GetDurationOverrideNodeIdx() const {
    return GetSchemaValue<int16_t>(m_ptr, "CNmTransitionNode", "m_durationOverrideNodeIdx");
}

void GCNmTransitionNode::SetDurationOverrideNodeIdx(int16_t value) {
    SetSchemaValue(m_ptr, "CNmTransitionNode", "m_durationOverrideNodeIdx", false, value);
}

int16_t GCNmTransitionNode::GetSyncEventOffsetOverrideNodeIdx() const {
    return GetSchemaValue<int16_t>(m_ptr, "CNmTransitionNode", "m_syncEventOffsetOverrideNodeIdx");
}

void GCNmTransitionNode::SetSyncEventOffsetOverrideNodeIdx(int16_t value) {
    SetSchemaValue(m_ptr, "CNmTransitionNode", "m_syncEventOffsetOverrideNodeIdx", false, value);
}

int16_t GCNmTransitionNode::GetStartBoneMaskNodeIdx() const {
    return GetSchemaValue<int16_t>(m_ptr, "CNmTransitionNode", "m_startBoneMaskNodeIdx");
}

void GCNmTransitionNode::SetStartBoneMaskNodeIdx(int16_t value) {
    SetSchemaValue(m_ptr, "CNmTransitionNode", "m_startBoneMaskNodeIdx", false, value);
}

float GCNmTransitionNode::GetDuration() const {
    return GetSchemaValue<float>(m_ptr, "CNmTransitionNode", "m_flDuration");
}

void GCNmTransitionNode::SetDuration(float value) {
    SetSchemaValue(m_ptr, "CNmTransitionNode", "m_flDuration", false, value);
}

GNmPercent_t GCNmTransitionNode::GetBoneMaskBlendInTimePercentage() const {
    return GetSchemaValue<GNmPercent_t>(m_ptr, "CNmTransitionNode", "m_boneMaskBlendInTimePercentage");
}

void GCNmTransitionNode::SetBoneMaskBlendInTimePercentage(GNmPercent_t value) {
    SetSchemaValue(m_ptr, "CNmTransitionNode", "m_boneMaskBlendInTimePercentage", false, value);
}

float GCNmTransitionNode::GetSyncEventOffset() const {
    return GetSchemaValue<float>(m_ptr, "CNmTransitionNode", "m_syncEventOffset");
}

void GCNmTransitionNode::SetSyncEventOffset(float value) {
    SetSchemaValue(m_ptr, "CNmTransitionNode", "m_syncEventOffset", false, value);
}

GCNmTransitionNode GCNmTransitionNode::GetTransitionOptions() const {
    return GetSchemaValue<GCNmTransitionNode>(m_ptr, "CNmTransitionNode", "m_transitionOptions");
}

void GCNmTransitionNode::SetTransitionOptions(GCNmTransitionNode value) {
    SetSchemaValue(m_ptr, "CNmTransitionNode", "m_transitionOptions", false, value);
}

int16_t GCNmTransitionNode::GetTargetSyncIDNodeIdx() const {
    return GetSchemaValue<int16_t>(m_ptr, "CNmTransitionNode", "m_targetSyncIDNodeIdx");
}

void GCNmTransitionNode::SetTargetSyncIDNodeIdx(int16_t value) {
    SetSchemaValue(m_ptr, "CNmTransitionNode", "m_targetSyncIDNodeIdx", false, value);
}

NmEasingOperation_t GCNmTransitionNode::GetBlendWeightEasing() const {
    return GetSchemaValue<NmEasingOperation_t>(m_ptr, "CNmTransitionNode", "m_blendWeightEasing");
}

void GCNmTransitionNode::SetBlendWeightEasing(NmEasingOperation_t value) {
    SetSchemaValue(m_ptr, "CNmTransitionNode", "m_blendWeightEasing", false, value);
}

NmRootMotionBlendMode_t GCNmTransitionNode::GetRootMotionBlend() const {
    return GetSchemaValue<NmRootMotionBlendMode_t>(m_ptr, "CNmTransitionNode", "m_rootMotionBlend");
}

void GCNmTransitionNode::SetRootMotionBlend(NmRootMotionBlendMode_t value) {
    SetSchemaValue(m_ptr, "CNmTransitionNode", "m_rootMotionBlend", false, value);
}

std::string GCNmTransitionNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmTransitionNode::IsValid() {
    return (m_ptr != nullptr);
}

GMotionDBIndex::GMotionDBIndex(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GMotionDBIndex::GMotionDBIndex(void *ptr) {
    m_ptr = ptr;
}

uint32_t GMotionDBIndex::GetIndex() const {
    return GetSchemaValue<uint32_t>(m_ptr, "MotionDBIndex", "m_nIndex");
}

void GMotionDBIndex::SetIndex(uint32_t value) {
    SetSchemaValue(m_ptr, "MotionDBIndex", "m_nIndex", false, value);
}

std::string GMotionDBIndex::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GMotionDBIndex::IsValid() {
    return (m_ptr != nullptr);
}

GCToggleComponentActionUpdater::GCToggleComponentActionUpdater(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCToggleComponentActionUpdater::GCToggleComponentActionUpdater(void *ptr) {
    m_ptr = ptr;
}

GAnimComponentID GCToggleComponentActionUpdater::GetComponentID() const {
    return GetSchemaValue<GAnimComponentID>(m_ptr, "CToggleComponentActionUpdater", "m_componentID");
}

void GCToggleComponentActionUpdater::SetComponentID(GAnimComponentID value) {
    SetSchemaValue(m_ptr, "CToggleComponentActionUpdater", "m_componentID", false, value);
}

bool GCToggleComponentActionUpdater::GetSetEnabled() const {
    return GetSchemaValue<bool>(m_ptr, "CToggleComponentActionUpdater", "m_bSetEnabled");
}

void GCToggleComponentActionUpdater::SetSetEnabled(bool value) {
    SetSchemaValue(m_ptr, "CToggleComponentActionUpdater", "m_bSetEnabled", false, value);
}

std::string GCToggleComponentActionUpdater::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCToggleComponentActionUpdater::IsValid() {
    return (m_ptr != nullptr);
}

GCNmControlParameterIDNode::GCNmControlParameterIDNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmControlParameterIDNode::GCNmControlParameterIDNode(void *ptr) {
    m_ptr = ptr;
}

std::string GCNmControlParameterIDNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmControlParameterIDNode::IsValid() {
    return (m_ptr != nullptr);
}

GPostProcessingTonemapParameters_t::GPostProcessingTonemapParameters_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GPostProcessingTonemapParameters_t::GPostProcessingTonemapParameters_t(void *ptr) {
    m_ptr = ptr;
}

float GPostProcessingTonemapParameters_t::GetExposureBias() const {
    return GetSchemaValue<float>(m_ptr, "PostProcessingTonemapParameters_t", "m_flExposureBias");
}

void GPostProcessingTonemapParameters_t::SetExposureBias(float value) {
    SetSchemaValue(m_ptr, "PostProcessingTonemapParameters_t", "m_flExposureBias", true, value);
}

float GPostProcessingTonemapParameters_t::GetShoulderStrength() const {
    return GetSchemaValue<float>(m_ptr, "PostProcessingTonemapParameters_t", "m_flShoulderStrength");
}

void GPostProcessingTonemapParameters_t::SetShoulderStrength(float value) {
    SetSchemaValue(m_ptr, "PostProcessingTonemapParameters_t", "m_flShoulderStrength", true, value);
}

float GPostProcessingTonemapParameters_t::GetLinearStrength() const {
    return GetSchemaValue<float>(m_ptr, "PostProcessingTonemapParameters_t", "m_flLinearStrength");
}

void GPostProcessingTonemapParameters_t::SetLinearStrength(float value) {
    SetSchemaValue(m_ptr, "PostProcessingTonemapParameters_t", "m_flLinearStrength", true, value);
}

float GPostProcessingTonemapParameters_t::GetLinearAngle() const {
    return GetSchemaValue<float>(m_ptr, "PostProcessingTonemapParameters_t", "m_flLinearAngle");
}

void GPostProcessingTonemapParameters_t::SetLinearAngle(float value) {
    SetSchemaValue(m_ptr, "PostProcessingTonemapParameters_t", "m_flLinearAngle", true, value);
}

float GPostProcessingTonemapParameters_t::GetToeStrength() const {
    return GetSchemaValue<float>(m_ptr, "PostProcessingTonemapParameters_t", "m_flToeStrength");
}

void GPostProcessingTonemapParameters_t::SetToeStrength(float value) {
    SetSchemaValue(m_ptr, "PostProcessingTonemapParameters_t", "m_flToeStrength", true, value);
}

float GPostProcessingTonemapParameters_t::GetToeNum() const {
    return GetSchemaValue<float>(m_ptr, "PostProcessingTonemapParameters_t", "m_flToeNum");
}

void GPostProcessingTonemapParameters_t::SetToeNum(float value) {
    SetSchemaValue(m_ptr, "PostProcessingTonemapParameters_t", "m_flToeNum", true, value);
}

float GPostProcessingTonemapParameters_t::GetToeDenom() const {
    return GetSchemaValue<float>(m_ptr, "PostProcessingTonemapParameters_t", "m_flToeDenom");
}

void GPostProcessingTonemapParameters_t::SetToeDenom(float value) {
    SetSchemaValue(m_ptr, "PostProcessingTonemapParameters_t", "m_flToeDenom", true, value);
}

float GPostProcessingTonemapParameters_t::GetWhitePoint() const {
    return GetSchemaValue<float>(m_ptr, "PostProcessingTonemapParameters_t", "m_flWhitePoint");
}

void GPostProcessingTonemapParameters_t::SetWhitePoint(float value) {
    SetSchemaValue(m_ptr, "PostProcessingTonemapParameters_t", "m_flWhitePoint", true, value);
}

float GPostProcessingTonemapParameters_t::GetLuminanceSource() const {
    return GetSchemaValue<float>(m_ptr, "PostProcessingTonemapParameters_t", "m_flLuminanceSource");
}

void GPostProcessingTonemapParameters_t::SetLuminanceSource(float value) {
    SetSchemaValue(m_ptr, "PostProcessingTonemapParameters_t", "m_flLuminanceSource", true, value);
}

float GPostProcessingTonemapParameters_t::GetExposureBiasShadows() const {
    return GetSchemaValue<float>(m_ptr, "PostProcessingTonemapParameters_t", "m_flExposureBiasShadows");
}

void GPostProcessingTonemapParameters_t::SetExposureBiasShadows(float value) {
    SetSchemaValue(m_ptr, "PostProcessingTonemapParameters_t", "m_flExposureBiasShadows", true, value);
}

float GPostProcessingTonemapParameters_t::GetExposureBiasHighlights() const {
    return GetSchemaValue<float>(m_ptr, "PostProcessingTonemapParameters_t", "m_flExposureBiasHighlights");
}

void GPostProcessingTonemapParameters_t::SetExposureBiasHighlights(float value) {
    SetSchemaValue(m_ptr, "PostProcessingTonemapParameters_t", "m_flExposureBiasHighlights", true, value);
}

float GPostProcessingTonemapParameters_t::GetMinShadowLum() const {
    return GetSchemaValue<float>(m_ptr, "PostProcessingTonemapParameters_t", "m_flMinShadowLum");
}

void GPostProcessingTonemapParameters_t::SetMinShadowLum(float value) {
    SetSchemaValue(m_ptr, "PostProcessingTonemapParameters_t", "m_flMinShadowLum", true, value);
}

float GPostProcessingTonemapParameters_t::GetMaxShadowLum() const {
    return GetSchemaValue<float>(m_ptr, "PostProcessingTonemapParameters_t", "m_flMaxShadowLum");
}

void GPostProcessingTonemapParameters_t::SetMaxShadowLum(float value) {
    SetSchemaValue(m_ptr, "PostProcessingTonemapParameters_t", "m_flMaxShadowLum", true, value);
}

float GPostProcessingTonemapParameters_t::GetMinHighlightLum() const {
    return GetSchemaValue<float>(m_ptr, "PostProcessingTonemapParameters_t", "m_flMinHighlightLum");
}

void GPostProcessingTonemapParameters_t::SetMinHighlightLum(float value) {
    SetSchemaValue(m_ptr, "PostProcessingTonemapParameters_t", "m_flMinHighlightLum", true, value);
}

float GPostProcessingTonemapParameters_t::GetMaxHighlightLum() const {
    return GetSchemaValue<float>(m_ptr, "PostProcessingTonemapParameters_t", "m_flMaxHighlightLum");
}

void GPostProcessingTonemapParameters_t::SetMaxHighlightLum(float value) {
    SetSchemaValue(m_ptr, "PostProcessingTonemapParameters_t", "m_flMaxHighlightLum", true, value);
}

std::string GPostProcessingTonemapParameters_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GPostProcessingTonemapParameters_t::IsValid() {
    return (m_ptr != nullptr);
}

GVMixAutoFilterDesc_t::GVMixAutoFilterDesc_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVMixAutoFilterDesc_t::GVMixAutoFilterDesc_t(void *ptr) {
    m_ptr = ptr;
}

float GVMixAutoFilterDesc_t::GetEnvelopeAmount() const {
    return GetSchemaValue<float>(m_ptr, "VMixAutoFilterDesc_t", "m_flEnvelopeAmount");
}

void GVMixAutoFilterDesc_t::SetEnvelopeAmount(float value) {
    SetSchemaValue(m_ptr, "VMixAutoFilterDesc_t", "m_flEnvelopeAmount", true, value);
}

float GVMixAutoFilterDesc_t::GetAttackTimeMS() const {
    return GetSchemaValue<float>(m_ptr, "VMixAutoFilterDesc_t", "m_flAttackTimeMS");
}

void GVMixAutoFilterDesc_t::SetAttackTimeMS(float value) {
    SetSchemaValue(m_ptr, "VMixAutoFilterDesc_t", "m_flAttackTimeMS", true, value);
}

float GVMixAutoFilterDesc_t::GetReleaseTimeMS() const {
    return GetSchemaValue<float>(m_ptr, "VMixAutoFilterDesc_t", "m_flReleaseTimeMS");
}

void GVMixAutoFilterDesc_t::SetReleaseTimeMS(float value) {
    SetSchemaValue(m_ptr, "VMixAutoFilterDesc_t", "m_flReleaseTimeMS", true, value);
}

GVMixFilterDesc_t GVMixAutoFilterDesc_t::GetFilter() const {
    return GetSchemaValue<GVMixFilterDesc_t>(m_ptr, "VMixAutoFilterDesc_t", "m_filter");
}

void GVMixAutoFilterDesc_t::SetFilter(GVMixFilterDesc_t value) {
    SetSchemaValue(m_ptr, "VMixAutoFilterDesc_t", "m_filter", true, value);
}

float GVMixAutoFilterDesc_t::GetLFOAmount() const {
    return GetSchemaValue<float>(m_ptr, "VMixAutoFilterDesc_t", "m_flLFOAmount");
}

void GVMixAutoFilterDesc_t::SetLFOAmount(float value) {
    SetSchemaValue(m_ptr, "VMixAutoFilterDesc_t", "m_flLFOAmount", true, value);
}

float GVMixAutoFilterDesc_t::GetLFORate() const {
    return GetSchemaValue<float>(m_ptr, "VMixAutoFilterDesc_t", "m_flLFORate");
}

void GVMixAutoFilterDesc_t::SetLFORate(float value) {
    SetSchemaValue(m_ptr, "VMixAutoFilterDesc_t", "m_flLFORate", true, value);
}

float GVMixAutoFilterDesc_t::GetPhase() const {
    return GetSchemaValue<float>(m_ptr, "VMixAutoFilterDesc_t", "m_flPhase");
}

void GVMixAutoFilterDesc_t::SetPhase(float value) {
    SetSchemaValue(m_ptr, "VMixAutoFilterDesc_t", "m_flPhase", true, value);
}

VMixLFOShape_t GVMixAutoFilterDesc_t::GetLFOShape() const {
    return GetSchemaValue<VMixLFOShape_t>(m_ptr, "VMixAutoFilterDesc_t", "m_nLFOShape");
}

void GVMixAutoFilterDesc_t::SetLFOShape(VMixLFOShape_t value) {
    SetSchemaValue(m_ptr, "VMixAutoFilterDesc_t", "m_nLFOShape", true, value);
}

std::string GVMixAutoFilterDesc_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVMixAutoFilterDesc_t::IsValid() {
    return (m_ptr != nullptr);
}

GCSeqMultiFetch::GCSeqMultiFetch(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSeqMultiFetch::GCSeqMultiFetch(void *ptr) {
    m_ptr = ptr;
}

GCSeqMultiFetchFlag GCSeqMultiFetch::GetFlags() const {
    return GetSchemaValue<GCSeqMultiFetchFlag>(m_ptr, "CSeqMultiFetch", "m_flags");
}

void GCSeqMultiFetch::SetFlags(GCSeqMultiFetchFlag value) {
    SetSchemaValue(m_ptr, "CSeqMultiFetch", "m_flags", false, value);
}

std::vector<int16> GCSeqMultiFetch::GetLocalReferenceArray() const {
    CUtlVector<int16>* vec = GetSchemaValue<CUtlVector<int16>*>(m_ptr, "CSeqMultiFetch", "m_localReferenceArray"); std::vector<int16> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSeqMultiFetch::SetLocalReferenceArray(std::vector<int16> value) {
    SetSchemaValueCUtlVector<int16>(m_ptr, "CSeqMultiFetch", "m_localReferenceArray", false, value);
}

std::vector<int32_t> GCSeqMultiFetch::GetGroupSize() const {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CSeqMultiFetch", "m_nGroupSize"); std::vector<int32_t> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCSeqMultiFetch::SetGroupSize(std::vector<int32_t> value) {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CSeqMultiFetch", "m_nGroupSize"); for(int i = 0; i < 2; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CSeqMultiFetch", "m_nGroupSize", false, outValue);
}

std::vector<int32_t> GCSeqMultiFetch::GetLocalPose() const {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CSeqMultiFetch", "m_nLocalPose"); std::vector<int32_t> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCSeqMultiFetch::SetLocalPose(std::vector<int32_t> value) {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "CSeqMultiFetch", "m_nLocalPose"); for(int i = 0; i < 2; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CSeqMultiFetch", "m_nLocalPose", false, outValue);
}

std::vector<float32> GCSeqMultiFetch::GetPoseKeyArray0() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "CSeqMultiFetch", "m_poseKeyArray0"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSeqMultiFetch::SetPoseKeyArray0(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "CSeqMultiFetch", "m_poseKeyArray0", false, value);
}

std::vector<float32> GCSeqMultiFetch::GetPoseKeyArray1() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "CSeqMultiFetch", "m_poseKeyArray1"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSeqMultiFetch::SetPoseKeyArray1(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "CSeqMultiFetch", "m_poseKeyArray1", false, value);
}

int32_t GCSeqMultiFetch::GetLocalCyclePoseParameter() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSeqMultiFetch", "m_nLocalCyclePoseParameter");
}

void GCSeqMultiFetch::SetLocalCyclePoseParameter(int32_t value) {
    SetSchemaValue(m_ptr, "CSeqMultiFetch", "m_nLocalCyclePoseParameter", false, value);
}

bool GCSeqMultiFetch::GetCalculatePoseParameters() const {
    return GetSchemaValue<bool>(m_ptr, "CSeqMultiFetch", "m_bCalculatePoseParameters");
}

void GCSeqMultiFetch::SetCalculatePoseParameters(bool value) {
    SetSchemaValue(m_ptr, "CSeqMultiFetch", "m_bCalculatePoseParameters", false, value);
}

bool GCSeqMultiFetch::GetFixedBlendWeight() const {
    return GetSchemaValue<bool>(m_ptr, "CSeqMultiFetch", "m_bFixedBlendWeight");
}

void GCSeqMultiFetch::SetFixedBlendWeight(bool value) {
    SetSchemaValue(m_ptr, "CSeqMultiFetch", "m_bFixedBlendWeight", false, value);
}

std::vector<float> GCSeqMultiFetch::GetFixedBlendWeightVals() const {
    float* outValue = GetSchemaValue<float*>(m_ptr, "CSeqMultiFetch", "m_flFixedBlendWeightVals"); std::vector<float> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCSeqMultiFetch::SetFixedBlendWeightVals(std::vector<float> value) {
    float* outValue = GetSchemaValue<float*>(m_ptr, "CSeqMultiFetch", "m_flFixedBlendWeightVals"); for(int i = 0; i < 2; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CSeqMultiFetch", "m_flFixedBlendWeightVals", false, outValue);
}

std::string GCSeqMultiFetch::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSeqMultiFetch::IsValid() {
    return (m_ptr != nullptr);
}

GCNmStateMachineNode::GCNmStateMachineNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmStateMachineNode::GCNmStateMachineNode(void *ptr) {
    m_ptr = ptr;
}

int16_t GCNmStateMachineNode::GetDefaultStateIndex() const {
    return GetSchemaValue<int16_t>(m_ptr, "CNmStateMachineNode", "m_nDefaultStateIndex");
}

void GCNmStateMachineNode::SetDefaultStateIndex(int16_t value) {
    SetSchemaValue(m_ptr, "CNmStateMachineNode", "m_nDefaultStateIndex", false, value);
}

std::string GCNmStateMachineNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmStateMachineNode::IsValid() {
    return (m_ptr != nullptr);
}

GCBoneConstraintPoseSpaceMorph::GCBoneConstraintPoseSpaceMorph(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBoneConstraintPoseSpaceMorph::GCBoneConstraintPoseSpaceMorph(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCBoneConstraintPoseSpaceMorph::GetBoneName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CBoneConstraintPoseSpaceMorph", "m_sBoneName");
}

void GCBoneConstraintPoseSpaceMorph::SetBoneName(CUtlString value) {
    SetSchemaValue(m_ptr, "CBoneConstraintPoseSpaceMorph", "m_sBoneName", false, value);
}

CUtlString GCBoneConstraintPoseSpaceMorph::GetAttachmentName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CBoneConstraintPoseSpaceMorph", "m_sAttachmentName");
}

void GCBoneConstraintPoseSpaceMorph::SetAttachmentName(CUtlString value) {
    SetSchemaValue(m_ptr, "CBoneConstraintPoseSpaceMorph", "m_sAttachmentName", false, value);
}

std::vector<CUtlString> GCBoneConstraintPoseSpaceMorph::GetOutputMorph() const {
    CUtlVector<CUtlString>* vec = GetSchemaValue<CUtlVector<CUtlString>*>(m_ptr, "CBoneConstraintPoseSpaceMorph", "m_outputMorph"); std::vector<CUtlString> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCBoneConstraintPoseSpaceMorph::SetOutputMorph(std::vector<CUtlString> value) {
    SetSchemaValueCUtlVector<CUtlString>(m_ptr, "CBoneConstraintPoseSpaceMorph", "m_outputMorph", false, value);
}

std::vector<GCBoneConstraintPoseSpaceMorph> GCBoneConstraintPoseSpaceMorph::GetInputList() const {
    CUtlVector<GCBoneConstraintPoseSpaceMorph>* vec = GetSchemaValue<CUtlVector<GCBoneConstraintPoseSpaceMorph>*>(m_ptr, "CBoneConstraintPoseSpaceMorph", "m_inputList"); std::vector<GCBoneConstraintPoseSpaceMorph> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCBoneConstraintPoseSpaceMorph::SetInputList(std::vector<GCBoneConstraintPoseSpaceMorph> value) {
    SetSchemaValueCUtlVector<GCBoneConstraintPoseSpaceMorph>(m_ptr, "CBoneConstraintPoseSpaceMorph", "m_inputList", false, value);
}

bool GCBoneConstraintPoseSpaceMorph::GetClamp() const {
    return GetSchemaValue<bool>(m_ptr, "CBoneConstraintPoseSpaceMorph", "m_bClamp");
}

void GCBoneConstraintPoseSpaceMorph::SetClamp(bool value) {
    SetSchemaValue(m_ptr, "CBoneConstraintPoseSpaceMorph", "m_bClamp", false, value);
}

std::string GCBoneConstraintPoseSpaceMorph::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBoneConstraintPoseSpaceMorph::IsValid() {
    return (m_ptr != nullptr);
}

GCSSDSMsg_PreLayer::GCSSDSMsg_PreLayer(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSSDSMsg_PreLayer::GCSSDSMsg_PreLayer(void *ptr) {
    m_ptr = ptr;
}

std::string GCSSDSMsg_PreLayer::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSSDSMsg_PreLayer::IsValid() {
    return (m_ptr != nullptr);
}

GCSelectorUpdateNode::GCSelectorUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSelectorUpdateNode::GCSelectorUpdateNode(void *ptr) {
    m_ptr = ptr;
}

std::vector<GCAnimUpdateNodeRef> GCSelectorUpdateNode::GetChildren() const {
    CUtlVector<GCAnimUpdateNodeRef>* vec = GetSchemaValue<CUtlVector<GCAnimUpdateNodeRef>*>(m_ptr, "CSelectorUpdateNode", "m_children"); std::vector<GCAnimUpdateNodeRef> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSelectorUpdateNode::SetChildren(std::vector<GCAnimUpdateNodeRef> value) {
    SetSchemaValueCUtlVector<GCAnimUpdateNodeRef>(m_ptr, "CSelectorUpdateNode", "m_children", false, value);
}

std::vector<int8> GCSelectorUpdateNode::GetTags() const {
    CUtlVector<int8>* vec = GetSchemaValue<CUtlVector<int8>*>(m_ptr, "CSelectorUpdateNode", "m_tags"); std::vector<int8> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSelectorUpdateNode::SetTags(std::vector<int8> value) {
    SetSchemaValueCUtlVector<int8>(m_ptr, "CSelectorUpdateNode", "m_tags", false, value);
}

GCBlendCurve GCSelectorUpdateNode::GetBlendCurve() const {
    return GetSchemaValue<GCBlendCurve>(m_ptr, "CSelectorUpdateNode", "m_blendCurve");
}

void GCSelectorUpdateNode::SetBlendCurve(GCBlendCurve value) {
    SetSchemaValue(m_ptr, "CSelectorUpdateNode", "m_blendCurve", false, value);
}

GCAnimParamHandle GCSelectorUpdateNode::GetParameter() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CSelectorUpdateNode", "m_hParameter");
}

void GCSelectorUpdateNode::SetParameter(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CSelectorUpdateNode", "m_hParameter", false, value);
}

int32_t GCSelectorUpdateNode::GetTagIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSelectorUpdateNode", "m_nTagIndex");
}

void GCSelectorUpdateNode::SetTagIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CSelectorUpdateNode", "m_nTagIndex", false, value);
}

SelectorTagBehavior_t GCSelectorUpdateNode::GetTagBehavior() const {
    return GetSchemaValue<SelectorTagBehavior_t>(m_ptr, "CSelectorUpdateNode", "m_eTagBehavior");
}

void GCSelectorUpdateNode::SetTagBehavior(SelectorTagBehavior_t value) {
    SetSchemaValue(m_ptr, "CSelectorUpdateNode", "m_eTagBehavior", false, value);
}

bool GCSelectorUpdateNode::GetResetOnChange() const {
    return GetSchemaValue<bool>(m_ptr, "CSelectorUpdateNode", "m_bResetOnChange");
}

void GCSelectorUpdateNode::SetResetOnChange(bool value) {
    SetSchemaValue(m_ptr, "CSelectorUpdateNode", "m_bResetOnChange", false, value);
}

bool GCSelectorUpdateNode::GetLockWhenWaning() const {
    return GetSchemaValue<bool>(m_ptr, "CSelectorUpdateNode", "m_bLockWhenWaning");
}

void GCSelectorUpdateNode::SetLockWhenWaning(bool value) {
    SetSchemaValue(m_ptr, "CSelectorUpdateNode", "m_bLockWhenWaning", false, value);
}

bool GCSelectorUpdateNode::GetSyncCyclesOnChange() const {
    return GetSchemaValue<bool>(m_ptr, "CSelectorUpdateNode", "m_bSyncCyclesOnChange");
}

void GCSelectorUpdateNode::SetSyncCyclesOnChange(bool value) {
    SetSchemaValue(m_ptr, "CSelectorUpdateNode", "m_bSyncCyclesOnChange", false, value);
}

std::string GCSelectorUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSelectorUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GCAimCameraUpdateNode::GCAimCameraUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAimCameraUpdateNode::GCAimCameraUpdateNode(void *ptr) {
    m_ptr = ptr;
}

GCAnimParamHandle GCAimCameraUpdateNode::GetParameterPosition() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CAimCameraUpdateNode", "m_hParameterPosition");
}

void GCAimCameraUpdateNode::SetParameterPosition(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CAimCameraUpdateNode", "m_hParameterPosition", false, value);
}

GCAnimParamHandle GCAimCameraUpdateNode::GetParameterOrientation() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CAimCameraUpdateNode", "m_hParameterOrientation");
}

void GCAimCameraUpdateNode::SetParameterOrientation(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CAimCameraUpdateNode", "m_hParameterOrientation", false, value);
}

GCAnimParamHandle GCAimCameraUpdateNode::GetParameterSpineRotationWeight() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CAimCameraUpdateNode", "m_hParameterSpineRotationWeight");
}

void GCAimCameraUpdateNode::SetParameterSpineRotationWeight(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CAimCameraUpdateNode", "m_hParameterSpineRotationWeight", false, value);
}

GCAnimParamHandle GCAimCameraUpdateNode::GetParameterPelvisOffset() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CAimCameraUpdateNode", "m_hParameterPelvisOffset");
}

void GCAimCameraUpdateNode::SetParameterPelvisOffset(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CAimCameraUpdateNode", "m_hParameterPelvisOffset", false, value);
}

GCAnimParamHandle GCAimCameraUpdateNode::GetParameterUseIK() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CAimCameraUpdateNode", "m_hParameterUseIK");
}

void GCAimCameraUpdateNode::SetParameterUseIK(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CAimCameraUpdateNode", "m_hParameterUseIK", false, value);
}

GCAnimParamHandle GCAimCameraUpdateNode::GetParameterWeaponDepenetrationDistance() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CAimCameraUpdateNode", "m_hParameterWeaponDepenetrationDistance");
}

void GCAimCameraUpdateNode::SetParameterWeaponDepenetrationDistance(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CAimCameraUpdateNode", "m_hParameterWeaponDepenetrationDistance", false, value);
}

GCAnimParamHandle GCAimCameraUpdateNode::GetParameterCameraClearanceDistance() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CAimCameraUpdateNode", "m_hParameterCameraClearanceDistance");
}

void GCAimCameraUpdateNode::SetParameterCameraClearanceDistance(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CAimCameraUpdateNode", "m_hParameterCameraClearanceDistance", false, value);
}

GAimCameraOpFixedSettings_t GCAimCameraUpdateNode::GetOpFixedSettings() const {
    return GetSchemaValue<GAimCameraOpFixedSettings_t>(m_ptr, "CAimCameraUpdateNode", "m_opFixedSettings");
}

void GCAimCameraUpdateNode::SetOpFixedSettings(GAimCameraOpFixedSettings_t value) {
    SetSchemaValue(m_ptr, "CAimCameraUpdateNode", "m_opFixedSettings", false, value);
}

std::string GCAimCameraUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAimCameraUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GCFootStepTriggerUpdateNode::GCFootStepTriggerUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFootStepTriggerUpdateNode::GCFootStepTriggerUpdateNode(void *ptr) {
    m_ptr = ptr;
}

std::vector<GFootStepTrigger> GCFootStepTriggerUpdateNode::GetTriggers() const {
    CUtlVector<GFootStepTrigger>* vec = GetSchemaValue<CUtlVector<GFootStepTrigger>*>(m_ptr, "CFootStepTriggerUpdateNode", "m_triggers"); std::vector<GFootStepTrigger> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCFootStepTriggerUpdateNode::SetTriggers(std::vector<GFootStepTrigger> value) {
    SetSchemaValueCUtlVector<GFootStepTrigger>(m_ptr, "CFootStepTriggerUpdateNode", "m_triggers", false, value);
}

float GCFootStepTriggerUpdateNode::GetTolerance() const {
    return GetSchemaValue<float>(m_ptr, "CFootStepTriggerUpdateNode", "m_flTolerance");
}

void GCFootStepTriggerUpdateNode::SetTolerance(float value) {
    SetSchemaValue(m_ptr, "CFootStepTriggerUpdateNode", "m_flTolerance", false, value);
}

std::string GCFootStepTriggerUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFootStepTriggerUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GRnSoftbodyParticle_t::GRnSoftbodyParticle_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GRnSoftbodyParticle_t::GRnSoftbodyParticle_t(void *ptr) {
    m_ptr = ptr;
}

float GRnSoftbodyParticle_t::GetMassInv() const {
    return GetSchemaValue<float>(m_ptr, "RnSoftbodyParticle_t", "m_flMassInv");
}

void GRnSoftbodyParticle_t::SetMassInv(float value) {
    SetSchemaValue(m_ptr, "RnSoftbodyParticle_t", "m_flMassInv", true, value);
}

std::string GRnSoftbodyParticle_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GRnSoftbodyParticle_t::IsValid() {
    return (m_ptr != nullptr);
}

GCSingleFrameUpdateNode::GCSingleFrameUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSingleFrameUpdateNode::GCSingleFrameUpdateNode(void *ptr) {
    m_ptr = ptr;
}

GCPoseHandle GCSingleFrameUpdateNode::GetPoseCacheHandle() const {
    return GetSchemaValue<GCPoseHandle>(m_ptr, "CSingleFrameUpdateNode", "m_hPoseCacheHandle");
}

void GCSingleFrameUpdateNode::SetPoseCacheHandle(GCPoseHandle value) {
    SetSchemaValue(m_ptr, "CSingleFrameUpdateNode", "m_hPoseCacheHandle", false, value);
}

float GCSingleFrameUpdateNode::GetCycle() const {
    return GetSchemaValue<float>(m_ptr, "CSingleFrameUpdateNode", "m_flCycle");
}

void GCSingleFrameUpdateNode::SetCycle(float value) {
    SetSchemaValue(m_ptr, "CSingleFrameUpdateNode", "m_flCycle", false, value);
}

std::string GCSingleFrameUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSingleFrameUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GCSeqSynthAnimDesc::GCSeqSynthAnimDesc(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSeqSynthAnimDesc::GCSeqSynthAnimDesc(void *ptr) {
    m_ptr = ptr;
}

CBufferString GCSeqSynthAnimDesc::GetName() const {
    return GetSchemaValue<CBufferString>(m_ptr, "CSeqSynthAnimDesc", "m_sName");
}

void GCSeqSynthAnimDesc::SetName(CBufferString value) {
    SetSchemaValue(m_ptr, "CSeqSynthAnimDesc", "m_sName", false, value);
}

GCSeqSeqDescFlag GCSeqSynthAnimDesc::GetFlags() const {
    return GetSchemaValue<GCSeqSeqDescFlag>(m_ptr, "CSeqSynthAnimDesc", "m_flags");
}

void GCSeqSynthAnimDesc::SetFlags(GCSeqSeqDescFlag value) {
    SetSchemaValue(m_ptr, "CSeqSynthAnimDesc", "m_flags", false, value);
}

GCSeqTransition GCSeqSynthAnimDesc::GetTransition() const {
    return GetSchemaValue<GCSeqTransition>(m_ptr, "CSeqSynthAnimDesc", "m_transition");
}

void GCSeqSynthAnimDesc::SetTransition(GCSeqTransition value) {
    SetSchemaValue(m_ptr, "CSeqSynthAnimDesc", "m_transition", false, value);
}

int16_t GCSeqSynthAnimDesc::GetLocalBaseReference() const {
    return GetSchemaValue<int16_t>(m_ptr, "CSeqSynthAnimDesc", "m_nLocalBaseReference");
}

void GCSeqSynthAnimDesc::SetLocalBaseReference(int16_t value) {
    SetSchemaValue(m_ptr, "CSeqSynthAnimDesc", "m_nLocalBaseReference", false, value);
}

int16_t GCSeqSynthAnimDesc::GetLocalBoneMask() const {
    return GetSchemaValue<int16_t>(m_ptr, "CSeqSynthAnimDesc", "m_nLocalBoneMask");
}

void GCSeqSynthAnimDesc::SetLocalBoneMask(int16_t value) {
    SetSchemaValue(m_ptr, "CSeqSynthAnimDesc", "m_nLocalBoneMask", false, value);
}

std::vector<GCAnimActivity> GCSeqSynthAnimDesc::GetActivityArray() const {
    CUtlVector<GCAnimActivity>* vec = GetSchemaValue<CUtlVector<GCAnimActivity>*>(m_ptr, "CSeqSynthAnimDesc", "m_activityArray"); std::vector<GCAnimActivity> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSeqSynthAnimDesc::SetActivityArray(std::vector<GCAnimActivity> value) {
    SetSchemaValueCUtlVector<GCAnimActivity>(m_ptr, "CSeqSynthAnimDesc", "m_activityArray", false, value);
}

std::string GCSeqSynthAnimDesc::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSeqSynthAnimDesc::IsValid() {
    return (m_ptr != nullptr);
}

GCDirectPlaybackTagData::GCDirectPlaybackTagData(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCDirectPlaybackTagData::GCDirectPlaybackTagData(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCDirectPlaybackTagData::GetSequenceName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CDirectPlaybackTagData", "m_sequenceName");
}

void GCDirectPlaybackTagData::SetSequenceName(CUtlString value) {
    SetSchemaValue(m_ptr, "CDirectPlaybackTagData", "m_sequenceName", false, value);
}

std::vector<GTagSpan_t> GCDirectPlaybackTagData::GetTags() const {
    CUtlVector<GTagSpan_t>* vec = GetSchemaValue<CUtlVector<GTagSpan_t>*>(m_ptr, "CDirectPlaybackTagData", "m_tags"); std::vector<GTagSpan_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCDirectPlaybackTagData::SetTags(std::vector<GTagSpan_t> value) {
    SetSchemaValueCUtlVector<GTagSpan_t>(m_ptr, "CDirectPlaybackTagData", "m_tags", false, value);
}

std::string GCDirectPlaybackTagData::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCDirectPlaybackTagData::IsValid() {
    return (m_ptr != nullptr);
}

GEventFrameBoundary_t::GEventFrameBoundary_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEventFrameBoundary_t::GEventFrameBoundary_t(void *ptr) {
    m_ptr = ptr;
}

float GEventFrameBoundary_t::GetFrameTime() const {
    return GetSchemaValue<float>(m_ptr, "EventFrameBoundary_t", "m_flFrameTime");
}

void GEventFrameBoundary_t::SetFrameTime(float value) {
    SetSchemaValue(m_ptr, "EventFrameBoundary_t", "m_flFrameTime", true, value);
}

std::string GEventFrameBoundary_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEventFrameBoundary_t::IsValid() {
    return (m_ptr != nullptr);
}

GWorldNode_t::GWorldNode_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GWorldNode_t::GWorldNode_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<GSceneObject_t> GWorldNode_t::GetSceneObjects() const {
    CUtlVector<GSceneObject_t>* vec = GetSchemaValue<CUtlVector<GSceneObject_t>*>(m_ptr, "WorldNode_t", "m_sceneObjects"); std::vector<GSceneObject_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GWorldNode_t::SetSceneObjects(std::vector<GSceneObject_t> value) {
    SetSchemaValueCUtlVector<GSceneObject_t>(m_ptr, "WorldNode_t", "m_sceneObjects", true, value);
}

std::vector<GInfoOverlayData_t> GWorldNode_t::GetInfoOverlays() const {
    CUtlVector<GInfoOverlayData_t>* vec = GetSchemaValue<CUtlVector<GInfoOverlayData_t>*>(m_ptr, "WorldNode_t", "m_infoOverlays"); std::vector<GInfoOverlayData_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GWorldNode_t::SetInfoOverlays(std::vector<GInfoOverlayData_t> value) {
    SetSchemaValueCUtlVector<GInfoOverlayData_t>(m_ptr, "WorldNode_t", "m_infoOverlays", true, value);
}

std::vector<uint16> GWorldNode_t::GetVisClusterMembership() const {
    CUtlVector<uint16>* vec = GetSchemaValue<CUtlVector<uint16>*>(m_ptr, "WorldNode_t", "m_visClusterMembership"); std::vector<uint16> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GWorldNode_t::SetVisClusterMembership(std::vector<uint16> value) {
    SetSchemaValueCUtlVector<uint16>(m_ptr, "WorldNode_t", "m_visClusterMembership", true, value);
}

std::vector<GAggregateSceneObject_t> GWorldNode_t::GetAggregateSceneObjects() const {
    CUtlVector<GAggregateSceneObject_t>* vec = GetSchemaValue<CUtlVector<GAggregateSceneObject_t>*>(m_ptr, "WorldNode_t", "m_aggregateSceneObjects"); std::vector<GAggregateSceneObject_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GWorldNode_t::SetAggregateSceneObjects(std::vector<GAggregateSceneObject_t> value) {
    SetSchemaValueCUtlVector<GAggregateSceneObject_t>(m_ptr, "WorldNode_t", "m_aggregateSceneObjects", true, value);
}

std::vector<GClutterSceneObject_t> GWorldNode_t::GetClutterSceneObjects() const {
    CUtlVector<GClutterSceneObject_t>* vec = GetSchemaValue<CUtlVector<GClutterSceneObject_t>*>(m_ptr, "WorldNode_t", "m_clutterSceneObjects"); std::vector<GClutterSceneObject_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GWorldNode_t::SetClutterSceneObjects(std::vector<GClutterSceneObject_t> value) {
    SetSchemaValueCUtlVector<GClutterSceneObject_t>(m_ptr, "WorldNode_t", "m_clutterSceneObjects", true, value);
}

std::vector<GExtraVertexStreamOverride_t> GWorldNode_t::GetExtraVertexStreamOverrides() const {
    CUtlVector<GExtraVertexStreamOverride_t>* vec = GetSchemaValue<CUtlVector<GExtraVertexStreamOverride_t>*>(m_ptr, "WorldNode_t", "m_extraVertexStreamOverrides"); std::vector<GExtraVertexStreamOverride_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GWorldNode_t::SetExtraVertexStreamOverrides(std::vector<GExtraVertexStreamOverride_t> value) {
    SetSchemaValueCUtlVector<GExtraVertexStreamOverride_t>(m_ptr, "WorldNode_t", "m_extraVertexStreamOverrides", true, value);
}

std::vector<GMaterialOverride_t> GWorldNode_t::GetMaterialOverrides() const {
    CUtlVector<GMaterialOverride_t>* vec = GetSchemaValue<CUtlVector<GMaterialOverride_t>*>(m_ptr, "WorldNode_t", "m_materialOverrides"); std::vector<GMaterialOverride_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GWorldNode_t::SetMaterialOverrides(std::vector<GMaterialOverride_t> value) {
    SetSchemaValueCUtlVector<GMaterialOverride_t>(m_ptr, "WorldNode_t", "m_materialOverrides", true, value);
}

std::vector<GWorldNodeOnDiskBufferData_t> GWorldNode_t::GetExtraVertexStreams() const {
    CUtlVector<GWorldNodeOnDiskBufferData_t>* vec = GetSchemaValue<CUtlVector<GWorldNodeOnDiskBufferData_t>*>(m_ptr, "WorldNode_t", "m_extraVertexStreams"); std::vector<GWorldNodeOnDiskBufferData_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GWorldNode_t::SetExtraVertexStreams(std::vector<GWorldNodeOnDiskBufferData_t> value) {
    SetSchemaValueCUtlVector<GWorldNodeOnDiskBufferData_t>(m_ptr, "WorldNode_t", "m_extraVertexStreams", true, value);
}

std::vector<CUtlString> GWorldNode_t::GetLayerNames() const {
    CUtlVector<CUtlString>* vec = GetSchemaValue<CUtlVector<CUtlString>*>(m_ptr, "WorldNode_t", "m_layerNames"); std::vector<CUtlString> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GWorldNode_t::SetLayerNames(std::vector<CUtlString> value) {
    SetSchemaValueCUtlVector<CUtlString>(m_ptr, "WorldNode_t", "m_layerNames", true, value);
}

std::vector<uint8> GWorldNode_t::GetSceneObjectLayerIndices() const {
    CUtlVector<uint8>* vec = GetSchemaValue<CUtlVector<uint8>*>(m_ptr, "WorldNode_t", "m_sceneObjectLayerIndices"); std::vector<uint8> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GWorldNode_t::SetSceneObjectLayerIndices(std::vector<uint8> value) {
    SetSchemaValueCUtlVector<uint8>(m_ptr, "WorldNode_t", "m_sceneObjectLayerIndices", true, value);
}

std::vector<uint8> GWorldNode_t::GetOverlayLayerIndices() const {
    CUtlVector<uint8>* vec = GetSchemaValue<CUtlVector<uint8>*>(m_ptr, "WorldNode_t", "m_overlayLayerIndices"); std::vector<uint8> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GWorldNode_t::SetOverlayLayerIndices(std::vector<uint8> value) {
    SetSchemaValueCUtlVector<uint8>(m_ptr, "WorldNode_t", "m_overlayLayerIndices", true, value);
}

CUtlString GWorldNode_t::GetGrassFileName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "WorldNode_t", "m_grassFileName");
}

void GWorldNode_t::SetGrassFileName(CUtlString value) {
    SetSchemaValue(m_ptr, "WorldNode_t", "m_grassFileName", true, value);
}

GBakedLightingInfo_t GWorldNode_t::GetNodeLightingInfo() const {
    return GetSchemaValue<GBakedLightingInfo_t>(m_ptr, "WorldNode_t", "m_nodeLightingInfo");
}

void GWorldNode_t::SetNodeLightingInfo(GBakedLightingInfo_t value) {
    SetSchemaValue(m_ptr, "WorldNode_t", "m_nodeLightingInfo", true, value);
}

std::string GWorldNode_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GWorldNode_t::IsValid() {
    return (m_ptr != nullptr);
}

GAggregateMeshInfo_t::GAggregateMeshInfo_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GAggregateMeshInfo_t::GAggregateMeshInfo_t(void *ptr) {
    m_ptr = ptr;
}

uint32_t GAggregateMeshInfo_t::GetVisClusterMemberOffset() const {
    return GetSchemaValue<uint32_t>(m_ptr, "AggregateMeshInfo_t", "m_nVisClusterMemberOffset");
}

void GAggregateMeshInfo_t::SetVisClusterMemberOffset(uint32_t value) {
    SetSchemaValue(m_ptr, "AggregateMeshInfo_t", "m_nVisClusterMemberOffset", true, value);
}

uint8_t GAggregateMeshInfo_t::GetVisClusterMemberCount() const {
    return GetSchemaValue<uint8_t>(m_ptr, "AggregateMeshInfo_t", "m_nVisClusterMemberCount");
}

void GAggregateMeshInfo_t::SetVisClusterMemberCount(uint8_t value) {
    SetSchemaValue(m_ptr, "AggregateMeshInfo_t", "m_nVisClusterMemberCount", true, value);
}

bool GAggregateMeshInfo_t::GetHasTransform() const {
    return GetSchemaValue<bool>(m_ptr, "AggregateMeshInfo_t", "m_bHasTransform");
}

void GAggregateMeshInfo_t::SetHasTransform(bool value) {
    SetSchemaValue(m_ptr, "AggregateMeshInfo_t", "m_bHasTransform", true, value);
}

int16_t GAggregateMeshInfo_t::GetDrawCallIndex() const {
    return GetSchemaValue<int16_t>(m_ptr, "AggregateMeshInfo_t", "m_nDrawCallIndex");
}

void GAggregateMeshInfo_t::SetDrawCallIndex(int16_t value) {
    SetSchemaValue(m_ptr, "AggregateMeshInfo_t", "m_nDrawCallIndex", true, value);
}

int16_t GAggregateMeshInfo_t::GetLODSetupIndex() const {
    return GetSchemaValue<int16_t>(m_ptr, "AggregateMeshInfo_t", "m_nLODSetupIndex");
}

void GAggregateMeshInfo_t::SetLODSetupIndex(int16_t value) {
    SetSchemaValue(m_ptr, "AggregateMeshInfo_t", "m_nLODSetupIndex", true, value);
}

uint8_t GAggregateMeshInfo_t::GetLODGroupMask() const {
    return GetSchemaValue<uint8_t>(m_ptr, "AggregateMeshInfo_t", "m_nLODGroupMask");
}

void GAggregateMeshInfo_t::SetLODGroupMask(uint8_t value) {
    SetSchemaValue(m_ptr, "AggregateMeshInfo_t", "m_nLODGroupMask", true, value);
}

Color GAggregateMeshInfo_t::GetTintColor() const {
    return GetSchemaValue<Color>(m_ptr, "AggregateMeshInfo_t", "m_vTintColor");
}

void GAggregateMeshInfo_t::SetTintColor(Color value) {
    SetSchemaValue(m_ptr, "AggregateMeshInfo_t", "m_vTintColor", true, value);
}

ObjectTypeFlags_t GAggregateMeshInfo_t::GetObjectFlags() const {
    return GetSchemaValue<ObjectTypeFlags_t>(m_ptr, "AggregateMeshInfo_t", "m_objectFlags");
}

void GAggregateMeshInfo_t::SetObjectFlags(ObjectTypeFlags_t value) {
    SetSchemaValue(m_ptr, "AggregateMeshInfo_t", "m_objectFlags", true, value);
}

int32_t GAggregateMeshInfo_t::GetLightProbeVolumePrecomputedHandshake() const {
    return GetSchemaValue<int32_t>(m_ptr, "AggregateMeshInfo_t", "m_nLightProbeVolumePrecomputedHandshake");
}

void GAggregateMeshInfo_t::SetLightProbeVolumePrecomputedHandshake(int32_t value) {
    SetSchemaValue(m_ptr, "AggregateMeshInfo_t", "m_nLightProbeVolumePrecomputedHandshake", true, value);
}

std::string GAggregateMeshInfo_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GAggregateMeshInfo_t::IsValid() {
    return (m_ptr != nullptr);
}

GFeSimdRodConstraintAnim_t::GFeSimdRodConstraintAnim_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeSimdRodConstraintAnim_t::GFeSimdRodConstraintAnim_t(void *ptr) {
    m_ptr = ptr;
}

float GFeSimdRodConstraintAnim_t::Get4Weight0() const {
    return GetSchemaValue<float>(m_ptr, "FeSimdRodConstraintAnim_t", "f4Weight0");
}

void GFeSimdRodConstraintAnim_t::Set4Weight0(float value) {
    SetSchemaValue(m_ptr, "FeSimdRodConstraintAnim_t", "f4Weight0", true, value);
}

float GFeSimdRodConstraintAnim_t::Get4RelaxationFactor() const {
    return GetSchemaValue<float>(m_ptr, "FeSimdRodConstraintAnim_t", "f4RelaxationFactor");
}

void GFeSimdRodConstraintAnim_t::Set4RelaxationFactor(float value) {
    SetSchemaValue(m_ptr, "FeSimdRodConstraintAnim_t", "f4RelaxationFactor", true, value);
}

std::string GFeSimdRodConstraintAnim_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeSimdRodConstraintAnim_t::IsValid() {
    return (m_ptr != nullptr);
}

GEventPostAdvanceTick_t::GEventPostAdvanceTick_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEventPostAdvanceTick_t::GEventPostAdvanceTick_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GEventPostAdvanceTick_t::GetCurrentTick() const {
    return GetSchemaValue<int32_t>(m_ptr, "EventPostAdvanceTick_t", "m_nCurrentTick");
}

void GEventPostAdvanceTick_t::SetCurrentTick(int32_t value) {
    SetSchemaValue(m_ptr, "EventPostAdvanceTick_t", "m_nCurrentTick", true, value);
}

int32_t GEventPostAdvanceTick_t::GetCurrentTickThisFrame() const {
    return GetSchemaValue<int32_t>(m_ptr, "EventPostAdvanceTick_t", "m_nCurrentTickThisFrame");
}

void GEventPostAdvanceTick_t::SetCurrentTickThisFrame(int32_t value) {
    SetSchemaValue(m_ptr, "EventPostAdvanceTick_t", "m_nCurrentTickThisFrame", true, value);
}

int32_t GEventPostAdvanceTick_t::GetTotalTicksThisFrame() const {
    return GetSchemaValue<int32_t>(m_ptr, "EventPostAdvanceTick_t", "m_nTotalTicksThisFrame");
}

void GEventPostAdvanceTick_t::SetTotalTicksThisFrame(int32_t value) {
    SetSchemaValue(m_ptr, "EventPostAdvanceTick_t", "m_nTotalTicksThisFrame", true, value);
}

int32_t GEventPostAdvanceTick_t::GetTotalTicks() const {
    return GetSchemaValue<int32_t>(m_ptr, "EventPostAdvanceTick_t", "m_nTotalTicks");
}

void GEventPostAdvanceTick_t::SetTotalTicks(int32_t value) {
    SetSchemaValue(m_ptr, "EventPostAdvanceTick_t", "m_nTotalTicks", true, value);
}

std::string GEventPostAdvanceTick_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEventPostAdvanceTick_t::IsValid() {
    return (m_ptr != nullptr);
}

GFeBuildBoxRigid_t::GFeBuildBoxRigid_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeBuildBoxRigid_t::GFeBuildBoxRigid_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GFeBuildBoxRigid_t::GetPriority() const {
    return GetSchemaValue<int32_t>(m_ptr, "FeBuildBoxRigid_t", "m_nPriority");
}

void GFeBuildBoxRigid_t::SetPriority(int32_t value) {
    SetSchemaValue(m_ptr, "FeBuildBoxRigid_t", "m_nPriority", true, value);
}

uint32_t GFeBuildBoxRigid_t::GetVertexMapHash() const {
    return GetSchemaValue<uint32_t>(m_ptr, "FeBuildBoxRigid_t", "m_nVertexMapHash");
}

void GFeBuildBoxRigid_t::SetVertexMapHash(uint32_t value) {
    SetSchemaValue(m_ptr, "FeBuildBoxRigid_t", "m_nVertexMapHash", true, value);
}

std::string GFeBuildBoxRigid_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeBuildBoxRigid_t::IsValid() {
    return (m_ptr != nullptr);
}

GIPhysicsPlayerController::GIPhysicsPlayerController(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GIPhysicsPlayerController::GIPhysicsPlayerController(void *ptr) {
    m_ptr = ptr;
}

std::string GIPhysicsPlayerController::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GIPhysicsPlayerController::IsValid() {
    return (m_ptr != nullptr);
}

GEventServerPostAdvanceTick_t::GEventServerPostAdvanceTick_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEventServerPostAdvanceTick_t::GEventServerPostAdvanceTick_t(void *ptr) {
    m_ptr = ptr;
}

std::string GEventServerPostAdvanceTick_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEventServerPostAdvanceTick_t::IsValid() {
    return (m_ptr != nullptr);
}

GEventClientPreOutput_t::GEventClientPreOutput_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEventClientPreOutput_t::GEventClientPreOutput_t(void *ptr) {
    m_ptr = ptr;
}

GEngineLoopState_t GEventClientPreOutput_t::GetLoopState() const {
    return GetSchemaValue<GEngineLoopState_t>(m_ptr, "EventClientPreOutput_t", "m_LoopState");
}

void GEventClientPreOutput_t::SetLoopState(GEngineLoopState_t value) {
    SetSchemaValue(m_ptr, "EventClientPreOutput_t", "m_LoopState", true, value);
}

double GEventClientPreOutput_t::GetRenderTime() const {
    return GetSchemaValue<double>(m_ptr, "EventClientPreOutput_t", "m_flRenderTime");
}

void GEventClientPreOutput_t::SetRenderTime(double value) {
    SetSchemaValue(m_ptr, "EventClientPreOutput_t", "m_flRenderTime", true, value);
}

double GEventClientPreOutput_t::GetRenderFrameTime() const {
    return GetSchemaValue<double>(m_ptr, "EventClientPreOutput_t", "m_flRenderFrameTime");
}

void GEventClientPreOutput_t::SetRenderFrameTime(double value) {
    SetSchemaValue(m_ptr, "EventClientPreOutput_t", "m_flRenderFrameTime", true, value);
}

double GEventClientPreOutput_t::GetRenderFrameTimeUnbounded() const {
    return GetSchemaValue<double>(m_ptr, "EventClientPreOutput_t", "m_flRenderFrameTimeUnbounded");
}

void GEventClientPreOutput_t::SetRenderFrameTimeUnbounded(double value) {
    SetSchemaValue(m_ptr, "EventClientPreOutput_t", "m_flRenderFrameTimeUnbounded", true, value);
}

float GEventClientPreOutput_t::GetRealTime() const {
    return GetSchemaValue<float>(m_ptr, "EventClientPreOutput_t", "m_flRealTime");
}

void GEventClientPreOutput_t::SetRealTime(float value) {
    SetSchemaValue(m_ptr, "EventClientPreOutput_t", "m_flRealTime", true, value);
}

bool GEventClientPreOutput_t::GetRenderOnly() const {
    return GetSchemaValue<bool>(m_ptr, "EventClientPreOutput_t", "m_bRenderOnly");
}

void GEventClientPreOutput_t::SetRenderOnly(bool value) {
    SetSchemaValue(m_ptr, "EventClientPreOutput_t", "m_bRenderOnly", true, value);
}

std::string GEventClientPreOutput_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEventClientPreOutput_t::IsValid() {
    return (m_ptr != nullptr);
}

GRnSoftbodySpring_t::GRnSoftbodySpring_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GRnSoftbodySpring_t::GRnSoftbodySpring_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<uint16_t> GRnSoftbodySpring_t::GetParticle() const {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "RnSoftbodySpring_t", "m_nParticle"); std::vector<uint16_t> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}

void GRnSoftbodySpring_t::SetParticle(std::vector<uint16_t> value) {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "RnSoftbodySpring_t", "m_nParticle"); for(int i = 0; i < 2; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "RnSoftbodySpring_t", "m_nParticle", true, outValue);
}

float GRnSoftbodySpring_t::GetLength() const {
    return GetSchemaValue<float>(m_ptr, "RnSoftbodySpring_t", "m_flLength");
}

void GRnSoftbodySpring_t::SetLength(float value) {
    SetSchemaValue(m_ptr, "RnSoftbodySpring_t", "m_flLength", true, value);
}

std::string GRnSoftbodySpring_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GRnSoftbodySpring_t::IsValid() {
    return (m_ptr != nullptr);
}

GFeNodeReverseOffset_t::GFeNodeReverseOffset_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeNodeReverseOffset_t::GFeNodeReverseOffset_t(void *ptr) {
    m_ptr = ptr;
}

Vector GFeNodeReverseOffset_t::GetOffset() const {
    return GetSchemaValue<Vector>(m_ptr, "FeNodeReverseOffset_t", "vOffset");
}

void GFeNodeReverseOffset_t::SetOffset(Vector value) {
    SetSchemaValue(m_ptr, "FeNodeReverseOffset_t", "vOffset", true, value);
}

uint16_t GFeNodeReverseOffset_t::GetBoneCtrl() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeNodeReverseOffset_t", "nBoneCtrl");
}

void GFeNodeReverseOffset_t::SetBoneCtrl(uint16_t value) {
    SetSchemaValue(m_ptr, "FeNodeReverseOffset_t", "nBoneCtrl", true, value);
}

uint16_t GFeNodeReverseOffset_t::GetTargetNode() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeNodeReverseOffset_t", "nTargetNode");
}

void GFeNodeReverseOffset_t::SetTargetNode(uint16_t value) {
    SetSchemaValue(m_ptr, "FeNodeReverseOffset_t", "nTargetNode", true, value);
}

std::string GFeNodeReverseOffset_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeNodeReverseOffset_t::IsValid() {
    return (m_ptr != nullptr);
}

GRnHullDesc_t::GRnHullDesc_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GRnHullDesc_t::GRnHullDesc_t(void *ptr) {
    m_ptr = ptr;
}

GRnHull_t GRnHullDesc_t::GetHull() const {
    return GetSchemaValue<GRnHull_t>(m_ptr, "RnHullDesc_t", "m_Hull");
}

void GRnHullDesc_t::SetHull(GRnHull_t value) {
    SetSchemaValue(m_ptr, "RnHullDesc_t", "m_Hull", true, value);
}

std::string GRnHullDesc_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GRnHullDesc_t::IsValid() {
    return (m_ptr != nullptr);
}

GCSymbolAnimParameter::GCSymbolAnimParameter(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSymbolAnimParameter::GCSymbolAnimParameter(void *ptr) {
    m_ptr = ptr;
}

std::string GCSymbolAnimParameter::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSymbolAnimParameter::IsValid() {
    return (m_ptr != nullptr);
}

GFeStiffHingeBuild_t::GFeStiffHingeBuild_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeStiffHingeBuild_t::GFeStiffHingeBuild_t(void *ptr) {
    m_ptr = ptr;
}

float GFeStiffHingeBuild_t::GetMaxAngle() const {
    return GetSchemaValue<float>(m_ptr, "FeStiffHingeBuild_t", "flMaxAngle");
}

void GFeStiffHingeBuild_t::SetMaxAngle(float value) {
    SetSchemaValue(m_ptr, "FeStiffHingeBuild_t", "flMaxAngle", true, value);
}

float GFeStiffHingeBuild_t::GetStrength() const {
    return GetSchemaValue<float>(m_ptr, "FeStiffHingeBuild_t", "flStrength");
}

void GFeStiffHingeBuild_t::SetStrength(float value) {
    SetSchemaValue(m_ptr, "FeStiffHingeBuild_t", "flStrength", true, value);
}

std::vector<float> GFeStiffHingeBuild_t::GetMotionBias() const {
    float* outValue = GetSchemaValue<float*>(m_ptr, "FeStiffHingeBuild_t", "flMotionBias"); std::vector<float> ret; for(int i = 0; i < 3; i++) { ret.push_back(outValue[i]); } return ret;
}

void GFeStiffHingeBuild_t::SetMotionBias(std::vector<float> value) {
    float* outValue = GetSchemaValue<float*>(m_ptr, "FeStiffHingeBuild_t", "flMotionBias"); for(int i = 0; i < 3; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "FeStiffHingeBuild_t", "flMotionBias", true, outValue);
}

std::vector<uint16_t> GFeStiffHingeBuild_t::GetNode() const {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeStiffHingeBuild_t", "nNode"); std::vector<uint16_t> ret; for(int i = 0; i < 3; i++) { ret.push_back(outValue[i]); } return ret;
}

void GFeStiffHingeBuild_t::SetNode(std::vector<uint16_t> value) {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeStiffHingeBuild_t", "nNode"); for(int i = 0; i < 3; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "FeStiffHingeBuild_t", "nNode", true, outValue);
}

std::string GFeStiffHingeBuild_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeStiffHingeBuild_t::IsValid() {
    return (m_ptr != nullptr);
}

GExtraVertexStreamOverride_t::GExtraVertexStreamOverride_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GExtraVertexStreamOverride_t::GExtraVertexStreamOverride_t(void *ptr) {
    m_ptr = ptr;
}

uint32_t GExtraVertexStreamOverride_t::GetSubSceneObject() const {
    return GetSchemaValue<uint32_t>(m_ptr, "ExtraVertexStreamOverride_t", "m_nSubSceneObject");
}

void GExtraVertexStreamOverride_t::SetSubSceneObject(uint32_t value) {
    SetSchemaValue(m_ptr, "ExtraVertexStreamOverride_t", "m_nSubSceneObject", true, value);
}

uint32_t GExtraVertexStreamOverride_t::GetDrawCallIndex() const {
    return GetSchemaValue<uint32_t>(m_ptr, "ExtraVertexStreamOverride_t", "m_nDrawCallIndex");
}

void GExtraVertexStreamOverride_t::SetDrawCallIndex(uint32_t value) {
    SetSchemaValue(m_ptr, "ExtraVertexStreamOverride_t", "m_nDrawCallIndex", true, value);
}

MeshDrawPrimitiveFlags_t GExtraVertexStreamOverride_t::GetAdditionalMeshDrawPrimitiveFlags() const {
    return GetSchemaValue<MeshDrawPrimitiveFlags_t>(m_ptr, "ExtraVertexStreamOverride_t", "m_nAdditionalMeshDrawPrimitiveFlags");
}

void GExtraVertexStreamOverride_t::SetAdditionalMeshDrawPrimitiveFlags(MeshDrawPrimitiveFlags_t value) {
    SetSchemaValue(m_ptr, "ExtraVertexStreamOverride_t", "m_nAdditionalMeshDrawPrimitiveFlags", true, value);
}

GCRenderBufferBinding GExtraVertexStreamOverride_t::GetExtraBufferBinding() const {
    return GetSchemaValue<GCRenderBufferBinding>(m_ptr, "ExtraVertexStreamOverride_t", "m_extraBufferBinding");
}

void GExtraVertexStreamOverride_t::SetExtraBufferBinding(GCRenderBufferBinding value) {
    SetSchemaValue(m_ptr, "ExtraVertexStreamOverride_t", "m_extraBufferBinding", true, value);
}

std::string GExtraVertexStreamOverride_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GExtraVertexStreamOverride_t::IsValid() {
    return (m_ptr != nullptr);
}

GEntityIOConnectionData_t::GEntityIOConnectionData_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEntityIOConnectionData_t::GEntityIOConnectionData_t(void *ptr) {
    m_ptr = ptr;
}

CUtlString GEntityIOConnectionData_t::GetOutputName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "EntityIOConnectionData_t", "m_outputName");
}

void GEntityIOConnectionData_t::SetOutputName(CUtlString value) {
    SetSchemaValue(m_ptr, "EntityIOConnectionData_t", "m_outputName", true, value);
}

uint32_t GEntityIOConnectionData_t::GetTargetType() const {
    return GetSchemaValue<uint32_t>(m_ptr, "EntityIOConnectionData_t", "m_targetType");
}

void GEntityIOConnectionData_t::SetTargetType(uint32_t value) {
    SetSchemaValue(m_ptr, "EntityIOConnectionData_t", "m_targetType", true, value);
}

CUtlString GEntityIOConnectionData_t::GetTargetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "EntityIOConnectionData_t", "m_targetName");
}

void GEntityIOConnectionData_t::SetTargetName(CUtlString value) {
    SetSchemaValue(m_ptr, "EntityIOConnectionData_t", "m_targetName", true, value);
}

CUtlString GEntityIOConnectionData_t::GetInputName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "EntityIOConnectionData_t", "m_inputName");
}

void GEntityIOConnectionData_t::SetInputName(CUtlString value) {
    SetSchemaValue(m_ptr, "EntityIOConnectionData_t", "m_inputName", true, value);
}

CUtlString GEntityIOConnectionData_t::GetOverrideParam() const {
    return GetSchemaValue<CUtlString>(m_ptr, "EntityIOConnectionData_t", "m_overrideParam");
}

void GEntityIOConnectionData_t::SetOverrideParam(CUtlString value) {
    SetSchemaValue(m_ptr, "EntityIOConnectionData_t", "m_overrideParam", true, value);
}

float GEntityIOConnectionData_t::GetDelay() const {
    return GetSchemaValue<float>(m_ptr, "EntityIOConnectionData_t", "m_flDelay");
}

void GEntityIOConnectionData_t::SetDelay(float value) {
    SetSchemaValue(m_ptr, "EntityIOConnectionData_t", "m_flDelay", true, value);
}

int32_t GEntityIOConnectionData_t::GetTimesToFire() const {
    return GetSchemaValue<int32_t>(m_ptr, "EntityIOConnectionData_t", "m_nTimesToFire");
}

void GEntityIOConnectionData_t::SetTimesToFire(int32_t value) {
    SetSchemaValue(m_ptr, "EntityIOConnectionData_t", "m_nTimesToFire", true, value);
}

std::string GEntityIOConnectionData_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEntityIOConnectionData_t::IsValid() {
    return (m_ptr != nullptr);
}

GSkeletonAnimCapture_t::GSkeletonAnimCapture_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GSkeletonAnimCapture_t::GSkeletonAnimCapture_t(void *ptr) {
    m_ptr = ptr;
}

CEntityIndex GSkeletonAnimCapture_t::GetEntIndex() const {
    return GetSchemaValue<CEntityIndex>(m_ptr, "SkeletonAnimCapture_t", "m_nEntIndex");
}

void GSkeletonAnimCapture_t::SetEntIndex(CEntityIndex value) {
    SetSchemaValue(m_ptr, "SkeletonAnimCapture_t", "m_nEntIndex", true, value);
}

CEntityIndex GSkeletonAnimCapture_t::GetEntParent() const {
    return GetSchemaValue<CEntityIndex>(m_ptr, "SkeletonAnimCapture_t", "m_nEntParent");
}

void GSkeletonAnimCapture_t::SetEntParent(CEntityIndex value) {
    SetSchemaValue(m_ptr, "SkeletonAnimCapture_t", "m_nEntParent", true, value);
}

std::vector<CEntityIndex> GSkeletonAnimCapture_t::GetImportedCollision() const {
    CUtlVector<CEntityIndex>* vec = GetSchemaValue<CUtlVector<CEntityIndex>*>(m_ptr, "SkeletonAnimCapture_t", "m_ImportedCollision"); std::vector<CEntityIndex> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GSkeletonAnimCapture_t::SetImportedCollision(std::vector<CEntityIndex> value) {
    SetSchemaValueCUtlVector<CEntityIndex>(m_ptr, "SkeletonAnimCapture_t", "m_ImportedCollision", true, value);
}

CUtlString GSkeletonAnimCapture_t::GetModelName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "SkeletonAnimCapture_t", "m_ModelName");
}

void GSkeletonAnimCapture_t::SetModelName(CUtlString value) {
    SetSchemaValue(m_ptr, "SkeletonAnimCapture_t", "m_ModelName", true, value);
}

CUtlString GSkeletonAnimCapture_t::GetCaptureName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "SkeletonAnimCapture_t", "m_CaptureName");
}

void GSkeletonAnimCapture_t::SetCaptureName(CUtlString value) {
    SetSchemaValue(m_ptr, "SkeletonAnimCapture_t", "m_CaptureName", true, value);
}

std::vector<GSkeletonAnimCapture_t> GSkeletonAnimCapture_t::GetModelBindPose() const {
    CUtlVector<GSkeletonAnimCapture_t>* vec = GetSchemaValue<CUtlVector<GSkeletonAnimCapture_t>*>(m_ptr, "SkeletonAnimCapture_t", "m_ModelBindPose"); std::vector<GSkeletonAnimCapture_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GSkeletonAnimCapture_t::SetModelBindPose(std::vector<GSkeletonAnimCapture_t> value) {
    SetSchemaValueCUtlVector<GSkeletonAnimCapture_t>(m_ptr, "SkeletonAnimCapture_t", "m_ModelBindPose", true, value);
}

std::vector<GSkeletonAnimCapture_t> GSkeletonAnimCapture_t::GetFeModelInitPose() const {
    CUtlVector<GSkeletonAnimCapture_t>* vec = GetSchemaValue<CUtlVector<GSkeletonAnimCapture_t>*>(m_ptr, "SkeletonAnimCapture_t", "m_FeModelInitPose"); std::vector<GSkeletonAnimCapture_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GSkeletonAnimCapture_t::SetFeModelInitPose(std::vector<GSkeletonAnimCapture_t> value) {
    SetSchemaValueCUtlVector<GSkeletonAnimCapture_t>(m_ptr, "SkeletonAnimCapture_t", "m_FeModelInitPose", true, value);
}

int32_t GSkeletonAnimCapture_t::GetFlexControllers() const {
    return GetSchemaValue<int32_t>(m_ptr, "SkeletonAnimCapture_t", "m_nFlexControllers");
}

void GSkeletonAnimCapture_t::SetFlexControllers(int32_t value) {
    SetSchemaValue(m_ptr, "SkeletonAnimCapture_t", "m_nFlexControllers", true, value);
}

bool GSkeletonAnimCapture_t::GetPredicted() const {
    return GetSchemaValue<bool>(m_ptr, "SkeletonAnimCapture_t", "m_bPredicted");
}

void GSkeletonAnimCapture_t::SetPredicted(bool value) {
    SetSchemaValue(m_ptr, "SkeletonAnimCapture_t", "m_bPredicted", true, value);
}

std::vector<GSkeletonAnimCapture_t> GSkeletonAnimCapture_t::GetFrames() const {
    CUtlVector<GSkeletonAnimCapture_t>* vec = GetSchemaValue<CUtlVector<GSkeletonAnimCapture_t>*>(m_ptr, "SkeletonAnimCapture_t", "m_Frames"); std::vector<GSkeletonAnimCapture_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GSkeletonAnimCapture_t::SetFrames(std::vector<GSkeletonAnimCapture_t> value) {
    SetSchemaValueCUtlVector<GSkeletonAnimCapture_t>(m_ptr, "SkeletonAnimCapture_t", "m_Frames", true, value);
}

std::string GSkeletonAnimCapture_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GSkeletonAnimCapture_t::IsValid() {
    return (m_ptr != nullptr);
}

GCStateActionUpdater::GCStateActionUpdater(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCStateActionUpdater::GCStateActionUpdater(void *ptr) {
    m_ptr = ptr;
}

StateActionBehavior GCStateActionUpdater::GetBehavior() const {
    return GetSchemaValue<StateActionBehavior>(m_ptr, "CStateActionUpdater", "m_eBehavior");
}

void GCStateActionUpdater::SetBehavior(StateActionBehavior value) {
    SetSchemaValue(m_ptr, "CStateActionUpdater", "m_eBehavior", false, value);
}

std::string GCStateActionUpdater::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCStateActionUpdater::IsValid() {
    return (m_ptr != nullptr);
}

GCSeqS1SeqDesc::GCSeqS1SeqDesc(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSeqS1SeqDesc::GCSeqS1SeqDesc(void *ptr) {
    m_ptr = ptr;
}

CBufferString GCSeqS1SeqDesc::GetName() const {
    return GetSchemaValue<CBufferString>(m_ptr, "CSeqS1SeqDesc", "m_sName");
}

void GCSeqS1SeqDesc::SetName(CBufferString value) {
    SetSchemaValue(m_ptr, "CSeqS1SeqDesc", "m_sName", false, value);
}

GCSeqSeqDescFlag GCSeqS1SeqDesc::GetFlags() const {
    return GetSchemaValue<GCSeqSeqDescFlag>(m_ptr, "CSeqS1SeqDesc", "m_flags");
}

void GCSeqS1SeqDesc::SetFlags(GCSeqSeqDescFlag value) {
    SetSchemaValue(m_ptr, "CSeqS1SeqDesc", "m_flags", false, value);
}

GCSeqMultiFetch GCSeqS1SeqDesc::GetFetch() const {
    return GetSchemaValue<GCSeqMultiFetch>(m_ptr, "CSeqS1SeqDesc", "m_fetch");
}

void GCSeqS1SeqDesc::SetFetch(GCSeqMultiFetch value) {
    SetSchemaValue(m_ptr, "CSeqS1SeqDesc", "m_fetch", false, value);
}

int32_t GCSeqS1SeqDesc::GetLocalWeightlist() const {
    return GetSchemaValue<int32_t>(m_ptr, "CSeqS1SeqDesc", "m_nLocalWeightlist");
}

void GCSeqS1SeqDesc::SetLocalWeightlist(int32_t value) {
    SetSchemaValue(m_ptr, "CSeqS1SeqDesc", "m_nLocalWeightlist", false, value);
}

std::vector<GCSeqAutoLayer> GCSeqS1SeqDesc::GetAutoLayerArray() const {
    CUtlVector<GCSeqAutoLayer>* vec = GetSchemaValue<CUtlVector<GCSeqAutoLayer>*>(m_ptr, "CSeqS1SeqDesc", "m_autoLayerArray"); std::vector<GCSeqAutoLayer> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSeqS1SeqDesc::SetAutoLayerArray(std::vector<GCSeqAutoLayer> value) {
    SetSchemaValueCUtlVector<GCSeqAutoLayer>(m_ptr, "CSeqS1SeqDesc", "m_autoLayerArray", false, value);
}

std::vector<GCSeqIKLock> GCSeqS1SeqDesc::GetIKLockArray() const {
    CUtlVector<GCSeqIKLock>* vec = GetSchemaValue<CUtlVector<GCSeqIKLock>*>(m_ptr, "CSeqS1SeqDesc", "m_IKLockArray"); std::vector<GCSeqIKLock> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSeqS1SeqDesc::SetIKLockArray(std::vector<GCSeqIKLock> value) {
    SetSchemaValueCUtlVector<GCSeqIKLock>(m_ptr, "CSeqS1SeqDesc", "m_IKLockArray", false, value);
}

GCSeqTransition GCSeqS1SeqDesc::GetTransition() const {
    return GetSchemaValue<GCSeqTransition>(m_ptr, "CSeqS1SeqDesc", "m_transition");
}

void GCSeqS1SeqDesc::SetTransition(GCSeqTransition value) {
    SetSchemaValue(m_ptr, "CSeqS1SeqDesc", "m_transition", false, value);
}

CBufferString GCSeqS1SeqDesc::GetLegacyKeyValueText() const {
    return GetSchemaValue<CBufferString>(m_ptr, "CSeqS1SeqDesc", "m_LegacyKeyValueText");
}

void GCSeqS1SeqDesc::SetLegacyKeyValueText(CBufferString value) {
    SetSchemaValue(m_ptr, "CSeqS1SeqDesc", "m_LegacyKeyValueText", false, value);
}

std::vector<GCAnimActivity> GCSeqS1SeqDesc::GetActivityArray() const {
    CUtlVector<GCAnimActivity>* vec = GetSchemaValue<CUtlVector<GCAnimActivity>*>(m_ptr, "CSeqS1SeqDesc", "m_activityArray"); std::vector<GCAnimActivity> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSeqS1SeqDesc::SetActivityArray(std::vector<GCAnimActivity> value) {
    SetSchemaValueCUtlVector<GCAnimActivity>(m_ptr, "CSeqS1SeqDesc", "m_activityArray", false, value);
}

std::vector<GCFootMotion> GCSeqS1SeqDesc::GetFootMotion() const {
    CUtlVector<GCFootMotion>* vec = GetSchemaValue<CUtlVector<GCFootMotion>*>(m_ptr, "CSeqS1SeqDesc", "m_footMotion"); std::vector<GCFootMotion> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSeqS1SeqDesc::SetFootMotion(std::vector<GCFootMotion> value) {
    SetSchemaValueCUtlVector<GCFootMotion>(m_ptr, "CSeqS1SeqDesc", "m_footMotion", false, value);
}

std::string GCSeqS1SeqDesc::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSeqS1SeqDesc::IsValid() {
    return (m_ptr != nullptr);
}

GAimMatrixOpFixedSettings_t::GAimMatrixOpFixedSettings_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GAimMatrixOpFixedSettings_t::GAimMatrixOpFixedSettings_t(void *ptr) {
    m_ptr = ptr;
}

GCAnimAttachment GAimMatrixOpFixedSettings_t::GetAttachment() const {
    return GetSchemaValue<GCAnimAttachment>(m_ptr, "AimMatrixOpFixedSettings_t", "m_attachment");
}

void GAimMatrixOpFixedSettings_t::SetAttachment(GCAnimAttachment value) {
    SetSchemaValue(m_ptr, "AimMatrixOpFixedSettings_t", "m_attachment", true, value);
}

GCAnimInputDamping GAimMatrixOpFixedSettings_t::GetDamping() const {
    return GetSchemaValue<GCAnimInputDamping>(m_ptr, "AimMatrixOpFixedSettings_t", "m_damping");
}

void GAimMatrixOpFixedSettings_t::SetDamping(GCAnimInputDamping value) {
    SetSchemaValue(m_ptr, "AimMatrixOpFixedSettings_t", "m_damping", true, value);
}

std::vector<GCPoseHandle> GAimMatrixOpFixedSettings_t::GetPoseCacheHandles() const {
    GCPoseHandle* outValue = GetSchemaValue<GCPoseHandle*>(m_ptr, "AimMatrixOpFixedSettings_t", "m_poseCacheHandles"); std::vector<GCPoseHandle> ret; for(int i = 0; i < 10; i++) { ret.push_back(outValue[i]); } return ret;
}

void GAimMatrixOpFixedSettings_t::SetPoseCacheHandles(std::vector<GCPoseHandle> value) {
    GCPoseHandle* outValue = GetSchemaValue<GCPoseHandle*>(m_ptr, "AimMatrixOpFixedSettings_t", "m_poseCacheHandles"); for(int i = 0; i < 10; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "AimMatrixOpFixedSettings_t", "m_poseCacheHandles", true, outValue);
}

AimMatrixBlendMode GAimMatrixOpFixedSettings_t::GetBlendMode() const {
    return GetSchemaValue<AimMatrixBlendMode>(m_ptr, "AimMatrixOpFixedSettings_t", "m_eBlendMode");
}

void GAimMatrixOpFixedSettings_t::SetBlendMode(AimMatrixBlendMode value) {
    SetSchemaValue(m_ptr, "AimMatrixOpFixedSettings_t", "m_eBlendMode", true, value);
}

float GAimMatrixOpFixedSettings_t::GetMaxYawAngle() const {
    return GetSchemaValue<float>(m_ptr, "AimMatrixOpFixedSettings_t", "m_flMaxYawAngle");
}

void GAimMatrixOpFixedSettings_t::SetMaxYawAngle(float value) {
    SetSchemaValue(m_ptr, "AimMatrixOpFixedSettings_t", "m_flMaxYawAngle", true, value);
}

float GAimMatrixOpFixedSettings_t::GetMaxPitchAngle() const {
    return GetSchemaValue<float>(m_ptr, "AimMatrixOpFixedSettings_t", "m_flMaxPitchAngle");
}

void GAimMatrixOpFixedSettings_t::SetMaxPitchAngle(float value) {
    SetSchemaValue(m_ptr, "AimMatrixOpFixedSettings_t", "m_flMaxPitchAngle", true, value);
}

int32_t GAimMatrixOpFixedSettings_t::GetSequenceMaxFrame() const {
    return GetSchemaValue<int32_t>(m_ptr, "AimMatrixOpFixedSettings_t", "m_nSequenceMaxFrame");
}

void GAimMatrixOpFixedSettings_t::SetSequenceMaxFrame(int32_t value) {
    SetSchemaValue(m_ptr, "AimMatrixOpFixedSettings_t", "m_nSequenceMaxFrame", true, value);
}

int32_t GAimMatrixOpFixedSettings_t::GetBoneMaskIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "AimMatrixOpFixedSettings_t", "m_nBoneMaskIndex");
}

void GAimMatrixOpFixedSettings_t::SetBoneMaskIndex(int32_t value) {
    SetSchemaValue(m_ptr, "AimMatrixOpFixedSettings_t", "m_nBoneMaskIndex", true, value);
}

bool GAimMatrixOpFixedSettings_t::GetTargetIsPosition() const {
    return GetSchemaValue<bool>(m_ptr, "AimMatrixOpFixedSettings_t", "m_bTargetIsPosition");
}

void GAimMatrixOpFixedSettings_t::SetTargetIsPosition(bool value) {
    SetSchemaValue(m_ptr, "AimMatrixOpFixedSettings_t", "m_bTargetIsPosition", true, value);
}

bool GAimMatrixOpFixedSettings_t::GetUseBiasAndClamp() const {
    return GetSchemaValue<bool>(m_ptr, "AimMatrixOpFixedSettings_t", "m_bUseBiasAndClamp");
}

void GAimMatrixOpFixedSettings_t::SetUseBiasAndClamp(bool value) {
    SetSchemaValue(m_ptr, "AimMatrixOpFixedSettings_t", "m_bUseBiasAndClamp", true, value);
}

float GAimMatrixOpFixedSettings_t::GetBiasAndClampYawOffset() const {
    return GetSchemaValue<float>(m_ptr, "AimMatrixOpFixedSettings_t", "m_flBiasAndClampYawOffset");
}

void GAimMatrixOpFixedSettings_t::SetBiasAndClampYawOffset(float value) {
    SetSchemaValue(m_ptr, "AimMatrixOpFixedSettings_t", "m_flBiasAndClampYawOffset", true, value);
}

float GAimMatrixOpFixedSettings_t::GetBiasAndClampPitchOffset() const {
    return GetSchemaValue<float>(m_ptr, "AimMatrixOpFixedSettings_t", "m_flBiasAndClampPitchOffset");
}

void GAimMatrixOpFixedSettings_t::SetBiasAndClampPitchOffset(float value) {
    SetSchemaValue(m_ptr, "AimMatrixOpFixedSettings_t", "m_flBiasAndClampPitchOffset", true, value);
}

GCBlendCurve GAimMatrixOpFixedSettings_t::GetBiasAndClampBlendCurve() const {
    return GetSchemaValue<GCBlendCurve>(m_ptr, "AimMatrixOpFixedSettings_t", "m_biasAndClampBlendCurve");
}

void GAimMatrixOpFixedSettings_t::SetBiasAndClampBlendCurve(GCBlendCurve value) {
    SetSchemaValue(m_ptr, "AimMatrixOpFixedSettings_t", "m_biasAndClampBlendCurve", true, value);
}

std::string GAimMatrixOpFixedSettings_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GAimMatrixOpFixedSettings_t::IsValid() {
    return (m_ptr != nullptr);
}

GParticlePreviewState_t::GParticlePreviewState_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GParticlePreviewState_t::GParticlePreviewState_t(void *ptr) {
    m_ptr = ptr;
}

CUtlString GParticlePreviewState_t::GetPreviewModel() const {
    return GetSchemaValue<CUtlString>(m_ptr, "ParticlePreviewState_t", "m_previewModel");
}

void GParticlePreviewState_t::SetPreviewModel(CUtlString value) {
    SetSchemaValue(m_ptr, "ParticlePreviewState_t", "m_previewModel", true, value);
}

uint32_t GParticlePreviewState_t::GetModSpecificData() const {
    return GetSchemaValue<uint32_t>(m_ptr, "ParticlePreviewState_t", "m_nModSpecificData");
}

void GParticlePreviewState_t::SetModSpecificData(uint32_t value) {
    SetSchemaValue(m_ptr, "ParticlePreviewState_t", "m_nModSpecificData", true, value);
}

PetGroundType_t GParticlePreviewState_t::GetGroundType() const {
    return GetSchemaValue<PetGroundType_t>(m_ptr, "ParticlePreviewState_t", "m_groundType");
}

void GParticlePreviewState_t::SetGroundType(PetGroundType_t value) {
    SetSchemaValue(m_ptr, "ParticlePreviewState_t", "m_groundType", true, value);
}

CUtlString GParticlePreviewState_t::GetSequenceName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "ParticlePreviewState_t", "m_sequenceName");
}

void GParticlePreviewState_t::SetSequenceName(CUtlString value) {
    SetSchemaValue(m_ptr, "ParticlePreviewState_t", "m_sequenceName", true, value);
}

int32_t GParticlePreviewState_t::GetFireParticleOnSequenceFrame() const {
    return GetSchemaValue<int32_t>(m_ptr, "ParticlePreviewState_t", "m_nFireParticleOnSequenceFrame");
}

void GParticlePreviewState_t::SetFireParticleOnSequenceFrame(int32_t value) {
    SetSchemaValue(m_ptr, "ParticlePreviewState_t", "m_nFireParticleOnSequenceFrame", true, value);
}

CUtlString GParticlePreviewState_t::GetHitboxSetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "ParticlePreviewState_t", "m_hitboxSetName");
}

void GParticlePreviewState_t::SetHitboxSetName(CUtlString value) {
    SetSchemaValue(m_ptr, "ParticlePreviewState_t", "m_hitboxSetName", true, value);
}

CUtlString GParticlePreviewState_t::GetMaterialGroupName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "ParticlePreviewState_t", "m_materialGroupName");
}

void GParticlePreviewState_t::SetMaterialGroupName(CUtlString value) {
    SetSchemaValue(m_ptr, "ParticlePreviewState_t", "m_materialGroupName", true, value);
}

std::vector<GParticlePreviewBodyGroup_t> GParticlePreviewState_t::GetBodyGroups() const {
    CUtlVector<GParticlePreviewBodyGroup_t>* vec = GetSchemaValue<CUtlVector<GParticlePreviewBodyGroup_t>*>(m_ptr, "ParticlePreviewState_t", "m_vecBodyGroups"); std::vector<GParticlePreviewBodyGroup_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GParticlePreviewState_t::SetBodyGroups(std::vector<GParticlePreviewBodyGroup_t> value) {
    SetSchemaValueCUtlVector<GParticlePreviewBodyGroup_t>(m_ptr, "ParticlePreviewState_t", "m_vecBodyGroups", true, value);
}

float GParticlePreviewState_t::GetPlaybackSpeed() const {
    return GetSchemaValue<float>(m_ptr, "ParticlePreviewState_t", "m_flPlaybackSpeed");
}

void GParticlePreviewState_t::SetPlaybackSpeed(float value) {
    SetSchemaValue(m_ptr, "ParticlePreviewState_t", "m_flPlaybackSpeed", true, value);
}

float GParticlePreviewState_t::GetParticleSimulationRate() const {
    return GetSchemaValue<float>(m_ptr, "ParticlePreviewState_t", "m_flParticleSimulationRate");
}

void GParticlePreviewState_t::SetParticleSimulationRate(float value) {
    SetSchemaValue(m_ptr, "ParticlePreviewState_t", "m_flParticleSimulationRate", true, value);
}

bool GParticlePreviewState_t::GetShouldDrawHitboxes() const {
    return GetSchemaValue<bool>(m_ptr, "ParticlePreviewState_t", "m_bShouldDrawHitboxes");
}

void GParticlePreviewState_t::SetShouldDrawHitboxes(bool value) {
    SetSchemaValue(m_ptr, "ParticlePreviewState_t", "m_bShouldDrawHitboxes", true, value);
}

bool GParticlePreviewState_t::GetShouldDrawAttachments() const {
    return GetSchemaValue<bool>(m_ptr, "ParticlePreviewState_t", "m_bShouldDrawAttachments");
}

void GParticlePreviewState_t::SetShouldDrawAttachments(bool value) {
    SetSchemaValue(m_ptr, "ParticlePreviewState_t", "m_bShouldDrawAttachments", true, value);
}

bool GParticlePreviewState_t::GetShouldDrawAttachmentNames() const {
    return GetSchemaValue<bool>(m_ptr, "ParticlePreviewState_t", "m_bShouldDrawAttachmentNames");
}

void GParticlePreviewState_t::SetShouldDrawAttachmentNames(bool value) {
    SetSchemaValue(m_ptr, "ParticlePreviewState_t", "m_bShouldDrawAttachmentNames", true, value);
}

bool GParticlePreviewState_t::GetShouldDrawControlPointAxes() const {
    return GetSchemaValue<bool>(m_ptr, "ParticlePreviewState_t", "m_bShouldDrawControlPointAxes");
}

void GParticlePreviewState_t::SetShouldDrawControlPointAxes(bool value) {
    SetSchemaValue(m_ptr, "ParticlePreviewState_t", "m_bShouldDrawControlPointAxes", true, value);
}

bool GParticlePreviewState_t::GetAnimationNonLooping() const {
    return GetSchemaValue<bool>(m_ptr, "ParticlePreviewState_t", "m_bAnimationNonLooping");
}

void GParticlePreviewState_t::SetAnimationNonLooping(bool value) {
    SetSchemaValue(m_ptr, "ParticlePreviewState_t", "m_bAnimationNonLooping", true, value);
}

Vector GParticlePreviewState_t::GetPreviewGravity() const {
    return GetSchemaValue<Vector>(m_ptr, "ParticlePreviewState_t", "m_vecPreviewGravity");
}

void GParticlePreviewState_t::SetPreviewGravity(Vector value) {
    SetSchemaValue(m_ptr, "ParticlePreviewState_t", "m_vecPreviewGravity", true, value);
}

std::string GParticlePreviewState_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GParticlePreviewState_t::IsValid() {
    return (m_ptr != nullptr);
}

GFeCtrlOsOffset_t::GFeCtrlOsOffset_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeCtrlOsOffset_t::GFeCtrlOsOffset_t(void *ptr) {
    m_ptr = ptr;
}

uint16_t GFeCtrlOsOffset_t::GetCtrlParent() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeCtrlOsOffset_t", "nCtrlParent");
}

void GFeCtrlOsOffset_t::SetCtrlParent(uint16_t value) {
    SetSchemaValue(m_ptr, "FeCtrlOsOffset_t", "nCtrlParent", true, value);
}

uint16_t GFeCtrlOsOffset_t::GetCtrlChild() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeCtrlOsOffset_t", "nCtrlChild");
}

void GFeCtrlOsOffset_t::SetCtrlChild(uint16_t value) {
    SetSchemaValue(m_ptr, "FeCtrlOsOffset_t", "nCtrlChild", true, value);
}

std::string GFeCtrlOsOffset_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeCtrlOsOffset_t::IsValid() {
    return (m_ptr != nullptr);
}

GCMorphData::GCMorphData(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMorphData::GCMorphData(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCMorphData::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CMorphData", "m_name");
}

void GCMorphData::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "CMorphData", "m_name", false, value);
}

std::vector<GCMorphRectData> GCMorphData::GetMorphRectDatas() const {
    CUtlVector<GCMorphRectData>* vec = GetSchemaValue<CUtlVector<GCMorphRectData>*>(m_ptr, "CMorphData", "m_morphRectDatas"); std::vector<GCMorphRectData> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCMorphData::SetMorphRectDatas(std::vector<GCMorphRectData> value) {
    SetSchemaValueCUtlVector<GCMorphRectData>(m_ptr, "CMorphData", "m_morphRectDatas", false, value);
}

std::string GCMorphData::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMorphData::IsValid() {
    return (m_ptr != nullptr);
}

GCAimMatrixUpdateNode::GCAimMatrixUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAimMatrixUpdateNode::GCAimMatrixUpdateNode(void *ptr) {
    m_ptr = ptr;
}

GAimMatrixOpFixedSettings_t GCAimMatrixUpdateNode::GetOpFixedSettings() const {
    return GetSchemaValue<GAimMatrixOpFixedSettings_t>(m_ptr, "CAimMatrixUpdateNode", "m_opFixedSettings");
}

void GCAimMatrixUpdateNode::SetOpFixedSettings(GAimMatrixOpFixedSettings_t value) {
    SetSchemaValue(m_ptr, "CAimMatrixUpdateNode", "m_opFixedSettings", false, value);
}

AnimVectorSource GCAimMatrixUpdateNode::GetTarget() const {
    return GetSchemaValue<AnimVectorSource>(m_ptr, "CAimMatrixUpdateNode", "m_target");
}

void GCAimMatrixUpdateNode::SetTarget(AnimVectorSource value) {
    SetSchemaValue(m_ptr, "CAimMatrixUpdateNode", "m_target", false, value);
}

GCAnimParamHandle GCAimMatrixUpdateNode::GetParamIndex() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CAimMatrixUpdateNode", "m_paramIndex");
}

void GCAimMatrixUpdateNode::SetParamIndex(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CAimMatrixUpdateNode", "m_paramIndex", false, value);
}

bool GCAimMatrixUpdateNode::GetResetChild() const {
    return GetSchemaValue<bool>(m_ptr, "CAimMatrixUpdateNode", "m_bResetChild");
}

void GCAimMatrixUpdateNode::SetResetChild(bool value) {
    SetSchemaValue(m_ptr, "CAimMatrixUpdateNode", "m_bResetChild", false, value);
}

bool GCAimMatrixUpdateNode::GetLockWhenWaning() const {
    return GetSchemaValue<bool>(m_ptr, "CAimMatrixUpdateNode", "m_bLockWhenWaning");
}

void GCAimMatrixUpdateNode::SetLockWhenWaning(bool value) {
    SetSchemaValue(m_ptr, "CAimMatrixUpdateNode", "m_bLockWhenWaning", false, value);
}

std::string GCAimMatrixUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAimMatrixUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GCDirectionalBlendUpdateNode::GCDirectionalBlendUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCDirectionalBlendUpdateNode::GCDirectionalBlendUpdateNode(void *ptr) {
    m_ptr = ptr;
}

GCAnimInputDamping GCDirectionalBlendUpdateNode::GetDamping() const {
    return GetSchemaValue<GCAnimInputDamping>(m_ptr, "CDirectionalBlendUpdateNode", "m_damping");
}

void GCDirectionalBlendUpdateNode::SetDamping(GCAnimInputDamping value) {
    SetSchemaValue(m_ptr, "CDirectionalBlendUpdateNode", "m_damping", false, value);
}

AnimValueSource GCDirectionalBlendUpdateNode::GetBlendValueSource() const {
    return GetSchemaValue<AnimValueSource>(m_ptr, "CDirectionalBlendUpdateNode", "m_blendValueSource");
}

void GCDirectionalBlendUpdateNode::SetBlendValueSource(AnimValueSource value) {
    SetSchemaValue(m_ptr, "CDirectionalBlendUpdateNode", "m_blendValueSource", false, value);
}

GCAnimParamHandle GCDirectionalBlendUpdateNode::GetParamIndex() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CDirectionalBlendUpdateNode", "m_paramIndex");
}

void GCDirectionalBlendUpdateNode::SetParamIndex(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CDirectionalBlendUpdateNode", "m_paramIndex", false, value);
}

float GCDirectionalBlendUpdateNode::GetPlaybackSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CDirectionalBlendUpdateNode", "m_playbackSpeed");
}

void GCDirectionalBlendUpdateNode::SetPlaybackSpeed(float value) {
    SetSchemaValue(m_ptr, "CDirectionalBlendUpdateNode", "m_playbackSpeed", false, value);
}

float GCDirectionalBlendUpdateNode::GetDuration() const {
    return GetSchemaValue<float>(m_ptr, "CDirectionalBlendUpdateNode", "m_duration");
}

void GCDirectionalBlendUpdateNode::SetDuration(float value) {
    SetSchemaValue(m_ptr, "CDirectionalBlendUpdateNode", "m_duration", false, value);
}

bool GCDirectionalBlendUpdateNode::GetLoop() const {
    return GetSchemaValue<bool>(m_ptr, "CDirectionalBlendUpdateNode", "m_bLoop");
}

void GCDirectionalBlendUpdateNode::SetLoop(bool value) {
    SetSchemaValue(m_ptr, "CDirectionalBlendUpdateNode", "m_bLoop", false, value);
}

bool GCDirectionalBlendUpdateNode::GetLockBlendOnReset() const {
    return GetSchemaValue<bool>(m_ptr, "CDirectionalBlendUpdateNode", "m_bLockBlendOnReset");
}

void GCDirectionalBlendUpdateNode::SetLockBlendOnReset(bool value) {
    SetSchemaValue(m_ptr, "CDirectionalBlendUpdateNode", "m_bLockBlendOnReset", false, value);
}

std::string GCDirectionalBlendUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCDirectionalBlendUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GVMixPannerDesc_t::GVMixPannerDesc_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVMixPannerDesc_t::GVMixPannerDesc_t(void *ptr) {
    m_ptr = ptr;
}

VMixPannerType_t GVMixPannerDesc_t::GetType() const {
    return GetSchemaValue<VMixPannerType_t>(m_ptr, "VMixPannerDesc_t", "m_type");
}

void GVMixPannerDesc_t::SetType(VMixPannerType_t value) {
    SetSchemaValue(m_ptr, "VMixPannerDesc_t", "m_type", true, value);
}

float GVMixPannerDesc_t::GetStrength() const {
    return GetSchemaValue<float>(m_ptr, "VMixPannerDesc_t", "m_flStrength");
}

void GVMixPannerDesc_t::SetStrength(float value) {
    SetSchemaValue(m_ptr, "VMixPannerDesc_t", "m_flStrength", true, value);
}

std::string GVMixPannerDesc_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVMixPannerDesc_t::IsValid() {
    return (m_ptr != nullptr);
}

GFeSimdSpringIntegrator_t::GFeSimdSpringIntegrator_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeSimdSpringIntegrator_t::GFeSimdSpringIntegrator_t(void *ptr) {
    m_ptr = ptr;
}

float GFeSimdSpringIntegrator_t::GetSpringRestLength() const {
    return GetSchemaValue<float>(m_ptr, "FeSimdSpringIntegrator_t", "flSpringRestLength");
}

void GFeSimdSpringIntegrator_t::SetSpringRestLength(float value) {
    SetSchemaValue(m_ptr, "FeSimdSpringIntegrator_t", "flSpringRestLength", true, value);
}

float GFeSimdSpringIntegrator_t::GetSpringConstant() const {
    return GetSchemaValue<float>(m_ptr, "FeSimdSpringIntegrator_t", "flSpringConstant");
}

void GFeSimdSpringIntegrator_t::SetSpringConstant(float value) {
    SetSchemaValue(m_ptr, "FeSimdSpringIntegrator_t", "flSpringConstant", true, value);
}

float GFeSimdSpringIntegrator_t::GetSpringDamping() const {
    return GetSchemaValue<float>(m_ptr, "FeSimdSpringIntegrator_t", "flSpringDamping");
}

void GFeSimdSpringIntegrator_t::SetSpringDamping(float value) {
    SetSchemaValue(m_ptr, "FeSimdSpringIntegrator_t", "flSpringDamping", true, value);
}

float GFeSimdSpringIntegrator_t::GetNodeWeight0() const {
    return GetSchemaValue<float>(m_ptr, "FeSimdSpringIntegrator_t", "flNodeWeight0");
}

void GFeSimdSpringIntegrator_t::SetNodeWeight0(float value) {
    SetSchemaValue(m_ptr, "FeSimdSpringIntegrator_t", "flNodeWeight0", true, value);
}

std::string GFeSimdSpringIntegrator_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeSimdSpringIntegrator_t::IsValid() {
    return (m_ptr != nullptr);
}

GModelBoneFlexDriver_t::GModelBoneFlexDriver_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GModelBoneFlexDriver_t::GModelBoneFlexDriver_t(void *ptr) {
    m_ptr = ptr;
}

CUtlString GModelBoneFlexDriver_t::GetBoneName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "ModelBoneFlexDriver_t", "m_boneName");
}

void GModelBoneFlexDriver_t::SetBoneName(CUtlString value) {
    SetSchemaValue(m_ptr, "ModelBoneFlexDriver_t", "m_boneName", true, value);
}

uint32_t GModelBoneFlexDriver_t::GetBoneNameToken() const {
    return GetSchemaValue<uint32_t>(m_ptr, "ModelBoneFlexDriver_t", "m_boneNameToken");
}

void GModelBoneFlexDriver_t::SetBoneNameToken(uint32_t value) {
    SetSchemaValue(m_ptr, "ModelBoneFlexDriver_t", "m_boneNameToken", true, value);
}

std::vector<GModelBoneFlexDriverControl_t> GModelBoneFlexDriver_t::GetControls() const {
    CUtlVector<GModelBoneFlexDriverControl_t>* vec = GetSchemaValue<CUtlVector<GModelBoneFlexDriverControl_t>*>(m_ptr, "ModelBoneFlexDriver_t", "m_controls"); std::vector<GModelBoneFlexDriverControl_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GModelBoneFlexDriver_t::SetControls(std::vector<GModelBoneFlexDriverControl_t> value) {
    SetSchemaValueCUtlVector<GModelBoneFlexDriverControl_t>(m_ptr, "ModelBoneFlexDriver_t", "m_controls", true, value);
}

std::string GModelBoneFlexDriver_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GModelBoneFlexDriver_t::IsValid() {
    return (m_ptr != nullptr);
}

GCBoolAnimParameter::GCBoolAnimParameter(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBoolAnimParameter::GCBoolAnimParameter(void *ptr) {
    m_ptr = ptr;
}

bool GCBoolAnimParameter::GetDefaultValue() const {
    return GetSchemaValue<bool>(m_ptr, "CBoolAnimParameter", "m_bDefaultValue");
}

void GCBoolAnimParameter::SetDefaultValue(bool value) {
    SetSchemaValue(m_ptr, "CBoolAnimParameter", "m_bDefaultValue", false, value);
}

std::string GCBoolAnimParameter::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBoolAnimParameter::IsValid() {
    return (m_ptr != nullptr);
}

GEventAppShutdown_t::GEventAppShutdown_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEventAppShutdown_t::GEventAppShutdown_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GEventAppShutdown_t::GetDummy0() const {
    return GetSchemaValue<int32_t>(m_ptr, "EventAppShutdown_t", "m_nDummy0");
}

void GEventAppShutdown_t::SetDummy0(int32_t value) {
    SetSchemaValue(m_ptr, "EventAppShutdown_t", "m_nDummy0", true, value);
}

std::string GEventAppShutdown_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEventAppShutdown_t::IsValid() {
    return (m_ptr != nullptr);
}

GResourceId_t::GResourceId_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GResourceId_t::GResourceId_t(void *ptr) {
    m_ptr = ptr;
}

uint64_t GResourceId_t::GetValue() const {
    return GetSchemaValue<uint64_t>(m_ptr, "ResourceId_t", "m_Value");
}

void GResourceId_t::SetValue(uint64_t value) {
    SetSchemaValue(m_ptr, "ResourceId_t", "m_Value", true, value);
}

std::string GResourceId_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GResourceId_t::IsValid() {
    return (m_ptr != nullptr);
}

GCVoiceContainerRealtimeFMSineWave::GCVoiceContainerRealtimeFMSineWave(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCVoiceContainerRealtimeFMSineWave::GCVoiceContainerRealtimeFMSineWave(void *ptr) {
    m_ptr = ptr;
}

float GCVoiceContainerRealtimeFMSineWave::GetCarrierFrequency() const {
    return GetSchemaValue<float>(m_ptr, "CVoiceContainerRealtimeFMSineWave", "m_flCarrierFrequency");
}

void GCVoiceContainerRealtimeFMSineWave::SetCarrierFrequency(float value) {
    SetSchemaValue(m_ptr, "CVoiceContainerRealtimeFMSineWave", "m_flCarrierFrequency", false, value);
}

float GCVoiceContainerRealtimeFMSineWave::GetModulatorFrequency() const {
    return GetSchemaValue<float>(m_ptr, "CVoiceContainerRealtimeFMSineWave", "m_flModulatorFrequency");
}

void GCVoiceContainerRealtimeFMSineWave::SetModulatorFrequency(float value) {
    SetSchemaValue(m_ptr, "CVoiceContainerRealtimeFMSineWave", "m_flModulatorFrequency", false, value);
}

float GCVoiceContainerRealtimeFMSineWave::GetModulatorAmount() const {
    return GetSchemaValue<float>(m_ptr, "CVoiceContainerRealtimeFMSineWave", "m_flModulatorAmount");
}

void GCVoiceContainerRealtimeFMSineWave::SetModulatorAmount(float value) {
    SetSchemaValue(m_ptr, "CVoiceContainerRealtimeFMSineWave", "m_flModulatorAmount", false, value);
}

std::string GCVoiceContainerRealtimeFMSineWave::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCVoiceContainerRealtimeFMSineWave::IsValid() {
    return (m_ptr != nullptr);
}

GCNmVirtualParameterBoolNode::GCNmVirtualParameterBoolNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmVirtualParameterBoolNode::GCNmVirtualParameterBoolNode(void *ptr) {
    m_ptr = ptr;
}

int16_t GCNmVirtualParameterBoolNode::GetChildNodeIdx() const {
    return GetSchemaValue<int16_t>(m_ptr, "CNmVirtualParameterBoolNode", "m_nChildNodeIdx");
}

void GCNmVirtualParameterBoolNode::SetChildNodeIdx(int16_t value) {
    SetSchemaValue(m_ptr, "CNmVirtualParameterBoolNode", "m_nChildNodeIdx", false, value);
}

std::string GCNmVirtualParameterBoolNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmVirtualParameterBoolNode::IsValid() {
    return (m_ptr != nullptr);
}

GCNmSyncTrack::GCNmSyncTrack(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmSyncTrack::GCNmSyncTrack(void *ptr) {
    m_ptr = ptr;
}

int32_t GCNmSyncTrack::GetStartEventOffset() const {
    return GetSchemaValue<int32_t>(m_ptr, "CNmSyncTrack", "m_nStartEventOffset");
}

void GCNmSyncTrack::SetStartEventOffset(int32_t value) {
    SetSchemaValue(m_ptr, "CNmSyncTrack", "m_nStartEventOffset", false, value);
}

std::string GCNmSyncTrack::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmSyncTrack::IsValid() {
    return (m_ptr != nullptr);
}

GTagSpan_t::GTagSpan_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GTagSpan_t::GTagSpan_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GTagSpan_t::GetTagIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "TagSpan_t", "m_tagIndex");
}

void GTagSpan_t::SetTagIndex(int32_t value) {
    SetSchemaValue(m_ptr, "TagSpan_t", "m_tagIndex", true, value);
}

float GTagSpan_t::GetStartCycle() const {
    return GetSchemaValue<float>(m_ptr, "TagSpan_t", "m_startCycle");
}

void GTagSpan_t::SetStartCycle(float value) {
    SetSchemaValue(m_ptr, "TagSpan_t", "m_startCycle", true, value);
}

float GTagSpan_t::GetEndCycle() const {
    return GetSchemaValue<float>(m_ptr, "TagSpan_t", "m_endCycle");
}

void GTagSpan_t::SetEndCycle(float value) {
    SetSchemaValue(m_ptr, "TagSpan_t", "m_endCycle", true, value);
}

std::string GTagSpan_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GTagSpan_t::IsValid() {
    return (m_ptr != nullptr);
}

GCNmStateNode__TimedEvent_t::GCNmStateNode__TimedEvent_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmStateNode__TimedEvent_t::GCNmStateNode__TimedEvent_t(void *ptr) {
    m_ptr = ptr;
}

float GCNmStateNode__TimedEvent_t::GetTimeValue() const {
    return GetSchemaValue<float>(m_ptr, "CNmStateNode__TimedEvent_t", "m_timeValue");
}

void GCNmStateNode__TimedEvent_t::SetTimeValue(float value) {
    SetSchemaValue(m_ptr, "CNmStateNode__TimedEvent_t", "m_timeValue", true, value);
}

std::string GCNmStateNode__TimedEvent_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmStateNode__TimedEvent_t::IsValid() {
    return (m_ptr != nullptr);
}

GCNmControlParameterTargetNode::GCNmControlParameterTargetNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmControlParameterTargetNode::GCNmControlParameterTargetNode(void *ptr) {
    m_ptr = ptr;
}

std::string GCNmControlParameterTargetNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmControlParameterTargetNode::IsValid() {
    return (m_ptr != nullptr);
}

GCFootstepLandedAnimTag::GCFootstepLandedAnimTag(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFootstepLandedAnimTag::GCFootstepLandedAnimTag(void *ptr) {
    m_ptr = ptr;
}

FootstepLandedFootSoundType_t GCFootstepLandedAnimTag::GetFootstepType() const {
    return GetSchemaValue<FootstepLandedFootSoundType_t>(m_ptr, "CFootstepLandedAnimTag", "m_FootstepType");
}

void GCFootstepLandedAnimTag::SetFootstepType(FootstepLandedFootSoundType_t value) {
    SetSchemaValue(m_ptr, "CFootstepLandedAnimTag", "m_FootstepType", false, value);
}

CUtlString GCFootstepLandedAnimTag::GetOverrideSoundName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CFootstepLandedAnimTag", "m_OverrideSoundName");
}

void GCFootstepLandedAnimTag::SetOverrideSoundName(CUtlString value) {
    SetSchemaValue(m_ptr, "CFootstepLandedAnimTag", "m_OverrideSoundName", false, value);
}

CUtlString GCFootstepLandedAnimTag::GetDebugAnimSourceString() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CFootstepLandedAnimTag", "m_DebugAnimSourceString");
}

void GCFootstepLandedAnimTag::SetDebugAnimSourceString(CUtlString value) {
    SetSchemaValue(m_ptr, "CFootstepLandedAnimTag", "m_DebugAnimSourceString", false, value);
}

CUtlString GCFootstepLandedAnimTag::GetBoneName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CFootstepLandedAnimTag", "m_BoneName");
}

void GCFootstepLandedAnimTag::SetBoneName(CUtlString value) {
    SetSchemaValue(m_ptr, "CFootstepLandedAnimTag", "m_BoneName", false, value);
}

std::string GCFootstepLandedAnimTag::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFootstepLandedAnimTag::IsValid() {
    return (m_ptr != nullptr);
}

GCEnumAnimParameter::GCEnumAnimParameter(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEnumAnimParameter::GCEnumAnimParameter(void *ptr) {
    m_ptr = ptr;
}

uint8_t GCEnumAnimParameter::GetDefaultValue() const {
    return GetSchemaValue<uint8_t>(m_ptr, "CEnumAnimParameter", "m_defaultValue");
}

void GCEnumAnimParameter::SetDefaultValue(uint8_t value) {
    SetSchemaValue(m_ptr, "CEnumAnimParameter", "m_defaultValue", false, value);
}

std::vector<CUtlString> GCEnumAnimParameter::GetEnumOptions() const {
    CUtlVector<CUtlString>* vec = GetSchemaValue<CUtlVector<CUtlString>*>(m_ptr, "CEnumAnimParameter", "m_enumOptions"); std::vector<CUtlString> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCEnumAnimParameter::SetEnumOptions(std::vector<CUtlString> value) {
    SetSchemaValueCUtlVector<CUtlString>(m_ptr, "CEnumAnimParameter", "m_enumOptions", false, value);
}

std::vector<uint64> GCEnumAnimParameter::GetEnumReferenced() const {
    CUtlVector<uint64>* vec = GetSchemaValue<CUtlVector<uint64>*>(m_ptr, "CEnumAnimParameter", "m_vecEnumReferenced"); std::vector<uint64> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCEnumAnimParameter::SetEnumReferenced(std::vector<uint64> value) {
    SetSchemaValueCUtlVector<uint64>(m_ptr, "CEnumAnimParameter", "m_vecEnumReferenced", false, value);
}

std::string GCEnumAnimParameter::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEnumAnimParameter::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimationGraphVisualizerPie::GCAnimationGraphVisualizerPie(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimationGraphVisualizerPie::GCAnimationGraphVisualizerPie(void *ptr) {
    m_ptr = ptr;
}

Vector GCAnimationGraphVisualizerPie::GetWsCenter() const {
    return GetSchemaValue<Vector>(m_ptr, "CAnimationGraphVisualizerPie", "m_vWsCenter");
}

void GCAnimationGraphVisualizerPie::SetWsCenter(Vector value) {
    SetSchemaValue(m_ptr, "CAnimationGraphVisualizerPie", "m_vWsCenter", false, value);
}

Vector GCAnimationGraphVisualizerPie::GetWsStart() const {
    return GetSchemaValue<Vector>(m_ptr, "CAnimationGraphVisualizerPie", "m_vWsStart");
}

void GCAnimationGraphVisualizerPie::SetWsStart(Vector value) {
    SetSchemaValue(m_ptr, "CAnimationGraphVisualizerPie", "m_vWsStart", false, value);
}

Vector GCAnimationGraphVisualizerPie::GetWsEnd() const {
    return GetSchemaValue<Vector>(m_ptr, "CAnimationGraphVisualizerPie", "m_vWsEnd");
}

void GCAnimationGraphVisualizerPie::SetWsEnd(Vector value) {
    SetSchemaValue(m_ptr, "CAnimationGraphVisualizerPie", "m_vWsEnd", false, value);
}

Color GCAnimationGraphVisualizerPie::GetColor() const {
    return GetSchemaValue<Color>(m_ptr, "CAnimationGraphVisualizerPie", "m_Color");
}

void GCAnimationGraphVisualizerPie::SetColor(Color value) {
    SetSchemaValue(m_ptr, "CAnimationGraphVisualizerPie", "m_Color", false, value);
}

std::string GCAnimationGraphVisualizerPie::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimationGraphVisualizerPie::IsValid() {
    return (m_ptr != nullptr);
}

GAnimationSnapshot_t::GAnimationSnapshot_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GAnimationSnapshot_t::GAnimationSnapshot_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GAnimationSnapshot_t::GetEntIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "AnimationSnapshot_t", "m_nEntIndex");
}

void GAnimationSnapshot_t::SetEntIndex(int32_t value) {
    SetSchemaValue(m_ptr, "AnimationSnapshot_t", "m_nEntIndex", true, value);
}

CUtlString GAnimationSnapshot_t::GetModelName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "AnimationSnapshot_t", "m_modelName");
}

void GAnimationSnapshot_t::SetModelName(CUtlString value) {
    SetSchemaValue(m_ptr, "AnimationSnapshot_t", "m_modelName", true, value);
}

std::string GAnimationSnapshot_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GAnimationSnapshot_t::IsValid() {
    return (m_ptr != nullptr);
}

GVPhysXCollisionAttributes_t::GVPhysXCollisionAttributes_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVPhysXCollisionAttributes_t::GVPhysXCollisionAttributes_t(void *ptr) {
    m_ptr = ptr;
}

uint32_t GVPhysXCollisionAttributes_t::GetCollisionGroup() const {
    return GetSchemaValue<uint32_t>(m_ptr, "VPhysXCollisionAttributes_t", "m_CollisionGroup");
}

void GVPhysXCollisionAttributes_t::SetCollisionGroup(uint32_t value) {
    SetSchemaValue(m_ptr, "VPhysXCollisionAttributes_t", "m_CollisionGroup", true, value);
}

std::vector<uint32> GVPhysXCollisionAttributes_t::GetInteractAs() const {
    CUtlVector<uint32>* vec = GetSchemaValue<CUtlVector<uint32>*>(m_ptr, "VPhysXCollisionAttributes_t", "m_InteractAs"); std::vector<uint32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GVPhysXCollisionAttributes_t::SetInteractAs(std::vector<uint32> value) {
    SetSchemaValueCUtlVector<uint32>(m_ptr, "VPhysXCollisionAttributes_t", "m_InteractAs", true, value);
}

std::vector<uint32> GVPhysXCollisionAttributes_t::GetInteractWith() const {
    CUtlVector<uint32>* vec = GetSchemaValue<CUtlVector<uint32>*>(m_ptr, "VPhysXCollisionAttributes_t", "m_InteractWith"); std::vector<uint32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GVPhysXCollisionAttributes_t::SetInteractWith(std::vector<uint32> value) {
    SetSchemaValueCUtlVector<uint32>(m_ptr, "VPhysXCollisionAttributes_t", "m_InteractWith", true, value);
}

std::vector<uint32> GVPhysXCollisionAttributes_t::GetInteractExclude() const {
    CUtlVector<uint32>* vec = GetSchemaValue<CUtlVector<uint32>*>(m_ptr, "VPhysXCollisionAttributes_t", "m_InteractExclude"); std::vector<uint32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GVPhysXCollisionAttributes_t::SetInteractExclude(std::vector<uint32> value) {
    SetSchemaValueCUtlVector<uint32>(m_ptr, "VPhysXCollisionAttributes_t", "m_InteractExclude", true, value);
}

CUtlString GVPhysXCollisionAttributes_t::GetCollisionGroupString() const {
    return GetSchemaValue<CUtlString>(m_ptr, "VPhysXCollisionAttributes_t", "m_CollisionGroupString");
}

void GVPhysXCollisionAttributes_t::SetCollisionGroupString(CUtlString value) {
    SetSchemaValue(m_ptr, "VPhysXCollisionAttributes_t", "m_CollisionGroupString", true, value);
}

std::vector<CUtlString> GVPhysXCollisionAttributes_t::GetInteractAsStrings() const {
    CUtlVector<CUtlString>* vec = GetSchemaValue<CUtlVector<CUtlString>*>(m_ptr, "VPhysXCollisionAttributes_t", "m_InteractAsStrings"); std::vector<CUtlString> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GVPhysXCollisionAttributes_t::SetInteractAsStrings(std::vector<CUtlString> value) {
    SetSchemaValueCUtlVector<CUtlString>(m_ptr, "VPhysXCollisionAttributes_t", "m_InteractAsStrings", true, value);
}

std::vector<CUtlString> GVPhysXCollisionAttributes_t::GetInteractWithStrings() const {
    CUtlVector<CUtlString>* vec = GetSchemaValue<CUtlVector<CUtlString>*>(m_ptr, "VPhysXCollisionAttributes_t", "m_InteractWithStrings"); std::vector<CUtlString> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GVPhysXCollisionAttributes_t::SetInteractWithStrings(std::vector<CUtlString> value) {
    SetSchemaValueCUtlVector<CUtlString>(m_ptr, "VPhysXCollisionAttributes_t", "m_InteractWithStrings", true, value);
}

std::vector<CUtlString> GVPhysXCollisionAttributes_t::GetInteractExcludeStrings() const {
    CUtlVector<CUtlString>* vec = GetSchemaValue<CUtlVector<CUtlString>*>(m_ptr, "VPhysXCollisionAttributes_t", "m_InteractExcludeStrings"); std::vector<CUtlString> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GVPhysXCollisionAttributes_t::SetInteractExcludeStrings(std::vector<CUtlString> value) {
    SetSchemaValueCUtlVector<CUtlString>(m_ptr, "VPhysXCollisionAttributes_t", "m_InteractExcludeStrings", true, value);
}

std::string GVPhysXCollisionAttributes_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVPhysXCollisionAttributes_t::IsValid() {
    return (m_ptr != nullptr);
}

GCActionComponentUpdater::GCActionComponentUpdater(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCActionComponentUpdater::GCActionComponentUpdater(void *ptr) {
    m_ptr = ptr;
}

std::string GCActionComponentUpdater::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCActionComponentUpdater::IsValid() {
    return (m_ptr != nullptr);
}

GCNmVirtualParameterVectorNode::GCNmVirtualParameterVectorNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmVirtualParameterVectorNode::GCNmVirtualParameterVectorNode(void *ptr) {
    m_ptr = ptr;
}

int16_t GCNmVirtualParameterVectorNode::GetChildNodeIdx() const {
    return GetSchemaValue<int16_t>(m_ptr, "CNmVirtualParameterVectorNode", "m_nChildNodeIdx");
}

void GCNmVirtualParameterVectorNode::SetChildNodeIdx(int16_t value) {
    SetSchemaValue(m_ptr, "CNmVirtualParameterVectorNode", "m_nChildNodeIdx", false, value);
}

std::string GCNmVirtualParameterVectorNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmVirtualParameterVectorNode::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimFrameSegment::GCAnimFrameSegment(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimFrameSegment::GCAnimFrameSegment(void *ptr) {
    m_ptr = ptr;
}

int32_t GCAnimFrameSegment::GetUniqueFrameIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimFrameSegment", "m_nUniqueFrameIndex");
}

void GCAnimFrameSegment::SetUniqueFrameIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimFrameSegment", "m_nUniqueFrameIndex", false, value);
}

uint32_t GCAnimFrameSegment::GetLocalElementMasks() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CAnimFrameSegment", "m_nLocalElementMasks");
}

void GCAnimFrameSegment::SetLocalElementMasks(uint32_t value) {
    SetSchemaValue(m_ptr, "CAnimFrameSegment", "m_nLocalElementMasks", false, value);
}

int32_t GCAnimFrameSegment::GetLocalChannel() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimFrameSegment", "m_nLocalChannel");
}

void GCAnimFrameSegment::SetLocalChannel(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimFrameSegment", "m_nLocalChannel", false, value);
}

std::string GCAnimFrameSegment::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimFrameSegment::IsValid() {
    return (m_ptr != nullptr);
}

GCClothSettingsAnimTag::GCClothSettingsAnimTag(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCClothSettingsAnimTag::GCClothSettingsAnimTag(void *ptr) {
    m_ptr = ptr;
}

float GCClothSettingsAnimTag::GetStiffness() const {
    return GetSchemaValue<float>(m_ptr, "CClothSettingsAnimTag", "m_flStiffness");
}

void GCClothSettingsAnimTag::SetStiffness(float value) {
    SetSchemaValue(m_ptr, "CClothSettingsAnimTag", "m_flStiffness", false, value);
}

float GCClothSettingsAnimTag::GetEaseIn() const {
    return GetSchemaValue<float>(m_ptr, "CClothSettingsAnimTag", "m_flEaseIn");
}

void GCClothSettingsAnimTag::SetEaseIn(float value) {
    SetSchemaValue(m_ptr, "CClothSettingsAnimTag", "m_flEaseIn", false, value);
}

float GCClothSettingsAnimTag::GetEaseOut() const {
    return GetSchemaValue<float>(m_ptr, "CClothSettingsAnimTag", "m_flEaseOut");
}

void GCClothSettingsAnimTag::SetEaseOut(float value) {
    SetSchemaValue(m_ptr, "CClothSettingsAnimTag", "m_flEaseOut", false, value);
}

CUtlString GCClothSettingsAnimTag::GetVertexSet() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CClothSettingsAnimTag", "m_nVertexSet");
}

void GCClothSettingsAnimTag::SetVertexSet(CUtlString value) {
    SetSchemaValue(m_ptr, "CClothSettingsAnimTag", "m_nVertexSet", false, value);
}

std::string GCClothSettingsAnimTag::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCClothSettingsAnimTag::IsValid() {
    return (m_ptr != nullptr);
}

GVariableInfo_t::GVariableInfo_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVariableInfo_t::GVariableInfo_t(void *ptr) {
    m_ptr = ptr;
}

CUtlString GVariableInfo_t::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "VariableInfo_t", "m_name");
}

void GVariableInfo_t::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "VariableInfo_t", "m_name", true, value);
}

CUtlStringToken GVariableInfo_t::GetNameToken() const {
    return GetSchemaValue<CUtlStringToken>(m_ptr, "VariableInfo_t", "m_nameToken");
}

void GVariableInfo_t::SetNameToken(CUtlStringToken value) {
    SetSchemaValue(m_ptr, "VariableInfo_t", "m_nameToken", true, value);
}

GFuseVariableIndex_t GVariableInfo_t::GetIndex() const {
    return GetSchemaValue<GFuseVariableIndex_t>(m_ptr, "VariableInfo_t", "m_nIndex");
}

void GVariableInfo_t::SetIndex(GFuseVariableIndex_t value) {
    SetSchemaValue(m_ptr, "VariableInfo_t", "m_nIndex", true, value);
}

uint8_t GVariableInfo_t::GetNumComponents() const {
    return GetSchemaValue<uint8_t>(m_ptr, "VariableInfo_t", "m_nNumComponents");
}

void GVariableInfo_t::SetNumComponents(uint8_t value) {
    SetSchemaValue(m_ptr, "VariableInfo_t", "m_nNumComponents", true, value);
}

FuseVariableType_t GVariableInfo_t::GetVarType() const {
    return GetSchemaValue<FuseVariableType_t>(m_ptr, "VariableInfo_t", "m_eVarType");
}

void GVariableInfo_t::SetVarType(FuseVariableType_t value) {
    SetSchemaValue(m_ptr, "VariableInfo_t", "m_eVarType", true, value);
}

FuseVariableAccess_t GVariableInfo_t::GetAccess() const {
    return GetSchemaValue<FuseVariableAccess_t>(m_ptr, "VariableInfo_t", "m_eAccess");
}

void GVariableInfo_t::SetAccess(FuseVariableAccess_t value) {
    SetSchemaValue(m_ptr, "VariableInfo_t", "m_eAccess", true, value);
}

std::string GVariableInfo_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVariableInfo_t::IsValid() {
    return (m_ptr != nullptr);
}

GVMixShaperDesc_t::GVMixShaperDesc_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVMixShaperDesc_t::GVMixShaperDesc_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GVMixShaperDesc_t::GetShape() const {
    return GetSchemaValue<int32_t>(m_ptr, "VMixShaperDesc_t", "m_nShape");
}

void GVMixShaperDesc_t::SetShape(int32_t value) {
    SetSchemaValue(m_ptr, "VMixShaperDesc_t", "m_nShape", true, value);
}

float GVMixShaperDesc_t::GetFldbDrive() const {
    return GetSchemaValue<float>(m_ptr, "VMixShaperDesc_t", "m_fldbDrive");
}

void GVMixShaperDesc_t::SetFldbDrive(float value) {
    SetSchemaValue(m_ptr, "VMixShaperDesc_t", "m_fldbDrive", true, value);
}

float GVMixShaperDesc_t::GetFldbOutputGain() const {
    return GetSchemaValue<float>(m_ptr, "VMixShaperDesc_t", "m_fldbOutputGain");
}

void GVMixShaperDesc_t::SetFldbOutputGain(float value) {
    SetSchemaValue(m_ptr, "VMixShaperDesc_t", "m_fldbOutputGain", true, value);
}

float GVMixShaperDesc_t::GetWetMix() const {
    return GetSchemaValue<float>(m_ptr, "VMixShaperDesc_t", "m_flWetMix");
}

void GVMixShaperDesc_t::SetWetMix(float value) {
    SetSchemaValue(m_ptr, "VMixShaperDesc_t", "m_flWetMix", true, value);
}

int32_t GVMixShaperDesc_t::GetOversampleFactor() const {
    return GetSchemaValue<int32_t>(m_ptr, "VMixShaperDesc_t", "m_nOversampleFactor");
}

void GVMixShaperDesc_t::SetOversampleFactor(int32_t value) {
    SetSchemaValue(m_ptr, "VMixShaperDesc_t", "m_nOversampleFactor", true, value);
}

std::string GVMixShaperDesc_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVMixShaperDesc_t::IsValid() {
    return (m_ptr != nullptr);
}

GCSoundInfoHeader::GCSoundInfoHeader(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSoundInfoHeader::GCSoundInfoHeader(void *ptr) {
    m_ptr = ptr;
}

std::string GCSoundInfoHeader::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSoundInfoHeader::IsValid() {
    return (m_ptr != nullptr);
}

GCVoiceContainerDecayingSineWave::GCVoiceContainerDecayingSineWave(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCVoiceContainerDecayingSineWave::GCVoiceContainerDecayingSineWave(void *ptr) {
    m_ptr = ptr;
}

float GCVoiceContainerDecayingSineWave::GetFrequency() const {
    return GetSchemaValue<float>(m_ptr, "CVoiceContainerDecayingSineWave", "m_flFrequency");
}

void GCVoiceContainerDecayingSineWave::SetFrequency(float value) {
    SetSchemaValue(m_ptr, "CVoiceContainerDecayingSineWave", "m_flFrequency", false, value);
}

float GCVoiceContainerDecayingSineWave::GetDecayTime() const {
    return GetSchemaValue<float>(m_ptr, "CVoiceContainerDecayingSineWave", "m_flDecayTime");
}

void GCVoiceContainerDecayingSineWave::SetDecayTime(float value) {
    SetSchemaValue(m_ptr, "CVoiceContainerDecayingSineWave", "m_flDecayTime", false, value);
}

std::string GCVoiceContainerDecayingSineWave::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCVoiceContainerDecayingSineWave::IsValid() {
    return (m_ptr != nullptr);
}

GCCycleControlClipUpdateNode::GCCycleControlClipUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCycleControlClipUpdateNode::GCCycleControlClipUpdateNode(void *ptr) {
    m_ptr = ptr;
}

std::vector<GTagSpan_t> GCCycleControlClipUpdateNode::GetTags() const {
    CUtlVector<GTagSpan_t>* vec = GetSchemaValue<CUtlVector<GTagSpan_t>*>(m_ptr, "CCycleControlClipUpdateNode", "m_tags"); std::vector<GTagSpan_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCCycleControlClipUpdateNode::SetTags(std::vector<GTagSpan_t> value) {
    SetSchemaValueCUtlVector<GTagSpan_t>(m_ptr, "CCycleControlClipUpdateNode", "m_tags", false, value);
}

float GCCycleControlClipUpdateNode::GetDuration() const {
    return GetSchemaValue<float>(m_ptr, "CCycleControlClipUpdateNode", "m_duration");
}

void GCCycleControlClipUpdateNode::SetDuration(float value) {
    SetSchemaValue(m_ptr, "CCycleControlClipUpdateNode", "m_duration", false, value);
}

AnimValueSource GCCycleControlClipUpdateNode::GetValueSource() const {
    return GetSchemaValue<AnimValueSource>(m_ptr, "CCycleControlClipUpdateNode", "m_valueSource");
}

void GCCycleControlClipUpdateNode::SetValueSource(AnimValueSource value) {
    SetSchemaValue(m_ptr, "CCycleControlClipUpdateNode", "m_valueSource", false, value);
}

GCAnimParamHandle GCCycleControlClipUpdateNode::GetParamIndex() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CCycleControlClipUpdateNode", "m_paramIndex");
}

void GCCycleControlClipUpdateNode::SetParamIndex(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CCycleControlClipUpdateNode", "m_paramIndex", false, value);
}

std::string GCCycleControlClipUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCycleControlClipUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GCBaseTrailRenderer::GCBaseTrailRenderer(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBaseTrailRenderer::GCBaseTrailRenderer(void *ptr) {
    m_ptr = ptr;
}

ParticleOrientationChoiceList_t GCBaseTrailRenderer::GetOrientationType() const {
    return GetSchemaValue<ParticleOrientationChoiceList_t>(m_ptr, "CBaseTrailRenderer", "m_nOrientationType");
}

void GCBaseTrailRenderer::SetOrientationType(ParticleOrientationChoiceList_t value) {
    SetSchemaValue(m_ptr, "CBaseTrailRenderer", "m_nOrientationType", false, value);
}

int32_t GCBaseTrailRenderer::GetOrientationControlPoint() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBaseTrailRenderer", "m_nOrientationControlPoint");
}

void GCBaseTrailRenderer::SetOrientationControlPoint(int32_t value) {
    SetSchemaValue(m_ptr, "CBaseTrailRenderer", "m_nOrientationControlPoint", false, value);
}

float GCBaseTrailRenderer::GetMinSize() const {
    return GetSchemaValue<float>(m_ptr, "CBaseTrailRenderer", "m_flMinSize");
}

void GCBaseTrailRenderer::SetMinSize(float value) {
    SetSchemaValue(m_ptr, "CBaseTrailRenderer", "m_flMinSize", false, value);
}

float GCBaseTrailRenderer::GetMaxSize() const {
    return GetSchemaValue<float>(m_ptr, "CBaseTrailRenderer", "m_flMaxSize");
}

void GCBaseTrailRenderer::SetMaxSize(float value) {
    SetSchemaValue(m_ptr, "CBaseTrailRenderer", "m_flMaxSize", false, value);
}

GCParticleCollectionRendererFloatInput GCBaseTrailRenderer::GetStartFadeSize() const {
    return GetSchemaValue<GCParticleCollectionRendererFloatInput>(m_ptr, "CBaseTrailRenderer", "m_flStartFadeSize");
}

void GCBaseTrailRenderer::SetStartFadeSize(GCParticleCollectionRendererFloatInput value) {
    SetSchemaValue(m_ptr, "CBaseTrailRenderer", "m_flStartFadeSize", false, value);
}

GCParticleCollectionRendererFloatInput GCBaseTrailRenderer::GetEndFadeSize() const {
    return GetSchemaValue<GCParticleCollectionRendererFloatInput>(m_ptr, "CBaseTrailRenderer", "m_flEndFadeSize");
}

void GCBaseTrailRenderer::SetEndFadeSize(GCParticleCollectionRendererFloatInput value) {
    SetSchemaValue(m_ptr, "CBaseTrailRenderer", "m_flEndFadeSize", false, value);
}

bool GCBaseTrailRenderer::GetClampV() const {
    return GetSchemaValue<bool>(m_ptr, "CBaseTrailRenderer", "m_bClampV");
}

void GCBaseTrailRenderer::SetClampV(bool value) {
    SetSchemaValue(m_ptr, "CBaseTrailRenderer", "m_bClampV", false, value);
}

std::string GCBaseTrailRenderer::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBaseTrailRenderer::IsValid() {
    return (m_ptr != nullptr);
}

GCBoneConstraintPoseSpaceBone::GCBoneConstraintPoseSpaceBone(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBoneConstraintPoseSpaceBone::GCBoneConstraintPoseSpaceBone(void *ptr) {
    m_ptr = ptr;
}

std::vector<GCBoneConstraintPoseSpaceBone> GCBoneConstraintPoseSpaceBone::GetInputList() const {
    CUtlVector<GCBoneConstraintPoseSpaceBone>* vec = GetSchemaValue<CUtlVector<GCBoneConstraintPoseSpaceBone>*>(m_ptr, "CBoneConstraintPoseSpaceBone", "m_inputList"); std::vector<GCBoneConstraintPoseSpaceBone> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCBoneConstraintPoseSpaceBone::SetInputList(std::vector<GCBoneConstraintPoseSpaceBone> value) {
    SetSchemaValueCUtlVector<GCBoneConstraintPoseSpaceBone>(m_ptr, "CBoneConstraintPoseSpaceBone", "m_inputList", false, value);
}

std::string GCBoneConstraintPoseSpaceBone::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBoneConstraintPoseSpaceBone::IsValid() {
    return (m_ptr != nullptr);
}

GEventServerPostSimulate_t::GEventServerPostSimulate_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEventServerPostSimulate_t::GEventServerPostSimulate_t(void *ptr) {
    m_ptr = ptr;
}

std::string GEventServerPostSimulate_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEventServerPostSimulate_t::IsValid() {
    return (m_ptr != nullptr);
}

GCChoreoUpdateNode::GCChoreoUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCChoreoUpdateNode::GCChoreoUpdateNode(void *ptr) {
    m_ptr = ptr;
}

std::string GCChoreoUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCChoreoUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GCNmSkeleton::GCNmSkeleton(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmSkeleton::GCNmSkeleton(void *ptr) {
    m_ptr = ptr;
}

std::vector<int32> GCNmSkeleton::GetParentIndices() const {
    CUtlVector<int32>* vec = GetSchemaValue<CUtlVector<int32>*>(m_ptr, "CNmSkeleton", "m_parentIndices"); std::vector<int32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCNmSkeleton::SetParentIndices(std::vector<int32> value) {
    SetSchemaValueCUtlVector<int32>(m_ptr, "CNmSkeleton", "m_parentIndices", false, value);
}

int32_t GCNmSkeleton::GetNumBonesToSampleAtLowLOD() const {
    return GetSchemaValue<int32_t>(m_ptr, "CNmSkeleton", "m_numBonesToSampleAtLowLOD");
}

void GCNmSkeleton::SetNumBonesToSampleAtLowLOD(int32_t value) {
    SetSchemaValue(m_ptr, "CNmSkeleton", "m_numBonesToSampleAtLowLOD", false, value);
}

std::string GCNmSkeleton::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmSkeleton::IsValid() {
    return (m_ptr != nullptr);
}

GVMixBoxverbDesc_t::GVMixBoxverbDesc_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVMixBoxverbDesc_t::GVMixBoxverbDesc_t(void *ptr) {
    m_ptr = ptr;
}

float GVMixBoxverbDesc_t::GetSizeMax() const {
    return GetSchemaValue<float>(m_ptr, "VMixBoxverbDesc_t", "m_flSizeMax");
}

void GVMixBoxverbDesc_t::SetSizeMax(float value) {
    SetSchemaValue(m_ptr, "VMixBoxverbDesc_t", "m_flSizeMax", true, value);
}

float GVMixBoxverbDesc_t::GetSizeMin() const {
    return GetSchemaValue<float>(m_ptr, "VMixBoxverbDesc_t", "m_flSizeMin");
}

void GVMixBoxverbDesc_t::SetSizeMin(float value) {
    SetSchemaValue(m_ptr, "VMixBoxverbDesc_t", "m_flSizeMin", true, value);
}

float GVMixBoxverbDesc_t::GetComplexity() const {
    return GetSchemaValue<float>(m_ptr, "VMixBoxverbDesc_t", "m_flComplexity");
}

void GVMixBoxverbDesc_t::SetComplexity(float value) {
    SetSchemaValue(m_ptr, "VMixBoxverbDesc_t", "m_flComplexity", true, value);
}

float GVMixBoxverbDesc_t::GetDiffusion() const {
    return GetSchemaValue<float>(m_ptr, "VMixBoxverbDesc_t", "m_flDiffusion");
}

void GVMixBoxverbDesc_t::SetDiffusion(float value) {
    SetSchemaValue(m_ptr, "VMixBoxverbDesc_t", "m_flDiffusion", true, value);
}

float GVMixBoxverbDesc_t::GetModDepth() const {
    return GetSchemaValue<float>(m_ptr, "VMixBoxverbDesc_t", "m_flModDepth");
}

void GVMixBoxverbDesc_t::SetModDepth(float value) {
    SetSchemaValue(m_ptr, "VMixBoxverbDesc_t", "m_flModDepth", true, value);
}

float GVMixBoxverbDesc_t::GetModRate() const {
    return GetSchemaValue<float>(m_ptr, "VMixBoxverbDesc_t", "m_flModRate");
}

void GVMixBoxverbDesc_t::SetModRate(float value) {
    SetSchemaValue(m_ptr, "VMixBoxverbDesc_t", "m_flModRate", true, value);
}

bool GVMixBoxverbDesc_t::GetParallel() const {
    return GetSchemaValue<bool>(m_ptr, "VMixBoxverbDesc_t", "m_bParallel");
}

void GVMixBoxverbDesc_t::SetParallel(bool value) {
    SetSchemaValue(m_ptr, "VMixBoxverbDesc_t", "m_bParallel", true, value);
}

GVMixFilterDesc_t GVMixBoxverbDesc_t::GetFilterType() const {
    return GetSchemaValue<GVMixFilterDesc_t>(m_ptr, "VMixBoxverbDesc_t", "m_filterType");
}

void GVMixBoxverbDesc_t::SetFilterType(GVMixFilterDesc_t value) {
    SetSchemaValue(m_ptr, "VMixBoxverbDesc_t", "m_filterType", true, value);
}

float GVMixBoxverbDesc_t::GetWidth() const {
    return GetSchemaValue<float>(m_ptr, "VMixBoxverbDesc_t", "m_flWidth");
}

void GVMixBoxverbDesc_t::SetWidth(float value) {
    SetSchemaValue(m_ptr, "VMixBoxverbDesc_t", "m_flWidth", true, value);
}

float GVMixBoxverbDesc_t::GetHeight() const {
    return GetSchemaValue<float>(m_ptr, "VMixBoxverbDesc_t", "m_flHeight");
}

void GVMixBoxverbDesc_t::SetHeight(float value) {
    SetSchemaValue(m_ptr, "VMixBoxverbDesc_t", "m_flHeight", true, value);
}

float GVMixBoxverbDesc_t::GetDepth() const {
    return GetSchemaValue<float>(m_ptr, "VMixBoxverbDesc_t", "m_flDepth");
}

void GVMixBoxverbDesc_t::SetDepth(float value) {
    SetSchemaValue(m_ptr, "VMixBoxverbDesc_t", "m_flDepth", true, value);
}

float GVMixBoxverbDesc_t::GetFeedbackScale() const {
    return GetSchemaValue<float>(m_ptr, "VMixBoxverbDesc_t", "m_flFeedbackScale");
}

void GVMixBoxverbDesc_t::SetFeedbackScale(float value) {
    SetSchemaValue(m_ptr, "VMixBoxverbDesc_t", "m_flFeedbackScale", true, value);
}

float GVMixBoxverbDesc_t::GetFeedbackWidth() const {
    return GetSchemaValue<float>(m_ptr, "VMixBoxverbDesc_t", "m_flFeedbackWidth");
}

void GVMixBoxverbDesc_t::SetFeedbackWidth(float value) {
    SetSchemaValue(m_ptr, "VMixBoxverbDesc_t", "m_flFeedbackWidth", true, value);
}

float GVMixBoxverbDesc_t::GetFeedbackHeight() const {
    return GetSchemaValue<float>(m_ptr, "VMixBoxverbDesc_t", "m_flFeedbackHeight");
}

void GVMixBoxverbDesc_t::SetFeedbackHeight(float value) {
    SetSchemaValue(m_ptr, "VMixBoxverbDesc_t", "m_flFeedbackHeight", true, value);
}

float GVMixBoxverbDesc_t::GetFeedbackDepth() const {
    return GetSchemaValue<float>(m_ptr, "VMixBoxverbDesc_t", "m_flFeedbackDepth");
}

void GVMixBoxverbDesc_t::SetFeedbackDepth(float value) {
    SetSchemaValue(m_ptr, "VMixBoxverbDesc_t", "m_flFeedbackDepth", true, value);
}

float GVMixBoxverbDesc_t::GetOutputGain() const {
    return GetSchemaValue<float>(m_ptr, "VMixBoxverbDesc_t", "m_flOutputGain");
}

void GVMixBoxverbDesc_t::SetOutputGain(float value) {
    SetSchemaValue(m_ptr, "VMixBoxverbDesc_t", "m_flOutputGain", true, value);
}

float GVMixBoxverbDesc_t::GetTaps() const {
    return GetSchemaValue<float>(m_ptr, "VMixBoxverbDesc_t", "m_flTaps");
}

void GVMixBoxverbDesc_t::SetTaps(float value) {
    SetSchemaValue(m_ptr, "VMixBoxverbDesc_t", "m_flTaps", true, value);
}

std::string GVMixBoxverbDesc_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVMixBoxverbDesc_t::IsValid() {
    return (m_ptr != nullptr);
}

GFeTreeChildren_t::GFeTreeChildren_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeTreeChildren_t::GFeTreeChildren_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<uint16_t> GFeTreeChildren_t::GetChild() const {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeTreeChildren_t", "nChild"); std::vector<uint16_t> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}

void GFeTreeChildren_t::SetChild(std::vector<uint16_t> value) {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeTreeChildren_t", "nChild"); for(int i = 0; i < 2; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "FeTreeChildren_t", "nChild", true, outValue);
}

std::string GFeTreeChildren_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeTreeChildren_t::IsValid() {
    return (m_ptr != nullptr);
}

GCSceneObjectData::GCSceneObjectData(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSceneObjectData::GCSceneObjectData(void *ptr) {
    m_ptr = ptr;
}

Vector GCSceneObjectData::GetMinBounds() const {
    return GetSchemaValue<Vector>(m_ptr, "CSceneObjectData", "m_vMinBounds");
}

void GCSceneObjectData::SetMinBounds(Vector value) {
    SetSchemaValue(m_ptr, "CSceneObjectData", "m_vMinBounds", false, value);
}

Vector GCSceneObjectData::GetMaxBounds() const {
    return GetSchemaValue<Vector>(m_ptr, "CSceneObjectData", "m_vMaxBounds");
}

void GCSceneObjectData::SetMaxBounds(Vector value) {
    SetSchemaValue(m_ptr, "CSceneObjectData", "m_vMaxBounds", false, value);
}

std::vector<GCMaterialDrawDescriptor> GCSceneObjectData::GetDrawCalls() const {
    CUtlVector<GCMaterialDrawDescriptor>* vec = GetSchemaValue<CUtlVector<GCMaterialDrawDescriptor>*>(m_ptr, "CSceneObjectData", "m_drawCalls"); std::vector<GCMaterialDrawDescriptor> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSceneObjectData::SetDrawCalls(std::vector<GCMaterialDrawDescriptor> value) {
    SetSchemaValueCUtlVector<GCMaterialDrawDescriptor>(m_ptr, "CSceneObjectData", "m_drawCalls", false, value);
}

std::vector<GAABB_t> GCSceneObjectData::GetDrawBounds() const {
    CUtlVector<GAABB_t>* vec = GetSchemaValue<CUtlVector<GAABB_t>*>(m_ptr, "CSceneObjectData", "m_drawBounds"); std::vector<GAABB_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSceneObjectData::SetDrawBounds(std::vector<GAABB_t> value) {
    SetSchemaValueCUtlVector<GAABB_t>(m_ptr, "CSceneObjectData", "m_drawBounds", false, value);
}

std::vector<GCMeshletDescriptor> GCSceneObjectData::GetMeshlets() const {
    CUtlVector<GCMeshletDescriptor>* vec = GetSchemaValue<CUtlVector<GCMeshletDescriptor>*>(m_ptr, "CSceneObjectData", "m_meshlets"); std::vector<GCMeshletDescriptor> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSceneObjectData::SetMeshlets(std::vector<GCMeshletDescriptor> value) {
    SetSchemaValueCUtlVector<GCMeshletDescriptor>(m_ptr, "CSceneObjectData", "m_meshlets", false, value);
}

Vector4D GCSceneObjectData::GetTintColor() const {
    return GetSchemaValue<Vector4D>(m_ptr, "CSceneObjectData", "m_vTintColor");
}

void GCSceneObjectData::SetTintColor(Vector4D value) {
    SetSchemaValue(m_ptr, "CSceneObjectData", "m_vTintColor", false, value);
}

std::string GCSceneObjectData::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSceneObjectData::IsValid() {
    return (m_ptr != nullptr);
}

GStanceInfo_t::GStanceInfo_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GStanceInfo_t::GStanceInfo_t(void *ptr) {
    m_ptr = ptr;
}

Vector GStanceInfo_t::GetPosition() const {
    return GetSchemaValue<Vector>(m_ptr, "StanceInfo_t", "m_vPosition");
}

void GStanceInfo_t::SetPosition(Vector value) {
    SetSchemaValue(m_ptr, "StanceInfo_t", "m_vPosition", true, value);
}

float GStanceInfo_t::GetDirection() const {
    return GetSchemaValue<float>(m_ptr, "StanceInfo_t", "m_flDirection");
}

void GStanceInfo_t::SetDirection(float value) {
    SetSchemaValue(m_ptr, "StanceInfo_t", "m_flDirection", true, value);
}

std::string GStanceInfo_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GStanceInfo_t::IsValid() {
    return (m_ptr != nullptr);
}

GCMotionNodeSequence::GCMotionNodeSequence(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMotionNodeSequence::GCMotionNodeSequence(void *ptr) {
    m_ptr = ptr;
}

std::vector<GTagSpan_t> GCMotionNodeSequence::GetTags() const {
    CUtlVector<GTagSpan_t>* vec = GetSchemaValue<CUtlVector<GTagSpan_t>*>(m_ptr, "CMotionNodeSequence", "m_tags"); std::vector<GTagSpan_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCMotionNodeSequence::SetTags(std::vector<GTagSpan_t> value) {
    SetSchemaValueCUtlVector<GTagSpan_t>(m_ptr, "CMotionNodeSequence", "m_tags", false, value);
}

float GCMotionNodeSequence::GetPlaybackSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CMotionNodeSequence", "m_flPlaybackSpeed");
}

void GCMotionNodeSequence::SetPlaybackSpeed(float value) {
    SetSchemaValue(m_ptr, "CMotionNodeSequence", "m_flPlaybackSpeed", false, value);
}

std::string GCMotionNodeSequence::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMotionNodeSequence::IsValid() {
    return (m_ptr != nullptr);
}

GCFootCycleDefinition::GCFootCycleDefinition(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFootCycleDefinition::GCFootCycleDefinition(void *ptr) {
    m_ptr = ptr;
}

Vector GCFootCycleDefinition::GetStancePositionMS() const {
    return GetSchemaValue<Vector>(m_ptr, "CFootCycleDefinition", "m_vStancePositionMS");
}

void GCFootCycleDefinition::SetStancePositionMS(Vector value) {
    SetSchemaValue(m_ptr, "CFootCycleDefinition", "m_vStancePositionMS", false, value);
}

Vector GCFootCycleDefinition::GetMidpointPositionMS() const {
    return GetSchemaValue<Vector>(m_ptr, "CFootCycleDefinition", "m_vMidpointPositionMS");
}

void GCFootCycleDefinition::SetMidpointPositionMS(Vector value) {
    SetSchemaValue(m_ptr, "CFootCycleDefinition", "m_vMidpointPositionMS", false, value);
}

float GCFootCycleDefinition::GetStanceDirectionMS() const {
    return GetSchemaValue<float>(m_ptr, "CFootCycleDefinition", "m_flStanceDirectionMS");
}

void GCFootCycleDefinition::SetStanceDirectionMS(float value) {
    SetSchemaValue(m_ptr, "CFootCycleDefinition", "m_flStanceDirectionMS", false, value);
}

Vector GCFootCycleDefinition::GetToStrideStartPos() const {
    return GetSchemaValue<Vector>(m_ptr, "CFootCycleDefinition", "m_vToStrideStartPos");
}

void GCFootCycleDefinition::SetToStrideStartPos(Vector value) {
    SetSchemaValue(m_ptr, "CFootCycleDefinition", "m_vToStrideStartPos", false, value);
}

GCAnimCycle GCFootCycleDefinition::GetStanceCycle() const {
    return GetSchemaValue<GCAnimCycle>(m_ptr, "CFootCycleDefinition", "m_stanceCycle");
}

void GCFootCycleDefinition::SetStanceCycle(GCAnimCycle value) {
    SetSchemaValue(m_ptr, "CFootCycleDefinition", "m_stanceCycle", false, value);
}

GCFootCycle GCFootCycleDefinition::GetFootLiftCycle() const {
    return GetSchemaValue<GCFootCycle>(m_ptr, "CFootCycleDefinition", "m_footLiftCycle");
}

void GCFootCycleDefinition::SetFootLiftCycle(GCFootCycle value) {
    SetSchemaValue(m_ptr, "CFootCycleDefinition", "m_footLiftCycle", false, value);
}

GCFootCycle GCFootCycleDefinition::GetFootOffCycle() const {
    return GetSchemaValue<GCFootCycle>(m_ptr, "CFootCycleDefinition", "m_footOffCycle");
}

void GCFootCycleDefinition::SetFootOffCycle(GCFootCycle value) {
    SetSchemaValue(m_ptr, "CFootCycleDefinition", "m_footOffCycle", false, value);
}

GCFootCycle GCFootCycleDefinition::GetFootStrikeCycle() const {
    return GetSchemaValue<GCFootCycle>(m_ptr, "CFootCycleDefinition", "m_footStrikeCycle");
}

void GCFootCycleDefinition::SetFootStrikeCycle(GCFootCycle value) {
    SetSchemaValue(m_ptr, "CFootCycleDefinition", "m_footStrikeCycle", false, value);
}

GCFootCycle GCFootCycleDefinition::GetFootLandCycle() const {
    return GetSchemaValue<GCFootCycle>(m_ptr, "CFootCycleDefinition", "m_footLandCycle");
}

void GCFootCycleDefinition::SetFootLandCycle(GCFootCycle value) {
    SetSchemaValue(m_ptr, "CFootCycleDefinition", "m_footLandCycle", false, value);
}

std::string GCFootCycleDefinition::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFootCycleDefinition::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimDesc_Flag::GCAnimDesc_Flag(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimDesc_Flag::GCAnimDesc_Flag(void *ptr) {
    m_ptr = ptr;
}

bool GCAnimDesc_Flag::GetLooping() const {
    return GetSchemaValue<bool>(m_ptr, "CAnimDesc_Flag", "m_bLooping");
}

void GCAnimDesc_Flag::SetLooping(bool value) {
    SetSchemaValue(m_ptr, "CAnimDesc_Flag", "m_bLooping", false, value);
}

bool GCAnimDesc_Flag::GetAllZeros() const {
    return GetSchemaValue<bool>(m_ptr, "CAnimDesc_Flag", "m_bAllZeros");
}

void GCAnimDesc_Flag::SetAllZeros(bool value) {
    SetSchemaValue(m_ptr, "CAnimDesc_Flag", "m_bAllZeros", false, value);
}

bool GCAnimDesc_Flag::GetHidden() const {
    return GetSchemaValue<bool>(m_ptr, "CAnimDesc_Flag", "m_bHidden");
}

void GCAnimDesc_Flag::SetHidden(bool value) {
    SetSchemaValue(m_ptr, "CAnimDesc_Flag", "m_bHidden", false, value);
}

bool GCAnimDesc_Flag::GetDelta() const {
    return GetSchemaValue<bool>(m_ptr, "CAnimDesc_Flag", "m_bDelta");
}

void GCAnimDesc_Flag::SetDelta(bool value) {
    SetSchemaValue(m_ptr, "CAnimDesc_Flag", "m_bDelta", false, value);
}

bool GCAnimDesc_Flag::GetLegacyWorldspace() const {
    return GetSchemaValue<bool>(m_ptr, "CAnimDesc_Flag", "m_bLegacyWorldspace");
}

void GCAnimDesc_Flag::SetLegacyWorldspace(bool value) {
    SetSchemaValue(m_ptr, "CAnimDesc_Flag", "m_bLegacyWorldspace", false, value);
}

bool GCAnimDesc_Flag::GetModelDoc() const {
    return GetSchemaValue<bool>(m_ptr, "CAnimDesc_Flag", "m_bModelDoc");
}

void GCAnimDesc_Flag::SetModelDoc(bool value) {
    SetSchemaValue(m_ptr, "CAnimDesc_Flag", "m_bModelDoc", false, value);
}

bool GCAnimDesc_Flag::GetImplicitSeqIgnoreDelta() const {
    return GetSchemaValue<bool>(m_ptr, "CAnimDesc_Flag", "m_bImplicitSeqIgnoreDelta");
}

void GCAnimDesc_Flag::SetImplicitSeqIgnoreDelta(bool value) {
    SetSchemaValue(m_ptr, "CAnimDesc_Flag", "m_bImplicitSeqIgnoreDelta", false, value);
}

bool GCAnimDesc_Flag::GetAnimGraphAdditive() const {
    return GetSchemaValue<bool>(m_ptr, "CAnimDesc_Flag", "m_bAnimGraphAdditive");
}

void GCAnimDesc_Flag::SetAnimGraphAdditive(bool value) {
    SetSchemaValue(m_ptr, "CAnimDesc_Flag", "m_bAnimGraphAdditive", false, value);
}

std::string GCAnimDesc_Flag::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimDesc_Flag::IsValid() {
    return (m_ptr != nullptr);
}

GCBoneVelocityMetricEvaluator::GCBoneVelocityMetricEvaluator(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBoneVelocityMetricEvaluator::GCBoneVelocityMetricEvaluator(void *ptr) {
    m_ptr = ptr;
}

int32_t GCBoneVelocityMetricEvaluator::GetBoneIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBoneVelocityMetricEvaluator", "m_nBoneIndex");
}

void GCBoneVelocityMetricEvaluator::SetBoneIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CBoneVelocityMetricEvaluator", "m_nBoneIndex", false, value);
}

std::string GCBoneVelocityMetricEvaluator::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBoneVelocityMetricEvaluator::IsValid() {
    return (m_ptr != nullptr);
}

GCFuseProgram::GCFuseProgram(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFuseProgram::GCFuseProgram(void *ptr) {
    m_ptr = ptr;
}

std::vector<uint8> GCFuseProgram::GetProgramBuffer() const {
    CUtlVector<uint8>* vec = GetSchemaValue<CUtlVector<uint8>*>(m_ptr, "CFuseProgram", "m_programBuffer"); std::vector<uint8> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCFuseProgram::SetProgramBuffer(std::vector<uint8> value) {
    SetSchemaValueCUtlVector<uint8>(m_ptr, "CFuseProgram", "m_programBuffer", false, value);
}

std::vector<GFuseVariableIndex_t> GCFuseProgram::GetVariablesRead() const {
    CUtlVector<GFuseVariableIndex_t>* vec = GetSchemaValue<CUtlVector<GFuseVariableIndex_t>*>(m_ptr, "CFuseProgram", "m_variablesRead"); std::vector<GFuseVariableIndex_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCFuseProgram::SetVariablesRead(std::vector<GFuseVariableIndex_t> value) {
    SetSchemaValueCUtlVector<GFuseVariableIndex_t>(m_ptr, "CFuseProgram", "m_variablesRead", false, value);
}

std::vector<GFuseVariableIndex_t> GCFuseProgram::GetVariablesWritten() const {
    CUtlVector<GFuseVariableIndex_t>* vec = GetSchemaValue<CUtlVector<GFuseVariableIndex_t>*>(m_ptr, "CFuseProgram", "m_variablesWritten"); std::vector<GFuseVariableIndex_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCFuseProgram::SetVariablesWritten(std::vector<GFuseVariableIndex_t> value) {
    SetSchemaValueCUtlVector<GFuseVariableIndex_t>(m_ptr, "CFuseProgram", "m_variablesWritten", false, value);
}

int32_t GCFuseProgram::GetMaxTempVarsUsed() const {
    return GetSchemaValue<int32_t>(m_ptr, "CFuseProgram", "m_nMaxTempVarsUsed");
}

void GCFuseProgram::SetMaxTempVarsUsed(int32_t value) {
    SetSchemaValue(m_ptr, "CFuseProgram", "m_nMaxTempVarsUsed", false, value);
}

std::string GCFuseProgram::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFuseProgram::IsValid() {
    return (m_ptr != nullptr);
}

GCFeVertexMapBuildArray::GCFeVertexMapBuildArray(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFeVertexMapBuildArray::GCFeVertexMapBuildArray(void *ptr) {
    m_ptr = ptr;
}

std::vector<GFeVertexMapBuild_t*> GCFeVertexMapBuildArray::GetArray() const {
    CUtlVector<GFeVertexMapBuild_t*>* vec = GetSchemaValue<CUtlVector<GFeVertexMapBuild_t*>*>(m_ptr, "CFeVertexMapBuildArray", "m_Array"); std::vector<GFeVertexMapBuild_t*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCFeVertexMapBuildArray::SetArray(std::vector<GFeVertexMapBuild_t*> value) {
    SetSchemaValueCUtlVector<GFeVertexMapBuild_t*>(m_ptr, "CFeVertexMapBuildArray", "m_Array", false, value);
}

std::string GCFeVertexMapBuildArray::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFeVertexMapBuildArray::IsValid() {
    return (m_ptr != nullptr);
}

GFeSoftParent_t::GFeSoftParent_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeSoftParent_t::GFeSoftParent_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GFeSoftParent_t::GetParent() const {
    return GetSchemaValue<int32_t>(m_ptr, "FeSoftParent_t", "nParent");
}

void GFeSoftParent_t::SetParent(int32_t value) {
    SetSchemaValue(m_ptr, "FeSoftParent_t", "nParent", true, value);
}

float GFeSoftParent_t::GetAlpha() const {
    return GetSchemaValue<float>(m_ptr, "FeSoftParent_t", "flAlpha");
}

void GFeSoftParent_t::SetAlpha(float value) {
    SetSchemaValue(m_ptr, "FeSoftParent_t", "flAlpha", true, value);
}

std::string GFeSoftParent_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeSoftParent_t::IsValid() {
    return (m_ptr != nullptr);
}

GCFootFallAnimTag::GCFootFallAnimTag(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFootFallAnimTag::GCFootFallAnimTag(void *ptr) {
    m_ptr = ptr;
}

FootFallTagFoot_t GCFootFallAnimTag::GetFoot() const {
    return GetSchemaValue<FootFallTagFoot_t>(m_ptr, "CFootFallAnimTag", "m_foot");
}

void GCFootFallAnimTag::SetFoot(FootFallTagFoot_t value) {
    SetSchemaValue(m_ptr, "CFootFallAnimTag", "m_foot", false, value);
}

std::string GCFootFallAnimTag::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFootFallAnimTag::IsValid() {
    return (m_ptr != nullptr);
}

GEventClientOutput_t::GEventClientOutput_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEventClientOutput_t::GEventClientOutput_t(void *ptr) {
    m_ptr = ptr;
}

GEngineLoopState_t GEventClientOutput_t::GetLoopState() const {
    return GetSchemaValue<GEngineLoopState_t>(m_ptr, "EventClientOutput_t", "m_LoopState");
}

void GEventClientOutput_t::SetLoopState(GEngineLoopState_t value) {
    SetSchemaValue(m_ptr, "EventClientOutput_t", "m_LoopState", true, value);
}

float GEventClientOutput_t::GetRenderTime() const {
    return GetSchemaValue<float>(m_ptr, "EventClientOutput_t", "m_flRenderTime");
}

void GEventClientOutput_t::SetRenderTime(float value) {
    SetSchemaValue(m_ptr, "EventClientOutput_t", "m_flRenderTime", true, value);
}

float GEventClientOutput_t::GetRealTime() const {
    return GetSchemaValue<float>(m_ptr, "EventClientOutput_t", "m_flRealTime");
}

void GEventClientOutput_t::SetRealTime(float value) {
    SetSchemaValue(m_ptr, "EventClientOutput_t", "m_flRealTime", true, value);
}

float GEventClientOutput_t::GetRenderFrameTimeUnbounded() const {
    return GetSchemaValue<float>(m_ptr, "EventClientOutput_t", "m_flRenderFrameTimeUnbounded");
}

void GEventClientOutput_t::SetRenderFrameTimeUnbounded(float value) {
    SetSchemaValue(m_ptr, "EventClientOutput_t", "m_flRenderFrameTimeUnbounded", true, value);
}

bool GEventClientOutput_t::GetRenderOnly() const {
    return GetSchemaValue<bool>(m_ptr, "EventClientOutput_t", "m_bRenderOnly");
}

void GEventClientOutput_t::SetRenderOnly(bool value) {
    SetSchemaValue(m_ptr, "EventClientOutput_t", "m_bRenderOnly", true, value);
}

std::string GEventClientOutput_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEventClientOutput_t::IsValid() {
    return (m_ptr != nullptr);
}

GMaterialVariable_t::GMaterialVariable_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GMaterialVariable_t::GMaterialVariable_t(void *ptr) {
    m_ptr = ptr;
}

CUtlString GMaterialVariable_t::GetStrVariable() const {
    return GetSchemaValue<CUtlString>(m_ptr, "MaterialVariable_t", "m_strVariable");
}

void GMaterialVariable_t::SetStrVariable(CUtlString value) {
    SetSchemaValue(m_ptr, "MaterialVariable_t", "m_strVariable", true, value);
}

GParticleAttributeIndex_t GMaterialVariable_t::GetVariableField() const {
    return GetSchemaValue<GParticleAttributeIndex_t>(m_ptr, "MaterialVariable_t", "m_nVariableField");
}

void GMaterialVariable_t::SetVariableField(GParticleAttributeIndex_t value) {
    SetSchemaValue(m_ptr, "MaterialVariable_t", "m_nVariableField", true, value);
}

float GMaterialVariable_t::GetScale() const {
    return GetSchemaValue<float>(m_ptr, "MaterialVariable_t", "m_flScale");
}

void GMaterialVariable_t::SetScale(float value) {
    SetSchemaValue(m_ptr, "MaterialVariable_t", "m_flScale", true, value);
}

std::string GMaterialVariable_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GMaterialVariable_t::IsValid() {
    return (m_ptr != nullptr);
}

GCFeNamedJiggleBone::GCFeNamedJiggleBone(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFeNamedJiggleBone::GCFeNamedJiggleBone(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCFeNamedJiggleBone::GetStrParentBone() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CFeNamedJiggleBone", "m_strParentBone");
}

void GCFeNamedJiggleBone::SetStrParentBone(CUtlString value) {
    SetSchemaValue(m_ptr, "CFeNamedJiggleBone", "m_strParentBone", false, value);
}

uint32_t GCFeNamedJiggleBone::GetJiggleParent() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CFeNamedJiggleBone", "m_nJiggleParent");
}

void GCFeNamedJiggleBone::SetJiggleParent(uint32_t value) {
    SetSchemaValue(m_ptr, "CFeNamedJiggleBone", "m_nJiggleParent", false, value);
}

GCFeJiggleBone GCFeNamedJiggleBone::GetJiggleBone() const {
    return GetSchemaValue<GCFeJiggleBone>(m_ptr, "CFeNamedJiggleBone", "m_jiggleBone");
}

void GCFeNamedJiggleBone::SetJiggleBone(GCFeJiggleBone value) {
    SetSchemaValue(m_ptr, "CFeNamedJiggleBone", "m_jiggleBone", false, value);
}

std::string GCFeNamedJiggleBone::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFeNamedJiggleBone::IsValid() {
    return (m_ptr != nullptr);
}

GEventClientProcessInput_t::GEventClientProcessInput_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEventClientProcessInput_t::GEventClientProcessInput_t(void *ptr) {
    m_ptr = ptr;
}

GEngineLoopState_t GEventClientProcessInput_t::GetLoopState() const {
    return GetSchemaValue<GEngineLoopState_t>(m_ptr, "EventClientProcessInput_t", "m_LoopState");
}

void GEventClientProcessInput_t::SetLoopState(GEngineLoopState_t value) {
    SetSchemaValue(m_ptr, "EventClientProcessInput_t", "m_LoopState", true, value);
}

float GEventClientProcessInput_t::GetRealTime() const {
    return GetSchemaValue<float>(m_ptr, "EventClientProcessInput_t", "m_flRealTime");
}

void GEventClientProcessInput_t::SetRealTime(float value) {
    SetSchemaValue(m_ptr, "EventClientProcessInput_t", "m_flRealTime", true, value);
}

float GEventClientProcessInput_t::GetTickInterval() const {
    return GetSchemaValue<float>(m_ptr, "EventClientProcessInput_t", "m_flTickInterval");
}

void GEventClientProcessInput_t::SetTickInterval(float value) {
    SetSchemaValue(m_ptr, "EventClientProcessInput_t", "m_flTickInterval", true, value);
}

double GEventClientProcessInput_t::GetTickStartTime() const {
    return GetSchemaValue<double>(m_ptr, "EventClientProcessInput_t", "m_flTickStartTime");
}

void GEventClientProcessInput_t::SetTickStartTime(double value) {
    SetSchemaValue(m_ptr, "EventClientProcessInput_t", "m_flTickStartTime", true, value);
}

std::string GEventClientProcessInput_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEventClientProcessInput_t::IsValid() {
    return (m_ptr != nullptr);
}

GJiggleBoneSettingsList_t::GJiggleBoneSettingsList_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GJiggleBoneSettingsList_t::GJiggleBoneSettingsList_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<GJiggleBoneSettings_t> GJiggleBoneSettingsList_t::GetBoneSettings() const {
    CUtlVector<GJiggleBoneSettings_t>* vec = GetSchemaValue<CUtlVector<GJiggleBoneSettings_t>*>(m_ptr, "JiggleBoneSettingsList_t", "m_boneSettings"); std::vector<GJiggleBoneSettings_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GJiggleBoneSettingsList_t::SetBoneSettings(std::vector<GJiggleBoneSettings_t> value) {
    SetSchemaValueCUtlVector<GJiggleBoneSettings_t>(m_ptr, "JiggleBoneSettingsList_t", "m_boneSettings", true, value);
}

std::string GJiggleBoneSettingsList_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GJiggleBoneSettingsList_t::IsValid() {
    return (m_ptr != nullptr);
}

GCSequenceFinishedAnimTag::GCSequenceFinishedAnimTag(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSequenceFinishedAnimTag::GCSequenceFinishedAnimTag(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCSequenceFinishedAnimTag::GetSequenceName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CSequenceFinishedAnimTag", "m_sequenceName");
}

void GCSequenceFinishedAnimTag::SetSequenceName(CUtlString value) {
    SetSchemaValue(m_ptr, "CSequenceFinishedAnimTag", "m_sequenceName", false, value);
}

std::string GCSequenceFinishedAnimTag::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSequenceFinishedAnimTag::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimationGraphVisualizerText::GCAnimationGraphVisualizerText(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimationGraphVisualizerText::GCAnimationGraphVisualizerText(void *ptr) {
    m_ptr = ptr;
}

Vector GCAnimationGraphVisualizerText::GetWsPosition() const {
    return GetSchemaValue<Vector>(m_ptr, "CAnimationGraphVisualizerText", "m_vWsPosition");
}

void GCAnimationGraphVisualizerText::SetWsPosition(Vector value) {
    SetSchemaValue(m_ptr, "CAnimationGraphVisualizerText", "m_vWsPosition", false, value);
}

Color GCAnimationGraphVisualizerText::GetColor() const {
    return GetSchemaValue<Color>(m_ptr, "CAnimationGraphVisualizerText", "m_Color");
}

void GCAnimationGraphVisualizerText::SetColor(Color value) {
    SetSchemaValue(m_ptr, "CAnimationGraphVisualizerText", "m_Color", false, value);
}

CUtlString GCAnimationGraphVisualizerText::GetText() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CAnimationGraphVisualizerText", "m_Text");
}

void GCAnimationGraphVisualizerText::SetText(CUtlString value) {
    SetSchemaValue(m_ptr, "CAnimationGraphVisualizerText", "m_Text", false, value);
}

std::string GCAnimationGraphVisualizerText::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimationGraphVisualizerText::IsValid() {
    return (m_ptr != nullptr);
}

GCDampedPathAnimMotorUpdater::GCDampedPathAnimMotorUpdater(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCDampedPathAnimMotorUpdater::GCDampedPathAnimMotorUpdater(void *ptr) {
    m_ptr = ptr;
}

float GCDampedPathAnimMotorUpdater::GetAnticipationTime() const {
    return GetSchemaValue<float>(m_ptr, "CDampedPathAnimMotorUpdater", "m_flAnticipationTime");
}

void GCDampedPathAnimMotorUpdater::SetAnticipationTime(float value) {
    SetSchemaValue(m_ptr, "CDampedPathAnimMotorUpdater", "m_flAnticipationTime", false, value);
}

float GCDampedPathAnimMotorUpdater::GetMinSpeedScale() const {
    return GetSchemaValue<float>(m_ptr, "CDampedPathAnimMotorUpdater", "m_flMinSpeedScale");
}

void GCDampedPathAnimMotorUpdater::SetMinSpeedScale(float value) {
    SetSchemaValue(m_ptr, "CDampedPathAnimMotorUpdater", "m_flMinSpeedScale", false, value);
}

GCAnimParamHandle GCDampedPathAnimMotorUpdater::GetAnticipationPosParam() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CDampedPathAnimMotorUpdater", "m_hAnticipationPosParam");
}

void GCDampedPathAnimMotorUpdater::SetAnticipationPosParam(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CDampedPathAnimMotorUpdater", "m_hAnticipationPosParam", false, value);
}

GCAnimParamHandle GCDampedPathAnimMotorUpdater::GetAnticipationHeadingParam() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CDampedPathAnimMotorUpdater", "m_hAnticipationHeadingParam");
}

void GCDampedPathAnimMotorUpdater::SetAnticipationHeadingParam(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CDampedPathAnimMotorUpdater", "m_hAnticipationHeadingParam", false, value);
}

float GCDampedPathAnimMotorUpdater::GetSpringConstant() const {
    return GetSchemaValue<float>(m_ptr, "CDampedPathAnimMotorUpdater", "m_flSpringConstant");
}

void GCDampedPathAnimMotorUpdater::SetSpringConstant(float value) {
    SetSchemaValue(m_ptr, "CDampedPathAnimMotorUpdater", "m_flSpringConstant", false, value);
}

float GCDampedPathAnimMotorUpdater::GetMinSpringTension() const {
    return GetSchemaValue<float>(m_ptr, "CDampedPathAnimMotorUpdater", "m_flMinSpringTension");
}

void GCDampedPathAnimMotorUpdater::SetMinSpringTension(float value) {
    SetSchemaValue(m_ptr, "CDampedPathAnimMotorUpdater", "m_flMinSpringTension", false, value);
}

float GCDampedPathAnimMotorUpdater::GetMaxSpringTension() const {
    return GetSchemaValue<float>(m_ptr, "CDampedPathAnimMotorUpdater", "m_flMaxSpringTension");
}

void GCDampedPathAnimMotorUpdater::SetMaxSpringTension(float value) {
    SetSchemaValue(m_ptr, "CDampedPathAnimMotorUpdater", "m_flMaxSpringTension", false, value);
}

std::string GCDampedPathAnimMotorUpdater::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCDampedPathAnimMotorUpdater::IsValid() {
    return (m_ptr != nullptr);
}

GLookAtOpFixedSettings_t::GLookAtOpFixedSettings_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GLookAtOpFixedSettings_t::GLookAtOpFixedSettings_t(void *ptr) {
    m_ptr = ptr;
}

GCAnimAttachment GLookAtOpFixedSettings_t::GetAttachment() const {
    return GetSchemaValue<GCAnimAttachment>(m_ptr, "LookAtOpFixedSettings_t", "m_attachment");
}

void GLookAtOpFixedSettings_t::SetAttachment(GCAnimAttachment value) {
    SetSchemaValue(m_ptr, "LookAtOpFixedSettings_t", "m_attachment", true, value);
}

GCAnimInputDamping GLookAtOpFixedSettings_t::GetDamping() const {
    return GetSchemaValue<GCAnimInputDamping>(m_ptr, "LookAtOpFixedSettings_t", "m_damping");
}

void GLookAtOpFixedSettings_t::SetDamping(GCAnimInputDamping value) {
    SetSchemaValue(m_ptr, "LookAtOpFixedSettings_t", "m_damping", true, value);
}

std::vector<GLookAtBone_t> GLookAtOpFixedSettings_t::GetBones() const {
    CUtlVector<GLookAtBone_t>* vec = GetSchemaValue<CUtlVector<GLookAtBone_t>*>(m_ptr, "LookAtOpFixedSettings_t", "m_bones"); std::vector<GLookAtBone_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GLookAtOpFixedSettings_t::SetBones(std::vector<GLookAtBone_t> value) {
    SetSchemaValueCUtlVector<GLookAtBone_t>(m_ptr, "LookAtOpFixedSettings_t", "m_bones", true, value);
}

float GLookAtOpFixedSettings_t::GetYawLimit() const {
    return GetSchemaValue<float>(m_ptr, "LookAtOpFixedSettings_t", "m_flYawLimit");
}

void GLookAtOpFixedSettings_t::SetYawLimit(float value) {
    SetSchemaValue(m_ptr, "LookAtOpFixedSettings_t", "m_flYawLimit", true, value);
}

float GLookAtOpFixedSettings_t::GetPitchLimit() const {
    return GetSchemaValue<float>(m_ptr, "LookAtOpFixedSettings_t", "m_flPitchLimit");
}

void GLookAtOpFixedSettings_t::SetPitchLimit(float value) {
    SetSchemaValue(m_ptr, "LookAtOpFixedSettings_t", "m_flPitchLimit", true, value);
}

float GLookAtOpFixedSettings_t::GetHysteresisInnerAngle() const {
    return GetSchemaValue<float>(m_ptr, "LookAtOpFixedSettings_t", "m_flHysteresisInnerAngle");
}

void GLookAtOpFixedSettings_t::SetHysteresisInnerAngle(float value) {
    SetSchemaValue(m_ptr, "LookAtOpFixedSettings_t", "m_flHysteresisInnerAngle", true, value);
}

float GLookAtOpFixedSettings_t::GetHysteresisOuterAngle() const {
    return GetSchemaValue<float>(m_ptr, "LookAtOpFixedSettings_t", "m_flHysteresisOuterAngle");
}

void GLookAtOpFixedSettings_t::SetHysteresisOuterAngle(float value) {
    SetSchemaValue(m_ptr, "LookAtOpFixedSettings_t", "m_flHysteresisOuterAngle", true, value);
}

bool GLookAtOpFixedSettings_t::GetRotateYawForward() const {
    return GetSchemaValue<bool>(m_ptr, "LookAtOpFixedSettings_t", "m_bRotateYawForward");
}

void GLookAtOpFixedSettings_t::SetRotateYawForward(bool value) {
    SetSchemaValue(m_ptr, "LookAtOpFixedSettings_t", "m_bRotateYawForward", true, value);
}

bool GLookAtOpFixedSettings_t::GetMaintainUpDirection() const {
    return GetSchemaValue<bool>(m_ptr, "LookAtOpFixedSettings_t", "m_bMaintainUpDirection");
}

void GLookAtOpFixedSettings_t::SetMaintainUpDirection(bool value) {
    SetSchemaValue(m_ptr, "LookAtOpFixedSettings_t", "m_bMaintainUpDirection", true, value);
}

bool GLookAtOpFixedSettings_t::GetTargetIsPosition() const {
    return GetSchemaValue<bool>(m_ptr, "LookAtOpFixedSettings_t", "m_bTargetIsPosition");
}

void GLookAtOpFixedSettings_t::SetTargetIsPosition(bool value) {
    SetSchemaValue(m_ptr, "LookAtOpFixedSettings_t", "m_bTargetIsPosition", true, value);
}

bool GLookAtOpFixedSettings_t::GetUseHysteresis() const {
    return GetSchemaValue<bool>(m_ptr, "LookAtOpFixedSettings_t", "m_bUseHysteresis");
}

void GLookAtOpFixedSettings_t::SetUseHysteresis(bool value) {
    SetSchemaValue(m_ptr, "LookAtOpFixedSettings_t", "m_bUseHysteresis", true, value);
}

std::string GLookAtOpFixedSettings_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GLookAtOpFixedSettings_t::IsValid() {
    return (m_ptr != nullptr);
}

GCEntityIOOutput::GCEntityIOOutput(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEntityIOOutput::GCEntityIOOutput(void *ptr) {
    m_ptr = ptr;
}

std::string GCEntityIOOutput::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEntityIOOutput::IsValid() {
    return (m_ptr != nullptr);
}

GCDSPPresetMixgroupModifierTable::GCDSPPresetMixgroupModifierTable(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCDSPPresetMixgroupModifierTable::GCDSPPresetMixgroupModifierTable(void *ptr) {
    m_ptr = ptr;
}

std::vector<GCDspPresetModifierList> GCDSPPresetMixgroupModifierTable::GetTable() const {
    CUtlVector<GCDspPresetModifierList>* vec = GetSchemaValue<CUtlVector<GCDspPresetModifierList>*>(m_ptr, "CDSPPresetMixgroupModifierTable", "m_table"); std::vector<GCDspPresetModifierList> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCDSPPresetMixgroupModifierTable::SetTable(std::vector<GCDspPresetModifierList> value) {
    SetSchemaValueCUtlVector<GCDspPresetModifierList>(m_ptr, "CDSPPresetMixgroupModifierTable", "m_table", false, value);
}

std::string GCDSPPresetMixgroupModifierTable::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCDSPPresetMixgroupModifierTable::IsValid() {
    return (m_ptr != nullptr);
}

GRnWing_t::GRnWing_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GRnWing_t::GRnWing_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<int32_t> GRnWing_t::GetIndex() const {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "RnWing_t", "m_nIndex"); std::vector<int32_t> ret; for(int i = 0; i < 3; i++) { ret.push_back(outValue[i]); } return ret;
}

void GRnWing_t::SetIndex(std::vector<int32_t> value) {
    int32_t* outValue = GetSchemaValue<int32_t*>(m_ptr, "RnWing_t", "m_nIndex"); for(int i = 0; i < 3; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "RnWing_t", "m_nIndex", true, outValue);
}

std::string GRnWing_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GRnWing_t::IsValid() {
    return (m_ptr != nullptr);
}

GCNmChildGraphNode::GCNmChildGraphNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmChildGraphNode::GCNmChildGraphNode(void *ptr) {
    m_ptr = ptr;
}

int16_t GCNmChildGraphNode::GetChildGraphIdx() const {
    return GetSchemaValue<int16_t>(m_ptr, "CNmChildGraphNode", "m_nChildGraphIdx");
}

void GCNmChildGraphNode::SetChildGraphIdx(int16_t value) {
    SetSchemaValue(m_ptr, "CNmChildGraphNode", "m_nChildGraphIdx", false, value);
}

std::string GCNmChildGraphNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmChildGraphNode::IsValid() {
    return (m_ptr != nullptr);
}

GVMixPlateverbDesc_t::GVMixPlateverbDesc_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVMixPlateverbDesc_t::GVMixPlateverbDesc_t(void *ptr) {
    m_ptr = ptr;
}

float GVMixPlateverbDesc_t::GetPrefilter() const {
    return GetSchemaValue<float>(m_ptr, "VMixPlateverbDesc_t", "m_flPrefilter");
}

void GVMixPlateverbDesc_t::SetPrefilter(float value) {
    SetSchemaValue(m_ptr, "VMixPlateverbDesc_t", "m_flPrefilter", true, value);
}

float GVMixPlateverbDesc_t::GetInputDiffusion1() const {
    return GetSchemaValue<float>(m_ptr, "VMixPlateverbDesc_t", "m_flInputDiffusion1");
}

void GVMixPlateverbDesc_t::SetInputDiffusion1(float value) {
    SetSchemaValue(m_ptr, "VMixPlateverbDesc_t", "m_flInputDiffusion1", true, value);
}

float GVMixPlateverbDesc_t::GetInputDiffusion2() const {
    return GetSchemaValue<float>(m_ptr, "VMixPlateverbDesc_t", "m_flInputDiffusion2");
}

void GVMixPlateverbDesc_t::SetInputDiffusion2(float value) {
    SetSchemaValue(m_ptr, "VMixPlateverbDesc_t", "m_flInputDiffusion2", true, value);
}

float GVMixPlateverbDesc_t::GetDecay() const {
    return GetSchemaValue<float>(m_ptr, "VMixPlateverbDesc_t", "m_flDecay");
}

void GVMixPlateverbDesc_t::SetDecay(float value) {
    SetSchemaValue(m_ptr, "VMixPlateverbDesc_t", "m_flDecay", true, value);
}

float GVMixPlateverbDesc_t::GetDamp() const {
    return GetSchemaValue<float>(m_ptr, "VMixPlateverbDesc_t", "m_flDamp");
}

void GVMixPlateverbDesc_t::SetDamp(float value) {
    SetSchemaValue(m_ptr, "VMixPlateverbDesc_t", "m_flDamp", true, value);
}

float GVMixPlateverbDesc_t::GetFeedbackDiffusion1() const {
    return GetSchemaValue<float>(m_ptr, "VMixPlateverbDesc_t", "m_flFeedbackDiffusion1");
}

void GVMixPlateverbDesc_t::SetFeedbackDiffusion1(float value) {
    SetSchemaValue(m_ptr, "VMixPlateverbDesc_t", "m_flFeedbackDiffusion1", true, value);
}

float GVMixPlateverbDesc_t::GetFeedbackDiffusion2() const {
    return GetSchemaValue<float>(m_ptr, "VMixPlateverbDesc_t", "m_flFeedbackDiffusion2");
}

void GVMixPlateverbDesc_t::SetFeedbackDiffusion2(float value) {
    SetSchemaValue(m_ptr, "VMixPlateverbDesc_t", "m_flFeedbackDiffusion2", true, value);
}

std::string GVMixPlateverbDesc_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVMixPlateverbDesc_t::IsValid() {
    return (m_ptr != nullptr);
}

GCMotionSearchDB::GCMotionSearchDB(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMotionSearchDB::GCMotionSearchDB(void *ptr) {
    m_ptr = ptr;
}

GCMotionSearchNode GCMotionSearchDB::GetRootNode() const {
    return GetSchemaValue<GCMotionSearchNode>(m_ptr, "CMotionSearchDB", "m_rootNode");
}

void GCMotionSearchDB::SetRootNode(GCMotionSearchNode value) {
    SetSchemaValue(m_ptr, "CMotionSearchDB", "m_rootNode", false, value);
}

GCProductQuantizer GCMotionSearchDB::GetResidualQuantizer() const {
    return GetSchemaValue<GCProductQuantizer>(m_ptr, "CMotionSearchDB", "m_residualQuantizer");
}

void GCMotionSearchDB::SetResidualQuantizer(GCProductQuantizer value) {
    SetSchemaValue(m_ptr, "CMotionSearchDB", "m_residualQuantizer", false, value);
}

std::vector<GMotionDBIndex> GCMotionSearchDB::GetCodeIndices() const {
    CUtlVector<GMotionDBIndex>* vec = GetSchemaValue<CUtlVector<GMotionDBIndex>*>(m_ptr, "CMotionSearchDB", "m_codeIndices"); std::vector<GMotionDBIndex> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCMotionSearchDB::SetCodeIndices(std::vector<GMotionDBIndex> value) {
    SetSchemaValueCUtlVector<GMotionDBIndex>(m_ptr, "CMotionSearchDB", "m_codeIndices", false, value);
}

std::string GCMotionSearchDB::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMotionSearchDB::IsValid() {
    return (m_ptr != nullptr);
}

GVPhysics2ShapeDef_t::GVPhysics2ShapeDef_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVPhysics2ShapeDef_t::GVPhysics2ShapeDef_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<GRnSphereDesc_t> GVPhysics2ShapeDef_t::GetSpheres() const {
    CUtlVector<GRnSphereDesc_t>* vec = GetSchemaValue<CUtlVector<GRnSphereDesc_t>*>(m_ptr, "VPhysics2ShapeDef_t", "m_spheres"); std::vector<GRnSphereDesc_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GVPhysics2ShapeDef_t::SetSpheres(std::vector<GRnSphereDesc_t> value) {
    SetSchemaValueCUtlVector<GRnSphereDesc_t>(m_ptr, "VPhysics2ShapeDef_t", "m_spheres", true, value);
}

std::vector<GRnCapsuleDesc_t> GVPhysics2ShapeDef_t::GetCapsules() const {
    CUtlVector<GRnCapsuleDesc_t>* vec = GetSchemaValue<CUtlVector<GRnCapsuleDesc_t>*>(m_ptr, "VPhysics2ShapeDef_t", "m_capsules"); std::vector<GRnCapsuleDesc_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GVPhysics2ShapeDef_t::SetCapsules(std::vector<GRnCapsuleDesc_t> value) {
    SetSchemaValueCUtlVector<GRnCapsuleDesc_t>(m_ptr, "VPhysics2ShapeDef_t", "m_capsules", true, value);
}

std::vector<GRnHullDesc_t> GVPhysics2ShapeDef_t::GetHulls() const {
    CUtlVector<GRnHullDesc_t>* vec = GetSchemaValue<CUtlVector<GRnHullDesc_t>*>(m_ptr, "VPhysics2ShapeDef_t", "m_hulls"); std::vector<GRnHullDesc_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GVPhysics2ShapeDef_t::SetHulls(std::vector<GRnHullDesc_t> value) {
    SetSchemaValueCUtlVector<GRnHullDesc_t>(m_ptr, "VPhysics2ShapeDef_t", "m_hulls", true, value);
}

std::vector<GRnMeshDesc_t> GVPhysics2ShapeDef_t::GetMeshes() const {
    CUtlVector<GRnMeshDesc_t>* vec = GetSchemaValue<CUtlVector<GRnMeshDesc_t>*>(m_ptr, "VPhysics2ShapeDef_t", "m_meshes"); std::vector<GRnMeshDesc_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GVPhysics2ShapeDef_t::SetMeshes(std::vector<GRnMeshDesc_t> value) {
    SetSchemaValueCUtlVector<GRnMeshDesc_t>(m_ptr, "VPhysics2ShapeDef_t", "m_meshes", true, value);
}

std::vector<uint16> GVPhysics2ShapeDef_t::GetCollisionAttributeIndices() const {
    CUtlVector<uint16>* vec = GetSchemaValue<CUtlVector<uint16>*>(m_ptr, "VPhysics2ShapeDef_t", "m_CollisionAttributeIndices"); std::vector<uint16> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GVPhysics2ShapeDef_t::SetCollisionAttributeIndices(std::vector<uint16> value) {
    SetSchemaValueCUtlVector<uint16>(m_ptr, "VPhysics2ShapeDef_t", "m_CollisionAttributeIndices", true, value);
}

std::string GVPhysics2ShapeDef_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVPhysics2ShapeDef_t::IsValid() {
    return (m_ptr != nullptr);
}

GWorldBuilderParams_t::GWorldBuilderParams_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GWorldBuilderParams_t::GWorldBuilderParams_t(void *ptr) {
    m_ptr = ptr;
}

float GWorldBuilderParams_t::GetMinDrawVolumeSize() const {
    return GetSchemaValue<float>(m_ptr, "WorldBuilderParams_t", "m_flMinDrawVolumeSize");
}

void GWorldBuilderParams_t::SetMinDrawVolumeSize(float value) {
    SetSchemaValue(m_ptr, "WorldBuilderParams_t", "m_flMinDrawVolumeSize", true, value);
}

bool GWorldBuilderParams_t::GetBuildBakedLighting() const {
    return GetSchemaValue<bool>(m_ptr, "WorldBuilderParams_t", "m_bBuildBakedLighting");
}

void GWorldBuilderParams_t::SetBuildBakedLighting(bool value) {
    SetSchemaValue(m_ptr, "WorldBuilderParams_t", "m_bBuildBakedLighting", true, value);
}

GBakedLightingInfo_t GWorldBuilderParams_t::GetBakedLightingInfo() const {
    return GetSchemaValue<GBakedLightingInfo_t>(m_ptr, "WorldBuilderParams_t", "m_bakedLightingInfo");
}

void GWorldBuilderParams_t::SetBakedLightingInfo(GBakedLightingInfo_t value) {
    SetSchemaValue(m_ptr, "WorldBuilderParams_t", "m_bakedLightingInfo", true, value);
}

uint64_t GWorldBuilderParams_t::GetCompileTimestamp() const {
    return GetSchemaValue<uint64_t>(m_ptr, "WorldBuilderParams_t", "m_nCompileTimestamp");
}

void GWorldBuilderParams_t::SetCompileTimestamp(uint64_t value) {
    SetSchemaValue(m_ptr, "WorldBuilderParams_t", "m_nCompileTimestamp", true, value);
}

uint64_t GWorldBuilderParams_t::GetCompileFingerprint() const {
    return GetSchemaValue<uint64_t>(m_ptr, "WorldBuilderParams_t", "m_nCompileFingerprint");
}

void GWorldBuilderParams_t::SetCompileFingerprint(uint64_t value) {
    SetSchemaValue(m_ptr, "WorldBuilderParams_t", "m_nCompileFingerprint", true, value);
}

std::string GWorldBuilderParams_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GWorldBuilderParams_t::IsValid() {
    return (m_ptr != nullptr);
}

GCFootAdjustmentUpdateNode::GCFootAdjustmentUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFootAdjustmentUpdateNode::GCFootAdjustmentUpdateNode(void *ptr) {
    m_ptr = ptr;
}

GCPoseHandle GCFootAdjustmentUpdateNode::GetBasePoseCacheHandle() const {
    return GetSchemaValue<GCPoseHandle>(m_ptr, "CFootAdjustmentUpdateNode", "m_hBasePoseCacheHandle");
}

void GCFootAdjustmentUpdateNode::SetBasePoseCacheHandle(GCPoseHandle value) {
    SetSchemaValue(m_ptr, "CFootAdjustmentUpdateNode", "m_hBasePoseCacheHandle", false, value);
}

GCAnimParamHandle GCFootAdjustmentUpdateNode::GetFacingTarget() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CFootAdjustmentUpdateNode", "m_facingTarget");
}

void GCFootAdjustmentUpdateNode::SetFacingTarget(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CFootAdjustmentUpdateNode", "m_facingTarget", false, value);
}

float GCFootAdjustmentUpdateNode::GetTurnTimeMin() const {
    return GetSchemaValue<float>(m_ptr, "CFootAdjustmentUpdateNode", "m_flTurnTimeMin");
}

void GCFootAdjustmentUpdateNode::SetTurnTimeMin(float value) {
    SetSchemaValue(m_ptr, "CFootAdjustmentUpdateNode", "m_flTurnTimeMin", false, value);
}

float GCFootAdjustmentUpdateNode::GetTurnTimeMax() const {
    return GetSchemaValue<float>(m_ptr, "CFootAdjustmentUpdateNode", "m_flTurnTimeMax");
}

void GCFootAdjustmentUpdateNode::SetTurnTimeMax(float value) {
    SetSchemaValue(m_ptr, "CFootAdjustmentUpdateNode", "m_flTurnTimeMax", false, value);
}

float GCFootAdjustmentUpdateNode::GetStepHeightMax() const {
    return GetSchemaValue<float>(m_ptr, "CFootAdjustmentUpdateNode", "m_flStepHeightMax");
}

void GCFootAdjustmentUpdateNode::SetStepHeightMax(float value) {
    SetSchemaValue(m_ptr, "CFootAdjustmentUpdateNode", "m_flStepHeightMax", false, value);
}

float GCFootAdjustmentUpdateNode::GetStepHeightMaxAngle() const {
    return GetSchemaValue<float>(m_ptr, "CFootAdjustmentUpdateNode", "m_flStepHeightMaxAngle");
}

void GCFootAdjustmentUpdateNode::SetStepHeightMaxAngle(float value) {
    SetSchemaValue(m_ptr, "CFootAdjustmentUpdateNode", "m_flStepHeightMaxAngle", false, value);
}

bool GCFootAdjustmentUpdateNode::GetResetChild() const {
    return GetSchemaValue<bool>(m_ptr, "CFootAdjustmentUpdateNode", "m_bResetChild");
}

void GCFootAdjustmentUpdateNode::SetResetChild(bool value) {
    SetSchemaValue(m_ptr, "CFootAdjustmentUpdateNode", "m_bResetChild", false, value);
}

bool GCFootAdjustmentUpdateNode::GetAnimationDriven() const {
    return GetSchemaValue<bool>(m_ptr, "CFootAdjustmentUpdateNode", "m_bAnimationDriven");
}

void GCFootAdjustmentUpdateNode::SetAnimationDriven(bool value) {
    SetSchemaValue(m_ptr, "CFootAdjustmentUpdateNode", "m_bAnimationDriven", false, value);
}

std::string GCFootAdjustmentUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFootAdjustmentUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GCNmClipNode::GCNmClipNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmClipNode::GCNmClipNode(void *ptr) {
    m_ptr = ptr;
}

int16_t GCNmClipNode::GetPlayInReverseValueNodeIdx() const {
    return GetSchemaValue<int16_t>(m_ptr, "CNmClipNode", "m_nPlayInReverseValueNodeIdx");
}

void GCNmClipNode::SetPlayInReverseValueNodeIdx(int16_t value) {
    SetSchemaValue(m_ptr, "CNmClipNode", "m_nPlayInReverseValueNodeIdx", false, value);
}

int16_t GCNmClipNode::GetResetTimeValueNodeIdx() const {
    return GetSchemaValue<int16_t>(m_ptr, "CNmClipNode", "m_nResetTimeValueNodeIdx");
}

void GCNmClipNode::SetResetTimeValueNodeIdx(int16_t value) {
    SetSchemaValue(m_ptr, "CNmClipNode", "m_nResetTimeValueNodeIdx", false, value);
}

bool GCNmClipNode::GetSampleRootMotion() const {
    return GetSchemaValue<bool>(m_ptr, "CNmClipNode", "m_bSampleRootMotion");
}

void GCNmClipNode::SetSampleRootMotion(bool value) {
    SetSchemaValue(m_ptr, "CNmClipNode", "m_bSampleRootMotion", false, value);
}

bool GCNmClipNode::GetAllowLooping() const {
    return GetSchemaValue<bool>(m_ptr, "CNmClipNode", "m_bAllowLooping");
}

void GCNmClipNode::SetAllowLooping(bool value) {
    SetSchemaValue(m_ptr, "CNmClipNode", "m_bAllowLooping", false, value);
}

int16_t GCNmClipNode::GetDataSlotIdx() const {
    return GetSchemaValue<int16_t>(m_ptr, "CNmClipNode", "m_nDataSlotIdx");
}

void GCNmClipNode::SetDataSlotIdx(int16_t value) {
    SetSchemaValue(m_ptr, "CNmClipNode", "m_nDataSlotIdx", false, value);
}

std::string GCNmClipNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmClipNode::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimMorphDifference::GCAnimMorphDifference(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimMorphDifference::GCAnimMorphDifference(void *ptr) {
    m_ptr = ptr;
}

CBufferString GCAnimMorphDifference::GetName() const {
    return GetSchemaValue<CBufferString>(m_ptr, "CAnimMorphDifference", "m_name");
}

void GCAnimMorphDifference::SetName(CBufferString value) {
    SetSchemaValue(m_ptr, "CAnimMorphDifference", "m_name", false, value);
}

std::string GCAnimMorphDifference::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimMorphDifference::IsValid() {
    return (m_ptr != nullptr);
}

GIParticleCollection::GIParticleCollection(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GIParticleCollection::GIParticleCollection(void *ptr) {
    m_ptr = ptr;
}

std::string GIParticleCollection::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GIParticleCollection::IsValid() {
    return (m_ptr != nullptr);
}

GCNmGraphDefinition__ChildGraphSlot_t::GCNmGraphDefinition__ChildGraphSlot_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmGraphDefinition__ChildGraphSlot_t::GCNmGraphDefinition__ChildGraphSlot_t(void *ptr) {
    m_ptr = ptr;
}

int16_t GCNmGraphDefinition__ChildGraphSlot_t::GetNodeIdx() const {
    return GetSchemaValue<int16_t>(m_ptr, "CNmGraphDefinition__ChildGraphSlot_t", "m_nNodeIdx");
}

void GCNmGraphDefinition__ChildGraphSlot_t::SetNodeIdx(int16_t value) {
    SetSchemaValue(m_ptr, "CNmGraphDefinition__ChildGraphSlot_t", "m_nNodeIdx", true, value);
}

int16_t GCNmGraphDefinition__ChildGraphSlot_t::GetDataSlotIdx() const {
    return GetSchemaValue<int16_t>(m_ptr, "CNmGraphDefinition__ChildGraphSlot_t", "m_dataSlotIdx");
}

void GCNmGraphDefinition__ChildGraphSlot_t::SetDataSlotIdx(int16_t value) {
    SetSchemaValue(m_ptr, "CNmGraphDefinition__ChildGraphSlot_t", "m_dataSlotIdx", true, value);
}

std::string GCNmGraphDefinition__ChildGraphSlot_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmGraphDefinition__ChildGraphSlot_t::IsValid() {
    return (m_ptr != nullptr);
}

GCFutureVelocityMetricEvaluator::GCFutureVelocityMetricEvaluator(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFutureVelocityMetricEvaluator::GCFutureVelocityMetricEvaluator(void *ptr) {
    m_ptr = ptr;
}

float GCFutureVelocityMetricEvaluator::GetDistance() const {
    return GetSchemaValue<float>(m_ptr, "CFutureVelocityMetricEvaluator", "m_flDistance");
}

void GCFutureVelocityMetricEvaluator::SetDistance(float value) {
    SetSchemaValue(m_ptr, "CFutureVelocityMetricEvaluator", "m_flDistance", false, value);
}

float GCFutureVelocityMetricEvaluator::GetStoppingDistance() const {
    return GetSchemaValue<float>(m_ptr, "CFutureVelocityMetricEvaluator", "m_flStoppingDistance");
}

void GCFutureVelocityMetricEvaluator::SetStoppingDistance(float value) {
    SetSchemaValue(m_ptr, "CFutureVelocityMetricEvaluator", "m_flStoppingDistance", false, value);
}

float GCFutureVelocityMetricEvaluator::GetTargetSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CFutureVelocityMetricEvaluator", "m_flTargetSpeed");
}

void GCFutureVelocityMetricEvaluator::SetTargetSpeed(float value) {
    SetSchemaValue(m_ptr, "CFutureVelocityMetricEvaluator", "m_flTargetSpeed", false, value);
}

VelocityMetricMode GCFutureVelocityMetricEvaluator::GetMode() const {
    return GetSchemaValue<VelocityMetricMode>(m_ptr, "CFutureVelocityMetricEvaluator", "m_eMode");
}

void GCFutureVelocityMetricEvaluator::SetMode(VelocityMetricMode value) {
    SetSchemaValue(m_ptr, "CFutureVelocityMetricEvaluator", "m_eMode", false, value);
}

std::string GCFutureVelocityMetricEvaluator::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFutureVelocityMetricEvaluator::IsValid() {
    return (m_ptr != nullptr);
}

GCParticleProperty::GCParticleProperty(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCParticleProperty::GCParticleProperty(void *ptr) {
    m_ptr = ptr;
}

std::string GCParticleProperty::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCParticleProperty::IsValid() {
    return (m_ptr != nullptr);
}

GVertexPositionNormal_t::GVertexPositionNormal_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVertexPositionNormal_t::GVertexPositionNormal_t(void *ptr) {
    m_ptr = ptr;
}

Vector GVertexPositionNormal_t::GetPosition() const {
    return GetSchemaValue<Vector>(m_ptr, "VertexPositionNormal_t", "m_vPosition");
}

void GVertexPositionNormal_t::SetPosition(Vector value) {
    SetSchemaValue(m_ptr, "VertexPositionNormal_t", "m_vPosition", true, value);
}

Vector GVertexPositionNormal_t::GetNormal() const {
    return GetSchemaValue<Vector>(m_ptr, "VertexPositionNormal_t", "m_vNormal");
}

void GVertexPositionNormal_t::SetNormal(Vector value) {
    SetSchemaValue(m_ptr, "VertexPositionNormal_t", "m_vNormal", true, value);
}

std::string GVertexPositionNormal_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVertexPositionNormal_t::IsValid() {
    return (m_ptr != nullptr);
}

GFeEffectDesc_t::GFeEffectDesc_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeEffectDesc_t::GFeEffectDesc_t(void *ptr) {
    m_ptr = ptr;
}

CUtlString GFeEffectDesc_t::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "FeEffectDesc_t", "sName");
}

void GFeEffectDesc_t::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "FeEffectDesc_t", "sName", true, value);
}

uint32_t GFeEffectDesc_t::GetNameHash() const {
    return GetSchemaValue<uint32_t>(m_ptr, "FeEffectDesc_t", "nNameHash");
}

void GFeEffectDesc_t::SetNameHash(uint32_t value) {
    SetSchemaValue(m_ptr, "FeEffectDesc_t", "nNameHash", true, value);
}

int32_t GFeEffectDesc_t::GetType() const {
    return GetSchemaValue<int32_t>(m_ptr, "FeEffectDesc_t", "nType");
}

void GFeEffectDesc_t::SetType(int32_t value) {
    SetSchemaValue(m_ptr, "FeEffectDesc_t", "nType", true, value);
}

std::string GFeEffectDesc_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeEffectDesc_t::IsValid() {
    return (m_ptr != nullptr);
}

GCLODComponentUpdater::GCLODComponentUpdater(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCLODComponentUpdater::GCLODComponentUpdater(void *ptr) {
    m_ptr = ptr;
}

int32_t GCLODComponentUpdater::GetServerLOD() const {
    return GetSchemaValue<int32_t>(m_ptr, "CLODComponentUpdater", "m_nServerLOD");
}

void GCLODComponentUpdater::SetServerLOD(int32_t value) {
    SetSchemaValue(m_ptr, "CLODComponentUpdater", "m_nServerLOD", false, value);
}

std::string GCLODComponentUpdater::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCLODComponentUpdater::IsValid() {
    return (m_ptr != nullptr);
}

GCNmLegacyEvent::GCNmLegacyEvent(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmLegacyEvent::GCNmLegacyEvent(void *ptr) {
    m_ptr = ptr;
}

std::string GCNmLegacyEvent::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmLegacyEvent::IsValid() {
    return (m_ptr != nullptr);
}

GMaterialParamVector_t::GMaterialParamVector_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GMaterialParamVector_t::GMaterialParamVector_t(void *ptr) {
    m_ptr = ptr;
}

Vector4D GMaterialParamVector_t::GetValue() const {
    return GetSchemaValue<Vector4D>(m_ptr, "MaterialParamVector_t", "m_value");
}

void GMaterialParamVector_t::SetValue(Vector4D value) {
    SetSchemaValue(m_ptr, "MaterialParamVector_t", "m_value", true, value);
}

std::string GMaterialParamVector_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GMaterialParamVector_t::IsValid() {
    return (m_ptr != nullptr);
}

GCMotionGraphGroup::GCMotionGraphGroup(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMotionGraphGroup::GCMotionGraphGroup(void *ptr) {
    m_ptr = ptr;
}

GCMotionSearchDB GCMotionGraphGroup::GetSearchDB() const {
    return GetSchemaValue<GCMotionSearchDB>(m_ptr, "CMotionGraphGroup", "m_searchDB");
}

void GCMotionGraphGroup::SetSearchDB(GCMotionSearchDB value) {
    SetSchemaValue(m_ptr, "CMotionGraphGroup", "m_searchDB", false, value);
}

std::vector<GCMotionGraphConfig> GCMotionGraphGroup::GetMotionGraphConfigs() const {
    CUtlVector<GCMotionGraphConfig>* vec = GetSchemaValue<CUtlVector<GCMotionGraphConfig>*>(m_ptr, "CMotionGraphGroup", "m_motionGraphConfigs"); std::vector<GCMotionGraphConfig> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCMotionGraphGroup::SetMotionGraphConfigs(std::vector<GCMotionGraphConfig> value) {
    SetSchemaValueCUtlVector<GCMotionGraphConfig>(m_ptr, "CMotionGraphGroup", "m_motionGraphConfigs", false, value);
}

std::vector<int32> GCMotionGraphGroup::GetSampleToConfig() const {
    CUtlVector<int32>* vec = GetSchemaValue<CUtlVector<int32>*>(m_ptr, "CMotionGraphGroup", "m_sampleToConfig"); std::vector<int32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCMotionGraphGroup::SetSampleToConfig(std::vector<int32> value) {
    SetSchemaValueCUtlVector<int32>(m_ptr, "CMotionGraphGroup", "m_sampleToConfig", false, value);
}

GAnimScriptHandle GCMotionGraphGroup::GetIsActiveScript() const {
    return GetSchemaValue<GAnimScriptHandle>(m_ptr, "CMotionGraphGroup", "m_hIsActiveScript");
}

void GCMotionGraphGroup::SetIsActiveScript(GAnimScriptHandle value) {
    SetSchemaValue(m_ptr, "CMotionGraphGroup", "m_hIsActiveScript", false, value);
}

std::string GCMotionGraphGroup::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMotionGraphGroup::IsValid() {
    return (m_ptr != nullptr);
}

GHitReactFixedSettings_t::GHitReactFixedSettings_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GHitReactFixedSettings_t::GHitReactFixedSettings_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GHitReactFixedSettings_t::GetWeightListIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "HitReactFixedSettings_t", "m_nWeightListIndex");
}

void GHitReactFixedSettings_t::SetWeightListIndex(int32_t value) {
    SetSchemaValue(m_ptr, "HitReactFixedSettings_t", "m_nWeightListIndex", true, value);
}

int32_t GHitReactFixedSettings_t::GetEffectedBoneCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "HitReactFixedSettings_t", "m_nEffectedBoneCount");
}

void GHitReactFixedSettings_t::SetEffectedBoneCount(int32_t value) {
    SetSchemaValue(m_ptr, "HitReactFixedSettings_t", "m_nEffectedBoneCount", true, value);
}

float GHitReactFixedSettings_t::GetMaxImpactForce() const {
    return GetSchemaValue<float>(m_ptr, "HitReactFixedSettings_t", "m_flMaxImpactForce");
}

void GHitReactFixedSettings_t::SetMaxImpactForce(float value) {
    SetSchemaValue(m_ptr, "HitReactFixedSettings_t", "m_flMaxImpactForce", true, value);
}

float GHitReactFixedSettings_t::GetMinImpactForce() const {
    return GetSchemaValue<float>(m_ptr, "HitReactFixedSettings_t", "m_flMinImpactForce");
}

void GHitReactFixedSettings_t::SetMinImpactForce(float value) {
    SetSchemaValue(m_ptr, "HitReactFixedSettings_t", "m_flMinImpactForce", true, value);
}

float GHitReactFixedSettings_t::GetWhipImpactScale() const {
    return GetSchemaValue<float>(m_ptr, "HitReactFixedSettings_t", "m_flWhipImpactScale");
}

void GHitReactFixedSettings_t::SetWhipImpactScale(float value) {
    SetSchemaValue(m_ptr, "HitReactFixedSettings_t", "m_flWhipImpactScale", true, value);
}

float GHitReactFixedSettings_t::GetCounterRotationScale() const {
    return GetSchemaValue<float>(m_ptr, "HitReactFixedSettings_t", "m_flCounterRotationScale");
}

void GHitReactFixedSettings_t::SetCounterRotationScale(float value) {
    SetSchemaValue(m_ptr, "HitReactFixedSettings_t", "m_flCounterRotationScale", true, value);
}

float GHitReactFixedSettings_t::GetDistanceFadeScale() const {
    return GetSchemaValue<float>(m_ptr, "HitReactFixedSettings_t", "m_flDistanceFadeScale");
}

void GHitReactFixedSettings_t::SetDistanceFadeScale(float value) {
    SetSchemaValue(m_ptr, "HitReactFixedSettings_t", "m_flDistanceFadeScale", true, value);
}

float GHitReactFixedSettings_t::GetPropagationScale() const {
    return GetSchemaValue<float>(m_ptr, "HitReactFixedSettings_t", "m_flPropagationScale");
}

void GHitReactFixedSettings_t::SetPropagationScale(float value) {
    SetSchemaValue(m_ptr, "HitReactFixedSettings_t", "m_flPropagationScale", true, value);
}

float GHitReactFixedSettings_t::GetWhipDelay() const {
    return GetSchemaValue<float>(m_ptr, "HitReactFixedSettings_t", "m_flWhipDelay");
}

void GHitReactFixedSettings_t::SetWhipDelay(float value) {
    SetSchemaValue(m_ptr, "HitReactFixedSettings_t", "m_flWhipDelay", true, value);
}

float GHitReactFixedSettings_t::GetSpringStrength() const {
    return GetSchemaValue<float>(m_ptr, "HitReactFixedSettings_t", "m_flSpringStrength");
}

void GHitReactFixedSettings_t::SetSpringStrength(float value) {
    SetSchemaValue(m_ptr, "HitReactFixedSettings_t", "m_flSpringStrength", true, value);
}

float GHitReactFixedSettings_t::GetWhipSpringStrength() const {
    return GetSchemaValue<float>(m_ptr, "HitReactFixedSettings_t", "m_flWhipSpringStrength");
}

void GHitReactFixedSettings_t::SetWhipSpringStrength(float value) {
    SetSchemaValue(m_ptr, "HitReactFixedSettings_t", "m_flWhipSpringStrength", true, value);
}

float GHitReactFixedSettings_t::GetMaxAngleRadians() const {
    return GetSchemaValue<float>(m_ptr, "HitReactFixedSettings_t", "m_flMaxAngleRadians");
}

void GHitReactFixedSettings_t::SetMaxAngleRadians(float value) {
    SetSchemaValue(m_ptr, "HitReactFixedSettings_t", "m_flMaxAngleRadians", true, value);
}

int32_t GHitReactFixedSettings_t::GetHipBoneIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "HitReactFixedSettings_t", "m_nHipBoneIndex");
}

void GHitReactFixedSettings_t::SetHipBoneIndex(int32_t value) {
    SetSchemaValue(m_ptr, "HitReactFixedSettings_t", "m_nHipBoneIndex", true, value);
}

float GHitReactFixedSettings_t::GetHipBoneTranslationScale() const {
    return GetSchemaValue<float>(m_ptr, "HitReactFixedSettings_t", "m_flHipBoneTranslationScale");
}

void GHitReactFixedSettings_t::SetHipBoneTranslationScale(float value) {
    SetSchemaValue(m_ptr, "HitReactFixedSettings_t", "m_flHipBoneTranslationScale", true, value);
}

float GHitReactFixedSettings_t::GetHipDipSpringStrength() const {
    return GetSchemaValue<float>(m_ptr, "HitReactFixedSettings_t", "m_flHipDipSpringStrength");
}

void GHitReactFixedSettings_t::SetHipDipSpringStrength(float value) {
    SetSchemaValue(m_ptr, "HitReactFixedSettings_t", "m_flHipDipSpringStrength", true, value);
}

float GHitReactFixedSettings_t::GetHipDipImpactScale() const {
    return GetSchemaValue<float>(m_ptr, "HitReactFixedSettings_t", "m_flHipDipImpactScale");
}

void GHitReactFixedSettings_t::SetHipDipImpactScale(float value) {
    SetSchemaValue(m_ptr, "HitReactFixedSettings_t", "m_flHipDipImpactScale", true, value);
}

float GHitReactFixedSettings_t::GetHipDipDelay() const {
    return GetSchemaValue<float>(m_ptr, "HitReactFixedSettings_t", "m_flHipDipDelay");
}

void GHitReactFixedSettings_t::SetHipDipDelay(float value) {
    SetSchemaValue(m_ptr, "HitReactFixedSettings_t", "m_flHipDipDelay", true, value);
}

std::string GHitReactFixedSettings_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GHitReactFixedSettings_t::IsValid() {
    return (m_ptr != nullptr);
}

GCRootUpdateNode::GCRootUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCRootUpdateNode::GCRootUpdateNode(void *ptr) {
    m_ptr = ptr;
}

std::string GCRootUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCRootUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimMovement::GCAnimMovement(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimMovement::GCAnimMovement(void *ptr) {
    m_ptr = ptr;
}

int32_t GCAnimMovement::GetEndframe() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimMovement", "endframe");
}

void GCAnimMovement::SetEndframe(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimMovement", "endframe", false, value);
}

int32_t GCAnimMovement::GetMotionflags() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimMovement", "motionflags");
}

void GCAnimMovement::SetMotionflags(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimMovement", "motionflags", false, value);
}

float GCAnimMovement::Get0() const {
    return GetSchemaValue<float>(m_ptr, "CAnimMovement", "v0");
}

void GCAnimMovement::Set0(float value) {
    SetSchemaValue(m_ptr, "CAnimMovement", "v0", false, value);
}

float GCAnimMovement::Get1() const {
    return GetSchemaValue<float>(m_ptr, "CAnimMovement", "v1");
}

void GCAnimMovement::Set1(float value) {
    SetSchemaValue(m_ptr, "CAnimMovement", "v1", false, value);
}

float GCAnimMovement::GetAngle() const {
    return GetSchemaValue<float>(m_ptr, "CAnimMovement", "angle");
}

void GCAnimMovement::SetAngle(float value) {
    SetSchemaValue(m_ptr, "CAnimMovement", "angle", false, value);
}

Vector GCAnimMovement::GetVector() const {
    return GetSchemaValue<Vector>(m_ptr, "CAnimMovement", "vector");
}

void GCAnimMovement::SetVector(Vector value) {
    SetSchemaValue(m_ptr, "CAnimMovement", "vector", false, value);
}

Vector GCAnimMovement::GetPosition() const {
    return GetSchemaValue<Vector>(m_ptr, "CAnimMovement", "position");
}

void GCAnimMovement::SetPosition(Vector value) {
    SetSchemaValue(m_ptr, "CAnimMovement", "position", false, value);
}

std::string GCAnimMovement::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimMovement::IsValid() {
    return (m_ptr != nullptr);
}

GCConstraintSlave::GCConstraintSlave(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCConstraintSlave::GCConstraintSlave(void *ptr) {
    m_ptr = ptr;
}

Quaternion GCConstraintSlave::GetBaseOrientation() const {
    return GetSchemaValue<Quaternion>(m_ptr, "CConstraintSlave", "m_qBaseOrientation");
}

void GCConstraintSlave::SetBaseOrientation(Quaternion value) {
    SetSchemaValue(m_ptr, "CConstraintSlave", "m_qBaseOrientation", false, value);
}

Vector GCConstraintSlave::GetBasePosition() const {
    return GetSchemaValue<Vector>(m_ptr, "CConstraintSlave", "m_vBasePosition");
}

void GCConstraintSlave::SetBasePosition(Vector value) {
    SetSchemaValue(m_ptr, "CConstraintSlave", "m_vBasePosition", false, value);
}

uint32_t GCConstraintSlave::GetBoneHash() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CConstraintSlave", "m_nBoneHash");
}

void GCConstraintSlave::SetBoneHash(uint32_t value) {
    SetSchemaValue(m_ptr, "CConstraintSlave", "m_nBoneHash", false, value);
}

float GCConstraintSlave::GetWeight() const {
    return GetSchemaValue<float>(m_ptr, "CConstraintSlave", "m_flWeight");
}

void GCConstraintSlave::SetWeight(float value) {
    SetSchemaValue(m_ptr, "CConstraintSlave", "m_flWeight", false, value);
}

CUtlString GCConstraintSlave::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CConstraintSlave", "m_sName");
}

void GCConstraintSlave::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "CConstraintSlave", "m_sName", false, value);
}

std::string GCConstraintSlave::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCConstraintSlave::IsValid() {
    return (m_ptr != nullptr);
}

GCSeqBoneMaskList::GCSeqBoneMaskList(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSeqBoneMaskList::GCSeqBoneMaskList(void *ptr) {
    m_ptr = ptr;
}

CBufferString GCSeqBoneMaskList::GetName() const {
    return GetSchemaValue<CBufferString>(m_ptr, "CSeqBoneMaskList", "m_sName");
}

void GCSeqBoneMaskList::SetName(CBufferString value) {
    SetSchemaValue(m_ptr, "CSeqBoneMaskList", "m_sName", false, value);
}

std::vector<int16> GCSeqBoneMaskList::GetLocalBoneArray() const {
    CUtlVector<int16>* vec = GetSchemaValue<CUtlVector<int16>*>(m_ptr, "CSeqBoneMaskList", "m_nLocalBoneArray"); std::vector<int16> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSeqBoneMaskList::SetLocalBoneArray(std::vector<int16> value) {
    SetSchemaValueCUtlVector<int16>(m_ptr, "CSeqBoneMaskList", "m_nLocalBoneArray", false, value);
}

std::vector<float32> GCSeqBoneMaskList::GetBoneWeightArray() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "CSeqBoneMaskList", "m_flBoneWeightArray"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSeqBoneMaskList::SetBoneWeightArray(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "CSeqBoneMaskList", "m_flBoneWeightArray", false, value);
}

float GCSeqBoneMaskList::GetDefaultMorphCtrlWeight() const {
    return GetSchemaValue<float>(m_ptr, "CSeqBoneMaskList", "m_flDefaultMorphCtrlWeight");
}

void GCSeqBoneMaskList::SetDefaultMorphCtrlWeight(float value) {
    SetSchemaValue(m_ptr, "CSeqBoneMaskList", "m_flDefaultMorphCtrlWeight", false, value);
}

std::string GCSeqBoneMaskList::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSeqBoneMaskList::IsValid() {
    return (m_ptr != nullptr);
}

GPermModelDataAnimatedMaterialAttribute_t::GPermModelDataAnimatedMaterialAttribute_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GPermModelDataAnimatedMaterialAttribute_t::GPermModelDataAnimatedMaterialAttribute_t(void *ptr) {
    m_ptr = ptr;
}

CUtlString GPermModelDataAnimatedMaterialAttribute_t::GetAttributeName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "PermModelDataAnimatedMaterialAttribute_t", "m_AttributeName");
}

void GPermModelDataAnimatedMaterialAttribute_t::SetAttributeName(CUtlString value) {
    SetSchemaValue(m_ptr, "PermModelDataAnimatedMaterialAttribute_t", "m_AttributeName", true, value);
}

int32_t GPermModelDataAnimatedMaterialAttribute_t::GetNumChannels() const {
    return GetSchemaValue<int32_t>(m_ptr, "PermModelDataAnimatedMaterialAttribute_t", "m_nNumChannels");
}

void GPermModelDataAnimatedMaterialAttribute_t::SetNumChannels(int32_t value) {
    SetSchemaValue(m_ptr, "PermModelDataAnimatedMaterialAttribute_t", "m_nNumChannels", true, value);
}

std::string GPermModelDataAnimatedMaterialAttribute_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GPermModelDataAnimatedMaterialAttribute_t::IsValid() {
    return (m_ptr != nullptr);
}

GScriptInfo_t::GScriptInfo_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GScriptInfo_t::GScriptInfo_t(void *ptr) {
    m_ptr = ptr;
}

CUtlString GScriptInfo_t::GetCode() const {
    return GetSchemaValue<CUtlString>(m_ptr, "ScriptInfo_t", "m_code");
}

void GScriptInfo_t::SetCode(CUtlString value) {
    SetSchemaValue(m_ptr, "ScriptInfo_t", "m_code", true, value);
}

std::vector<GCAnimParamHandle> GScriptInfo_t::GetParamsModified() const {
    CUtlVector<GCAnimParamHandle>* vec = GetSchemaValue<CUtlVector<GCAnimParamHandle>*>(m_ptr, "ScriptInfo_t", "m_paramsModified"); std::vector<GCAnimParamHandle> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GScriptInfo_t::SetParamsModified(std::vector<GCAnimParamHandle> value) {
    SetSchemaValueCUtlVector<GCAnimParamHandle>(m_ptr, "ScriptInfo_t", "m_paramsModified", true, value);
}

std::vector<int32> GScriptInfo_t::GetProxyReadParams() const {
    CUtlVector<int32>* vec = GetSchemaValue<CUtlVector<int32>*>(m_ptr, "ScriptInfo_t", "m_proxyReadParams"); std::vector<int32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GScriptInfo_t::SetProxyReadParams(std::vector<int32> value) {
    SetSchemaValueCUtlVector<int32>(m_ptr, "ScriptInfo_t", "m_proxyReadParams", true, value);
}

std::vector<int32> GScriptInfo_t::GetProxyWriteParams() const {
    CUtlVector<int32>* vec = GetSchemaValue<CUtlVector<int32>*>(m_ptr, "ScriptInfo_t", "m_proxyWriteParams"); std::vector<int32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GScriptInfo_t::SetProxyWriteParams(std::vector<int32> value) {
    SetSchemaValueCUtlVector<int32>(m_ptr, "ScriptInfo_t", "m_proxyWriteParams", true, value);
}

AnimScriptType GScriptInfo_t::GetScriptType() const {
    return GetSchemaValue<AnimScriptType>(m_ptr, "ScriptInfo_t", "m_eScriptType");
}

void GScriptInfo_t::SetScriptType(AnimScriptType value) {
    SetSchemaValue(m_ptr, "ScriptInfo_t", "m_eScriptType", true, value);
}

std::string GScriptInfo_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GScriptInfo_t::IsValid() {
    return (m_ptr != nullptr);
}

GVPhysXRange_t::GVPhysXRange_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVPhysXRange_t::GVPhysXRange_t(void *ptr) {
    m_ptr = ptr;
}

float GVPhysXRange_t::GetMin() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXRange_t", "m_flMin");
}

void GVPhysXRange_t::SetMin(float value) {
    SetSchemaValue(m_ptr, "VPhysXRange_t", "m_flMin", true, value);
}

float GVPhysXRange_t::GetMax() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXRange_t", "m_flMax");
}

void GVPhysXRange_t::SetMax(float value) {
    SetSchemaValue(m_ptr, "VPhysXRange_t", "m_flMax", true, value);
}

std::string GVPhysXRange_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVPhysXRange_t::IsValid() {
    return (m_ptr != nullptr);
}

GCJiggleBoneUpdateNode::GCJiggleBoneUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCJiggleBoneUpdateNode::GCJiggleBoneUpdateNode(void *ptr) {
    m_ptr = ptr;
}

GJiggleBoneSettingsList_t GCJiggleBoneUpdateNode::GetOpFixedData() const {
    return GetSchemaValue<GJiggleBoneSettingsList_t>(m_ptr, "CJiggleBoneUpdateNode", "m_opFixedData");
}

void GCJiggleBoneUpdateNode::SetOpFixedData(GJiggleBoneSettingsList_t value) {
    SetSchemaValue(m_ptr, "CJiggleBoneUpdateNode", "m_opFixedData", false, value);
}

std::string GCJiggleBoneUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCJiggleBoneUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GCollisionGroupContext_t::GCollisionGroupContext_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCollisionGroupContext_t::GCollisionGroupContext_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GCollisionGroupContext_t::GetCollisionGroupNumber() const {
    return GetSchemaValue<int32_t>(m_ptr, "CollisionGroupContext_t", "m_nCollisionGroupNumber");
}

void GCollisionGroupContext_t::SetCollisionGroupNumber(int32_t value) {
    SetSchemaValue(m_ptr, "CollisionGroupContext_t", "m_nCollisionGroupNumber", true, value);
}

std::string GCollisionGroupContext_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCollisionGroupContext_t::IsValid() {
    return (m_ptr != nullptr);
}

GCAudioPhonemeTag::GCAudioPhonemeTag(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAudioPhonemeTag::GCAudioPhonemeTag(void *ptr) {
    m_ptr = ptr;
}

float GCAudioPhonemeTag::GetStartTime() const {
    return GetSchemaValue<float>(m_ptr, "CAudioPhonemeTag", "m_flStartTime");
}

void GCAudioPhonemeTag::SetStartTime(float value) {
    SetSchemaValue(m_ptr, "CAudioPhonemeTag", "m_flStartTime", false, value);
}

float GCAudioPhonemeTag::GetEndTime() const {
    return GetSchemaValue<float>(m_ptr, "CAudioPhonemeTag", "m_flEndTime");
}

void GCAudioPhonemeTag::SetEndTime(float value) {
    SetSchemaValue(m_ptr, "CAudioPhonemeTag", "m_flEndTime", false, value);
}

int32_t GCAudioPhonemeTag::GetPhonemeCode() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAudioPhonemeTag", "m_nPhonemeCode");
}

void GCAudioPhonemeTag::SetPhonemeCode(int32_t value) {
    SetSchemaValue(m_ptr, "CAudioPhonemeTag", "m_nPhonemeCode", false, value);
}

std::string GCAudioPhonemeTag::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAudioPhonemeTag::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimData::GCAnimData(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimData::GCAnimData(void *ptr) {
    m_ptr = ptr;
}

CBufferString GCAnimData::GetName() const {
    return GetSchemaValue<CBufferString>(m_ptr, "CAnimData", "m_name");
}

void GCAnimData::SetName(CBufferString value) {
    SetSchemaValue(m_ptr, "CAnimData", "m_name", false, value);
}

std::vector<GCAnimDesc> GCAnimData::GetAnimArray() const {
    CUtlVector<GCAnimDesc>* vec = GetSchemaValue<CUtlVector<GCAnimDesc>*>(m_ptr, "CAnimData", "m_animArray"); std::vector<GCAnimDesc> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimData::SetAnimArray(std::vector<GCAnimDesc> value) {
    SetSchemaValueCUtlVector<GCAnimDesc>(m_ptr, "CAnimData", "m_animArray", false, value);
}

std::vector<GCAnimDecoder> GCAnimData::GetDecoderArray() const {
    CUtlVector<GCAnimDecoder>* vec = GetSchemaValue<CUtlVector<GCAnimDecoder>*>(m_ptr, "CAnimData", "m_decoderArray"); std::vector<GCAnimDecoder> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimData::SetDecoderArray(std::vector<GCAnimDecoder> value) {
    SetSchemaValueCUtlVector<GCAnimDecoder>(m_ptr, "CAnimData", "m_decoderArray", false, value);
}

int32_t GCAnimData::GetMaxUniqueFrameIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimData", "m_nMaxUniqueFrameIndex");
}

void GCAnimData::SetMaxUniqueFrameIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimData", "m_nMaxUniqueFrameIndex", false, value);
}

std::vector<GCAnimFrameSegment> GCAnimData::GetSegmentArray() const {
    CUtlVector<GCAnimFrameSegment>* vec = GetSchemaValue<CUtlVector<GCAnimFrameSegment>*>(m_ptr, "CAnimData", "m_segmentArray"); std::vector<GCAnimFrameSegment> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimData::SetSegmentArray(std::vector<GCAnimFrameSegment> value) {
    SetSchemaValueCUtlVector<GCAnimFrameSegment>(m_ptr, "CAnimData", "m_segmentArray", false, value);
}

std::string GCAnimData::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimData::IsValid() {
    return (m_ptr != nullptr);
}

GSosEditItemInfo_t::GSosEditItemInfo_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GSosEditItemInfo_t::GSosEditItemInfo_t(void *ptr) {
    m_ptr = ptr;
}

SosEditItemType_t GSosEditItemInfo_t::GetItemType() const {
    return GetSchemaValue<SosEditItemType_t>(m_ptr, "SosEditItemInfo_t", "itemType");
}

void GSosEditItemInfo_t::SetItemType(SosEditItemType_t value) {
    SetSchemaValue(m_ptr, "SosEditItemInfo_t", "itemType", true, value);
}

CUtlString GSosEditItemInfo_t::GetItemName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "SosEditItemInfo_t", "itemName");
}

void GSosEditItemInfo_t::SetItemName(CUtlString value) {
    SetSchemaValue(m_ptr, "SosEditItemInfo_t", "itemName", true, value);
}

CUtlString GSosEditItemInfo_t::GetItemTypeName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "SosEditItemInfo_t", "itemTypeName");
}

void GSosEditItemInfo_t::SetItemTypeName(CUtlString value) {
    SetSchemaValue(m_ptr, "SosEditItemInfo_t", "itemTypeName", true, value);
}

CUtlString GSosEditItemInfo_t::GetItemKVString() const {
    return GetSchemaValue<CUtlString>(m_ptr, "SosEditItemInfo_t", "itemKVString");
}

void GSosEditItemInfo_t::SetItemKVString(CUtlString value) {
    SetSchemaValue(m_ptr, "SosEditItemInfo_t", "itemKVString", true, value);
}

Vector2D GSosEditItemInfo_t::GetItemPos() const {
    return GetSchemaValue<Vector2D>(m_ptr, "SosEditItemInfo_t", "itemPos");
}

void GSosEditItemInfo_t::SetItemPos(Vector2D value) {
    SetSchemaValue(m_ptr, "SosEditItemInfo_t", "itemPos", true, value);
}

std::string GSosEditItemInfo_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GSosEditItemInfo_t::IsValid() {
    return (m_ptr != nullptr);
}

GFeFitInfluence_t::GFeFitInfluence_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeFitInfluence_t::GFeFitInfluence_t(void *ptr) {
    m_ptr = ptr;
}

uint32_t GFeFitInfluence_t::GetVertexNode() const {
    return GetSchemaValue<uint32_t>(m_ptr, "FeFitInfluence_t", "nVertexNode");
}

void GFeFitInfluence_t::SetVertexNode(uint32_t value) {
    SetSchemaValue(m_ptr, "FeFitInfluence_t", "nVertexNode", true, value);
}

float GFeFitInfluence_t::GetWeight() const {
    return GetSchemaValue<float>(m_ptr, "FeFitInfluence_t", "flWeight");
}

void GFeFitInfluence_t::SetWeight(float value) {
    SetSchemaValue(m_ptr, "FeFitInfluence_t", "flWeight", true, value);
}

uint32_t GFeFitInfluence_t::GetMatrixNode() const {
    return GetSchemaValue<uint32_t>(m_ptr, "FeFitInfluence_t", "nMatrixNode");
}

void GFeFitInfluence_t::SetMatrixNode(uint32_t value) {
    SetSchemaValue(m_ptr, "FeFitInfluence_t", "nMatrixNode", true, value);
}

std::string GFeFitInfluence_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeFitInfluence_t::IsValid() {
    return (m_ptr != nullptr);
}

GCInputStreamUpdateNode::GCInputStreamUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCInputStreamUpdateNode::GCInputStreamUpdateNode(void *ptr) {
    m_ptr = ptr;
}

std::string GCInputStreamUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCInputStreamUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GEventClientPollInput_t::GEventClientPollInput_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEventClientPollInput_t::GEventClientPollInput_t(void *ptr) {
    m_ptr = ptr;
}

GEngineLoopState_t GEventClientPollInput_t::GetLoopState() const {
    return GetSchemaValue<GEngineLoopState_t>(m_ptr, "EventClientPollInput_t", "m_LoopState");
}

void GEventClientPollInput_t::SetLoopState(GEngineLoopState_t value) {
    SetSchemaValue(m_ptr, "EventClientPollInput_t", "m_LoopState", true, value);
}

float GEventClientPollInput_t::GetRealTime() const {
    return GetSchemaValue<float>(m_ptr, "EventClientPollInput_t", "m_flRealTime");
}

void GEventClientPollInput_t::SetRealTime(float value) {
    SetSchemaValue(m_ptr, "EventClientPollInput_t", "m_flRealTime", true, value);
}

std::string GEventClientPollInput_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEventClientPollInput_t::IsValid() {
    return (m_ptr != nullptr);
}

GFeSimdQuad_t::GFeSimdQuad_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeSimdQuad_t::GFeSimdQuad_t(void *ptr) {
    m_ptr = ptr;
}

float GFeSimdQuad_t::Get4Slack() const {
    return GetSchemaValue<float>(m_ptr, "FeSimdQuad_t", "f4Slack");
}

void GFeSimdQuad_t::Set4Slack(float value) {
    SetSchemaValue(m_ptr, "FeSimdQuad_t", "f4Slack", true, value);
}

std::vector<float> GFeSimdQuad_t::Get4Weights() const {
    float* outValue = GetSchemaValue<float*>(m_ptr, "FeSimdQuad_t", "f4Weights"); std::vector<float> ret; for(int i = 0; i < 4; i++) { ret.push_back(outValue[i]); } return ret;
}

void GFeSimdQuad_t::Set4Weights(std::vector<float> value) {
    float* outValue = GetSchemaValue<float*>(m_ptr, "FeSimdQuad_t", "f4Weights"); for(int i = 0; i < 4; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "FeSimdQuad_t", "f4Weights", true, outValue);
}

std::string GFeSimdQuad_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeSimdQuad_t::IsValid() {
    return (m_ptr != nullptr);
}

GCEmitTagActionUpdater::GCEmitTagActionUpdater(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEmitTagActionUpdater::GCEmitTagActionUpdater(void *ptr) {
    m_ptr = ptr;
}

int32_t GCEmitTagActionUpdater::GetTagIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CEmitTagActionUpdater", "m_nTagIndex");
}

void GCEmitTagActionUpdater::SetTagIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CEmitTagActionUpdater", "m_nTagIndex", false, value);
}

bool GCEmitTagActionUpdater::GetIsZeroDuration() const {
    return GetSchemaValue<bool>(m_ptr, "CEmitTagActionUpdater", "m_bIsZeroDuration");
}

void GCEmitTagActionUpdater::SetIsZeroDuration(bool value) {
    SetSchemaValue(m_ptr, "CEmitTagActionUpdater", "m_bIsZeroDuration", false, value);
}

std::string GCEmitTagActionUpdater::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEmitTagActionUpdater::IsValid() {
    return (m_ptr != nullptr);
}

GCAddUpdateNode::GCAddUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAddUpdateNode::GCAddUpdateNode(void *ptr) {
    m_ptr = ptr;
}

BinaryNodeChildOption GCAddUpdateNode::GetFootMotionTiming() const {
    return GetSchemaValue<BinaryNodeChildOption>(m_ptr, "CAddUpdateNode", "m_footMotionTiming");
}

void GCAddUpdateNode::SetFootMotionTiming(BinaryNodeChildOption value) {
    SetSchemaValue(m_ptr, "CAddUpdateNode", "m_footMotionTiming", false, value);
}

bool GCAddUpdateNode::GetApplyToFootMotion() const {
    return GetSchemaValue<bool>(m_ptr, "CAddUpdateNode", "m_bApplyToFootMotion");
}

void GCAddUpdateNode::SetApplyToFootMotion(bool value) {
    SetSchemaValue(m_ptr, "CAddUpdateNode", "m_bApplyToFootMotion", false, value);
}

bool GCAddUpdateNode::GetApplyChannelsSeparately() const {
    return GetSchemaValue<bool>(m_ptr, "CAddUpdateNode", "m_bApplyChannelsSeparately");
}

void GCAddUpdateNode::SetApplyChannelsSeparately(bool value) {
    SetSchemaValue(m_ptr, "CAddUpdateNode", "m_bApplyChannelsSeparately", false, value);
}

bool GCAddUpdateNode::GetUseModelSpace() const {
    return GetSchemaValue<bool>(m_ptr, "CAddUpdateNode", "m_bUseModelSpace");
}

void GCAddUpdateNode::SetUseModelSpace(bool value) {
    SetSchemaValue(m_ptr, "CAddUpdateNode", "m_bUseModelSpace", false, value);
}

bool GCAddUpdateNode::GetApplyScale() const {
    return GetSchemaValue<bool>(m_ptr, "CAddUpdateNode", "m_bApplyScale");
}

void GCAddUpdateNode::SetApplyScale(bool value) {
    SetSchemaValue(m_ptr, "CAddUpdateNode", "m_bApplyScale", false, value);
}

std::string GCAddUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAddUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimTagManagerUpdater::GCAnimTagManagerUpdater(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimTagManagerUpdater::GCAnimTagManagerUpdater(void *ptr) {
    m_ptr = ptr;
}

std::string GCAnimTagManagerUpdater::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimTagManagerUpdater::IsValid() {
    return (m_ptr != nullptr);
}

GSampleCode::GSampleCode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GSampleCode::GSampleCode(void *ptr) {
    m_ptr = ptr;
}

std::vector<uint8_t> GSampleCode::GetSubCode() const {
    uint8_t* outValue = GetSchemaValue<uint8_t*>(m_ptr, "SampleCode", "m_subCode"); std::vector<uint8_t> ret; for(int i = 0; i < 8; i++) { ret.push_back(outValue[i]); } return ret;
}

void GSampleCode::SetSubCode(std::vector<uint8_t> value) {
    uint8_t* outValue = GetSchemaValue<uint8_t*>(m_ptr, "SampleCode", "m_subCode"); for(int i = 0; i < 8; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "SampleCode", "m_subCode", false, outValue);
}

std::string GSampleCode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GSampleCode::IsValid() {
    return (m_ptr != nullptr);
}

GCExpressionActionUpdater::GCExpressionActionUpdater(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCExpressionActionUpdater::GCExpressionActionUpdater(void *ptr) {
    m_ptr = ptr;
}

GCAnimParamHandle GCExpressionActionUpdater::GetParam() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CExpressionActionUpdater", "m_hParam");
}

void GCExpressionActionUpdater::SetParam(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CExpressionActionUpdater", "m_hParam", false, value);
}

AnimParamType_t GCExpressionActionUpdater::GetParamType() const {
    return GetSchemaValue<AnimParamType_t>(m_ptr, "CExpressionActionUpdater", "m_eParamType");
}

void GCExpressionActionUpdater::SetParamType(AnimParamType_t value) {
    SetSchemaValue(m_ptr, "CExpressionActionUpdater", "m_eParamType", false, value);
}

GAnimScriptHandle GCExpressionActionUpdater::GetScript() const {
    return GetSchemaValue<GAnimScriptHandle>(m_ptr, "CExpressionActionUpdater", "m_hScript");
}

void GCExpressionActionUpdater::SetScript(GAnimScriptHandle value) {
    SetSchemaValue(m_ptr, "CExpressionActionUpdater", "m_hScript", false, value);
}

std::string GCExpressionActionUpdater::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCExpressionActionUpdater::IsValid() {
    return (m_ptr != nullptr);
}

GEventClientPostAdvanceTick_t::GEventClientPostAdvanceTick_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEventClientPostAdvanceTick_t::GEventClientPostAdvanceTick_t(void *ptr) {
    m_ptr = ptr;
}

std::string GEventClientPostAdvanceTick_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEventClientPostAdvanceTick_t::IsValid() {
    return (m_ptr != nullptr);
}

GBoneDemoCaptureSettings_t::GBoneDemoCaptureSettings_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GBoneDemoCaptureSettings_t::GBoneDemoCaptureSettings_t(void *ptr) {
    m_ptr = ptr;
}

CUtlString GBoneDemoCaptureSettings_t::GetBoneName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "BoneDemoCaptureSettings_t", "m_boneName");
}

void GBoneDemoCaptureSettings_t::SetBoneName(CUtlString value) {
    SetSchemaValue(m_ptr, "BoneDemoCaptureSettings_t", "m_boneName", true, value);
}

float GBoneDemoCaptureSettings_t::GetErrorSplineRotationMax() const {
    return GetSchemaValue<float>(m_ptr, "BoneDemoCaptureSettings_t", "m_flErrorSplineRotationMax");
}

void GBoneDemoCaptureSettings_t::SetErrorSplineRotationMax(float value) {
    SetSchemaValue(m_ptr, "BoneDemoCaptureSettings_t", "m_flErrorSplineRotationMax", true, value);
}

float GBoneDemoCaptureSettings_t::GetErrorSplineTranslationMax() const {
    return GetSchemaValue<float>(m_ptr, "BoneDemoCaptureSettings_t", "m_flErrorSplineTranslationMax");
}

void GBoneDemoCaptureSettings_t::SetErrorSplineTranslationMax(float value) {
    SetSchemaValue(m_ptr, "BoneDemoCaptureSettings_t", "m_flErrorSplineTranslationMax", true, value);
}

float GBoneDemoCaptureSettings_t::GetErrorSplineScaleMax() const {
    return GetSchemaValue<float>(m_ptr, "BoneDemoCaptureSettings_t", "m_flErrorSplineScaleMax");
}

void GBoneDemoCaptureSettings_t::SetErrorSplineScaleMax(float value) {
    SetSchemaValue(m_ptr, "BoneDemoCaptureSettings_t", "m_flErrorSplineScaleMax", true, value);
}

float GBoneDemoCaptureSettings_t::GetErrorQuantizationRotationMax() const {
    return GetSchemaValue<float>(m_ptr, "BoneDemoCaptureSettings_t", "m_flErrorQuantizationRotationMax");
}

void GBoneDemoCaptureSettings_t::SetErrorQuantizationRotationMax(float value) {
    SetSchemaValue(m_ptr, "BoneDemoCaptureSettings_t", "m_flErrorQuantizationRotationMax", true, value);
}

float GBoneDemoCaptureSettings_t::GetErrorQuantizationTranslationMax() const {
    return GetSchemaValue<float>(m_ptr, "BoneDemoCaptureSettings_t", "m_flErrorQuantizationTranslationMax");
}

void GBoneDemoCaptureSettings_t::SetErrorQuantizationTranslationMax(float value) {
    SetSchemaValue(m_ptr, "BoneDemoCaptureSettings_t", "m_flErrorQuantizationTranslationMax", true, value);
}

float GBoneDemoCaptureSettings_t::GetErrorQuantizationScaleMax() const {
    return GetSchemaValue<float>(m_ptr, "BoneDemoCaptureSettings_t", "m_flErrorQuantizationScaleMax");
}

void GBoneDemoCaptureSettings_t::SetErrorQuantizationScaleMax(float value) {
    SetSchemaValue(m_ptr, "BoneDemoCaptureSettings_t", "m_flErrorQuantizationScaleMax", true, value);
}

std::string GBoneDemoCaptureSettings_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GBoneDemoCaptureSettings_t::IsValid() {
    return (m_ptr != nullptr);
}

GVPhysXBodyPart_t::GVPhysXBodyPart_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVPhysXBodyPart_t::GVPhysXBodyPart_t(void *ptr) {
    m_ptr = ptr;
}

uint32_t GVPhysXBodyPart_t::GetFlags() const {
    return GetSchemaValue<uint32_t>(m_ptr, "VPhysXBodyPart_t", "m_nFlags");
}

void GVPhysXBodyPart_t::SetFlags(uint32_t value) {
    SetSchemaValue(m_ptr, "VPhysXBodyPart_t", "m_nFlags", true, value);
}

float GVPhysXBodyPart_t::GetMass() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXBodyPart_t", "m_flMass");
}

void GVPhysXBodyPart_t::SetMass(float value) {
    SetSchemaValue(m_ptr, "VPhysXBodyPart_t", "m_flMass", true, value);
}

GVPhysics2ShapeDef_t GVPhysXBodyPart_t::GetRnShape() const {
    return GetSchemaValue<GVPhysics2ShapeDef_t>(m_ptr, "VPhysXBodyPart_t", "m_rnShape");
}

void GVPhysXBodyPart_t::SetRnShape(GVPhysics2ShapeDef_t value) {
    SetSchemaValue(m_ptr, "VPhysXBodyPart_t", "m_rnShape", true, value);
}

uint16_t GVPhysXBodyPart_t::GetCollisionAttributeIndex() const {
    return GetSchemaValue<uint16_t>(m_ptr, "VPhysXBodyPart_t", "m_nCollisionAttributeIndex");
}

void GVPhysXBodyPart_t::SetCollisionAttributeIndex(uint16_t value) {
    SetSchemaValue(m_ptr, "VPhysXBodyPart_t", "m_nCollisionAttributeIndex", true, value);
}

uint16_t GVPhysXBodyPart_t::GetReserved() const {
    return GetSchemaValue<uint16_t>(m_ptr, "VPhysXBodyPart_t", "m_nReserved");
}

void GVPhysXBodyPart_t::SetReserved(uint16_t value) {
    SetSchemaValue(m_ptr, "VPhysXBodyPart_t", "m_nReserved", true, value);
}

float GVPhysXBodyPart_t::GetInertiaScale() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXBodyPart_t", "m_flInertiaScale");
}

void GVPhysXBodyPart_t::SetInertiaScale(float value) {
    SetSchemaValue(m_ptr, "VPhysXBodyPart_t", "m_flInertiaScale", true, value);
}

float GVPhysXBodyPart_t::GetLinearDamping() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXBodyPart_t", "m_flLinearDamping");
}

void GVPhysXBodyPart_t::SetLinearDamping(float value) {
    SetSchemaValue(m_ptr, "VPhysXBodyPart_t", "m_flLinearDamping", true, value);
}

float GVPhysXBodyPart_t::GetAngularDamping() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXBodyPart_t", "m_flAngularDamping");
}

void GVPhysXBodyPart_t::SetAngularDamping(float value) {
    SetSchemaValue(m_ptr, "VPhysXBodyPart_t", "m_flAngularDamping", true, value);
}

bool GVPhysXBodyPart_t::GetOverrideMassCenter() const {
    return GetSchemaValue<bool>(m_ptr, "VPhysXBodyPart_t", "m_bOverrideMassCenter");
}

void GVPhysXBodyPart_t::SetOverrideMassCenter(bool value) {
    SetSchemaValue(m_ptr, "VPhysXBodyPart_t", "m_bOverrideMassCenter", true, value);
}

Vector GVPhysXBodyPart_t::GetMassCenterOverride() const {
    return GetSchemaValue<Vector>(m_ptr, "VPhysXBodyPart_t", "m_vMassCenterOverride");
}

void GVPhysXBodyPart_t::SetMassCenterOverride(Vector value) {
    SetSchemaValue(m_ptr, "VPhysXBodyPart_t", "m_vMassCenterOverride", true, value);
}

std::string GVPhysXBodyPart_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVPhysXBodyPart_t::IsValid() {
    return (m_ptr != nullptr);
}

GCDecalInfo::GCDecalInfo(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCDecalInfo::GCDecalInfo(void *ptr) {
    m_ptr = ptr;
}

float GCDecalInfo::GetAnimationScale() const {
    return GetSchemaValue<float>(m_ptr, "CDecalInfo", "m_flAnimationScale");
}

void GCDecalInfo::SetAnimationScale(float value) {
    SetSchemaValue(m_ptr, "CDecalInfo", "m_flAnimationScale", false, value);
}

float GCDecalInfo::GetAnimationLifeSpan() const {
    return GetSchemaValue<float>(m_ptr, "CDecalInfo", "m_flAnimationLifeSpan");
}

void GCDecalInfo::SetAnimationLifeSpan(float value) {
    SetSchemaValue(m_ptr, "CDecalInfo", "m_flAnimationLifeSpan", false, value);
}

float GCDecalInfo::GetPlaceTime() const {
    return GetSchemaValue<float>(m_ptr, "CDecalInfo", "m_flPlaceTime");
}

void GCDecalInfo::SetPlaceTime(float value) {
    SetSchemaValue(m_ptr, "CDecalInfo", "m_flPlaceTime", false, value);
}

float GCDecalInfo::GetFadeStartTime() const {
    return GetSchemaValue<float>(m_ptr, "CDecalInfo", "m_flFadeStartTime");
}

void GCDecalInfo::SetFadeStartTime(float value) {
    SetSchemaValue(m_ptr, "CDecalInfo", "m_flFadeStartTime", false, value);
}

float GCDecalInfo::GetFadeDuration() const {
    return GetSchemaValue<float>(m_ptr, "CDecalInfo", "m_flFadeDuration");
}

void GCDecalInfo::SetFadeDuration(float value) {
    SetSchemaValue(m_ptr, "CDecalInfo", "m_flFadeDuration", false, value);
}

int32_t GCDecalInfo::GetVBSlot() const {
    return GetSchemaValue<int32_t>(m_ptr, "CDecalInfo", "m_nVBSlot");
}

void GCDecalInfo::SetVBSlot(int32_t value) {
    SetSchemaValue(m_ptr, "CDecalInfo", "m_nVBSlot", false, value);
}

int32_t GCDecalInfo::GetBoneIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CDecalInfo", "m_nBoneIndex");
}

void GCDecalInfo::SetBoneIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CDecalInfo", "m_nBoneIndex", false, value);
}

Vector GCDecalInfo::GetPosition() const {
    return GetSchemaValue<Vector>(m_ptr, "CDecalInfo", "m_vPosition");
}

void GCDecalInfo::SetPosition(Vector value) {
    SetSchemaValue(m_ptr, "CDecalInfo", "m_vPosition", false, value);
}

float GCDecalInfo::GetBoundingRadiusSqr() const {
    return GetSchemaValue<float>(m_ptr, "CDecalInfo", "m_flBoundingRadiusSqr");
}

void GCDecalInfo::SetBoundingRadiusSqr(float value) {
    SetSchemaValue(m_ptr, "CDecalInfo", "m_flBoundingRadiusSqr", false, value);
}

GCDecalInfo GCDecalInfo::GetNext() const {
    GCDecalInfo value(GetSchemaValuePtr<void>(m_ptr, "CDecalInfo", "m_pNext"));
    return value;
}

void GCDecalInfo::SetNext(GCDecalInfo* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Next' is not possible.\n");
}

GCDecalInfo GCDecalInfo::GetPrev() const {
    GCDecalInfo value(GetSchemaValuePtr<void>(m_ptr, "CDecalInfo", "m_pPrev"));
    return value;
}

void GCDecalInfo::SetPrev(GCDecalInfo* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Prev' is not possible.\n");
}

int32_t GCDecalInfo::GetDecalMaterialIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CDecalInfo", "m_nDecalMaterialIndex");
}

void GCDecalInfo::SetDecalMaterialIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CDecalInfo", "m_nDecalMaterialIndex", false, value);
}

std::string GCDecalInfo::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCDecalInfo::IsValid() {
    return (m_ptr != nullptr);
}

GParticleControlPointConfiguration_t::GParticleControlPointConfiguration_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GParticleControlPointConfiguration_t::GParticleControlPointConfiguration_t(void *ptr) {
    m_ptr = ptr;
}

CUtlString GParticleControlPointConfiguration_t::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "ParticleControlPointConfiguration_t", "m_name");
}

void GParticleControlPointConfiguration_t::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "ParticleControlPointConfiguration_t", "m_name", true, value);
}

std::vector<GParticleControlPointDriver_t> GParticleControlPointConfiguration_t::GetDrivers() const {
    CUtlVector<GParticleControlPointDriver_t>* vec = GetSchemaValue<CUtlVector<GParticleControlPointDriver_t>*>(m_ptr, "ParticleControlPointConfiguration_t", "m_drivers"); std::vector<GParticleControlPointDriver_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GParticleControlPointConfiguration_t::SetDrivers(std::vector<GParticleControlPointDriver_t> value) {
    SetSchemaValueCUtlVector<GParticleControlPointDriver_t>(m_ptr, "ParticleControlPointConfiguration_t", "m_drivers", true, value);
}

GParticlePreviewState_t GParticleControlPointConfiguration_t::GetPreviewState() const {
    return GetSchemaValue<GParticlePreviewState_t>(m_ptr, "ParticleControlPointConfiguration_t", "m_previewState");
}

void GParticleControlPointConfiguration_t::SetPreviewState(GParticlePreviewState_t value) {
    SetSchemaValue(m_ptr, "ParticleControlPointConfiguration_t", "m_previewState", true, value);
}

std::string GParticleControlPointConfiguration_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GParticleControlPointConfiguration_t::IsValid() {
    return (m_ptr != nullptr);
}

GVMixUtilityDesc_t::GVMixUtilityDesc_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVMixUtilityDesc_t::GVMixUtilityDesc_t(void *ptr) {
    m_ptr = ptr;
}

VMixChannelOperation_t GVMixUtilityDesc_t::GetOp() const {
    return GetSchemaValue<VMixChannelOperation_t>(m_ptr, "VMixUtilityDesc_t", "m_nOp");
}

void GVMixUtilityDesc_t::SetOp(VMixChannelOperation_t value) {
    SetSchemaValue(m_ptr, "VMixUtilityDesc_t", "m_nOp", true, value);
}

float GVMixUtilityDesc_t::GetInputPan() const {
    return GetSchemaValue<float>(m_ptr, "VMixUtilityDesc_t", "m_flInputPan");
}

void GVMixUtilityDesc_t::SetInputPan(float value) {
    SetSchemaValue(m_ptr, "VMixUtilityDesc_t", "m_flInputPan", true, value);
}

float GVMixUtilityDesc_t::GetOutputBalance() const {
    return GetSchemaValue<float>(m_ptr, "VMixUtilityDesc_t", "m_flOutputBalance");
}

void GVMixUtilityDesc_t::SetOutputBalance(float value) {
    SetSchemaValue(m_ptr, "VMixUtilityDesc_t", "m_flOutputBalance", true, value);
}

float GVMixUtilityDesc_t::GetFldbOutputGain() const {
    return GetSchemaValue<float>(m_ptr, "VMixUtilityDesc_t", "m_fldbOutputGain");
}

void GVMixUtilityDesc_t::SetFldbOutputGain(float value) {
    SetSchemaValue(m_ptr, "VMixUtilityDesc_t", "m_fldbOutputGain", true, value);
}

bool GVMixUtilityDesc_t::GetBassMono() const {
    return GetSchemaValue<bool>(m_ptr, "VMixUtilityDesc_t", "m_bBassMono");
}

void GVMixUtilityDesc_t::SetBassMono(bool value) {
    SetSchemaValue(m_ptr, "VMixUtilityDesc_t", "m_bBassMono", true, value);
}

float GVMixUtilityDesc_t::GetBassFreq() const {
    return GetSchemaValue<float>(m_ptr, "VMixUtilityDesc_t", "m_flBassFreq");
}

void GVMixUtilityDesc_t::SetBassFreq(float value) {
    SetSchemaValue(m_ptr, "VMixUtilityDesc_t", "m_flBassFreq", true, value);
}

std::string GVMixUtilityDesc_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVMixUtilityDesc_t::IsValid() {
    return (m_ptr != nullptr);
}

GCMotionGraphConfig::GCMotionGraphConfig(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMotionGraphConfig::GCMotionGraphConfig(void *ptr) {
    m_ptr = ptr;
}

std::vector<float> GCMotionGraphConfig::GetParamValues() const {
    float* outValue = GetSchemaValue<float*>(m_ptr, "CMotionGraphConfig", "m_paramValues"); std::vector<float> ret; for(int i = 0; i < 4; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCMotionGraphConfig::SetParamValues(std::vector<float> value) {
    float* outValue = GetSchemaValue<float*>(m_ptr, "CMotionGraphConfig", "m_paramValues"); for(int i = 0; i < 4; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CMotionGraphConfig", "m_paramValues", false, outValue);
}

float GCMotionGraphConfig::GetDuration() const {
    return GetSchemaValue<float>(m_ptr, "CMotionGraphConfig", "m_flDuration");
}

void GCMotionGraphConfig::SetDuration(float value) {
    SetSchemaValue(m_ptr, "CMotionGraphConfig", "m_flDuration", false, value);
}

GMotionIndex GCMotionGraphConfig::GetMotionIndex() const {
    return GetSchemaValue<GMotionIndex>(m_ptr, "CMotionGraphConfig", "m_nMotionIndex");
}

void GCMotionGraphConfig::SetMotionIndex(GMotionIndex value) {
    SetSchemaValue(m_ptr, "CMotionGraphConfig", "m_nMotionIndex", false, value);
}

int32_t GCMotionGraphConfig::GetSampleStart() const {
    return GetSchemaValue<int32_t>(m_ptr, "CMotionGraphConfig", "m_nSampleStart");
}

void GCMotionGraphConfig::SetSampleStart(int32_t value) {
    SetSchemaValue(m_ptr, "CMotionGraphConfig", "m_nSampleStart", false, value);
}

int32_t GCMotionGraphConfig::GetSampleCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CMotionGraphConfig", "m_nSampleCount");
}

void GCMotionGraphConfig::SetSampleCount(int32_t value) {
    SetSchemaValue(m_ptr, "CMotionGraphConfig", "m_nSampleCount", false, value);
}

std::string GCMotionGraphConfig::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMotionGraphConfig::IsValid() {
    return (m_ptr != nullptr);
}

GCMovementComponentUpdater::GCMovementComponentUpdater(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMovementComponentUpdater::GCMovementComponentUpdater(void *ptr) {
    m_ptr = ptr;
}

GCAnimInputDamping GCMovementComponentUpdater::GetFacingDamping() const {
    return GetSchemaValue<GCAnimInputDamping>(m_ptr, "CMovementComponentUpdater", "m_facingDamping");
}

void GCMovementComponentUpdater::SetFacingDamping(GCAnimInputDamping value) {
    SetSchemaValue(m_ptr, "CMovementComponentUpdater", "m_facingDamping", false, value);
}

int32_t GCMovementComponentUpdater::GetDefaultMotorIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CMovementComponentUpdater", "m_nDefaultMotorIndex");
}

void GCMovementComponentUpdater::SetDefaultMotorIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CMovementComponentUpdater", "m_nDefaultMotorIndex", false, value);
}

float GCMovementComponentUpdater::GetDefaultRunSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CMovementComponentUpdater", "m_flDefaultRunSpeed");
}

void GCMovementComponentUpdater::SetDefaultRunSpeed(float value) {
    SetSchemaValue(m_ptr, "CMovementComponentUpdater", "m_flDefaultRunSpeed", false, value);
}

bool GCMovementComponentUpdater::GetMoveVarsDisabled() const {
    return GetSchemaValue<bool>(m_ptr, "CMovementComponentUpdater", "m_bMoveVarsDisabled");
}

void GCMovementComponentUpdater::SetMoveVarsDisabled(bool value) {
    SetSchemaValue(m_ptr, "CMovementComponentUpdater", "m_bMoveVarsDisabled", false, value);
}

bool GCMovementComponentUpdater::GetNetworkPath() const {
    return GetSchemaValue<bool>(m_ptr, "CMovementComponentUpdater", "m_bNetworkPath");
}

void GCMovementComponentUpdater::SetNetworkPath(bool value) {
    SetSchemaValue(m_ptr, "CMovementComponentUpdater", "m_bNetworkPath", false, value);
}

bool GCMovementComponentUpdater::GetNetworkFacing() const {
    return GetSchemaValue<bool>(m_ptr, "CMovementComponentUpdater", "m_bNetworkFacing");
}

void GCMovementComponentUpdater::SetNetworkFacing(bool value) {
    SetSchemaValue(m_ptr, "CMovementComponentUpdater", "m_bNetworkFacing", false, value);
}

std::vector<GCAnimParamHandle> GCMovementComponentUpdater::GetParamHandles() const {
    GCAnimParamHandle* outValue = GetSchemaValue<GCAnimParamHandle*>(m_ptr, "CMovementComponentUpdater", "m_paramHandles"); std::vector<GCAnimParamHandle> ret; for(int i = 0; i < 30; i++) { ret.push_back(outValue[i]); } return ret;
}

void GCMovementComponentUpdater::SetParamHandles(std::vector<GCAnimParamHandle> value) {
    GCAnimParamHandle* outValue = GetSchemaValue<GCAnimParamHandle*>(m_ptr, "CMovementComponentUpdater", "m_paramHandles"); for(int i = 0; i < 30; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "CMovementComponentUpdater", "m_paramHandles", false, outValue);
}

std::string GCMovementComponentUpdater::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMovementComponentUpdater::IsValid() {
    return (m_ptr != nullptr);
}

GPointDefinition_t::GPointDefinition_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GPointDefinition_t::GPointDefinition_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GPointDefinition_t::GetControlPoint() const {
    return GetSchemaValue<int32_t>(m_ptr, "PointDefinition_t", "m_nControlPoint");
}

void GPointDefinition_t::SetControlPoint(int32_t value) {
    SetSchemaValue(m_ptr, "PointDefinition_t", "m_nControlPoint", true, value);
}

bool GPointDefinition_t::GetLocalCoords() const {
    return GetSchemaValue<bool>(m_ptr, "PointDefinition_t", "m_bLocalCoords");
}

void GPointDefinition_t::SetLocalCoords(bool value) {
    SetSchemaValue(m_ptr, "PointDefinition_t", "m_bLocalCoords", true, value);
}

Vector GPointDefinition_t::GetOffset() const {
    return GetSchemaValue<Vector>(m_ptr, "PointDefinition_t", "m_vOffset");
}

void GPointDefinition_t::SetOffset(Vector value) {
    SetSchemaValue(m_ptr, "PointDefinition_t", "m_vOffset", true, value);
}

std::string GPointDefinition_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GPointDefinition_t::IsValid() {
    return (m_ptr != nullptr);
}

GVMixEffectChainDesc_t::GVMixEffectChainDesc_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVMixEffectChainDesc_t::GVMixEffectChainDesc_t(void *ptr) {
    m_ptr = ptr;
}

float GVMixEffectChainDesc_t::GetCrossfadeTime() const {
    return GetSchemaValue<float>(m_ptr, "VMixEffectChainDesc_t", "m_flCrossfadeTime");
}

void GVMixEffectChainDesc_t::SetCrossfadeTime(float value) {
    SetSchemaValue(m_ptr, "VMixEffectChainDesc_t", "m_flCrossfadeTime", true, value);
}

std::string GVMixEffectChainDesc_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVMixEffectChainDesc_t::IsValid() {
    return (m_ptr != nullptr);
}

GCHitReactUpdateNode::GCHitReactUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCHitReactUpdateNode::GCHitReactUpdateNode(void *ptr) {
    m_ptr = ptr;
}

GHitReactFixedSettings_t GCHitReactUpdateNode::GetOpFixedSettings() const {
    return GetSchemaValue<GHitReactFixedSettings_t>(m_ptr, "CHitReactUpdateNode", "m_opFixedSettings");
}

void GCHitReactUpdateNode::SetOpFixedSettings(GHitReactFixedSettings_t value) {
    SetSchemaValue(m_ptr, "CHitReactUpdateNode", "m_opFixedSettings", false, value);
}

GCAnimParamHandle GCHitReactUpdateNode::GetTriggerParam() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CHitReactUpdateNode", "m_triggerParam");
}

void GCHitReactUpdateNode::SetTriggerParam(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CHitReactUpdateNode", "m_triggerParam", false, value);
}

GCAnimParamHandle GCHitReactUpdateNode::GetHitBoneParam() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CHitReactUpdateNode", "m_hitBoneParam");
}

void GCHitReactUpdateNode::SetHitBoneParam(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CHitReactUpdateNode", "m_hitBoneParam", false, value);
}

GCAnimParamHandle GCHitReactUpdateNode::GetHitOffsetParam() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CHitReactUpdateNode", "m_hitOffsetParam");
}

void GCHitReactUpdateNode::SetHitOffsetParam(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CHitReactUpdateNode", "m_hitOffsetParam", false, value);
}

GCAnimParamHandle GCHitReactUpdateNode::GetHitDirectionParam() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CHitReactUpdateNode", "m_hitDirectionParam");
}

void GCHitReactUpdateNode::SetHitDirectionParam(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CHitReactUpdateNode", "m_hitDirectionParam", false, value);
}

GCAnimParamHandle GCHitReactUpdateNode::GetHitStrengthParam() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CHitReactUpdateNode", "m_hitStrengthParam");
}

void GCHitReactUpdateNode::SetHitStrengthParam(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CHitReactUpdateNode", "m_hitStrengthParam", false, value);
}

float GCHitReactUpdateNode::GetMinDelayBetweenHits() const {
    return GetSchemaValue<float>(m_ptr, "CHitReactUpdateNode", "m_flMinDelayBetweenHits");
}

void GCHitReactUpdateNode::SetMinDelayBetweenHits(float value) {
    SetSchemaValue(m_ptr, "CHitReactUpdateNode", "m_flMinDelayBetweenHits", false, value);
}

bool GCHitReactUpdateNode::GetResetChild() const {
    return GetSchemaValue<bool>(m_ptr, "CHitReactUpdateNode", "m_bResetChild");
}

void GCHitReactUpdateNode::SetResetChild(bool value) {
    SetSchemaValue(m_ptr, "CHitReactUpdateNode", "m_bResetChild", false, value);
}

std::string GCHitReactUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCHitReactUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GEntInput_t::GEntInput_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEntInput_t::GEntInput_t(void *ptr) {
    m_ptr = ptr;
}

std::string GEntInput_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEntInput_t::IsValid() {
    return (m_ptr != nullptr);
}

GCNmVirtualParameterFloatNode::GCNmVirtualParameterFloatNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmVirtualParameterFloatNode::GCNmVirtualParameterFloatNode(void *ptr) {
    m_ptr = ptr;
}

int16_t GCNmVirtualParameterFloatNode::GetChildNodeIdx() const {
    return GetSchemaValue<int16_t>(m_ptr, "CNmVirtualParameterFloatNode", "m_nChildNodeIdx");
}

void GCNmVirtualParameterFloatNode::SetChildNodeIdx(int16_t value) {
    SetSchemaValue(m_ptr, "CNmVirtualParameterFloatNode", "m_nChildNodeIdx", false, value);
}

std::string GCNmVirtualParameterFloatNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmVirtualParameterFloatNode::IsValid() {
    return (m_ptr != nullptr);
}

GCParticleSystemDefinition::GCParticleSystemDefinition(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCParticleSystemDefinition::GCParticleSystemDefinition(void *ptr) {
    m_ptr = ptr;
}

int32_t GCParticleSystemDefinition::GetBehaviorVersion() const {
    return GetSchemaValue<int32_t>(m_ptr, "CParticleSystemDefinition", "m_nBehaviorVersion");
}

void GCParticleSystemDefinition::SetBehaviorVersion(int32_t value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_nBehaviorVersion", false, value);
}

std::vector<GCParticleFunctionPreEmission*> GCParticleSystemDefinition::GetPreEmissionOperators() const {
    CUtlVector<GCParticleFunctionPreEmission*>* vec = GetSchemaValue<CUtlVector<GCParticleFunctionPreEmission*>*>(m_ptr, "CParticleSystemDefinition", "m_PreEmissionOperators"); std::vector<GCParticleFunctionPreEmission*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCParticleSystemDefinition::SetPreEmissionOperators(std::vector<GCParticleFunctionPreEmission*> value) {
    SetSchemaValueCUtlVector<GCParticleFunctionPreEmission*>(m_ptr, "CParticleSystemDefinition", "m_PreEmissionOperators", false, value);
}

std::vector<GCParticleFunctionEmitter*> GCParticleSystemDefinition::GetEmitters() const {
    CUtlVector<GCParticleFunctionEmitter*>* vec = GetSchemaValue<CUtlVector<GCParticleFunctionEmitter*>*>(m_ptr, "CParticleSystemDefinition", "m_Emitters"); std::vector<GCParticleFunctionEmitter*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCParticleSystemDefinition::SetEmitters(std::vector<GCParticleFunctionEmitter*> value) {
    SetSchemaValueCUtlVector<GCParticleFunctionEmitter*>(m_ptr, "CParticleSystemDefinition", "m_Emitters", false, value);
}

std::vector<GCParticleFunctionInitializer*> GCParticleSystemDefinition::GetInitializers() const {
    CUtlVector<GCParticleFunctionInitializer*>* vec = GetSchemaValue<CUtlVector<GCParticleFunctionInitializer*>*>(m_ptr, "CParticleSystemDefinition", "m_Initializers"); std::vector<GCParticleFunctionInitializer*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCParticleSystemDefinition::SetInitializers(std::vector<GCParticleFunctionInitializer*> value) {
    SetSchemaValueCUtlVector<GCParticleFunctionInitializer*>(m_ptr, "CParticleSystemDefinition", "m_Initializers", false, value);
}

std::vector<GCParticleFunctionOperator*> GCParticleSystemDefinition::GetOperators() const {
    CUtlVector<GCParticleFunctionOperator*>* vec = GetSchemaValue<CUtlVector<GCParticleFunctionOperator*>*>(m_ptr, "CParticleSystemDefinition", "m_Operators"); std::vector<GCParticleFunctionOperator*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCParticleSystemDefinition::SetOperators(std::vector<GCParticleFunctionOperator*> value) {
    SetSchemaValueCUtlVector<GCParticleFunctionOperator*>(m_ptr, "CParticleSystemDefinition", "m_Operators", false, value);
}

std::vector<GCParticleFunctionForce*> GCParticleSystemDefinition::GetForceGenerators() const {
    CUtlVector<GCParticleFunctionForce*>* vec = GetSchemaValue<CUtlVector<GCParticleFunctionForce*>*>(m_ptr, "CParticleSystemDefinition", "m_ForceGenerators"); std::vector<GCParticleFunctionForce*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCParticleSystemDefinition::SetForceGenerators(std::vector<GCParticleFunctionForce*> value) {
    SetSchemaValueCUtlVector<GCParticleFunctionForce*>(m_ptr, "CParticleSystemDefinition", "m_ForceGenerators", false, value);
}

std::vector<GCParticleFunctionConstraint*> GCParticleSystemDefinition::GetConstraints() const {
    CUtlVector<GCParticleFunctionConstraint*>* vec = GetSchemaValue<CUtlVector<GCParticleFunctionConstraint*>*>(m_ptr, "CParticleSystemDefinition", "m_Constraints"); std::vector<GCParticleFunctionConstraint*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCParticleSystemDefinition::SetConstraints(std::vector<GCParticleFunctionConstraint*> value) {
    SetSchemaValueCUtlVector<GCParticleFunctionConstraint*>(m_ptr, "CParticleSystemDefinition", "m_Constraints", false, value);
}

std::vector<GCParticleFunctionRenderer*> GCParticleSystemDefinition::GetRenderers() const {
    CUtlVector<GCParticleFunctionRenderer*>* vec = GetSchemaValue<CUtlVector<GCParticleFunctionRenderer*>*>(m_ptr, "CParticleSystemDefinition", "m_Renderers"); std::vector<GCParticleFunctionRenderer*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCParticleSystemDefinition::SetRenderers(std::vector<GCParticleFunctionRenderer*> value) {
    SetSchemaValueCUtlVector<GCParticleFunctionRenderer*>(m_ptr, "CParticleSystemDefinition", "m_Renderers", false, value);
}

std::vector<GParticleChildrenInfo_t> GCParticleSystemDefinition::GetChildren() const {
    CUtlVector<GParticleChildrenInfo_t>* vec = GetSchemaValue<CUtlVector<GParticleChildrenInfo_t>*>(m_ptr, "CParticleSystemDefinition", "m_Children"); std::vector<GParticleChildrenInfo_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCParticleSystemDefinition::SetChildren(std::vector<GParticleChildrenInfo_t> value) {
    SetSchemaValueCUtlVector<GParticleChildrenInfo_t>(m_ptr, "CParticleSystemDefinition", "m_Children", false, value);
}

int32_t GCParticleSystemDefinition::GetFirstMultipleOverride_BackwardCompat() const {
    return GetSchemaValue<int32_t>(m_ptr, "CParticleSystemDefinition", "m_nFirstMultipleOverride_BackwardCompat");
}

void GCParticleSystemDefinition::SetFirstMultipleOverride_BackwardCompat(int32_t value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_nFirstMultipleOverride_BackwardCompat", false, value);
}

int32_t GCParticleSystemDefinition::GetInitialParticles() const {
    return GetSchemaValue<int32_t>(m_ptr, "CParticleSystemDefinition", "m_nInitialParticles");
}

void GCParticleSystemDefinition::SetInitialParticles(int32_t value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_nInitialParticles", false, value);
}

int32_t GCParticleSystemDefinition::GetMaxParticles() const {
    return GetSchemaValue<int32_t>(m_ptr, "CParticleSystemDefinition", "m_nMaxParticles");
}

void GCParticleSystemDefinition::SetMaxParticles(int32_t value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_nMaxParticles", false, value);
}

int32_t GCParticleSystemDefinition::GetGroupID() const {
    return GetSchemaValue<int32_t>(m_ptr, "CParticleSystemDefinition", "m_nGroupID");
}

void GCParticleSystemDefinition::SetGroupID(int32_t value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_nGroupID", false, value);
}

Vector GCParticleSystemDefinition::GetBoundingBoxMin() const {
    return GetSchemaValue<Vector>(m_ptr, "CParticleSystemDefinition", "m_BoundingBoxMin");
}

void GCParticleSystemDefinition::SetBoundingBoxMin(Vector value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_BoundingBoxMin", false, value);
}

Vector GCParticleSystemDefinition::GetBoundingBoxMax() const {
    return GetSchemaValue<Vector>(m_ptr, "CParticleSystemDefinition", "m_BoundingBoxMax");
}

void GCParticleSystemDefinition::SetBoundingBoxMax(Vector value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_BoundingBoxMax", false, value);
}

float GCParticleSystemDefinition::GetDepthSortBias() const {
    return GetSchemaValue<float>(m_ptr, "CParticleSystemDefinition", "m_flDepthSortBias");
}

void GCParticleSystemDefinition::SetDepthSortBias(float value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_flDepthSortBias", false, value);
}

int32_t GCParticleSystemDefinition::GetSortOverridePositionCP() const {
    return GetSchemaValue<int32_t>(m_ptr, "CParticleSystemDefinition", "m_nSortOverridePositionCP");
}

void GCParticleSystemDefinition::SetSortOverridePositionCP(int32_t value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_nSortOverridePositionCP", false, value);
}

bool GCParticleSystemDefinition::GetInfiniteBounds() const {
    return GetSchemaValue<bool>(m_ptr, "CParticleSystemDefinition", "m_bInfiniteBounds");
}

void GCParticleSystemDefinition::SetInfiniteBounds(bool value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_bInfiniteBounds", false, value);
}

bool GCParticleSystemDefinition::GetEnableNamedValues() const {
    return GetSchemaValue<bool>(m_ptr, "CParticleSystemDefinition", "m_bEnableNamedValues");
}

void GCParticleSystemDefinition::SetEnableNamedValues(bool value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_bEnableNamedValues", false, value);
}

CUtlString GCParticleSystemDefinition::GetNamedValueDomain() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CParticleSystemDefinition", "m_NamedValueDomain");
}

void GCParticleSystemDefinition::SetNamedValueDomain(CUtlString value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_NamedValueDomain", false, value);
}

std::vector<GParticleNamedValueSource_t*> GCParticleSystemDefinition::GetNamedValueLocals() const {
    CUtlVector<GParticleNamedValueSource_t*>* vec = GetSchemaValue<CUtlVector<GParticleNamedValueSource_t*>*>(m_ptr, "CParticleSystemDefinition", "m_NamedValueLocals"); std::vector<GParticleNamedValueSource_t*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCParticleSystemDefinition::SetNamedValueLocals(std::vector<GParticleNamedValueSource_t*> value) {
    SetSchemaValueCUtlVector<GParticleNamedValueSource_t*>(m_ptr, "CParticleSystemDefinition", "m_NamedValueLocals", false, value);
}

Color GCParticleSystemDefinition::GetConstantColor() const {
    return GetSchemaValue<Color>(m_ptr, "CParticleSystemDefinition", "m_ConstantColor");
}

void GCParticleSystemDefinition::SetConstantColor(Color value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_ConstantColor", false, value);
}

Vector GCParticleSystemDefinition::GetConstantNormal() const {
    return GetSchemaValue<Vector>(m_ptr, "CParticleSystemDefinition", "m_ConstantNormal");
}

void GCParticleSystemDefinition::SetConstantNormal(Vector value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_ConstantNormal", false, value);
}

float GCParticleSystemDefinition::GetConstantRadius() const {
    return GetSchemaValue<float>(m_ptr, "CParticleSystemDefinition", "m_flConstantRadius");
}

void GCParticleSystemDefinition::SetConstantRadius(float value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_flConstantRadius", false, value);
}

float GCParticleSystemDefinition::GetConstantRotation() const {
    return GetSchemaValue<float>(m_ptr, "CParticleSystemDefinition", "m_flConstantRotation");
}

void GCParticleSystemDefinition::SetConstantRotation(float value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_flConstantRotation", false, value);
}

float GCParticleSystemDefinition::GetConstantRotationSpeed() const {
    return GetSchemaValue<float>(m_ptr, "CParticleSystemDefinition", "m_flConstantRotationSpeed");
}

void GCParticleSystemDefinition::SetConstantRotationSpeed(float value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_flConstantRotationSpeed", false, value);
}

float GCParticleSystemDefinition::GetConstantLifespan() const {
    return GetSchemaValue<float>(m_ptr, "CParticleSystemDefinition", "m_flConstantLifespan");
}

void GCParticleSystemDefinition::SetConstantLifespan(float value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_flConstantLifespan", false, value);
}

int32_t GCParticleSystemDefinition::GetConstantSequenceNumber() const {
    return GetSchemaValue<int32_t>(m_ptr, "CParticleSystemDefinition", "m_nConstantSequenceNumber");
}

void GCParticleSystemDefinition::SetConstantSequenceNumber(int32_t value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_nConstantSequenceNumber", false, value);
}

int32_t GCParticleSystemDefinition::GetConstantSequenceNumber1() const {
    return GetSchemaValue<int32_t>(m_ptr, "CParticleSystemDefinition", "m_nConstantSequenceNumber1");
}

void GCParticleSystemDefinition::SetConstantSequenceNumber1(int32_t value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_nConstantSequenceNumber1", false, value);
}

int32_t GCParticleSystemDefinition::GetSnapshotControlPoint() const {
    return GetSchemaValue<int32_t>(m_ptr, "CParticleSystemDefinition", "m_nSnapshotControlPoint");
}

void GCParticleSystemDefinition::SetSnapshotControlPoint(int32_t value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_nSnapshotControlPoint", false, value);
}

float GCParticleSystemDefinition::GetCullRadius() const {
    return GetSchemaValue<float>(m_ptr, "CParticleSystemDefinition", "m_flCullRadius");
}

void GCParticleSystemDefinition::SetCullRadius(float value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_flCullRadius", false, value);
}

float GCParticleSystemDefinition::GetCullFillCost() const {
    return GetSchemaValue<float>(m_ptr, "CParticleSystemDefinition", "m_flCullFillCost");
}

void GCParticleSystemDefinition::SetCullFillCost(float value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_flCullFillCost", false, value);
}

int32_t GCParticleSystemDefinition::GetCullControlPoint() const {
    return GetSchemaValue<int32_t>(m_ptr, "CParticleSystemDefinition", "m_nCullControlPoint");
}

void GCParticleSystemDefinition::SetCullControlPoint(int32_t value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_nCullControlPoint", false, value);
}

int32_t GCParticleSystemDefinition::GetFallbackMaxCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CParticleSystemDefinition", "m_nFallbackMaxCount");
}

void GCParticleSystemDefinition::SetFallbackMaxCount(int32_t value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_nFallbackMaxCount", false, value);
}

float GCParticleSystemDefinition::GetPreSimulationTime() const {
    return GetSchemaValue<float>(m_ptr, "CParticleSystemDefinition", "m_flPreSimulationTime");
}

void GCParticleSystemDefinition::SetPreSimulationTime(float value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_flPreSimulationTime", false, value);
}

float GCParticleSystemDefinition::GetStopSimulationAfterTime() const {
    return GetSchemaValue<float>(m_ptr, "CParticleSystemDefinition", "m_flStopSimulationAfterTime");
}

void GCParticleSystemDefinition::SetStopSimulationAfterTime(float value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_flStopSimulationAfterTime", false, value);
}

float GCParticleSystemDefinition::GetMaximumTimeStep() const {
    return GetSchemaValue<float>(m_ptr, "CParticleSystemDefinition", "m_flMaximumTimeStep");
}

void GCParticleSystemDefinition::SetMaximumTimeStep(float value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_flMaximumTimeStep", false, value);
}

float GCParticleSystemDefinition::GetMaximumSimTime() const {
    return GetSchemaValue<float>(m_ptr, "CParticleSystemDefinition", "m_flMaximumSimTime");
}

void GCParticleSystemDefinition::SetMaximumSimTime(float value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_flMaximumSimTime", false, value);
}

float GCParticleSystemDefinition::GetMinimumSimTime() const {
    return GetSchemaValue<float>(m_ptr, "CParticleSystemDefinition", "m_flMinimumSimTime");
}

void GCParticleSystemDefinition::SetMinimumSimTime(float value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_flMinimumSimTime", false, value);
}

float GCParticleSystemDefinition::GetMinimumTimeStep() const {
    return GetSchemaValue<float>(m_ptr, "CParticleSystemDefinition", "m_flMinimumTimeStep");
}

void GCParticleSystemDefinition::SetMinimumTimeStep(float value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_flMinimumTimeStep", false, value);
}

int32_t GCParticleSystemDefinition::GetMinimumFrames() const {
    return GetSchemaValue<int32_t>(m_ptr, "CParticleSystemDefinition", "m_nMinimumFrames");
}

void GCParticleSystemDefinition::SetMinimumFrames(int32_t value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_nMinimumFrames", false, value);
}

int32_t GCParticleSystemDefinition::GetMinCPULevel() const {
    return GetSchemaValue<int32_t>(m_ptr, "CParticleSystemDefinition", "m_nMinCPULevel");
}

void GCParticleSystemDefinition::SetMinCPULevel(int32_t value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_nMinCPULevel", false, value);
}

int32_t GCParticleSystemDefinition::GetMinGPULevel() const {
    return GetSchemaValue<int32_t>(m_ptr, "CParticleSystemDefinition", "m_nMinGPULevel");
}

void GCParticleSystemDefinition::SetMinGPULevel(int32_t value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_nMinGPULevel", false, value);
}

float GCParticleSystemDefinition::GetNoDrawTimeToGoToSleep() const {
    return GetSchemaValue<float>(m_ptr, "CParticleSystemDefinition", "m_flNoDrawTimeToGoToSleep");
}

void GCParticleSystemDefinition::SetNoDrawTimeToGoToSleep(float value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_flNoDrawTimeToGoToSleep", false, value);
}

float GCParticleSystemDefinition::GetMaxDrawDistance() const {
    return GetSchemaValue<float>(m_ptr, "CParticleSystemDefinition", "m_flMaxDrawDistance");
}

void GCParticleSystemDefinition::SetMaxDrawDistance(float value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_flMaxDrawDistance", false, value);
}

float GCParticleSystemDefinition::GetStartFadeDistance() const {
    return GetSchemaValue<float>(m_ptr, "CParticleSystemDefinition", "m_flStartFadeDistance");
}

void GCParticleSystemDefinition::SetStartFadeDistance(float value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_flStartFadeDistance", false, value);
}

float GCParticleSystemDefinition::GetMaxCreationDistance() const {
    return GetSchemaValue<float>(m_ptr, "CParticleSystemDefinition", "m_flMaxCreationDistance");
}

void GCParticleSystemDefinition::SetMaxCreationDistance(float value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_flMaxCreationDistance", false, value);
}

int32_t GCParticleSystemDefinition::GetAggregationMinAvailableParticles() const {
    return GetSchemaValue<int32_t>(m_ptr, "CParticleSystemDefinition", "m_nAggregationMinAvailableParticles");
}

void GCParticleSystemDefinition::SetAggregationMinAvailableParticles(int32_t value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_nAggregationMinAvailableParticles", false, value);
}

float GCParticleSystemDefinition::GetAggregateRadius() const {
    return GetSchemaValue<float>(m_ptr, "CParticleSystemDefinition", "m_flAggregateRadius");
}

void GCParticleSystemDefinition::SetAggregateRadius(float value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_flAggregateRadius", false, value);
}

bool GCParticleSystemDefinition::GetShouldBatch() const {
    return GetSchemaValue<bool>(m_ptr, "CParticleSystemDefinition", "m_bShouldBatch");
}

void GCParticleSystemDefinition::SetShouldBatch(bool value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_bShouldBatch", false, value);
}

bool GCParticleSystemDefinition::GetShouldHitboxesFallbackToRenderBounds() const {
    return GetSchemaValue<bool>(m_ptr, "CParticleSystemDefinition", "m_bShouldHitboxesFallbackToRenderBounds");
}

void GCParticleSystemDefinition::SetShouldHitboxesFallbackToRenderBounds(bool value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_bShouldHitboxesFallbackToRenderBounds", false, value);
}

bool GCParticleSystemDefinition::GetShouldHitboxesFallbackToSnapshot() const {
    return GetSchemaValue<bool>(m_ptr, "CParticleSystemDefinition", "m_bShouldHitboxesFallbackToSnapshot");
}

void GCParticleSystemDefinition::SetShouldHitboxesFallbackToSnapshot(bool value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_bShouldHitboxesFallbackToSnapshot", false, value);
}

bool GCParticleSystemDefinition::GetShouldHitboxesFallbackToCollisionHulls() const {
    return GetSchemaValue<bool>(m_ptr, "CParticleSystemDefinition", "m_bShouldHitboxesFallbackToCollisionHulls");
}

void GCParticleSystemDefinition::SetShouldHitboxesFallbackToCollisionHulls(bool value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_bShouldHitboxesFallbackToCollisionHulls", false, value);
}

InheritableBoolType_t GCParticleSystemDefinition::GetViewModelEffect() const {
    return GetSchemaValue<InheritableBoolType_t>(m_ptr, "CParticleSystemDefinition", "m_nViewModelEffect");
}

void GCParticleSystemDefinition::SetViewModelEffect(InheritableBoolType_t value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_nViewModelEffect", false, value);
}

bool GCParticleSystemDefinition::GetScreenSpaceEffect() const {
    return GetSchemaValue<bool>(m_ptr, "CParticleSystemDefinition", "m_bScreenSpaceEffect");
}

void GCParticleSystemDefinition::SetScreenSpaceEffect(bool value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_bScreenSpaceEffect", false, value);
}

CUtlSymbolLarge GCParticleSystemDefinition::GetTargetLayerID() const {
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CParticleSystemDefinition", "m_pszTargetLayerID");
}

void GCParticleSystemDefinition::SetTargetLayerID(CUtlSymbolLarge value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_pszTargetLayerID", false, value);
}

int32_t GCParticleSystemDefinition::GetSkipRenderControlPoint() const {
    return GetSchemaValue<int32_t>(m_ptr, "CParticleSystemDefinition", "m_nSkipRenderControlPoint");
}

void GCParticleSystemDefinition::SetSkipRenderControlPoint(int32_t value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_nSkipRenderControlPoint", false, value);
}

int32_t GCParticleSystemDefinition::GetAllowRenderControlPoint() const {
    return GetSchemaValue<int32_t>(m_ptr, "CParticleSystemDefinition", "m_nAllowRenderControlPoint");
}

void GCParticleSystemDefinition::SetAllowRenderControlPoint(int32_t value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_nAllowRenderControlPoint", false, value);
}

bool GCParticleSystemDefinition::GetShouldSort() const {
    return GetSchemaValue<bool>(m_ptr, "CParticleSystemDefinition", "m_bShouldSort");
}

void GCParticleSystemDefinition::SetShouldSort(bool value) {
    SetSchemaValue(m_ptr, "CParticleSystemDefinition", "m_bShouldSort", false, value);
}

std::vector<GParticleControlPointConfiguration_t> GCParticleSystemDefinition::GetControlPointConfigurations() const {
    CUtlVector<GParticleControlPointConfiguration_t>* vec = GetSchemaValue<CUtlVector<GParticleControlPointConfiguration_t>*>(m_ptr, "CParticleSystemDefinition", "m_controlPointConfigurations"); std::vector<GParticleControlPointConfiguration_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCParticleSystemDefinition::SetControlPointConfigurations(std::vector<GParticleControlPointConfiguration_t> value) {
    SetSchemaValueCUtlVector<GParticleControlPointConfiguration_t>(m_ptr, "CParticleSystemDefinition", "m_controlPointConfigurations", false, value);
}

std::string GCParticleSystemDefinition::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCParticleSystemDefinition::IsValid() {
    return (m_ptr != nullptr);
}

GCVoiceContainerSelector::GCVoiceContainerSelector(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCVoiceContainerSelector::GCVoiceContainerSelector(void *ptr) {
    m_ptr = ptr;
}

PlayBackMode_t GCVoiceContainerSelector::GetMode() const {
    return GetSchemaValue<PlayBackMode_t>(m_ptr, "CVoiceContainerSelector", "m_mode");
}

void GCVoiceContainerSelector::SetMode(PlayBackMode_t value) {
    SetSchemaValue(m_ptr, "CVoiceContainerSelector", "m_mode", false, value);
}

bool GCVoiceContainerSelector::GetRetrigger() const {
    return GetSchemaValue<bool>(m_ptr, "CVoiceContainerSelector", "m_bRetrigger");
}

void GCVoiceContainerSelector::SetRetrigger(bool value) {
    SetSchemaValue(m_ptr, "CVoiceContainerSelector", "m_bRetrigger", false, value);
}

std::string GCVoiceContainerSelector::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCVoiceContainerSelector::IsValid() {
    return (m_ptr != nullptr);
}

GCRegionSVM::GCRegionSVM(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCRegionSVM::GCRegionSVM(void *ptr) {
    m_ptr = ptr;
}

std::vector<GRnPlane_t> GCRegionSVM::GetPlanes() const {
    CUtlVector<GRnPlane_t>* vec = GetSchemaValue<CUtlVector<GRnPlane_t>*>(m_ptr, "CRegionSVM", "m_Planes"); std::vector<GRnPlane_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCRegionSVM::SetPlanes(std::vector<GRnPlane_t> value) {
    SetSchemaValueCUtlVector<GRnPlane_t>(m_ptr, "CRegionSVM", "m_Planes", false, value);
}

std::vector<uint32> GCRegionSVM::GetNodes() const {
    CUtlVector<uint32>* vec = GetSchemaValue<CUtlVector<uint32>*>(m_ptr, "CRegionSVM", "m_Nodes"); std::vector<uint32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCRegionSVM::SetNodes(std::vector<uint32> value) {
    SetSchemaValueCUtlVector<uint32>(m_ptr, "CRegionSVM", "m_Nodes", false, value);
}

std::string GCRegionSVM::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCRegionSVM::IsValid() {
    return (m_ptr != nullptr);
}

GCSetParameterActionUpdater::GCSetParameterActionUpdater(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSetParameterActionUpdater::GCSetParameterActionUpdater(void *ptr) {
    m_ptr = ptr;
}

GCAnimParamHandle GCSetParameterActionUpdater::GetParam() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CSetParameterActionUpdater", "m_hParam");
}

void GCSetParameterActionUpdater::SetParam(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CSetParameterActionUpdater", "m_hParam", false, value);
}

std::string GCSetParameterActionUpdater::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSetParameterActionUpdater::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimUpdateSharedData::GCAnimUpdateSharedData(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimUpdateSharedData::GCAnimUpdateSharedData(void *ptr) {
    m_ptr = ptr;
}

GCAnimGraphSettingsManager GCAnimUpdateSharedData::GetSettings() const {
    return GetSchemaValue<GCAnimGraphSettingsManager>(m_ptr, "CAnimUpdateSharedData", "m_settings");
}

void GCAnimUpdateSharedData::SetSettings(GCAnimGraphSettingsManager value) {
    SetSchemaValue(m_ptr, "CAnimUpdateSharedData", "m_settings", false, value);
}

GCAnimNodePath GCAnimUpdateSharedData::GetRootNodePath() const {
    return GetSchemaValue<GCAnimNodePath>(m_ptr, "CAnimUpdateSharedData", "m_rootNodePath");
}

void GCAnimUpdateSharedData::SetRootNodePath(GCAnimNodePath value) {
    SetSchemaValue(m_ptr, "CAnimUpdateSharedData", "m_rootNodePath", false, value);
}

std::string GCAnimUpdateSharedData::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimUpdateSharedData::IsValid() {
    return (m_ptr != nullptr);
}

GEventClientSimulate_t::GEventClientSimulate_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEventClientSimulate_t::GEventClientSimulate_t(void *ptr) {
    m_ptr = ptr;
}

std::string GEventClientSimulate_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEventClientSimulate_t::IsValid() {
    return (m_ptr != nullptr);
}

GCVoiceContainerAmpedDecayingSineWave::GCVoiceContainerAmpedDecayingSineWave(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCVoiceContainerAmpedDecayingSineWave::GCVoiceContainerAmpedDecayingSineWave(void *ptr) {
    m_ptr = ptr;
}

float GCVoiceContainerAmpedDecayingSineWave::GetGainAmount() const {
    return GetSchemaValue<float>(m_ptr, "CVoiceContainerAmpedDecayingSineWave", "m_flGainAmount");
}

void GCVoiceContainerAmpedDecayingSineWave::SetGainAmount(float value) {
    SetSchemaValue(m_ptr, "CVoiceContainerAmpedDecayingSineWave", "m_flGainAmount", false, value);
}

std::string GCVoiceContainerAmpedDecayingSineWave::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCVoiceContainerAmpedDecayingSineWave::IsValid() {
    return (m_ptr != nullptr);
}

GClutterTile_t::GClutterTile_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GClutterTile_t::GClutterTile_t(void *ptr) {
    m_ptr = ptr;
}

uint32_t GClutterTile_t::GetFirstInstance() const {
    return GetSchemaValue<uint32_t>(m_ptr, "ClutterTile_t", "m_nFirstInstance");
}

void GClutterTile_t::SetFirstInstance(uint32_t value) {
    SetSchemaValue(m_ptr, "ClutterTile_t", "m_nFirstInstance", true, value);
}

uint32_t GClutterTile_t::GetLastInstance() const {
    return GetSchemaValue<uint32_t>(m_ptr, "ClutterTile_t", "m_nLastInstance");
}

void GClutterTile_t::SetLastInstance(uint32_t value) {
    SetSchemaValue(m_ptr, "ClutterTile_t", "m_nLastInstance", true, value);
}

GAABB_t GClutterTile_t::GetBoundsWs() const {
    return GetSchemaValue<GAABB_t>(m_ptr, "ClutterTile_t", "m_BoundsWs");
}

void GClutterTile_t::SetBoundsWs(GAABB_t value) {
    SetSchemaValue(m_ptr, "ClutterTile_t", "m_BoundsWs", true, value);
}

std::string GClutterTile_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GClutterTile_t::IsValid() {
    return (m_ptr != nullptr);
}

GPointDefinitionWithTimeValues_t::GPointDefinitionWithTimeValues_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GPointDefinitionWithTimeValues_t::GPointDefinitionWithTimeValues_t(void *ptr) {
    m_ptr = ptr;
}

float GPointDefinitionWithTimeValues_t::GetTimeDuration() const {
    return GetSchemaValue<float>(m_ptr, "PointDefinitionWithTimeValues_t", "m_flTimeDuration");
}

void GPointDefinitionWithTimeValues_t::SetTimeDuration(float value) {
    SetSchemaValue(m_ptr, "PointDefinitionWithTimeValues_t", "m_flTimeDuration", true, value);
}

std::string GPointDefinitionWithTimeValues_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GPointDefinitionWithTimeValues_t::IsValid() {
    return (m_ptr != nullptr);
}

GFeVertexMapBuild_t::GFeVertexMapBuild_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeVertexMapBuild_t::GFeVertexMapBuild_t(void *ptr) {
    m_ptr = ptr;
}

CUtlString GFeVertexMapBuild_t::GetVertexMapName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "FeVertexMapBuild_t", "m_VertexMapName");
}

void GFeVertexMapBuild_t::SetVertexMapName(CUtlString value) {
    SetSchemaValue(m_ptr, "FeVertexMapBuild_t", "m_VertexMapName", true, value);
}

uint32_t GFeVertexMapBuild_t::GetNameHash() const {
    return GetSchemaValue<uint32_t>(m_ptr, "FeVertexMapBuild_t", "m_nNameHash");
}

void GFeVertexMapBuild_t::SetNameHash(uint32_t value) {
    SetSchemaValue(m_ptr, "FeVertexMapBuild_t", "m_nNameHash", true, value);
}

Color GFeVertexMapBuild_t::GetColor() const {
    return GetSchemaValue<Color>(m_ptr, "FeVertexMapBuild_t", "m_Color");
}

void GFeVertexMapBuild_t::SetColor(Color value) {
    SetSchemaValue(m_ptr, "FeVertexMapBuild_t", "m_Color", true, value);
}

float GFeVertexMapBuild_t::GetVolumetricSolveStrength() const {
    return GetSchemaValue<float>(m_ptr, "FeVertexMapBuild_t", "m_flVolumetricSolveStrength");
}

void GFeVertexMapBuild_t::SetVolumetricSolveStrength(float value) {
    SetSchemaValue(m_ptr, "FeVertexMapBuild_t", "m_flVolumetricSolveStrength", true, value);
}

int32_t GFeVertexMapBuild_t::GetScaleSourceNode() const {
    return GetSchemaValue<int32_t>(m_ptr, "FeVertexMapBuild_t", "m_nScaleSourceNode");
}

void GFeVertexMapBuild_t::SetScaleSourceNode(int32_t value) {
    SetSchemaValue(m_ptr, "FeVertexMapBuild_t", "m_nScaleSourceNode", true, value);
}

std::vector<float32> GFeVertexMapBuild_t::GetWeights() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "FeVertexMapBuild_t", "m_Weights"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GFeVertexMapBuild_t::SetWeights(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "FeVertexMapBuild_t", "m_Weights", true, value);
}

std::string GFeVertexMapBuild_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeVertexMapBuild_t::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimDesc::GCAnimDesc(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimDesc::GCAnimDesc(void *ptr) {
    m_ptr = ptr;
}

CBufferString GCAnimDesc::GetName() const {
    return GetSchemaValue<CBufferString>(m_ptr, "CAnimDesc", "m_name");
}

void GCAnimDesc::SetName(CBufferString value) {
    SetSchemaValue(m_ptr, "CAnimDesc", "m_name", false, value);
}

GCAnimDesc_Flag GCAnimDesc::GetFlags() const {
    return GetSchemaValue<GCAnimDesc_Flag>(m_ptr, "CAnimDesc", "m_flags");
}

void GCAnimDesc::SetFlags(GCAnimDesc_Flag value) {
    SetSchemaValue(m_ptr, "CAnimDesc", "m_flags", false, value);
}

float GCAnimDesc::GetFps() const {
    return GetSchemaValue<float>(m_ptr, "CAnimDesc", "fps");
}

void GCAnimDesc::SetFps(float value) {
    SetSchemaValue(m_ptr, "CAnimDesc", "fps", false, value);
}

GCAnimEncodedFrames GCAnimDesc::GetData() const {
    return GetSchemaValue<GCAnimEncodedFrames>(m_ptr, "CAnimDesc", "m_Data");
}

void GCAnimDesc::SetData(GCAnimEncodedFrames value) {
    SetSchemaValue(m_ptr, "CAnimDesc", "m_Data", false, value);
}

std::vector<GCAnimMovement> GCAnimDesc::GetMovementArray() const {
    CUtlVector<GCAnimMovement>* vec = GetSchemaValue<CUtlVector<GCAnimMovement>*>(m_ptr, "CAnimDesc", "m_movementArray"); std::vector<GCAnimMovement> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimDesc::SetMovementArray(std::vector<GCAnimMovement> value) {
    SetSchemaValueCUtlVector<GCAnimMovement>(m_ptr, "CAnimDesc", "m_movementArray", false, value);
}

std::vector<GCAnimEventDefinition> GCAnimDesc::GetEventArray() const {
    CUtlVector<GCAnimEventDefinition>* vec = GetSchemaValue<CUtlVector<GCAnimEventDefinition>*>(m_ptr, "CAnimDesc", "m_eventArray"); std::vector<GCAnimEventDefinition> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimDesc::SetEventArray(std::vector<GCAnimEventDefinition> value) {
    SetSchemaValueCUtlVector<GCAnimEventDefinition>(m_ptr, "CAnimDesc", "m_eventArray", false, value);
}

std::vector<GCAnimActivity> GCAnimDesc::GetActivityArray() const {
    CUtlVector<GCAnimActivity>* vec = GetSchemaValue<CUtlVector<GCAnimActivity>*>(m_ptr, "CAnimDesc", "m_activityArray"); std::vector<GCAnimActivity> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimDesc::SetActivityArray(std::vector<GCAnimActivity> value) {
    SetSchemaValueCUtlVector<GCAnimActivity>(m_ptr, "CAnimDesc", "m_activityArray", false, value);
}

std::vector<GCAnimLocalHierarchy> GCAnimDesc::GetHierarchyArray() const {
    CUtlVector<GCAnimLocalHierarchy>* vec = GetSchemaValue<CUtlVector<GCAnimLocalHierarchy>*>(m_ptr, "CAnimDesc", "m_hierarchyArray"); std::vector<GCAnimLocalHierarchy> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimDesc::SetHierarchyArray(std::vector<GCAnimLocalHierarchy> value) {
    SetSchemaValueCUtlVector<GCAnimLocalHierarchy>(m_ptr, "CAnimDesc", "m_hierarchyArray", false, value);
}

float GCAnimDesc::GetFramestalltime() const {
    return GetSchemaValue<float>(m_ptr, "CAnimDesc", "framestalltime");
}

void GCAnimDesc::SetFramestalltime(float value) {
    SetSchemaValue(m_ptr, "CAnimDesc", "framestalltime", false, value);
}

Vector GCAnimDesc::GetRootMin() const {
    return GetSchemaValue<Vector>(m_ptr, "CAnimDesc", "m_vecRootMin");
}

void GCAnimDesc::SetRootMin(Vector value) {
    SetSchemaValue(m_ptr, "CAnimDesc", "m_vecRootMin", false, value);
}

Vector GCAnimDesc::GetRootMax() const {
    return GetSchemaValue<Vector>(m_ptr, "CAnimDesc", "m_vecRootMax");
}

void GCAnimDesc::SetRootMax(Vector value) {
    SetSchemaValue(m_ptr, "CAnimDesc", "m_vecRootMax", false, value);
}

std::vector<Vector> GCAnimDesc::GetBoneWorldMin() const {
    CUtlVector<Vector>* vec = GetSchemaValue<CUtlVector<Vector>*>(m_ptr, "CAnimDesc", "m_vecBoneWorldMin"); std::vector<Vector> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimDesc::SetBoneWorldMin(std::vector<Vector> value) {
    SetSchemaValueCUtlVector<Vector>(m_ptr, "CAnimDesc", "m_vecBoneWorldMin", false, value);
}

std::vector<Vector> GCAnimDesc::GetBoneWorldMax() const {
    CUtlVector<Vector>* vec = GetSchemaValue<CUtlVector<Vector>*>(m_ptr, "CAnimDesc", "m_vecBoneWorldMax"); std::vector<Vector> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimDesc::SetBoneWorldMax(std::vector<Vector> value) {
    SetSchemaValueCUtlVector<Vector>(m_ptr, "CAnimDesc", "m_vecBoneWorldMax", false, value);
}

GCAnimSequenceParams GCAnimDesc::GetSequenceParams() const {
    return GetSchemaValue<GCAnimSequenceParams>(m_ptr, "CAnimDesc", "m_sequenceParams");
}

void GCAnimDesc::SetSequenceParams(GCAnimSequenceParams value) {
    SetSchemaValue(m_ptr, "CAnimDesc", "m_sequenceParams", false, value);
}

std::string GCAnimDesc::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimDesc::IsValid() {
    return (m_ptr != nullptr);
}

GCTwistConstraint::GCTwistConstraint(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTwistConstraint::GCTwistConstraint(void *ptr) {
    m_ptr = ptr;
}

bool GCTwistConstraint::GetInverse() const {
    return GetSchemaValue<bool>(m_ptr, "CTwistConstraint", "m_bInverse");
}

void GCTwistConstraint::SetInverse(bool value) {
    SetSchemaValue(m_ptr, "CTwistConstraint", "m_bInverse", false, value);
}

Quaternion GCTwistConstraint::GetParentBindRotation() const {
    return GetSchemaValue<Quaternion>(m_ptr, "CTwistConstraint", "m_qParentBindRotation");
}

void GCTwistConstraint::SetParentBindRotation(Quaternion value) {
    SetSchemaValue(m_ptr, "CTwistConstraint", "m_qParentBindRotation", false, value);
}

Quaternion GCTwistConstraint::GetChildBindRotation() const {
    return GetSchemaValue<Quaternion>(m_ptr, "CTwistConstraint", "m_qChildBindRotation");
}

void GCTwistConstraint::SetChildBindRotation(Quaternion value) {
    SetSchemaValue(m_ptr, "CTwistConstraint", "m_qChildBindRotation", false, value);
}

std::string GCTwistConstraint::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTwistConstraint::IsValid() {
    return (m_ptr != nullptr);
}

GCNewParticleEffect::GCNewParticleEffect(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNewParticleEffect::GCNewParticleEffect(void *ptr) {
    m_ptr = ptr;
}

GCNewParticleEffect GCNewParticleEffect::GetNext() const {
    GCNewParticleEffect value(GetSchemaValuePtr<void>(m_ptr, "CNewParticleEffect", "m_pNext"));
    return value;
}

void GCNewParticleEffect::SetNext(GCNewParticleEffect* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Next' is not possible.\n");
}

GCNewParticleEffect GCNewParticleEffect::GetPrev() const {
    GCNewParticleEffect value(GetSchemaValuePtr<void>(m_ptr, "CNewParticleEffect", "m_pPrev"));
    return value;
}

void GCNewParticleEffect::SetPrev(GCNewParticleEffect* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Prev' is not possible.\n");
}

GIParticleCollection GCNewParticleEffect::GetParticles() const {
    GIParticleCollection value(GetSchemaValuePtr<void>(m_ptr, "CNewParticleEffect", "m_pParticles"));
    return value;
}

void GCNewParticleEffect::SetParticles(GIParticleCollection* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Particles' is not possible.\n");
}

std::string GCNewParticleEffect::GetDebugName() const {
    return GetSchemaValuePtr<char>(m_ptr, "CNewParticleEffect", "m_pDebugName");
}

void GCNewParticleEffect::SetDebugName(std::string value) {
    WriteSchemaPtrValue(m_ptr, "CNewParticleEffect", "m_pDebugName", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), value.size());
}

Vector GCNewParticleEffect::GetSortOrigin() const {
    return GetSchemaValue<Vector>(m_ptr, "CNewParticleEffect", "m_vSortOrigin");
}

void GCNewParticleEffect::SetSortOrigin(Vector value) {
    SetSchemaValue(m_ptr, "CNewParticleEffect", "m_vSortOrigin", false, value);
}

float GCNewParticleEffect::GetScale() const {
    return GetSchemaValue<float>(m_ptr, "CNewParticleEffect", "m_flScale");
}

void GCNewParticleEffect::SetScale(float value) {
    SetSchemaValue(m_ptr, "CNewParticleEffect", "m_flScale", false, value);
}

GPARTICLE_EHANDLE__ GCNewParticleEffect::GetOwner() const {
    GPARTICLE_EHANDLE__ value(GetSchemaValuePtr<void>(m_ptr, "CNewParticleEffect", "m_hOwner"));
    return value;
}

void GCNewParticleEffect::SetOwner(GPARTICLE_EHANDLE__* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Owner' is not possible.\n");
}

GCParticleProperty GCNewParticleEffect::GetOwningParticleProperty() const {
    GCParticleProperty value(GetSchemaValuePtr<void>(m_ptr, "CNewParticleEffect", "m_pOwningParticleProperty"));
    return value;
}

void GCNewParticleEffect::SetOwningParticleProperty(GCParticleProperty* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OwningParticleProperty' is not possible.\n");
}

float GCNewParticleEffect::GetFreezeTransitionStart() const {
    return GetSchemaValue<float>(m_ptr, "CNewParticleEffect", "m_flFreezeTransitionStart");
}

void GCNewParticleEffect::SetFreezeTransitionStart(float value) {
    SetSchemaValue(m_ptr, "CNewParticleEffect", "m_flFreezeTransitionStart", false, value);
}

float GCNewParticleEffect::GetFreezeTransitionDuration() const {
    return GetSchemaValue<float>(m_ptr, "CNewParticleEffect", "m_flFreezeTransitionDuration");
}

void GCNewParticleEffect::SetFreezeTransitionDuration(float value) {
    SetSchemaValue(m_ptr, "CNewParticleEffect", "m_flFreezeTransitionDuration", false, value);
}

float GCNewParticleEffect::GetFreezeTransitionOverride() const {
    return GetSchemaValue<float>(m_ptr, "CNewParticleEffect", "m_flFreezeTransitionOverride");
}

void GCNewParticleEffect::SetFreezeTransitionOverride(float value) {
    SetSchemaValue(m_ptr, "CNewParticleEffect", "m_flFreezeTransitionOverride", false, value);
}

bool GCNewParticleEffect::GetFreezeTransitionActive() const {
    return GetSchemaValue<bool>(m_ptr, "CNewParticleEffect", "m_bFreezeTransitionActive");
}

void GCNewParticleEffect::SetFreezeTransitionActive(bool value) {
    SetSchemaValue(m_ptr, "CNewParticleEffect", "m_bFreezeTransitionActive", false, value);
}

bool GCNewParticleEffect::GetFreezeTargetState() const {
    return GetSchemaValue<bool>(m_ptr, "CNewParticleEffect", "m_bFreezeTargetState");
}

void GCNewParticleEffect::SetFreezeTargetState(bool value) {
    SetSchemaValue(m_ptr, "CNewParticleEffect", "m_bFreezeTargetState", false, value);
}

bool GCNewParticleEffect::GetCanFreeze() const {
    return GetSchemaValue<bool>(m_ptr, "CNewParticleEffect", "m_bCanFreeze");
}

void GCNewParticleEffect::SetCanFreeze(bool value) {
    SetSchemaValue(m_ptr, "CNewParticleEffect", "m_bCanFreeze", false, value);
}

Vector GCNewParticleEffect::GetLastMin() const {
    return GetSchemaValue<Vector>(m_ptr, "CNewParticleEffect", "m_LastMin");
}

void GCNewParticleEffect::SetLastMin(Vector value) {
    SetSchemaValue(m_ptr, "CNewParticleEffect", "m_LastMin", false, value);
}

Vector GCNewParticleEffect::GetLastMax() const {
    return GetSchemaValue<Vector>(m_ptr, "CNewParticleEffect", "m_LastMax");
}

void GCNewParticleEffect::SetLastMax(Vector value) {
    SetSchemaValue(m_ptr, "CNewParticleEffect", "m_LastMax", false, value);
}

int32_t GCNewParticleEffect::GetSplitScreenUser() const {
    return GetSchemaValue<int32_t>(m_ptr, "CNewParticleEffect", "m_nSplitScreenUser");
}

void GCNewParticleEffect::SetSplitScreenUser(int32_t value) {
    SetSchemaValue(m_ptr, "CNewParticleEffect", "m_nSplitScreenUser", false, value);
}

Vector GCNewParticleEffect::GetAggregationCenter() const {
    return GetSchemaValue<Vector>(m_ptr, "CNewParticleEffect", "m_vecAggregationCenter");
}

void GCNewParticleEffect::SetAggregationCenter(Vector value) {
    SetSchemaValue(m_ptr, "CNewParticleEffect", "m_vecAggregationCenter", false, value);
}

int32_t GCNewParticleEffect::GetRefCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CNewParticleEffect", "m_RefCount");
}

void GCNewParticleEffect::SetRefCount(int32_t value) {
    SetSchemaValue(m_ptr, "CNewParticleEffect", "m_RefCount", false, value);
}

std::string GCNewParticleEffect::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNewParticleEffect::IsValid() {
    return (m_ptr != nullptr);
}

GCFeIndexedJiggleBone::GCFeIndexedJiggleBone(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFeIndexedJiggleBone::GCFeIndexedJiggleBone(void *ptr) {
    m_ptr = ptr;
}

uint32_t GCFeIndexedJiggleBone::GetNode() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CFeIndexedJiggleBone", "m_nNode");
}

void GCFeIndexedJiggleBone::SetNode(uint32_t value) {
    SetSchemaValue(m_ptr, "CFeIndexedJiggleBone", "m_nNode", false, value);
}

uint32_t GCFeIndexedJiggleBone::GetJiggleParent() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CFeIndexedJiggleBone", "m_nJiggleParent");
}

void GCFeIndexedJiggleBone::SetJiggleParent(uint32_t value) {
    SetSchemaValue(m_ptr, "CFeIndexedJiggleBone", "m_nJiggleParent", false, value);
}

GCFeJiggleBone GCFeIndexedJiggleBone::GetJiggleBone() const {
    return GetSchemaValue<GCFeJiggleBone>(m_ptr, "CFeIndexedJiggleBone", "m_jiggleBone");
}

void GCFeIndexedJiggleBone::SetJiggleBone(GCFeJiggleBone value) {
    SetSchemaValue(m_ptr, "CFeIndexedJiggleBone", "m_jiggleBone", false, value);
}

std::string GCFeIndexedJiggleBone::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFeIndexedJiggleBone::IsValid() {
    return (m_ptr != nullptr);
}

GCFloatAnimParameter::GCFloatAnimParameter(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFloatAnimParameter::GCFloatAnimParameter(void *ptr) {
    m_ptr = ptr;
}

float GCFloatAnimParameter::GetDefaultValue() const {
    return GetSchemaValue<float>(m_ptr, "CFloatAnimParameter", "m_fDefaultValue");
}

void GCFloatAnimParameter::SetDefaultValue(float value) {
    SetSchemaValue(m_ptr, "CFloatAnimParameter", "m_fDefaultValue", false, value);
}

float GCFloatAnimParameter::GetMinValue() const {
    return GetSchemaValue<float>(m_ptr, "CFloatAnimParameter", "m_fMinValue");
}

void GCFloatAnimParameter::SetMinValue(float value) {
    SetSchemaValue(m_ptr, "CFloatAnimParameter", "m_fMinValue", false, value);
}

float GCFloatAnimParameter::GetMaxValue() const {
    return GetSchemaValue<float>(m_ptr, "CFloatAnimParameter", "m_fMaxValue");
}

void GCFloatAnimParameter::SetMaxValue(float value) {
    SetSchemaValue(m_ptr, "CFloatAnimParameter", "m_fMaxValue", false, value);
}

bool GCFloatAnimParameter::GetInterpolate() const {
    return GetSchemaValue<bool>(m_ptr, "CFloatAnimParameter", "m_bInterpolate");
}

void GCFloatAnimParameter::SetInterpolate(bool value) {
    SetSchemaValue(m_ptr, "CFloatAnimParameter", "m_bInterpolate", false, value);
}

std::string GCFloatAnimParameter::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFloatAnimParameter::IsValid() {
    return (m_ptr != nullptr);
}

GRnBlendVertex_t::GRnBlendVertex_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GRnBlendVertex_t::GRnBlendVertex_t(void *ptr) {
    m_ptr = ptr;
}

uint16_t GRnBlendVertex_t::GetWeight0() const {
    return GetSchemaValue<uint16_t>(m_ptr, "RnBlendVertex_t", "m_nWeight0");
}

void GRnBlendVertex_t::SetWeight0(uint16_t value) {
    SetSchemaValue(m_ptr, "RnBlendVertex_t", "m_nWeight0", true, value);
}

uint16_t GRnBlendVertex_t::GetIndex0() const {
    return GetSchemaValue<uint16_t>(m_ptr, "RnBlendVertex_t", "m_nIndex0");
}

void GRnBlendVertex_t::SetIndex0(uint16_t value) {
    SetSchemaValue(m_ptr, "RnBlendVertex_t", "m_nIndex0", true, value);
}

uint16_t GRnBlendVertex_t::GetWeight1() const {
    return GetSchemaValue<uint16_t>(m_ptr, "RnBlendVertex_t", "m_nWeight1");
}

void GRnBlendVertex_t::SetWeight1(uint16_t value) {
    SetSchemaValue(m_ptr, "RnBlendVertex_t", "m_nWeight1", true, value);
}

uint16_t GRnBlendVertex_t::GetIndex1() const {
    return GetSchemaValue<uint16_t>(m_ptr, "RnBlendVertex_t", "m_nIndex1");
}

void GRnBlendVertex_t::SetIndex1(uint16_t value) {
    SetSchemaValue(m_ptr, "RnBlendVertex_t", "m_nIndex1", true, value);
}

uint16_t GRnBlendVertex_t::GetWeight2() const {
    return GetSchemaValue<uint16_t>(m_ptr, "RnBlendVertex_t", "m_nWeight2");
}

void GRnBlendVertex_t::SetWeight2(uint16_t value) {
    SetSchemaValue(m_ptr, "RnBlendVertex_t", "m_nWeight2", true, value);
}

uint16_t GRnBlendVertex_t::GetIndex2() const {
    return GetSchemaValue<uint16_t>(m_ptr, "RnBlendVertex_t", "m_nIndex2");
}

void GRnBlendVertex_t::SetIndex2(uint16_t value) {
    SetSchemaValue(m_ptr, "RnBlendVertex_t", "m_nIndex2", true, value);
}

uint16_t GRnBlendVertex_t::GetFlags() const {
    return GetSchemaValue<uint16_t>(m_ptr, "RnBlendVertex_t", "m_nFlags");
}

void GRnBlendVertex_t::SetFlags(uint16_t value) {
    SetSchemaValue(m_ptr, "RnBlendVertex_t", "m_nFlags", true, value);
}

uint16_t GRnBlendVertex_t::GetTargetIndex() const {
    return GetSchemaValue<uint16_t>(m_ptr, "RnBlendVertex_t", "m_nTargetIndex");
}

void GRnBlendVertex_t::SetTargetIndex(uint16_t value) {
    SetSchemaValue(m_ptr, "RnBlendVertex_t", "m_nTargetIndex", true, value);
}

std::string GRnBlendVertex_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GRnBlendVertex_t::IsValid() {
    return (m_ptr != nullptr);
}

GCVirtualAnimParameter::GCVirtualAnimParameter(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCVirtualAnimParameter::GCVirtualAnimParameter(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCVirtualAnimParameter::GetExpressionString() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CVirtualAnimParameter", "m_expressionString");
}

void GCVirtualAnimParameter::SetExpressionString(CUtlString value) {
    SetSchemaValue(m_ptr, "CVirtualAnimParameter", "m_expressionString", false, value);
}

AnimParamType_t GCVirtualAnimParameter::GetParamType() const {
    return GetSchemaValue<AnimParamType_t>(m_ptr, "CVirtualAnimParameter", "m_eParamType");
}

void GCVirtualAnimParameter::SetParamType(AnimParamType_t value) {
    SetSchemaValue(m_ptr, "CVirtualAnimParameter", "m_eParamType", false, value);
}

std::string GCVirtualAnimParameter::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCVirtualAnimParameter::IsValid() {
    return (m_ptr != nullptr);
}

GCHitBoxSetList::GCHitBoxSetList(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCHitBoxSetList::GCHitBoxSetList(void *ptr) {
    m_ptr = ptr;
}

std::vector<GCHitBoxSet> GCHitBoxSetList::GetHitBoxSets() const {
    CUtlVector<GCHitBoxSet>* vec = GetSchemaValue<CUtlVector<GCHitBoxSet>*>(m_ptr, "CHitBoxSetList", "m_HitBoxSets"); std::vector<GCHitBoxSet> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCHitBoxSetList::SetHitBoxSets(std::vector<GCHitBoxSet> value) {
    SetSchemaValueCUtlVector<GCHitBoxSet>(m_ptr, "CHitBoxSetList", "m_HitBoxSets", false, value);
}

std::string GCHitBoxSetList::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCHitBoxSetList::IsValid() {
    return (m_ptr != nullptr);
}

GMaterialParamString_t::GMaterialParamString_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GMaterialParamString_t::GMaterialParamString_t(void *ptr) {
    m_ptr = ptr;
}

CUtlString GMaterialParamString_t::GetValue() const {
    return GetSchemaValue<CUtlString>(m_ptr, "MaterialParamString_t", "m_value");
}

void GMaterialParamString_t::SetValue(CUtlString value) {
    SetSchemaValue(m_ptr, "MaterialParamString_t", "m_value", true, value);
}

std::string GMaterialParamString_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GMaterialParamString_t::IsValid() {
    return (m_ptr != nullptr);
}

GVsInputSignature_t::GVsInputSignature_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVsInputSignature_t::GVsInputSignature_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<GVsInputSignatureElement_t> GVsInputSignature_t::GetElems() const {
    CUtlVector<GVsInputSignatureElement_t>* vec = GetSchemaValue<CUtlVector<GVsInputSignatureElement_t>*>(m_ptr, "VsInputSignature_t", "m_elems"); std::vector<GVsInputSignatureElement_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GVsInputSignature_t::SetElems(std::vector<GVsInputSignatureElement_t> value) {
    SetSchemaValueCUtlVector<GVsInputSignatureElement_t>(m_ptr, "VsInputSignature_t", "m_elems", true, value);
}

std::string GVsInputSignature_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVsInputSignature_t::IsValid() {
    return (m_ptr != nullptr);
}

GInfoOverlayData_t::GInfoOverlayData_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GInfoOverlayData_t::GInfoOverlayData_t(void *ptr) {
    m_ptr = ptr;
}

matrix3x4_t GInfoOverlayData_t::GetTransform() const {
    return GetSchemaValue<matrix3x4_t>(m_ptr, "InfoOverlayData_t", "m_transform");
}

void GInfoOverlayData_t::SetTransform(matrix3x4_t value) {
    SetSchemaValue(m_ptr, "InfoOverlayData_t", "m_transform", true, value);
}

float GInfoOverlayData_t::GetWidth() const {
    return GetSchemaValue<float>(m_ptr, "InfoOverlayData_t", "m_flWidth");
}

void GInfoOverlayData_t::SetWidth(float value) {
    SetSchemaValue(m_ptr, "InfoOverlayData_t", "m_flWidth", true, value);
}

float GInfoOverlayData_t::GetHeight() const {
    return GetSchemaValue<float>(m_ptr, "InfoOverlayData_t", "m_flHeight");
}

void GInfoOverlayData_t::SetHeight(float value) {
    SetSchemaValue(m_ptr, "InfoOverlayData_t", "m_flHeight", true, value);
}

float GInfoOverlayData_t::GetDepth() const {
    return GetSchemaValue<float>(m_ptr, "InfoOverlayData_t", "m_flDepth");
}

void GInfoOverlayData_t::SetDepth(float value) {
    SetSchemaValue(m_ptr, "InfoOverlayData_t", "m_flDepth", true, value);
}

Vector2D GInfoOverlayData_t::GetUVStart() const {
    return GetSchemaValue<Vector2D>(m_ptr, "InfoOverlayData_t", "m_vUVStart");
}

void GInfoOverlayData_t::SetUVStart(Vector2D value) {
    SetSchemaValue(m_ptr, "InfoOverlayData_t", "m_vUVStart", true, value);
}

Vector2D GInfoOverlayData_t::GetUVEnd() const {
    return GetSchemaValue<Vector2D>(m_ptr, "InfoOverlayData_t", "m_vUVEnd");
}

void GInfoOverlayData_t::SetUVEnd(Vector2D value) {
    SetSchemaValue(m_ptr, "InfoOverlayData_t", "m_vUVEnd", true, value);
}

int32_t GInfoOverlayData_t::GetRenderOrder() const {
    return GetSchemaValue<int32_t>(m_ptr, "InfoOverlayData_t", "m_nRenderOrder");
}

void GInfoOverlayData_t::SetRenderOrder(int32_t value) {
    SetSchemaValue(m_ptr, "InfoOverlayData_t", "m_nRenderOrder", true, value);
}

Vector4D GInfoOverlayData_t::GetTintColor() const {
    return GetSchemaValue<Vector4D>(m_ptr, "InfoOverlayData_t", "m_vTintColor");
}

void GInfoOverlayData_t::SetTintColor(Vector4D value) {
    SetSchemaValue(m_ptr, "InfoOverlayData_t", "m_vTintColor", true, value);
}

int32_t GInfoOverlayData_t::GetSequenceOverride() const {
    return GetSchemaValue<int32_t>(m_ptr, "InfoOverlayData_t", "m_nSequenceOverride");
}

void GInfoOverlayData_t::SetSequenceOverride(int32_t value) {
    SetSchemaValue(m_ptr, "InfoOverlayData_t", "m_nSequenceOverride", true, value);
}

std::string GInfoOverlayData_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GInfoOverlayData_t::IsValid() {
    return (m_ptr != nullptr);
}

GCastSphereSATParams_t::GCastSphereSATParams_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCastSphereSATParams_t::GCastSphereSATParams_t(void *ptr) {
    m_ptr = ptr;
}

Vector GCastSphereSATParams_t::GetRayStart() const {
    return GetSchemaValue<Vector>(m_ptr, "CastSphereSATParams_t", "m_vRayStart");
}

void GCastSphereSATParams_t::SetRayStart(Vector value) {
    SetSchemaValue(m_ptr, "CastSphereSATParams_t", "m_vRayStart", true, value);
}

Vector GCastSphereSATParams_t::GetRayDelta() const {
    return GetSchemaValue<Vector>(m_ptr, "CastSphereSATParams_t", "m_vRayDelta");
}

void GCastSphereSATParams_t::SetRayDelta(Vector value) {
    SetSchemaValue(m_ptr, "CastSphereSATParams_t", "m_vRayDelta", true, value);
}

float GCastSphereSATParams_t::GetRadius() const {
    return GetSchemaValue<float>(m_ptr, "CastSphereSATParams_t", "m_flRadius");
}

void GCastSphereSATParams_t::SetRadius(float value) {
    SetSchemaValue(m_ptr, "CastSphereSATParams_t", "m_flRadius", true, value);
}

float GCastSphereSATParams_t::GetMaxFraction() const {
    return GetSchemaValue<float>(m_ptr, "CastSphereSATParams_t", "m_flMaxFraction");
}

void GCastSphereSATParams_t::SetMaxFraction(float value) {
    SetSchemaValue(m_ptr, "CastSphereSATParams_t", "m_flMaxFraction", true, value);
}

float GCastSphereSATParams_t::GetScale() const {
    return GetSchemaValue<float>(m_ptr, "CastSphereSATParams_t", "m_flScale");
}

void GCastSphereSATParams_t::SetScale(float value) {
    SetSchemaValue(m_ptr, "CastSphereSATParams_t", "m_flScale", true, value);
}

GRnHull_t GCastSphereSATParams_t::GetHull() const {
    GRnHull_t value(GetSchemaValuePtr<void>(m_ptr, "CastSphereSATParams_t", "m_pHull"));
    return value;
}

void GCastSphereSATParams_t::SetHull(GRnHull_t* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Hull' is not possible.\n");
}

std::string GCastSphereSATParams_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCastSphereSATParams_t::IsValid() {
    return (m_ptr != nullptr);
}

GCBindPoseUpdateNode::GCBindPoseUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBindPoseUpdateNode::GCBindPoseUpdateNode(void *ptr) {
    m_ptr = ptr;
}

std::string GCBindPoseUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBindPoseUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GVMixFreeverbDesc_t::GVMixFreeverbDesc_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVMixFreeverbDesc_t::GVMixFreeverbDesc_t(void *ptr) {
    m_ptr = ptr;
}

float GVMixFreeverbDesc_t::GetRoomSize() const {
    return GetSchemaValue<float>(m_ptr, "VMixFreeverbDesc_t", "m_flRoomSize");
}

void GVMixFreeverbDesc_t::SetRoomSize(float value) {
    SetSchemaValue(m_ptr, "VMixFreeverbDesc_t", "m_flRoomSize", true, value);
}

float GVMixFreeverbDesc_t::GetDamp() const {
    return GetSchemaValue<float>(m_ptr, "VMixFreeverbDesc_t", "m_flDamp");
}

void GVMixFreeverbDesc_t::SetDamp(float value) {
    SetSchemaValue(m_ptr, "VMixFreeverbDesc_t", "m_flDamp", true, value);
}

float GVMixFreeverbDesc_t::GetWidth() const {
    return GetSchemaValue<float>(m_ptr, "VMixFreeverbDesc_t", "m_flWidth");
}

void GVMixFreeverbDesc_t::SetWidth(float value) {
    SetSchemaValue(m_ptr, "VMixFreeverbDesc_t", "m_flWidth", true, value);
}

float GVMixFreeverbDesc_t::GetLateReflections() const {
    return GetSchemaValue<float>(m_ptr, "VMixFreeverbDesc_t", "m_flLateReflections");
}

void GVMixFreeverbDesc_t::SetLateReflections(float value) {
    SetSchemaValue(m_ptr, "VMixFreeverbDesc_t", "m_flLateReflections", true, value);
}

std::string GVMixFreeverbDesc_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVMixFreeverbDesc_t::IsValid() {
    return (m_ptr != nullptr);
}

GCCurrentVelocityMetricEvaluator::GCCurrentVelocityMetricEvaluator(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCCurrentVelocityMetricEvaluator::GCCurrentVelocityMetricEvaluator(void *ptr) {
    m_ptr = ptr;
}

std::string GCCurrentVelocityMetricEvaluator::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCCurrentVelocityMetricEvaluator::IsValid() {
    return (m_ptr != nullptr);
}

GCVoxelVisibility::GCVoxelVisibility(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCVoxelVisibility::GCVoxelVisibility(void *ptr) {
    m_ptr = ptr;
}

uint32_t GCVoxelVisibility::GetBaseClusterCount() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CVoxelVisibility", "m_nBaseClusterCount");
}

void GCVoxelVisibility::SetBaseClusterCount(uint32_t value) {
    SetSchemaValue(m_ptr, "CVoxelVisibility", "m_nBaseClusterCount", false, value);
}

uint32_t GCVoxelVisibility::GetPVSBytesPerCluster() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CVoxelVisibility", "m_nPVSBytesPerCluster");
}

void GCVoxelVisibility::SetPVSBytesPerCluster(uint32_t value) {
    SetSchemaValue(m_ptr, "CVoxelVisibility", "m_nPVSBytesPerCluster", false, value);
}

Vector GCVoxelVisibility::GetMinBounds() const {
    return GetSchemaValue<Vector>(m_ptr, "CVoxelVisibility", "m_vMinBounds");
}

void GCVoxelVisibility::SetMinBounds(Vector value) {
    SetSchemaValue(m_ptr, "CVoxelVisibility", "m_vMinBounds", false, value);
}

Vector GCVoxelVisibility::GetMaxBounds() const {
    return GetSchemaValue<Vector>(m_ptr, "CVoxelVisibility", "m_vMaxBounds");
}

void GCVoxelVisibility::SetMaxBounds(Vector value) {
    SetSchemaValue(m_ptr, "CVoxelVisibility", "m_vMaxBounds", false, value);
}

float GCVoxelVisibility::GetGridSize() const {
    return GetSchemaValue<float>(m_ptr, "CVoxelVisibility", "m_flGridSize");
}

void GCVoxelVisibility::SetGridSize(float value) {
    SetSchemaValue(m_ptr, "CVoxelVisibility", "m_flGridSize", false, value);
}

uint32_t GCVoxelVisibility::GetSkyVisibilityCluster() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CVoxelVisibility", "m_nSkyVisibilityCluster");
}

void GCVoxelVisibility::SetSkyVisibilityCluster(uint32_t value) {
    SetSchemaValue(m_ptr, "CVoxelVisibility", "m_nSkyVisibilityCluster", false, value);
}

uint32_t GCVoxelVisibility::GetSunVisibilityCluster() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CVoxelVisibility", "m_nSunVisibilityCluster");
}

void GCVoxelVisibility::SetSunVisibilityCluster(uint32_t value) {
    SetSchemaValue(m_ptr, "CVoxelVisibility", "m_nSunVisibilityCluster", false, value);
}

GVoxelVisBlockOffset_t GCVoxelVisibility::GetNodeBlock() const {
    return GetSchemaValue<GVoxelVisBlockOffset_t>(m_ptr, "CVoxelVisibility", "m_NodeBlock");
}

void GCVoxelVisibility::SetNodeBlock(GVoxelVisBlockOffset_t value) {
    SetSchemaValue(m_ptr, "CVoxelVisibility", "m_NodeBlock", false, value);
}

GVoxelVisBlockOffset_t GCVoxelVisibility::GetRegionBlock() const {
    return GetSchemaValue<GVoxelVisBlockOffset_t>(m_ptr, "CVoxelVisibility", "m_RegionBlock");
}

void GCVoxelVisibility::SetRegionBlock(GVoxelVisBlockOffset_t value) {
    SetSchemaValue(m_ptr, "CVoxelVisibility", "m_RegionBlock", false, value);
}

GVoxelVisBlockOffset_t GCVoxelVisibility::GetEnclosedClusterListBlock() const {
    return GetSchemaValue<GVoxelVisBlockOffset_t>(m_ptr, "CVoxelVisibility", "m_EnclosedClusterListBlock");
}

void GCVoxelVisibility::SetEnclosedClusterListBlock(GVoxelVisBlockOffset_t value) {
    SetSchemaValue(m_ptr, "CVoxelVisibility", "m_EnclosedClusterListBlock", false, value);
}

GVoxelVisBlockOffset_t GCVoxelVisibility::GetEnclosedClustersBlock() const {
    return GetSchemaValue<GVoxelVisBlockOffset_t>(m_ptr, "CVoxelVisibility", "m_EnclosedClustersBlock");
}

void GCVoxelVisibility::SetEnclosedClustersBlock(GVoxelVisBlockOffset_t value) {
    SetSchemaValue(m_ptr, "CVoxelVisibility", "m_EnclosedClustersBlock", false, value);
}

GVoxelVisBlockOffset_t GCVoxelVisibility::GetMasksBlock() const {
    return GetSchemaValue<GVoxelVisBlockOffset_t>(m_ptr, "CVoxelVisibility", "m_MasksBlock");
}

void GCVoxelVisibility::SetMasksBlock(GVoxelVisBlockOffset_t value) {
    SetSchemaValue(m_ptr, "CVoxelVisibility", "m_MasksBlock", false, value);
}

GVoxelVisBlockOffset_t GCVoxelVisibility::GetVisBlocks() const {
    return GetSchemaValue<GVoxelVisBlockOffset_t>(m_ptr, "CVoxelVisibility", "m_nVisBlocks");
}

void GCVoxelVisibility::SetVisBlocks(GVoxelVisBlockOffset_t value) {
    SetSchemaValue(m_ptr, "CVoxelVisibility", "m_nVisBlocks", false, value);
}

std::string GCVoxelVisibility::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCVoxelVisibility::IsValid() {
    return (m_ptr != nullptr);
}

GSelectedEditItemInfo_t::GSelectedEditItemInfo_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GSelectedEditItemInfo_t::GSelectedEditItemInfo_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<GSosEditItemInfo_t> GSelectedEditItemInfo_t::GetEditItems() const {
    CUtlVector<GSosEditItemInfo_t>* vec = GetSchemaValue<CUtlVector<GSosEditItemInfo_t>*>(m_ptr, "SelectedEditItemInfo_t", "m_EditItems"); std::vector<GSosEditItemInfo_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GSelectedEditItemInfo_t::SetEditItems(std::vector<GSosEditItemInfo_t> value) {
    SetSchemaValueCUtlVector<GSosEditItemInfo_t>(m_ptr, "SelectedEditItemInfo_t", "m_EditItems", true, value);
}

std::string GSelectedEditItemInfo_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GSelectedEditItemInfo_t::IsValid() {
    return (m_ptr != nullptr);
}

GChainToSolveData_t::GChainToSolveData_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GChainToSolveData_t::GChainToSolveData_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GChainToSolveData_t::GetChainIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "ChainToSolveData_t", "m_nChainIndex");
}

void GChainToSolveData_t::SetChainIndex(int32_t value) {
    SetSchemaValue(m_ptr, "ChainToSolveData_t", "m_nChainIndex", true, value);
}

GIKSolverSettings_t GChainToSolveData_t::GetSolverSettings() const {
    return GetSchemaValue<GIKSolverSettings_t>(m_ptr, "ChainToSolveData_t", "m_SolverSettings");
}

void GChainToSolveData_t::SetSolverSettings(GIKSolverSettings_t value) {
    SetSchemaValue(m_ptr, "ChainToSolveData_t", "m_SolverSettings", true, value);
}

GIKTargetSettings_t GChainToSolveData_t::GetTargetSettings() const {
    return GetSchemaValue<GIKTargetSettings_t>(m_ptr, "ChainToSolveData_t", "m_TargetSettings");
}

void GChainToSolveData_t::SetTargetSettings(GIKTargetSettings_t value) {
    SetSchemaValue(m_ptr, "ChainToSolveData_t", "m_TargetSettings", true, value);
}

SolveIKChainAnimNodeDebugSetting GChainToSolveData_t::GetDebugSetting() const {
    return GetSchemaValue<SolveIKChainAnimNodeDebugSetting>(m_ptr, "ChainToSolveData_t", "m_DebugSetting");
}

void GChainToSolveData_t::SetDebugSetting(SolveIKChainAnimNodeDebugSetting value) {
    SetSchemaValue(m_ptr, "ChainToSolveData_t", "m_DebugSetting", true, value);
}

float GChainToSolveData_t::GetDebugNormalizedValue() const {
    return GetSchemaValue<float>(m_ptr, "ChainToSolveData_t", "m_flDebugNormalizedValue");
}

void GChainToSolveData_t::SetDebugNormalizedValue(float value) {
    SetSchemaValue(m_ptr, "ChainToSolveData_t", "m_flDebugNormalizedValue", true, value);
}

Vector GChainToSolveData_t::GetDebugOffset() const {
    return GetSchemaValue<Vector>(m_ptr, "ChainToSolveData_t", "m_vDebugOffset");
}

void GChainToSolveData_t::SetDebugOffset(Vector value) {
    SetSchemaValue(m_ptr, "ChainToSolveData_t", "m_vDebugOffset", true, value);
}

std::string GChainToSolveData_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GChainToSolveData_t::IsValid() {
    return (m_ptr != nullptr);
}

GCGlowSprite::GCGlowSprite(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCGlowSprite::GCGlowSprite(void *ptr) {
    m_ptr = ptr;
}

Vector GCGlowSprite::GetColor() const {
    return GetSchemaValue<Vector>(m_ptr, "CGlowSprite", "m_vColor");
}

void GCGlowSprite::SetColor(Vector value) {
    SetSchemaValue(m_ptr, "CGlowSprite", "m_vColor", false, value);
}

float GCGlowSprite::GetHorzSize() const {
    return GetSchemaValue<float>(m_ptr, "CGlowSprite", "m_flHorzSize");
}

void GCGlowSprite::SetHorzSize(float value) {
    SetSchemaValue(m_ptr, "CGlowSprite", "m_flHorzSize", false, value);
}

float GCGlowSprite::GetVertSize() const {
    return GetSchemaValue<float>(m_ptr, "CGlowSprite", "m_flVertSize");
}

void GCGlowSprite::SetVertSize(float value) {
    SetSchemaValue(m_ptr, "CGlowSprite", "m_flVertSize", false, value);
}

std::string GCGlowSprite::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCGlowSprite::IsValid() {
    return (m_ptr != nullptr);
}

GCSSDSMsg_PostLayer::GCSSDSMsg_PostLayer(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSSDSMsg_PostLayer::GCSSDSMsg_PostLayer(void *ptr) {
    m_ptr = ptr;
}

std::string GCSSDSMsg_PostLayer::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSSDSMsg_PostLayer::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimBone::GCAnimBone(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimBone::GCAnimBone(void *ptr) {
    m_ptr = ptr;
}

CBufferString GCAnimBone::GetName() const {
    return GetSchemaValue<CBufferString>(m_ptr, "CAnimBone", "m_name");
}

void GCAnimBone::SetName(CBufferString value) {
    SetSchemaValue(m_ptr, "CAnimBone", "m_name", false, value);
}

int32_t GCAnimBone::GetParent() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimBone", "m_parent");
}

void GCAnimBone::SetParent(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimBone", "m_parent", false, value);
}

Vector GCAnimBone::GetPos() const {
    return GetSchemaValue<Vector>(m_ptr, "CAnimBone", "m_pos");
}

void GCAnimBone::SetPos(Vector value) {
    SetSchemaValue(m_ptr, "CAnimBone", "m_pos", false, value);
}

float GCAnimBone::GetScale() const {
    return GetSchemaValue<float>(m_ptr, "CAnimBone", "m_scale");
}

void GCAnimBone::SetScale(float value) {
    SetSchemaValue(m_ptr, "CAnimBone", "m_scale", false, value);
}

int32_t GCAnimBone::GetFlags() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimBone", "m_flags");
}

void GCAnimBone::SetFlags(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimBone", "m_flags", false, value);
}

std::string GCAnimBone::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimBone::IsValid() {
    return (m_ptr != nullptr);
}

GVPhysXConstraint2_t::GVPhysXConstraint2_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVPhysXConstraint2_t::GVPhysXConstraint2_t(void *ptr) {
    m_ptr = ptr;
}

uint32_t GVPhysXConstraint2_t::GetFlags() const {
    return GetSchemaValue<uint32_t>(m_ptr, "VPhysXConstraint2_t", "m_nFlags");
}

void GVPhysXConstraint2_t::SetFlags(uint32_t value) {
    SetSchemaValue(m_ptr, "VPhysXConstraint2_t", "m_nFlags", true, value);
}

uint16_t GVPhysXConstraint2_t::GetParent() const {
    return GetSchemaValue<uint16_t>(m_ptr, "VPhysXConstraint2_t", "m_nParent");
}

void GVPhysXConstraint2_t::SetParent(uint16_t value) {
    SetSchemaValue(m_ptr, "VPhysXConstraint2_t", "m_nParent", true, value);
}

uint16_t GVPhysXConstraint2_t::GetChild() const {
    return GetSchemaValue<uint16_t>(m_ptr, "VPhysXConstraint2_t", "m_nChild");
}

void GVPhysXConstraint2_t::SetChild(uint16_t value) {
    SetSchemaValue(m_ptr, "VPhysXConstraint2_t", "m_nChild", true, value);
}

GVPhysXConstraintParams_t GVPhysXConstraint2_t::GetParams() const {
    return GetSchemaValue<GVPhysXConstraintParams_t>(m_ptr, "VPhysXConstraint2_t", "m_params");
}

void GVPhysXConstraint2_t::SetParams(GVPhysXConstraintParams_t value) {
    SetSchemaValue(m_ptr, "VPhysXConstraint2_t", "m_params", true, value);
}

std::string GVPhysXConstraint2_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVPhysXConstraint2_t::IsValid() {
    return (m_ptr != nullptr);
}

GCEditableMotionGraph::GCEditableMotionGraph(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCEditableMotionGraph::GCEditableMotionGraph(void *ptr) {
    m_ptr = ptr;
}

std::string GCEditableMotionGraph::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCEditableMotionGraph::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimKeyData::GCAnimKeyData(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimKeyData::GCAnimKeyData(void *ptr) {
    m_ptr = ptr;
}

CBufferString GCAnimKeyData::GetName() const {
    return GetSchemaValue<CBufferString>(m_ptr, "CAnimKeyData", "m_name");
}

void GCAnimKeyData::SetName(CBufferString value) {
    SetSchemaValue(m_ptr, "CAnimKeyData", "m_name", false, value);
}

std::vector<GCAnimBone> GCAnimKeyData::GetBoneArray() const {
    CUtlVector<GCAnimBone>* vec = GetSchemaValue<CUtlVector<GCAnimBone>*>(m_ptr, "CAnimKeyData", "m_boneArray"); std::vector<GCAnimBone> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimKeyData::SetBoneArray(std::vector<GCAnimBone> value) {
    SetSchemaValueCUtlVector<GCAnimBone>(m_ptr, "CAnimKeyData", "m_boneArray", false, value);
}

std::vector<GCAnimUser> GCAnimKeyData::GetUserArray() const {
    CUtlVector<GCAnimUser>* vec = GetSchemaValue<CUtlVector<GCAnimUser>*>(m_ptr, "CAnimKeyData", "m_userArray"); std::vector<GCAnimUser> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimKeyData::SetUserArray(std::vector<GCAnimUser> value) {
    SetSchemaValueCUtlVector<GCAnimUser>(m_ptr, "CAnimKeyData", "m_userArray", false, value);
}

std::vector<CBufferString> GCAnimKeyData::GetMorphArray() const {
    CUtlVector<CBufferString>* vec = GetSchemaValue<CUtlVector<CBufferString>*>(m_ptr, "CAnimKeyData", "m_morphArray"); std::vector<CBufferString> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimKeyData::SetMorphArray(std::vector<CBufferString> value) {
    SetSchemaValueCUtlVector<CBufferString>(m_ptr, "CAnimKeyData", "m_morphArray", false, value);
}

int32_t GCAnimKeyData::GetChannelElements() const {
    return GetSchemaValue<int32_t>(m_ptr, "CAnimKeyData", "m_nChannelElements");
}

void GCAnimKeyData::SetChannelElements(int32_t value) {
    SetSchemaValue(m_ptr, "CAnimKeyData", "m_nChannelElements", false, value);
}

std::vector<GCAnimDataChannelDesc> GCAnimKeyData::GetDataChannelArray() const {
    CUtlVector<GCAnimDataChannelDesc>* vec = GetSchemaValue<CUtlVector<GCAnimDataChannelDesc>*>(m_ptr, "CAnimKeyData", "m_dataChannelArray"); std::vector<GCAnimDataChannelDesc> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimKeyData::SetDataChannelArray(std::vector<GCAnimDataChannelDesc> value) {
    SetSchemaValueCUtlVector<GCAnimDataChannelDesc>(m_ptr, "CAnimKeyData", "m_dataChannelArray", false, value);
}

std::string GCAnimKeyData::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimKeyData::IsValid() {
    return (m_ptr != nullptr);
}

GEventPreDataUpdate_t::GEventPreDataUpdate_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEventPreDataUpdate_t::GEventPreDataUpdate_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GEventPreDataUpdate_t::GetCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "EventPreDataUpdate_t", "m_nCount");
}

void GEventPreDataUpdate_t::SetCount(int32_t value) {
    SetSchemaValue(m_ptr, "EventPreDataUpdate_t", "m_nCount", true, value);
}

std::string GEventPreDataUpdate_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEventPreDataUpdate_t::IsValid() {
    return (m_ptr != nullptr);
}

GWorld_t::GWorld_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GWorld_t::GWorld_t(void *ptr) {
    m_ptr = ptr;
}

GWorldBuilderParams_t GWorld_t::GetBuilderParams() const {
    return GetSchemaValue<GWorldBuilderParams_t>(m_ptr, "World_t", "m_builderParams");
}

void GWorld_t::SetBuilderParams(GWorldBuilderParams_t value) {
    SetSchemaValue(m_ptr, "World_t", "m_builderParams", true, value);
}

std::vector<GNodeData_t> GWorld_t::GetWorldNodes() const {
    CUtlVector<GNodeData_t>* vec = GetSchemaValue<CUtlVector<GNodeData_t>*>(m_ptr, "World_t", "m_worldNodes"); std::vector<GNodeData_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GWorld_t::SetWorldNodes(std::vector<GNodeData_t> value) {
    SetSchemaValueCUtlVector<GNodeData_t>(m_ptr, "World_t", "m_worldNodes", true, value);
}

GBakedLightingInfo_t GWorld_t::GetWorldLightingInfo() const {
    return GetSchemaValue<GBakedLightingInfo_t>(m_ptr, "World_t", "m_worldLightingInfo");
}

void GWorld_t::SetWorldLightingInfo(GBakedLightingInfo_t value) {
    SetSchemaValue(m_ptr, "World_t", "m_worldLightingInfo", true, value);
}

std::string GWorld_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GWorld_t::IsValid() {
    return (m_ptr != nullptr);
}

GCVectorAnimParameter::GCVectorAnimParameter(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCVectorAnimParameter::GCVectorAnimParameter(void *ptr) {
    m_ptr = ptr;
}

Vector GCVectorAnimParameter::GetDefaultValue() const {
    return GetSchemaValue<Vector>(m_ptr, "CVectorAnimParameter", "m_defaultValue");
}

void GCVectorAnimParameter::SetDefaultValue(Vector value) {
    SetSchemaValue(m_ptr, "CVectorAnimParameter", "m_defaultValue", false, value);
}

bool GCVectorAnimParameter::GetInterpolate() const {
    return GetSchemaValue<bool>(m_ptr, "CVectorAnimParameter", "m_bInterpolate");
}

void GCVectorAnimParameter::SetInterpolate(bool value) {
    SetSchemaValue(m_ptr, "CVectorAnimParameter", "m_bInterpolate", false, value);
}

std::string GCVectorAnimParameter::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCVectorAnimParameter::IsValid() {
    return (m_ptr != nullptr);
}

GCNmControlParameterBoolNode::GCNmControlParameterBoolNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmControlParameterBoolNode::GCNmControlParameterBoolNode(void *ptr) {
    m_ptr = ptr;
}

std::string GCNmControlParameterBoolNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmControlParameterBoolNode::IsValid() {
    return (m_ptr != nullptr);
}

GCStateMachineUpdateNode::GCStateMachineUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCStateMachineUpdateNode::GCStateMachineUpdateNode(void *ptr) {
    m_ptr = ptr;
}

GCAnimStateMachineUpdater GCStateMachineUpdateNode::GetStateMachine() const {
    return GetSchemaValue<GCAnimStateMachineUpdater>(m_ptr, "CStateMachineUpdateNode", "m_stateMachine");
}

void GCStateMachineUpdateNode::SetStateMachine(GCAnimStateMachineUpdater value) {
    SetSchemaValue(m_ptr, "CStateMachineUpdateNode", "m_stateMachine", false, value);
}

std::vector<GCStateNodeStateData> GCStateMachineUpdateNode::GetStateData() const {
    CUtlVector<GCStateNodeStateData>* vec = GetSchemaValue<CUtlVector<GCStateNodeStateData>*>(m_ptr, "CStateMachineUpdateNode", "m_stateData"); std::vector<GCStateNodeStateData> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCStateMachineUpdateNode::SetStateData(std::vector<GCStateNodeStateData> value) {
    SetSchemaValueCUtlVector<GCStateNodeStateData>(m_ptr, "CStateMachineUpdateNode", "m_stateData", false, value);
}

std::vector<GCStateNodeTransitionData> GCStateMachineUpdateNode::GetTransitionData() const {
    CUtlVector<GCStateNodeTransitionData>* vec = GetSchemaValue<CUtlVector<GCStateNodeTransitionData>*>(m_ptr, "CStateMachineUpdateNode", "m_transitionData"); std::vector<GCStateNodeTransitionData> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCStateMachineUpdateNode::SetTransitionData(std::vector<GCStateNodeTransitionData> value) {
    SetSchemaValueCUtlVector<GCStateNodeTransitionData>(m_ptr, "CStateMachineUpdateNode", "m_transitionData", false, value);
}

bool GCStateMachineUpdateNode::GetBlockWaningTags() const {
    return GetSchemaValue<bool>(m_ptr, "CStateMachineUpdateNode", "m_bBlockWaningTags");
}

void GCStateMachineUpdateNode::SetBlockWaningTags(bool value) {
    SetSchemaValue(m_ptr, "CStateMachineUpdateNode", "m_bBlockWaningTags", false, value);
}

bool GCStateMachineUpdateNode::GetLockStateWhenWaning() const {
    return GetSchemaValue<bool>(m_ptr, "CStateMachineUpdateNode", "m_bLockStateWhenWaning");
}

void GCStateMachineUpdateNode::SetLockStateWhenWaning(bool value) {
    SetSchemaValue(m_ptr, "CStateMachineUpdateNode", "m_bLockStateWhenWaning", false, value);
}

std::string GCStateMachineUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCStateMachineUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GCHitBoxSet::GCHitBoxSet(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCHitBoxSet::GCHitBoxSet(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCHitBoxSet::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CHitBoxSet", "m_name");
}

void GCHitBoxSet::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "CHitBoxSet", "m_name", false, value);
}

uint32_t GCHitBoxSet::GetNameHash() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CHitBoxSet", "m_nNameHash");
}

void GCHitBoxSet::SetNameHash(uint32_t value) {
    SetSchemaValue(m_ptr, "CHitBoxSet", "m_nNameHash", false, value);
}

std::vector<GCHitBox> GCHitBoxSet::GetHitBoxes() const {
    CUtlVector<GCHitBox>* vec = GetSchemaValue<CUtlVector<GCHitBox>*>(m_ptr, "CHitBoxSet", "m_HitBoxes"); std::vector<GCHitBox> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCHitBoxSet::SetHitBoxes(std::vector<GCHitBox> value) {
    SetSchemaValueCUtlVector<GCHitBox>(m_ptr, "CHitBoxSet", "m_HitBoxes", false, value);
}

CUtlString GCHitBoxSet::GetSourceFilename() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CHitBoxSet", "m_SourceFilename");
}

void GCHitBoxSet::SetSourceFilename(CUtlString value) {
    SetSchemaValue(m_ptr, "CHitBoxSet", "m_SourceFilename", false, value);
}

std::string GCHitBoxSet::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCHitBoxSet::IsValid() {
    return (m_ptr != nullptr);
}

GCExampleSchemaVData_PolymorphicDerivedB::GCExampleSchemaVData_PolymorphicDerivedB(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCExampleSchemaVData_PolymorphicDerivedB::GCExampleSchemaVData_PolymorphicDerivedB(void *ptr) {
    m_ptr = ptr;
}

int32_t GCExampleSchemaVData_PolymorphicDerivedB::GetDerivedB() const {
    return GetSchemaValue<int32_t>(m_ptr, "CExampleSchemaVData_PolymorphicDerivedB", "m_nDerivedB");
}

void GCExampleSchemaVData_PolymorphicDerivedB::SetDerivedB(int32_t value) {
    SetSchemaValue(m_ptr, "CExampleSchemaVData_PolymorphicDerivedB", "m_nDerivedB", false, value);
}

std::string GCExampleSchemaVData_PolymorphicDerivedB::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCExampleSchemaVData_PolymorphicDerivedB::IsValid() {
    return (m_ptr != nullptr);
}

GFeSimdTri_t::GFeSimdTri_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeSimdTri_t::GFeSimdTri_t(void *ptr) {
    m_ptr = ptr;
}

float GFeSimdTri_t::GetW1() const {
    return GetSchemaValue<float>(m_ptr, "FeSimdTri_t", "w1");
}

void GFeSimdTri_t::SetW1(float value) {
    SetSchemaValue(m_ptr, "FeSimdTri_t", "w1", true, value);
}

float GFeSimdTri_t::GetW2() const {
    return GetSchemaValue<float>(m_ptr, "FeSimdTri_t", "w2");
}

void GFeSimdTri_t::SetW2(float value) {
    SetSchemaValue(m_ptr, "FeSimdTri_t", "w2", true, value);
}

float GFeSimdTri_t::Get1x() const {
    return GetSchemaValue<float>(m_ptr, "FeSimdTri_t", "v1x");
}

void GFeSimdTri_t::Set1x(float value) {
    SetSchemaValue(m_ptr, "FeSimdTri_t", "v1x", true, value);
}

std::string GFeSimdTri_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeSimdTri_t::IsValid() {
    return (m_ptr != nullptr);
}

GPostProcessingResource_t::GPostProcessingResource_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GPostProcessingResource_t::GPostProcessingResource_t(void *ptr) {
    m_ptr = ptr;
}

bool GPostProcessingResource_t::GetHasTonemapParams() const {
    return GetSchemaValue<bool>(m_ptr, "PostProcessingResource_t", "m_bHasTonemapParams");
}

void GPostProcessingResource_t::SetHasTonemapParams(bool value) {
    SetSchemaValue(m_ptr, "PostProcessingResource_t", "m_bHasTonemapParams", true, value);
}

GPostProcessingTonemapParameters_t GPostProcessingResource_t::GetToneMapParams() const {
    return GetSchemaValue<GPostProcessingTonemapParameters_t>(m_ptr, "PostProcessingResource_t", "m_toneMapParams");
}

void GPostProcessingResource_t::SetToneMapParams(GPostProcessingTonemapParameters_t value) {
    SetSchemaValue(m_ptr, "PostProcessingResource_t", "m_toneMapParams", true, value);
}

bool GPostProcessingResource_t::GetHasBloomParams() const {
    return GetSchemaValue<bool>(m_ptr, "PostProcessingResource_t", "m_bHasBloomParams");
}

void GPostProcessingResource_t::SetHasBloomParams(bool value) {
    SetSchemaValue(m_ptr, "PostProcessingResource_t", "m_bHasBloomParams", true, value);
}

GPostProcessingBloomParameters_t GPostProcessingResource_t::GetBloomParams() const {
    return GetSchemaValue<GPostProcessingBloomParameters_t>(m_ptr, "PostProcessingResource_t", "m_bloomParams");
}

void GPostProcessingResource_t::SetBloomParams(GPostProcessingBloomParameters_t value) {
    SetSchemaValue(m_ptr, "PostProcessingResource_t", "m_bloomParams", true, value);
}

bool GPostProcessingResource_t::GetHasVignetteParams() const {
    return GetSchemaValue<bool>(m_ptr, "PostProcessingResource_t", "m_bHasVignetteParams");
}

void GPostProcessingResource_t::SetHasVignetteParams(bool value) {
    SetSchemaValue(m_ptr, "PostProcessingResource_t", "m_bHasVignetteParams", true, value);
}

GPostProcessingVignetteParameters_t GPostProcessingResource_t::GetVignetteParams() const {
    return GetSchemaValue<GPostProcessingVignetteParameters_t>(m_ptr, "PostProcessingResource_t", "m_vignetteParams");
}

void GPostProcessingResource_t::SetVignetteParams(GPostProcessingVignetteParameters_t value) {
    SetSchemaValue(m_ptr, "PostProcessingResource_t", "m_vignetteParams", true, value);
}

bool GPostProcessingResource_t::GetHasLocalContrastParams() const {
    return GetSchemaValue<bool>(m_ptr, "PostProcessingResource_t", "m_bHasLocalContrastParams");
}

void GPostProcessingResource_t::SetHasLocalContrastParams(bool value) {
    SetSchemaValue(m_ptr, "PostProcessingResource_t", "m_bHasLocalContrastParams", true, value);
}

GPostProcessingLocalContrastParameters_t GPostProcessingResource_t::GetLocalConstrastParams() const {
    return GetSchemaValue<GPostProcessingLocalContrastParameters_t>(m_ptr, "PostProcessingResource_t", "m_localConstrastParams");
}

void GPostProcessingResource_t::SetLocalConstrastParams(GPostProcessingLocalContrastParameters_t value) {
    SetSchemaValue(m_ptr, "PostProcessingResource_t", "m_localConstrastParams", true, value);
}

int32_t GPostProcessingResource_t::GetColorCorrectionVolumeDim() const {
    return GetSchemaValue<int32_t>(m_ptr, "PostProcessingResource_t", "m_nColorCorrectionVolumeDim");
}

void GPostProcessingResource_t::SetColorCorrectionVolumeDim(int32_t value) {
    SetSchemaValue(m_ptr, "PostProcessingResource_t", "m_nColorCorrectionVolumeDim", true, value);
}

bool GPostProcessingResource_t::GetHasColorCorrection() const {
    return GetSchemaValue<bool>(m_ptr, "PostProcessingResource_t", "m_bHasColorCorrection");
}

void GPostProcessingResource_t::SetHasColorCorrection(bool value) {
    SetSchemaValue(m_ptr, "PostProcessingResource_t", "m_bHasColorCorrection", true, value);
}

std::string GPostProcessingResource_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GPostProcessingResource_t::IsValid() {
    return (m_ptr != nullptr);
}

GCNmStateNode::GCNmStateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmStateNode::GCNmStateNode(void *ptr) {
    m_ptr = ptr;
}

int16_t GCNmStateNode::GetChildNodeIdx() const {
    return GetSchemaValue<int16_t>(m_ptr, "CNmStateNode", "m_nChildNodeIdx");
}

void GCNmStateNode::SetChildNodeIdx(int16_t value) {
    SetSchemaValue(m_ptr, "CNmStateNode", "m_nChildNodeIdx", false, value);
}

int16_t GCNmStateNode::GetLayerWeightNodeIdx() const {
    return GetSchemaValue<int16_t>(m_ptr, "CNmStateNode", "m_nLayerWeightNodeIdx");
}

void GCNmStateNode::SetLayerWeightNodeIdx(int16_t value) {
    SetSchemaValue(m_ptr, "CNmStateNode", "m_nLayerWeightNodeIdx", false, value);
}

int16_t GCNmStateNode::GetLayerRootMotionWeightNodeIdx() const {
    return GetSchemaValue<int16_t>(m_ptr, "CNmStateNode", "m_nLayerRootMotionWeightNodeIdx");
}

void GCNmStateNode::SetLayerRootMotionWeightNodeIdx(int16_t value) {
    SetSchemaValue(m_ptr, "CNmStateNode", "m_nLayerRootMotionWeightNodeIdx", false, value);
}

int16_t GCNmStateNode::GetLayerBoneMaskNodeIdx() const {
    return GetSchemaValue<int16_t>(m_ptr, "CNmStateNode", "m_nLayerBoneMaskNodeIdx");
}

void GCNmStateNode::SetLayerBoneMaskNodeIdx(int16_t value) {
    SetSchemaValue(m_ptr, "CNmStateNode", "m_nLayerBoneMaskNodeIdx", false, value);
}

bool GCNmStateNode::GetIsOffState() const {
    return GetSchemaValue<bool>(m_ptr, "CNmStateNode", "m_bIsOffState");
}

void GCNmStateNode::SetIsOffState(bool value) {
    SetSchemaValue(m_ptr, "CNmStateNode", "m_bIsOffState", false, value);
}

std::string GCNmStateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmStateNode::IsValid() {
    return (m_ptr != nullptr);
}

GNodeData_t::GNodeData_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GNodeData_t::GNodeData_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GNodeData_t::GetParent() const {
    return GetSchemaValue<int32_t>(m_ptr, "NodeData_t", "m_nParent");
}

void GNodeData_t::SetParent(int32_t value) {
    SetSchemaValue(m_ptr, "NodeData_t", "m_nParent", true, value);
}

Vector GNodeData_t::GetOrigin() const {
    return GetSchemaValue<Vector>(m_ptr, "NodeData_t", "m_vOrigin");
}

void GNodeData_t::SetOrigin(Vector value) {
    SetSchemaValue(m_ptr, "NodeData_t", "m_vOrigin", true, value);
}

Vector GNodeData_t::GetMinBounds() const {
    return GetSchemaValue<Vector>(m_ptr, "NodeData_t", "m_vMinBounds");
}

void GNodeData_t::SetMinBounds(Vector value) {
    SetSchemaValue(m_ptr, "NodeData_t", "m_vMinBounds", true, value);
}

Vector GNodeData_t::GetMaxBounds() const {
    return GetSchemaValue<Vector>(m_ptr, "NodeData_t", "m_vMaxBounds");
}

void GNodeData_t::SetMaxBounds(Vector value) {
    SetSchemaValue(m_ptr, "NodeData_t", "m_vMaxBounds", true, value);
}

float GNodeData_t::GetMinimumDistance() const {
    return GetSchemaValue<float>(m_ptr, "NodeData_t", "m_flMinimumDistance");
}

void GNodeData_t::SetMinimumDistance(float value) {
    SetSchemaValue(m_ptr, "NodeData_t", "m_flMinimumDistance", true, value);
}

std::vector<int32> GNodeData_t::GetChildNodeIndices() const {
    CUtlVector<int32>* vec = GetSchemaValue<CUtlVector<int32>*>(m_ptr, "NodeData_t", "m_ChildNodeIndices"); std::vector<int32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GNodeData_t::SetChildNodeIndices(std::vector<int32> value) {
    SetSchemaValueCUtlVector<int32>(m_ptr, "NodeData_t", "m_ChildNodeIndices", true, value);
}

CUtlString GNodeData_t::GetWorldNodePrefix() const {
    return GetSchemaValue<CUtlString>(m_ptr, "NodeData_t", "m_worldNodePrefix");
}

void GNodeData_t::SetWorldNodePrefix(CUtlString value) {
    SetSchemaValue(m_ptr, "NodeData_t", "m_worldNodePrefix", true, value);
}

std::string GNodeData_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GNodeData_t::IsValid() {
    return (m_ptr != nullptr);
}

GCTaskStatusAnimTag::GCTaskStatusAnimTag(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTaskStatusAnimTag::GCTaskStatusAnimTag(void *ptr) {
    m_ptr = ptr;
}

std::string GCTaskStatusAnimTag::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTaskStatusAnimTag::IsValid() {
    return (m_ptr != nullptr);
}

GCMaterialDrawDescriptor::GCMaterialDrawDescriptor(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMaterialDrawDescriptor::GCMaterialDrawDescriptor(void *ptr) {
    m_ptr = ptr;
}

float GCMaterialDrawDescriptor::GetUvDensity() const {
    return GetSchemaValue<float>(m_ptr, "CMaterialDrawDescriptor", "m_flUvDensity");
}

void GCMaterialDrawDescriptor::SetUvDensity(float value) {
    SetSchemaValue(m_ptr, "CMaterialDrawDescriptor", "m_flUvDensity", false, value);
}

Vector GCMaterialDrawDescriptor::GetTintColor() const {
    return GetSchemaValue<Vector>(m_ptr, "CMaterialDrawDescriptor", "m_vTintColor");
}

void GCMaterialDrawDescriptor::SetTintColor(Vector value) {
    SetSchemaValue(m_ptr, "CMaterialDrawDescriptor", "m_vTintColor", false, value);
}

float GCMaterialDrawDescriptor::GetAlpha() const {
    return GetSchemaValue<float>(m_ptr, "CMaterialDrawDescriptor", "m_flAlpha");
}

void GCMaterialDrawDescriptor::SetAlpha(float value) {
    SetSchemaValue(m_ptr, "CMaterialDrawDescriptor", "m_flAlpha", false, value);
}

uint32_t GCMaterialDrawDescriptor::GetFirstMeshlet() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CMaterialDrawDescriptor", "m_nFirstMeshlet");
}

void GCMaterialDrawDescriptor::SetFirstMeshlet(uint32_t value) {
    SetSchemaValue(m_ptr, "CMaterialDrawDescriptor", "m_nFirstMeshlet", false, value);
}

uint16_t GCMaterialDrawDescriptor::GetNumMeshlets() const {
    return GetSchemaValue<uint16_t>(m_ptr, "CMaterialDrawDescriptor", "m_nNumMeshlets");
}

void GCMaterialDrawDescriptor::SetNumMeshlets(uint16_t value) {
    SetSchemaValue(m_ptr, "CMaterialDrawDescriptor", "m_nNumMeshlets", false, value);
}

RenderPrimitiveType_t GCMaterialDrawDescriptor::GetPrimitiveType() const {
    return GetSchemaValue<RenderPrimitiveType_t>(m_ptr, "CMaterialDrawDescriptor", "m_nPrimitiveType");
}

void GCMaterialDrawDescriptor::SetPrimitiveType(RenderPrimitiveType_t value) {
    SetSchemaValue(m_ptr, "CMaterialDrawDescriptor", "m_nPrimitiveType", false, value);
}

int32_t GCMaterialDrawDescriptor::GetBaseVertex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CMaterialDrawDescriptor", "m_nBaseVertex");
}

void GCMaterialDrawDescriptor::SetBaseVertex(int32_t value) {
    SetSchemaValue(m_ptr, "CMaterialDrawDescriptor", "m_nBaseVertex", false, value);
}

int32_t GCMaterialDrawDescriptor::GetVertexCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CMaterialDrawDescriptor", "m_nVertexCount");
}

void GCMaterialDrawDescriptor::SetVertexCount(int32_t value) {
    SetSchemaValue(m_ptr, "CMaterialDrawDescriptor", "m_nVertexCount", false, value);
}

int32_t GCMaterialDrawDescriptor::GetStartIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CMaterialDrawDescriptor", "m_nStartIndex");
}

void GCMaterialDrawDescriptor::SetStartIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CMaterialDrawDescriptor", "m_nStartIndex", false, value);
}

int32_t GCMaterialDrawDescriptor::GetIndexCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CMaterialDrawDescriptor", "m_nIndexCount");
}

void GCMaterialDrawDescriptor::SetIndexCount(int32_t value) {
    SetSchemaValue(m_ptr, "CMaterialDrawDescriptor", "m_nIndexCount", false, value);
}

GCRenderBufferBinding GCMaterialDrawDescriptor::GetIndexBuffer() const {
    return GetSchemaValue<GCRenderBufferBinding>(m_ptr, "CMaterialDrawDescriptor", "m_indexBuffer");
}

void GCMaterialDrawDescriptor::SetIndexBuffer(GCRenderBufferBinding value) {
    SetSchemaValue(m_ptr, "CMaterialDrawDescriptor", "m_indexBuffer", false, value);
}

std::string GCMaterialDrawDescriptor::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMaterialDrawDescriptor::IsValid() {
    return (m_ptr != nullptr);
}

GEventServerProcessNetworking_t::GEventServerProcessNetworking_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEventServerProcessNetworking_t::GEventServerProcessNetworking_t(void *ptr) {
    m_ptr = ptr;
}

std::string GEventServerProcessNetworking_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEventServerProcessNetworking_t::IsValid() {
    return (m_ptr != nullptr);
}

GCInterpolatedValue::GCInterpolatedValue(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCInterpolatedValue::GCInterpolatedValue(void *ptr) {
    m_ptr = ptr;
}

float GCInterpolatedValue::GetStartTime() const {
    return GetSchemaValue<float>(m_ptr, "CInterpolatedValue", "m_flStartTime");
}

void GCInterpolatedValue::SetStartTime(float value) {
    SetSchemaValue(m_ptr, "CInterpolatedValue", "m_flStartTime", false, value);
}

float GCInterpolatedValue::GetEndTime() const {
    return GetSchemaValue<float>(m_ptr, "CInterpolatedValue", "m_flEndTime");
}

void GCInterpolatedValue::SetEndTime(float value) {
    SetSchemaValue(m_ptr, "CInterpolatedValue", "m_flEndTime", false, value);
}

float GCInterpolatedValue::GetStartValue() const {
    return GetSchemaValue<float>(m_ptr, "CInterpolatedValue", "m_flStartValue");
}

void GCInterpolatedValue::SetStartValue(float value) {
    SetSchemaValue(m_ptr, "CInterpolatedValue", "m_flStartValue", false, value);
}

float GCInterpolatedValue::GetEndValue() const {
    return GetSchemaValue<float>(m_ptr, "CInterpolatedValue", "m_flEndValue");
}

void GCInterpolatedValue::SetEndValue(float value) {
    SetSchemaValue(m_ptr, "CInterpolatedValue", "m_flEndValue", false, value);
}

int32_t GCInterpolatedValue::GetInterpType() const {
    return GetSchemaValue<int32_t>(m_ptr, "CInterpolatedValue", "m_nInterpType");
}

void GCInterpolatedValue::SetInterpType(int32_t value) {
    SetSchemaValue(m_ptr, "CInterpolatedValue", "m_nInterpType", false, value);
}

std::string GCInterpolatedValue::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCInterpolatedValue::IsValid() {
    return (m_ptr != nullptr);
}

GCMotionGraphUpdateNode::GCMotionGraphUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCMotionGraphUpdateNode::GCMotionGraphUpdateNode(void *ptr) {
    m_ptr = ptr;
}

std::string GCMotionGraphUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCMotionGraphUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GCLookAtUpdateNode::GCLookAtUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCLookAtUpdateNode::GCLookAtUpdateNode(void *ptr) {
    m_ptr = ptr;
}

GLookAtOpFixedSettings_t GCLookAtUpdateNode::GetOpFixedSettings() const {
    return GetSchemaValue<GLookAtOpFixedSettings_t>(m_ptr, "CLookAtUpdateNode", "m_opFixedSettings");
}

void GCLookAtUpdateNode::SetOpFixedSettings(GLookAtOpFixedSettings_t value) {
    SetSchemaValue(m_ptr, "CLookAtUpdateNode", "m_opFixedSettings", false, value);
}

AnimVectorSource GCLookAtUpdateNode::GetTarget() const {
    return GetSchemaValue<AnimVectorSource>(m_ptr, "CLookAtUpdateNode", "m_target");
}

void GCLookAtUpdateNode::SetTarget(AnimVectorSource value) {
    SetSchemaValue(m_ptr, "CLookAtUpdateNode", "m_target", false, value);
}

GCAnimParamHandle GCLookAtUpdateNode::GetParamIndex() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CLookAtUpdateNode", "m_paramIndex");
}

void GCLookAtUpdateNode::SetParamIndex(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CLookAtUpdateNode", "m_paramIndex", false, value);
}

GCAnimParamHandle GCLookAtUpdateNode::GetWeightParamIndex() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CLookAtUpdateNode", "m_weightParamIndex");
}

void GCLookAtUpdateNode::SetWeightParamIndex(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CLookAtUpdateNode", "m_weightParamIndex", false, value);
}

bool GCLookAtUpdateNode::GetResetChild() const {
    return GetSchemaValue<bool>(m_ptr, "CLookAtUpdateNode", "m_bResetChild");
}

void GCLookAtUpdateNode::SetResetChild(bool value) {
    SetSchemaValue(m_ptr, "CLookAtUpdateNode", "m_bResetChild", false, value);
}

bool GCLookAtUpdateNode::GetLockWhenWaning() const {
    return GetSchemaValue<bool>(m_ptr, "CLookAtUpdateNode", "m_bLockWhenWaning");
}

void GCLookAtUpdateNode::SetLockWhenWaning(bool value) {
    SetSchemaValue(m_ptr, "CLookAtUpdateNode", "m_bLockWhenWaning", false, value);
}

std::string GCLookAtUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCLookAtUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GCFlexController::GCFlexController(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFlexController::GCFlexController(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCFlexController::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CFlexController", "m_szName");
}

void GCFlexController::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "CFlexController", "m_szName", false, value);
}

CUtlString GCFlexController::GetType() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CFlexController", "m_szType");
}

void GCFlexController::SetType(CUtlString value) {
    SetSchemaValue(m_ptr, "CFlexController", "m_szType", false, value);
}

float GCFlexController::GetMin() const {
    return GetSchemaValue<float>(m_ptr, "CFlexController", "min");
}

void GCFlexController::SetMin(float value) {
    SetSchemaValue(m_ptr, "CFlexController", "min", false, value);
}

float GCFlexController::GetMax() const {
    return GetSchemaValue<float>(m_ptr, "CFlexController", "max");
}

void GCFlexController::SetMax(float value) {
    SetSchemaValue(m_ptr, "CFlexController", "max", false, value);
}

std::string GCFlexController::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFlexController::IsValid() {
    return (m_ptr != nullptr);
}

GCExampleSchemaVData_PolymorphicDerivedA::GCExampleSchemaVData_PolymorphicDerivedA(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCExampleSchemaVData_PolymorphicDerivedA::GCExampleSchemaVData_PolymorphicDerivedA(void *ptr) {
    m_ptr = ptr;
}

int32_t GCExampleSchemaVData_PolymorphicDerivedA::GetDerivedA() const {
    return GetSchemaValue<int32_t>(m_ptr, "CExampleSchemaVData_PolymorphicDerivedA", "m_nDerivedA");
}

void GCExampleSchemaVData_PolymorphicDerivedA::SetDerivedA(int32_t value) {
    SetSchemaValue(m_ptr, "CExampleSchemaVData_PolymorphicDerivedA", "m_nDerivedA", false, value);
}

std::string GCExampleSchemaVData_PolymorphicDerivedA::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCExampleSchemaVData_PolymorphicDerivedA::IsValid() {
    return (m_ptr != nullptr);
}

GEntityKeyValueData_t::GEntityKeyValueData_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEntityKeyValueData_t::GEntityKeyValueData_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<GEntityIOConnectionData_t> GEntityKeyValueData_t::GetConnections() const {
    CUtlVector<GEntityIOConnectionData_t>* vec = GetSchemaValue<CUtlVector<GEntityIOConnectionData_t>*>(m_ptr, "EntityKeyValueData_t", "m_connections"); std::vector<GEntityIOConnectionData_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GEntityKeyValueData_t::SetConnections(std::vector<GEntityIOConnectionData_t> value) {
    SetSchemaValueCUtlVector<GEntityIOConnectionData_t>(m_ptr, "EntityKeyValueData_t", "m_connections", true, value);
}

std::string GEntityKeyValueData_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEntityKeyValueData_t::IsValid() {
    return (m_ptr != nullptr);
}

GCFootStride::GCFootStride(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFootStride::GCFootStride(void *ptr) {
    m_ptr = ptr;
}

GCFootCycleDefinition GCFootStride::GetDefinition() const {
    return GetSchemaValue<GCFootCycleDefinition>(m_ptr, "CFootStride", "m_definition");
}

void GCFootStride::SetDefinition(GCFootCycleDefinition value) {
    SetSchemaValue(m_ptr, "CFootStride", "m_definition", false, value);
}

GCFootTrajectories GCFootStride::GetTrajectories() const {
    return GetSchemaValue<GCFootTrajectories>(m_ptr, "CFootStride", "m_trajectories");
}

void GCFootStride::SetTrajectories(GCFootTrajectories value) {
    SetSchemaValue(m_ptr, "CFootStride", "m_trajectories", false, value);
}

std::string GCFootStride::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFootStride::IsValid() {
    return (m_ptr != nullptr);
}

GCAnimationGroup::GCAnimationGroup(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAnimationGroup::GCAnimationGroup(void *ptr) {
    m_ptr = ptr;
}

uint32_t GCAnimationGroup::GetFlags() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CAnimationGroup", "m_nFlags");
}

void GCAnimationGroup::SetFlags(uint32_t value) {
    SetSchemaValue(m_ptr, "CAnimationGroup", "m_nFlags", false, value);
}

CBufferString GCAnimationGroup::GetName() const {
    return GetSchemaValue<CBufferString>(m_ptr, "CAnimationGroup", "m_name");
}

void GCAnimationGroup::SetName(CBufferString value) {
    SetSchemaValue(m_ptr, "CAnimationGroup", "m_name", false, value);
}

GCAnimKeyData GCAnimationGroup::GetDecodeKey() const {
    return GetSchemaValue<GCAnimKeyData>(m_ptr, "CAnimationGroup", "m_decodeKey");
}

void GCAnimationGroup::SetDecodeKey(GCAnimKeyData value) {
    SetSchemaValue(m_ptr, "CAnimationGroup", "m_decodeKey", false, value);
}

std::vector<CBufferString> GCAnimationGroup::GetScripts() const {
    CUtlVector<CBufferString>* vec = GetSchemaValue<CUtlVector<CBufferString>*>(m_ptr, "CAnimationGroup", "m_szScripts"); std::vector<CBufferString> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCAnimationGroup::SetScripts(std::vector<CBufferString> value) {
    SetSchemaValueCUtlVector<CBufferString>(m_ptr, "CAnimationGroup", "m_szScripts", false, value);
}

std::string GCAnimationGroup::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAnimationGroup::IsValid() {
    return (m_ptr != nullptr);
}

GCSubtractUpdateNode::GCSubtractUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSubtractUpdateNode::GCSubtractUpdateNode(void *ptr) {
    m_ptr = ptr;
}

BinaryNodeChildOption GCSubtractUpdateNode::GetFootMotionTiming() const {
    return GetSchemaValue<BinaryNodeChildOption>(m_ptr, "CSubtractUpdateNode", "m_footMotionTiming");
}

void GCSubtractUpdateNode::SetFootMotionTiming(BinaryNodeChildOption value) {
    SetSchemaValue(m_ptr, "CSubtractUpdateNode", "m_footMotionTiming", false, value);
}

bool GCSubtractUpdateNode::GetApplyToFootMotion() const {
    return GetSchemaValue<bool>(m_ptr, "CSubtractUpdateNode", "m_bApplyToFootMotion");
}

void GCSubtractUpdateNode::SetApplyToFootMotion(bool value) {
    SetSchemaValue(m_ptr, "CSubtractUpdateNode", "m_bApplyToFootMotion", false, value);
}

bool GCSubtractUpdateNode::GetApplyChannelsSeparately() const {
    return GetSchemaValue<bool>(m_ptr, "CSubtractUpdateNode", "m_bApplyChannelsSeparately");
}

void GCSubtractUpdateNode::SetApplyChannelsSeparately(bool value) {
    SetSchemaValue(m_ptr, "CSubtractUpdateNode", "m_bApplyChannelsSeparately", false, value);
}

bool GCSubtractUpdateNode::GetUseModelSpace() const {
    return GetSchemaValue<bool>(m_ptr, "CSubtractUpdateNode", "m_bUseModelSpace");
}

void GCSubtractUpdateNode::SetUseModelSpace(bool value) {
    SetSchemaValue(m_ptr, "CSubtractUpdateNode", "m_bUseModelSpace", false, value);
}

std::string GCSubtractUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSubtractUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GFeTaperedCapsuleStretch_t::GFeTaperedCapsuleStretch_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeTaperedCapsuleStretch_t::GFeTaperedCapsuleStretch_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<uint16_t> GFeTaperedCapsuleStretch_t::GetNode() const {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeTaperedCapsuleStretch_t", "nNode"); std::vector<uint16_t> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}

void GFeTaperedCapsuleStretch_t::SetNode(std::vector<uint16_t> value) {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeTaperedCapsuleStretch_t", "nNode"); for(int i = 0; i < 2; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "FeTaperedCapsuleStretch_t", "nNode", true, outValue);
}

uint16_t GFeTaperedCapsuleStretch_t::GetCollisionMask() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeTaperedCapsuleStretch_t", "nCollisionMask");
}

void GFeTaperedCapsuleStretch_t::SetCollisionMask(uint16_t value) {
    SetSchemaValue(m_ptr, "FeTaperedCapsuleStretch_t", "nCollisionMask", true, value);
}

uint16_t GFeTaperedCapsuleStretch_t::GetDummy() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeTaperedCapsuleStretch_t", "nDummy");
}

void GFeTaperedCapsuleStretch_t::SetDummy(uint16_t value) {
    SetSchemaValue(m_ptr, "FeTaperedCapsuleStretch_t", "nDummy", true, value);
}

std::vector<float> GFeTaperedCapsuleStretch_t::GetRadius() const {
    float* outValue = GetSchemaValue<float*>(m_ptr, "FeTaperedCapsuleStretch_t", "flRadius"); std::vector<float> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}

void GFeTaperedCapsuleStretch_t::SetRadius(std::vector<float> value) {
    float* outValue = GetSchemaValue<float*>(m_ptr, "FeTaperedCapsuleStretch_t", "flRadius"); for(int i = 0; i < 2; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "FeTaperedCapsuleStretch_t", "flRadius", true, outValue);
}

std::string GFeTaperedCapsuleStretch_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeTaperedCapsuleStretch_t::IsValid() {
    return (m_ptr != nullptr);
}

GWorldNodeOnDiskBufferData_t::GWorldNodeOnDiskBufferData_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GWorldNodeOnDiskBufferData_t::GWorldNodeOnDiskBufferData_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GWorldNodeOnDiskBufferData_t::GetElementCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "WorldNodeOnDiskBufferData_t", "m_nElementCount");
}

void GWorldNodeOnDiskBufferData_t::SetElementCount(int32_t value) {
    SetSchemaValue(m_ptr, "WorldNodeOnDiskBufferData_t", "m_nElementCount", true, value);
}

int32_t GWorldNodeOnDiskBufferData_t::GetElementSizeInBytes() const {
    return GetSchemaValue<int32_t>(m_ptr, "WorldNodeOnDiskBufferData_t", "m_nElementSizeInBytes");
}

void GWorldNodeOnDiskBufferData_t::SetElementSizeInBytes(int32_t value) {
    SetSchemaValue(m_ptr, "WorldNodeOnDiskBufferData_t", "m_nElementSizeInBytes", true, value);
}

std::vector<GRenderInputLayoutField_t> GWorldNodeOnDiskBufferData_t::GetInputLayoutFields() const {
    CUtlVector<GRenderInputLayoutField_t>* vec = GetSchemaValue<CUtlVector<GRenderInputLayoutField_t>*>(m_ptr, "WorldNodeOnDiskBufferData_t", "m_inputLayoutFields"); std::vector<GRenderInputLayoutField_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GWorldNodeOnDiskBufferData_t::SetInputLayoutFields(std::vector<GRenderInputLayoutField_t> value) {
    SetSchemaValueCUtlVector<GRenderInputLayoutField_t>(m_ptr, "WorldNodeOnDiskBufferData_t", "m_inputLayoutFields", true, value);
}

std::vector<uint8> GWorldNodeOnDiskBufferData_t::GetData() const {
    CUtlVector<uint8>* vec = GetSchemaValue<CUtlVector<uint8>*>(m_ptr, "WorldNodeOnDiskBufferData_t", "m_pData"); std::vector<uint8> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GWorldNodeOnDiskBufferData_t::SetData(std::vector<uint8> value) {
    SetSchemaValueCUtlVector<uint8>(m_ptr, "WorldNodeOnDiskBufferData_t", "m_pData", true, value);
}

std::string GWorldNodeOnDiskBufferData_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GWorldNodeOnDiskBufferData_t::IsValid() {
    return (m_ptr != nullptr);
}

GEntComponentInfo_t::GEntComponentInfo_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEntComponentInfo_t::GEntComponentInfo_t(void *ptr) {
    m_ptr = ptr;
}

std::string GEntComponentInfo_t::GetName() const {
    return GetSchemaValuePtr<char>(m_ptr, "EntComponentInfo_t", "m_pName");
}

void GEntComponentInfo_t::SetName(std::string value) {
    WriteSchemaPtrValue(m_ptr, "EntComponentInfo_t", "m_pName", true, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), value.size());
}

std::string GEntComponentInfo_t::GetCPPClassname() const {
    return GetSchemaValuePtr<char>(m_ptr, "EntComponentInfo_t", "m_pCPPClassname");
}

void GEntComponentInfo_t::SetCPPClassname(std::string value) {
    WriteSchemaPtrValue(m_ptr, "EntComponentInfo_t", "m_pCPPClassname", true, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), value.size());
}

std::string GEntComponentInfo_t::GetNetworkDataReferencedDescription() const {
    return GetSchemaValuePtr<char>(m_ptr, "EntComponentInfo_t", "m_pNetworkDataReferencedDescription");
}

void GEntComponentInfo_t::SetNetworkDataReferencedDescription(std::string value) {
    WriteSchemaPtrValue(m_ptr, "EntComponentInfo_t", "m_pNetworkDataReferencedDescription", true, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), value.size());
}

std::string GEntComponentInfo_t::GetNetworkDataReferencedPtrPropDescription() const {
    return GetSchemaValuePtr<char>(m_ptr, "EntComponentInfo_t", "m_pNetworkDataReferencedPtrPropDescription");
}

void GEntComponentInfo_t::SetNetworkDataReferencedPtrPropDescription(std::string value) {
    WriteSchemaPtrValue(m_ptr, "EntComponentInfo_t", "m_pNetworkDataReferencedPtrPropDescription", true, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), value.size());
}

int32_t GEntComponentInfo_t::GetRuntimeIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "EntComponentInfo_t", "m_nRuntimeIndex");
}

void GEntComponentInfo_t::SetRuntimeIndex(int32_t value) {
    SetSchemaValue(m_ptr, "EntComponentInfo_t", "m_nRuntimeIndex", true, value);
}

uint32_t GEntComponentInfo_t::GetFlags() const {
    return GetSchemaValue<uint32_t>(m_ptr, "EntComponentInfo_t", "m_nFlags");
}

void GEntComponentInfo_t::SetFlags(uint32_t value) {
    SetSchemaValue(m_ptr, "EntComponentInfo_t", "m_nFlags", true, value);
}

GCEntityComponentHelper GEntComponentInfo_t::GetBaseClassComponentHelper() const {
    GCEntityComponentHelper value(GetSchemaValuePtr<void>(m_ptr, "EntComponentInfo_t", "m_pBaseClassComponentHelper"));
    return value;
}

void GEntComponentInfo_t::SetBaseClassComponentHelper(GCEntityComponentHelper* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'BaseClassComponentHelper' is not possible.\n");
}

std::string GEntComponentInfo_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEntComponentInfo_t::IsValid() {
    return (m_ptr != nullptr);
}

GCClientGapTypeQueryRegistration::GCClientGapTypeQueryRegistration(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCClientGapTypeQueryRegistration::GCClientGapTypeQueryRegistration(void *ptr) {
    m_ptr = ptr;
}

std::string GCClientGapTypeQueryRegistration::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCClientGapTypeQueryRegistration::IsValid() {
    return (m_ptr != nullptr);
}

GCNmVirtualParameterTargetNode::GCNmVirtualParameterTargetNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmVirtualParameterTargetNode::GCNmVirtualParameterTargetNode(void *ptr) {
    m_ptr = ptr;
}

int16_t GCNmVirtualParameterTargetNode::GetChildNodeIdx() const {
    return GetSchemaValue<int16_t>(m_ptr, "CNmVirtualParameterTargetNode", "m_nChildNodeIdx");
}

void GCNmVirtualParameterTargetNode::SetChildNodeIdx(int16_t value) {
    SetSchemaValue(m_ptr, "CNmVirtualParameterTargetNode", "m_nChildNodeIdx", false, value);
}

std::string GCNmVirtualParameterTargetNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmVirtualParameterTargetNode::IsValid() {
    return (m_ptr != nullptr);
}

GCAudioAnimTag::GCAudioAnimTag(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCAudioAnimTag::GCAudioAnimTag(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCAudioAnimTag::GetClipName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CAudioAnimTag", "m_clipName");
}

void GCAudioAnimTag::SetClipName(CUtlString value) {
    SetSchemaValue(m_ptr, "CAudioAnimTag", "m_clipName", false, value);
}

CUtlString GCAudioAnimTag::GetAttachmentName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CAudioAnimTag", "m_attachmentName");
}

void GCAudioAnimTag::SetAttachmentName(CUtlString value) {
    SetSchemaValue(m_ptr, "CAudioAnimTag", "m_attachmentName", false, value);
}

float GCAudioAnimTag::GetVolume() const {
    return GetSchemaValue<float>(m_ptr, "CAudioAnimTag", "m_flVolume");
}

void GCAudioAnimTag::SetVolume(float value) {
    SetSchemaValue(m_ptr, "CAudioAnimTag", "m_flVolume", false, value);
}

bool GCAudioAnimTag::GetStopWhenTagEnds() const {
    return GetSchemaValue<bool>(m_ptr, "CAudioAnimTag", "m_bStopWhenTagEnds");
}

void GCAudioAnimTag::SetStopWhenTagEnds(bool value) {
    SetSchemaValue(m_ptr, "CAudioAnimTag", "m_bStopWhenTagEnds", false, value);
}

bool GCAudioAnimTag::GetStopWhenGraphEnds() const {
    return GetSchemaValue<bool>(m_ptr, "CAudioAnimTag", "m_bStopWhenGraphEnds");
}

void GCAudioAnimTag::SetStopWhenGraphEnds(bool value) {
    SetSchemaValue(m_ptr, "CAudioAnimTag", "m_bStopWhenGraphEnds", false, value);
}

bool GCAudioAnimTag::GetPlayOnServer() const {
    return GetSchemaValue<bool>(m_ptr, "CAudioAnimTag", "m_bPlayOnServer");
}

void GCAudioAnimTag::SetPlayOnServer(bool value) {
    SetSchemaValue(m_ptr, "CAudioAnimTag", "m_bPlayOnServer", false, value);
}

bool GCAudioAnimTag::GetPlayOnClient() const {
    return GetSchemaValue<bool>(m_ptr, "CAudioAnimTag", "m_bPlayOnClient");
}

void GCAudioAnimTag::SetPlayOnClient(bool value) {
    SetSchemaValue(m_ptr, "CAudioAnimTag", "m_bPlayOnClient", false, value);
}

std::string GCAudioAnimTag::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCAudioAnimTag::IsValid() {
    return (m_ptr != nullptr);
}

GCRenderMesh::GCRenderMesh(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCRenderMesh::GCRenderMesh(void *ptr) {
    m_ptr = ptr;
}

std::vector<GCBaseConstraint*> GCRenderMesh::GetConstraints() const {
    CUtlVector<GCBaseConstraint*>* vec = GetSchemaValue<CUtlVector<GCBaseConstraint*>*>(m_ptr, "CRenderMesh", "m_constraints"); std::vector<GCBaseConstraint*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCRenderMesh::SetConstraints(std::vector<GCBaseConstraint*> value) {
    SetSchemaValueCUtlVector<GCBaseConstraint*>(m_ptr, "CRenderMesh", "m_constraints", false, value);
}

GCRenderSkeleton GCRenderMesh::GetSkeleton() const {
    return GetSchemaValue<GCRenderSkeleton>(m_ptr, "CRenderMesh", "m_skeleton");
}

void GCRenderMesh::SetSkeleton(GCRenderSkeleton value) {
    SetSchemaValue(m_ptr, "CRenderMesh", "m_skeleton", false, value);
}

GDynamicMeshDeformParams_t GCRenderMesh::GetMeshDeformParams() const {
    return GetSchemaValue<GDynamicMeshDeformParams_t>(m_ptr, "CRenderMesh", "m_meshDeformParams");
}

void GCRenderMesh::SetMeshDeformParams(GDynamicMeshDeformParams_t value) {
    SetSchemaValue(m_ptr, "CRenderMesh", "m_meshDeformParams", false, value);
}

GCRenderGroom GCRenderMesh::GetGroomData() const {
    GCRenderGroom value(GetSchemaValuePtr<void>(m_ptr, "CRenderMesh", "m_pGroomData"));
    return value;
}

void GCRenderMesh::SetGroomData(GCRenderGroom* value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'GroomData' is not possible.\n");
}

std::string GCRenderMesh::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCRenderMesh::IsValid() {
    return (m_ptr != nullptr);
}

Gconstraint_hingeparams_t::Gconstraint_hingeparams_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

Gconstraint_hingeparams_t::Gconstraint_hingeparams_t(void *ptr) {
    m_ptr = ptr;
}

Vector Gconstraint_hingeparams_t::GetWorldPosition() const {
    return GetSchemaValue<Vector>(m_ptr, "constraint_hingeparams_t", "worldPosition");
}

void Gconstraint_hingeparams_t::SetWorldPosition(Vector value) {
    SetSchemaValue(m_ptr, "constraint_hingeparams_t", "worldPosition", true, value);
}

Vector Gconstraint_hingeparams_t::GetWorldAxisDirection() const {
    return GetSchemaValue<Vector>(m_ptr, "constraint_hingeparams_t", "worldAxisDirection");
}

void Gconstraint_hingeparams_t::SetWorldAxisDirection(Vector value) {
    SetSchemaValue(m_ptr, "constraint_hingeparams_t", "worldAxisDirection", true, value);
}

Gconstraint_axislimit_t Gconstraint_hingeparams_t::GetHingeAxis() const {
    return GetSchemaValue<Gconstraint_axislimit_t>(m_ptr, "constraint_hingeparams_t", "hingeAxis");
}

void Gconstraint_hingeparams_t::SetHingeAxis(Gconstraint_axislimit_t value) {
    SetSchemaValue(m_ptr, "constraint_hingeparams_t", "hingeAxis", true, value);
}

Gconstraint_breakableparams_t Gconstraint_hingeparams_t::GetConstraint() const {
    return GetSchemaValue<Gconstraint_breakableparams_t>(m_ptr, "constraint_hingeparams_t", "constraint");
}

void Gconstraint_hingeparams_t::SetConstraint(Gconstraint_breakableparams_t value) {
    SetSchemaValue(m_ptr, "constraint_hingeparams_t", "constraint", true, value);
}

std::string Gconstraint_hingeparams_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool Gconstraint_hingeparams_t::IsValid() {
    return (m_ptr != nullptr);
}

GNmCompressionSettings_t::GNmCompressionSettings_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GNmCompressionSettings_t::GNmCompressionSettings_t(void *ptr) {
    m_ptr = ptr;
}

GNmCompressionSettings_t GNmCompressionSettings_t::GetTranslationRangeX() const {
    return GetSchemaValue<GNmCompressionSettings_t>(m_ptr, "NmCompressionSettings_t", "m_translationRangeX");
}

void GNmCompressionSettings_t::SetTranslationRangeX(GNmCompressionSettings_t value) {
    SetSchemaValue(m_ptr, "NmCompressionSettings_t", "m_translationRangeX", true, value);
}

GNmCompressionSettings_t GNmCompressionSettings_t::GetTranslationRangeY() const {
    return GetSchemaValue<GNmCompressionSettings_t>(m_ptr, "NmCompressionSettings_t", "m_translationRangeY");
}

void GNmCompressionSettings_t::SetTranslationRangeY(GNmCompressionSettings_t value) {
    SetSchemaValue(m_ptr, "NmCompressionSettings_t", "m_translationRangeY", true, value);
}

GNmCompressionSettings_t GNmCompressionSettings_t::GetTranslationRangeZ() const {
    return GetSchemaValue<GNmCompressionSettings_t>(m_ptr, "NmCompressionSettings_t", "m_translationRangeZ");
}

void GNmCompressionSettings_t::SetTranslationRangeZ(GNmCompressionSettings_t value) {
    SetSchemaValue(m_ptr, "NmCompressionSettings_t", "m_translationRangeZ", true, value);
}

GNmCompressionSettings_t GNmCompressionSettings_t::GetScaleRange() const {
    return GetSchemaValue<GNmCompressionSettings_t>(m_ptr, "NmCompressionSettings_t", "m_scaleRange");
}

void GNmCompressionSettings_t::SetScaleRange(GNmCompressionSettings_t value) {
    SetSchemaValue(m_ptr, "NmCompressionSettings_t", "m_scaleRange", true, value);
}

Quaternion GNmCompressionSettings_t::GetConstantRotation() const {
    return GetSchemaValue<Quaternion>(m_ptr, "NmCompressionSettings_t", "m_constantRotation");
}

void GNmCompressionSettings_t::SetConstantRotation(Quaternion value) {
    SetSchemaValue(m_ptr, "NmCompressionSettings_t", "m_constantRotation", true, value);
}

bool GNmCompressionSettings_t::GetIsRotationStatic() const {
    return GetSchemaValue<bool>(m_ptr, "NmCompressionSettings_t", "m_bIsRotationStatic");
}

void GNmCompressionSettings_t::SetIsRotationStatic(bool value) {
    SetSchemaValue(m_ptr, "NmCompressionSettings_t", "m_bIsRotationStatic", true, value);
}

bool GNmCompressionSettings_t::GetIsTranslationStatic() const {
    return GetSchemaValue<bool>(m_ptr, "NmCompressionSettings_t", "m_bIsTranslationStatic");
}

void GNmCompressionSettings_t::SetIsTranslationStatic(bool value) {
    SetSchemaValue(m_ptr, "NmCompressionSettings_t", "m_bIsTranslationStatic", true, value);
}

bool GNmCompressionSettings_t::GetIsScaleStatic() const {
    return GetSchemaValue<bool>(m_ptr, "NmCompressionSettings_t", "m_bIsScaleStatic");
}

void GNmCompressionSettings_t::SetIsScaleStatic(bool value) {
    SetSchemaValue(m_ptr, "NmCompressionSettings_t", "m_bIsScaleStatic", true, value);
}

std::string GNmCompressionSettings_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GNmCompressionSettings_t::IsValid() {
    return (m_ptr != nullptr);
}

GCTurnHelperUpdateNode::GCTurnHelperUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTurnHelperUpdateNode::GCTurnHelperUpdateNode(void *ptr) {
    m_ptr = ptr;
}

AnimValueSource GCTurnHelperUpdateNode::GetFacingTarget() const {
    return GetSchemaValue<AnimValueSource>(m_ptr, "CTurnHelperUpdateNode", "m_facingTarget");
}

void GCTurnHelperUpdateNode::SetFacingTarget(AnimValueSource value) {
    SetSchemaValue(m_ptr, "CTurnHelperUpdateNode", "m_facingTarget", false, value);
}

float GCTurnHelperUpdateNode::GetTurnStartTimeOffset() const {
    return GetSchemaValue<float>(m_ptr, "CTurnHelperUpdateNode", "m_turnStartTimeOffset");
}

void GCTurnHelperUpdateNode::SetTurnStartTimeOffset(float value) {
    SetSchemaValue(m_ptr, "CTurnHelperUpdateNode", "m_turnStartTimeOffset", false, value);
}

float GCTurnHelperUpdateNode::GetTurnDuration() const {
    return GetSchemaValue<float>(m_ptr, "CTurnHelperUpdateNode", "m_turnDuration");
}

void GCTurnHelperUpdateNode::SetTurnDuration(float value) {
    SetSchemaValue(m_ptr, "CTurnHelperUpdateNode", "m_turnDuration", false, value);
}

bool GCTurnHelperUpdateNode::GetMatchChildDuration() const {
    return GetSchemaValue<bool>(m_ptr, "CTurnHelperUpdateNode", "m_bMatchChildDuration");
}

void GCTurnHelperUpdateNode::SetMatchChildDuration(bool value) {
    SetSchemaValue(m_ptr, "CTurnHelperUpdateNode", "m_bMatchChildDuration", false, value);
}

float GCTurnHelperUpdateNode::GetManualTurnOffset() const {
    return GetSchemaValue<float>(m_ptr, "CTurnHelperUpdateNode", "m_manualTurnOffset");
}

void GCTurnHelperUpdateNode::SetManualTurnOffset(float value) {
    SetSchemaValue(m_ptr, "CTurnHelperUpdateNode", "m_manualTurnOffset", false, value);
}

bool GCTurnHelperUpdateNode::GetUseManualTurnOffset() const {
    return GetSchemaValue<bool>(m_ptr, "CTurnHelperUpdateNode", "m_bUseManualTurnOffset");
}

void GCTurnHelperUpdateNode::SetUseManualTurnOffset(bool value) {
    SetSchemaValue(m_ptr, "CTurnHelperUpdateNode", "m_bUseManualTurnOffset", false, value);
}

std::string GCTurnHelperUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTurnHelperUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GCSosGroupActionTimeLimitSchema::GCSosGroupActionTimeLimitSchema(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSosGroupActionTimeLimitSchema::GCSosGroupActionTimeLimitSchema(void *ptr) {
    m_ptr = ptr;
}

float GCSosGroupActionTimeLimitSchema::GetMaxDuration() const {
    return GetSchemaValue<float>(m_ptr, "CSosGroupActionTimeLimitSchema", "m_flMaxDuration");
}

void GCSosGroupActionTimeLimitSchema::SetMaxDuration(float value) {
    SetSchemaValue(m_ptr, "CSosGroupActionTimeLimitSchema", "m_flMaxDuration", false, value);
}

std::string GCSosGroupActionTimeLimitSchema::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSosGroupActionTimeLimitSchema::IsValid() {
    return (m_ptr != nullptr);
}

GCFollowTargetUpdateNode::GCFollowTargetUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFollowTargetUpdateNode::GCFollowTargetUpdateNode(void *ptr) {
    m_ptr = ptr;
}

GFollowTargetOpFixedSettings_t GCFollowTargetUpdateNode::GetOpFixedData() const {
    return GetSchemaValue<GFollowTargetOpFixedSettings_t>(m_ptr, "CFollowTargetUpdateNode", "m_opFixedData");
}

void GCFollowTargetUpdateNode::SetOpFixedData(GFollowTargetOpFixedSettings_t value) {
    SetSchemaValue(m_ptr, "CFollowTargetUpdateNode", "m_opFixedData", false, value);
}

GCAnimParamHandle GCFollowTargetUpdateNode::GetParameterPosition() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CFollowTargetUpdateNode", "m_hParameterPosition");
}

void GCFollowTargetUpdateNode::SetParameterPosition(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CFollowTargetUpdateNode", "m_hParameterPosition", false, value);
}

GCAnimParamHandle GCFollowTargetUpdateNode::GetParameterOrientation() const {
    return GetSchemaValue<GCAnimParamHandle>(m_ptr, "CFollowTargetUpdateNode", "m_hParameterOrientation");
}

void GCFollowTargetUpdateNode::SetParameterOrientation(GCAnimParamHandle value) {
    SetSchemaValue(m_ptr, "CFollowTargetUpdateNode", "m_hParameterOrientation", false, value);
}

std::string GCFollowTargetUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFollowTargetUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GEventClientAdvanceNonRenderedFrame_t::GEventClientAdvanceNonRenderedFrame_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GEventClientAdvanceNonRenderedFrame_t::GEventClientAdvanceNonRenderedFrame_t(void *ptr) {
    m_ptr = ptr;
}

std::string GEventClientAdvanceNonRenderedFrame_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GEventClientAdvanceNonRenderedFrame_t::IsValid() {
    return (m_ptr != nullptr);
}

GCSosSoundEventGroupListSchema::GCSosSoundEventGroupListSchema(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCSosSoundEventGroupListSchema::GCSosSoundEventGroupListSchema(void *ptr) {
    m_ptr = ptr;
}

std::vector<GCSosSoundEventGroupSchema> GCSosSoundEventGroupListSchema::GetGroupList() const {
    CUtlVector<GCSosSoundEventGroupSchema>* vec = GetSchemaValue<CUtlVector<GCSosSoundEventGroupSchema>*>(m_ptr, "CSosSoundEventGroupListSchema", "m_groupList"); std::vector<GCSosSoundEventGroupSchema> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCSosSoundEventGroupListSchema::SetGroupList(std::vector<GCSosSoundEventGroupSchema> value) {
    SetSchemaValueCUtlVector<GCSosSoundEventGroupSchema>(m_ptr, "CSosSoundEventGroupListSchema", "m_groupList", false, value);
}

std::string GCSosSoundEventGroupListSchema::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCSosSoundEventGroupListSchema::IsValid() {
    return (m_ptr != nullptr);
}

GCNmClip::GCNmClip(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmClip::GCNmClip(void *ptr) {
    m_ptr = ptr;
}

uint32_t GCNmClip::GetNumFrames() const {
    return GetSchemaValue<uint32_t>(m_ptr, "CNmClip", "m_nNumFrames");
}

void GCNmClip::SetNumFrames(uint32_t value) {
    SetSchemaValue(m_ptr, "CNmClip", "m_nNumFrames", false, value);
}

float GCNmClip::GetDuration() const {
    return GetSchemaValue<float>(m_ptr, "CNmClip", "m_flDuration");
}

void GCNmClip::SetDuration(float value) {
    SetSchemaValue(m_ptr, "CNmClip", "m_flDuration", false, value);
}

std::vector<GNmCompressionSettings_t> GCNmClip::GetTrackCompressionSettings() const {
    CUtlVector<GNmCompressionSettings_t>* vec = GetSchemaValue<CUtlVector<GNmCompressionSettings_t>*>(m_ptr, "CNmClip", "m_trackCompressionSettings"); std::vector<GNmCompressionSettings_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCNmClip::SetTrackCompressionSettings(std::vector<GNmCompressionSettings_t> value) {
    SetSchemaValueCUtlVector<GNmCompressionSettings_t>(m_ptr, "CNmClip", "m_trackCompressionSettings", false, value);
}

std::vector<uint32> GCNmClip::GetCompressedPoseOffsets() const {
    CUtlVector<uint32>* vec = GetSchemaValue<CUtlVector<uint32>*>(m_ptr, "CNmClip", "m_compressedPoseOffsets"); std::vector<uint32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCNmClip::SetCompressedPoseOffsets(std::vector<uint32> value) {
    SetSchemaValueCUtlVector<uint32>(m_ptr, "CNmClip", "m_compressedPoseOffsets", false, value);
}

GCNmSyncTrack GCNmClip::GetSyncTrack() const {
    return GetSchemaValue<GCNmSyncTrack>(m_ptr, "CNmClip", "m_syncTrack");
}

void GCNmClip::SetSyncTrack(GCNmSyncTrack value) {
    SetSchemaValue(m_ptr, "CNmClip", "m_syncTrack", false, value);
}

GCNmRootMotionData GCNmClip::GetRootMotion() const {
    return GetSchemaValue<GCNmRootMotionData>(m_ptr, "CNmClip", "m_rootMotion");
}

void GCNmClip::SetRootMotion(GCNmRootMotionData value) {
    SetSchemaValue(m_ptr, "CNmClip", "m_rootMotion", false, value);
}

bool GCNmClip::GetIsAdditive() const {
    return GetSchemaValue<bool>(m_ptr, "CNmClip", "m_bIsAdditive");
}

void GCNmClip::SetIsAdditive(bool value) {
    SetSchemaValue(m_ptr, "CNmClip", "m_bIsAdditive", false, value);
}

std::string GCNmClip::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmClip::IsValid() {
    return (m_ptr != nullptr);
}

GCFlexDesc::GCFlexDesc(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCFlexDesc::GCFlexDesc(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCFlexDesc::GetFacs() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CFlexDesc", "m_szFacs");
}

void GCFlexDesc::SetFacs(CUtlString value) {
    SetSchemaValue(m_ptr, "CFlexDesc", "m_szFacs", false, value);
}

std::string GCFlexDesc::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCFlexDesc::IsValid() {
    return (m_ptr != nullptr);
}

GCStateMachineComponentUpdater::GCStateMachineComponentUpdater(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCStateMachineComponentUpdater::GCStateMachineComponentUpdater(void *ptr) {
    m_ptr = ptr;
}

GCAnimStateMachineUpdater GCStateMachineComponentUpdater::GetStateMachine() const {
    return GetSchemaValue<GCAnimStateMachineUpdater>(m_ptr, "CStateMachineComponentUpdater", "m_stateMachine");
}

void GCStateMachineComponentUpdater::SetStateMachine(GCAnimStateMachineUpdater value) {
    SetSchemaValue(m_ptr, "CStateMachineComponentUpdater", "m_stateMachine", false, value);
}

std::string GCStateMachineComponentUpdater::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCStateMachineComponentUpdater::IsValid() {
    return (m_ptr != nullptr);
}

GCompMatMutatorCondition_t::GCompMatMutatorCondition_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCompMatMutatorCondition_t::GCompMatMutatorCondition_t(void *ptr) {
    m_ptr = ptr;
}

CompMatPropertyMutatorConditionType_t GCompMatMutatorCondition_t::GetMutatorCondition() const {
    return GetSchemaValue<CompMatPropertyMutatorConditionType_t>(m_ptr, "CompMatMutatorCondition_t", "m_nMutatorCondition");
}

void GCompMatMutatorCondition_t::SetMutatorCondition(CompMatPropertyMutatorConditionType_t value) {
    SetSchemaValue(m_ptr, "CompMatMutatorCondition_t", "m_nMutatorCondition", true, value);
}

CUtlString GCompMatMutatorCondition_t::GetStrMutatorConditionContainerName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CompMatMutatorCondition_t", "m_strMutatorConditionContainerName");
}

void GCompMatMutatorCondition_t::SetStrMutatorConditionContainerName(CUtlString value) {
    SetSchemaValue(m_ptr, "CompMatMutatorCondition_t", "m_strMutatorConditionContainerName", true, value);
}

CUtlString GCompMatMutatorCondition_t::GetStrMutatorConditionContainerVarName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CompMatMutatorCondition_t", "m_strMutatorConditionContainerVarName");
}

void GCompMatMutatorCondition_t::SetStrMutatorConditionContainerVarName(CUtlString value) {
    SetSchemaValue(m_ptr, "CompMatMutatorCondition_t", "m_strMutatorConditionContainerVarName", true, value);
}

CUtlString GCompMatMutatorCondition_t::GetStrMutatorConditionContainerVarValue() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CompMatMutatorCondition_t", "m_strMutatorConditionContainerVarValue");
}

void GCompMatMutatorCondition_t::SetStrMutatorConditionContainerVarValue(CUtlString value) {
    SetSchemaValue(m_ptr, "CompMatMutatorCondition_t", "m_strMutatorConditionContainerVarValue", true, value);
}

bool GCompMatMutatorCondition_t::GetPassWhenTrue() const {
    return GetSchemaValue<bool>(m_ptr, "CompMatMutatorCondition_t", "m_bPassWhenTrue");
}

void GCompMatMutatorCondition_t::SetPassWhenTrue(bool value) {
    SetSchemaValue(m_ptr, "CompMatMutatorCondition_t", "m_bPassWhenTrue", true, value);
}

std::string GCompMatMutatorCondition_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCompMatMutatorCondition_t::IsValid() {
    return (m_ptr != nullptr);
}

GFakeEntity_tAPI::GFakeEntity_tAPI(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFakeEntity_tAPI::GFakeEntity_tAPI(void *ptr) {
    m_ptr = ptr;
}

std::string GFakeEntity_tAPI::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFakeEntity_tAPI::IsValid() {
    return (m_ptr != nullptr);
}

GCBoneConstraintPoseSpaceMorph__Input_t::GCBoneConstraintPoseSpaceMorph__Input_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBoneConstraintPoseSpaceMorph__Input_t::GCBoneConstraintPoseSpaceMorph__Input_t(void *ptr) {
    m_ptr = ptr;
}

Vector GCBoneConstraintPoseSpaceMorph__Input_t::GetInputValue() const {
    return GetSchemaValue<Vector>(m_ptr, "CBoneConstraintPoseSpaceMorph__Input_t", "m_inputValue");
}

void GCBoneConstraintPoseSpaceMorph__Input_t::SetInputValue(Vector value) {
    SetSchemaValue(m_ptr, "CBoneConstraintPoseSpaceMorph__Input_t", "m_inputValue", true, value);
}

std::vector<float32> GCBoneConstraintPoseSpaceMorph__Input_t::GetOutputWeightList() const {
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "CBoneConstraintPoseSpaceMorph__Input_t", "m_outputWeightList"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCBoneConstraintPoseSpaceMorph__Input_t::SetOutputWeightList(std::vector<float32> value) {
    SetSchemaValueCUtlVector<float32>(m_ptr, "CBoneConstraintPoseSpaceMorph__Input_t", "m_outputWeightList", true, value);
}

std::string GCBoneConstraintPoseSpaceMorph__Input_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBoneConstraintPoseSpaceMorph__Input_t::IsValid() {
    return (m_ptr != nullptr);
}

GCTwoBoneIKUpdateNode::GCTwoBoneIKUpdateNode(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCTwoBoneIKUpdateNode::GCTwoBoneIKUpdateNode(void *ptr) {
    m_ptr = ptr;
}

GTwoBoneIKSettings_t GCTwoBoneIKUpdateNode::GetOpFixedData() const {
    return GetSchemaValue<GTwoBoneIKSettings_t>(m_ptr, "CTwoBoneIKUpdateNode", "m_opFixedData");
}

void GCTwoBoneIKUpdateNode::SetOpFixedData(GTwoBoneIKSettings_t value) {
    SetSchemaValue(m_ptr, "CTwoBoneIKUpdateNode", "m_opFixedData", false, value);
}

std::string GCTwoBoneIKUpdateNode::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCTwoBoneIKUpdateNode::IsValid() {
    return (m_ptr != nullptr);
}

GVMixDynamicsDesc_t::GVMixDynamicsDesc_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVMixDynamicsDesc_t::GVMixDynamicsDesc_t(void *ptr) {
    m_ptr = ptr;
}

float GVMixDynamicsDesc_t::GetFldbGain() const {
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsDesc_t", "m_fldbGain");
}

void GVMixDynamicsDesc_t::SetFldbGain(float value) {
    SetSchemaValue(m_ptr, "VMixDynamicsDesc_t", "m_fldbGain", true, value);
}

float GVMixDynamicsDesc_t::GetFldbNoiseGateThreshold() const {
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsDesc_t", "m_fldbNoiseGateThreshold");
}

void GVMixDynamicsDesc_t::SetFldbNoiseGateThreshold(float value) {
    SetSchemaValue(m_ptr, "VMixDynamicsDesc_t", "m_fldbNoiseGateThreshold", true, value);
}

float GVMixDynamicsDesc_t::GetFldbCompressionThreshold() const {
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsDesc_t", "m_fldbCompressionThreshold");
}

void GVMixDynamicsDesc_t::SetFldbCompressionThreshold(float value) {
    SetSchemaValue(m_ptr, "VMixDynamicsDesc_t", "m_fldbCompressionThreshold", true, value);
}

float GVMixDynamicsDesc_t::GetFldbLimiterThreshold() const {
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsDesc_t", "m_fldbLimiterThreshold");
}

void GVMixDynamicsDesc_t::SetFldbLimiterThreshold(float value) {
    SetSchemaValue(m_ptr, "VMixDynamicsDesc_t", "m_fldbLimiterThreshold", true, value);
}

float GVMixDynamicsDesc_t::GetFldbKneeWidth() const {
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsDesc_t", "m_fldbKneeWidth");
}

void GVMixDynamicsDesc_t::SetFldbKneeWidth(float value) {
    SetSchemaValue(m_ptr, "VMixDynamicsDesc_t", "m_fldbKneeWidth", true, value);
}

float GVMixDynamicsDesc_t::GetRatio() const {
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsDesc_t", "m_flRatio");
}

void GVMixDynamicsDesc_t::SetRatio(float value) {
    SetSchemaValue(m_ptr, "VMixDynamicsDesc_t", "m_flRatio", true, value);
}

float GVMixDynamicsDesc_t::GetLimiterRatio() const {
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsDesc_t", "m_flLimiterRatio");
}

void GVMixDynamicsDesc_t::SetLimiterRatio(float value) {
    SetSchemaValue(m_ptr, "VMixDynamicsDesc_t", "m_flLimiterRatio", true, value);
}

float GVMixDynamicsDesc_t::GetAttackTimeMS() const {
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsDesc_t", "m_flAttackTimeMS");
}

void GVMixDynamicsDesc_t::SetAttackTimeMS(float value) {
    SetSchemaValue(m_ptr, "VMixDynamicsDesc_t", "m_flAttackTimeMS", true, value);
}

float GVMixDynamicsDesc_t::GetReleaseTimeMS() const {
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsDesc_t", "m_flReleaseTimeMS");
}

void GVMixDynamicsDesc_t::SetReleaseTimeMS(float value) {
    SetSchemaValue(m_ptr, "VMixDynamicsDesc_t", "m_flReleaseTimeMS", true, value);
}

float GVMixDynamicsDesc_t::GetRMSTimeMS() const {
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsDesc_t", "m_flRMSTimeMS");
}

void GVMixDynamicsDesc_t::SetRMSTimeMS(float value) {
    SetSchemaValue(m_ptr, "VMixDynamicsDesc_t", "m_flRMSTimeMS", true, value);
}

float GVMixDynamicsDesc_t::GetWetMix() const {
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsDesc_t", "m_flWetMix");
}

void GVMixDynamicsDesc_t::SetWetMix(float value) {
    SetSchemaValue(m_ptr, "VMixDynamicsDesc_t", "m_flWetMix", true, value);
}

bool GVMixDynamicsDesc_t::GetPeakMode() const {
    return GetSchemaValue<bool>(m_ptr, "VMixDynamicsDesc_t", "m_bPeakMode");
}

void GVMixDynamicsDesc_t::SetPeakMode(bool value) {
    SetSchemaValue(m_ptr, "VMixDynamicsDesc_t", "m_bPeakMode", true, value);
}

std::string GVMixDynamicsDesc_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVMixDynamicsDesc_t::IsValid() {
    return (m_ptr != nullptr);
}

GFeVertexMapDesc_t::GFeVertexMapDesc_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeVertexMapDesc_t::GFeVertexMapDesc_t(void *ptr) {
    m_ptr = ptr;
}

CUtlString GFeVertexMapDesc_t::GetName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "FeVertexMapDesc_t", "sName");
}

void GFeVertexMapDesc_t::SetName(CUtlString value) {
    SetSchemaValue(m_ptr, "FeVertexMapDesc_t", "sName", true, value);
}

uint32_t GFeVertexMapDesc_t::GetNameHash() const {
    return GetSchemaValue<uint32_t>(m_ptr, "FeVertexMapDesc_t", "nNameHash");
}

void GFeVertexMapDesc_t::SetNameHash(uint32_t value) {
    SetSchemaValue(m_ptr, "FeVertexMapDesc_t", "nNameHash", true, value);
}

uint32_t GFeVertexMapDesc_t::GetColor() const {
    return GetSchemaValue<uint32_t>(m_ptr, "FeVertexMapDesc_t", "nColor");
}

void GFeVertexMapDesc_t::SetColor(uint32_t value) {
    SetSchemaValue(m_ptr, "FeVertexMapDesc_t", "nColor", true, value);
}

uint32_t GFeVertexMapDesc_t::GetFlags() const {
    return GetSchemaValue<uint32_t>(m_ptr, "FeVertexMapDesc_t", "nFlags");
}

void GFeVertexMapDesc_t::SetFlags(uint32_t value) {
    SetSchemaValue(m_ptr, "FeVertexMapDesc_t", "nFlags", true, value);
}

uint16_t GFeVertexMapDesc_t::GetVertexBase() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeVertexMapDesc_t", "nVertexBase");
}

void GFeVertexMapDesc_t::SetVertexBase(uint16_t value) {
    SetSchemaValue(m_ptr, "FeVertexMapDesc_t", "nVertexBase", true, value);
}

uint16_t GFeVertexMapDesc_t::GetVertexCount() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeVertexMapDesc_t", "nVertexCount");
}

void GFeVertexMapDesc_t::SetVertexCount(uint16_t value) {
    SetSchemaValue(m_ptr, "FeVertexMapDesc_t", "nVertexCount", true, value);
}

uint32_t GFeVertexMapDesc_t::GetMapOffset() const {
    return GetSchemaValue<uint32_t>(m_ptr, "FeVertexMapDesc_t", "nMapOffset");
}

void GFeVertexMapDesc_t::SetMapOffset(uint32_t value) {
    SetSchemaValue(m_ptr, "FeVertexMapDesc_t", "nMapOffset", true, value);
}

uint32_t GFeVertexMapDesc_t::GetNodeListOffset() const {
    return GetSchemaValue<uint32_t>(m_ptr, "FeVertexMapDesc_t", "nNodeListOffset");
}

void GFeVertexMapDesc_t::SetNodeListOffset(uint32_t value) {
    SetSchemaValue(m_ptr, "FeVertexMapDesc_t", "nNodeListOffset", true, value);
}

Vector GFeVertexMapDesc_t::GetCenterOfMass() const {
    return GetSchemaValue<Vector>(m_ptr, "FeVertexMapDesc_t", "vCenterOfMass");
}

void GFeVertexMapDesc_t::SetCenterOfMass(Vector value) {
    SetSchemaValue(m_ptr, "FeVertexMapDesc_t", "vCenterOfMass", true, value);
}

float GFeVertexMapDesc_t::GetVolumetricSolveStrength() const {
    return GetSchemaValue<float>(m_ptr, "FeVertexMapDesc_t", "flVolumetricSolveStrength");
}

void GFeVertexMapDesc_t::SetVolumetricSolveStrength(float value) {
    SetSchemaValue(m_ptr, "FeVertexMapDesc_t", "flVolumetricSolveStrength", true, value);
}

int16_t GFeVertexMapDesc_t::GetScaleSourceNode() const {
    return GetSchemaValue<int16_t>(m_ptr, "FeVertexMapDesc_t", "nScaleSourceNode");
}

void GFeVertexMapDesc_t::SetScaleSourceNode(int16_t value) {
    SetSchemaValue(m_ptr, "FeVertexMapDesc_t", "nScaleSourceNode", true, value);
}

uint16_t GFeVertexMapDesc_t::GetNodeListCount() const {
    return GetSchemaValue<uint16_t>(m_ptr, "FeVertexMapDesc_t", "nNodeListCount");
}

void GFeVertexMapDesc_t::SetNodeListCount(uint16_t value) {
    SetSchemaValue(m_ptr, "FeVertexMapDesc_t", "nNodeListCount", true, value);
}

std::string GFeVertexMapDesc_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeVertexMapDesc_t::IsValid() {
    return (m_ptr != nullptr);
}

GFeSourceEdge_t::GFeSourceEdge_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GFeSourceEdge_t::GFeSourceEdge_t(void *ptr) {
    m_ptr = ptr;
}

std::vector<uint16_t> GFeSourceEdge_t::GetNode() const {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeSourceEdge_t", "nNode"); std::vector<uint16_t> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}

void GFeSourceEdge_t::SetNode(std::vector<uint16_t> value) {
    uint16_t* outValue = GetSchemaValue<uint16_t*>(m_ptr, "FeSourceEdge_t", "nNode"); for(int i = 0; i < 2; i++) { outValue[i] = value[i]; } SetSchemaValue(m_ptr, "FeSourceEdge_t", "nNode", true, outValue);
}

std::string GFeSourceEdge_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GFeSourceEdge_t::IsValid() {
    return (m_ptr != nullptr);
}

GCompositeMaterialEditorPoint_t::GCompositeMaterialEditorPoint_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCompositeMaterialEditorPoint_t::GCompositeMaterialEditorPoint_t(void *ptr) {
    m_ptr = ptr;
}

int32_t GCompositeMaterialEditorPoint_t::GetSequenceIndex() const {
    return GetSchemaValue<int32_t>(m_ptr, "CompositeMaterialEditorPoint_t", "m_nSequenceIndex");
}

void GCompositeMaterialEditorPoint_t::SetSequenceIndex(int32_t value) {
    SetSchemaValue(m_ptr, "CompositeMaterialEditorPoint_t", "m_nSequenceIndex", true, value);
}

float GCompositeMaterialEditorPoint_t::GetCycle() const {
    return GetSchemaValue<float>(m_ptr, "CompositeMaterialEditorPoint_t", "m_flCycle");
}

void GCompositeMaterialEditorPoint_t::SetCycle(float value) {
    SetSchemaValue(m_ptr, "CompositeMaterialEditorPoint_t", "m_flCycle", true, value);
}

bool GCompositeMaterialEditorPoint_t::GetEnableChildModel() const {
    return GetSchemaValue<bool>(m_ptr, "CompositeMaterialEditorPoint_t", "m_bEnableChildModel");
}

void GCompositeMaterialEditorPoint_t::SetEnableChildModel(bool value) {
    SetSchemaValue(m_ptr, "CompositeMaterialEditorPoint_t", "m_bEnableChildModel", true, value);
}

std::vector<GCompositeMaterialAssemblyProcedure_t> GCompositeMaterialEditorPoint_t::GetCompositeMaterialAssemblyProcedures() const {
    CUtlVector<GCompositeMaterialAssemblyProcedure_t>* vec = GetSchemaValue<CUtlVector<GCompositeMaterialAssemblyProcedure_t>*>(m_ptr, "CompositeMaterialEditorPoint_t", "m_vecCompositeMaterialAssemblyProcedures"); std::vector<GCompositeMaterialAssemblyProcedure_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCompositeMaterialEditorPoint_t::SetCompositeMaterialAssemblyProcedures(std::vector<GCompositeMaterialAssemblyProcedure_t> value) {
    SetSchemaValueCUtlVector<GCompositeMaterialAssemblyProcedure_t>(m_ptr, "CompositeMaterialEditorPoint_t", "m_vecCompositeMaterialAssemblyProcedures", true, value);
}

std::vector<GCompositeMaterial_t> GCompositeMaterialEditorPoint_t::GetCompositeMaterials() const {
    CUtlVector<GCompositeMaterial_t>* vec = GetSchemaValue<CUtlVector<GCompositeMaterial_t>*>(m_ptr, "CompositeMaterialEditorPoint_t", "m_vecCompositeMaterials"); std::vector<GCompositeMaterial_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}

void GCompositeMaterialEditorPoint_t::SetCompositeMaterials(std::vector<GCompositeMaterial_t> value) {
    SetSchemaValueCUtlVector<GCompositeMaterial_t>(m_ptr, "CompositeMaterialEditorPoint_t", "m_vecCompositeMaterials", true, value);
}

std::string GCompositeMaterialEditorPoint_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCompositeMaterialEditorPoint_t::IsValid() {
    return (m_ptr != nullptr);
}

GVPhysXJoint_t::GVPhysXJoint_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GVPhysXJoint_t::GVPhysXJoint_t(void *ptr) {
    m_ptr = ptr;
}

uint16_t GVPhysXJoint_t::GetType() const {
    return GetSchemaValue<uint16_t>(m_ptr, "VPhysXJoint_t", "m_nType");
}

void GVPhysXJoint_t::SetType(uint16_t value) {
    SetSchemaValue(m_ptr, "VPhysXJoint_t", "m_nType", true, value);
}

uint16_t GVPhysXJoint_t::GetBody1() const {
    return GetSchemaValue<uint16_t>(m_ptr, "VPhysXJoint_t", "m_nBody1");
}

void GVPhysXJoint_t::SetBody1(uint16_t value) {
    SetSchemaValue(m_ptr, "VPhysXJoint_t", "m_nBody1", true, value);
}

uint16_t GVPhysXJoint_t::GetBody2() const {
    return GetSchemaValue<uint16_t>(m_ptr, "VPhysXJoint_t", "m_nBody2");
}

void GVPhysXJoint_t::SetBody2(uint16_t value) {
    SetSchemaValue(m_ptr, "VPhysXJoint_t", "m_nBody2", true, value);
}

uint16_t GVPhysXJoint_t::GetFlags() const {
    return GetSchemaValue<uint16_t>(m_ptr, "VPhysXJoint_t", "m_nFlags");
}

void GVPhysXJoint_t::SetFlags(uint16_t value) {
    SetSchemaValue(m_ptr, "VPhysXJoint_t", "m_nFlags", true, value);
}

bool GVPhysXJoint_t::GetEnableCollision() const {
    return GetSchemaValue<bool>(m_ptr, "VPhysXJoint_t", "m_bEnableCollision");
}

void GVPhysXJoint_t::SetEnableCollision(bool value) {
    SetSchemaValue(m_ptr, "VPhysXJoint_t", "m_bEnableCollision", true, value);
}

bool GVPhysXJoint_t::GetEnableLinearLimit() const {
    return GetSchemaValue<bool>(m_ptr, "VPhysXJoint_t", "m_bEnableLinearLimit");
}

void GVPhysXJoint_t::SetEnableLinearLimit(bool value) {
    SetSchemaValue(m_ptr, "VPhysXJoint_t", "m_bEnableLinearLimit", true, value);
}

GVPhysXRange_t GVPhysXJoint_t::GetLinearLimit() const {
    return GetSchemaValue<GVPhysXRange_t>(m_ptr, "VPhysXJoint_t", "m_LinearLimit");
}

void GVPhysXJoint_t::SetLinearLimit(GVPhysXRange_t value) {
    SetSchemaValue(m_ptr, "VPhysXJoint_t", "m_LinearLimit", true, value);
}

bool GVPhysXJoint_t::GetEnableLinearMotor() const {
    return GetSchemaValue<bool>(m_ptr, "VPhysXJoint_t", "m_bEnableLinearMotor");
}

void GVPhysXJoint_t::SetEnableLinearMotor(bool value) {
    SetSchemaValue(m_ptr, "VPhysXJoint_t", "m_bEnableLinearMotor", true, value);
}

Vector GVPhysXJoint_t::GetLinearTargetVelocity() const {
    return GetSchemaValue<Vector>(m_ptr, "VPhysXJoint_t", "m_vLinearTargetVelocity");
}

void GVPhysXJoint_t::SetLinearTargetVelocity(Vector value) {
    SetSchemaValue(m_ptr, "VPhysXJoint_t", "m_vLinearTargetVelocity", true, value);
}

float GVPhysXJoint_t::GetMaxForce() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXJoint_t", "m_flMaxForce");
}

void GVPhysXJoint_t::SetMaxForce(float value) {
    SetSchemaValue(m_ptr, "VPhysXJoint_t", "m_flMaxForce", true, value);
}

bool GVPhysXJoint_t::GetEnableSwingLimit() const {
    return GetSchemaValue<bool>(m_ptr, "VPhysXJoint_t", "m_bEnableSwingLimit");
}

void GVPhysXJoint_t::SetEnableSwingLimit(bool value) {
    SetSchemaValue(m_ptr, "VPhysXJoint_t", "m_bEnableSwingLimit", true, value);
}

GVPhysXRange_t GVPhysXJoint_t::GetSwingLimit() const {
    return GetSchemaValue<GVPhysXRange_t>(m_ptr, "VPhysXJoint_t", "m_SwingLimit");
}

void GVPhysXJoint_t::SetSwingLimit(GVPhysXRange_t value) {
    SetSchemaValue(m_ptr, "VPhysXJoint_t", "m_SwingLimit", true, value);
}

bool GVPhysXJoint_t::GetEnableTwistLimit() const {
    return GetSchemaValue<bool>(m_ptr, "VPhysXJoint_t", "m_bEnableTwistLimit");
}

void GVPhysXJoint_t::SetEnableTwistLimit(bool value) {
    SetSchemaValue(m_ptr, "VPhysXJoint_t", "m_bEnableTwistLimit", true, value);
}

GVPhysXRange_t GVPhysXJoint_t::GetTwistLimit() const {
    return GetSchemaValue<GVPhysXRange_t>(m_ptr, "VPhysXJoint_t", "m_TwistLimit");
}

void GVPhysXJoint_t::SetTwistLimit(GVPhysXRange_t value) {
    SetSchemaValue(m_ptr, "VPhysXJoint_t", "m_TwistLimit", true, value);
}

bool GVPhysXJoint_t::GetEnableAngularMotor() const {
    return GetSchemaValue<bool>(m_ptr, "VPhysXJoint_t", "m_bEnableAngularMotor");
}

void GVPhysXJoint_t::SetEnableAngularMotor(bool value) {
    SetSchemaValue(m_ptr, "VPhysXJoint_t", "m_bEnableAngularMotor", true, value);
}

Vector GVPhysXJoint_t::GetAngularTargetVelocity() const {
    return GetSchemaValue<Vector>(m_ptr, "VPhysXJoint_t", "m_vAngularTargetVelocity");
}

void GVPhysXJoint_t::SetAngularTargetVelocity(Vector value) {
    SetSchemaValue(m_ptr, "VPhysXJoint_t", "m_vAngularTargetVelocity", true, value);
}

float GVPhysXJoint_t::GetMaxTorque() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXJoint_t", "m_flMaxTorque");
}

void GVPhysXJoint_t::SetMaxTorque(float value) {
    SetSchemaValue(m_ptr, "VPhysXJoint_t", "m_flMaxTorque", true, value);
}

float GVPhysXJoint_t::GetLinearFrequency() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXJoint_t", "m_flLinearFrequency");
}

void GVPhysXJoint_t::SetLinearFrequency(float value) {
    SetSchemaValue(m_ptr, "VPhysXJoint_t", "m_flLinearFrequency", true, value);
}

float GVPhysXJoint_t::GetLinearDampingRatio() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXJoint_t", "m_flLinearDampingRatio");
}

void GVPhysXJoint_t::SetLinearDampingRatio(float value) {
    SetSchemaValue(m_ptr, "VPhysXJoint_t", "m_flLinearDampingRatio", true, value);
}

float GVPhysXJoint_t::GetAngularFrequency() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXJoint_t", "m_flAngularFrequency");
}

void GVPhysXJoint_t::SetAngularFrequency(float value) {
    SetSchemaValue(m_ptr, "VPhysXJoint_t", "m_flAngularFrequency", true, value);
}

float GVPhysXJoint_t::GetAngularDampingRatio() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXJoint_t", "m_flAngularDampingRatio");
}

void GVPhysXJoint_t::SetAngularDampingRatio(float value) {
    SetSchemaValue(m_ptr, "VPhysXJoint_t", "m_flAngularDampingRatio", true, value);
}

float GVPhysXJoint_t::GetFriction() const {
    return GetSchemaValue<float>(m_ptr, "VPhysXJoint_t", "m_flFriction");
}

void GVPhysXJoint_t::SetFriction(float value) {
    SetSchemaValue(m_ptr, "VPhysXJoint_t", "m_flFriction", true, value);
}

std::string GVPhysXJoint_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GVPhysXJoint_t::IsValid() {
    return (m_ptr != nullptr);
}

GCBodyGroupSetting::GCBodyGroupSetting(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCBodyGroupSetting::GCBodyGroupSetting(void *ptr) {
    m_ptr = ptr;
}

CUtlString GCBodyGroupSetting::GetBodyGroupName() const {
    return GetSchemaValue<CUtlString>(m_ptr, "CBodyGroupSetting", "m_BodyGroupName");
}

void GCBodyGroupSetting::SetBodyGroupName(CUtlString value) {
    SetSchemaValue(m_ptr, "CBodyGroupSetting", "m_BodyGroupName", false, value);
}

int32_t GCBodyGroupSetting::GetBodyGroupOption() const {
    return GetSchemaValue<int32_t>(m_ptr, "CBodyGroupSetting", "m_nBodyGroupOption");
}

void GCBodyGroupSetting::SetBodyGroupOption(int32_t value) {
    SetSchemaValue(m_ptr, "CBodyGroupSetting", "m_nBodyGroupOption", false, value);
}

std::string GCBodyGroupSetting::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCBodyGroupSetting::IsValid() {
    return (m_ptr != nullptr);
}

GRnSphereDesc_t::GRnSphereDesc_t(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GRnSphereDesc_t::GRnSphereDesc_t(void *ptr) {
    m_ptr = ptr;
}

std::string GRnSphereDesc_t::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GRnSphereDesc_t::IsValid() {
    return (m_ptr != nullptr);
}

GCNmTarget::GCNmTarget(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}

GCNmTarget::GCNmTarget(void *ptr) {
    m_ptr = ptr;
}

bool GCNmTarget::GetIsBoneTarget() const {
    return GetSchemaValue<bool>(m_ptr, "CNmTarget", "m_bIsBoneTarget");
}

void GCNmTarget::SetIsBoneTarget(bool value) {
    SetSchemaValue(m_ptr, "CNmTarget", "m_bIsBoneTarget", false, value);
}

bool GCNmTarget::GetIsUsingBoneSpaceOffsets() const {
    return GetSchemaValue<bool>(m_ptr, "CNmTarget", "m_bIsUsingBoneSpaceOffsets");
}

void GCNmTarget::SetIsUsingBoneSpaceOffsets(bool value) {
    SetSchemaValue(m_ptr, "CNmTarget", "m_bIsUsingBoneSpaceOffsets", false, value);
}

bool GCNmTarget::GetHasOffsets() const {
    return GetSchemaValue<bool>(m_ptr, "CNmTarget", "m_bHasOffsets");
}

void GCNmTarget::SetHasOffsets(bool value) {
    SetSchemaValue(m_ptr, "CNmTarget", "m_bHasOffsets", false, value);
}

bool GCNmTarget::GetIsSet() const {
    return GetSchemaValue<bool>(m_ptr, "CNmTarget", "m_bIsSet");
}

void GCNmTarget::SetIsSet(bool value) {
    SetSchemaValue(m_ptr, "CNmTarget", "m_bIsSet", false, value);
}

std::string GCNmTarget::ToPtr() {
    return string_format("%p", m_ptr);
}

bool GCNmTarget::IsValid() {
    return (m_ptr != nullptr);
}