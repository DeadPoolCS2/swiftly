#include "classes.h"

#include "../../../lua/scripting/core.h"
#include "../../../../crashreporter/CallStack.h"
#include "../../../../sdk/entity/CBaseEntity.h"
#include "../../../../sdk/entity/CBasePlayerController.h"
#include "../../../../sdk/entity/CBaseModelEntity.h"
#include "../../../../sdk/entity/CRecipientFilters.h"
#include "../../../../player/PlayerManager.h"

GCFuncNavObstruction::GCFuncNavObstruction(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCFuncNavObstruction::GCFuncNavObstruction(void *ptr) {
    m_ptr = ptr;
}
bool GCFuncNavObstruction::GetDisabled() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncNavObstruction->Disabled(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CFuncNavObstruction", "m_bDisabled");
}
void GCFuncNavObstruction::SetDisabled(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncNavObstruction->Disabled(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncNavObstruction", "m_bDisabled", false, value);
}
void* GCFuncNavObstruction::GetPtr() {
    return m_ptr;
}
std::string GCFuncNavObstruction::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCFuncNavObstruction::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseModelEntity GCFuncNavObstruction::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFuncNavObstruction::GetParent(ptr=%p)", m_ptr));
    GCBaseModelEntity value(m_ptr);
    return value;
}
void GCFuncNavObstruction::SetParent(GCBaseModelEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFuncNavObstruction::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCFuncNavObstruction(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCFuncNavObstruction>("CFuncNavObstruction")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Disabled", &GCFuncNavObstruction::GetDisabled, &GCFuncNavObstruction::SetDisabled)
        .addProperty("Parent", &GCFuncNavObstruction::GetParent, &GCFuncNavObstruction::SetParent)
        .addFunction("ToPtr", &GCFuncNavObstruction::ToPtr)
        .addFunction("IsValid", &GCFuncNavObstruction::IsValid)
        .endClass();
}
GCTriggerImpact::GCTriggerImpact(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCTriggerImpact::GCTriggerImpact(void *ptr) {
    m_ptr = ptr;
}
float GCTriggerImpact::GetMagnitude() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerImpact->Magnitude(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CTriggerImpact", "m_flMagnitude");
}
void GCTriggerImpact::SetMagnitude(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerImpact->Magnitude(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerImpact", "m_flMagnitude", false, value);
}
float GCTriggerImpact::GetNoise() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerImpact->Noise(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CTriggerImpact", "m_flNoise");
}
void GCTriggerImpact::SetNoise(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerImpact->Noise(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerImpact", "m_flNoise", false, value);
}
float GCTriggerImpact::GetViewkick() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerImpact->Viewkick(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CTriggerImpact", "m_flViewkick");
}
void GCTriggerImpact::SetViewkick(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerImpact->Viewkick(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerImpact", "m_flViewkick", false, value);
}
void* GCTriggerImpact::GetPtr() {
    return m_ptr;
}
std::string GCTriggerImpact::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCTriggerImpact::IsValid() {
    return (m_ptr != nullptr);
}
GCTriggerMultiple GCTriggerImpact::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTriggerImpact::GetParent(ptr=%p)", m_ptr));
    GCTriggerMultiple value(m_ptr);
    return value;
}
void GCTriggerImpact::SetParent(GCTriggerMultiple value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTriggerImpact::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCTriggerImpact(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCTriggerImpact>("CTriggerImpact")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Magnitude", &GCTriggerImpact::GetMagnitude, &GCTriggerImpact::SetMagnitude)
        .addProperty("Noise", &GCTriggerImpact::GetNoise, &GCTriggerImpact::SetNoise)
        .addProperty("Viewkick", &GCTriggerImpact::GetViewkick, &GCTriggerImpact::SetViewkick)
        .addProperty("Parent", &GCTriggerImpact::GetParent, &GCTriggerImpact::SetParent)
        .addFunction("ToPtr", &GCTriggerImpact::ToPtr)
        .addFunction("IsValid", &GCTriggerImpact::IsValid)
        .endClass();
}
GCSun::GCSun(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCSun::GCSun(void *ptr) {
    m_ptr = ptr;
}
Vector GCSun::GetDirection() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSun->Direction(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CSun", "m_vDirection");
}
void GCSun::SetDirection(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSun->Direction(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSun", "m_vDirection", false, value);
}
Color GCSun::GetOverlay() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSun->Overlay(ptr=%p)", m_ptr));
    return GetSchemaValue<Color>(m_ptr, "CSun", "m_clrOverlay");
}
void GCSun::SetOverlay(Color value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSun->Overlay(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSun", "m_clrOverlay", false, value);
}
std::string GCSun::GetEffectName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSun->EffectName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSun", "m_iszEffectName").String();
}
void GCSun::SetEffectName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSun->EffectName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSun", "m_iszEffectName", false, CUtlSymbolLarge(value.c_str()));
}
std::string GCSun::GetSSEffectName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSun->SSEffectName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSun", "m_iszSSEffectName").String();
}
void GCSun::SetSSEffectName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSun->SSEffectName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSun", "m_iszSSEffectName", false, CUtlSymbolLarge(value.c_str()));
}
bool GCSun::GetOn() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSun->On(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CSun", "m_bOn");
}
void GCSun::SetOn(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSun->On(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSun", "m_bOn", false, value);
}
bool GCSun::GetBmaxColor() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSun->BmaxColor(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CSun", "m_bmaxColor");
}
void GCSun::SetBmaxColor(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSun->BmaxColor(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSun", "m_bmaxColor", false, value);
}
float GCSun::GetSize() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSun->Size(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CSun", "m_flSize");
}
void GCSun::SetSize(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSun->Size(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSun", "m_flSize", false, value);
}
float GCSun::GetRotation() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSun->Rotation(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CSun", "m_flRotation");
}
void GCSun::SetRotation(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSun->Rotation(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSun", "m_flRotation", false, value);
}
float GCSun::GetHazeScale() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSun->HazeScale(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CSun", "m_flHazeScale");
}
void GCSun::SetHazeScale(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSun->HazeScale(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSun", "m_flHazeScale", false, value);
}
float GCSun::GetAlphaHaze() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSun->AlphaHaze(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CSun", "m_flAlphaHaze");
}
void GCSun::SetAlphaHaze(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSun->AlphaHaze(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSun", "m_flAlphaHaze", false, value);
}
float GCSun::GetAlphaHdr() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSun->AlphaHdr(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CSun", "m_flAlphaHdr");
}
void GCSun::SetAlphaHdr(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSun->AlphaHdr(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSun", "m_flAlphaHdr", false, value);
}
float GCSun::GetAlphaScale() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSun->AlphaScale(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CSun", "m_flAlphaScale");
}
void GCSun::SetAlphaScale(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSun->AlphaScale(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSun", "m_flAlphaScale", false, value);
}
float GCSun::GetHDRColorScale() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSun->HDRColorScale(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CSun", "m_flHDRColorScale");
}
void GCSun::SetHDRColorScale(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSun->HDRColorScale(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSun", "m_flHDRColorScale", false, value);
}
float GCSun::GetFarZScale() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSun->FarZScale(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CSun", "m_flFarZScale");
}
void GCSun::SetFarZScale(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSun->FarZScale(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSun", "m_flFarZScale", false, value);
}
void* GCSun::GetPtr() {
    return m_ptr;
}
std::string GCSun::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCSun::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseModelEntity GCSun::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSun::GetParent(ptr=%p)", m_ptr));
    GCBaseModelEntity value(m_ptr);
    return value;
}
void GCSun::SetParent(GCBaseModelEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSun::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCSun(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCSun>("CSun")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Direction", &GCSun::GetDirection, &GCSun::SetDirection)
        .addProperty("Overlay", &GCSun::GetOverlay, &GCSun::SetOverlay)
        .addProperty("EffectName", &GCSun::GetEffectName, &GCSun::SetEffectName)
        .addProperty("SSEffectName", &GCSun::GetSSEffectName, &GCSun::SetSSEffectName)
        .addProperty("On", &GCSun::GetOn, &GCSun::SetOn)
        .addProperty("BmaxColor", &GCSun::GetBmaxColor, &GCSun::SetBmaxColor)
        .addProperty("Size", &GCSun::GetSize, &GCSun::SetSize)
        .addProperty("Rotation", &GCSun::GetRotation, &GCSun::SetRotation)
        .addProperty("HazeScale", &GCSun::GetHazeScale, &GCSun::SetHazeScale)
        .addProperty("AlphaHaze", &GCSun::GetAlphaHaze, &GCSun::SetAlphaHaze)
        .addProperty("AlphaHdr", &GCSun::GetAlphaHdr, &GCSun::SetAlphaHdr)
        .addProperty("AlphaScale", &GCSun::GetAlphaScale, &GCSun::SetAlphaScale)
        .addProperty("HDRColorScale", &GCSun::GetHDRColorScale, &GCSun::SetHDRColorScale)
        .addProperty("FarZScale", &GCSun::GetFarZScale, &GCSun::SetFarZScale)
        .addProperty("Parent", &GCSun::GetParent, &GCSun::SetParent)
        .addFunction("ToPtr", &GCSun::ToPtr)
        .addFunction("IsValid", &GCSun::IsValid)
        .endClass();
}
GCTriggerDetectBulletFire::GCTriggerDetectBulletFire(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCTriggerDetectBulletFire::GCTriggerDetectBulletFire(void *ptr) {
    m_ptr = ptr;
}
bool GCTriggerDetectBulletFire::GetPlayerFireOnly() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerDetectBulletFire->PlayerFireOnly(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CTriggerDetectBulletFire", "m_bPlayerFireOnly");
}
void GCTriggerDetectBulletFire::SetPlayerFireOnly(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerDetectBulletFire->PlayerFireOnly(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerDetectBulletFire", "m_bPlayerFireOnly", false, value);
}
GCEntityIOOutput GCTriggerDetectBulletFire::GetOnDetectedBulletFire() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerDetectBulletFire->OnDetectedBulletFire(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CTriggerDetectBulletFire", "m_OnDetectedBulletFire"));
    return value;
}
void GCTriggerDetectBulletFire::SetOnDetectedBulletFire(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerDetectBulletFire->OnDetectedBulletFire(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnDetectedBulletFire' is not possible.\n");
}
void* GCTriggerDetectBulletFire::GetPtr() {
    return m_ptr;
}
std::string GCTriggerDetectBulletFire::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCTriggerDetectBulletFire::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseTrigger GCTriggerDetectBulletFire::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTriggerDetectBulletFire::GetParent(ptr=%p)", m_ptr));
    GCBaseTrigger value(m_ptr);
    return value;
}
void GCTriggerDetectBulletFire::SetParent(GCBaseTrigger value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTriggerDetectBulletFire::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCTriggerDetectBulletFire(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCTriggerDetectBulletFire>("CTriggerDetectBulletFire")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("PlayerFireOnly", &GCTriggerDetectBulletFire::GetPlayerFireOnly, &GCTriggerDetectBulletFire::SetPlayerFireOnly)
        .addProperty("OnDetectedBulletFire", &GCTriggerDetectBulletFire::GetOnDetectedBulletFire, &GCTriggerDetectBulletFire::SetOnDetectedBulletFire)
        .addProperty("Parent", &GCTriggerDetectBulletFire::GetParent, &GCTriggerDetectBulletFire::SetParent)
        .addFunction("ToPtr", &GCTriggerDetectBulletFire::ToPtr)
        .addFunction("IsValid", &GCTriggerDetectBulletFire::IsValid)
        .endClass();
}
GCWorld::GCWorld(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCWorld::GCWorld(void *ptr) {
    m_ptr = ptr;
}
void* GCWorld::GetPtr() {
    return m_ptr;
}
std::string GCWorld::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCWorld::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseModelEntity GCWorld::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWorld::GetParent(ptr=%p)", m_ptr));
    GCBaseModelEntity value(m_ptr);
    return value;
}
void GCWorld::SetParent(GCBaseModelEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWorld::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCWorld(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCWorld>("CWorld")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCWorld::GetParent, &GCWorld::SetParent)
        .addFunction("ToPtr", &GCWorld::ToPtr)
        .addFunction("IsValid", &GCWorld::IsValid)
        .endClass();
}
GCPointGiveAmmo::GCPointGiveAmmo(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPointGiveAmmo::GCPointGiveAmmo(void *ptr) {
    m_ptr = ptr;
}
GCBaseEntity GCPointGiveAmmo::GetActivator() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointGiveAmmo->Activator(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CPointGiveAmmo", "m_pActivator").Get()));
    return value;
}
void GCPointGiveAmmo::SetActivator(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointGiveAmmo->Activator(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Activator' is not possible.\n");
}
void* GCPointGiveAmmo::GetPtr() {
    return m_ptr;
}
std::string GCPointGiveAmmo::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPointGiveAmmo::IsValid() {
    return (m_ptr != nullptr);
}
GCPointEntity GCPointGiveAmmo::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPointGiveAmmo::GetParent(ptr=%p)", m_ptr));
    GCPointEntity value(m_ptr);
    return value;
}
void GCPointGiveAmmo::SetParent(GCPointEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPointGiveAmmo::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCPointGiveAmmo(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPointGiveAmmo>("CPointGiveAmmo")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Activator", &GCPointGiveAmmo::GetActivator, &GCPointGiveAmmo::SetActivator)
        .addProperty("Parent", &GCPointGiveAmmo::GetParent, &GCPointGiveAmmo::SetParent)
        .addFunction("ToPtr", &GCPointGiveAmmo::ToPtr)
        .addFunction("IsValid", &GCPointGiveAmmo::IsValid)
        .endClass();
}
GCFuncMoveLinear::GCFuncMoveLinear(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCFuncMoveLinear::GCFuncMoveLinear(void *ptr) {
    m_ptr = ptr;
}
uint64_t GCFuncMoveLinear::GetAuthoredPosition() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMoveLinear->AuthoredPosition(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CFuncMoveLinear", "m_authoredPosition");
}
void GCFuncMoveLinear::SetAuthoredPosition(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMoveLinear->AuthoredPosition(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMoveLinear", "m_authoredPosition", false, value);
}
QAngle GCFuncMoveLinear::GetMoveEntitySpace() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMoveLinear->MoveEntitySpace(ptr=%p)", m_ptr));
    return GetSchemaValue<QAngle>(m_ptr, "CFuncMoveLinear", "m_angMoveEntitySpace");
}
void GCFuncMoveLinear::SetMoveEntitySpace(QAngle value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMoveLinear->MoveEntitySpace(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMoveLinear", "m_angMoveEntitySpace", false, value);
}
Vector GCFuncMoveLinear::GetMoveDirParentSpace() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMoveLinear->MoveDirParentSpace(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CFuncMoveLinear", "m_vecMoveDirParentSpace");
}
void GCFuncMoveLinear::SetMoveDirParentSpace(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMoveLinear->MoveDirParentSpace(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMoveLinear", "m_vecMoveDirParentSpace", false, value);
}
std::string GCFuncMoveLinear::GetSoundStart() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMoveLinear->SoundStart(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncMoveLinear", "m_soundStart").String();
}
void GCFuncMoveLinear::SetSoundStart(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMoveLinear->SoundStart(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMoveLinear", "m_soundStart", false, CUtlSymbolLarge(value.c_str()));
}
std::string GCFuncMoveLinear::GetSoundStop() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMoveLinear->SoundStop(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncMoveLinear", "m_soundStop").String();
}
void GCFuncMoveLinear::SetSoundStop(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMoveLinear->SoundStop(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMoveLinear", "m_soundStop", false, CUtlSymbolLarge(value.c_str()));
}
std::string GCFuncMoveLinear::GetCurrentSound() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMoveLinear->CurrentSound(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncMoveLinear", "m_currentSound").String();
}
void GCFuncMoveLinear::SetCurrentSound(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMoveLinear->CurrentSound(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMoveLinear", "m_currentSound", false, CUtlSymbolLarge(value.c_str()));
}
float GCFuncMoveLinear::GetBlockDamage() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMoveLinear->BlockDamage(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CFuncMoveLinear", "m_flBlockDamage");
}
void GCFuncMoveLinear::SetBlockDamage(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMoveLinear->BlockDamage(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMoveLinear", "m_flBlockDamage", false, value);
}
float GCFuncMoveLinear::GetStartPosition() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMoveLinear->StartPosition(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CFuncMoveLinear", "m_flStartPosition");
}
void GCFuncMoveLinear::SetStartPosition(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMoveLinear->StartPosition(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMoveLinear", "m_flStartPosition", false, value);
}
GCEntityIOOutput GCFuncMoveLinear::GetOnFullyOpen() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMoveLinear->OnFullyOpen(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CFuncMoveLinear", "m_OnFullyOpen"));
    return value;
}
void GCFuncMoveLinear::SetOnFullyOpen(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMoveLinear->OnFullyOpen(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnFullyOpen' is not possible.\n");
}
GCEntityIOOutput GCFuncMoveLinear::GetOnFullyClosed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMoveLinear->OnFullyClosed(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CFuncMoveLinear", "m_OnFullyClosed"));
    return value;
}
void GCFuncMoveLinear::SetOnFullyClosed(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMoveLinear->OnFullyClosed(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnFullyClosed' is not possible.\n");
}
bool GCFuncMoveLinear::GetCreateMovableNavMesh() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMoveLinear->CreateMovableNavMesh(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CFuncMoveLinear", "m_bCreateMovableNavMesh");
}
void GCFuncMoveLinear::SetCreateMovableNavMesh(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMoveLinear->CreateMovableNavMesh(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMoveLinear", "m_bCreateMovableNavMesh", false, value);
}
bool GCFuncMoveLinear::GetCreateNavObstacle() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMoveLinear->CreateNavObstacle(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CFuncMoveLinear", "m_bCreateNavObstacle");
}
void GCFuncMoveLinear::SetCreateNavObstacle(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMoveLinear->CreateNavObstacle(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMoveLinear", "m_bCreateNavObstacle", false, value);
}
void* GCFuncMoveLinear::GetPtr() {
    return m_ptr;
}
std::string GCFuncMoveLinear::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCFuncMoveLinear::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseToggle GCFuncMoveLinear::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFuncMoveLinear::GetParent(ptr=%p)", m_ptr));
    GCBaseToggle value(m_ptr);
    return value;
}
void GCFuncMoveLinear::SetParent(GCBaseToggle value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFuncMoveLinear::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCFuncMoveLinear(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCFuncMoveLinear>("CFuncMoveLinear")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("AuthoredPosition", &GCFuncMoveLinear::GetAuthoredPosition, &GCFuncMoveLinear::SetAuthoredPosition)
        .addProperty("MoveEntitySpace", &GCFuncMoveLinear::GetMoveEntitySpace, &GCFuncMoveLinear::SetMoveEntitySpace)
        .addProperty("MoveDirParentSpace", &GCFuncMoveLinear::GetMoveDirParentSpace, &GCFuncMoveLinear::SetMoveDirParentSpace)
        .addProperty("SoundStart", &GCFuncMoveLinear::GetSoundStart, &GCFuncMoveLinear::SetSoundStart)
        .addProperty("SoundStop", &GCFuncMoveLinear::GetSoundStop, &GCFuncMoveLinear::SetSoundStop)
        .addProperty("CurrentSound", &GCFuncMoveLinear::GetCurrentSound, &GCFuncMoveLinear::SetCurrentSound)
        .addProperty("BlockDamage", &GCFuncMoveLinear::GetBlockDamage, &GCFuncMoveLinear::SetBlockDamage)
        .addProperty("StartPosition", &GCFuncMoveLinear::GetStartPosition, &GCFuncMoveLinear::SetStartPosition)
        .addProperty("OnFullyOpen", &GCFuncMoveLinear::GetOnFullyOpen, &GCFuncMoveLinear::SetOnFullyOpen)
        .addProperty("OnFullyClosed", &GCFuncMoveLinear::GetOnFullyClosed, &GCFuncMoveLinear::SetOnFullyClosed)
        .addProperty("CreateMovableNavMesh", &GCFuncMoveLinear::GetCreateMovableNavMesh, &GCFuncMoveLinear::SetCreateMovableNavMesh)
        .addProperty("CreateNavObstacle", &GCFuncMoveLinear::GetCreateNavObstacle, &GCFuncMoveLinear::SetCreateNavObstacle)
        .addProperty("Parent", &GCFuncMoveLinear::GetParent, &GCFuncMoveLinear::SetParent)
        .addFunction("ToPtr", &GCFuncMoveLinear::ToPtr)
        .addFunction("IsValid", &GCFuncMoveLinear::IsValid)
        .endClass();
}
GCPathParticleRope::GCPathParticleRope(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPathParticleRope::GCPathParticleRope(void *ptr) {
    m_ptr = ptr;
}
bool GCPathParticleRope::GetStartActive() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPathParticleRope->StartActive(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPathParticleRope", "m_bStartActive");
}
void GCPathParticleRope::SetStartActive(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPathParticleRope->StartActive(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPathParticleRope", "m_bStartActive", false, value);
}
float GCPathParticleRope::GetMaxSimulationTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPathParticleRope->MaxSimulationTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPathParticleRope", "m_flMaxSimulationTime");
}
void GCPathParticleRope::SetMaxSimulationTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPathParticleRope->MaxSimulationTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPathParticleRope", "m_flMaxSimulationTime", false, value);
}
std::string GCPathParticleRope::GetEffectName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPathParticleRope->EffectName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPathParticleRope", "m_iszEffectName").String();
}
void GCPathParticleRope::SetEffectName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPathParticleRope->EffectName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPathParticleRope", "m_iszEffectName", false, CUtlSymbolLarge(value.c_str()));
}
std::vector<CUtlSymbolLarge> GCPathParticleRope::GetPathNodes_Name() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPathParticleRope->PathNodes_Name(ptr=%p)", m_ptr));
    CUtlVector<CUtlSymbolLarge>* vec = GetSchemaValue<CUtlVector<CUtlSymbolLarge>*>(m_ptr, "CPathParticleRope", "m_PathNodes_Name"); std::vector<CUtlSymbolLarge> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCPathParticleRope::SetPathNodes_Name(std::vector<CUtlSymbolLarge> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPathParticleRope->PathNodes_Name(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<CUtlSymbolLarge>(m_ptr, "CPathParticleRope", "m_PathNodes_Name", false, value);
}
float GCPathParticleRope::GetParticleSpacing() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPathParticleRope->ParticleSpacing(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPathParticleRope", "m_flParticleSpacing");
}
void GCPathParticleRope::SetParticleSpacing(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPathParticleRope->ParticleSpacing(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPathParticleRope", "m_flParticleSpacing", false, value);
}
float GCPathParticleRope::GetSlack() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPathParticleRope->Slack(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPathParticleRope", "m_flSlack");
}
void GCPathParticleRope::SetSlack(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPathParticleRope->Slack(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPathParticleRope", "m_flSlack", false, value);
}
float GCPathParticleRope::GetRadius() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPathParticleRope->Radius(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPathParticleRope", "m_flRadius");
}
void GCPathParticleRope::SetRadius(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPathParticleRope->Radius(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPathParticleRope", "m_flRadius", false, value);
}
Color GCPathParticleRope::GetColorTint() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPathParticleRope->ColorTint(ptr=%p)", m_ptr));
    return GetSchemaValue<Color>(m_ptr, "CPathParticleRope", "m_ColorTint");
}
void GCPathParticleRope::SetColorTint(Color value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPathParticleRope->ColorTint(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPathParticleRope", "m_ColorTint", false, value);
}
int32_t GCPathParticleRope::GetEffectState() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPathParticleRope->EffectState(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CPathParticleRope", "m_nEffectState");
}
void GCPathParticleRope::SetEffectState(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPathParticleRope->EffectState(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPathParticleRope", "m_nEffectState", false, value);
}
std::vector<Vector> GCPathParticleRope::GetPathNodes_Position() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPathParticleRope->PathNodes_Position(ptr=%p)", m_ptr));
    CUtlVector<Vector>* vec = GetSchemaValue<CUtlVector<Vector>*>(m_ptr, "CPathParticleRope", "m_PathNodes_Position"); std::vector<Vector> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCPathParticleRope::SetPathNodes_Position(std::vector<Vector> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPathParticleRope->PathNodes_Position(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<Vector>(m_ptr, "CPathParticleRope", "m_PathNodes_Position", false, value);
}
std::vector<Vector> GCPathParticleRope::GetPathNodes_TangentIn() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPathParticleRope->PathNodes_TangentIn(ptr=%p)", m_ptr));
    CUtlVector<Vector>* vec = GetSchemaValue<CUtlVector<Vector>*>(m_ptr, "CPathParticleRope", "m_PathNodes_TangentIn"); std::vector<Vector> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCPathParticleRope::SetPathNodes_TangentIn(std::vector<Vector> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPathParticleRope->PathNodes_TangentIn(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<Vector>(m_ptr, "CPathParticleRope", "m_PathNodes_TangentIn", false, value);
}
std::vector<Vector> GCPathParticleRope::GetPathNodes_TangentOut() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPathParticleRope->PathNodes_TangentOut(ptr=%p)", m_ptr));
    CUtlVector<Vector>* vec = GetSchemaValue<CUtlVector<Vector>*>(m_ptr, "CPathParticleRope", "m_PathNodes_TangentOut"); std::vector<Vector> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCPathParticleRope::SetPathNodes_TangentOut(std::vector<Vector> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPathParticleRope->PathNodes_TangentOut(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<Vector>(m_ptr, "CPathParticleRope", "m_PathNodes_TangentOut", false, value);
}
std::vector<Vector> GCPathParticleRope::GetPathNodes_Color() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPathParticleRope->PathNodes_Color(ptr=%p)", m_ptr));
    CUtlVector<Vector>* vec = GetSchemaValue<CUtlVector<Vector>*>(m_ptr, "CPathParticleRope", "m_PathNodes_Color"); std::vector<Vector> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCPathParticleRope::SetPathNodes_Color(std::vector<Vector> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPathParticleRope->PathNodes_Color(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<Vector>(m_ptr, "CPathParticleRope", "m_PathNodes_Color", false, value);
}
std::vector<bool> GCPathParticleRope::GetPathNodes_PinEnabled() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPathParticleRope->PathNodes_PinEnabled(ptr=%p)", m_ptr));
    CUtlVector<bool>* vec = GetSchemaValue<CUtlVector<bool>*>(m_ptr, "CPathParticleRope", "m_PathNodes_PinEnabled"); std::vector<bool> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCPathParticleRope::SetPathNodes_PinEnabled(std::vector<bool> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPathParticleRope->PathNodes_PinEnabled(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<bool>(m_ptr, "CPathParticleRope", "m_PathNodes_PinEnabled", false, value);
}
std::vector<float32> GCPathParticleRope::GetPathNodes_RadiusScale() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPathParticleRope->PathNodes_RadiusScale(ptr=%p)", m_ptr));
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "CPathParticleRope", "m_PathNodes_RadiusScale"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCPathParticleRope::SetPathNodes_RadiusScale(std::vector<float32> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPathParticleRope->PathNodes_RadiusScale(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<float32>(m_ptr, "CPathParticleRope", "m_PathNodes_RadiusScale", false, value);
}
void* GCPathParticleRope::GetPtr() {
    return m_ptr;
}
std::string GCPathParticleRope::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPathParticleRope::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseEntity GCPathParticleRope::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPathParticleRope::GetParent(ptr=%p)", m_ptr));
    GCBaseEntity value(m_ptr);
    return value;
}
void GCPathParticleRope::SetParent(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPathParticleRope::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCPathParticleRope(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPathParticleRope>("CPathParticleRope")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("StartActive", &GCPathParticleRope::GetStartActive, &GCPathParticleRope::SetStartActive)
        .addProperty("MaxSimulationTime", &GCPathParticleRope::GetMaxSimulationTime, &GCPathParticleRope::SetMaxSimulationTime)
        .addProperty("EffectName", &GCPathParticleRope::GetEffectName, &GCPathParticleRope::SetEffectName)
        .addProperty("PathNodes_Name", &GCPathParticleRope::GetPathNodes_Name, &GCPathParticleRope::SetPathNodes_Name)
        .addProperty("ParticleSpacing", &GCPathParticleRope::GetParticleSpacing, &GCPathParticleRope::SetParticleSpacing)
        .addProperty("Slack", &GCPathParticleRope::GetSlack, &GCPathParticleRope::SetSlack)
        .addProperty("Radius", &GCPathParticleRope::GetRadius, &GCPathParticleRope::SetRadius)
        .addProperty("ColorTint", &GCPathParticleRope::GetColorTint, &GCPathParticleRope::SetColorTint)
        .addProperty("EffectState", &GCPathParticleRope::GetEffectState, &GCPathParticleRope::SetEffectState)
        .addProperty("PathNodes_Position", &GCPathParticleRope::GetPathNodes_Position, &GCPathParticleRope::SetPathNodes_Position)
        .addProperty("PathNodes_TangentIn", &GCPathParticleRope::GetPathNodes_TangentIn, &GCPathParticleRope::SetPathNodes_TangentIn)
        .addProperty("PathNodes_TangentOut", &GCPathParticleRope::GetPathNodes_TangentOut, &GCPathParticleRope::SetPathNodes_TangentOut)
        .addProperty("PathNodes_Color", &GCPathParticleRope::GetPathNodes_Color, &GCPathParticleRope::SetPathNodes_Color)
        .addProperty("PathNodes_PinEnabled", &GCPathParticleRope::GetPathNodes_PinEnabled, &GCPathParticleRope::SetPathNodes_PinEnabled)
        .addProperty("PathNodes_RadiusScale", &GCPathParticleRope::GetPathNodes_RadiusScale, &GCPathParticleRope::SetPathNodes_RadiusScale)
        .addProperty("Parent", &GCPathParticleRope::GetParent, &GCPathParticleRope::SetParent)
        .addFunction("ToPtr", &GCPathParticleRope::ToPtr)
        .addFunction("IsValid", &GCPathParticleRope::IsValid)
        .endClass();
}
GCPlayerVisibility::GCPlayerVisibility(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPlayerVisibility::GCPlayerVisibility(void *ptr) {
    m_ptr = ptr;
}
float GCPlayerVisibility::GetVisibilityStrength() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPlayerVisibility->VisibilityStrength(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPlayerVisibility", "m_flVisibilityStrength");
}
void GCPlayerVisibility::SetVisibilityStrength(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPlayerVisibility->VisibilityStrength(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPlayerVisibility", "m_flVisibilityStrength", false, value);
}
float GCPlayerVisibility::GetFogDistanceMultiplier() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPlayerVisibility->FogDistanceMultiplier(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPlayerVisibility", "m_flFogDistanceMultiplier");
}
void GCPlayerVisibility::SetFogDistanceMultiplier(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPlayerVisibility->FogDistanceMultiplier(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPlayerVisibility", "m_flFogDistanceMultiplier", false, value);
}
float GCPlayerVisibility::GetFogMaxDensityMultiplier() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPlayerVisibility->FogMaxDensityMultiplier(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPlayerVisibility", "m_flFogMaxDensityMultiplier");
}
void GCPlayerVisibility::SetFogMaxDensityMultiplier(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPlayerVisibility->FogMaxDensityMultiplier(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPlayerVisibility", "m_flFogMaxDensityMultiplier", false, value);
}
float GCPlayerVisibility::GetFadeTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPlayerVisibility->FadeTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPlayerVisibility", "m_flFadeTime");
}
void GCPlayerVisibility::SetFadeTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPlayerVisibility->FadeTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPlayerVisibility", "m_flFadeTime", false, value);
}
bool GCPlayerVisibility::GetStartDisabled() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPlayerVisibility->StartDisabled(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPlayerVisibility", "m_bStartDisabled");
}
void GCPlayerVisibility::SetStartDisabled(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPlayerVisibility->StartDisabled(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPlayerVisibility", "m_bStartDisabled", false, value);
}
bool GCPlayerVisibility::GetIsEnabled() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPlayerVisibility->IsEnabled(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPlayerVisibility", "m_bIsEnabled");
}
void GCPlayerVisibility::SetIsEnabled(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPlayerVisibility->IsEnabled(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPlayerVisibility", "m_bIsEnabled", false, value);
}
void* GCPlayerVisibility::GetPtr() {
    return m_ptr;
}
std::string GCPlayerVisibility::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPlayerVisibility::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseEntity GCPlayerVisibility::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPlayerVisibility::GetParent(ptr=%p)", m_ptr));
    GCBaseEntity value(m_ptr);
    return value;
}
void GCPlayerVisibility::SetParent(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPlayerVisibility::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCPlayerVisibility(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPlayerVisibility>("CPlayerVisibility")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("VisibilityStrength", &GCPlayerVisibility::GetVisibilityStrength, &GCPlayerVisibility::SetVisibilityStrength)
        .addProperty("FogDistanceMultiplier", &GCPlayerVisibility::GetFogDistanceMultiplier, &GCPlayerVisibility::SetFogDistanceMultiplier)
        .addProperty("FogMaxDensityMultiplier", &GCPlayerVisibility::GetFogMaxDensityMultiplier, &GCPlayerVisibility::SetFogMaxDensityMultiplier)
        .addProperty("FadeTime", &GCPlayerVisibility::GetFadeTime, &GCPlayerVisibility::SetFadeTime)
        .addProperty("StartDisabled", &GCPlayerVisibility::GetStartDisabled, &GCPlayerVisibility::SetStartDisabled)
        .addProperty("IsEnabled", &GCPlayerVisibility::GetIsEnabled, &GCPlayerVisibility::SetIsEnabled)
        .addProperty("Parent", &GCPlayerVisibility::GetParent, &GCPlayerVisibility::SetParent)
        .addFunction("ToPtr", &GCPlayerVisibility::ToPtr)
        .addFunction("IsValid", &GCPlayerVisibility::IsValid)
        .endClass();
}
GCPointTeleport::GCPointTeleport(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPointTeleport::GCPointTeleport(void *ptr) {
    m_ptr = ptr;
}
Vector GCPointTeleport::GetSaveOrigin() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointTeleport->SaveOrigin(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CPointTeleport", "m_vSaveOrigin");
}
void GCPointTeleport::SetSaveOrigin(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointTeleport->SaveOrigin(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointTeleport", "m_vSaveOrigin", false, value);
}
QAngle GCPointTeleport::GetSaveAngles() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointTeleport->SaveAngles(ptr=%p)", m_ptr));
    return GetSchemaValue<QAngle>(m_ptr, "CPointTeleport", "m_vSaveAngles");
}
void GCPointTeleport::SetSaveAngles(QAngle value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointTeleport->SaveAngles(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointTeleport", "m_vSaveAngles", false, value);
}
bool GCPointTeleport::GetTeleportParentedEntities() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointTeleport->TeleportParentedEntities(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPointTeleport", "m_bTeleportParentedEntities");
}
void GCPointTeleport::SetTeleportParentedEntities(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointTeleport->TeleportParentedEntities(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointTeleport", "m_bTeleportParentedEntities", false, value);
}
bool GCPointTeleport::GetTeleportUseCurrentAngle() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointTeleport->TeleportUseCurrentAngle(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPointTeleport", "m_bTeleportUseCurrentAngle");
}
void GCPointTeleport::SetTeleportUseCurrentAngle(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointTeleport->TeleportUseCurrentAngle(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointTeleport", "m_bTeleportUseCurrentAngle", false, value);
}
void* GCPointTeleport::GetPtr() {
    return m_ptr;
}
std::string GCPointTeleport::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPointTeleport::IsValid() {
    return (m_ptr != nullptr);
}
GCServerOnlyPointEntity GCPointTeleport::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPointTeleport::GetParent(ptr=%p)", m_ptr));
    GCServerOnlyPointEntity value(m_ptr);
    return value;
}
void GCPointTeleport::SetParent(GCServerOnlyPointEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPointTeleport::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCPointTeleport(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPointTeleport>("CPointTeleport")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("SaveOrigin", &GCPointTeleport::GetSaveOrigin, &GCPointTeleport::SetSaveOrigin)
        .addProperty("SaveAngles", &GCPointTeleport::GetSaveAngles, &GCPointTeleport::SetSaveAngles)
        .addProperty("TeleportParentedEntities", &GCPointTeleport::GetTeleportParentedEntities, &GCPointTeleport::SetTeleportParentedEntities)
        .addProperty("TeleportUseCurrentAngle", &GCPointTeleport::GetTeleportUseCurrentAngle, &GCPointTeleport::SetTeleportUseCurrentAngle)
        .addProperty("Parent", &GCPointTeleport::GetParent, &GCPointTeleport::SetParent)
        .addFunction("ToPtr", &GCPointTeleport::ToPtr)
        .addFunction("IsValid", &GCPointTeleport::IsValid)
        .endClass();
}
GCAK47::GCAK47(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCAK47::GCAK47(void *ptr) {
    m_ptr = ptr;
}
void* GCAK47::GetPtr() {
    return m_ptr;
}
std::string GCAK47::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCAK47::IsValid() {
    return (m_ptr != nullptr);
}
GCCSWeaponBaseGun GCAK47::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CAK47::GetParent(ptr=%p)", m_ptr));
    GCCSWeaponBaseGun value(m_ptr);
    return value;
}
void GCAK47::SetParent(GCCSWeaponBaseGun value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CAK47::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCAK47(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCAK47>("CAK47")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCAK47::GetParent, &GCAK47::SetParent)
        .addFunction("ToPtr", &GCAK47::ToPtr)
        .addFunction("IsValid", &GCAK47::IsValid)
        .endClass();
}
GCTriggerTeleport::GCTriggerTeleport(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCTriggerTeleport::GCTriggerTeleport(void *ptr) {
    m_ptr = ptr;
}
std::string GCTriggerTeleport::GetLandmark() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerTeleport->Landmark(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CTriggerTeleport", "m_iLandmark").String();
}
void GCTriggerTeleport::SetLandmark(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerTeleport->Landmark(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerTeleport", "m_iLandmark", false, CUtlSymbolLarge(value.c_str()));
}
bool GCTriggerTeleport::GetUseLandmarkAngles() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerTeleport->UseLandmarkAngles(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CTriggerTeleport", "m_bUseLandmarkAngles");
}
void GCTriggerTeleport::SetUseLandmarkAngles(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerTeleport->UseLandmarkAngles(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerTeleport", "m_bUseLandmarkAngles", false, value);
}
bool GCTriggerTeleport::GetMirrorPlayer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerTeleport->MirrorPlayer(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CTriggerTeleport", "m_bMirrorPlayer");
}
void GCTriggerTeleport::SetMirrorPlayer(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerTeleport->MirrorPlayer(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerTeleport", "m_bMirrorPlayer", false, value);
}
void* GCTriggerTeleport::GetPtr() {
    return m_ptr;
}
std::string GCTriggerTeleport::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCTriggerTeleport::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseTrigger GCTriggerTeleport::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTriggerTeleport::GetParent(ptr=%p)", m_ptr));
    GCBaseTrigger value(m_ptr);
    return value;
}
void GCTriggerTeleport::SetParent(GCBaseTrigger value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTriggerTeleport::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCTriggerTeleport(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCTriggerTeleport>("CTriggerTeleport")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Landmark", &GCTriggerTeleport::GetLandmark, &GCTriggerTeleport::SetLandmark)
        .addProperty("UseLandmarkAngles", &GCTriggerTeleport::GetUseLandmarkAngles, &GCTriggerTeleport::SetUseLandmarkAngles)
        .addProperty("MirrorPlayer", &GCTriggerTeleport::GetMirrorPlayer, &GCTriggerTeleport::SetMirrorPlayer)
        .addProperty("Parent", &GCTriggerTeleport::GetParent, &GCTriggerTeleport::SetParent)
        .addFunction("ToPtr", &GCTriggerTeleport::ToPtr)
        .addFunction("IsValid", &GCTriggerTeleport::IsValid)
        .endClass();
}
GCCSObserver_CameraServices::GCCSObserver_CameraServices(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCCSObserver_CameraServices::GCCSObserver_CameraServices(void *ptr) {
    m_ptr = ptr;
}
void* GCCSObserver_CameraServices::GetPtr() {
    return m_ptr;
}
std::string GCCSObserver_CameraServices::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCCSObserver_CameraServices::IsValid() {
    return (m_ptr != nullptr);
}
GCCSPlayerBase_CameraServices GCCSObserver_CameraServices::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSObserver_CameraServices::GetParent(ptr=%p)", m_ptr));
    GCCSPlayerBase_CameraServices value(m_ptr);
    return value;
}
void GCCSObserver_CameraServices::SetParent(GCCSPlayerBase_CameraServices value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSObserver_CameraServices::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCCSObserver_CameraServices(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCCSObserver_CameraServices>("CCSObserver_CameraServices")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCCSObserver_CameraServices::GetParent, &GCCSObserver_CameraServices::SetParent)
        .addFunction("ToPtr", &GCCSObserver_CameraServices::ToPtr)
        .addFunction("IsValid", &GCCSObserver_CameraServices::IsValid)
        .endClass();
}
GCCSGO_TeamIntroTerroristPosition::GCCSGO_TeamIntroTerroristPosition(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCCSGO_TeamIntroTerroristPosition::GCCSGO_TeamIntroTerroristPosition(void *ptr) {
    m_ptr = ptr;
}
void* GCCSGO_TeamIntroTerroristPosition::GetPtr() {
    return m_ptr;
}
std::string GCCSGO_TeamIntroTerroristPosition::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCCSGO_TeamIntroTerroristPosition::IsValid() {
    return (m_ptr != nullptr);
}
GCCSGO_TeamIntroCharacterPosition GCCSGO_TeamIntroTerroristPosition::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSGO_TeamIntroTerroristPosition::GetParent(ptr=%p)", m_ptr));
    GCCSGO_TeamIntroCharacterPosition value(m_ptr);
    return value;
}
void GCCSGO_TeamIntroTerroristPosition::SetParent(GCCSGO_TeamIntroCharacterPosition value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSGO_TeamIntroTerroristPosition::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCCSGO_TeamIntroTerroristPosition(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCCSGO_TeamIntroTerroristPosition>("CCSGO_TeamIntroTerroristPosition")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCCSGO_TeamIntroTerroristPosition::GetParent, &GCCSGO_TeamIntroTerroristPosition::SetParent)
        .addFunction("ToPtr", &GCCSGO_TeamIntroTerroristPosition::ToPtr)
        .addFunction("IsValid", &GCCSGO_TeamIntroTerroristPosition::IsValid)
        .endClass();
}
GCFuncMover::GCFuncMover(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCFuncMover::GCFuncMover(void *ptr) {
    m_ptr = ptr;
}
std::string GCFuncMover::GetPathName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMover->PathName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncMover", "m_iszPathName").String();
}
void GCFuncMover::SetPathName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMover->PathName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMover", "m_iszPathName", false, CUtlSymbolLarge(value.c_str()));
}
GCPathMover GCFuncMover::GetPathMover() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMover->PathMover(ptr=%p)", m_ptr));
    GCPathMover value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CFuncMover", "m_hPathMover").Get()));
    return value;
}
void GCFuncMover::SetPathMover(GCPathMover value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMover->PathMover(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'PathMover' is not possible.\n");
}
std::string GCFuncMover::GetPathNodeStart() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMover->PathNodeStart(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncMover", "m_iszPathNodeStart").String();
}
void GCFuncMover::SetPathNodeStart(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMover->PathNodeStart(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMover", "m_iszPathNodeStart", false, CUtlSymbolLarge(value.c_str()));
}
GCFuncMover GCFuncMover::GetMoveType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMover->MoveType(ptr=%p)", m_ptr));
    GCFuncMover value(GetSchemaPtr(m_ptr, "CFuncMover", "m_eMoveType"));
    return value;
}
void GCFuncMover::SetMoveType(GCFuncMover value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMover->MoveType(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'MoveType' is not possible.\n");
}
bool GCFuncMover::GetIsReversing() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMover->IsReversing(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CFuncMover", "m_bIsReversing");
}
void GCFuncMover::SetIsReversing(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMover->IsReversing(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMover", "m_bIsReversing", false, value);
}
Vector GCFuncMover::GetTarget() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMover->Target(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CFuncMover", "m_vTarget");
}
void GCFuncMover::SetTarget(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMover->Target(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMover", "m_vTarget", false, value);
}
float GCFuncMover::GetStartSpeed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMover->StartSpeed(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CFuncMover", "m_flStartSpeed");
}
void GCFuncMover::SetStartSpeed(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMover->StartSpeed(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMover", "m_flStartSpeed", false, value);
}
float GCFuncMover::GetPathLocation() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMover->PathLocation(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CFuncMover", "m_flPathLocation");
}
void GCFuncMover::SetPathLocation(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMover->PathLocation(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMover", "m_flPathLocation", false, value);
}
float GCFuncMover::GetT() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMover->T(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CFuncMover", "m_flT");
}
void GCFuncMover::SetT(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMover->T(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMover", "m_flT", false, value);
}
int32_t GCFuncMover::GetCurrentNodeIndex() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMover->CurrentNodeIndex(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CFuncMover", "m_nCurrentNodeIndex");
}
void GCFuncMover::SetCurrentNodeIndex(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMover->CurrentNodeIndex(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMover", "m_nCurrentNodeIndex", false, value);
}
int32_t GCFuncMover::GetPreviousNodeIndex() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMover->PreviousNodeIndex(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CFuncMover", "m_nPreviousNodeIndex");
}
void GCFuncMover::SetPreviousNodeIndex(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMover->PreviousNodeIndex(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMover", "m_nPreviousNodeIndex", false, value);
}
bool GCFuncMover::GetFixedOrientation() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMover->FixedOrientation(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CFuncMover", "m_bFixedOrientation");
}
void GCFuncMover::SetFixedOrientation(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMover->FixedOrientation(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMover", "m_bFixedOrientation", false, value);
}
bool GCFuncMover::GetFixedPitch() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMover->FixedPitch(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CFuncMover", "m_bFixedPitch");
}
void GCFuncMover::SetFixedPitch(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMover->FixedPitch(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMover", "m_bFixedPitch", false, value);
}
uint64_t GCFuncMover::GetSolidType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMover->SolidType(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CFuncMover", "m_eSolidType");
}
void GCFuncMover::SetSolidType(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMover->SolidType(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMover", "m_eSolidType", false, value);
}
bool GCFuncMover::GetIsMoving() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMover->IsMoving(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CFuncMover", "m_bIsMoving");
}
void GCFuncMover::SetIsMoving(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMover->IsMoving(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMover", "m_bIsMoving", false, value);
}
float GCFuncMover::GetTimeToReachMaxSpeed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMover->TimeToReachMaxSpeed(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CFuncMover", "m_flTimeToReachMaxSpeed");
}
void GCFuncMover::SetTimeToReachMaxSpeed(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMover->TimeToReachMaxSpeed(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMover", "m_flTimeToReachMaxSpeed", false, value);
}
float GCFuncMover::GetTimeToReachZeroSpeed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMover->TimeToReachZeroSpeed(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CFuncMover", "m_flTimeToReachZeroSpeed");
}
void GCFuncMover::SetTimeToReachZeroSpeed(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMover->TimeToReachZeroSpeed(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMover", "m_flTimeToReachZeroSpeed", false, value);
}
float GCFuncMover::GetTimeMovementStart() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMover->TimeMovementStart(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CFuncMover", "m_flTimeMovementStart");
}
void GCFuncMover::SetTimeMovementStart(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMover->TimeMovementStart(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMover", "m_flTimeMovementStart", false, value);
}
float GCFuncMover::GetTimeMovementStop() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMover->TimeMovementStop(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CFuncMover", "m_flTimeMovementStop");
}
void GCFuncMover::SetTimeMovementStop(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMover->TimeMovementStop(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMover", "m_flTimeMovementStop", false, value);
}
GCMoverPathNode GCFuncMover::GetStopAtNode() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMover->StopAtNode(ptr=%p)", m_ptr));
    GCMoverPathNode value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CFuncMover", "m_hStopAtNode").Get()));
    return value;
}
void GCFuncMover::SetStopAtNode(GCMoverPathNode value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMover->StopAtNode(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'StopAtNode' is not possible.\n");
}
float GCFuncMover::GetPathLocationToBeginStop() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMover->PathLocationToBeginStop(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CFuncMover", "m_flPathLocationToBeginStop");
}
void GCFuncMover::SetPathLocationToBeginStop(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMover->PathLocationToBeginStop(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMover", "m_flPathLocationToBeginStop", false, value);
}
bool GCFuncMover::GetMatchPathNodeUp() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMover->MatchPathNodeUp(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CFuncMover", "m_bMatchPathNodeUp");
}
void GCFuncMover::SetMatchPathNodeUp(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMover->MatchPathNodeUp(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMover", "m_bMatchPathNodeUp", false, value);
}
bool GCFuncMover::GetFacePlayer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMover->FacePlayer(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CFuncMover", "m_bFacePlayer");
}
void GCFuncMover::SetFacePlayer(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMover->FacePlayer(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMover", "m_bFacePlayer", false, value);
}
float GCFuncMover::GetTimeStartRoll() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMover->TimeStartRoll(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CFuncMover", "m_flTimeStartRoll");
}
void GCFuncMover::SetTimeStartRoll(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMover->TimeStartRoll(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMover", "m_flTimeStartRoll", false, value);
}
Vector GCFuncMover::GetOriginalUp() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMover->OriginalUp(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CFuncMover", "m_vOriginalUp");
}
void GCFuncMover::SetOriginalUp(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMover->OriginalUp(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMover", "m_vOriginalUp", false, value);
}
float GCFuncMover::GetTimeToRollToNewUp() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMover->TimeToRollToNewUp(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CFuncMover", "m_flTimeToRollToNewUp");
}
void GCFuncMover::SetTimeToRollToNewUp(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMover->TimeToRollToNewUp(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMover", "m_flTimeToRollToNewUp", false, value);
}
void* GCFuncMover::GetPtr() {
    return m_ptr;
}
std::string GCFuncMover::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCFuncMover::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseModelEntity GCFuncMover::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFuncMover::GetParent(ptr=%p)", m_ptr));
    GCBaseModelEntity value(m_ptr);
    return value;
}
void GCFuncMover::SetParent(GCBaseModelEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFuncMover::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCFuncMover(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCFuncMover>("CFuncMover")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("PathName", &GCFuncMover::GetPathName, &GCFuncMover::SetPathName)
        .addProperty("PathMover", &GCFuncMover::GetPathMover, &GCFuncMover::SetPathMover)
        .addProperty("PathNodeStart", &GCFuncMover::GetPathNodeStart, &GCFuncMover::SetPathNodeStart)
        .addProperty("MoveType", &GCFuncMover::GetMoveType, &GCFuncMover::SetMoveType)
        .addProperty("IsReversing", &GCFuncMover::GetIsReversing, &GCFuncMover::SetIsReversing)
        .addProperty("Target", &GCFuncMover::GetTarget, &GCFuncMover::SetTarget)
        .addProperty("StartSpeed", &GCFuncMover::GetStartSpeed, &GCFuncMover::SetStartSpeed)
        .addProperty("PathLocation", &GCFuncMover::GetPathLocation, &GCFuncMover::SetPathLocation)
        .addProperty("T", &GCFuncMover::GetT, &GCFuncMover::SetT)
        .addProperty("CurrentNodeIndex", &GCFuncMover::GetCurrentNodeIndex, &GCFuncMover::SetCurrentNodeIndex)
        .addProperty("PreviousNodeIndex", &GCFuncMover::GetPreviousNodeIndex, &GCFuncMover::SetPreviousNodeIndex)
        .addProperty("FixedOrientation", &GCFuncMover::GetFixedOrientation, &GCFuncMover::SetFixedOrientation)
        .addProperty("FixedPitch", &GCFuncMover::GetFixedPitch, &GCFuncMover::SetFixedPitch)
        .addProperty("SolidType", &GCFuncMover::GetSolidType, &GCFuncMover::SetSolidType)
        .addProperty("IsMoving", &GCFuncMover::GetIsMoving, &GCFuncMover::SetIsMoving)
        .addProperty("TimeToReachMaxSpeed", &GCFuncMover::GetTimeToReachMaxSpeed, &GCFuncMover::SetTimeToReachMaxSpeed)
        .addProperty("TimeToReachZeroSpeed", &GCFuncMover::GetTimeToReachZeroSpeed, &GCFuncMover::SetTimeToReachZeroSpeed)
        .addProperty("TimeMovementStart", &GCFuncMover::GetTimeMovementStart, &GCFuncMover::SetTimeMovementStart)
        .addProperty("TimeMovementStop", &GCFuncMover::GetTimeMovementStop, &GCFuncMover::SetTimeMovementStop)
        .addProperty("StopAtNode", &GCFuncMover::GetStopAtNode, &GCFuncMover::SetStopAtNode)
        .addProperty("PathLocationToBeginStop", &GCFuncMover::GetPathLocationToBeginStop, &GCFuncMover::SetPathLocationToBeginStop)
        .addProperty("MatchPathNodeUp", &GCFuncMover::GetMatchPathNodeUp, &GCFuncMover::SetMatchPathNodeUp)
        .addProperty("FacePlayer", &GCFuncMover::GetFacePlayer, &GCFuncMover::SetFacePlayer)
        .addProperty("TimeStartRoll", &GCFuncMover::GetTimeStartRoll, &GCFuncMover::SetTimeStartRoll)
        .addProperty("OriginalUp", &GCFuncMover::GetOriginalUp, &GCFuncMover::SetOriginalUp)
        .addProperty("TimeToRollToNewUp", &GCFuncMover::GetTimeToRollToNewUp, &GCFuncMover::SetTimeToRollToNewUp)
        .addProperty("Parent", &GCFuncMover::GetParent, &GCFuncMover::SetParent)
        .addFunction("ToPtr", &GCFuncMover::ToPtr)
        .addFunction("IsValid", &GCFuncMover::IsValid)
        .endClass();
}
GCCSPlayer_CameraServices::GCCSPlayer_CameraServices(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCCSPlayer_CameraServices::GCCSPlayer_CameraServices(void *ptr) {
    m_ptr = ptr;
}
void* GCCSPlayer_CameraServices::GetPtr() {
    return m_ptr;
}
std::string GCCSPlayer_CameraServices::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCCSPlayer_CameraServices::IsValid() {
    return (m_ptr != nullptr);
}
GCCSPlayerBase_CameraServices GCCSPlayer_CameraServices::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSPlayer_CameraServices::GetParent(ptr=%p)", m_ptr));
    GCCSPlayerBase_CameraServices value(m_ptr);
    return value;
}
void GCCSPlayer_CameraServices::SetParent(GCCSPlayerBase_CameraServices value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSPlayer_CameraServices::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCCSPlayer_CameraServices(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCCSPlayer_CameraServices>("CCSPlayer_CameraServices")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCCSPlayer_CameraServices::GetParent, &GCCSPlayer_CameraServices::SetParent)
        .addFunction("ToPtr", &GCCSPlayer_CameraServices::ToPtr)
        .addFunction("IsValid", &GCCSPlayer_CameraServices::IsValid)
        .endClass();
}
GCHEGrenade::GCHEGrenade(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCHEGrenade::GCHEGrenade(void *ptr) {
    m_ptr = ptr;
}
void* GCHEGrenade::GetPtr() {
    return m_ptr;
}
std::string GCHEGrenade::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCHEGrenade::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseCSGrenade GCHEGrenade::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CHEGrenade::GetParent(ptr=%p)", m_ptr));
    GCBaseCSGrenade value(m_ptr);
    return value;
}
void GCHEGrenade::SetParent(GCBaseCSGrenade value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CHEGrenade::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCHEGrenade(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCHEGrenade>("CHEGrenade")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCHEGrenade::GetParent, &GCHEGrenade::SetParent)
        .addFunction("ToPtr", &GCHEGrenade::ToPtr)
        .addFunction("IsValid", &GCHEGrenade::IsValid)
        .endClass();
}
GCGameEnd::GCGameEnd(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCGameEnd::GCGameEnd(void *ptr) {
    m_ptr = ptr;
}
void* GCGameEnd::GetPtr() {
    return m_ptr;
}
std::string GCGameEnd::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCGameEnd::IsValid() {
    return (m_ptr != nullptr);
}
GCRulePointEntity GCGameEnd::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CGameEnd::GetParent(ptr=%p)", m_ptr));
    GCRulePointEntity value(m_ptr);
    return value;
}
void GCGameEnd::SetParent(GCRulePointEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CGameEnd::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCGameEnd(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCGameEnd>("CGameEnd")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCGameEnd::GetParent, &GCGameEnd::SetParent)
        .addFunction("ToPtr", &GCGameEnd::ToPtr)
        .addFunction("IsValid", &GCGameEnd::IsValid)
        .endClass();
}
GCTriggerCallback::GCTriggerCallback(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCTriggerCallback::GCTriggerCallback(void *ptr) {
    m_ptr = ptr;
}
void* GCTriggerCallback::GetPtr() {
    return m_ptr;
}
std::string GCTriggerCallback::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCTriggerCallback::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseTrigger GCTriggerCallback::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTriggerCallback::GetParent(ptr=%p)", m_ptr));
    GCBaseTrigger value(m_ptr);
    return value;
}
void GCTriggerCallback::SetParent(GCBaseTrigger value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTriggerCallback::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCTriggerCallback(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCTriggerCallback>("CTriggerCallback")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCTriggerCallback::GetParent, &GCTriggerCallback::SetParent)
        .addFunction("ToPtr", &GCTriggerCallback::ToPtr)
        .addFunction("IsValid", &GCTriggerCallback::IsValid)
        .endClass();
}
GCBubbling::GCBubbling(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCBubbling::GCBubbling(void *ptr) {
    m_ptr = ptr;
}
int32_t GCBubbling::GetDensity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBubbling->Density(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CBubbling", "m_density");
}
void GCBubbling::SetDensity(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBubbling->Density(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBubbling", "m_density", false, value);
}
int32_t GCBubbling::GetFrequency() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBubbling->Frequency(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CBubbling", "m_frequency");
}
void GCBubbling::SetFrequency(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBubbling->Frequency(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBubbling", "m_frequency", false, value);
}
int32_t GCBubbling::GetState() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBubbling->State(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CBubbling", "m_state");
}
void GCBubbling::SetState(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBubbling->State(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBubbling", "m_state", false, value);
}
void* GCBubbling::GetPtr() {
    return m_ptr;
}
std::string GCBubbling::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCBubbling::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseModelEntity GCBubbling::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CBubbling::GetParent(ptr=%p)", m_ptr));
    GCBaseModelEntity value(m_ptr);
    return value;
}
void GCBubbling::SetParent(GCBaseModelEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CBubbling::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCBubbling(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCBubbling>("CBubbling")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Density", &GCBubbling::GetDensity, &GCBubbling::SetDensity)
        .addProperty("Frequency", &GCBubbling::GetFrequency, &GCBubbling::SetFrequency)
        .addProperty("State", &GCBubbling::GetState, &GCBubbling::SetState)
        .addProperty("Parent", &GCBubbling::GetParent, &GCBubbling::SetParent)
        .addFunction("ToPtr", &GCBubbling::ToPtr)
        .addFunction("IsValid", &GCBubbling::IsValid)
        .endClass();
}
GCTeamplayRules::GCTeamplayRules(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCTeamplayRules::GCTeamplayRules(void *ptr) {
    m_ptr = ptr;
}
void* GCTeamplayRules::GetPtr() {
    return m_ptr;
}
std::string GCTeamplayRules::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCTeamplayRules::IsValid() {
    return (m_ptr != nullptr);
}
GCMultiplayRules GCTeamplayRules::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTeamplayRules::GetParent(ptr=%p)", m_ptr));
    GCMultiplayRules value(m_ptr);
    return value;
}
void GCTeamplayRules::SetParent(GCMultiplayRules value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTeamplayRules::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCTeamplayRules(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCTeamplayRules>("CTeamplayRules")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCTeamplayRules::GetParent, &GCTeamplayRules::SetParent)
        .addFunction("ToPtr", &GCTeamplayRules::ToPtr)
        .addFunction("IsValid", &GCTeamplayRules::IsValid)
        .endClass();
}
GCPhysicsPropOverride::GCPhysicsPropOverride(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPhysicsPropOverride::GCPhysicsPropOverride(void *ptr) {
    m_ptr = ptr;
}
void* GCPhysicsPropOverride::GetPtr() {
    return m_ptr;
}
std::string GCPhysicsPropOverride::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPhysicsPropOverride::IsValid() {
    return (m_ptr != nullptr);
}
GCPhysicsProp GCPhysicsPropOverride::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPhysicsPropOverride::GetParent(ptr=%p)", m_ptr));
    GCPhysicsProp value(m_ptr);
    return value;
}
void GCPhysicsPropOverride::SetParent(GCPhysicsProp value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPhysicsPropOverride::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCPhysicsPropOverride(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPhysicsPropOverride>("CPhysicsPropOverride")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCPhysicsPropOverride::GetParent, &GCPhysicsPropOverride::SetParent)
        .addFunction("ToPtr", &GCPhysicsPropOverride::ToPtr)
        .addFunction("IsValid", &GCPhysicsPropOverride::IsValid)
        .endClass();
}
GCAI_ChangeHintGroup::GCAI_ChangeHintGroup(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCAI_ChangeHintGroup::GCAI_ChangeHintGroup(void *ptr) {
    m_ptr = ptr;
}
int32_t GCAI_ChangeHintGroup::GetSearchType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAI_ChangeHintGroup->SearchType(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CAI_ChangeHintGroup", "m_iSearchType");
}
void GCAI_ChangeHintGroup::SetSearchType(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAI_ChangeHintGroup->SearchType(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CAI_ChangeHintGroup", "m_iSearchType", false, value);
}
std::string GCAI_ChangeHintGroup::GetStrSearchName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAI_ChangeHintGroup->StrSearchName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CAI_ChangeHintGroup", "m_strSearchName").String();
}
void GCAI_ChangeHintGroup::SetStrSearchName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAI_ChangeHintGroup->StrSearchName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CAI_ChangeHintGroup", "m_strSearchName", false, CUtlSymbolLarge(value.c_str()));
}
std::string GCAI_ChangeHintGroup::GetStrNewHintGroup() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAI_ChangeHintGroup->StrNewHintGroup(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CAI_ChangeHintGroup", "m_strNewHintGroup").String();
}
void GCAI_ChangeHintGroup::SetStrNewHintGroup(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAI_ChangeHintGroup->StrNewHintGroup(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CAI_ChangeHintGroup", "m_strNewHintGroup", false, CUtlSymbolLarge(value.c_str()));
}
float GCAI_ChangeHintGroup::GetRadius() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAI_ChangeHintGroup->Radius(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CAI_ChangeHintGroup", "m_flRadius");
}
void GCAI_ChangeHintGroup::SetRadius(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAI_ChangeHintGroup->Radius(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CAI_ChangeHintGroup", "m_flRadius", false, value);
}
void* GCAI_ChangeHintGroup::GetPtr() {
    return m_ptr;
}
std::string GCAI_ChangeHintGroup::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCAI_ChangeHintGroup::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseEntity GCAI_ChangeHintGroup::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CAI_ChangeHintGroup::GetParent(ptr=%p)", m_ptr));
    GCBaseEntity value(m_ptr);
    return value;
}
void GCAI_ChangeHintGroup::SetParent(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CAI_ChangeHintGroup::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCAI_ChangeHintGroup(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCAI_ChangeHintGroup>("CAI_ChangeHintGroup")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("SearchType", &GCAI_ChangeHintGroup::GetSearchType, &GCAI_ChangeHintGroup::SetSearchType)
        .addProperty("StrSearchName", &GCAI_ChangeHintGroup::GetStrSearchName, &GCAI_ChangeHintGroup::SetStrSearchName)
        .addProperty("StrNewHintGroup", &GCAI_ChangeHintGroup::GetStrNewHintGroup, &GCAI_ChangeHintGroup::SetStrNewHintGroup)
        .addProperty("Radius", &GCAI_ChangeHintGroup::GetRadius, &GCAI_ChangeHintGroup::SetRadius)
        .addProperty("Parent", &GCAI_ChangeHintGroup::GetParent, &GCAI_ChangeHintGroup::SetParent)
        .addFunction("ToPtr", &GCAI_ChangeHintGroup::ToPtr)
        .addFunction("IsValid", &GCAI_ChangeHintGroup::IsValid)
        .endClass();
}
GCColorCorrectionVolume::GCColorCorrectionVolume(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCColorCorrectionVolume::GCColorCorrectionVolume(void *ptr) {
    m_ptr = ptr;
}
bool GCColorCorrectionVolume::GetEnabled() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CColorCorrectionVolume->Enabled(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CColorCorrectionVolume", "m_bEnabled");
}
void GCColorCorrectionVolume::SetEnabled(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CColorCorrectionVolume->Enabled(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CColorCorrectionVolume", "m_bEnabled", false, value);
}
float GCColorCorrectionVolume::GetMaxWeight() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CColorCorrectionVolume->MaxWeight(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CColorCorrectionVolume", "m_MaxWeight");
}
void GCColorCorrectionVolume::SetMaxWeight(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CColorCorrectionVolume->MaxWeight(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CColorCorrectionVolume", "m_MaxWeight", false, value);
}
float GCColorCorrectionVolume::GetFadeDuration() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CColorCorrectionVolume->FadeDuration(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CColorCorrectionVolume", "m_FadeDuration");
}
void GCColorCorrectionVolume::SetFadeDuration(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CColorCorrectionVolume->FadeDuration(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CColorCorrectionVolume", "m_FadeDuration", false, value);
}
bool GCColorCorrectionVolume::GetStartDisabled() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CColorCorrectionVolume->StartDisabled(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CColorCorrectionVolume", "m_bStartDisabled");
}
void GCColorCorrectionVolume::SetStartDisabled(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CColorCorrectionVolume->StartDisabled(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CColorCorrectionVolume", "m_bStartDisabled", false, value);
}
float GCColorCorrectionVolume::GetWeight() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CColorCorrectionVolume->Weight(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CColorCorrectionVolume", "m_Weight");
}
void GCColorCorrectionVolume::SetWeight(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CColorCorrectionVolume->Weight(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CColorCorrectionVolume", "m_Weight", false, value);
}
std::string GCColorCorrectionVolume::GetLookupFilename() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CColorCorrectionVolume->LookupFilename(ptr=%p)", m_ptr));
    return GetSchemaValuePtr<char>(m_ptr, "CColorCorrectionVolume", "m_lookupFilename");
}
void GCColorCorrectionVolume::SetLookupFilename(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CColorCorrectionVolume->LookupFilename(ptr=%p)", m_ptr));
    WriteSchemaPtrValue(m_ptr, "CColorCorrectionVolume", "m_lookupFilename", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 512);
}
float GCColorCorrectionVolume::GetLastEnterWeight() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CColorCorrectionVolume->LastEnterWeight(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CColorCorrectionVolume", "m_LastEnterWeight");
}
void GCColorCorrectionVolume::SetLastEnterWeight(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CColorCorrectionVolume->LastEnterWeight(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CColorCorrectionVolume", "m_LastEnterWeight", false, value);
}
float GCColorCorrectionVolume::GetLastEnterTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CColorCorrectionVolume->LastEnterTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CColorCorrectionVolume", "m_LastEnterTime");
}
void GCColorCorrectionVolume::SetLastEnterTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CColorCorrectionVolume->LastEnterTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CColorCorrectionVolume", "m_LastEnterTime", false, value);
}
float GCColorCorrectionVolume::GetLastExitWeight() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CColorCorrectionVolume->LastExitWeight(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CColorCorrectionVolume", "m_LastExitWeight");
}
void GCColorCorrectionVolume::SetLastExitWeight(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CColorCorrectionVolume->LastExitWeight(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CColorCorrectionVolume", "m_LastExitWeight", false, value);
}
float GCColorCorrectionVolume::GetLastExitTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CColorCorrectionVolume->LastExitTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CColorCorrectionVolume", "m_LastExitTime");
}
void GCColorCorrectionVolume::SetLastExitTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CColorCorrectionVolume->LastExitTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CColorCorrectionVolume", "m_LastExitTime", false, value);
}
void* GCColorCorrectionVolume::GetPtr() {
    return m_ptr;
}
std::string GCColorCorrectionVolume::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCColorCorrectionVolume::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseTrigger GCColorCorrectionVolume::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CColorCorrectionVolume::GetParent(ptr=%p)", m_ptr));
    GCBaseTrigger value(m_ptr);
    return value;
}
void GCColorCorrectionVolume::SetParent(GCBaseTrigger value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CColorCorrectionVolume::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCColorCorrectionVolume(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCColorCorrectionVolume>("CColorCorrectionVolume")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Enabled", &GCColorCorrectionVolume::GetEnabled, &GCColorCorrectionVolume::SetEnabled)
        .addProperty("MaxWeight", &GCColorCorrectionVolume::GetMaxWeight, &GCColorCorrectionVolume::SetMaxWeight)
        .addProperty("FadeDuration", &GCColorCorrectionVolume::GetFadeDuration, &GCColorCorrectionVolume::SetFadeDuration)
        .addProperty("StartDisabled", &GCColorCorrectionVolume::GetStartDisabled, &GCColorCorrectionVolume::SetStartDisabled)
        .addProperty("Weight", &GCColorCorrectionVolume::GetWeight, &GCColorCorrectionVolume::SetWeight)
        .addProperty("LookupFilename", &GCColorCorrectionVolume::GetLookupFilename, &GCColorCorrectionVolume::SetLookupFilename)
        .addProperty("LastEnterWeight", &GCColorCorrectionVolume::GetLastEnterWeight, &GCColorCorrectionVolume::SetLastEnterWeight)
        .addProperty("LastEnterTime", &GCColorCorrectionVolume::GetLastEnterTime, &GCColorCorrectionVolume::SetLastEnterTime)
        .addProperty("LastExitWeight", &GCColorCorrectionVolume::GetLastExitWeight, &GCColorCorrectionVolume::SetLastExitWeight)
        .addProperty("LastExitTime", &GCColorCorrectionVolume::GetLastExitTime, &GCColorCorrectionVolume::SetLastExitTime)
        .addProperty("Parent", &GCColorCorrectionVolume::GetParent, &GCColorCorrectionVolume::SetParent)
        .addFunction("ToPtr", &GCColorCorrectionVolume::ToPtr)
        .addFunction("IsValid", &GCColorCorrectionVolume::IsValid)
        .endClass();
}
GCFilterEnemy::GCFilterEnemy(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCFilterEnemy::GCFilterEnemy(void *ptr) {
    m_ptr = ptr;
}
std::string GCFilterEnemy::GetEnemyName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFilterEnemy->EnemyName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFilterEnemy", "m_iszEnemyName").String();
}
void GCFilterEnemy::SetEnemyName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFilterEnemy->EnemyName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFilterEnemy", "m_iszEnemyName", false, CUtlSymbolLarge(value.c_str()));
}
float GCFilterEnemy::GetRadius() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFilterEnemy->Radius(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CFilterEnemy", "m_flRadius");
}
void GCFilterEnemy::SetRadius(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFilterEnemy->Radius(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFilterEnemy", "m_flRadius", false, value);
}
float GCFilterEnemy::GetOuterRadius() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFilterEnemy->OuterRadius(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CFilterEnemy", "m_flOuterRadius");
}
void GCFilterEnemy::SetOuterRadius(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFilterEnemy->OuterRadius(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFilterEnemy", "m_flOuterRadius", false, value);
}
int32_t GCFilterEnemy::GetMaxSquadmatesPerEnemy() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFilterEnemy->MaxSquadmatesPerEnemy(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CFilterEnemy", "m_nMaxSquadmatesPerEnemy");
}
void GCFilterEnemy::SetMaxSquadmatesPerEnemy(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFilterEnemy->MaxSquadmatesPerEnemy(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFilterEnemy", "m_nMaxSquadmatesPerEnemy", false, value);
}
std::string GCFilterEnemy::GetPlayerName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFilterEnemy->PlayerName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFilterEnemy", "m_iszPlayerName").String();
}
void GCFilterEnemy::SetPlayerName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFilterEnemy->PlayerName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFilterEnemy", "m_iszPlayerName", false, CUtlSymbolLarge(value.c_str()));
}
void* GCFilterEnemy::GetPtr() {
    return m_ptr;
}
std::string GCFilterEnemy::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCFilterEnemy::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseFilter GCFilterEnemy::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFilterEnemy::GetParent(ptr=%p)", m_ptr));
    GCBaseFilter value(m_ptr);
    return value;
}
void GCFilterEnemy::SetParent(GCBaseFilter value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFilterEnemy::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCFilterEnemy(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCFilterEnemy>("CFilterEnemy")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("EnemyName", &GCFilterEnemy::GetEnemyName, &GCFilterEnemy::SetEnemyName)
        .addProperty("Radius", &GCFilterEnemy::GetRadius, &GCFilterEnemy::SetRadius)
        .addProperty("OuterRadius", &GCFilterEnemy::GetOuterRadius, &GCFilterEnemy::SetOuterRadius)
        .addProperty("MaxSquadmatesPerEnemy", &GCFilterEnemy::GetMaxSquadmatesPerEnemy, &GCFilterEnemy::SetMaxSquadmatesPerEnemy)
        .addProperty("PlayerName", &GCFilterEnemy::GetPlayerName, &GCFilterEnemy::SetPlayerName)
        .addProperty("Parent", &GCFilterEnemy::GetParent, &GCFilterEnemy::SetParent)
        .addFunction("ToPtr", &GCFilterEnemy::ToPtr)
        .addFunction("IsValid", &GCFilterEnemy::IsValid)
        .endClass();
}
GCShower::GCShower(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCShower::GCShower(void *ptr) {
    m_ptr = ptr;
}
void* GCShower::GetPtr() {
    return m_ptr;
}
std::string GCShower::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCShower::IsValid() {
    return (m_ptr != nullptr);
}
GCModelPointEntity GCShower::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CShower::GetParent(ptr=%p)", m_ptr));
    GCModelPointEntity value(m_ptr);
    return value;
}
void GCShower::SetParent(GCModelPointEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CShower::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCShower(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCShower>("CShower")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCShower::GetParent, &GCShower::SetParent)
        .addFunction("ToPtr", &GCShower::ToPtr)
        .addFunction("IsValid", &GCShower::IsValid)
        .endClass();
}
GCEnvCubemapFog::GCEnvCubemapFog(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCEnvCubemapFog::GCEnvCubemapFog(void *ptr) {
    m_ptr = ptr;
}
float GCEnvCubemapFog::GetEndDistance() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvCubemapFog->EndDistance(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CEnvCubemapFog", "m_flEndDistance");
}
void GCEnvCubemapFog::SetEndDistance(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvCubemapFog->EndDistance(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvCubemapFog", "m_flEndDistance", false, value);
}
float GCEnvCubemapFog::GetStartDistance() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvCubemapFog->StartDistance(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CEnvCubemapFog", "m_flStartDistance");
}
void GCEnvCubemapFog::SetStartDistance(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvCubemapFog->StartDistance(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvCubemapFog", "m_flStartDistance", false, value);
}
float GCEnvCubemapFog::GetFogFalloffExponent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvCubemapFog->FogFalloffExponent(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CEnvCubemapFog", "m_flFogFalloffExponent");
}
void GCEnvCubemapFog::SetFogFalloffExponent(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvCubemapFog->FogFalloffExponent(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvCubemapFog", "m_flFogFalloffExponent", false, value);
}
bool GCEnvCubemapFog::GetHeightFogEnabled() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvCubemapFog->HeightFogEnabled(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CEnvCubemapFog", "m_bHeightFogEnabled");
}
void GCEnvCubemapFog::SetHeightFogEnabled(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvCubemapFog->HeightFogEnabled(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvCubemapFog", "m_bHeightFogEnabled", false, value);
}
float GCEnvCubemapFog::GetFogHeightWidth() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvCubemapFog->FogHeightWidth(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CEnvCubemapFog", "m_flFogHeightWidth");
}
void GCEnvCubemapFog::SetFogHeightWidth(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvCubemapFog->FogHeightWidth(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvCubemapFog", "m_flFogHeightWidth", false, value);
}
float GCEnvCubemapFog::GetFogHeightEnd() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvCubemapFog->FogHeightEnd(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CEnvCubemapFog", "m_flFogHeightEnd");
}
void GCEnvCubemapFog::SetFogHeightEnd(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvCubemapFog->FogHeightEnd(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvCubemapFog", "m_flFogHeightEnd", false, value);
}
float GCEnvCubemapFog::GetFogHeightStart() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvCubemapFog->FogHeightStart(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CEnvCubemapFog", "m_flFogHeightStart");
}
void GCEnvCubemapFog::SetFogHeightStart(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvCubemapFog->FogHeightStart(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvCubemapFog", "m_flFogHeightStart", false, value);
}
float GCEnvCubemapFog::GetFogHeightExponent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvCubemapFog->FogHeightExponent(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CEnvCubemapFog", "m_flFogHeightExponent");
}
void GCEnvCubemapFog::SetFogHeightExponent(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvCubemapFog->FogHeightExponent(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvCubemapFog", "m_flFogHeightExponent", false, value);
}
float GCEnvCubemapFog::GetLODBias() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvCubemapFog->LODBias(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CEnvCubemapFog", "m_flLODBias");
}
void GCEnvCubemapFog::SetLODBias(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvCubemapFog->LODBias(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvCubemapFog", "m_flLODBias", false, value);
}
bool GCEnvCubemapFog::GetActive() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvCubemapFog->Active(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CEnvCubemapFog", "m_bActive");
}
void GCEnvCubemapFog::SetActive(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvCubemapFog->Active(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvCubemapFog", "m_bActive", false, value);
}
bool GCEnvCubemapFog::GetStartDisabled() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvCubemapFog->StartDisabled(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CEnvCubemapFog", "m_bStartDisabled");
}
void GCEnvCubemapFog::SetStartDisabled(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvCubemapFog->StartDisabled(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvCubemapFog", "m_bStartDisabled", false, value);
}
float GCEnvCubemapFog::GetFogMaxOpacity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvCubemapFog->FogMaxOpacity(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CEnvCubemapFog", "m_flFogMaxOpacity");
}
void GCEnvCubemapFog::SetFogMaxOpacity(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvCubemapFog->FogMaxOpacity(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvCubemapFog", "m_flFogMaxOpacity", false, value);
}
int32_t GCEnvCubemapFog::GetCubemapSourceType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvCubemapFog->CubemapSourceType(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CEnvCubemapFog", "m_nCubemapSourceType");
}
void GCEnvCubemapFog::SetCubemapSourceType(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvCubemapFog->CubemapSourceType(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvCubemapFog", "m_nCubemapSourceType", false, value);
}
std::string GCEnvCubemapFog::GetSkyEntity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvCubemapFog->SkyEntity(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvCubemapFog", "m_iszSkyEntity").String();
}
void GCEnvCubemapFog::SetSkyEntity(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvCubemapFog->SkyEntity(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvCubemapFog", "m_iszSkyEntity", false, CUtlSymbolLarge(value.c_str()));
}
bool GCEnvCubemapFog::GetHasHeightFogEnd() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvCubemapFog->HasHeightFogEnd(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CEnvCubemapFog", "m_bHasHeightFogEnd");
}
void GCEnvCubemapFog::SetHasHeightFogEnd(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvCubemapFog->HasHeightFogEnd(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvCubemapFog", "m_bHasHeightFogEnd", false, value);
}
bool GCEnvCubemapFog::GetFirstTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvCubemapFog->FirstTime(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CEnvCubemapFog", "m_bFirstTime");
}
void GCEnvCubemapFog::SetFirstTime(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvCubemapFog->FirstTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvCubemapFog", "m_bFirstTime", false, value);
}
void* GCEnvCubemapFog::GetPtr() {
    return m_ptr;
}
std::string GCEnvCubemapFog::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCEnvCubemapFog::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseEntity GCEnvCubemapFog::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CEnvCubemapFog::GetParent(ptr=%p)", m_ptr));
    GCBaseEntity value(m_ptr);
    return value;
}
void GCEnvCubemapFog::SetParent(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CEnvCubemapFog::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCEnvCubemapFog(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCEnvCubemapFog>("CEnvCubemapFog")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("EndDistance", &GCEnvCubemapFog::GetEndDistance, &GCEnvCubemapFog::SetEndDistance)
        .addProperty("StartDistance", &GCEnvCubemapFog::GetStartDistance, &GCEnvCubemapFog::SetStartDistance)
        .addProperty("FogFalloffExponent", &GCEnvCubemapFog::GetFogFalloffExponent, &GCEnvCubemapFog::SetFogFalloffExponent)
        .addProperty("HeightFogEnabled", &GCEnvCubemapFog::GetHeightFogEnabled, &GCEnvCubemapFog::SetHeightFogEnabled)
        .addProperty("FogHeightWidth", &GCEnvCubemapFog::GetFogHeightWidth, &GCEnvCubemapFog::SetFogHeightWidth)
        .addProperty("FogHeightEnd", &GCEnvCubemapFog::GetFogHeightEnd, &GCEnvCubemapFog::SetFogHeightEnd)
        .addProperty("FogHeightStart", &GCEnvCubemapFog::GetFogHeightStart, &GCEnvCubemapFog::SetFogHeightStart)
        .addProperty("FogHeightExponent", &GCEnvCubemapFog::GetFogHeightExponent, &GCEnvCubemapFog::SetFogHeightExponent)
        .addProperty("LODBias", &GCEnvCubemapFog::GetLODBias, &GCEnvCubemapFog::SetLODBias)
        .addProperty("Active", &GCEnvCubemapFog::GetActive, &GCEnvCubemapFog::SetActive)
        .addProperty("StartDisabled", &GCEnvCubemapFog::GetStartDisabled, &GCEnvCubemapFog::SetStartDisabled)
        .addProperty("FogMaxOpacity", &GCEnvCubemapFog::GetFogMaxOpacity, &GCEnvCubemapFog::SetFogMaxOpacity)
        .addProperty("CubemapSourceType", &GCEnvCubemapFog::GetCubemapSourceType, &GCEnvCubemapFog::SetCubemapSourceType)
        .addProperty("SkyEntity", &GCEnvCubemapFog::GetSkyEntity, &GCEnvCubemapFog::SetSkyEntity)
        .addProperty("HasHeightFogEnd", &GCEnvCubemapFog::GetHasHeightFogEnd, &GCEnvCubemapFog::SetHasHeightFogEnd)
        .addProperty("FirstTime", &GCEnvCubemapFog::GetFirstTime, &GCEnvCubemapFog::SetFirstTime)
        .addProperty("Parent", &GCEnvCubemapFog::GetParent, &GCEnvCubemapFog::SetParent)
        .addFunction("ToPtr", &GCEnvCubemapFog::ToPtr)
        .addFunction("IsValid", &GCEnvCubemapFog::IsValid)
        .endClass();
}
GCBaseButton::GCBaseButton(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCBaseButton::GCBaseButton(void *ptr) {
    m_ptr = ptr;
}
QAngle GCBaseButton::GetMoveEntitySpace() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseButton->MoveEntitySpace(ptr=%p)", m_ptr));
    return GetSchemaValue<QAngle>(m_ptr, "CBaseButton", "m_angMoveEntitySpace");
}
void GCBaseButton::SetMoveEntitySpace(QAngle value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseButton->MoveEntitySpace(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseButton", "m_angMoveEntitySpace", false, value);
}
bool GCBaseButton::GetStayPushed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseButton->StayPushed(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CBaseButton", "m_fStayPushed");
}
void GCBaseButton::SetStayPushed(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseButton->StayPushed(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseButton", "m_fStayPushed", false, value);
}
bool GCBaseButton::GetRotating() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseButton->Rotating(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CBaseButton", "m_fRotating");
}
void GCBaseButton::SetRotating(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseButton->Rotating(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseButton", "m_fRotating", false, value);
}
Glocksound_t GCBaseButton::GetLs() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseButton->Ls(ptr=%p)", m_ptr));
    Glocksound_t value(GetSchemaPtr(m_ptr, "CBaseButton", "m_ls"));
    return value;
}
void GCBaseButton::SetLs(Glocksound_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseButton->Ls(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Ls' is not possible.\n");
}
std::string GCBaseButton::GetUseSound() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseButton->UseSound(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBaseButton", "m_sUseSound").String();
}
void GCBaseButton::SetUseSound(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseButton->UseSound(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseButton", "m_sUseSound", false, CUtlSymbolLarge(value.c_str()));
}
std::string GCBaseButton::GetLockedSound() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseButton->LockedSound(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBaseButton", "m_sLockedSound").String();
}
void GCBaseButton::SetLockedSound(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseButton->LockedSound(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseButton", "m_sLockedSound", false, CUtlSymbolLarge(value.c_str()));
}
std::string GCBaseButton::GetUnlockedSound() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseButton->UnlockedSound(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBaseButton", "m_sUnlockedSound").String();
}
void GCBaseButton::SetUnlockedSound(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseButton->UnlockedSound(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseButton", "m_sUnlockedSound", false, CUtlSymbolLarge(value.c_str()));
}
std::string GCBaseButton::GetOverrideAnticipationName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseButton->OverrideAnticipationName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBaseButton", "m_sOverrideAnticipationName").String();
}
void GCBaseButton::SetOverrideAnticipationName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseButton->OverrideAnticipationName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseButton", "m_sOverrideAnticipationName", false, CUtlSymbolLarge(value.c_str()));
}
bool GCBaseButton::GetLocked() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseButton->Locked(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CBaseButton", "m_bLocked");
}
void GCBaseButton::SetLocked(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseButton->Locked(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseButton", "m_bLocked", false, value);
}
bool GCBaseButton::GetDisabled() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseButton->Disabled(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CBaseButton", "m_bDisabled");
}
void GCBaseButton::SetDisabled(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseButton->Disabled(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseButton", "m_bDisabled", false, value);
}
float GCBaseButton::GetUseLockedTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseButton->UseLockedTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CBaseButton", "m_flUseLockedTime");
}
void GCBaseButton::SetUseLockedTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseButton->UseLockedTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseButton", "m_flUseLockedTime", false, value);
}
bool GCBaseButton::GetSolidBsp() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseButton->SolidBsp(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CBaseButton", "m_bSolidBsp");
}
void GCBaseButton::SetSolidBsp(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseButton->SolidBsp(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseButton", "m_bSolidBsp", false, value);
}
GCEntityIOOutput GCBaseButton::GetOnDamaged() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseButton->OnDamaged(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CBaseButton", "m_OnDamaged"));
    return value;
}
void GCBaseButton::SetOnDamaged(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseButton->OnDamaged(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnDamaged' is not possible.\n");
}
GCEntityIOOutput GCBaseButton::GetOnPressed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseButton->OnPressed(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CBaseButton", "m_OnPressed"));
    return value;
}
void GCBaseButton::SetOnPressed(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseButton->OnPressed(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnPressed' is not possible.\n");
}
GCEntityIOOutput GCBaseButton::GetOnUseLocked() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseButton->OnUseLocked(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CBaseButton", "m_OnUseLocked"));
    return value;
}
void GCBaseButton::SetOnUseLocked(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseButton->OnUseLocked(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnUseLocked' is not possible.\n");
}
GCEntityIOOutput GCBaseButton::GetOnIn() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseButton->OnIn(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CBaseButton", "m_OnIn"));
    return value;
}
void GCBaseButton::SetOnIn(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseButton->OnIn(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnIn' is not possible.\n");
}
GCEntityIOOutput GCBaseButton::GetOnOut() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseButton->OnOut(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CBaseButton", "m_OnOut"));
    return value;
}
void GCBaseButton::SetOnOut(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseButton->OnOut(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnOut' is not possible.\n");
}
int32_t GCBaseButton::GetState() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseButton->State(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CBaseButton", "m_nState");
}
void GCBaseButton::SetState(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseButton->State(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseButton", "m_nState", false, value);
}
GCEntityInstance GCBaseButton::GetConstraint() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseButton->Constraint(ptr=%p)", m_ptr));
    GCEntityInstance value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CBaseButton", "m_hConstraint").Get()));
    return value;
}
void GCBaseButton::SetConstraint(GCEntityInstance value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseButton->Constraint(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Constraint' is not possible.\n");
}
GCEntityInstance GCBaseButton::GetConstraintParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseButton->ConstraintParent(ptr=%p)", m_ptr));
    GCEntityInstance value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CBaseButton", "m_hConstraintParent").Get()));
    return value;
}
void GCBaseButton::SetConstraintParent(GCEntityInstance value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseButton->ConstraintParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ConstraintParent' is not possible.\n");
}
bool GCBaseButton::GetForceNpcExclude() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseButton->ForceNpcExclude(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CBaseButton", "m_bForceNpcExclude");
}
void GCBaseButton::SetForceNpcExclude(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseButton->ForceNpcExclude(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseButton", "m_bForceNpcExclude", false, value);
}
std::string GCBaseButton::GetGlowEntity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseButton->GlowEntity(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBaseButton", "m_sGlowEntity").String();
}
void GCBaseButton::SetGlowEntity(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseButton->GlowEntity(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseButton", "m_sGlowEntity", false, CUtlSymbolLarge(value.c_str()));
}
GCBaseModelEntity GCBaseButton::GetGlowEntity1() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseButton->GlowEntity1(ptr=%p)", m_ptr));
    GCBaseModelEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CBaseButton", "m_glowEntity").Get()));
    return value;
}
void GCBaseButton::SetGlowEntity1(GCBaseModelEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseButton->GlowEntity1(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'GlowEntity1' is not possible.\n");
}
bool GCBaseButton::GetUsable() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseButton->Usable(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CBaseButton", "m_usable");
}
void GCBaseButton::SetUsable(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseButton->Usable(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseButton", "m_usable", false, value);
}
std::string GCBaseButton::GetDisplayText() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseButton->DisplayText(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBaseButton", "m_szDisplayText").String();
}
void GCBaseButton::SetDisplayText(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseButton->DisplayText(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseButton", "m_szDisplayText", false, CUtlSymbolLarge(value.c_str()));
}
void* GCBaseButton::GetPtr() {
    return m_ptr;
}
std::string GCBaseButton::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCBaseButton::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseToggle GCBaseButton::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CBaseButton::GetParent(ptr=%p)", m_ptr));
    GCBaseToggle value(m_ptr);
    return value;
}
void GCBaseButton::SetParent(GCBaseToggle value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CBaseButton::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCBaseButton(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCBaseButton>("CBaseButton")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("MoveEntitySpace", &GCBaseButton::GetMoveEntitySpace, &GCBaseButton::SetMoveEntitySpace)
        .addProperty("StayPushed", &GCBaseButton::GetStayPushed, &GCBaseButton::SetStayPushed)
        .addProperty("Rotating", &GCBaseButton::GetRotating, &GCBaseButton::SetRotating)
        .addProperty("Ls", &GCBaseButton::GetLs, &GCBaseButton::SetLs)
        .addProperty("UseSound", &GCBaseButton::GetUseSound, &GCBaseButton::SetUseSound)
        .addProperty("LockedSound", &GCBaseButton::GetLockedSound, &GCBaseButton::SetLockedSound)
        .addProperty("UnlockedSound", &GCBaseButton::GetUnlockedSound, &GCBaseButton::SetUnlockedSound)
        .addProperty("OverrideAnticipationName", &GCBaseButton::GetOverrideAnticipationName, &GCBaseButton::SetOverrideAnticipationName)
        .addProperty("Locked", &GCBaseButton::GetLocked, &GCBaseButton::SetLocked)
        .addProperty("Disabled", &GCBaseButton::GetDisabled, &GCBaseButton::SetDisabled)
        .addProperty("UseLockedTime", &GCBaseButton::GetUseLockedTime, &GCBaseButton::SetUseLockedTime)
        .addProperty("SolidBsp", &GCBaseButton::GetSolidBsp, &GCBaseButton::SetSolidBsp)
        .addProperty("OnDamaged", &GCBaseButton::GetOnDamaged, &GCBaseButton::SetOnDamaged)
        .addProperty("OnPressed", &GCBaseButton::GetOnPressed, &GCBaseButton::SetOnPressed)
        .addProperty("OnUseLocked", &GCBaseButton::GetOnUseLocked, &GCBaseButton::SetOnUseLocked)
        .addProperty("OnIn", &GCBaseButton::GetOnIn, &GCBaseButton::SetOnIn)
        .addProperty("OnOut", &GCBaseButton::GetOnOut, &GCBaseButton::SetOnOut)
        .addProperty("State", &GCBaseButton::GetState, &GCBaseButton::SetState)
        .addProperty("Constraint", &GCBaseButton::GetConstraint, &GCBaseButton::SetConstraint)
        .addProperty("ConstraintParent", &GCBaseButton::GetConstraintParent, &GCBaseButton::SetConstraintParent)
        .addProperty("ForceNpcExclude", &GCBaseButton::GetForceNpcExclude, &GCBaseButton::SetForceNpcExclude)
        .addProperty("GlowEntity", &GCBaseButton::GetGlowEntity, &GCBaseButton::SetGlowEntity)
        .addProperty("GlowEntity1", &GCBaseButton::GetGlowEntity1, &GCBaseButton::SetGlowEntity1)
        .addProperty("Usable", &GCBaseButton::GetUsable, &GCBaseButton::SetUsable)
        .addProperty("DisplayText", &GCBaseButton::GetDisplayText, &GCBaseButton::SetDisplayText)
        .addProperty("Parent", &GCBaseButton::GetParent, &GCBaseButton::SetParent)
        .addFunction("ToPtr", &GCBaseButton::ToPtr)
        .addFunction("IsValid", &GCBaseButton::IsValid)
        .endClass();
}
GCEnvExplosion::GCEnvExplosion(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCEnvExplosion::GCEnvExplosion(void *ptr) {
    m_ptr = ptr;
}
int32_t GCEnvExplosion::GetMagnitude() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvExplosion->Magnitude(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CEnvExplosion", "m_iMagnitude");
}
void GCEnvExplosion::SetMagnitude(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvExplosion->Magnitude(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvExplosion", "m_iMagnitude", false, value);
}
float GCEnvExplosion::GetPlayerDamage() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvExplosion->PlayerDamage(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CEnvExplosion", "m_flPlayerDamage");
}
void GCEnvExplosion::SetPlayerDamage(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvExplosion->PlayerDamage(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvExplosion", "m_flPlayerDamage", false, value);
}
int32_t GCEnvExplosion::GetRadiusOverride() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvExplosion->RadiusOverride(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CEnvExplosion", "m_iRadiusOverride");
}
void GCEnvExplosion::SetRadiusOverride(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvExplosion->RadiusOverride(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvExplosion", "m_iRadiusOverride", false, value);
}
float GCEnvExplosion::GetInnerRadius() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvExplosion->InnerRadius(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CEnvExplosion", "m_flInnerRadius");
}
void GCEnvExplosion::SetInnerRadius(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvExplosion->InnerRadius(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvExplosion", "m_flInnerRadius", false, value);
}
int32_t GCEnvExplosion::GetSpriteScale() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvExplosion->SpriteScale(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CEnvExplosion", "m_spriteScale");
}
void GCEnvExplosion::SetSpriteScale(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvExplosion->SpriteScale(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvExplosion", "m_spriteScale", false, value);
}
float GCEnvExplosion::GetDamageForce() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvExplosion->DamageForce(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CEnvExplosion", "m_flDamageForce");
}
void GCEnvExplosion::SetDamageForce(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvExplosion->DamageForce(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvExplosion", "m_flDamageForce", false, value);
}
GCBaseEntity GCEnvExplosion::GetInflictor() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvExplosion->Inflictor(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CEnvExplosion", "m_hInflictor").Get()));
    return value;
}
void GCEnvExplosion::SetInflictor(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvExplosion->Inflictor(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Inflictor' is not possible.\n");
}
int32_t GCEnvExplosion::GetCustomDamageType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvExplosion->CustomDamageType(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CEnvExplosion", "m_iCustomDamageType");
}
void GCEnvExplosion::SetCustomDamageType(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvExplosion->CustomDamageType(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvExplosion", "m_iCustomDamageType", false, value);
}
std::string GCEnvExplosion::GetExplosionType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvExplosion->ExplosionType(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvExplosion", "m_iszExplosionType").String();
}
void GCEnvExplosion::SetExplosionType(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvExplosion->ExplosionType(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvExplosion", "m_iszExplosionType", false, CUtlSymbolLarge(value.c_str()));
}
std::string GCEnvExplosion::GetCustomEffectName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvExplosion->CustomEffectName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvExplosion", "m_iszCustomEffectName").String();
}
void GCEnvExplosion::SetCustomEffectName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvExplosion->CustomEffectName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvExplosion", "m_iszCustomEffectName", false, CUtlSymbolLarge(value.c_str()));
}
std::string GCEnvExplosion::GetCustomSoundName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvExplosion->CustomSoundName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvExplosion", "m_iszCustomSoundName").String();
}
void GCEnvExplosion::SetCustomSoundName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvExplosion->CustomSoundName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvExplosion", "m_iszCustomSoundName", false, CUtlSymbolLarge(value.c_str()));
}
uint64_t GCEnvExplosion::GetClassIgnore() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvExplosion->ClassIgnore(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CEnvExplosion", "m_iClassIgnore");
}
void GCEnvExplosion::SetClassIgnore(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvExplosion->ClassIgnore(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvExplosion", "m_iClassIgnore", false, value);
}
uint64_t GCEnvExplosion::GetClassIgnore2() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvExplosion->ClassIgnore2(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CEnvExplosion", "m_iClassIgnore2");
}
void GCEnvExplosion::SetClassIgnore2(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvExplosion->ClassIgnore2(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvExplosion", "m_iClassIgnore2", false, value);
}
std::string GCEnvExplosion::GetEntityIgnoreName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvExplosion->EntityIgnoreName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvExplosion", "m_iszEntityIgnoreName").String();
}
void GCEnvExplosion::SetEntityIgnoreName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvExplosion->EntityIgnoreName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvExplosion", "m_iszEntityIgnoreName", false, CUtlSymbolLarge(value.c_str()));
}
GCBaseEntity GCEnvExplosion::GetEntityIgnore() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvExplosion->EntityIgnore(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CEnvExplosion", "m_hEntityIgnore").Get()));
    return value;
}
void GCEnvExplosion::SetEntityIgnore(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvExplosion->EntityIgnore(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'EntityIgnore' is not possible.\n");
}
void* GCEnvExplosion::GetPtr() {
    return m_ptr;
}
std::string GCEnvExplosion::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCEnvExplosion::IsValid() {
    return (m_ptr != nullptr);
}
GCModelPointEntity GCEnvExplosion::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CEnvExplosion::GetParent(ptr=%p)", m_ptr));
    GCModelPointEntity value(m_ptr);
    return value;
}
void GCEnvExplosion::SetParent(GCModelPointEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CEnvExplosion::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCEnvExplosion(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCEnvExplosion>("CEnvExplosion")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Magnitude", &GCEnvExplosion::GetMagnitude, &GCEnvExplosion::SetMagnitude)
        .addProperty("PlayerDamage", &GCEnvExplosion::GetPlayerDamage, &GCEnvExplosion::SetPlayerDamage)
        .addProperty("RadiusOverride", &GCEnvExplosion::GetRadiusOverride, &GCEnvExplosion::SetRadiusOverride)
        .addProperty("InnerRadius", &GCEnvExplosion::GetInnerRadius, &GCEnvExplosion::SetInnerRadius)
        .addProperty("SpriteScale", &GCEnvExplosion::GetSpriteScale, &GCEnvExplosion::SetSpriteScale)
        .addProperty("DamageForce", &GCEnvExplosion::GetDamageForce, &GCEnvExplosion::SetDamageForce)
        .addProperty("Inflictor", &GCEnvExplosion::GetInflictor, &GCEnvExplosion::SetInflictor)
        .addProperty("CustomDamageType", &GCEnvExplosion::GetCustomDamageType, &GCEnvExplosion::SetCustomDamageType)
        .addProperty("ExplosionType", &GCEnvExplosion::GetExplosionType, &GCEnvExplosion::SetExplosionType)
        .addProperty("CustomEffectName", &GCEnvExplosion::GetCustomEffectName, &GCEnvExplosion::SetCustomEffectName)
        .addProperty("CustomSoundName", &GCEnvExplosion::GetCustomSoundName, &GCEnvExplosion::SetCustomSoundName)
        .addProperty("ClassIgnore", &GCEnvExplosion::GetClassIgnore, &GCEnvExplosion::SetClassIgnore)
        .addProperty("ClassIgnore2", &GCEnvExplosion::GetClassIgnore2, &GCEnvExplosion::SetClassIgnore2)
        .addProperty("EntityIgnoreName", &GCEnvExplosion::GetEntityIgnoreName, &GCEnvExplosion::SetEntityIgnoreName)
        .addProperty("EntityIgnore", &GCEnvExplosion::GetEntityIgnore, &GCEnvExplosion::SetEntityIgnore)
        .addProperty("Parent", &GCEnvExplosion::GetParent, &GCEnvExplosion::SetParent)
        .addFunction("ToPtr", &GCEnvExplosion::ToPtr)
        .addFunction("IsValid", &GCEnvExplosion::IsValid)
        .endClass();
}
GCSoundEventAABBEntity::GCSoundEventAABBEntity(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCSoundEventAABBEntity::GCSoundEventAABBEntity(void *ptr) {
    m_ptr = ptr;
}
Vector GCSoundEventAABBEntity::GetMins() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSoundEventAABBEntity->Mins(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CSoundEventAABBEntity", "m_vMins");
}
void GCSoundEventAABBEntity::SetMins(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSoundEventAABBEntity->Mins(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSoundEventAABBEntity", "m_vMins", false, value);
}
Vector GCSoundEventAABBEntity::GetMaxs() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSoundEventAABBEntity->Maxs(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CSoundEventAABBEntity", "m_vMaxs");
}
void GCSoundEventAABBEntity::SetMaxs(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSoundEventAABBEntity->Maxs(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSoundEventAABBEntity", "m_vMaxs", false, value);
}
void* GCSoundEventAABBEntity::GetPtr() {
    return m_ptr;
}
std::string GCSoundEventAABBEntity::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCSoundEventAABBEntity::IsValid() {
    return (m_ptr != nullptr);
}
GCSoundEventEntity GCSoundEventAABBEntity::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSoundEventAABBEntity::GetParent(ptr=%p)", m_ptr));
    GCSoundEventEntity value(m_ptr);
    return value;
}
void GCSoundEventAABBEntity::SetParent(GCSoundEventEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSoundEventAABBEntity::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCSoundEventAABBEntity(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCSoundEventAABBEntity>("CSoundEventAABBEntity")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Mins", &GCSoundEventAABBEntity::GetMins, &GCSoundEventAABBEntity::SetMins)
        .addProperty("Maxs", &GCSoundEventAABBEntity::GetMaxs, &GCSoundEventAABBEntity::SetMaxs)
        .addProperty("Parent", &GCSoundEventAABBEntity::GetParent, &GCSoundEventAABBEntity::SetParent)
        .addFunction("ToPtr", &GCSoundEventAABBEntity::ToPtr)
        .addFunction("IsValid", &GCSoundEventAABBEntity::IsValid)
        .endClass();
}
GCTriggerLook::GCTriggerLook(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCTriggerLook::GCTriggerLook(void *ptr) {
    m_ptr = ptr;
}
GCBaseEntity GCTriggerLook::GetLookTarget() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerLook->LookTarget(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CTriggerLook", "m_hLookTarget").Get()));
    return value;
}
void GCTriggerLook::SetLookTarget(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerLook->LookTarget(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'LookTarget' is not possible.\n");
}
float GCTriggerLook::GetFieldOfView() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerLook->FieldOfView(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CTriggerLook", "m_flFieldOfView");
}
void GCTriggerLook::SetFieldOfView(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerLook->FieldOfView(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerLook", "m_flFieldOfView", false, value);
}
float GCTriggerLook::GetLookTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerLook->LookTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CTriggerLook", "m_flLookTime");
}
void GCTriggerLook::SetLookTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerLook->LookTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerLook", "m_flLookTime", false, value);
}
float GCTriggerLook::GetLookTimeTotal() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerLook->LookTimeTotal(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CTriggerLook", "m_flLookTimeTotal");
}
void GCTriggerLook::SetLookTimeTotal(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerLook->LookTimeTotal(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerLook", "m_flLookTimeTotal", false, value);
}
float GCTriggerLook::GetLookTimeLast() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerLook->LookTimeLast(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CTriggerLook", "m_flLookTimeLast");
}
void GCTriggerLook::SetLookTimeLast(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerLook->LookTimeLast(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerLook", "m_flLookTimeLast", false, value);
}
float GCTriggerLook::GetTimeoutDuration() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerLook->TimeoutDuration(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CTriggerLook", "m_flTimeoutDuration");
}
void GCTriggerLook::SetTimeoutDuration(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerLook->TimeoutDuration(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerLook", "m_flTimeoutDuration", false, value);
}
bool GCTriggerLook::GetTimeoutFired() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerLook->TimeoutFired(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CTriggerLook", "m_bTimeoutFired");
}
void GCTriggerLook::SetTimeoutFired(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerLook->TimeoutFired(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerLook", "m_bTimeoutFired", false, value);
}
bool GCTriggerLook::GetIsLooking() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerLook->IsLooking(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CTriggerLook", "m_bIsLooking");
}
void GCTriggerLook::SetIsLooking(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerLook->IsLooking(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerLook", "m_bIsLooking", false, value);
}
bool GCTriggerLook::Get2DFOV() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerLook->2DFOV(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CTriggerLook", "m_b2DFOV");
}
void GCTriggerLook::Set2DFOV(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerLook->2DFOV(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerLook", "m_b2DFOV", false, value);
}
bool GCTriggerLook::GetUseVelocity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerLook->UseVelocity(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CTriggerLook", "m_bUseVelocity");
}
void GCTriggerLook::SetUseVelocity(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerLook->UseVelocity(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerLook", "m_bUseVelocity", false, value);
}
bool GCTriggerLook::GetTestOcclusion() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerLook->TestOcclusion(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CTriggerLook", "m_bTestOcclusion");
}
void GCTriggerLook::SetTestOcclusion(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerLook->TestOcclusion(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerLook", "m_bTestOcclusion", false, value);
}
GCEntityIOOutput GCTriggerLook::GetOnTimeout() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerLook->OnTimeout(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CTriggerLook", "m_OnTimeout"));
    return value;
}
void GCTriggerLook::SetOnTimeout(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerLook->OnTimeout(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnTimeout' is not possible.\n");
}
GCEntityIOOutput GCTriggerLook::GetOnStartLook() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerLook->OnStartLook(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CTriggerLook", "m_OnStartLook"));
    return value;
}
void GCTriggerLook::SetOnStartLook(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerLook->OnStartLook(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnStartLook' is not possible.\n");
}
GCEntityIOOutput GCTriggerLook::GetOnEndLook() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerLook->OnEndLook(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CTriggerLook", "m_OnEndLook"));
    return value;
}
void GCTriggerLook::SetOnEndLook(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerLook->OnEndLook(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnEndLook' is not possible.\n");
}
void* GCTriggerLook::GetPtr() {
    return m_ptr;
}
std::string GCTriggerLook::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCTriggerLook::IsValid() {
    return (m_ptr != nullptr);
}
GCTriggerOnce GCTriggerLook::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTriggerLook::GetParent(ptr=%p)", m_ptr));
    GCTriggerOnce value(m_ptr);
    return value;
}
void GCTriggerLook::SetParent(GCTriggerOnce value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTriggerLook::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCTriggerLook(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCTriggerLook>("CTriggerLook")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("LookTarget", &GCTriggerLook::GetLookTarget, &GCTriggerLook::SetLookTarget)
        .addProperty("FieldOfView", &GCTriggerLook::GetFieldOfView, &GCTriggerLook::SetFieldOfView)
        .addProperty("LookTime", &GCTriggerLook::GetLookTime, &GCTriggerLook::SetLookTime)
        .addProperty("LookTimeTotal", &GCTriggerLook::GetLookTimeTotal, &GCTriggerLook::SetLookTimeTotal)
        .addProperty("LookTimeLast", &GCTriggerLook::GetLookTimeLast, &GCTriggerLook::SetLookTimeLast)
        .addProperty("TimeoutDuration", &GCTriggerLook::GetTimeoutDuration, &GCTriggerLook::SetTimeoutDuration)
        .addProperty("TimeoutFired", &GCTriggerLook::GetTimeoutFired, &GCTriggerLook::SetTimeoutFired)
        .addProperty("IsLooking", &GCTriggerLook::GetIsLooking, &GCTriggerLook::SetIsLooking)
        .addProperty("2DFOV", &GCTriggerLook::Get2DFOV, &GCTriggerLook::Set2DFOV)
        .addProperty("UseVelocity", &GCTriggerLook::GetUseVelocity, &GCTriggerLook::SetUseVelocity)
        .addProperty("TestOcclusion", &GCTriggerLook::GetTestOcclusion, &GCTriggerLook::SetTestOcclusion)
        .addProperty("OnTimeout", &GCTriggerLook::GetOnTimeout, &GCTriggerLook::SetOnTimeout)
        .addProperty("OnStartLook", &GCTriggerLook::GetOnStartLook, &GCTriggerLook::SetOnStartLook)
        .addProperty("OnEndLook", &GCTriggerLook::GetOnEndLook, &GCTriggerLook::SetOnEndLook)
        .addProperty("Parent", &GCTriggerLook::GetParent, &GCTriggerLook::SetParent)
        .addFunction("ToPtr", &GCTriggerLook::ToPtr)
        .addFunction("IsValid", &GCTriggerLook::IsValid)
        .endClass();
}
GCEntitySubclassVDataBase::GCEntitySubclassVDataBase(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCEntitySubclassVDataBase::GCEntitySubclassVDataBase(void *ptr) {
    m_ptr = ptr;
}
void* GCEntitySubclassVDataBase::GetPtr() {
    return m_ptr;
}
std::string GCEntitySubclassVDataBase::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCEntitySubclassVDataBase::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCEntitySubclassVDataBase(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCEntitySubclassVDataBase>("CEntitySubclassVDataBase")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addFunction("ToPtr", &GCEntitySubclassVDataBase::ToPtr)
        .addFunction("IsValid", &GCEntitySubclassVDataBase::IsValid)
        .endClass();
}
GCLogicProximity::GCLogicProximity(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCLogicProximity::GCLogicProximity(void *ptr) {
    m_ptr = ptr;
}
void* GCLogicProximity::GetPtr() {
    return m_ptr;
}
std::string GCLogicProximity::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCLogicProximity::IsValid() {
    return (m_ptr != nullptr);
}
GCPointEntity GCLogicProximity::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CLogicProximity::GetParent(ptr=%p)", m_ptr));
    GCPointEntity value(m_ptr);
    return value;
}
void GCLogicProximity::SetParent(GCPointEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CLogicProximity::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCLogicProximity(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCLogicProximity>("CLogicProximity")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCLogicProximity::GetParent, &GCLogicProximity::SetParent)
        .addFunction("ToPtr", &GCLogicProximity::ToPtr)
        .addFunction("IsValid", &GCLogicProximity::IsValid)
        .endClass();
}
GCPointClientUIWorldPanel::GCPointClientUIWorldPanel(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPointClientUIWorldPanel::GCPointClientUIWorldPanel(void *ptr) {
    m_ptr = ptr;
}
bool GCPointClientUIWorldPanel::GetIgnoreInput() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointClientUIWorldPanel->IgnoreInput(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPointClientUIWorldPanel", "m_bIgnoreInput");
}
void GCPointClientUIWorldPanel::SetIgnoreInput(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointClientUIWorldPanel->IgnoreInput(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_bIgnoreInput", false, value);
}
bool GCPointClientUIWorldPanel::GetLit() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointClientUIWorldPanel->Lit(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPointClientUIWorldPanel", "m_bLit");
}
void GCPointClientUIWorldPanel::SetLit(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointClientUIWorldPanel->Lit(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_bLit", false, value);
}
bool GCPointClientUIWorldPanel::GetFollowPlayerAcrossTeleport() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointClientUIWorldPanel->FollowPlayerAcrossTeleport(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPointClientUIWorldPanel", "m_bFollowPlayerAcrossTeleport");
}
void GCPointClientUIWorldPanel::SetFollowPlayerAcrossTeleport(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointClientUIWorldPanel->FollowPlayerAcrossTeleport(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_bFollowPlayerAcrossTeleport", false, value);
}
float GCPointClientUIWorldPanel::GetWidth() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointClientUIWorldPanel->Width(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPointClientUIWorldPanel", "m_flWidth");
}
void GCPointClientUIWorldPanel::SetWidth(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointClientUIWorldPanel->Width(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_flWidth", false, value);
}
float GCPointClientUIWorldPanel::GetHeight() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointClientUIWorldPanel->Height(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPointClientUIWorldPanel", "m_flHeight");
}
void GCPointClientUIWorldPanel::SetHeight(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointClientUIWorldPanel->Height(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_flHeight", false, value);
}
float GCPointClientUIWorldPanel::GetDPI() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointClientUIWorldPanel->DPI(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPointClientUIWorldPanel", "m_flDPI");
}
void GCPointClientUIWorldPanel::SetDPI(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointClientUIWorldPanel->DPI(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_flDPI", false, value);
}
float GCPointClientUIWorldPanel::GetInteractDistance() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointClientUIWorldPanel->InteractDistance(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPointClientUIWorldPanel", "m_flInteractDistance");
}
void GCPointClientUIWorldPanel::SetInteractDistance(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointClientUIWorldPanel->InteractDistance(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_flInteractDistance", false, value);
}
float GCPointClientUIWorldPanel::GetDepthOffset() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointClientUIWorldPanel->DepthOffset(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPointClientUIWorldPanel", "m_flDepthOffset");
}
void GCPointClientUIWorldPanel::SetDepthOffset(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointClientUIWorldPanel->DepthOffset(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_flDepthOffset", false, value);
}
uint32_t GCPointClientUIWorldPanel::GetOwnerContext() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointClientUIWorldPanel->OwnerContext(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CPointClientUIWorldPanel", "m_unOwnerContext");
}
void GCPointClientUIWorldPanel::SetOwnerContext(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointClientUIWorldPanel->OwnerContext(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_unOwnerContext", false, value);
}
uint32_t GCPointClientUIWorldPanel::GetHorizontalAlign() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointClientUIWorldPanel->HorizontalAlign(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CPointClientUIWorldPanel", "m_unHorizontalAlign");
}
void GCPointClientUIWorldPanel::SetHorizontalAlign(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointClientUIWorldPanel->HorizontalAlign(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_unHorizontalAlign", false, value);
}
uint32_t GCPointClientUIWorldPanel::GetVerticalAlign() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointClientUIWorldPanel->VerticalAlign(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CPointClientUIWorldPanel", "m_unVerticalAlign");
}
void GCPointClientUIWorldPanel::SetVerticalAlign(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointClientUIWorldPanel->VerticalAlign(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_unVerticalAlign", false, value);
}
uint32_t GCPointClientUIWorldPanel::GetOrientation() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointClientUIWorldPanel->Orientation(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CPointClientUIWorldPanel", "m_unOrientation");
}
void GCPointClientUIWorldPanel::SetOrientation(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointClientUIWorldPanel->Orientation(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_unOrientation", false, value);
}
bool GCPointClientUIWorldPanel::GetAllowInteractionFromAllSceneWorlds() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointClientUIWorldPanel->AllowInteractionFromAllSceneWorlds(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPointClientUIWorldPanel", "m_bAllowInteractionFromAllSceneWorlds");
}
void GCPointClientUIWorldPanel::SetAllowInteractionFromAllSceneWorlds(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointClientUIWorldPanel->AllowInteractionFromAllSceneWorlds(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_bAllowInteractionFromAllSceneWorlds", false, value);
}
std::vector<CUtlSymbolLarge> GCPointClientUIWorldPanel::GetCSSClasses() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointClientUIWorldPanel->CSSClasses(ptr=%p)", m_ptr));
    CUtlVector<CUtlSymbolLarge>* vec = GetSchemaValue<CUtlVector<CUtlSymbolLarge>*>(m_ptr, "CPointClientUIWorldPanel", "m_vecCSSClasses"); std::vector<CUtlSymbolLarge> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCPointClientUIWorldPanel::SetCSSClasses(std::vector<CUtlSymbolLarge> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointClientUIWorldPanel->CSSClasses(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<CUtlSymbolLarge>(m_ptr, "CPointClientUIWorldPanel", "m_vecCSSClasses", false, value);
}
bool GCPointClientUIWorldPanel::GetOpaque() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointClientUIWorldPanel->Opaque(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPointClientUIWorldPanel", "m_bOpaque");
}
void GCPointClientUIWorldPanel::SetOpaque(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointClientUIWorldPanel->Opaque(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_bOpaque", false, value);
}
bool GCPointClientUIWorldPanel::GetNoDepth() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointClientUIWorldPanel->NoDepth(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPointClientUIWorldPanel", "m_bNoDepth");
}
void GCPointClientUIWorldPanel::SetNoDepth(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointClientUIWorldPanel->NoDepth(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_bNoDepth", false, value);
}
bool GCPointClientUIWorldPanel::GetRenderBackface() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointClientUIWorldPanel->RenderBackface(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPointClientUIWorldPanel", "m_bRenderBackface");
}
void GCPointClientUIWorldPanel::SetRenderBackface(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointClientUIWorldPanel->RenderBackface(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_bRenderBackface", false, value);
}
bool GCPointClientUIWorldPanel::GetUseOffScreenIndicator() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointClientUIWorldPanel->UseOffScreenIndicator(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPointClientUIWorldPanel", "m_bUseOffScreenIndicator");
}
void GCPointClientUIWorldPanel::SetUseOffScreenIndicator(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointClientUIWorldPanel->UseOffScreenIndicator(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_bUseOffScreenIndicator", false, value);
}
bool GCPointClientUIWorldPanel::GetExcludeFromSaveGames() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointClientUIWorldPanel->ExcludeFromSaveGames(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPointClientUIWorldPanel", "m_bExcludeFromSaveGames");
}
void GCPointClientUIWorldPanel::SetExcludeFromSaveGames(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointClientUIWorldPanel->ExcludeFromSaveGames(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_bExcludeFromSaveGames", false, value);
}
bool GCPointClientUIWorldPanel::GetGrabbable() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointClientUIWorldPanel->Grabbable(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPointClientUIWorldPanel", "m_bGrabbable");
}
void GCPointClientUIWorldPanel::SetGrabbable(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointClientUIWorldPanel->Grabbable(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_bGrabbable", false, value);
}
bool GCPointClientUIWorldPanel::GetOnlyRenderToTexture() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointClientUIWorldPanel->OnlyRenderToTexture(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPointClientUIWorldPanel", "m_bOnlyRenderToTexture");
}
void GCPointClientUIWorldPanel::SetOnlyRenderToTexture(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointClientUIWorldPanel->OnlyRenderToTexture(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_bOnlyRenderToTexture", false, value);
}
bool GCPointClientUIWorldPanel::GetDisableMipGen() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointClientUIWorldPanel->DisableMipGen(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPointClientUIWorldPanel", "m_bDisableMipGen");
}
void GCPointClientUIWorldPanel::SetDisableMipGen(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointClientUIWorldPanel->DisableMipGen(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_bDisableMipGen", false, value);
}
int32_t GCPointClientUIWorldPanel::GetExplicitImageLayout() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointClientUIWorldPanel->ExplicitImageLayout(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CPointClientUIWorldPanel", "m_nExplicitImageLayout");
}
void GCPointClientUIWorldPanel::SetExplicitImageLayout(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointClientUIWorldPanel->ExplicitImageLayout(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointClientUIWorldPanel", "m_nExplicitImageLayout", false, value);
}
void* GCPointClientUIWorldPanel::GetPtr() {
    return m_ptr;
}
std::string GCPointClientUIWorldPanel::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPointClientUIWorldPanel::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseClientUIEntity GCPointClientUIWorldPanel::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPointClientUIWorldPanel::GetParent(ptr=%p)", m_ptr));
    GCBaseClientUIEntity value(m_ptr);
    return value;
}
void GCPointClientUIWorldPanel::SetParent(GCBaseClientUIEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPointClientUIWorldPanel::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCPointClientUIWorldPanel(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPointClientUIWorldPanel>("CPointClientUIWorldPanel")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("IgnoreInput", &GCPointClientUIWorldPanel::GetIgnoreInput, &GCPointClientUIWorldPanel::SetIgnoreInput)
        .addProperty("Lit", &GCPointClientUIWorldPanel::GetLit, &GCPointClientUIWorldPanel::SetLit)
        .addProperty("FollowPlayerAcrossTeleport", &GCPointClientUIWorldPanel::GetFollowPlayerAcrossTeleport, &GCPointClientUIWorldPanel::SetFollowPlayerAcrossTeleport)
        .addProperty("Width", &GCPointClientUIWorldPanel::GetWidth, &GCPointClientUIWorldPanel::SetWidth)
        .addProperty("Height", &GCPointClientUIWorldPanel::GetHeight, &GCPointClientUIWorldPanel::SetHeight)
        .addProperty("DPI", &GCPointClientUIWorldPanel::GetDPI, &GCPointClientUIWorldPanel::SetDPI)
        .addProperty("InteractDistance", &GCPointClientUIWorldPanel::GetInteractDistance, &GCPointClientUIWorldPanel::SetInteractDistance)
        .addProperty("DepthOffset", &GCPointClientUIWorldPanel::GetDepthOffset, &GCPointClientUIWorldPanel::SetDepthOffset)
        .addProperty("OwnerContext", &GCPointClientUIWorldPanel::GetOwnerContext, &GCPointClientUIWorldPanel::SetOwnerContext)
        .addProperty("HorizontalAlign", &GCPointClientUIWorldPanel::GetHorizontalAlign, &GCPointClientUIWorldPanel::SetHorizontalAlign)
        .addProperty("VerticalAlign", &GCPointClientUIWorldPanel::GetVerticalAlign, &GCPointClientUIWorldPanel::SetVerticalAlign)
        .addProperty("Orientation", &GCPointClientUIWorldPanel::GetOrientation, &GCPointClientUIWorldPanel::SetOrientation)
        .addProperty("AllowInteractionFromAllSceneWorlds", &GCPointClientUIWorldPanel::GetAllowInteractionFromAllSceneWorlds, &GCPointClientUIWorldPanel::SetAllowInteractionFromAllSceneWorlds)
        .addProperty("CSSClasses", &GCPointClientUIWorldPanel::GetCSSClasses, &GCPointClientUIWorldPanel::SetCSSClasses)
        .addProperty("Opaque", &GCPointClientUIWorldPanel::GetOpaque, &GCPointClientUIWorldPanel::SetOpaque)
        .addProperty("NoDepth", &GCPointClientUIWorldPanel::GetNoDepth, &GCPointClientUIWorldPanel::SetNoDepth)
        .addProperty("RenderBackface", &GCPointClientUIWorldPanel::GetRenderBackface, &GCPointClientUIWorldPanel::SetRenderBackface)
        .addProperty("UseOffScreenIndicator", &GCPointClientUIWorldPanel::GetUseOffScreenIndicator, &GCPointClientUIWorldPanel::SetUseOffScreenIndicator)
        .addProperty("ExcludeFromSaveGames", &GCPointClientUIWorldPanel::GetExcludeFromSaveGames, &GCPointClientUIWorldPanel::SetExcludeFromSaveGames)
        .addProperty("Grabbable", &GCPointClientUIWorldPanel::GetGrabbable, &GCPointClientUIWorldPanel::SetGrabbable)
        .addProperty("OnlyRenderToTexture", &GCPointClientUIWorldPanel::GetOnlyRenderToTexture, &GCPointClientUIWorldPanel::SetOnlyRenderToTexture)
        .addProperty("DisableMipGen", &GCPointClientUIWorldPanel::GetDisableMipGen, &GCPointClientUIWorldPanel::SetDisableMipGen)
        .addProperty("ExplicitImageLayout", &GCPointClientUIWorldPanel::GetExplicitImageLayout, &GCPointClientUIWorldPanel::SetExplicitImageLayout)
        .addProperty("Parent", &GCPointClientUIWorldPanel::GetParent, &GCPointClientUIWorldPanel::SetParent)
        .addFunction("ToPtr", &GCPointClientUIWorldPanel::ToPtr)
        .addFunction("IsValid", &GCPointClientUIWorldPanel::IsValid)
        .endClass();
}
GCFilterContext::GCFilterContext(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCFilterContext::GCFilterContext(void *ptr) {
    m_ptr = ptr;
}
std::string GCFilterContext::GetFilterContext() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFilterContext->FilterContext(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFilterContext", "m_iFilterContext").String();
}
void GCFilterContext::SetFilterContext(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFilterContext->FilterContext(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFilterContext", "m_iFilterContext", false, CUtlSymbolLarge(value.c_str()));
}
void* GCFilterContext::GetPtr() {
    return m_ptr;
}
std::string GCFilterContext::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCFilterContext::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseFilter GCFilterContext::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFilterContext::GetParent(ptr=%p)", m_ptr));
    GCBaseFilter value(m_ptr);
    return value;
}
void GCFilterContext::SetParent(GCBaseFilter value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFilterContext::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCFilterContext(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCFilterContext>("CFilterContext")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("FilterContext", &GCFilterContext::GetFilterContext, &GCFilterContext::SetFilterContext)
        .addProperty("Parent", &GCFilterContext::GetParent, &GCFilterContext::SetParent)
        .addFunction("ToPtr", &GCFilterContext::ToPtr)
        .addFunction("IsValid", &GCFilterContext::IsValid)
        .endClass();
}
GCPathParticleRopeAlias_path_particle_rope_clientside::GCPathParticleRopeAlias_path_particle_rope_clientside(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPathParticleRopeAlias_path_particle_rope_clientside::GCPathParticleRopeAlias_path_particle_rope_clientside(void *ptr) {
    m_ptr = ptr;
}
void* GCPathParticleRopeAlias_path_particle_rope_clientside::GetPtr() {
    return m_ptr;
}
std::string GCPathParticleRopeAlias_path_particle_rope_clientside::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPathParticleRopeAlias_path_particle_rope_clientside::IsValid() {
    return (m_ptr != nullptr);
}
GCPathParticleRope GCPathParticleRopeAlias_path_particle_rope_clientside::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPathParticleRopeAlias_path_particle_rope_clientside::GetParent(ptr=%p)", m_ptr));
    GCPathParticleRope value(m_ptr);
    return value;
}
void GCPathParticleRopeAlias_path_particle_rope_clientside::SetParent(GCPathParticleRope value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPathParticleRopeAlias_path_particle_rope_clientside::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCPathParticleRopeAlias_path_particle_rope_clientside(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPathParticleRopeAlias_path_particle_rope_clientside>("CPathParticleRopeAlias_path_particle_rope_clientside")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCPathParticleRopeAlias_path_particle_rope_clientside::GetParent, &GCPathParticleRopeAlias_path_particle_rope_clientside::SetParent)
        .addFunction("ToPtr", &GCPathParticleRopeAlias_path_particle_rope_clientside::ToPtr)
        .addFunction("IsValid", &GCPathParticleRopeAlias_path_particle_rope_clientside::IsValid)
        .endClass();
}
GCTriggerBuoyancy::GCTriggerBuoyancy(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCTriggerBuoyancy::GCTriggerBuoyancy(void *ptr) {
    m_ptr = ptr;
}
GCBuoyancyHelper GCTriggerBuoyancy::GetBuoyancyHelper() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerBuoyancy->BuoyancyHelper(ptr=%p)", m_ptr));
    GCBuoyancyHelper value(GetSchemaPtr(m_ptr, "CTriggerBuoyancy", "m_BuoyancyHelper"));
    return value;
}
void GCTriggerBuoyancy::SetBuoyancyHelper(GCBuoyancyHelper value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerBuoyancy->BuoyancyHelper(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'BuoyancyHelper' is not possible.\n");
}
float GCTriggerBuoyancy::GetFluidDensity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerBuoyancy->FluidDensity(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CTriggerBuoyancy", "m_flFluidDensity");
}
void GCTriggerBuoyancy::SetFluidDensity(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerBuoyancy->FluidDensity(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerBuoyancy", "m_flFluidDensity", false, value);
}
void* GCTriggerBuoyancy::GetPtr() {
    return m_ptr;
}
std::string GCTriggerBuoyancy::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCTriggerBuoyancy::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseTrigger GCTriggerBuoyancy::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTriggerBuoyancy::GetParent(ptr=%p)", m_ptr));
    GCBaseTrigger value(m_ptr);
    return value;
}
void GCTriggerBuoyancy::SetParent(GCBaseTrigger value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTriggerBuoyancy::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCTriggerBuoyancy(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCTriggerBuoyancy>("CTriggerBuoyancy")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("BuoyancyHelper", &GCTriggerBuoyancy::GetBuoyancyHelper, &GCTriggerBuoyancy::SetBuoyancyHelper)
        .addProperty("FluidDensity", &GCTriggerBuoyancy::GetFluidDensity, &GCTriggerBuoyancy::SetFluidDensity)
        .addProperty("Parent", &GCTriggerBuoyancy::GetParent, &GCTriggerBuoyancy::SetParent)
        .addFunction("ToPtr", &GCTriggerBuoyancy::ToPtr)
        .addFunction("IsValid", &GCTriggerBuoyancy::IsValid)
        .endClass();
}
GCFilterAttributeInt::GCFilterAttributeInt(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCFilterAttributeInt::GCFilterAttributeInt(void *ptr) {
    m_ptr = ptr;
}
uint32_t GCFilterAttributeInt::GetAttributeName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFilterAttributeInt->AttributeName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlStringToken>(m_ptr, "CFilterAttributeInt", "m_sAttributeName").m_nHashCode;
}
void GCFilterAttributeInt::SetAttributeName(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFilterAttributeInt->AttributeName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFilterAttributeInt", "m_sAttributeName", false, CUtlStringToken(value));
}
void* GCFilterAttributeInt::GetPtr() {
    return m_ptr;
}
std::string GCFilterAttributeInt::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCFilterAttributeInt::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseFilter GCFilterAttributeInt::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFilterAttributeInt::GetParent(ptr=%p)", m_ptr));
    GCBaseFilter value(m_ptr);
    return value;
}
void GCFilterAttributeInt::SetParent(GCBaseFilter value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFilterAttributeInt::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCFilterAttributeInt(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCFilterAttributeInt>("CFilterAttributeInt")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("AttributeName", &GCFilterAttributeInt::GetAttributeName, &GCFilterAttributeInt::SetAttributeName)
        .addProperty("Parent", &GCFilterAttributeInt::GetParent, &GCFilterAttributeInt::SetParent)
        .addFunction("ToPtr", &GCFilterAttributeInt::ToPtr)
        .addFunction("IsValid", &GCFilterAttributeInt::IsValid)
        .endClass();
}
GCCSPlayer_ActionTrackingServices::GCCSPlayer_ActionTrackingServices(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCCSPlayer_ActionTrackingServices::GCCSPlayer_ActionTrackingServices(void *ptr) {
    m_ptr = ptr;
}
GCBasePlayerWeapon GCCSPlayer_ActionTrackingServices::GetLastWeaponBeforeC4AutoSwitch() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_ActionTrackingServices->LastWeaponBeforeC4AutoSwitch(ptr=%p)", m_ptr));
    GCBasePlayerWeapon value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CCSPlayer_ActionTrackingServices", "m_hLastWeaponBeforeC4AutoSwitch").Get()));
    return value;
}
void GCCSPlayer_ActionTrackingServices::SetLastWeaponBeforeC4AutoSwitch(GCBasePlayerWeapon value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_ActionTrackingServices->LastWeaponBeforeC4AutoSwitch(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'LastWeaponBeforeC4AutoSwitch' is not possible.\n");
}
bool GCCSPlayer_ActionTrackingServices::GetIsRescuing() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_ActionTrackingServices->IsRescuing(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_ActionTrackingServices", "m_bIsRescuing");
}
void GCCSPlayer_ActionTrackingServices::SetIsRescuing(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_ActionTrackingServices->IsRescuing(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_ActionTrackingServices", "m_bIsRescuing", false, value);
}
GWeaponPurchaseTracker_t GCCSPlayer_ActionTrackingServices::GetWeaponPurchasesThisMatch() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_ActionTrackingServices->WeaponPurchasesThisMatch(ptr=%p)", m_ptr));
    GWeaponPurchaseTracker_t value(GetSchemaPtr(m_ptr, "CCSPlayer_ActionTrackingServices", "m_weaponPurchasesThisMatch"));
    return value;
}
void GCCSPlayer_ActionTrackingServices::SetWeaponPurchasesThisMatch(GWeaponPurchaseTracker_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_ActionTrackingServices->WeaponPurchasesThisMatch(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'WeaponPurchasesThisMatch' is not possible.\n");
}
GWeaponPurchaseTracker_t GCCSPlayer_ActionTrackingServices::GetWeaponPurchasesThisRound() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_ActionTrackingServices->WeaponPurchasesThisRound(ptr=%p)", m_ptr));
    GWeaponPurchaseTracker_t value(GetSchemaPtr(m_ptr, "CCSPlayer_ActionTrackingServices", "m_weaponPurchasesThisRound"));
    return value;
}
void GCCSPlayer_ActionTrackingServices::SetWeaponPurchasesThisRound(GWeaponPurchaseTracker_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_ActionTrackingServices->WeaponPurchasesThisRound(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'WeaponPurchasesThisRound' is not possible.\n");
}
void* GCCSPlayer_ActionTrackingServices::GetPtr() {
    return m_ptr;
}
std::string GCCSPlayer_ActionTrackingServices::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCCSPlayer_ActionTrackingServices::IsValid() {
    return (m_ptr != nullptr);
}
GCPlayerPawnComponent GCCSPlayer_ActionTrackingServices::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSPlayer_ActionTrackingServices::GetParent(ptr=%p)", m_ptr));
    GCPlayerPawnComponent value(m_ptr);
    return value;
}
void GCCSPlayer_ActionTrackingServices::SetParent(GCPlayerPawnComponent value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSPlayer_ActionTrackingServices::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCCSPlayer_ActionTrackingServices(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCCSPlayer_ActionTrackingServices>("CCSPlayer_ActionTrackingServices")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("LastWeaponBeforeC4AutoSwitch", &GCCSPlayer_ActionTrackingServices::GetLastWeaponBeforeC4AutoSwitch, &GCCSPlayer_ActionTrackingServices::SetLastWeaponBeforeC4AutoSwitch)
        .addProperty("IsRescuing", &GCCSPlayer_ActionTrackingServices::GetIsRescuing, &GCCSPlayer_ActionTrackingServices::SetIsRescuing)
        .addProperty("WeaponPurchasesThisMatch", &GCCSPlayer_ActionTrackingServices::GetWeaponPurchasesThisMatch, &GCCSPlayer_ActionTrackingServices::SetWeaponPurchasesThisMatch)
        .addProperty("WeaponPurchasesThisRound", &GCCSPlayer_ActionTrackingServices::GetWeaponPurchasesThisRound, &GCCSPlayer_ActionTrackingServices::SetWeaponPurchasesThisRound)
        .addProperty("Parent", &GCCSPlayer_ActionTrackingServices::GetParent, &GCCSPlayer_ActionTrackingServices::SetParent)
        .addFunction("ToPtr", &GCCSPlayer_ActionTrackingServices::ToPtr)
        .addFunction("IsValid", &GCCSPlayer_ActionTrackingServices::IsValid)
        .endClass();
}
GCAISound::GCAISound(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCAISound::GCAISound(void *ptr) {
    m_ptr = ptr;
}
uint64_t GCAISound::GetSoundType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAISound->SoundType(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CAISound", "m_iSoundType");
}
void GCAISound::SetSoundType(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAISound->SoundType(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CAISound", "m_iSoundType", false, value);
}
uint64_t GCAISound::GetSoundFlags() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAISound->SoundFlags(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CAISound", "m_iSoundFlags");
}
void GCAISound::SetSoundFlags(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAISound->SoundFlags(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CAISound", "m_iSoundFlags", false, value);
}
int32_t GCAISound::GetVolume() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAISound->Volume(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CAISound", "m_iVolume");
}
void GCAISound::SetVolume(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAISound->Volume(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CAISound", "m_iVolume", false, value);
}
int32_t GCAISound::GetSoundIndex() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAISound->SoundIndex(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CAISound", "m_iSoundIndex");
}
void GCAISound::SetSoundIndex(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAISound->SoundIndex(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CAISound", "m_iSoundIndex", false, value);
}
float GCAISound::GetDuration() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAISound->Duration(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CAISound", "m_flDuration");
}
void GCAISound::SetDuration(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAISound->Duration(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CAISound", "m_flDuration", false, value);
}
std::string GCAISound::GetProxyEntityName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAISound->ProxyEntityName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CAISound", "m_iszProxyEntityName").String();
}
void GCAISound::SetProxyEntityName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAISound->ProxyEntityName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CAISound", "m_iszProxyEntityName", false, CUtlSymbolLarge(value.c_str()));
}
void* GCAISound::GetPtr() {
    return m_ptr;
}
std::string GCAISound::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCAISound::IsValid() {
    return (m_ptr != nullptr);
}
GCPointEntity GCAISound::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CAISound::GetParent(ptr=%p)", m_ptr));
    GCPointEntity value(m_ptr);
    return value;
}
void GCAISound::SetParent(GCPointEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CAISound::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCAISound(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCAISound>("CAISound")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("SoundType", &GCAISound::GetSoundType, &GCAISound::SetSoundType)
        .addProperty("SoundFlags", &GCAISound::GetSoundFlags, &GCAISound::SetSoundFlags)
        .addProperty("Volume", &GCAISound::GetVolume, &GCAISound::SetVolume)
        .addProperty("SoundIndex", &GCAISound::GetSoundIndex, &GCAISound::SetSoundIndex)
        .addProperty("Duration", &GCAISound::GetDuration, &GCAISound::SetDuration)
        .addProperty("ProxyEntityName", &GCAISound::GetProxyEntityName, &GCAISound::SetProxyEntityName)
        .addProperty("Parent", &GCAISound::GetParent, &GCAISound::SetParent)
        .addFunction("ToPtr", &GCAISound::ToPtr)
        .addFunction("IsValid", &GCAISound::IsValid)
        .endClass();
}
GCPointEntityFinder::GCPointEntityFinder(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPointEntityFinder::GCPointEntityFinder(void *ptr) {
    m_ptr = ptr;
}
GCBaseEntity GCPointEntityFinder::GetEntity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointEntityFinder->Entity(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CPointEntityFinder", "m_hEntity").Get()));
    return value;
}
void GCPointEntityFinder::SetEntity(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointEntityFinder->Entity(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Entity' is not possible.\n");
}
std::string GCPointEntityFinder::GetFilterName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointEntityFinder->FilterName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPointEntityFinder", "m_iFilterName").String();
}
void GCPointEntityFinder::SetFilterName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointEntityFinder->FilterName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointEntityFinder", "m_iFilterName", false, CUtlSymbolLarge(value.c_str()));
}
GCBaseFilter GCPointEntityFinder::GetFilter() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointEntityFinder->Filter(ptr=%p)", m_ptr));
    GCBaseFilter value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CPointEntityFinder", "m_hFilter").Get()));
    return value;
}
void GCPointEntityFinder::SetFilter(GCBaseFilter value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointEntityFinder->Filter(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Filter' is not possible.\n");
}
std::string GCPointEntityFinder::GetRefName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointEntityFinder->RefName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPointEntityFinder", "m_iRefName").String();
}
void GCPointEntityFinder::SetRefName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointEntityFinder->RefName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointEntityFinder", "m_iRefName", false, CUtlSymbolLarge(value.c_str()));
}
GCBaseEntity GCPointEntityFinder::GetReference() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointEntityFinder->Reference(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CPointEntityFinder", "m_hReference").Get()));
    return value;
}
void GCPointEntityFinder::SetReference(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointEntityFinder->Reference(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Reference' is not possible.\n");
}
uint64_t GCPointEntityFinder::GetFindMethod() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointEntityFinder->FindMethod(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CPointEntityFinder", "m_FindMethod");
}
void GCPointEntityFinder::SetFindMethod(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointEntityFinder->FindMethod(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointEntityFinder", "m_FindMethod", false, value);
}
GCEntityIOOutput GCPointEntityFinder::GetOnFoundEntity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointEntityFinder->OnFoundEntity(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CPointEntityFinder", "m_OnFoundEntity"));
    return value;
}
void GCPointEntityFinder::SetOnFoundEntity(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointEntityFinder->OnFoundEntity(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnFoundEntity' is not possible.\n");
}
void* GCPointEntityFinder::GetPtr() {
    return m_ptr;
}
std::string GCPointEntityFinder::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPointEntityFinder::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseEntity GCPointEntityFinder::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPointEntityFinder::GetParent(ptr=%p)", m_ptr));
    GCBaseEntity value(m_ptr);
    return value;
}
void GCPointEntityFinder::SetParent(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPointEntityFinder::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCPointEntityFinder(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPointEntityFinder>("CPointEntityFinder")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Entity", &GCPointEntityFinder::GetEntity, &GCPointEntityFinder::SetEntity)
        .addProperty("FilterName", &GCPointEntityFinder::GetFilterName, &GCPointEntityFinder::SetFilterName)
        .addProperty("Filter", &GCPointEntityFinder::GetFilter, &GCPointEntityFinder::SetFilter)
        .addProperty("RefName", &GCPointEntityFinder::GetRefName, &GCPointEntityFinder::SetRefName)
        .addProperty("Reference", &GCPointEntityFinder::GetReference, &GCPointEntityFinder::SetReference)
        .addProperty("FindMethod", &GCPointEntityFinder::GetFindMethod, &GCPointEntityFinder::SetFindMethod)
        .addProperty("OnFoundEntity", &GCPointEntityFinder::GetOnFoundEntity, &GCPointEntityFinder::SetOnFoundEntity)
        .addProperty("Parent", &GCPointEntityFinder::GetParent, &GCPointEntityFinder::SetParent)
        .addFunction("ToPtr", &GCPointEntityFinder::ToPtr)
        .addFunction("IsValid", &GCPointEntityFinder::IsValid)
        .endClass();
}
Gshard_model_desc_t::Gshard_model_desc_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
Gshard_model_desc_t::Gshard_model_desc_t(void *ptr) {
    m_ptr = ptr;
}
int32_t Gshard_model_desc_t::GetModelID() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: shard_model_desc_t->ModelID(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "shard_model_desc_t", "m_nModelID");
}
void Gshard_model_desc_t::SetModelID(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: shard_model_desc_t->ModelID(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "shard_model_desc_t", "m_nModelID", true, value);
}
uint64_t Gshard_model_desc_t::GetSolid() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: shard_model_desc_t->Solid(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "shard_model_desc_t", "m_solid");
}
void Gshard_model_desc_t::SetSolid(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: shard_model_desc_t->Solid(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "shard_model_desc_t", "m_solid", true, value);
}
uint64_t Gshard_model_desc_t::GetShatterPanelMode() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: shard_model_desc_t->ShatterPanelMode(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "shard_model_desc_t", "m_ShatterPanelMode");
}
void Gshard_model_desc_t::SetShatterPanelMode(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: shard_model_desc_t->ShatterPanelMode(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "shard_model_desc_t", "m_ShatterPanelMode", true, value);
}
Vector2D Gshard_model_desc_t::GetPanelSize() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: shard_model_desc_t->PanelSize(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector2D>(m_ptr, "shard_model_desc_t", "m_vecPanelSize");
}
void Gshard_model_desc_t::SetPanelSize(Vector2D value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: shard_model_desc_t->PanelSize(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "shard_model_desc_t", "m_vecPanelSize", true, value);
}
Vector2D Gshard_model_desc_t::GetStressPositionA() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: shard_model_desc_t->StressPositionA(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector2D>(m_ptr, "shard_model_desc_t", "m_vecStressPositionA");
}
void Gshard_model_desc_t::SetStressPositionA(Vector2D value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: shard_model_desc_t->StressPositionA(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "shard_model_desc_t", "m_vecStressPositionA", true, value);
}
Vector2D Gshard_model_desc_t::GetStressPositionB() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: shard_model_desc_t->StressPositionB(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector2D>(m_ptr, "shard_model_desc_t", "m_vecStressPositionB");
}
void Gshard_model_desc_t::SetStressPositionB(Vector2D value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: shard_model_desc_t->StressPositionB(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "shard_model_desc_t", "m_vecStressPositionB", true, value);
}
std::vector<Vector2D> Gshard_model_desc_t::GetPanelVertices() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: shard_model_desc_t->PanelVertices(ptr=%p)", m_ptr));
    CUtlVector<Vector2D>* vec = GetSchemaValue<CUtlVector<Vector2D>*>(m_ptr, "shard_model_desc_t", "m_vecPanelVertices"); std::vector<Vector2D> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void Gshard_model_desc_t::SetPanelVertices(std::vector<Vector2D> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: shard_model_desc_t->PanelVertices(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<Vector2D>(m_ptr, "shard_model_desc_t", "m_vecPanelVertices", true, value);
}
float Gshard_model_desc_t::GetGlassHalfThickness() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: shard_model_desc_t->GlassHalfThickness(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "shard_model_desc_t", "m_flGlassHalfThickness");
}
void Gshard_model_desc_t::SetGlassHalfThickness(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: shard_model_desc_t->GlassHalfThickness(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "shard_model_desc_t", "m_flGlassHalfThickness", true, value);
}
bool Gshard_model_desc_t::GetHasParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: shard_model_desc_t->HasParent(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "shard_model_desc_t", "m_bHasParent");
}
void Gshard_model_desc_t::SetHasParent(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: shard_model_desc_t->HasParent(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "shard_model_desc_t", "m_bHasParent", true, value);
}
bool Gshard_model_desc_t::GetParentFrozen() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: shard_model_desc_t->ParentFrozen(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "shard_model_desc_t", "m_bParentFrozen");
}
void Gshard_model_desc_t::SetParentFrozen(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: shard_model_desc_t->ParentFrozen(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "shard_model_desc_t", "m_bParentFrozen", true, value);
}
uint32_t Gshard_model_desc_t::GetSurfacePropStringToken() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: shard_model_desc_t->SurfacePropStringToken(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlStringToken>(m_ptr, "shard_model_desc_t", "m_SurfacePropStringToken").m_nHashCode;
}
void Gshard_model_desc_t::SetSurfacePropStringToken(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: shard_model_desc_t->SurfacePropStringToken(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "shard_model_desc_t", "m_SurfacePropStringToken", true, CUtlStringToken(value));
}
void* Gshard_model_desc_t::GetPtr() {
    return m_ptr;
}
std::string Gshard_model_desc_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool Gshard_model_desc_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassshard_model_desc_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<Gshard_model_desc_t>("shard_model_desc_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("ModelID", &Gshard_model_desc_t::GetModelID, &Gshard_model_desc_t::SetModelID)
        .addProperty("Solid", &Gshard_model_desc_t::GetSolid, &Gshard_model_desc_t::SetSolid)
        .addProperty("ShatterPanelMode", &Gshard_model_desc_t::GetShatterPanelMode, &Gshard_model_desc_t::SetShatterPanelMode)
        .addProperty("PanelSize", &Gshard_model_desc_t::GetPanelSize, &Gshard_model_desc_t::SetPanelSize)
        .addProperty("StressPositionA", &Gshard_model_desc_t::GetStressPositionA, &Gshard_model_desc_t::SetStressPositionA)
        .addProperty("StressPositionB", &Gshard_model_desc_t::GetStressPositionB, &Gshard_model_desc_t::SetStressPositionB)
        .addProperty("PanelVertices", &Gshard_model_desc_t::GetPanelVertices, &Gshard_model_desc_t::SetPanelVertices)
        .addProperty("GlassHalfThickness", &Gshard_model_desc_t::GetGlassHalfThickness, &Gshard_model_desc_t::SetGlassHalfThickness)
        .addProperty("HasParent", &Gshard_model_desc_t::GetHasParent, &Gshard_model_desc_t::SetHasParent)
        .addProperty("ParentFrozen", &Gshard_model_desc_t::GetParentFrozen, &Gshard_model_desc_t::SetParentFrozen)
        .addProperty("SurfacePropStringToken", &Gshard_model_desc_t::GetSurfacePropStringToken, &Gshard_model_desc_t::SetSurfacePropStringToken)
        .addFunction("ToPtr", &Gshard_model_desc_t::ToPtr)
        .addFunction("IsValid", &Gshard_model_desc_t::IsValid)
        .endClass();
}
GCPhysicsPropRespawnable::GCPhysicsPropRespawnable(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPhysicsPropRespawnable::GCPhysicsPropRespawnable(void *ptr) {
    m_ptr = ptr;
}
Vector GCPhysicsPropRespawnable::GetOriginalSpawnOrigin() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysicsPropRespawnable->OriginalSpawnOrigin(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CPhysicsPropRespawnable", "m_vOriginalSpawnOrigin");
}
void GCPhysicsPropRespawnable::SetOriginalSpawnOrigin(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysicsPropRespawnable->OriginalSpawnOrigin(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysicsPropRespawnable", "m_vOriginalSpawnOrigin", false, value);
}
QAngle GCPhysicsPropRespawnable::GetOriginalSpawnAngles() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysicsPropRespawnable->OriginalSpawnAngles(ptr=%p)", m_ptr));
    return GetSchemaValue<QAngle>(m_ptr, "CPhysicsPropRespawnable", "m_vOriginalSpawnAngles");
}
void GCPhysicsPropRespawnable::SetOriginalSpawnAngles(QAngle value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysicsPropRespawnable->OriginalSpawnAngles(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysicsPropRespawnable", "m_vOriginalSpawnAngles", false, value);
}
Vector GCPhysicsPropRespawnable::GetOriginalMins() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysicsPropRespawnable->OriginalMins(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CPhysicsPropRespawnable", "m_vOriginalMins");
}
void GCPhysicsPropRespawnable::SetOriginalMins(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysicsPropRespawnable->OriginalMins(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysicsPropRespawnable", "m_vOriginalMins", false, value);
}
Vector GCPhysicsPropRespawnable::GetOriginalMaxs() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysicsPropRespawnable->OriginalMaxs(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CPhysicsPropRespawnable", "m_vOriginalMaxs");
}
void GCPhysicsPropRespawnable::SetOriginalMaxs(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysicsPropRespawnable->OriginalMaxs(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysicsPropRespawnable", "m_vOriginalMaxs", false, value);
}
float GCPhysicsPropRespawnable::GetRespawnDuration() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysicsPropRespawnable->RespawnDuration(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPhysicsPropRespawnable", "m_flRespawnDuration");
}
void GCPhysicsPropRespawnable::SetRespawnDuration(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysicsPropRespawnable->RespawnDuration(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysicsPropRespawnable", "m_flRespawnDuration", false, value);
}
void* GCPhysicsPropRespawnable::GetPtr() {
    return m_ptr;
}
std::string GCPhysicsPropRespawnable::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPhysicsPropRespawnable::IsValid() {
    return (m_ptr != nullptr);
}
GCPhysicsProp GCPhysicsPropRespawnable::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPhysicsPropRespawnable::GetParent(ptr=%p)", m_ptr));
    GCPhysicsProp value(m_ptr);
    return value;
}
void GCPhysicsPropRespawnable::SetParent(GCPhysicsProp value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPhysicsPropRespawnable::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCPhysicsPropRespawnable(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPhysicsPropRespawnable>("CPhysicsPropRespawnable")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("OriginalSpawnOrigin", &GCPhysicsPropRespawnable::GetOriginalSpawnOrigin, &GCPhysicsPropRespawnable::SetOriginalSpawnOrigin)
        .addProperty("OriginalSpawnAngles", &GCPhysicsPropRespawnable::GetOriginalSpawnAngles, &GCPhysicsPropRespawnable::SetOriginalSpawnAngles)
        .addProperty("OriginalMins", &GCPhysicsPropRespawnable::GetOriginalMins, &GCPhysicsPropRespawnable::SetOriginalMins)
        .addProperty("OriginalMaxs", &GCPhysicsPropRespawnable::GetOriginalMaxs, &GCPhysicsPropRespawnable::SetOriginalMaxs)
        .addProperty("RespawnDuration", &GCPhysicsPropRespawnable::GetRespawnDuration, &GCPhysicsPropRespawnable::SetRespawnDuration)
        .addProperty("Parent", &GCPhysicsPropRespawnable::GetParent, &GCPhysicsPropRespawnable::SetParent)
        .addFunction("ToPtr", &GCPhysicsPropRespawnable::ToPtr)
        .addFunction("IsValid", &GCPhysicsPropRespawnable::IsValid)
        .endClass();
}
GCEnvSky::GCEnvSky(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCEnvSky::GCEnvSky(void *ptr) {
    m_ptr = ptr;
}
bool GCEnvSky::GetStartDisabled() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvSky->StartDisabled(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CEnvSky", "m_bStartDisabled");
}
void GCEnvSky::SetStartDisabled(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvSky->StartDisabled(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvSky", "m_bStartDisabled", false, value);
}
Color GCEnvSky::GetTintColor() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvSky->TintColor(ptr=%p)", m_ptr));
    return GetSchemaValue<Color>(m_ptr, "CEnvSky", "m_vTintColor");
}
void GCEnvSky::SetTintColor(Color value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvSky->TintColor(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvSky", "m_vTintColor", false, value);
}
Color GCEnvSky::GetTintColorLightingOnly() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvSky->TintColorLightingOnly(ptr=%p)", m_ptr));
    return GetSchemaValue<Color>(m_ptr, "CEnvSky", "m_vTintColorLightingOnly");
}
void GCEnvSky::SetTintColorLightingOnly(Color value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvSky->TintColorLightingOnly(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvSky", "m_vTintColorLightingOnly", false, value);
}
float GCEnvSky::GetBrightnessScale() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvSky->BrightnessScale(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CEnvSky", "m_flBrightnessScale");
}
void GCEnvSky::SetBrightnessScale(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvSky->BrightnessScale(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvSky", "m_flBrightnessScale", false, value);
}
int32_t GCEnvSky::GetFogType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvSky->FogType(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CEnvSky", "m_nFogType");
}
void GCEnvSky::SetFogType(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvSky->FogType(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvSky", "m_nFogType", false, value);
}
float GCEnvSky::GetFogMinStart() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvSky->FogMinStart(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CEnvSky", "m_flFogMinStart");
}
void GCEnvSky::SetFogMinStart(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvSky->FogMinStart(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvSky", "m_flFogMinStart", false, value);
}
float GCEnvSky::GetFogMinEnd() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvSky->FogMinEnd(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CEnvSky", "m_flFogMinEnd");
}
void GCEnvSky::SetFogMinEnd(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvSky->FogMinEnd(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvSky", "m_flFogMinEnd", false, value);
}
float GCEnvSky::GetFogMaxStart() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvSky->FogMaxStart(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CEnvSky", "m_flFogMaxStart");
}
void GCEnvSky::SetFogMaxStart(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvSky->FogMaxStart(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvSky", "m_flFogMaxStart", false, value);
}
float GCEnvSky::GetFogMaxEnd() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvSky->FogMaxEnd(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CEnvSky", "m_flFogMaxEnd");
}
void GCEnvSky::SetFogMaxEnd(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvSky->FogMaxEnd(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvSky", "m_flFogMaxEnd", false, value);
}
bool GCEnvSky::GetEnabled() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvSky->Enabled(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CEnvSky", "m_bEnabled");
}
void GCEnvSky::SetEnabled(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvSky->Enabled(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvSky", "m_bEnabled", false, value);
}
void* GCEnvSky::GetPtr() {
    return m_ptr;
}
std::string GCEnvSky::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCEnvSky::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseModelEntity GCEnvSky::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CEnvSky::GetParent(ptr=%p)", m_ptr));
    GCBaseModelEntity value(m_ptr);
    return value;
}
void GCEnvSky::SetParent(GCBaseModelEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CEnvSky::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCEnvSky(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCEnvSky>("CEnvSky")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("StartDisabled", &GCEnvSky::GetStartDisabled, &GCEnvSky::SetStartDisabled)
        .addProperty("TintColor", &GCEnvSky::GetTintColor, &GCEnvSky::SetTintColor)
        .addProperty("TintColorLightingOnly", &GCEnvSky::GetTintColorLightingOnly, &GCEnvSky::SetTintColorLightingOnly)
        .addProperty("BrightnessScale", &GCEnvSky::GetBrightnessScale, &GCEnvSky::SetBrightnessScale)
        .addProperty("FogType", &GCEnvSky::GetFogType, &GCEnvSky::SetFogType)
        .addProperty("FogMinStart", &GCEnvSky::GetFogMinStart, &GCEnvSky::SetFogMinStart)
        .addProperty("FogMinEnd", &GCEnvSky::GetFogMinEnd, &GCEnvSky::SetFogMinEnd)
        .addProperty("FogMaxStart", &GCEnvSky::GetFogMaxStart, &GCEnvSky::SetFogMaxStart)
        .addProperty("FogMaxEnd", &GCEnvSky::GetFogMaxEnd, &GCEnvSky::SetFogMaxEnd)
        .addProperty("Enabled", &GCEnvSky::GetEnabled, &GCEnvSky::SetEnabled)
        .addProperty("Parent", &GCEnvSky::GetParent, &GCEnvSky::SetParent)
        .addFunction("ToPtr", &GCEnvSky::ToPtr)
        .addFunction("IsValid", &GCEnvSky::IsValid)
        .endClass();
}
GCPointVelocitySensor::GCPointVelocitySensor(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPointVelocitySensor::GCPointVelocitySensor(void *ptr) {
    m_ptr = ptr;
}
GCBaseEntity GCPointVelocitySensor::GetTargetEntity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointVelocitySensor->TargetEntity(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CPointVelocitySensor", "m_hTargetEntity").Get()));
    return value;
}
void GCPointVelocitySensor::SetTargetEntity(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointVelocitySensor->TargetEntity(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'TargetEntity' is not possible.\n");
}
Vector GCPointVelocitySensor::GetAxis() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointVelocitySensor->Axis(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CPointVelocitySensor", "m_vecAxis");
}
void GCPointVelocitySensor::SetAxis(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointVelocitySensor->Axis(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointVelocitySensor", "m_vecAxis", false, value);
}
bool GCPointVelocitySensor::GetEnabled() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointVelocitySensor->Enabled(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPointVelocitySensor", "m_bEnabled");
}
void GCPointVelocitySensor::SetEnabled(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointVelocitySensor->Enabled(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointVelocitySensor", "m_bEnabled", false, value);
}
float GCPointVelocitySensor::GetPrevVelocity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointVelocitySensor->PrevVelocity(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPointVelocitySensor", "m_fPrevVelocity");
}
void GCPointVelocitySensor::SetPrevVelocity(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointVelocitySensor->PrevVelocity(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointVelocitySensor", "m_fPrevVelocity", false, value);
}
float GCPointVelocitySensor::GetAvgInterval() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointVelocitySensor->AvgInterval(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPointVelocitySensor", "m_flAvgInterval");
}
void GCPointVelocitySensor::SetAvgInterval(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointVelocitySensor->AvgInterval(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointVelocitySensor", "m_flAvgInterval", false, value);
}
void* GCPointVelocitySensor::GetPtr() {
    return m_ptr;
}
std::string GCPointVelocitySensor::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPointVelocitySensor::IsValid() {
    return (m_ptr != nullptr);
}
GCPointEntity GCPointVelocitySensor::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPointVelocitySensor::GetParent(ptr=%p)", m_ptr));
    GCPointEntity value(m_ptr);
    return value;
}
void GCPointVelocitySensor::SetParent(GCPointEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPointVelocitySensor::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCPointVelocitySensor(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPointVelocitySensor>("CPointVelocitySensor")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("TargetEntity", &GCPointVelocitySensor::GetTargetEntity, &GCPointVelocitySensor::SetTargetEntity)
        .addProperty("Axis", &GCPointVelocitySensor::GetAxis, &GCPointVelocitySensor::SetAxis)
        .addProperty("Enabled", &GCPointVelocitySensor::GetEnabled, &GCPointVelocitySensor::SetEnabled)
        .addProperty("PrevVelocity", &GCPointVelocitySensor::GetPrevVelocity, &GCPointVelocitySensor::SetPrevVelocity)
        .addProperty("AvgInterval", &GCPointVelocitySensor::GetAvgInterval, &GCPointVelocitySensor::SetAvgInterval)
        .addProperty("Parent", &GCPointVelocitySensor::GetParent, &GCPointVelocitySensor::SetParent)
        .addFunction("ToPtr", &GCPointVelocitySensor::ToPtr)
        .addFunction("IsValid", &GCPointVelocitySensor::IsValid)
        .endClass();
}
GCFilterMassGreater::GCFilterMassGreater(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCFilterMassGreater::GCFilterMassGreater(void *ptr) {
    m_ptr = ptr;
}
float GCFilterMassGreater::GetFilterMass() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFilterMassGreater->FilterMass(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CFilterMassGreater", "m_fFilterMass");
}
void GCFilterMassGreater::SetFilterMass(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFilterMassGreater->FilterMass(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFilterMassGreater", "m_fFilterMass", false, value);
}
void* GCFilterMassGreater::GetPtr() {
    return m_ptr;
}
std::string GCFilterMassGreater::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCFilterMassGreater::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseFilter GCFilterMassGreater::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFilterMassGreater::GetParent(ptr=%p)", m_ptr));
    GCBaseFilter value(m_ptr);
    return value;
}
void GCFilterMassGreater::SetParent(GCBaseFilter value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFilterMassGreater::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCFilterMassGreater(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCFilterMassGreater>("CFilterMassGreater")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("FilterMass", &GCFilterMassGreater::GetFilterMass, &GCFilterMassGreater::SetFilterMass)
        .addProperty("Parent", &GCFilterMassGreater::GetParent, &GCFilterMassGreater::SetParent)
        .addFunction("ToPtr", &GCFilterMassGreater::ToPtr)
        .addFunction("IsValid", &GCFilterMassGreater::IsValid)
        .endClass();
}
GFilterTeam::GFilterTeam(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GFilterTeam::GFilterTeam(void *ptr) {
    m_ptr = ptr;
}
int32_t GFilterTeam::GetFilterTeam() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: FilterTeam->FilterTeam(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "FilterTeam", "m_iFilterTeam");
}
void GFilterTeam::SetFilterTeam(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: FilterTeam->FilterTeam(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "FilterTeam", "m_iFilterTeam", false, value);
}
void* GFilterTeam::GetPtr() {
    return m_ptr;
}
std::string GFilterTeam::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GFilterTeam::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseFilter GFilterTeam::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("FilterTeam::GetParent(ptr=%p)", m_ptr));
    GCBaseFilter value(m_ptr);
    return value;
}
void GFilterTeam::SetParent(GCBaseFilter value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("FilterTeam::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassFilterTeam(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GFilterTeam>("FilterTeam")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("FilterTeam", &GFilterTeam::GetFilterTeam, &GFilterTeam::SetFilterTeam)
        .addProperty("Parent", &GFilterTeam::GetParent, &GFilterTeam::SetParent)
        .addFunction("ToPtr", &GFilterTeam::ToPtr)
        .addFunction("IsValid", &GFilterTeam::IsValid)
        .endClass();
}
GCFuncTankTrain::GCFuncTankTrain(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCFuncTankTrain::GCFuncTankTrain(void *ptr) {
    m_ptr = ptr;
}
GCEntityIOOutput GCFuncTankTrain::GetOnDeath() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncTankTrain->OnDeath(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CFuncTankTrain", "m_OnDeath"));
    return value;
}
void GCFuncTankTrain::SetOnDeath(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncTankTrain->OnDeath(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnDeath' is not possible.\n");
}
void* GCFuncTankTrain::GetPtr() {
    return m_ptr;
}
std::string GCFuncTankTrain::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCFuncTankTrain::IsValid() {
    return (m_ptr != nullptr);
}
GCFuncTrackTrain GCFuncTankTrain::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFuncTankTrain::GetParent(ptr=%p)", m_ptr));
    GCFuncTrackTrain value(m_ptr);
    return value;
}
void GCFuncTankTrain::SetParent(GCFuncTrackTrain value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFuncTankTrain::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCFuncTankTrain(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCFuncTankTrain>("CFuncTankTrain")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("OnDeath", &GCFuncTankTrain::GetOnDeath, &GCFuncTankTrain::SetOnDeath)
        .addProperty("Parent", &GCFuncTankTrain::GetParent, &GCFuncTankTrain::SetParent)
        .addFunction("ToPtr", &GCFuncTankTrain::ToPtr)
        .addFunction("IsValid", &GCFuncTankTrain::IsValid)
        .endClass();
}
GCNullEntity::GCNullEntity(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCNullEntity::GCNullEntity(void *ptr) {
    m_ptr = ptr;
}
void* GCNullEntity::GetPtr() {
    return m_ptr;
}
std::string GCNullEntity::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCNullEntity::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseEntity GCNullEntity::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CNullEntity::GetParent(ptr=%p)", m_ptr));
    GCBaseEntity value(m_ptr);
    return value;
}
void GCNullEntity::SetParent(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CNullEntity::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCNullEntity(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCNullEntity>("CNullEntity")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCNullEntity::GetParent, &GCNullEntity::SetParent)
        .addFunction("ToPtr", &GCNullEntity::ToPtr)
        .addFunction("IsValid", &GCNullEntity::IsValid)
        .endClass();
}
GCCSPointScriptExtensions_observer::GCCSPointScriptExtensions_observer(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCCSPointScriptExtensions_observer::GCCSPointScriptExtensions_observer(void *ptr) {
    m_ptr = ptr;
}
void* GCCSPointScriptExtensions_observer::GetPtr() {
    return m_ptr;
}
std::string GCCSPointScriptExtensions_observer::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCCSPointScriptExtensions_observer::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCCSPointScriptExtensions_observer(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCCSPointScriptExtensions_observer>("CCSPointScriptExtensions_observer")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addFunction("ToPtr", &GCCSPointScriptExtensions_observer::ToPtr)
        .addFunction("IsValid", &GCCSPointScriptExtensions_observer::IsValid)
        .endClass();
}
GCMarkupVolumeTagged::GCMarkupVolumeTagged(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCMarkupVolumeTagged::GCMarkupVolumeTagged(void *ptr) {
    m_ptr = ptr;
}
bool GCMarkupVolumeTagged::GetIsGroup() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMarkupVolumeTagged->IsGroup(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CMarkupVolumeTagged", "m_bIsGroup");
}
void GCMarkupVolumeTagged::SetIsGroup(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMarkupVolumeTagged->IsGroup(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMarkupVolumeTagged", "m_bIsGroup", false, value);
}
bool GCMarkupVolumeTagged::GetGroupByPrefab() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMarkupVolumeTagged->GroupByPrefab(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CMarkupVolumeTagged", "m_bGroupByPrefab");
}
void GCMarkupVolumeTagged::SetGroupByPrefab(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMarkupVolumeTagged->GroupByPrefab(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMarkupVolumeTagged", "m_bGroupByPrefab", false, value);
}
bool GCMarkupVolumeTagged::GetGroupByVolume() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMarkupVolumeTagged->GroupByVolume(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CMarkupVolumeTagged", "m_bGroupByVolume");
}
void GCMarkupVolumeTagged::SetGroupByVolume(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMarkupVolumeTagged->GroupByVolume(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMarkupVolumeTagged", "m_bGroupByVolume", false, value);
}
bool GCMarkupVolumeTagged::GetGroupOtherGroups() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMarkupVolumeTagged->GroupOtherGroups(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CMarkupVolumeTagged", "m_bGroupOtherGroups");
}
void GCMarkupVolumeTagged::SetGroupOtherGroups(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMarkupVolumeTagged->GroupOtherGroups(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMarkupVolumeTagged", "m_bGroupOtherGroups", false, value);
}
bool GCMarkupVolumeTagged::GetIsInGroup() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMarkupVolumeTagged->IsInGroup(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CMarkupVolumeTagged", "m_bIsInGroup");
}
void GCMarkupVolumeTagged::SetIsInGroup(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMarkupVolumeTagged->IsInGroup(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMarkupVolumeTagged", "m_bIsInGroup", false, value);
}
void* GCMarkupVolumeTagged::GetPtr() {
    return m_ptr;
}
std::string GCMarkupVolumeTagged::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCMarkupVolumeTagged::IsValid() {
    return (m_ptr != nullptr);
}
GCMarkupVolume GCMarkupVolumeTagged::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CMarkupVolumeTagged::GetParent(ptr=%p)", m_ptr));
    GCMarkupVolume value(m_ptr);
    return value;
}
void GCMarkupVolumeTagged::SetParent(GCMarkupVolume value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CMarkupVolumeTagged::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCMarkupVolumeTagged(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCMarkupVolumeTagged>("CMarkupVolumeTagged")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("IsGroup", &GCMarkupVolumeTagged::GetIsGroup, &GCMarkupVolumeTagged::SetIsGroup)
        .addProperty("GroupByPrefab", &GCMarkupVolumeTagged::GetGroupByPrefab, &GCMarkupVolumeTagged::SetGroupByPrefab)
        .addProperty("GroupByVolume", &GCMarkupVolumeTagged::GetGroupByVolume, &GCMarkupVolumeTagged::SetGroupByVolume)
        .addProperty("GroupOtherGroups", &GCMarkupVolumeTagged::GetGroupOtherGroups, &GCMarkupVolumeTagged::SetGroupOtherGroups)
        .addProperty("IsInGroup", &GCMarkupVolumeTagged::GetIsInGroup, &GCMarkupVolumeTagged::SetIsInGroup)
        .addProperty("Parent", &GCMarkupVolumeTagged::GetParent, &GCMarkupVolumeTagged::SetParent)
        .addFunction("ToPtr", &GCMarkupVolumeTagged::ToPtr)
        .addFunction("IsValid", &GCMarkupVolumeTagged::IsValid)
        .endClass();
}
GCBuyZone::GCBuyZone(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCBuyZone::GCBuyZone(void *ptr) {
    m_ptr = ptr;
}
int32_t GCBuyZone::GetLegacyTeamNum() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBuyZone->LegacyTeamNum(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CBuyZone", "m_LegacyTeamNum");
}
void GCBuyZone::SetLegacyTeamNum(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBuyZone->LegacyTeamNum(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBuyZone", "m_LegacyTeamNum", false, value);
}
void* GCBuyZone::GetPtr() {
    return m_ptr;
}
std::string GCBuyZone::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCBuyZone::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseTrigger GCBuyZone::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CBuyZone::GetParent(ptr=%p)", m_ptr));
    GCBaseTrigger value(m_ptr);
    return value;
}
void GCBuyZone::SetParent(GCBaseTrigger value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CBuyZone::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCBuyZone(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCBuyZone>("CBuyZone")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("LegacyTeamNum", &GCBuyZone::GetLegacyTeamNum, &GCBuyZone::SetLegacyTeamNum)
        .addProperty("Parent", &GCBuyZone::GetParent, &GCBuyZone::SetParent)
        .addFunction("ToPtr", &GCBuyZone::ToPtr)
        .addFunction("IsValid", &GCBuyZone::IsValid)
        .endClass();
}
GCPointTemplate::GCPointTemplate(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPointTemplate::GCPointTemplate(void *ptr) {
    m_ptr = ptr;
}
std::string GCPointTemplate::GetWorldName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointTemplate->WorldName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPointTemplate", "m_iszWorldName").String();
}
void GCPointTemplate::SetWorldName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointTemplate->WorldName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointTemplate", "m_iszWorldName", false, CUtlSymbolLarge(value.c_str()));
}
std::string GCPointTemplate::GetSource2EntityLumpName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointTemplate->Source2EntityLumpName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPointTemplate", "m_iszSource2EntityLumpName").String();
}
void GCPointTemplate::SetSource2EntityLumpName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointTemplate->Source2EntityLumpName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointTemplate", "m_iszSource2EntityLumpName", false, CUtlSymbolLarge(value.c_str()));
}
std::string GCPointTemplate::GetEntityFilterName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointTemplate->EntityFilterName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPointTemplate", "m_iszEntityFilterName").String();
}
void GCPointTemplate::SetEntityFilterName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointTemplate->EntityFilterName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointTemplate", "m_iszEntityFilterName", false, CUtlSymbolLarge(value.c_str()));
}
float GCPointTemplate::GetTimeoutInterval() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointTemplate->TimeoutInterval(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPointTemplate", "m_flTimeoutInterval");
}
void GCPointTemplate::SetTimeoutInterval(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointTemplate->TimeoutInterval(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointTemplate", "m_flTimeoutInterval", false, value);
}
bool GCPointTemplate::GetAsynchronouslySpawnEntities() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointTemplate->AsynchronouslySpawnEntities(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPointTemplate", "m_bAsynchronouslySpawnEntities");
}
void GCPointTemplate::SetAsynchronouslySpawnEntities(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointTemplate->AsynchronouslySpawnEntities(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointTemplate", "m_bAsynchronouslySpawnEntities", false, value);
}
GCEntityIOOutput GCPointTemplate::GetOutputOnSpawned() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointTemplate->OutputOnSpawned(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CPointTemplate", "m_pOutputOnSpawned"));
    return value;
}
void GCPointTemplate::SetOutputOnSpawned(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointTemplate->OutputOnSpawned(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OutputOnSpawned' is not possible.\n");
}
uint64_t GCPointTemplate::GetClientOnlyEntityBehavior() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointTemplate->ClientOnlyEntityBehavior(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CPointTemplate", "m_clientOnlyEntityBehavior");
}
void GCPointTemplate::SetClientOnlyEntityBehavior(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointTemplate->ClientOnlyEntityBehavior(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointTemplate", "m_clientOnlyEntityBehavior", false, value);
}
uint64_t GCPointTemplate::GetOwnerSpawnGroupType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointTemplate->OwnerSpawnGroupType(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CPointTemplate", "m_ownerSpawnGroupType");
}
void GCPointTemplate::SetOwnerSpawnGroupType(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointTemplate->OwnerSpawnGroupType(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointTemplate", "m_ownerSpawnGroupType", false, value);
}
std::vector<uint32> GCPointTemplate::GetCreatedSpawnGroupHandles() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointTemplate->CreatedSpawnGroupHandles(ptr=%p)", m_ptr));
    CUtlVector<uint32>* vec = GetSchemaValue<CUtlVector<uint32>*>(m_ptr, "CPointTemplate", "m_createdSpawnGroupHandles"); std::vector<uint32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCPointTemplate::SetCreatedSpawnGroupHandles(std::vector<uint32> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointTemplate->CreatedSpawnGroupHandles(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<uint32>(m_ptr, "CPointTemplate", "m_createdSpawnGroupHandles", false, value);
}
std::vector<GCEntityInstance> GCPointTemplate::GetSpawnedEntityHandles() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointTemplate->SpawnedEntityHandles(ptr=%p)", m_ptr));
    CUtlVector<CHandle<CEntityInstance>>* vec = GetSchemaValue<CUtlVector<CHandle<CEntityInstance>>*>(m_ptr, "CPointTemplate", "m_SpawnedEntityHandles"); 
    std::vector<GCEntityInstance> outVec; 
    for(int i = 0; i < vec->Count(); i++) { 
        outVec.push_back(GCEntityInstance((void*)(vec->Element(i).Get()))); 
    } 
    return outVec;
}
void GCPointTemplate::SetSpawnedEntityHandles(std::vector<GCEntityInstance> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointTemplate->SpawnedEntityHandles(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'SpawnedEntityHandles' is not possible.\n");
}
void* GCPointTemplate::GetPtr() {
    return m_ptr;
}
std::string GCPointTemplate::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPointTemplate::IsValid() {
    return (m_ptr != nullptr);
}
GCLogicalEntity GCPointTemplate::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPointTemplate::GetParent(ptr=%p)", m_ptr));
    GCLogicalEntity value(m_ptr);
    return value;
}
void GCPointTemplate::SetParent(GCLogicalEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPointTemplate::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCPointTemplate(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPointTemplate>("CPointTemplate")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("WorldName", &GCPointTemplate::GetWorldName, &GCPointTemplate::SetWorldName)
        .addProperty("Source2EntityLumpName", &GCPointTemplate::GetSource2EntityLumpName, &GCPointTemplate::SetSource2EntityLumpName)
        .addProperty("EntityFilterName", &GCPointTemplate::GetEntityFilterName, &GCPointTemplate::SetEntityFilterName)
        .addProperty("TimeoutInterval", &GCPointTemplate::GetTimeoutInterval, &GCPointTemplate::SetTimeoutInterval)
        .addProperty("AsynchronouslySpawnEntities", &GCPointTemplate::GetAsynchronouslySpawnEntities, &GCPointTemplate::SetAsynchronouslySpawnEntities)
        .addProperty("OutputOnSpawned", &GCPointTemplate::GetOutputOnSpawned, &GCPointTemplate::SetOutputOnSpawned)
        .addProperty("ClientOnlyEntityBehavior", &GCPointTemplate::GetClientOnlyEntityBehavior, &GCPointTemplate::SetClientOnlyEntityBehavior)
        .addProperty("OwnerSpawnGroupType", &GCPointTemplate::GetOwnerSpawnGroupType, &GCPointTemplate::SetOwnerSpawnGroupType)
        .addProperty("CreatedSpawnGroupHandles", &GCPointTemplate::GetCreatedSpawnGroupHandles, &GCPointTemplate::SetCreatedSpawnGroupHandles)
        .addProperty("SpawnedEntityHandles", &GCPointTemplate::GetSpawnedEntityHandles, &GCPointTemplate::SetSpawnedEntityHandles)
        .addProperty("Parent", &GCPointTemplate::GetParent, &GCPointTemplate::SetParent)
        .addFunction("ToPtr", &GCPointTemplate::ToPtr)
        .addFunction("IsValid", &GCPointTemplate::IsValid)
        .endClass();
}
GCTripWireFire::GCTripWireFire(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCTripWireFire::GCTripWireFire(void *ptr) {
    m_ptr = ptr;
}
void* GCTripWireFire::GetPtr() {
    return m_ptr;
}
std::string GCTripWireFire::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCTripWireFire::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseCSGrenade GCTripWireFire::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTripWireFire::GetParent(ptr=%p)", m_ptr));
    GCBaseCSGrenade value(m_ptr);
    return value;
}
void GCTripWireFire::SetParent(GCBaseCSGrenade value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTripWireFire::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCTripWireFire(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCTripWireFire>("CTripWireFire")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCTripWireFire::GetParent, &GCTripWireFire::SetParent)
        .addFunction("ToPtr", &GCTripWireFire::ToPtr)
        .addFunction("IsValid", &GCTripWireFire::IsValid)
        .endClass();
}
GCPhysForce::GCPhysForce(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPhysForce::GCPhysForce(void *ptr) {
    m_ptr = ptr;
}
std::string GCPhysForce::GetNameAttach() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysForce->NameAttach(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPhysForce", "m_nameAttach").String();
}
void GCPhysForce::SetNameAttach(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysForce->NameAttach(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysForce", "m_nameAttach", false, CUtlSymbolLarge(value.c_str()));
}
float GCPhysForce::GetForce() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysForce->Force(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPhysForce", "m_force");
}
void GCPhysForce::SetForce(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysForce->Force(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysForce", "m_force", false, value);
}
float GCPhysForce::GetForceTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysForce->ForceTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPhysForce", "m_forceTime");
}
void GCPhysForce::SetForceTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysForce->ForceTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysForce", "m_forceTime", false, value);
}
GCBaseEntity GCPhysForce::GetAttachedObject() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysForce->AttachedObject(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CPhysForce", "m_attachedObject").Get()));
    return value;
}
void GCPhysForce::SetAttachedObject(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysForce->AttachedObject(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'AttachedObject' is not possible.\n");
}
bool GCPhysForce::GetWasRestored() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysForce->WasRestored(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPhysForce", "m_wasRestored");
}
void GCPhysForce::SetWasRestored(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysForce->WasRestored(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysForce", "m_wasRestored", false, value);
}
GCConstantForceController GCPhysForce::GetIntegrator() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysForce->Integrator(ptr=%p)", m_ptr));
    GCConstantForceController value(GetSchemaPtr(m_ptr, "CPhysForce", "m_integrator"));
    return value;
}
void GCPhysForce::SetIntegrator(GCConstantForceController value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysForce->Integrator(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Integrator' is not possible.\n");
}
void* GCPhysForce::GetPtr() {
    return m_ptr;
}
std::string GCPhysForce::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPhysForce::IsValid() {
    return (m_ptr != nullptr);
}
GCPointEntity GCPhysForce::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPhysForce::GetParent(ptr=%p)", m_ptr));
    GCPointEntity value(m_ptr);
    return value;
}
void GCPhysForce::SetParent(GCPointEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPhysForce::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCPhysForce(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPhysForce>("CPhysForce")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("NameAttach", &GCPhysForce::GetNameAttach, &GCPhysForce::SetNameAttach)
        .addProperty("Force", &GCPhysForce::GetForce, &GCPhysForce::SetForce)
        .addProperty("ForceTime", &GCPhysForce::GetForceTime, &GCPhysForce::SetForceTime)
        .addProperty("AttachedObject", &GCPhysForce::GetAttachedObject, &GCPhysForce::SetAttachedObject)
        .addProperty("WasRestored", &GCPhysForce::GetWasRestored, &GCPhysForce::SetWasRestored)
        .addProperty("Integrator", &GCPhysForce::GetIntegrator, &GCPhysForce::SetIntegrator)
        .addProperty("Parent", &GCPhysForce::GetParent, &GCPhysForce::SetParent)
        .addFunction("ToPtr", &GCPhysForce::ToPtr)
        .addFunction("IsValid", &GCPhysForce::IsValid)
        .endClass();
}
GCLogicDistanceAutosave::GCLogicDistanceAutosave(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCLogicDistanceAutosave::GCLogicDistanceAutosave(void *ptr) {
    m_ptr = ptr;
}
std::string GCLogicDistanceAutosave::GetTargetEntity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CLogicDistanceAutosave->TargetEntity(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CLogicDistanceAutosave", "m_iszTargetEntity").String();
}
void GCLogicDistanceAutosave::SetTargetEntity(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CLogicDistanceAutosave->TargetEntity(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CLogicDistanceAutosave", "m_iszTargetEntity", false, CUtlSymbolLarge(value.c_str()));
}
float GCLogicDistanceAutosave::GetDistanceToPlayer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CLogicDistanceAutosave->DistanceToPlayer(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CLogicDistanceAutosave", "m_flDistanceToPlayer");
}
void GCLogicDistanceAutosave::SetDistanceToPlayer(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CLogicDistanceAutosave->DistanceToPlayer(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CLogicDistanceAutosave", "m_flDistanceToPlayer", false, value);
}
bool GCLogicDistanceAutosave::GetForceNewLevelUnit() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CLogicDistanceAutosave->ForceNewLevelUnit(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CLogicDistanceAutosave", "m_bForceNewLevelUnit");
}
void GCLogicDistanceAutosave::SetForceNewLevelUnit(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CLogicDistanceAutosave->ForceNewLevelUnit(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CLogicDistanceAutosave", "m_bForceNewLevelUnit", false, value);
}
bool GCLogicDistanceAutosave::GetCheckCough() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CLogicDistanceAutosave->CheckCough(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CLogicDistanceAutosave", "m_bCheckCough");
}
void GCLogicDistanceAutosave::SetCheckCough(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CLogicDistanceAutosave->CheckCough(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CLogicDistanceAutosave", "m_bCheckCough", false, value);
}
bool GCLogicDistanceAutosave::GetThinkDangerous() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CLogicDistanceAutosave->ThinkDangerous(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CLogicDistanceAutosave", "m_bThinkDangerous");
}
void GCLogicDistanceAutosave::SetThinkDangerous(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CLogicDistanceAutosave->ThinkDangerous(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CLogicDistanceAutosave", "m_bThinkDangerous", false, value);
}
float GCLogicDistanceAutosave::GetDangerousTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CLogicDistanceAutosave->DangerousTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CLogicDistanceAutosave", "m_flDangerousTime");
}
void GCLogicDistanceAutosave::SetDangerousTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CLogicDistanceAutosave->DangerousTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CLogicDistanceAutosave", "m_flDangerousTime", false, value);
}
void* GCLogicDistanceAutosave::GetPtr() {
    return m_ptr;
}
std::string GCLogicDistanceAutosave::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCLogicDistanceAutosave::IsValid() {
    return (m_ptr != nullptr);
}
GCLogicalEntity GCLogicDistanceAutosave::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CLogicDistanceAutosave::GetParent(ptr=%p)", m_ptr));
    GCLogicalEntity value(m_ptr);
    return value;
}
void GCLogicDistanceAutosave::SetParent(GCLogicalEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CLogicDistanceAutosave::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCLogicDistanceAutosave(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCLogicDistanceAutosave>("CLogicDistanceAutosave")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("TargetEntity", &GCLogicDistanceAutosave::GetTargetEntity, &GCLogicDistanceAutosave::SetTargetEntity)
        .addProperty("DistanceToPlayer", &GCLogicDistanceAutosave::GetDistanceToPlayer, &GCLogicDistanceAutosave::SetDistanceToPlayer)
        .addProperty("ForceNewLevelUnit", &GCLogicDistanceAutosave::GetForceNewLevelUnit, &GCLogicDistanceAutosave::SetForceNewLevelUnit)
        .addProperty("CheckCough", &GCLogicDistanceAutosave::GetCheckCough, &GCLogicDistanceAutosave::SetCheckCough)
        .addProperty("ThinkDangerous", &GCLogicDistanceAutosave::GetThinkDangerous, &GCLogicDistanceAutosave::SetThinkDangerous)
        .addProperty("DangerousTime", &GCLogicDistanceAutosave::GetDangerousTime, &GCLogicDistanceAutosave::SetDangerousTime)
        .addProperty("Parent", &GCLogicDistanceAutosave::GetParent, &GCLogicDistanceAutosave::SetParent)
        .addFunction("ToPtr", &GCLogicDistanceAutosave::ToPtr)
        .addFunction("IsValid", &GCLogicDistanceAutosave::IsValid)
        .endClass();
}
GCInfoDynamicShadowHint::GCInfoDynamicShadowHint(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCInfoDynamicShadowHint::GCInfoDynamicShadowHint(void *ptr) {
    m_ptr = ptr;
}
bool GCInfoDynamicShadowHint::GetDisabled() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInfoDynamicShadowHint->Disabled(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CInfoDynamicShadowHint", "m_bDisabled");
}
void GCInfoDynamicShadowHint::SetDisabled(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInfoDynamicShadowHint->Disabled(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInfoDynamicShadowHint", "m_bDisabled", false, value);
}
float GCInfoDynamicShadowHint::GetRange() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInfoDynamicShadowHint->Range(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CInfoDynamicShadowHint", "m_flRange");
}
void GCInfoDynamicShadowHint::SetRange(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInfoDynamicShadowHint->Range(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInfoDynamicShadowHint", "m_flRange", false, value);
}
int32_t GCInfoDynamicShadowHint::GetImportance() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInfoDynamicShadowHint->Importance(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CInfoDynamicShadowHint", "m_nImportance");
}
void GCInfoDynamicShadowHint::SetImportance(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInfoDynamicShadowHint->Importance(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInfoDynamicShadowHint", "m_nImportance", false, value);
}
int32_t GCInfoDynamicShadowHint::GetLightChoice() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInfoDynamicShadowHint->LightChoice(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CInfoDynamicShadowHint", "m_nLightChoice");
}
void GCInfoDynamicShadowHint::SetLightChoice(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInfoDynamicShadowHint->LightChoice(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInfoDynamicShadowHint", "m_nLightChoice", false, value);
}
GCBaseEntity GCInfoDynamicShadowHint::GetLight() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInfoDynamicShadowHint->Light(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CInfoDynamicShadowHint", "m_hLight").Get()));
    return value;
}
void GCInfoDynamicShadowHint::SetLight(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInfoDynamicShadowHint->Light(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Light' is not possible.\n");
}
void* GCInfoDynamicShadowHint::GetPtr() {
    return m_ptr;
}
std::string GCInfoDynamicShadowHint::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCInfoDynamicShadowHint::IsValid() {
    return (m_ptr != nullptr);
}
GCPointEntity GCInfoDynamicShadowHint::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CInfoDynamicShadowHint::GetParent(ptr=%p)", m_ptr));
    GCPointEntity value(m_ptr);
    return value;
}
void GCInfoDynamicShadowHint::SetParent(GCPointEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CInfoDynamicShadowHint::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCInfoDynamicShadowHint(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCInfoDynamicShadowHint>("CInfoDynamicShadowHint")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Disabled", &GCInfoDynamicShadowHint::GetDisabled, &GCInfoDynamicShadowHint::SetDisabled)
        .addProperty("Range", &GCInfoDynamicShadowHint::GetRange, &GCInfoDynamicShadowHint::SetRange)
        .addProperty("Importance", &GCInfoDynamicShadowHint::GetImportance, &GCInfoDynamicShadowHint::SetImportance)
        .addProperty("LightChoice", &GCInfoDynamicShadowHint::GetLightChoice, &GCInfoDynamicShadowHint::SetLightChoice)
        .addProperty("Light", &GCInfoDynamicShadowHint::GetLight, &GCInfoDynamicShadowHint::SetLight)
        .addProperty("Parent", &GCInfoDynamicShadowHint::GetParent, &GCInfoDynamicShadowHint::SetParent)
        .addFunction("ToPtr", &GCInfoDynamicShadowHint::ToPtr)
        .addFunction("IsValid", &GCInfoDynamicShadowHint::IsValid)
        .endClass();
}
GCSoundOpvarSetOBBEntity::GCSoundOpvarSetOBBEntity(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCSoundOpvarSetOBBEntity::GCSoundOpvarSetOBBEntity(void *ptr) {
    m_ptr = ptr;
}
void* GCSoundOpvarSetOBBEntity::GetPtr() {
    return m_ptr;
}
std::string GCSoundOpvarSetOBBEntity::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCSoundOpvarSetOBBEntity::IsValid() {
    return (m_ptr != nullptr);
}
GCSoundOpvarSetAABBEntity GCSoundOpvarSetOBBEntity::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSoundOpvarSetOBBEntity::GetParent(ptr=%p)", m_ptr));
    GCSoundOpvarSetAABBEntity value(m_ptr);
    return value;
}
void GCSoundOpvarSetOBBEntity::SetParent(GCSoundOpvarSetAABBEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSoundOpvarSetOBBEntity::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCSoundOpvarSetOBBEntity(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCSoundOpvarSetOBBEntity>("CSoundOpvarSetOBBEntity")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCSoundOpvarSetOBBEntity::GetParent, &GCSoundOpvarSetOBBEntity::SetParent)
        .addFunction("ToPtr", &GCSoundOpvarSetOBBEntity::ToPtr)
        .addFunction("IsValid", &GCSoundOpvarSetOBBEntity::IsValid)
        .endClass();
}
GCEnvWindShared__WindVariationEvent_t::GCEnvWindShared__WindVariationEvent_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCEnvWindShared__WindVariationEvent_t::GCEnvWindShared__WindVariationEvent_t(void *ptr) {
    m_ptr = ptr;
}
float GCEnvWindShared__WindVariationEvent_t::GetWindAngleVariation() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvWindShared__WindVariationEvent_t->WindAngleVariation(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CEnvWindShared__WindVariationEvent_t", "m_flWindAngleVariation");
}
void GCEnvWindShared__WindVariationEvent_t::SetWindAngleVariation(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvWindShared__WindVariationEvent_t->WindAngleVariation(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvWindShared__WindVariationEvent_t", "m_flWindAngleVariation", true, value);
}
float GCEnvWindShared__WindVariationEvent_t::GetWindSpeedVariation() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvWindShared__WindVariationEvent_t->WindSpeedVariation(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CEnvWindShared__WindVariationEvent_t", "m_flWindSpeedVariation");
}
void GCEnvWindShared__WindVariationEvent_t::SetWindSpeedVariation(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvWindShared__WindVariationEvent_t->WindSpeedVariation(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvWindShared__WindVariationEvent_t", "m_flWindSpeedVariation", true, value);
}
void* GCEnvWindShared__WindVariationEvent_t::GetPtr() {
    return m_ptr;
}
std::string GCEnvWindShared__WindVariationEvent_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCEnvWindShared__WindVariationEvent_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCEnvWindShared__WindVariationEvent_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCEnvWindShared__WindVariationEvent_t>("CEnvWindShared__WindVariationEvent_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("WindAngleVariation", &GCEnvWindShared__WindVariationEvent_t::GetWindAngleVariation, &GCEnvWindShared__WindVariationEvent_t::SetWindAngleVariation)
        .addProperty("WindSpeedVariation", &GCEnvWindShared__WindVariationEvent_t::GetWindSpeedVariation, &GCEnvWindShared__WindVariationEvent_t::SetWindSpeedVariation)
        .addFunction("ToPtr", &GCEnvWindShared__WindVariationEvent_t::ToPtr)
        .addFunction("IsValid", &GCEnvWindShared__WindVariationEvent_t::IsValid)
        .endClass();
}
GCTakeDamageInfoAPI::GCTakeDamageInfoAPI(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCTakeDamageInfoAPI::GCTakeDamageInfoAPI(void *ptr) {
    m_ptr = ptr;
}
void* GCTakeDamageInfoAPI::GetPtr() {
    return m_ptr;
}
std::string GCTakeDamageInfoAPI::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCTakeDamageInfoAPI::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCTakeDamageInfoAPI(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCTakeDamageInfoAPI>("CTakeDamageInfoAPI")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addFunction("ToPtr", &GCTakeDamageInfoAPI::ToPtr)
        .addFunction("IsValid", &GCTakeDamageInfoAPI::IsValid)
        .endClass();
}
GCScriptTriggerOnce::GCScriptTriggerOnce(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCScriptTriggerOnce::GCScriptTriggerOnce(void *ptr) {
    m_ptr = ptr;
}
Vector GCScriptTriggerOnce::GetExtent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CScriptTriggerOnce->Extent(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CScriptTriggerOnce", "m_vExtent");
}
void GCScriptTriggerOnce::SetExtent(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CScriptTriggerOnce->Extent(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CScriptTriggerOnce", "m_vExtent", false, value);
}
void* GCScriptTriggerOnce::GetPtr() {
    return m_ptr;
}
std::string GCScriptTriggerOnce::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCScriptTriggerOnce::IsValid() {
    return (m_ptr != nullptr);
}
GCTriggerOnce GCScriptTriggerOnce::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CScriptTriggerOnce::GetParent(ptr=%p)", m_ptr));
    GCTriggerOnce value(m_ptr);
    return value;
}
void GCScriptTriggerOnce::SetParent(GCTriggerOnce value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CScriptTriggerOnce::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCScriptTriggerOnce(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCScriptTriggerOnce>("CScriptTriggerOnce")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Extent", &GCScriptTriggerOnce::GetExtent, &GCScriptTriggerOnce::SetExtent)
        .addProperty("Parent", &GCScriptTriggerOnce::GetParent, &GCScriptTriggerOnce::SetParent)
        .addFunction("ToPtr", &GCScriptTriggerOnce::ToPtr)
        .addFunction("IsValid", &GCScriptTriggerOnce::IsValid)
        .endClass();
}
GCNavWalkable::GCNavWalkable(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCNavWalkable::GCNavWalkable(void *ptr) {
    m_ptr = ptr;
}
void* GCNavWalkable::GetPtr() {
    return m_ptr;
}
std::string GCNavWalkable::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCNavWalkable::IsValid() {
    return (m_ptr != nullptr);
}
GCPointEntity GCNavWalkable::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CNavWalkable::GetParent(ptr=%p)", m_ptr));
    GCPointEntity value(m_ptr);
    return value;
}
void GCNavWalkable::SetParent(GCPointEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CNavWalkable::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCNavWalkable(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCNavWalkable>("CNavWalkable")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCNavWalkable::GetParent, &GCNavWalkable::SetParent)
        .addFunction("ToPtr", &GCNavWalkable::ToPtr)
        .addFunction("IsValid", &GCNavWalkable::IsValid)
        .endClass();
}
GCFuncMonitor::GCFuncMonitor(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCFuncMonitor::GCFuncMonitor(void *ptr) {
    m_ptr = ptr;
}
std::string GCFuncMonitor::GetTargetCamera() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMonitor->TargetCamera(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlString>(m_ptr, "CFuncMonitor", "m_targetCamera").Get();
}
void GCFuncMonitor::SetTargetCamera(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMonitor->TargetCamera(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMonitor", "m_targetCamera", false, CUtlString(value.c_str()));
}
int32_t GCFuncMonitor::GetResolutionEnum() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMonitor->ResolutionEnum(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CFuncMonitor", "m_nResolutionEnum");
}
void GCFuncMonitor::SetResolutionEnum(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMonitor->ResolutionEnum(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMonitor", "m_nResolutionEnum", false, value);
}
bool GCFuncMonitor::GetRenderShadows() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMonitor->RenderShadows(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CFuncMonitor", "m_bRenderShadows");
}
void GCFuncMonitor::SetRenderShadows(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMonitor->RenderShadows(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMonitor", "m_bRenderShadows", false, value);
}
bool GCFuncMonitor::GetUseUniqueColorTarget() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMonitor->UseUniqueColorTarget(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CFuncMonitor", "m_bUseUniqueColorTarget");
}
void GCFuncMonitor::SetUseUniqueColorTarget(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMonitor->UseUniqueColorTarget(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMonitor", "m_bUseUniqueColorTarget", false, value);
}
std::string GCFuncMonitor::GetBrushModelName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMonitor->BrushModelName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlString>(m_ptr, "CFuncMonitor", "m_brushModelName").Get();
}
void GCFuncMonitor::SetBrushModelName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMonitor->BrushModelName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMonitor", "m_brushModelName", false, CUtlString(value.c_str()));
}
GCBaseEntity GCFuncMonitor::GetTargetCamera1() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMonitor->TargetCamera1(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CFuncMonitor", "m_hTargetCamera").Get()));
    return value;
}
void GCFuncMonitor::SetTargetCamera1(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMonitor->TargetCamera1(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'TargetCamera1' is not possible.\n");
}
bool GCFuncMonitor::GetEnabled() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMonitor->Enabled(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CFuncMonitor", "m_bEnabled");
}
void GCFuncMonitor::SetEnabled(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMonitor->Enabled(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMonitor", "m_bEnabled", false, value);
}
bool GCFuncMonitor::GetDraw3DSkybox() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMonitor->Draw3DSkybox(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CFuncMonitor", "m_bDraw3DSkybox");
}
void GCFuncMonitor::SetDraw3DSkybox(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMonitor->Draw3DSkybox(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMonitor", "m_bDraw3DSkybox", false, value);
}
bool GCFuncMonitor::GetStartEnabled() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncMonitor->StartEnabled(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CFuncMonitor", "m_bStartEnabled");
}
void GCFuncMonitor::SetStartEnabled(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncMonitor->StartEnabled(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncMonitor", "m_bStartEnabled", false, value);
}
void* GCFuncMonitor::GetPtr() {
    return m_ptr;
}
std::string GCFuncMonitor::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCFuncMonitor::IsValid() {
    return (m_ptr != nullptr);
}
GCFuncBrush GCFuncMonitor::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFuncMonitor::GetParent(ptr=%p)", m_ptr));
    GCFuncBrush value(m_ptr);
    return value;
}
void GCFuncMonitor::SetParent(GCFuncBrush value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFuncMonitor::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCFuncMonitor(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCFuncMonitor>("CFuncMonitor")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("TargetCamera", &GCFuncMonitor::GetTargetCamera, &GCFuncMonitor::SetTargetCamera)
        .addProperty("ResolutionEnum", &GCFuncMonitor::GetResolutionEnum, &GCFuncMonitor::SetResolutionEnum)
        .addProperty("RenderShadows", &GCFuncMonitor::GetRenderShadows, &GCFuncMonitor::SetRenderShadows)
        .addProperty("UseUniqueColorTarget", &GCFuncMonitor::GetUseUniqueColorTarget, &GCFuncMonitor::SetUseUniqueColorTarget)
        .addProperty("BrushModelName", &GCFuncMonitor::GetBrushModelName, &GCFuncMonitor::SetBrushModelName)
        .addProperty("TargetCamera1", &GCFuncMonitor::GetTargetCamera1, &GCFuncMonitor::SetTargetCamera1)
        .addProperty("Enabled", &GCFuncMonitor::GetEnabled, &GCFuncMonitor::SetEnabled)
        .addProperty("Draw3DSkybox", &GCFuncMonitor::GetDraw3DSkybox, &GCFuncMonitor::SetDraw3DSkybox)
        .addProperty("StartEnabled", &GCFuncMonitor::GetStartEnabled, &GCFuncMonitor::SetStartEnabled)
        .addProperty("Parent", &GCFuncMonitor::GetParent, &GCFuncMonitor::SetParent)
        .addFunction("ToPtr", &GCFuncMonitor::ToPtr)
        .addFunction("IsValid", &GCFuncMonitor::IsValid)
        .endClass();
}
GCFlashbangProjectile::GCFlashbangProjectile(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCFlashbangProjectile::GCFlashbangProjectile(void *ptr) {
    m_ptr = ptr;
}
float GCFlashbangProjectile::GetTimeToDetonate() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFlashbangProjectile->TimeToDetonate(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CFlashbangProjectile", "m_flTimeToDetonate");
}
void GCFlashbangProjectile::SetTimeToDetonate(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFlashbangProjectile->TimeToDetonate(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFlashbangProjectile", "m_flTimeToDetonate", false, value);
}
uint32_t GCFlashbangProjectile::GetNumOpponentsHit() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFlashbangProjectile->NumOpponentsHit(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CFlashbangProjectile", "m_numOpponentsHit");
}
void GCFlashbangProjectile::SetNumOpponentsHit(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFlashbangProjectile->NumOpponentsHit(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFlashbangProjectile", "m_numOpponentsHit", false, value);
}
uint32_t GCFlashbangProjectile::GetNumTeammatesHit() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFlashbangProjectile->NumTeammatesHit(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CFlashbangProjectile", "m_numTeammatesHit");
}
void GCFlashbangProjectile::SetNumTeammatesHit(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFlashbangProjectile->NumTeammatesHit(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFlashbangProjectile", "m_numTeammatesHit", false, value);
}
void* GCFlashbangProjectile::GetPtr() {
    return m_ptr;
}
std::string GCFlashbangProjectile::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCFlashbangProjectile::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseCSGrenadeProjectile GCFlashbangProjectile::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFlashbangProjectile::GetParent(ptr=%p)", m_ptr));
    GCBaseCSGrenadeProjectile value(m_ptr);
    return value;
}
void GCFlashbangProjectile::SetParent(GCBaseCSGrenadeProjectile value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFlashbangProjectile::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCFlashbangProjectile(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCFlashbangProjectile>("CFlashbangProjectile")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("TimeToDetonate", &GCFlashbangProjectile::GetTimeToDetonate, &GCFlashbangProjectile::SetTimeToDetonate)
        .addProperty("NumOpponentsHit", &GCFlashbangProjectile::GetNumOpponentsHit, &GCFlashbangProjectile::SetNumOpponentsHit)
        .addProperty("NumTeammatesHit", &GCFlashbangProjectile::GetNumTeammatesHit, &GCFlashbangProjectile::SetNumTeammatesHit)
        .addProperty("Parent", &GCFlashbangProjectile::GetParent, &GCFlashbangProjectile::SetParent)
        .addFunction("ToPtr", &GCFlashbangProjectile::ToPtr)
        .addFunction("IsValid", &GCFlashbangProjectile::IsValid)
        .endClass();
}
GCPointClientUIWorldTextPanel::GCPointClientUIWorldTextPanel(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPointClientUIWorldTextPanel::GCPointClientUIWorldTextPanel(void *ptr) {
    m_ptr = ptr;
}
std::string GCPointClientUIWorldTextPanel::GetMessageText() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointClientUIWorldTextPanel->MessageText(ptr=%p)", m_ptr));
    return GetSchemaValuePtr<char>(m_ptr, "CPointClientUIWorldTextPanel", "m_messageText");
}
void GCPointClientUIWorldTextPanel::SetMessageText(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointClientUIWorldTextPanel->MessageText(ptr=%p)", m_ptr));
    WriteSchemaPtrValue(m_ptr, "CPointClientUIWorldTextPanel", "m_messageText", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 512);
}
void* GCPointClientUIWorldTextPanel::GetPtr() {
    return m_ptr;
}
std::string GCPointClientUIWorldTextPanel::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPointClientUIWorldTextPanel::IsValid() {
    return (m_ptr != nullptr);
}
GCPointClientUIWorldPanel GCPointClientUIWorldTextPanel::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPointClientUIWorldTextPanel::GetParent(ptr=%p)", m_ptr));
    GCPointClientUIWorldPanel value(m_ptr);
    return value;
}
void GCPointClientUIWorldTextPanel::SetParent(GCPointClientUIWorldPanel value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPointClientUIWorldTextPanel::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCPointClientUIWorldTextPanel(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPointClientUIWorldTextPanel>("CPointClientUIWorldTextPanel")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("MessageText", &GCPointClientUIWorldTextPanel::GetMessageText, &GCPointClientUIWorldTextPanel::SetMessageText)
        .addProperty("Parent", &GCPointClientUIWorldTextPanel::GetParent, &GCPointClientUIWorldTextPanel::SetParent)
        .addFunction("ToPtr", &GCPointClientUIWorldTextPanel::ToPtr)
        .addFunction("IsValid", &GCPointClientUIWorldTextPanel::IsValid)
        .endClass();
}
GCInfoInstructorHintTarget::GCInfoInstructorHintTarget(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCInfoInstructorHintTarget::GCInfoInstructorHintTarget(void *ptr) {
    m_ptr = ptr;
}
void* GCInfoInstructorHintTarget::GetPtr() {
    return m_ptr;
}
std::string GCInfoInstructorHintTarget::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCInfoInstructorHintTarget::IsValid() {
    return (m_ptr != nullptr);
}
GCPointEntity GCInfoInstructorHintTarget::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CInfoInstructorHintTarget::GetParent(ptr=%p)", m_ptr));
    GCPointEntity value(m_ptr);
    return value;
}
void GCInfoInstructorHintTarget::SetParent(GCPointEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CInfoInstructorHintTarget::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCInfoInstructorHintTarget(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCInfoInstructorHintTarget>("CInfoInstructorHintTarget")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCInfoInstructorHintTarget::GetParent, &GCInfoInstructorHintTarget::SetParent)
        .addFunction("ToPtr", &GCInfoInstructorHintTarget::ToPtr)
        .addFunction("IsValid", &GCInfoInstructorHintTarget::IsValid)
        .endClass();
}
GCCSPlayer_HostageServices::GCCSPlayer_HostageServices(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCCSPlayer_HostageServices::GCCSPlayer_HostageServices(void *ptr) {
    m_ptr = ptr;
}
GCBaseEntity GCCSPlayer_HostageServices::GetCarriedHostage() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_HostageServices->CarriedHostage(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CCSPlayer_HostageServices", "m_hCarriedHostage").Get()));
    return value;
}
void GCCSPlayer_HostageServices::SetCarriedHostage(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_HostageServices->CarriedHostage(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'CarriedHostage' is not possible.\n");
}
GCBaseEntity GCCSPlayer_HostageServices::GetCarriedHostageProp() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_HostageServices->CarriedHostageProp(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CCSPlayer_HostageServices", "m_hCarriedHostageProp").Get()));
    return value;
}
void GCCSPlayer_HostageServices::SetCarriedHostageProp(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_HostageServices->CarriedHostageProp(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'CarriedHostageProp' is not possible.\n");
}
void* GCCSPlayer_HostageServices::GetPtr() {
    return m_ptr;
}
std::string GCCSPlayer_HostageServices::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCCSPlayer_HostageServices::IsValid() {
    return (m_ptr != nullptr);
}
GCPlayerPawnComponent GCCSPlayer_HostageServices::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSPlayer_HostageServices::GetParent(ptr=%p)", m_ptr));
    GCPlayerPawnComponent value(m_ptr);
    return value;
}
void GCCSPlayer_HostageServices::SetParent(GCPlayerPawnComponent value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSPlayer_HostageServices::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCCSPlayer_HostageServices(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCCSPlayer_HostageServices>("CCSPlayer_HostageServices")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("CarriedHostage", &GCCSPlayer_HostageServices::GetCarriedHostage, &GCCSPlayer_HostageServices::SetCarriedHostage)
        .addProperty("CarriedHostageProp", &GCCSPlayer_HostageServices::GetCarriedHostageProp, &GCCSPlayer_HostageServices::SetCarriedHostageProp)
        .addProperty("Parent", &GCCSPlayer_HostageServices::GetParent, &GCCSPlayer_HostageServices::SetParent)
        .addFunction("ToPtr", &GCCSPlayer_HostageServices::ToPtr)
        .addFunction("IsValid", &GCCSPlayer_HostageServices::IsValid)
        .endClass();
}
GCWeaponSSG08::GCWeaponSSG08(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCWeaponSSG08::GCWeaponSSG08(void *ptr) {
    m_ptr = ptr;
}
void* GCWeaponSSG08::GetPtr() {
    return m_ptr;
}
std::string GCWeaponSSG08::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCWeaponSSG08::IsValid() {
    return (m_ptr != nullptr);
}
GCCSWeaponBaseGun GCWeaponSSG08::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponSSG08::GetParent(ptr=%p)", m_ptr));
    GCCSWeaponBaseGun value(m_ptr);
    return value;
}
void GCWeaponSSG08::SetParent(GCCSWeaponBaseGun value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponSSG08::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCWeaponSSG08(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCWeaponSSG08>("CWeaponSSG08")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCWeaponSSG08::GetParent, &GCWeaponSSG08::SetParent)
        .addFunction("ToPtr", &GCWeaponSSG08::ToPtr)
        .addFunction("IsValid", &GCWeaponSSG08::IsValid)
        .endClass();
}
GCBreachCharge::GCBreachCharge(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCBreachCharge::GCBreachCharge(void *ptr) {
    m_ptr = ptr;
}
void* GCBreachCharge::GetPtr() {
    return m_ptr;
}
std::string GCBreachCharge::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCBreachCharge::IsValid() {
    return (m_ptr != nullptr);
}
GCCSWeaponBase GCBreachCharge::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CBreachCharge::GetParent(ptr=%p)", m_ptr));
    GCCSWeaponBase value(m_ptr);
    return value;
}
void GCBreachCharge::SetParent(GCCSWeaponBase value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CBreachCharge::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCBreachCharge(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCBreachCharge>("CBreachCharge")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCBreachCharge::GetParent, &GCBreachCharge::SetParent)
        .addFunction("ToPtr", &GCBreachCharge::ToPtr)
        .addFunction("IsValid", &GCBreachCharge::IsValid)
        .endClass();
}
GCLogicBranch::GCLogicBranch(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCLogicBranch::GCLogicBranch(void *ptr) {
    m_ptr = ptr;
}
bool GCLogicBranch::GetInValue() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CLogicBranch->InValue(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CLogicBranch", "m_bInValue");
}
void GCLogicBranch::SetInValue(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CLogicBranch->InValue(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CLogicBranch", "m_bInValue", false, value);
}
GCEntityIOOutput GCLogicBranch::GetOnTrue() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CLogicBranch->OnTrue(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CLogicBranch", "m_OnTrue"));
    return value;
}
void GCLogicBranch::SetOnTrue(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CLogicBranch->OnTrue(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnTrue' is not possible.\n");
}
GCEntityIOOutput GCLogicBranch::GetOnFalse() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CLogicBranch->OnFalse(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CLogicBranch", "m_OnFalse"));
    return value;
}
void GCLogicBranch::SetOnFalse(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CLogicBranch->OnFalse(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnFalse' is not possible.\n");
}
void* GCLogicBranch::GetPtr() {
    return m_ptr;
}
std::string GCLogicBranch::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCLogicBranch::IsValid() {
    return (m_ptr != nullptr);
}
GCLogicalEntity GCLogicBranch::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CLogicBranch::GetParent(ptr=%p)", m_ptr));
    GCLogicalEntity value(m_ptr);
    return value;
}
void GCLogicBranch::SetParent(GCLogicalEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CLogicBranch::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCLogicBranch(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCLogicBranch>("CLogicBranch")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("InValue", &GCLogicBranch::GetInValue, &GCLogicBranch::SetInValue)
        .addProperty("OnTrue", &GCLogicBranch::GetOnTrue, &GCLogicBranch::SetOnTrue)
        .addProperty("OnFalse", &GCLogicBranch::GetOnFalse, &GCLogicBranch::SetOnFalse)
        .addProperty("Parent", &GCLogicBranch::GetParent, &GCLogicBranch::SetParent)
        .addFunction("ToPtr", &GCLogicBranch::ToPtr)
        .addFunction("IsValid", &GCLogicBranch::IsValid)
        .endClass();
}
GCWeaponUMP45::GCWeaponUMP45(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCWeaponUMP45::GCWeaponUMP45(void *ptr) {
    m_ptr = ptr;
}
void* GCWeaponUMP45::GetPtr() {
    return m_ptr;
}
std::string GCWeaponUMP45::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCWeaponUMP45::IsValid() {
    return (m_ptr != nullptr);
}
GCCSWeaponBaseGun GCWeaponUMP45::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponUMP45::GetParent(ptr=%p)", m_ptr));
    GCCSWeaponBaseGun value(m_ptr);
    return value;
}
void GCWeaponUMP45::SetParent(GCCSWeaponBaseGun value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponUMP45::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCWeaponUMP45(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCWeaponUMP45>("CWeaponUMP45")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCWeaponUMP45::GetParent, &GCWeaponUMP45::SetParent)
        .addFunction("ToPtr", &GCWeaponUMP45::ToPtr)
        .addFunction("IsValid", &GCWeaponUMP45::IsValid)
        .endClass();
}
GCSpriteAlias_env_glow::GCSpriteAlias_env_glow(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCSpriteAlias_env_glow::GCSpriteAlias_env_glow(void *ptr) {
    m_ptr = ptr;
}
void* GCSpriteAlias_env_glow::GetPtr() {
    return m_ptr;
}
std::string GCSpriteAlias_env_glow::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCSpriteAlias_env_glow::IsValid() {
    return (m_ptr != nullptr);
}
GCSprite GCSpriteAlias_env_glow::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSpriteAlias_env_glow::GetParent(ptr=%p)", m_ptr));
    GCSprite value(m_ptr);
    return value;
}
void GCSpriteAlias_env_glow::SetParent(GCSprite value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSpriteAlias_env_glow::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCSpriteAlias_env_glow(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCSpriteAlias_env_glow>("CSpriteAlias_env_glow")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCSpriteAlias_env_glow::GetParent, &GCSpriteAlias_env_glow::SetParent)
        .addFunction("ToPtr", &GCSpriteAlias_env_glow::ToPtr)
        .addFunction("IsValid", &GCSpriteAlias_env_glow::IsValid)
        .endClass();
}
GCPhysicalButton::GCPhysicalButton(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPhysicalButton::GCPhysicalButton(void *ptr) {
    m_ptr = ptr;
}
void* GCPhysicalButton::GetPtr() {
    return m_ptr;
}
std::string GCPhysicalButton::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPhysicalButton::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseButton GCPhysicalButton::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPhysicalButton::GetParent(ptr=%p)", m_ptr));
    GCBaseButton value(m_ptr);
    return value;
}
void GCPhysicalButton::SetParent(GCBaseButton value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPhysicalButton::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCPhysicalButton(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPhysicalButton>("CPhysicalButton")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCPhysicalButton::GetParent, &GCPhysicalButton::SetParent)
        .addFunction("ToPtr", &GCPhysicalButton::ToPtr)
        .addFunction("IsValid", &GCPhysicalButton::IsValid)
        .endClass();
}
GCPhysLength::GCPhysLength(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPhysLength::GCPhysLength(void *ptr) {
    m_ptr = ptr;
}
std::vector<Vector> GCPhysLength::GetOffset() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysLength->Offset(ptr=%p,size=2)", m_ptr));
    Vector* outValue = (Vector*)GetSchemaPtr(m_ptr, "CPhysLength", "m_offset"); std::vector<Vector> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCPhysLength::SetOffset(std::vector<Vector> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysLength->Offset(ptr=%p,size=2)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Offset' is not possible.\n");
}
Vector GCPhysLength::GetAttach() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysLength->Attach(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CPhysLength", "m_vecAttach");
}
void GCPhysLength::SetAttach(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysLength->Attach(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysLength", "m_vecAttach", false, value);
}
float GCPhysLength::GetAddLength() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysLength->AddLength(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPhysLength", "m_addLength");
}
void GCPhysLength::SetAddLength(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysLength->AddLength(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysLength", "m_addLength", false, value);
}
float GCPhysLength::GetMinLength() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysLength->MinLength(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPhysLength", "m_minLength");
}
void GCPhysLength::SetMinLength(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysLength->MinLength(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysLength", "m_minLength", false, value);
}
float GCPhysLength::GetTotalLength() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysLength->TotalLength(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPhysLength", "m_totalLength");
}
void GCPhysLength::SetTotalLength(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysLength->TotalLength(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysLength", "m_totalLength", false, value);
}
bool GCPhysLength::GetEnableCollision() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysLength->EnableCollision(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPhysLength", "m_bEnableCollision");
}
void GCPhysLength::SetEnableCollision(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysLength->EnableCollision(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysLength", "m_bEnableCollision", false, value);
}
void* GCPhysLength::GetPtr() {
    return m_ptr;
}
std::string GCPhysLength::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPhysLength::IsValid() {
    return (m_ptr != nullptr);
}
GCPhysConstraint GCPhysLength::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPhysLength::GetParent(ptr=%p)", m_ptr));
    GCPhysConstraint value(m_ptr);
    return value;
}
void GCPhysLength::SetParent(GCPhysConstraint value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPhysLength::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCPhysLength(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPhysLength>("CPhysLength")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Offset", &GCPhysLength::GetOffset, &GCPhysLength::SetOffset)
        .addProperty("Attach", &GCPhysLength::GetAttach, &GCPhysLength::SetAttach)
        .addProperty("AddLength", &GCPhysLength::GetAddLength, &GCPhysLength::SetAddLength)
        .addProperty("MinLength", &GCPhysLength::GetMinLength, &GCPhysLength::SetMinLength)
        .addProperty("TotalLength", &GCPhysLength::GetTotalLength, &GCPhysLength::SetTotalLength)
        .addProperty("EnableCollision", &GCPhysLength::GetEnableCollision, &GCPhysLength::SetEnableCollision)
        .addProperty("Parent", &GCPhysLength::GetParent, &GCPhysLength::SetParent)
        .addFunction("ToPtr", &GCPhysLength::ToPtr)
        .addFunction("IsValid", &GCPhysLength::IsValid)
        .endClass();
}
GCLogicNPCCounterOBB::GCLogicNPCCounterOBB(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCLogicNPCCounterOBB::GCLogicNPCCounterOBB(void *ptr) {
    m_ptr = ptr;
}
void* GCLogicNPCCounterOBB::GetPtr() {
    return m_ptr;
}
std::string GCLogicNPCCounterOBB::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCLogicNPCCounterOBB::IsValid() {
    return (m_ptr != nullptr);
}
GCLogicNPCCounterAABB GCLogicNPCCounterOBB::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CLogicNPCCounterOBB::GetParent(ptr=%p)", m_ptr));
    GCLogicNPCCounterAABB value(m_ptr);
    return value;
}
void GCLogicNPCCounterOBB::SetParent(GCLogicNPCCounterAABB value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CLogicNPCCounterOBB::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCLogicNPCCounterOBB(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCLogicNPCCounterOBB>("CLogicNPCCounterOBB")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCLogicNPCCounterOBB::GetParent, &GCLogicNPCCounterOBB::SetParent)
        .addFunction("ToPtr", &GCLogicNPCCounterOBB::ToPtr)
        .addFunction("IsValid", &GCLogicNPCCounterOBB::IsValid)
        .endClass();
}
GCCSGOViewModel::GCCSGOViewModel(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCCSGOViewModel::GCCSGOViewModel(void *ptr) {
    m_ptr = ptr;
}
bool GCCSGOViewModel::GetShouldIgnoreOffsetAndAccuracy() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGOViewModel->ShouldIgnoreOffsetAndAccuracy(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGOViewModel", "m_bShouldIgnoreOffsetAndAccuracy");
}
void GCCSGOViewModel::SetShouldIgnoreOffsetAndAccuracy(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGOViewModel->ShouldIgnoreOffsetAndAccuracy(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGOViewModel", "m_bShouldIgnoreOffsetAndAccuracy", false, value);
}
uint32_t GCCSGOViewModel::GetWeaponParity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGOViewModel->WeaponParity(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CCSGOViewModel", "m_nWeaponParity");
}
void GCCSGOViewModel::SetWeaponParity(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGOViewModel->WeaponParity(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGOViewModel", "m_nWeaponParity", false, value);
}
uint32_t GCCSGOViewModel::GetOldWeaponParity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGOViewModel->OldWeaponParity(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CCSGOViewModel", "m_nOldWeaponParity");
}
void GCCSGOViewModel::SetOldWeaponParity(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGOViewModel->OldWeaponParity(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGOViewModel", "m_nOldWeaponParity", false, value);
}
void* GCCSGOViewModel::GetPtr() {
    return m_ptr;
}
std::string GCCSGOViewModel::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCCSGOViewModel::IsValid() {
    return (m_ptr != nullptr);
}
GCPredictedViewModel GCCSGOViewModel::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSGOViewModel::GetParent(ptr=%p)", m_ptr));
    GCPredictedViewModel value(m_ptr);
    return value;
}
void GCCSGOViewModel::SetParent(GCPredictedViewModel value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSGOViewModel::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCCSGOViewModel(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCCSGOViewModel>("CCSGOViewModel")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("ShouldIgnoreOffsetAndAccuracy", &GCCSGOViewModel::GetShouldIgnoreOffsetAndAccuracy, &GCCSGOViewModel::SetShouldIgnoreOffsetAndAccuracy)
        .addProperty("WeaponParity", &GCCSGOViewModel::GetWeaponParity, &GCCSGOViewModel::SetWeaponParity)
        .addProperty("OldWeaponParity", &GCCSGOViewModel::GetOldWeaponParity, &GCCSGOViewModel::SetOldWeaponParity)
        .addProperty("Parent", &GCCSGOViewModel::GetParent, &GCCSGOViewModel::SetParent)
        .addFunction("ToPtr", &GCCSGOViewModel::ToPtr)
        .addFunction("IsValid", &GCCSGOViewModel::IsValid)
        .endClass();
}
GCWeaponShield::GCWeaponShield(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCWeaponShield::GCWeaponShield(void *ptr) {
    m_ptr = ptr;
}
float GCWeaponShield::GetBulletDamageAbsorbed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CWeaponShield->BulletDamageAbsorbed(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CWeaponShield", "m_flBulletDamageAbsorbed");
}
void GCWeaponShield::SetBulletDamageAbsorbed(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CWeaponShield->BulletDamageAbsorbed(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CWeaponShield", "m_flBulletDamageAbsorbed", false, value);
}
float GCWeaponShield::GetLastBulletHitSoundTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CWeaponShield->LastBulletHitSoundTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CWeaponShield", "m_flLastBulletHitSoundTime");
}
void GCWeaponShield::SetLastBulletHitSoundTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CWeaponShield->LastBulletHitSoundTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CWeaponShield", "m_flLastBulletHitSoundTime", false, value);
}
float GCWeaponShield::GetDisplayHealth() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CWeaponShield->DisplayHealth(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CWeaponShield", "m_flDisplayHealth");
}
void GCWeaponShield::SetDisplayHealth(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CWeaponShield->DisplayHealth(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CWeaponShield", "m_flDisplayHealth", false, value);
}
void* GCWeaponShield::GetPtr() {
    return m_ptr;
}
std::string GCWeaponShield::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCWeaponShield::IsValid() {
    return (m_ptr != nullptr);
}
GCCSWeaponBaseGun GCWeaponShield::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponShield::GetParent(ptr=%p)", m_ptr));
    GCCSWeaponBaseGun value(m_ptr);
    return value;
}
void GCWeaponShield::SetParent(GCCSWeaponBaseGun value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponShield::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCWeaponShield(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCWeaponShield>("CWeaponShield")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("BulletDamageAbsorbed", &GCWeaponShield::GetBulletDamageAbsorbed, &GCWeaponShield::SetBulletDamageAbsorbed)
        .addProperty("LastBulletHitSoundTime", &GCWeaponShield::GetLastBulletHitSoundTime, &GCWeaponShield::SetLastBulletHitSoundTime)
        .addProperty("DisplayHealth", &GCWeaponShield::GetDisplayHealth, &GCWeaponShield::SetDisplayHealth)
        .addProperty("Parent", &GCWeaponShield::GetParent, &GCWeaponShield::SetParent)
        .addFunction("ToPtr", &GCWeaponShield::ToPtr)
        .addFunction("IsValid", &GCWeaponShield::IsValid)
        .endClass();
}
GCBlood::GCBlood(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCBlood::GCBlood(void *ptr) {
    m_ptr = ptr;
}
QAngle GCBlood::GetSprayAngles() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBlood->SprayAngles(ptr=%p)", m_ptr));
    return GetSchemaValue<QAngle>(m_ptr, "CBlood", "m_vecSprayAngles");
}
void GCBlood::SetSprayAngles(QAngle value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBlood->SprayAngles(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBlood", "m_vecSprayAngles", false, value);
}
Vector GCBlood::GetSprayDir() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBlood->SprayDir(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CBlood", "m_vecSprayDir");
}
void GCBlood::SetSprayDir(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBlood->SprayDir(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBlood", "m_vecSprayDir", false, value);
}
float GCBlood::GetAmount() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBlood->Amount(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CBlood", "m_flAmount");
}
void GCBlood::SetAmount(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBlood->Amount(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBlood", "m_flAmount", false, value);
}
uint64_t GCBlood::GetColor() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBlood->Color(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CBlood", "m_Color");
}
void GCBlood::SetColor(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBlood->Color(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBlood", "m_Color", false, value);
}
void* GCBlood::GetPtr() {
    return m_ptr;
}
std::string GCBlood::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCBlood::IsValid() {
    return (m_ptr != nullptr);
}
GCPointEntity GCBlood::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CBlood::GetParent(ptr=%p)", m_ptr));
    GCPointEntity value(m_ptr);
    return value;
}
void GCBlood::SetParent(GCPointEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CBlood::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCBlood(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCBlood>("CBlood")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("SprayAngles", &GCBlood::GetSprayAngles, &GCBlood::SetSprayAngles)
        .addProperty("SprayDir", &GCBlood::GetSprayDir, &GCBlood::SetSprayDir)
        .addProperty("Amount", &GCBlood::GetAmount, &GCBlood::SetAmount)
        .addProperty("Color", &GCBlood::GetColor, &GCBlood::SetColor)
        .addProperty("Parent", &GCBlood::GetParent, &GCBlood::SetParent)
        .addFunction("ToPtr", &GCBlood::ToPtr)
        .addFunction("IsValid", &GCBlood::IsValid)
        .endClass();
}
GCEnvFade::GCEnvFade(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCEnvFade::GCEnvFade(void *ptr) {
    m_ptr = ptr;
}
Color GCEnvFade::GetFadeColor() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvFade->FadeColor(ptr=%p)", m_ptr));
    return GetSchemaValue<Color>(m_ptr, "CEnvFade", "m_fadeColor");
}
void GCEnvFade::SetFadeColor(Color value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvFade->FadeColor(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvFade", "m_fadeColor", false, value);
}
float GCEnvFade::GetDuration() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvFade->Duration(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CEnvFade", "m_Duration");
}
void GCEnvFade::SetDuration(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvFade->Duration(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvFade", "m_Duration", false, value);
}
float GCEnvFade::GetHoldDuration() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvFade->HoldDuration(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CEnvFade", "m_HoldDuration");
}
void GCEnvFade::SetHoldDuration(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvFade->HoldDuration(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvFade", "m_HoldDuration", false, value);
}
GCEntityIOOutput GCEnvFade::GetOnBeginFade() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvFade->OnBeginFade(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CEnvFade", "m_OnBeginFade"));
    return value;
}
void GCEnvFade::SetOnBeginFade(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvFade->OnBeginFade(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnBeginFade' is not possible.\n");
}
void* GCEnvFade::GetPtr() {
    return m_ptr;
}
std::string GCEnvFade::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCEnvFade::IsValid() {
    return (m_ptr != nullptr);
}
GCLogicalEntity GCEnvFade::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CEnvFade::GetParent(ptr=%p)", m_ptr));
    GCLogicalEntity value(m_ptr);
    return value;
}
void GCEnvFade::SetParent(GCLogicalEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CEnvFade::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCEnvFade(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCEnvFade>("CEnvFade")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("FadeColor", &GCEnvFade::GetFadeColor, &GCEnvFade::SetFadeColor)
        .addProperty("Duration", &GCEnvFade::GetDuration, &GCEnvFade::SetDuration)
        .addProperty("HoldDuration", &GCEnvFade::GetHoldDuration, &GCEnvFade::SetHoldDuration)
        .addProperty("OnBeginFade", &GCEnvFade::GetOnBeginFade, &GCEnvFade::SetOnBeginFade)
        .addProperty("Parent", &GCEnvFade::GetParent, &GCEnvFade::SetParent)
        .addFunction("ToPtr", &GCEnvFade::ToPtr)
        .addFunction("IsValid", &GCEnvFade::IsValid)
        .endClass();
}
GCDynamicPropAlias_cable_dynamic::GCDynamicPropAlias_cable_dynamic(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCDynamicPropAlias_cable_dynamic::GCDynamicPropAlias_cable_dynamic(void *ptr) {
    m_ptr = ptr;
}
void* GCDynamicPropAlias_cable_dynamic::GetPtr() {
    return m_ptr;
}
std::string GCDynamicPropAlias_cable_dynamic::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCDynamicPropAlias_cable_dynamic::IsValid() {
    return (m_ptr != nullptr);
}
GCDynamicProp GCDynamicPropAlias_cable_dynamic::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CDynamicPropAlias_cable_dynamic::GetParent(ptr=%p)", m_ptr));
    GCDynamicProp value(m_ptr);
    return value;
}
void GCDynamicPropAlias_cable_dynamic::SetParent(GCDynamicProp value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CDynamicPropAlias_cable_dynamic::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCDynamicPropAlias_cable_dynamic(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCDynamicPropAlias_cable_dynamic>("CDynamicPropAlias_cable_dynamic")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCDynamicPropAlias_cable_dynamic::GetParent, &GCDynamicPropAlias_cable_dynamic::SetParent)
        .addFunction("ToPtr", &GCDynamicPropAlias_cable_dynamic::ToPtr)
        .addFunction("IsValid", &GCDynamicPropAlias_cable_dynamic::IsValid)
        .endClass();
}
GCCSPlayer_BuyServices::GCCSPlayer_BuyServices(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCCSPlayer_BuyServices::GCCSPlayer_BuyServices(void *ptr) {
    m_ptr = ptr;
}
std::vector<GSellbackPurchaseEntry_t> GCCSPlayer_BuyServices::GetSellbackPurchaseEntries() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_BuyServices->SellbackPurchaseEntries(ptr=%p)", m_ptr));
    CUtlVector<GSellbackPurchaseEntry_t>* vec = GetSchemaValue<CUtlVector<GSellbackPurchaseEntry_t>*>(m_ptr, "CCSPlayer_BuyServices", "m_vecSellbackPurchaseEntries"); std::vector<GSellbackPurchaseEntry_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCCSPlayer_BuyServices::SetSellbackPurchaseEntries(std::vector<GSellbackPurchaseEntry_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_BuyServices->SellbackPurchaseEntries(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GSellbackPurchaseEntry_t>(m_ptr, "CCSPlayer_BuyServices", "m_vecSellbackPurchaseEntries", false, value);
}
void* GCCSPlayer_BuyServices::GetPtr() {
    return m_ptr;
}
std::string GCCSPlayer_BuyServices::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCCSPlayer_BuyServices::IsValid() {
    return (m_ptr != nullptr);
}
GCPlayerPawnComponent GCCSPlayer_BuyServices::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSPlayer_BuyServices::GetParent(ptr=%p)", m_ptr));
    GCPlayerPawnComponent value(m_ptr);
    return value;
}
void GCCSPlayer_BuyServices::SetParent(GCPlayerPawnComponent value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSPlayer_BuyServices::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCCSPlayer_BuyServices(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCCSPlayer_BuyServices>("CCSPlayer_BuyServices")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("SellbackPurchaseEntries", &GCCSPlayer_BuyServices::GetSellbackPurchaseEntries, &GCCSPlayer_BuyServices::SetSellbackPurchaseEntries)
        .addProperty("Parent", &GCCSPlayer_BuyServices::GetParent, &GCCSPlayer_BuyServices::SetParent)
        .addFunction("ToPtr", &GCCSPlayer_BuyServices::ToPtr)
        .addFunction("IsValid", &GCCSPlayer_BuyServices::IsValid)
        .endClass();
}
GCHostageExpresserShim::GCHostageExpresserShim(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCHostageExpresserShim::GCHostageExpresserShim(void *ptr) {
    m_ptr = ptr;
}
GCAI_Expresser GCHostageExpresserShim::GetExpresser() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostageExpresserShim->Expresser(ptr=%p)", m_ptr));
    GCAI_Expresser value(*(void**)GetSchemaPtr(m_ptr, "CHostageExpresserShim", "m_pExpresser"));
    return value;
}
void GCHostageExpresserShim::SetExpresser(GCAI_Expresser value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostageExpresserShim->Expresser(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CHostageExpresserShim","m_pExpresser", false, (char*)value.GetPtr());
}
void* GCHostageExpresserShim::GetPtr() {
    return m_ptr;
}
std::string GCHostageExpresserShim::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCHostageExpresserShim::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseCombatCharacter GCHostageExpresserShim::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CHostageExpresserShim::GetParent(ptr=%p)", m_ptr));
    GCBaseCombatCharacter value(m_ptr);
    return value;
}
void GCHostageExpresserShim::SetParent(GCBaseCombatCharacter value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CHostageExpresserShim::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCHostageExpresserShim(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCHostageExpresserShim>("CHostageExpresserShim")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Expresser", &GCHostageExpresserShim::GetExpresser, &GCHostageExpresserShim::SetExpresser)
        .addProperty("Parent", &GCHostageExpresserShim::GetParent, &GCHostageExpresserShim::SetParent)
        .addFunction("ToPtr", &GCHostageExpresserShim::ToPtr)
        .addFunction("IsValid", &GCHostageExpresserShim::IsValid)
        .endClass();
}
GCInferno::GCInferno(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCInferno::GCInferno(void *ptr) {
    m_ptr = ptr;
}
std::vector<Vector> GCInferno::GetFirePositions() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInferno->FirePositions(ptr=%p,size=64)", m_ptr));
    Vector* outValue = (Vector*)GetSchemaPtr(m_ptr, "CInferno", "m_firePositions"); std::vector<Vector> ret; for(int i = 0; i < 64; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCInferno::SetFirePositions(std::vector<Vector> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInferno->FirePositions(ptr=%p,size=64)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'FirePositions' is not possible.\n");
}
std::vector<Vector> GCInferno::GetFireParentPositions() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInferno->FireParentPositions(ptr=%p,size=64)", m_ptr));
    Vector* outValue = (Vector*)GetSchemaPtr(m_ptr, "CInferno", "m_fireParentPositions"); std::vector<Vector> ret; for(int i = 0; i < 64; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCInferno::SetFireParentPositions(std::vector<Vector> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInferno->FireParentPositions(ptr=%p,size=64)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'FireParentPositions' is not possible.\n");
}
std::vector<bool> GCInferno::GetFireIsBurning() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInferno->FireIsBurning(ptr=%p,size=64)", m_ptr));
    bool* outValue = (bool*)GetSchemaPtr(m_ptr, "CInferno", "m_bFireIsBurning"); std::vector<bool> ret; for(int i = 0; i < 64; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCInferno::SetFireIsBurning(std::vector<bool> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInferno->FireIsBurning(ptr=%p,size=64)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'FireIsBurning' is not possible.\n");
}
std::vector<Vector> GCInferno::GetBurnNormal() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInferno->BurnNormal(ptr=%p,size=64)", m_ptr));
    Vector* outValue = (Vector*)GetSchemaPtr(m_ptr, "CInferno", "m_BurnNormal"); std::vector<Vector> ret; for(int i = 0; i < 64; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCInferno::SetBurnNormal(std::vector<Vector> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInferno->BurnNormal(ptr=%p,size=64)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'BurnNormal' is not possible.\n");
}
int32_t GCInferno::GetFireCount() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInferno->FireCount(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CInferno", "m_fireCount");
}
void GCInferno::SetFireCount(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInferno->FireCount(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInferno", "m_fireCount", false, value);
}
int32_t GCInferno::GetInfernoType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInferno->InfernoType(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CInferno", "m_nInfernoType");
}
void GCInferno::SetInfernoType(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInferno->InfernoType(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInferno", "m_nInfernoType", false, value);
}
int32_t GCInferno::GetFireEffectTickBegin() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInferno->FireEffectTickBegin(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CInferno", "m_nFireEffectTickBegin");
}
void GCInferno::SetFireEffectTickBegin(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInferno->FireEffectTickBegin(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInferno", "m_nFireEffectTickBegin", false, value);
}
float GCInferno::GetFireLifetime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInferno->FireLifetime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CInferno", "m_nFireLifetime");
}
void GCInferno::SetFireLifetime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInferno->FireLifetime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInferno", "m_nFireLifetime", false, value);
}
bool GCInferno::GetInPostEffectTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInferno->InPostEffectTime(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CInferno", "m_bInPostEffectTime");
}
void GCInferno::SetInPostEffectTime(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInferno->InPostEffectTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInferno", "m_bInPostEffectTime", false, value);
}
int32_t GCInferno::GetFiresExtinguishCount() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInferno->FiresExtinguishCount(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CInferno", "m_nFiresExtinguishCount");
}
void GCInferno::SetFiresExtinguishCount(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInferno->FiresExtinguishCount(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInferno", "m_nFiresExtinguishCount", false, value);
}
bool GCInferno::GetWasCreatedInSmoke() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInferno->WasCreatedInSmoke(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CInferno", "m_bWasCreatedInSmoke");
}
void GCInferno::SetWasCreatedInSmoke(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInferno->WasCreatedInSmoke(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInferno", "m_bWasCreatedInSmoke", false, value);
}
GExtent GCInferno::GetExtent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInferno->Extent(ptr=%p)", m_ptr));
    GExtent value(GetSchemaPtr(m_ptr, "CInferno", "m_extent"));
    return value;
}
void GCInferno::SetExtent(GExtent value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInferno->Extent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Extent' is not possible.\n");
}
GCountdownTimer GCInferno::GetDamageTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInferno->DamageTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CInferno", "m_damageTimer"));
    return value;
}
void GCInferno::SetDamageTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInferno->DamageTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'DamageTimer' is not possible.\n");
}
GCountdownTimer GCInferno::GetDamageRampTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInferno->DamageRampTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CInferno", "m_damageRampTimer"));
    return value;
}
void GCInferno::SetDamageRampTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInferno->DamageRampTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'DamageRampTimer' is not possible.\n");
}
Vector GCInferno::GetSplashVelocity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInferno->SplashVelocity(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CInferno", "m_splashVelocity");
}
void GCInferno::SetSplashVelocity(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInferno->SplashVelocity(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInferno", "m_splashVelocity", false, value);
}
Vector GCInferno::GetInitialSplashVelocity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInferno->InitialSplashVelocity(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CInferno", "m_InitialSplashVelocity");
}
void GCInferno::SetInitialSplashVelocity(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInferno->InitialSplashVelocity(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInferno", "m_InitialSplashVelocity", false, value);
}
Vector GCInferno::GetStartPos() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInferno->StartPos(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CInferno", "m_startPos");
}
void GCInferno::SetStartPos(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInferno->StartPos(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInferno", "m_startPos", false, value);
}
Vector GCInferno::GetOriginalSpawnLocation() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInferno->OriginalSpawnLocation(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CInferno", "m_vecOriginalSpawnLocation");
}
void GCInferno::SetOriginalSpawnLocation(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInferno->OriginalSpawnLocation(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInferno", "m_vecOriginalSpawnLocation", false, value);
}
GIntervalTimer GCInferno::GetActiveTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInferno->ActiveTimer(ptr=%p)", m_ptr));
    GIntervalTimer value(GetSchemaPtr(m_ptr, "CInferno", "m_activeTimer"));
    return value;
}
void GCInferno::SetActiveTimer(GIntervalTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInferno->ActiveTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ActiveTimer' is not possible.\n");
}
int32_t GCInferno::GetFireSpawnOffset() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInferno->FireSpawnOffset(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CInferno", "m_fireSpawnOffset");
}
void GCInferno::SetFireSpawnOffset(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInferno->FireSpawnOffset(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInferno", "m_fireSpawnOffset", false, value);
}
int32_t GCInferno::GetMaxFlames() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInferno->MaxFlames(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CInferno", "m_nMaxFlames");
}
void GCInferno::SetMaxFlames(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInferno->MaxFlames(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInferno", "m_nMaxFlames", false, value);
}
int32_t GCInferno::GetSpreadCount() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInferno->SpreadCount(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CInferno", "m_nSpreadCount");
}
void GCInferno::SetSpreadCount(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInferno->SpreadCount(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInferno", "m_nSpreadCount", false, value);
}
GCountdownTimer GCInferno::GetBookkeepingTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInferno->BookkeepingTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CInferno", "m_BookkeepingTimer"));
    return value;
}
void GCInferno::SetBookkeepingTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInferno->BookkeepingTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'BookkeepingTimer' is not possible.\n");
}
GCountdownTimer GCInferno::GetNextSpreadTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInferno->NextSpreadTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CInferno", "m_NextSpreadTimer"));
    return value;
}
void GCInferno::SetNextSpreadTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInferno->NextSpreadTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'NextSpreadTimer' is not possible.\n");
}
uint16_t GCInferno::GetSourceItemDefIndex() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInferno->SourceItemDefIndex(ptr=%p)", m_ptr));
    return GetSchemaValue<uint16_t>(m_ptr, "CInferno", "m_nSourceItemDefIndex");
}
void GCInferno::SetSourceItemDefIndex(uint16_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInferno->SourceItemDefIndex(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInferno", "m_nSourceItemDefIndex", false, value);
}
void* GCInferno::GetPtr() {
    return m_ptr;
}
std::string GCInferno::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCInferno::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseModelEntity GCInferno::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CInferno::GetParent(ptr=%p)", m_ptr));
    GCBaseModelEntity value(m_ptr);
    return value;
}
void GCInferno::SetParent(GCBaseModelEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CInferno::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCInferno(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCInferno>("CInferno")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("FirePositions", &GCInferno::GetFirePositions, &GCInferno::SetFirePositions)
        .addProperty("FireParentPositions", &GCInferno::GetFireParentPositions, &GCInferno::SetFireParentPositions)
        .addProperty("FireIsBurning", &GCInferno::GetFireIsBurning, &GCInferno::SetFireIsBurning)
        .addProperty("BurnNormal", &GCInferno::GetBurnNormal, &GCInferno::SetBurnNormal)
        .addProperty("FireCount", &GCInferno::GetFireCount, &GCInferno::SetFireCount)
        .addProperty("InfernoType", &GCInferno::GetInfernoType, &GCInferno::SetInfernoType)
        .addProperty("FireEffectTickBegin", &GCInferno::GetFireEffectTickBegin, &GCInferno::SetFireEffectTickBegin)
        .addProperty("FireLifetime", &GCInferno::GetFireLifetime, &GCInferno::SetFireLifetime)
        .addProperty("InPostEffectTime", &GCInferno::GetInPostEffectTime, &GCInferno::SetInPostEffectTime)
        .addProperty("FiresExtinguishCount", &GCInferno::GetFiresExtinguishCount, &GCInferno::SetFiresExtinguishCount)
        .addProperty("WasCreatedInSmoke", &GCInferno::GetWasCreatedInSmoke, &GCInferno::SetWasCreatedInSmoke)
        .addProperty("Extent", &GCInferno::GetExtent, &GCInferno::SetExtent)
        .addProperty("DamageTimer", &GCInferno::GetDamageTimer, &GCInferno::SetDamageTimer)
        .addProperty("DamageRampTimer", &GCInferno::GetDamageRampTimer, &GCInferno::SetDamageRampTimer)
        .addProperty("SplashVelocity", &GCInferno::GetSplashVelocity, &GCInferno::SetSplashVelocity)
        .addProperty("InitialSplashVelocity", &GCInferno::GetInitialSplashVelocity, &GCInferno::SetInitialSplashVelocity)
        .addProperty("StartPos", &GCInferno::GetStartPos, &GCInferno::SetStartPos)
        .addProperty("OriginalSpawnLocation", &GCInferno::GetOriginalSpawnLocation, &GCInferno::SetOriginalSpawnLocation)
        .addProperty("ActiveTimer", &GCInferno::GetActiveTimer, &GCInferno::SetActiveTimer)
        .addProperty("FireSpawnOffset", &GCInferno::GetFireSpawnOffset, &GCInferno::SetFireSpawnOffset)
        .addProperty("MaxFlames", &GCInferno::GetMaxFlames, &GCInferno::SetMaxFlames)
        .addProperty("SpreadCount", &GCInferno::GetSpreadCount, &GCInferno::SetSpreadCount)
        .addProperty("BookkeepingTimer", &GCInferno::GetBookkeepingTimer, &GCInferno::SetBookkeepingTimer)
        .addProperty("NextSpreadTimer", &GCInferno::GetNextSpreadTimer, &GCInferno::SetNextSpreadTimer)
        .addProperty("SourceItemDefIndex", &GCInferno::GetSourceItemDefIndex, &GCInferno::SetSourceItemDefIndex)
        .addProperty("Parent", &GCInferno::GetParent, &GCInferno::SetParent)
        .addFunction("ToPtr", &GCInferno::ToPtr)
        .addFunction("IsValid", &GCInferno::IsValid)
        .endClass();
}
GCEnvGlobal::GCEnvGlobal(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCEnvGlobal::GCEnvGlobal(void *ptr) {
    m_ptr = ptr;
}
std::string GCEnvGlobal::GetGlobalstate() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvGlobal->Globalstate(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvGlobal", "m_globalstate").String();
}
void GCEnvGlobal::SetGlobalstate(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvGlobal->Globalstate(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvGlobal", "m_globalstate", false, CUtlSymbolLarge(value.c_str()));
}
int32_t GCEnvGlobal::GetTriggermode() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvGlobal->Triggermode(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CEnvGlobal", "m_triggermode");
}
void GCEnvGlobal::SetTriggermode(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvGlobal->Triggermode(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvGlobal", "m_triggermode", false, value);
}
int32_t GCEnvGlobal::GetInitialstate() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvGlobal->Initialstate(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CEnvGlobal", "m_initialstate");
}
void GCEnvGlobal::SetInitialstate(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvGlobal->Initialstate(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvGlobal", "m_initialstate", false, value);
}
int32_t GCEnvGlobal::GetCounter() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvGlobal->Counter(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CEnvGlobal", "m_counter");
}
void GCEnvGlobal::SetCounter(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvGlobal->Counter(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvGlobal", "m_counter", false, value);
}
void* GCEnvGlobal::GetPtr() {
    return m_ptr;
}
std::string GCEnvGlobal::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCEnvGlobal::IsValid() {
    return (m_ptr != nullptr);
}
GCLogicalEntity GCEnvGlobal::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CEnvGlobal::GetParent(ptr=%p)", m_ptr));
    GCLogicalEntity value(m_ptr);
    return value;
}
void GCEnvGlobal::SetParent(GCLogicalEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CEnvGlobal::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCEnvGlobal(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCEnvGlobal>("CEnvGlobal")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Globalstate", &GCEnvGlobal::GetGlobalstate, &GCEnvGlobal::SetGlobalstate)
        .addProperty("Triggermode", &GCEnvGlobal::GetTriggermode, &GCEnvGlobal::SetTriggermode)
        .addProperty("Initialstate", &GCEnvGlobal::GetInitialstate, &GCEnvGlobal::SetInitialstate)
        .addProperty("Counter", &GCEnvGlobal::GetCounter, &GCEnvGlobal::SetCounter)
        .addProperty("Parent", &GCEnvGlobal::GetParent, &GCEnvGlobal::SetParent)
        .addFunction("ToPtr", &GCEnvGlobal::ToPtr)
        .addFunction("IsValid", &GCEnvGlobal::IsValid)
        .endClass();
}
GCFilterName::GCFilterName(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCFilterName::GCFilterName(void *ptr) {
    m_ptr = ptr;
}
std::string GCFilterName::GetFilterName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFilterName->FilterName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFilterName", "m_iFilterName").String();
}
void GCFilterName::SetFilterName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFilterName->FilterName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFilterName", "m_iFilterName", false, CUtlSymbolLarge(value.c_str()));
}
void* GCFilterName::GetPtr() {
    return m_ptr;
}
std::string GCFilterName::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCFilterName::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseFilter GCFilterName::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFilterName::GetParent(ptr=%p)", m_ptr));
    GCBaseFilter value(m_ptr);
    return value;
}
void GCFilterName::SetParent(GCBaseFilter value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFilterName::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCFilterName(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCFilterName>("CFilterName")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("FilterName", &GCFilterName::GetFilterName, &GCFilterName::SetFilterName)
        .addProperty("Parent", &GCFilterName::GetParent, &GCFilterName::SetParent)
        .addFunction("ToPtr", &GCFilterName::ToPtr)
        .addFunction("IsValid", &GCFilterName::IsValid)
        .endClass();
}
GCCSTeam::GCCSTeam(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCCSTeam::GCCSTeam(void *ptr) {
    m_ptr = ptr;
}
int32_t GCCSTeam::GetLastRecievedShorthandedRoundBonus() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSTeam->LastRecievedShorthandedRoundBonus(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSTeam", "m_nLastRecievedShorthandedRoundBonus");
}
void GCCSTeam::SetLastRecievedShorthandedRoundBonus(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSTeam->LastRecievedShorthandedRoundBonus(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSTeam", "m_nLastRecievedShorthandedRoundBonus", false, value);
}
int32_t GCCSTeam::GetShorthandedRoundBonusStartRound() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSTeam->ShorthandedRoundBonusStartRound(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSTeam", "m_nShorthandedRoundBonusStartRound");
}
void GCCSTeam::SetShorthandedRoundBonusStartRound(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSTeam->ShorthandedRoundBonusStartRound(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSTeam", "m_nShorthandedRoundBonusStartRound", false, value);
}
bool GCCSTeam::GetSurrendered() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSTeam->Surrendered(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSTeam", "m_bSurrendered");
}
void GCCSTeam::SetSurrendered(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSTeam->Surrendered(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSTeam", "m_bSurrendered", false, value);
}
std::string GCCSTeam::GetTeamMatchStat() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSTeam->TeamMatchStat(ptr=%p)", m_ptr));
    return GetSchemaValuePtr<char>(m_ptr, "CCSTeam", "m_szTeamMatchStat");
}
void GCCSTeam::SetTeamMatchStat(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSTeam->TeamMatchStat(ptr=%p)", m_ptr));
    WriteSchemaPtrValue(m_ptr, "CCSTeam", "m_szTeamMatchStat", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 512);
}
int32_t GCCSTeam::GetNumMapVictories() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSTeam->NumMapVictories(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSTeam", "m_numMapVictories");
}
void GCCSTeam::SetNumMapVictories(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSTeam->NumMapVictories(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSTeam", "m_numMapVictories", false, value);
}
int32_t GCCSTeam::GetScoreFirstHalf() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSTeam->ScoreFirstHalf(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSTeam", "m_scoreFirstHalf");
}
void GCCSTeam::SetScoreFirstHalf(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSTeam->ScoreFirstHalf(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSTeam", "m_scoreFirstHalf", false, value);
}
int32_t GCCSTeam::GetScoreSecondHalf() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSTeam->ScoreSecondHalf(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSTeam", "m_scoreSecondHalf");
}
void GCCSTeam::SetScoreSecondHalf(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSTeam->ScoreSecondHalf(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSTeam", "m_scoreSecondHalf", false, value);
}
int32_t GCCSTeam::GetScoreOvertime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSTeam->ScoreOvertime(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSTeam", "m_scoreOvertime");
}
void GCCSTeam::SetScoreOvertime(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSTeam->ScoreOvertime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSTeam", "m_scoreOvertime", false, value);
}
std::string GCCSTeam::GetClanTeamname() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSTeam->ClanTeamname(ptr=%p)", m_ptr));
    return GetSchemaValuePtr<char>(m_ptr, "CCSTeam", "m_szClanTeamname");
}
void GCCSTeam::SetClanTeamname(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSTeam->ClanTeamname(ptr=%p)", m_ptr));
    WriteSchemaPtrValue(m_ptr, "CCSTeam", "m_szClanTeamname", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 129);
}
uint32_t GCCSTeam::GetClanID() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSTeam->ClanID(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CCSTeam", "m_iClanID");
}
void GCCSTeam::SetClanID(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSTeam->ClanID(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSTeam", "m_iClanID", false, value);
}
std::string GCCSTeam::GetTeamFlagImage() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSTeam->TeamFlagImage(ptr=%p)", m_ptr));
    return GetSchemaValuePtr<char>(m_ptr, "CCSTeam", "m_szTeamFlagImage");
}
void GCCSTeam::SetTeamFlagImage(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSTeam->TeamFlagImage(ptr=%p)", m_ptr));
    WriteSchemaPtrValue(m_ptr, "CCSTeam", "m_szTeamFlagImage", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 8);
}
std::string GCCSTeam::GetTeamLogoImage() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSTeam->TeamLogoImage(ptr=%p)", m_ptr));
    return GetSchemaValuePtr<char>(m_ptr, "CCSTeam", "m_szTeamLogoImage");
}
void GCCSTeam::SetTeamLogoImage(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSTeam->TeamLogoImage(ptr=%p)", m_ptr));
    WriteSchemaPtrValue(m_ptr, "CCSTeam", "m_szTeamLogoImage", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 8);
}
float GCCSTeam::GetNextResourceTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSTeam->NextResourceTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSTeam", "m_flNextResourceTime");
}
void GCCSTeam::SetNextResourceTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSTeam->NextResourceTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSTeam", "m_flNextResourceTime", false, value);
}
int32_t GCCSTeam::GetLastUpdateSentAt() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSTeam->LastUpdateSentAt(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSTeam", "m_iLastUpdateSentAt");
}
void GCCSTeam::SetLastUpdateSentAt(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSTeam->LastUpdateSentAt(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSTeam", "m_iLastUpdateSentAt", false, value);
}
void* GCCSTeam::GetPtr() {
    return m_ptr;
}
std::string GCCSTeam::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCCSTeam::IsValid() {
    return (m_ptr != nullptr);
}
GCTeam GCCSTeam::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSTeam::GetParent(ptr=%p)", m_ptr));
    GCTeam value(m_ptr);
    return value;
}
void GCCSTeam::SetParent(GCTeam value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSTeam::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCCSTeam(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCCSTeam>("CCSTeam")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("LastRecievedShorthandedRoundBonus", &GCCSTeam::GetLastRecievedShorthandedRoundBonus, &GCCSTeam::SetLastRecievedShorthandedRoundBonus)
        .addProperty("ShorthandedRoundBonusStartRound", &GCCSTeam::GetShorthandedRoundBonusStartRound, &GCCSTeam::SetShorthandedRoundBonusStartRound)
        .addProperty("Surrendered", &GCCSTeam::GetSurrendered, &GCCSTeam::SetSurrendered)
        .addProperty("TeamMatchStat", &GCCSTeam::GetTeamMatchStat, &GCCSTeam::SetTeamMatchStat)
        .addProperty("NumMapVictories", &GCCSTeam::GetNumMapVictories, &GCCSTeam::SetNumMapVictories)
        .addProperty("ScoreFirstHalf", &GCCSTeam::GetScoreFirstHalf, &GCCSTeam::SetScoreFirstHalf)
        .addProperty("ScoreSecondHalf", &GCCSTeam::GetScoreSecondHalf, &GCCSTeam::SetScoreSecondHalf)
        .addProperty("ScoreOvertime", &GCCSTeam::GetScoreOvertime, &GCCSTeam::SetScoreOvertime)
        .addProperty("ClanTeamname", &GCCSTeam::GetClanTeamname, &GCCSTeam::SetClanTeamname)
        .addProperty("ClanID", &GCCSTeam::GetClanID, &GCCSTeam::SetClanID)
        .addProperty("TeamFlagImage", &GCCSTeam::GetTeamFlagImage, &GCCSTeam::SetTeamFlagImage)
        .addProperty("TeamLogoImage", &GCCSTeam::GetTeamLogoImage, &GCCSTeam::SetTeamLogoImage)
        .addProperty("NextResourceTime", &GCCSTeam::GetNextResourceTime, &GCCSTeam::SetNextResourceTime)
        .addProperty("LastUpdateSentAt", &GCCSTeam::GetLastUpdateSentAt, &GCCSTeam::SetLastUpdateSentAt)
        .addProperty("Parent", &GCCSTeam::GetParent, &GCCSTeam::SetParent)
        .addFunction("ToPtr", &GCCSTeam::ToPtr)
        .addFunction("IsValid", &GCCSTeam::IsValid)
        .endClass();
}
GCWeaponUSPSilencer::GCWeaponUSPSilencer(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCWeaponUSPSilencer::GCWeaponUSPSilencer(void *ptr) {
    m_ptr = ptr;
}
void* GCWeaponUSPSilencer::GetPtr() {
    return m_ptr;
}
std::string GCWeaponUSPSilencer::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCWeaponUSPSilencer::IsValid() {
    return (m_ptr != nullptr);
}
GCCSWeaponBaseGun GCWeaponUSPSilencer::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponUSPSilencer::GetParent(ptr=%p)", m_ptr));
    GCCSWeaponBaseGun value(m_ptr);
    return value;
}
void GCWeaponUSPSilencer::SetParent(GCCSWeaponBaseGun value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponUSPSilencer::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCWeaponUSPSilencer(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCWeaponUSPSilencer>("CWeaponUSPSilencer")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCWeaponUSPSilencer::GetParent, &GCWeaponUSPSilencer::SetParent)
        .addFunction("ToPtr", &GCWeaponUSPSilencer::ToPtr)
        .addFunction("IsValid", &GCWeaponUSPSilencer::IsValid)
        .endClass();
}
GCSpriteOriented::GCSpriteOriented(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCSpriteOriented::GCSpriteOriented(void *ptr) {
    m_ptr = ptr;
}
void* GCSpriteOriented::GetPtr() {
    return m_ptr;
}
std::string GCSpriteOriented::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCSpriteOriented::IsValid() {
    return (m_ptr != nullptr);
}
GCSprite GCSpriteOriented::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSpriteOriented::GetParent(ptr=%p)", m_ptr));
    GCSprite value(m_ptr);
    return value;
}
void GCSpriteOriented::SetParent(GCSprite value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSpriteOriented::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCSpriteOriented(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCSpriteOriented>("CSpriteOriented")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCSpriteOriented::GetParent, &GCSpriteOriented::SetParent)
        .addFunction("ToPtr", &GCSpriteOriented::ToPtr)
        .addFunction("IsValid", &GCSpriteOriented::IsValid)
        .endClass();
}
GCTriggerGravity::GCTriggerGravity(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCTriggerGravity::GCTriggerGravity(void *ptr) {
    m_ptr = ptr;
}
void* GCTriggerGravity::GetPtr() {
    return m_ptr;
}
std::string GCTriggerGravity::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCTriggerGravity::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseTrigger GCTriggerGravity::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTriggerGravity::GetParent(ptr=%p)", m_ptr));
    GCBaseTrigger value(m_ptr);
    return value;
}
void GCTriggerGravity::SetParent(GCBaseTrigger value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTriggerGravity::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCTriggerGravity(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCTriggerGravity>("CTriggerGravity")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCTriggerGravity::GetParent, &GCTriggerGravity::SetParent)
        .addFunction("ToPtr", &GCTriggerGravity::ToPtr)
        .addFunction("IsValid", &GCTriggerGravity::IsValid)
        .endClass();
}
GCServerRagdollTrigger::GCServerRagdollTrigger(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCServerRagdollTrigger::GCServerRagdollTrigger(void *ptr) {
    m_ptr = ptr;
}
void* GCServerRagdollTrigger::GetPtr() {
    return m_ptr;
}
std::string GCServerRagdollTrigger::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCServerRagdollTrigger::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseTrigger GCServerRagdollTrigger::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CServerRagdollTrigger::GetParent(ptr=%p)", m_ptr));
    GCBaseTrigger value(m_ptr);
    return value;
}
void GCServerRagdollTrigger::SetParent(GCBaseTrigger value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CServerRagdollTrigger::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCServerRagdollTrigger(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCServerRagdollTrigger>("CServerRagdollTrigger")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCServerRagdollTrigger::GetParent, &GCServerRagdollTrigger::SetParent)
        .addFunction("ToPtr", &GCServerRagdollTrigger::ToPtr)
        .addFunction("IsValid", &GCServerRagdollTrigger::IsValid)
        .endClass();
}
GCInfoDynamicShadowHintBox::GCInfoDynamicShadowHintBox(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCInfoDynamicShadowHintBox::GCInfoDynamicShadowHintBox(void *ptr) {
    m_ptr = ptr;
}
Vector GCInfoDynamicShadowHintBox::GetBoxMins() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInfoDynamicShadowHintBox->BoxMins(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CInfoDynamicShadowHintBox", "m_vBoxMins");
}
void GCInfoDynamicShadowHintBox::SetBoxMins(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInfoDynamicShadowHintBox->BoxMins(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInfoDynamicShadowHintBox", "m_vBoxMins", false, value);
}
Vector GCInfoDynamicShadowHintBox::GetBoxMaxs() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInfoDynamicShadowHintBox->BoxMaxs(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CInfoDynamicShadowHintBox", "m_vBoxMaxs");
}
void GCInfoDynamicShadowHintBox::SetBoxMaxs(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInfoDynamicShadowHintBox->BoxMaxs(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInfoDynamicShadowHintBox", "m_vBoxMaxs", false, value);
}
void* GCInfoDynamicShadowHintBox::GetPtr() {
    return m_ptr;
}
std::string GCInfoDynamicShadowHintBox::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCInfoDynamicShadowHintBox::IsValid() {
    return (m_ptr != nullptr);
}
GCInfoDynamicShadowHint GCInfoDynamicShadowHintBox::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CInfoDynamicShadowHintBox::GetParent(ptr=%p)", m_ptr));
    GCInfoDynamicShadowHint value(m_ptr);
    return value;
}
void GCInfoDynamicShadowHintBox::SetParent(GCInfoDynamicShadowHint value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CInfoDynamicShadowHintBox::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCInfoDynamicShadowHintBox(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCInfoDynamicShadowHintBox>("CInfoDynamicShadowHintBox")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("BoxMins", &GCInfoDynamicShadowHintBox::GetBoxMins, &GCInfoDynamicShadowHintBox::SetBoxMins)
        .addProperty("BoxMaxs", &GCInfoDynamicShadowHintBox::GetBoxMaxs, &GCInfoDynamicShadowHintBox::SetBoxMaxs)
        .addProperty("Parent", &GCInfoDynamicShadowHintBox::GetParent, &GCInfoDynamicShadowHintBox::SetParent)
        .addFunction("ToPtr", &GCInfoDynamicShadowHintBox::ToPtr)
        .addFunction("IsValid", &GCInfoDynamicShadowHintBox::IsValid)
        .endClass();
}
GCPathMover::GCPathMover(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPathMover::GCPathMover(void *ptr) {
    m_ptr = ptr;
}
float GCPathMover::GetPathLength() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPathMover->PathLength(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPathMover", "m_flPathLength");
}
void GCPathMover::SetPathLength(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPathMover->PathLength(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPathMover", "m_flPathLength", false, value);
}
bool GCPathMover::GetClosedLoop() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPathMover->ClosedLoop(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPathMover", "m_bClosedLoop");
}
void GCPathMover::SetClosedLoop(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPathMover->ClosedLoop(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPathMover", "m_bClosedLoop", false, value);
}
void* GCPathMover::GetPtr() {
    return m_ptr;
}
std::string GCPathMover::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPathMover::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseEntity GCPathMover::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPathMover::GetParent(ptr=%p)", m_ptr));
    GCBaseEntity value(m_ptr);
    return value;
}
void GCPathMover::SetParent(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPathMover::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCPathMover(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPathMover>("CPathMover")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("PathLength", &GCPathMover::GetPathLength, &GCPathMover::SetPathLength)
        .addProperty("ClosedLoop", &GCPathMover::GetClosedLoop, &GCPathMover::SetClosedLoop)
        .addProperty("Parent", &GCPathMover::GetParent, &GCPathMover::SetParent)
        .addFunction("ToPtr", &GCPathMover::ToPtr)
        .addFunction("IsValid", &GCPathMover::IsValid)
        .endClass();
}
GCFlashbang::GCFlashbang(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCFlashbang::GCFlashbang(void *ptr) {
    m_ptr = ptr;
}
void* GCFlashbang::GetPtr() {
    return m_ptr;
}
std::string GCFlashbang::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCFlashbang::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseCSGrenade GCFlashbang::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFlashbang::GetParent(ptr=%p)", m_ptr));
    GCBaseCSGrenade value(m_ptr);
    return value;
}
void GCFlashbang::SetParent(GCBaseCSGrenade value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFlashbang::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCFlashbang(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCFlashbang>("CFlashbang")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCFlashbang::GetParent, &GCFlashbang::SetParent)
        .addFunction("ToPtr", &GCFlashbang::ToPtr)
        .addFunction("IsValid", &GCFlashbang::IsValid)
        .endClass();
}
GCWeaponAug::GCWeaponAug(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCWeaponAug::GCWeaponAug(void *ptr) {
    m_ptr = ptr;
}
void* GCWeaponAug::GetPtr() {
    return m_ptr;
}
std::string GCWeaponAug::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCWeaponAug::IsValid() {
    return (m_ptr != nullptr);
}
GCCSWeaponBaseGun GCWeaponAug::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponAug::GetParent(ptr=%p)", m_ptr));
    GCCSWeaponBaseGun value(m_ptr);
    return value;
}
void GCWeaponAug::SetParent(GCCSWeaponBaseGun value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponAug::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCWeaponAug(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCWeaponAug>("CWeaponAug")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCWeaponAug::GetParent, &GCWeaponAug::SetParent)
        .addFunction("ToPtr", &GCWeaponAug::ToPtr)
        .addFunction("IsValid", &GCWeaponAug::IsValid)
        .endClass();
}
GCIncendiaryGrenade::GCIncendiaryGrenade(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCIncendiaryGrenade::GCIncendiaryGrenade(void *ptr) {
    m_ptr = ptr;
}
void* GCIncendiaryGrenade::GetPtr() {
    return m_ptr;
}
std::string GCIncendiaryGrenade::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCIncendiaryGrenade::IsValid() {
    return (m_ptr != nullptr);
}
GCMolotovGrenade GCIncendiaryGrenade::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CIncendiaryGrenade::GetParent(ptr=%p)", m_ptr));
    GCMolotovGrenade value(m_ptr);
    return value;
}
void GCIncendiaryGrenade::SetParent(GCMolotovGrenade value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CIncendiaryGrenade::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCIncendiaryGrenade(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCIncendiaryGrenade>("CIncendiaryGrenade")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCIncendiaryGrenade::GetParent, &GCIncendiaryGrenade::SetParent)
        .addFunction("ToPtr", &GCIncendiaryGrenade::ToPtr)
        .addFunction("IsValid", &GCIncendiaryGrenade::IsValid)
        .endClass();
}
GCChangeLevel::GCChangeLevel(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCChangeLevel::GCChangeLevel(void *ptr) {
    m_ptr = ptr;
}
std::string GCChangeLevel::GetMapName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChangeLevel->MapName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlString>(m_ptr, "CChangeLevel", "m_sMapName").Get();
}
void GCChangeLevel::SetMapName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChangeLevel->MapName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CChangeLevel", "m_sMapName", false, CUtlString(value.c_str()));
}
std::string GCChangeLevel::GetLandmarkName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChangeLevel->LandmarkName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlString>(m_ptr, "CChangeLevel", "m_sLandmarkName").Get();
}
void GCChangeLevel::SetLandmarkName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChangeLevel->LandmarkName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CChangeLevel", "m_sLandmarkName", false, CUtlString(value.c_str()));
}
GCEntityIOOutput GCChangeLevel::GetOnChangeLevel() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChangeLevel->OnChangeLevel(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CChangeLevel", "m_OnChangeLevel"));
    return value;
}
void GCChangeLevel::SetOnChangeLevel(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChangeLevel->OnChangeLevel(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnChangeLevel' is not possible.\n");
}
bool GCChangeLevel::GetTouched() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChangeLevel->Touched(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CChangeLevel", "m_bTouched");
}
void GCChangeLevel::SetTouched(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChangeLevel->Touched(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CChangeLevel", "m_bTouched", false, value);
}
bool GCChangeLevel::GetNoTouch() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChangeLevel->NoTouch(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CChangeLevel", "m_bNoTouch");
}
void GCChangeLevel::SetNoTouch(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChangeLevel->NoTouch(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CChangeLevel", "m_bNoTouch", false, value);
}
bool GCChangeLevel::GetNewChapter() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChangeLevel->NewChapter(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CChangeLevel", "m_bNewChapter");
}
void GCChangeLevel::SetNewChapter(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChangeLevel->NewChapter(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CChangeLevel", "m_bNewChapter", false, value);
}
bool GCChangeLevel::GetOnChangeLevelFired() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChangeLevel->OnChangeLevelFired(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CChangeLevel", "m_bOnChangeLevelFired");
}
void GCChangeLevel::SetOnChangeLevelFired(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChangeLevel->OnChangeLevelFired(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CChangeLevel", "m_bOnChangeLevelFired", false, value);
}
void* GCChangeLevel::GetPtr() {
    return m_ptr;
}
std::string GCChangeLevel::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCChangeLevel::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseTrigger GCChangeLevel::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CChangeLevel::GetParent(ptr=%p)", m_ptr));
    GCBaseTrigger value(m_ptr);
    return value;
}
void GCChangeLevel::SetParent(GCBaseTrigger value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CChangeLevel::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCChangeLevel(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCChangeLevel>("CChangeLevel")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("MapName", &GCChangeLevel::GetMapName, &GCChangeLevel::SetMapName)
        .addProperty("LandmarkName", &GCChangeLevel::GetLandmarkName, &GCChangeLevel::SetLandmarkName)
        .addProperty("OnChangeLevel", &GCChangeLevel::GetOnChangeLevel, &GCChangeLevel::SetOnChangeLevel)
        .addProperty("Touched", &GCChangeLevel::GetTouched, &GCChangeLevel::SetTouched)
        .addProperty("NoTouch", &GCChangeLevel::GetNoTouch, &GCChangeLevel::SetNoTouch)
        .addProperty("NewChapter", &GCChangeLevel::GetNewChapter, &GCChangeLevel::SetNewChapter)
        .addProperty("OnChangeLevelFired", &GCChangeLevel::GetOnChangeLevelFired, &GCChangeLevel::SetOnChangeLevelFired)
        .addProperty("Parent", &GCChangeLevel::GetParent, &GCChangeLevel::SetParent)
        .addFunction("ToPtr", &GCChangeLevel::ToPtr)
        .addFunction("IsValid", &GCChangeLevel::IsValid)
        .endClass();
}
GCTriggerLerpObject::GCTriggerLerpObject(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCTriggerLerpObject::GCTriggerLerpObject(void *ptr) {
    m_ptr = ptr;
}
std::string GCTriggerLerpObject::GetLerpTarget() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerLerpObject->LerpTarget(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CTriggerLerpObject", "m_iszLerpTarget").String();
}
void GCTriggerLerpObject::SetLerpTarget(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerLerpObject->LerpTarget(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerLerpObject", "m_iszLerpTarget", false, CUtlSymbolLarge(value.c_str()));
}
GCBaseEntity GCTriggerLerpObject::GetLerpTarget1() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerLerpObject->LerpTarget1(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CTriggerLerpObject", "m_hLerpTarget").Get()));
    return value;
}
void GCTriggerLerpObject::SetLerpTarget1(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerLerpObject->LerpTarget1(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'LerpTarget1' is not possible.\n");
}
std::string GCTriggerLerpObject::GetLerpTargetAttachment() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerLerpObject->LerpTargetAttachment(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CTriggerLerpObject", "m_iszLerpTargetAttachment").String();
}
void GCTriggerLerpObject::SetLerpTargetAttachment(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerLerpObject->LerpTargetAttachment(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerLerpObject", "m_iszLerpTargetAttachment", false, CUtlSymbolLarge(value.c_str()));
}
float GCTriggerLerpObject::GetLerpDuration() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerLerpObject->LerpDuration(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CTriggerLerpObject", "m_flLerpDuration");
}
void GCTriggerLerpObject::SetLerpDuration(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerLerpObject->LerpDuration(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerLerpObject", "m_flLerpDuration", false, value);
}
bool GCTriggerLerpObject::GetLerpRestoreMoveType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerLerpObject->LerpRestoreMoveType(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CTriggerLerpObject", "m_bLerpRestoreMoveType");
}
void GCTriggerLerpObject::SetLerpRestoreMoveType(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerLerpObject->LerpRestoreMoveType(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerLerpObject", "m_bLerpRestoreMoveType", false, value);
}
bool GCTriggerLerpObject::GetSingleLerpObject() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerLerpObject->SingleLerpObject(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CTriggerLerpObject", "m_bSingleLerpObject");
}
void GCTriggerLerpObject::SetSingleLerpObject(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerLerpObject->SingleLerpObject(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerLerpObject", "m_bSingleLerpObject", false, value);
}
std::vector<Glerpdata_t> GCTriggerLerpObject::GetLerpingObjects() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerLerpObject->LerpingObjects(ptr=%p)", m_ptr));
    CUtlVector<Glerpdata_t>* vec = GetSchemaValue<CUtlVector<Glerpdata_t>*>(m_ptr, "CTriggerLerpObject", "m_vecLerpingObjects"); std::vector<Glerpdata_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCTriggerLerpObject::SetLerpingObjects(std::vector<Glerpdata_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerLerpObject->LerpingObjects(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<Glerpdata_t>(m_ptr, "CTriggerLerpObject", "m_vecLerpingObjects", false, value);
}
std::string GCTriggerLerpObject::GetLerpEffect() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerLerpObject->LerpEffect(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CTriggerLerpObject", "m_iszLerpEffect").String();
}
void GCTriggerLerpObject::SetLerpEffect(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerLerpObject->LerpEffect(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerLerpObject", "m_iszLerpEffect", false, CUtlSymbolLarge(value.c_str()));
}
std::string GCTriggerLerpObject::GetLerpSound() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerLerpObject->LerpSound(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CTriggerLerpObject", "m_iszLerpSound").String();
}
void GCTriggerLerpObject::SetLerpSound(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerLerpObject->LerpSound(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerLerpObject", "m_iszLerpSound", false, CUtlSymbolLarge(value.c_str()));
}
bool GCTriggerLerpObject::GetAttachTouchingObject() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerLerpObject->AttachTouchingObject(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CTriggerLerpObject", "m_bAttachTouchingObject");
}
void GCTriggerLerpObject::SetAttachTouchingObject(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerLerpObject->AttachTouchingObject(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerLerpObject", "m_bAttachTouchingObject", false, value);
}
GCBaseEntity GCTriggerLerpObject::GetEntityToWaitForDisconnect() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerLerpObject->EntityToWaitForDisconnect(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CTriggerLerpObject", "m_hEntityToWaitForDisconnect").Get()));
    return value;
}
void GCTriggerLerpObject::SetEntityToWaitForDisconnect(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerLerpObject->EntityToWaitForDisconnect(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'EntityToWaitForDisconnect' is not possible.\n");
}
GCEntityIOOutput GCTriggerLerpObject::GetOnLerpStarted() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerLerpObject->OnLerpStarted(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CTriggerLerpObject", "m_OnLerpStarted"));
    return value;
}
void GCTriggerLerpObject::SetOnLerpStarted(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerLerpObject->OnLerpStarted(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnLerpStarted' is not possible.\n");
}
GCEntityIOOutput GCTriggerLerpObject::GetOnLerpFinished() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerLerpObject->OnLerpFinished(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CTriggerLerpObject", "m_OnLerpFinished"));
    return value;
}
void GCTriggerLerpObject::SetOnLerpFinished(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerLerpObject->OnLerpFinished(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnLerpFinished' is not possible.\n");
}
void* GCTriggerLerpObject::GetPtr() {
    return m_ptr;
}
std::string GCTriggerLerpObject::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCTriggerLerpObject::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseTrigger GCTriggerLerpObject::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTriggerLerpObject::GetParent(ptr=%p)", m_ptr));
    GCBaseTrigger value(m_ptr);
    return value;
}
void GCTriggerLerpObject::SetParent(GCBaseTrigger value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTriggerLerpObject::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCTriggerLerpObject(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCTriggerLerpObject>("CTriggerLerpObject")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("LerpTarget", &GCTriggerLerpObject::GetLerpTarget, &GCTriggerLerpObject::SetLerpTarget)
        .addProperty("LerpTarget1", &GCTriggerLerpObject::GetLerpTarget1, &GCTriggerLerpObject::SetLerpTarget1)
        .addProperty("LerpTargetAttachment", &GCTriggerLerpObject::GetLerpTargetAttachment, &GCTriggerLerpObject::SetLerpTargetAttachment)
        .addProperty("LerpDuration", &GCTriggerLerpObject::GetLerpDuration, &GCTriggerLerpObject::SetLerpDuration)
        .addProperty("LerpRestoreMoveType", &GCTriggerLerpObject::GetLerpRestoreMoveType, &GCTriggerLerpObject::SetLerpRestoreMoveType)
        .addProperty("SingleLerpObject", &GCTriggerLerpObject::GetSingleLerpObject, &GCTriggerLerpObject::SetSingleLerpObject)
        .addProperty("LerpingObjects", &GCTriggerLerpObject::GetLerpingObjects, &GCTriggerLerpObject::SetLerpingObjects)
        .addProperty("LerpEffect", &GCTriggerLerpObject::GetLerpEffect, &GCTriggerLerpObject::SetLerpEffect)
        .addProperty("LerpSound", &GCTriggerLerpObject::GetLerpSound, &GCTriggerLerpObject::SetLerpSound)
        .addProperty("AttachTouchingObject", &GCTriggerLerpObject::GetAttachTouchingObject, &GCTriggerLerpObject::SetAttachTouchingObject)
        .addProperty("EntityToWaitForDisconnect", &GCTriggerLerpObject::GetEntityToWaitForDisconnect, &GCTriggerLerpObject::SetEntityToWaitForDisconnect)
        .addProperty("OnLerpStarted", &GCTriggerLerpObject::GetOnLerpStarted, &GCTriggerLerpObject::SetOnLerpStarted)
        .addProperty("OnLerpFinished", &GCTriggerLerpObject::GetOnLerpFinished, &GCTriggerLerpObject::SetOnLerpFinished)
        .addProperty("Parent", &GCTriggerLerpObject::GetParent, &GCTriggerLerpObject::SetParent)
        .addFunction("ToPtr", &GCTriggerLerpObject::ToPtr)
        .addFunction("IsValid", &GCTriggerLerpObject::IsValid)
        .endClass();
}
GCTriggerSoundscape::GCTriggerSoundscape(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCTriggerSoundscape::GCTriggerSoundscape(void *ptr) {
    m_ptr = ptr;
}
GCEnvSoundscapeTriggerable GCTriggerSoundscape::GetSoundscape() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerSoundscape->Soundscape(ptr=%p)", m_ptr));
    GCEnvSoundscapeTriggerable value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CTriggerSoundscape", "m_hSoundscape").Get()));
    return value;
}
void GCTriggerSoundscape::SetSoundscape(GCEnvSoundscapeTriggerable value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerSoundscape->Soundscape(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Soundscape' is not possible.\n");
}
std::string GCTriggerSoundscape::GetSoundscapeName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerSoundscape->SoundscapeName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CTriggerSoundscape", "m_SoundscapeName").String();
}
void GCTriggerSoundscape::SetSoundscapeName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerSoundscape->SoundscapeName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerSoundscape", "m_SoundscapeName", false, CUtlSymbolLarge(value.c_str()));
}
void* GCTriggerSoundscape::GetPtr() {
    return m_ptr;
}
std::string GCTriggerSoundscape::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCTriggerSoundscape::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseTrigger GCTriggerSoundscape::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTriggerSoundscape::GetParent(ptr=%p)", m_ptr));
    GCBaseTrigger value(m_ptr);
    return value;
}
void GCTriggerSoundscape::SetParent(GCBaseTrigger value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTriggerSoundscape::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCTriggerSoundscape(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCTriggerSoundscape>("CTriggerSoundscape")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Soundscape", &GCTriggerSoundscape::GetSoundscape, &GCTriggerSoundscape::SetSoundscape)
        .addProperty("SoundscapeName", &GCTriggerSoundscape::GetSoundscapeName, &GCTriggerSoundscape::SetSoundscapeName)
        .addProperty("Parent", &GCTriggerSoundscape::GetParent, &GCTriggerSoundscape::SetParent)
        .addFunction("ToPtr", &GCTriggerSoundscape::ToPtr)
        .addFunction("IsValid", &GCTriggerSoundscape::IsValid)
        .endClass();
}
GCLogicScript::GCLogicScript(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCLogicScript::GCLogicScript(void *ptr) {
    m_ptr = ptr;
}
void* GCLogicScript::GetPtr() {
    return m_ptr;
}
std::string GCLogicScript::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCLogicScript::IsValid() {
    return (m_ptr != nullptr);
}
GCPointEntity GCLogicScript::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CLogicScript::GetParent(ptr=%p)", m_ptr));
    GCPointEntity value(m_ptr);
    return value;
}
void GCLogicScript::SetParent(GCPointEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CLogicScript::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCLogicScript(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCLogicScript>("CLogicScript")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCLogicScript::GetParent, &GCLogicScript::SetParent)
        .addFunction("ToPtr", &GCLogicScript::ToPtr)
        .addFunction("IsValid", &GCLogicScript::IsValid)
        .endClass();
}
GCWeaponFiveSeven::GCWeaponFiveSeven(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCWeaponFiveSeven::GCWeaponFiveSeven(void *ptr) {
    m_ptr = ptr;
}
void* GCWeaponFiveSeven::GetPtr() {
    return m_ptr;
}
std::string GCWeaponFiveSeven::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCWeaponFiveSeven::IsValid() {
    return (m_ptr != nullptr);
}
GCCSWeaponBaseGun GCWeaponFiveSeven::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponFiveSeven::GetParent(ptr=%p)", m_ptr));
    GCCSWeaponBaseGun value(m_ptr);
    return value;
}
void GCWeaponFiveSeven::SetParent(GCCSWeaponBaseGun value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponFiveSeven::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCWeaponFiveSeven(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCWeaponFiveSeven>("CWeaponFiveSeven")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCWeaponFiveSeven::GetParent, &GCWeaponFiveSeven::SetParent)
        .addFunction("ToPtr", &GCWeaponFiveSeven::ToPtr)
        .addFunction("IsValid", &GCWeaponFiveSeven::IsValid)
        .endClass();
}
GCTriggerBrush::GCTriggerBrush(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCTriggerBrush::GCTriggerBrush(void *ptr) {
    m_ptr = ptr;
}
GCEntityIOOutput GCTriggerBrush::GetOnStartTouch() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerBrush->OnStartTouch(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CTriggerBrush", "m_OnStartTouch"));
    return value;
}
void GCTriggerBrush::SetOnStartTouch(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerBrush->OnStartTouch(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnStartTouch' is not possible.\n");
}
GCEntityIOOutput GCTriggerBrush::GetOnEndTouch() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerBrush->OnEndTouch(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CTriggerBrush", "m_OnEndTouch"));
    return value;
}
void GCTriggerBrush::SetOnEndTouch(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerBrush->OnEndTouch(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnEndTouch' is not possible.\n");
}
GCEntityIOOutput GCTriggerBrush::GetOnUse() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerBrush->OnUse(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CTriggerBrush", "m_OnUse"));
    return value;
}
void GCTriggerBrush::SetOnUse(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerBrush->OnUse(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnUse' is not possible.\n");
}
int32_t GCTriggerBrush::GetInputFilter() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerBrush->InputFilter(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CTriggerBrush", "m_iInputFilter");
}
void GCTriggerBrush::SetInputFilter(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerBrush->InputFilter(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerBrush", "m_iInputFilter", false, value);
}
int32_t GCTriggerBrush::GetDontMessageParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerBrush->DontMessageParent(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CTriggerBrush", "m_iDontMessageParent");
}
void GCTriggerBrush::SetDontMessageParent(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerBrush->DontMessageParent(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerBrush", "m_iDontMessageParent", false, value);
}
void* GCTriggerBrush::GetPtr() {
    return m_ptr;
}
std::string GCTriggerBrush::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCTriggerBrush::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseModelEntity GCTriggerBrush::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTriggerBrush::GetParent(ptr=%p)", m_ptr));
    GCBaseModelEntity value(m_ptr);
    return value;
}
void GCTriggerBrush::SetParent(GCBaseModelEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTriggerBrush::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCTriggerBrush(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCTriggerBrush>("CTriggerBrush")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("OnStartTouch", &GCTriggerBrush::GetOnStartTouch, &GCTriggerBrush::SetOnStartTouch)
        .addProperty("OnEndTouch", &GCTriggerBrush::GetOnEndTouch, &GCTriggerBrush::SetOnEndTouch)
        .addProperty("OnUse", &GCTriggerBrush::GetOnUse, &GCTriggerBrush::SetOnUse)
        .addProperty("InputFilter", &GCTriggerBrush::GetInputFilter, &GCTriggerBrush::SetInputFilter)
        .addProperty("DontMessageParent", &GCTriggerBrush::GetDontMessageParent, &GCTriggerBrush::SetDontMessageParent)
        .addProperty("Parent", &GCTriggerBrush::GetParent, &GCTriggerBrush::SetParent)
        .addFunction("ToPtr", &GCTriggerBrush::ToPtr)
        .addFunction("IsValid", &GCTriggerBrush::IsValid)
        .endClass();
}
GCPhysicsEntitySolver::GCPhysicsEntitySolver(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPhysicsEntitySolver::GCPhysicsEntitySolver(void *ptr) {
    m_ptr = ptr;
}
GCBaseEntity GCPhysicsEntitySolver::GetMovingEntity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysicsEntitySolver->MovingEntity(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CPhysicsEntitySolver", "m_hMovingEntity").Get()));
    return value;
}
void GCPhysicsEntitySolver::SetMovingEntity(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysicsEntitySolver->MovingEntity(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'MovingEntity' is not possible.\n");
}
GCBaseEntity GCPhysicsEntitySolver::GetPhysicsBlocker() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysicsEntitySolver->PhysicsBlocker(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CPhysicsEntitySolver", "m_hPhysicsBlocker").Get()));
    return value;
}
void GCPhysicsEntitySolver::SetPhysicsBlocker(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysicsEntitySolver->PhysicsBlocker(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'PhysicsBlocker' is not possible.\n");
}
float GCPhysicsEntitySolver::GetSeparationDuration() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysicsEntitySolver->SeparationDuration(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPhysicsEntitySolver", "m_separationDuration");
}
void GCPhysicsEntitySolver::SetSeparationDuration(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysicsEntitySolver->SeparationDuration(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysicsEntitySolver", "m_separationDuration", false, value);
}
float GCPhysicsEntitySolver::GetCancelTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysicsEntitySolver->CancelTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPhysicsEntitySolver", "m_cancelTime");
}
void GCPhysicsEntitySolver::SetCancelTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysicsEntitySolver->CancelTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysicsEntitySolver", "m_cancelTime", false, value);
}
void* GCPhysicsEntitySolver::GetPtr() {
    return m_ptr;
}
std::string GCPhysicsEntitySolver::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPhysicsEntitySolver::IsValid() {
    return (m_ptr != nullptr);
}
GCLogicalEntity GCPhysicsEntitySolver::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPhysicsEntitySolver::GetParent(ptr=%p)", m_ptr));
    GCLogicalEntity value(m_ptr);
    return value;
}
void GCPhysicsEntitySolver::SetParent(GCLogicalEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPhysicsEntitySolver::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCPhysicsEntitySolver(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPhysicsEntitySolver>("CPhysicsEntitySolver")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("MovingEntity", &GCPhysicsEntitySolver::GetMovingEntity, &GCPhysicsEntitySolver::SetMovingEntity)
        .addProperty("PhysicsBlocker", &GCPhysicsEntitySolver::GetPhysicsBlocker, &GCPhysicsEntitySolver::SetPhysicsBlocker)
        .addProperty("SeparationDuration", &GCPhysicsEntitySolver::GetSeparationDuration, &GCPhysicsEntitySolver::SetSeparationDuration)
        .addProperty("CancelTime", &GCPhysicsEntitySolver::GetCancelTime, &GCPhysicsEntitySolver::SetCancelTime)
        .addProperty("Parent", &GCPhysicsEntitySolver::GetParent, &GCPhysicsEntitySolver::SetParent)
        .addFunction("ToPtr", &GCPhysicsEntitySolver::ToPtr)
        .addFunction("IsValid", &GCPhysicsEntitySolver::IsValid)
        .endClass();
}
GCNetworkedSequenceOperation::GCNetworkedSequenceOperation(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCNetworkedSequenceOperation::GCNetworkedSequenceOperation(void *ptr) {
    m_ptr = ptr;
}
float GCNetworkedSequenceOperation::GetPrevCycle() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNetworkedSequenceOperation->PrevCycle(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CNetworkedSequenceOperation", "m_flPrevCycle");
}
void GCNetworkedSequenceOperation::SetPrevCycle(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNetworkedSequenceOperation->PrevCycle(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNetworkedSequenceOperation", "m_flPrevCycle", false, value);
}
float GCNetworkedSequenceOperation::GetCycle() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNetworkedSequenceOperation->Cycle(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CNetworkedSequenceOperation", "m_flCycle");
}
void GCNetworkedSequenceOperation::SetCycle(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNetworkedSequenceOperation->Cycle(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNetworkedSequenceOperation", "m_flCycle", false, value);
}
float GCNetworkedSequenceOperation::GetWeight() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNetworkedSequenceOperation->Weight(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CNetworkedSequenceOperation", "m_flWeight");
}
void GCNetworkedSequenceOperation::SetWeight(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNetworkedSequenceOperation->Weight(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNetworkedSequenceOperation", "m_flWeight", false, value);
}
bool GCNetworkedSequenceOperation::GetSequenceChangeNetworked() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNetworkedSequenceOperation->SequenceChangeNetworked(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CNetworkedSequenceOperation", "m_bSequenceChangeNetworked");
}
void GCNetworkedSequenceOperation::SetSequenceChangeNetworked(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNetworkedSequenceOperation->SequenceChangeNetworked(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNetworkedSequenceOperation", "m_bSequenceChangeNetworked", false, value);
}
bool GCNetworkedSequenceOperation::GetDiscontinuity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNetworkedSequenceOperation->Discontinuity(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CNetworkedSequenceOperation", "m_bDiscontinuity");
}
void GCNetworkedSequenceOperation::SetDiscontinuity(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNetworkedSequenceOperation->Discontinuity(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNetworkedSequenceOperation", "m_bDiscontinuity", false, value);
}
float GCNetworkedSequenceOperation::GetPrevCycleFromDiscontinuity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNetworkedSequenceOperation->PrevCycleFromDiscontinuity(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CNetworkedSequenceOperation", "m_flPrevCycleFromDiscontinuity");
}
void GCNetworkedSequenceOperation::SetPrevCycleFromDiscontinuity(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNetworkedSequenceOperation->PrevCycleFromDiscontinuity(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNetworkedSequenceOperation", "m_flPrevCycleFromDiscontinuity", false, value);
}
float GCNetworkedSequenceOperation::GetPrevCycleForAnimEventDetection() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNetworkedSequenceOperation->PrevCycleForAnimEventDetection(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CNetworkedSequenceOperation", "m_flPrevCycleForAnimEventDetection");
}
void GCNetworkedSequenceOperation::SetPrevCycleForAnimEventDetection(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNetworkedSequenceOperation->PrevCycleForAnimEventDetection(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNetworkedSequenceOperation", "m_flPrevCycleForAnimEventDetection", false, value);
}
void* GCNetworkedSequenceOperation::GetPtr() {
    return m_ptr;
}
std::string GCNetworkedSequenceOperation::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCNetworkedSequenceOperation::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCNetworkedSequenceOperation(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCNetworkedSequenceOperation>("CNetworkedSequenceOperation")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("PrevCycle", &GCNetworkedSequenceOperation::GetPrevCycle, &GCNetworkedSequenceOperation::SetPrevCycle)
        .addProperty("Cycle", &GCNetworkedSequenceOperation::GetCycle, &GCNetworkedSequenceOperation::SetCycle)
        .addProperty("Weight", &GCNetworkedSequenceOperation::GetWeight, &GCNetworkedSequenceOperation::SetWeight)
        .addProperty("SequenceChangeNetworked", &GCNetworkedSequenceOperation::GetSequenceChangeNetworked, &GCNetworkedSequenceOperation::SetSequenceChangeNetworked)
        .addProperty("Discontinuity", &GCNetworkedSequenceOperation::GetDiscontinuity, &GCNetworkedSequenceOperation::SetDiscontinuity)
        .addProperty("PrevCycleFromDiscontinuity", &GCNetworkedSequenceOperation::GetPrevCycleFromDiscontinuity, &GCNetworkedSequenceOperation::SetPrevCycleFromDiscontinuity)
        .addProperty("PrevCycleForAnimEventDetection", &GCNetworkedSequenceOperation::GetPrevCycleForAnimEventDetection, &GCNetworkedSequenceOperation::SetPrevCycleForAnimEventDetection)
        .addFunction("ToPtr", &GCNetworkedSequenceOperation::ToPtr)
        .addFunction("IsValid", &GCNetworkedSequenceOperation::IsValid)
        .endClass();
}
GCPointWorldText::GCPointWorldText(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPointWorldText::GCPointWorldText(void *ptr) {
    m_ptr = ptr;
}
std::string GCPointWorldText::GetMessageText() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointWorldText->MessageText(ptr=%p)", m_ptr));
    return GetSchemaValuePtr<char>(m_ptr, "CPointWorldText", "m_messageText");
}
void GCPointWorldText::SetMessageText(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointWorldText->MessageText(ptr=%p)", m_ptr));
    WriteSchemaPtrValue(m_ptr, "CPointWorldText", "m_messageText", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 512);
}
std::string GCPointWorldText::GetFontName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointWorldText->FontName(ptr=%p)", m_ptr));
    return GetSchemaValuePtr<char>(m_ptr, "CPointWorldText", "m_FontName");
}
void GCPointWorldText::SetFontName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointWorldText->FontName(ptr=%p)", m_ptr));
    WriteSchemaPtrValue(m_ptr, "CPointWorldText", "m_FontName", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 64);
}
bool GCPointWorldText::GetEnabled() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointWorldText->Enabled(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPointWorldText", "m_bEnabled");
}
void GCPointWorldText::SetEnabled(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointWorldText->Enabled(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointWorldText", "m_bEnabled", false, value);
}
bool GCPointWorldText::GetFullbright() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointWorldText->Fullbright(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPointWorldText", "m_bFullbright");
}
void GCPointWorldText::SetFullbright(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointWorldText->Fullbright(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointWorldText", "m_bFullbright", false, value);
}
float GCPointWorldText::GetWorldUnitsPerPx() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointWorldText->WorldUnitsPerPx(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPointWorldText", "m_flWorldUnitsPerPx");
}
void GCPointWorldText::SetWorldUnitsPerPx(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointWorldText->WorldUnitsPerPx(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointWorldText", "m_flWorldUnitsPerPx", false, value);
}
float GCPointWorldText::GetFontSize() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointWorldText->FontSize(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPointWorldText", "m_flFontSize");
}
void GCPointWorldText::SetFontSize(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointWorldText->FontSize(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointWorldText", "m_flFontSize", false, value);
}
float GCPointWorldText::GetDepthOffset() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointWorldText->DepthOffset(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPointWorldText", "m_flDepthOffset");
}
void GCPointWorldText::SetDepthOffset(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointWorldText->DepthOffset(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointWorldText", "m_flDepthOffset", false, value);
}
Color GCPointWorldText::GetColor() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointWorldText->Color(ptr=%p)", m_ptr));
    return GetSchemaValue<Color>(m_ptr, "CPointWorldText", "m_Color");
}
void GCPointWorldText::SetColor(Color value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointWorldText->Color(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointWorldText", "m_Color", false, value);
}
uint64_t GCPointWorldText::GetJustifyHorizontal() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointWorldText->JustifyHorizontal(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CPointWorldText", "m_nJustifyHorizontal");
}
void GCPointWorldText::SetJustifyHorizontal(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointWorldText->JustifyHorizontal(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointWorldText", "m_nJustifyHorizontal", false, value);
}
uint64_t GCPointWorldText::GetJustifyVertical() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointWorldText->JustifyVertical(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CPointWorldText", "m_nJustifyVertical");
}
void GCPointWorldText::SetJustifyVertical(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointWorldText->JustifyVertical(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointWorldText", "m_nJustifyVertical", false, value);
}
uint64_t GCPointWorldText::GetReorientMode() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointWorldText->ReorientMode(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CPointWorldText", "m_nReorientMode");
}
void GCPointWorldText::SetReorientMode(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointWorldText->ReorientMode(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointWorldText", "m_nReorientMode", false, value);
}
void* GCPointWorldText::GetPtr() {
    return m_ptr;
}
std::string GCPointWorldText::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPointWorldText::IsValid() {
    return (m_ptr != nullptr);
}
GCModelPointEntity GCPointWorldText::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPointWorldText::GetParent(ptr=%p)", m_ptr));
    GCModelPointEntity value(m_ptr);
    return value;
}
void GCPointWorldText::SetParent(GCModelPointEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPointWorldText::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCPointWorldText(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPointWorldText>("CPointWorldText")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("MessageText", &GCPointWorldText::GetMessageText, &GCPointWorldText::SetMessageText)
        .addProperty("FontName", &GCPointWorldText::GetFontName, &GCPointWorldText::SetFontName)
        .addProperty("Enabled", &GCPointWorldText::GetEnabled, &GCPointWorldText::SetEnabled)
        .addProperty("Fullbright", &GCPointWorldText::GetFullbright, &GCPointWorldText::SetFullbright)
        .addProperty("WorldUnitsPerPx", &GCPointWorldText::GetWorldUnitsPerPx, &GCPointWorldText::SetWorldUnitsPerPx)
        .addProperty("FontSize", &GCPointWorldText::GetFontSize, &GCPointWorldText::SetFontSize)
        .addProperty("DepthOffset", &GCPointWorldText::GetDepthOffset, &GCPointWorldText::SetDepthOffset)
        .addProperty("Color", &GCPointWorldText::GetColor, &GCPointWorldText::SetColor)
        .addProperty("JustifyHorizontal", &GCPointWorldText::GetJustifyHorizontal, &GCPointWorldText::SetJustifyHorizontal)
        .addProperty("JustifyVertical", &GCPointWorldText::GetJustifyVertical, &GCPointWorldText::SetJustifyVertical)
        .addProperty("ReorientMode", &GCPointWorldText::GetReorientMode, &GCPointWorldText::SetReorientMode)
        .addProperty("Parent", &GCPointWorldText::GetParent, &GCPointWorldText::SetParent)
        .addFunction("ToPtr", &GCPointWorldText::ToPtr)
        .addFunction("IsValid", &GCPointWorldText::IsValid)
        .endClass();
}
GCSoundAreaEntityOrientedBox::GCSoundAreaEntityOrientedBox(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCSoundAreaEntityOrientedBox::GCSoundAreaEntityOrientedBox(void *ptr) {
    m_ptr = ptr;
}
Vector GCSoundAreaEntityOrientedBox::GetMin() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSoundAreaEntityOrientedBox->Min(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CSoundAreaEntityOrientedBox", "m_vMin");
}
void GCSoundAreaEntityOrientedBox::SetMin(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSoundAreaEntityOrientedBox->Min(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSoundAreaEntityOrientedBox", "m_vMin", false, value);
}
Vector GCSoundAreaEntityOrientedBox::GetMax() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSoundAreaEntityOrientedBox->Max(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CSoundAreaEntityOrientedBox", "m_vMax");
}
void GCSoundAreaEntityOrientedBox::SetMax(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSoundAreaEntityOrientedBox->Max(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSoundAreaEntityOrientedBox", "m_vMax", false, value);
}
void* GCSoundAreaEntityOrientedBox::GetPtr() {
    return m_ptr;
}
std::string GCSoundAreaEntityOrientedBox::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCSoundAreaEntityOrientedBox::IsValid() {
    return (m_ptr != nullptr);
}
GCSoundAreaEntityBase GCSoundAreaEntityOrientedBox::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSoundAreaEntityOrientedBox::GetParent(ptr=%p)", m_ptr));
    GCSoundAreaEntityBase value(m_ptr);
    return value;
}
void GCSoundAreaEntityOrientedBox::SetParent(GCSoundAreaEntityBase value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSoundAreaEntityOrientedBox::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCSoundAreaEntityOrientedBox(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCSoundAreaEntityOrientedBox>("CSoundAreaEntityOrientedBox")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Min", &GCSoundAreaEntityOrientedBox::GetMin, &GCSoundAreaEntityOrientedBox::SetMin)
        .addProperty("Max", &GCSoundAreaEntityOrientedBox::GetMax, &GCSoundAreaEntityOrientedBox::SetMax)
        .addProperty("Parent", &GCSoundAreaEntityOrientedBox::GetParent, &GCSoundAreaEntityOrientedBox::SetParent)
        .addFunction("ToPtr", &GCSoundAreaEntityOrientedBox::ToPtr)
        .addFunction("IsValid", &GCSoundAreaEntityOrientedBox::IsValid)
        .endClass();
}
GCTriggerPhysics::GCTriggerPhysics(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCTriggerPhysics::GCTriggerPhysics(void *ptr) {
    m_ptr = ptr;
}
float GCTriggerPhysics::GetGravityScale() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerPhysics->GravityScale(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CTriggerPhysics", "m_gravityScale");
}
void GCTriggerPhysics::SetGravityScale(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerPhysics->GravityScale(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerPhysics", "m_gravityScale", false, value);
}
float GCTriggerPhysics::GetLinearLimit() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerPhysics->LinearLimit(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CTriggerPhysics", "m_linearLimit");
}
void GCTriggerPhysics::SetLinearLimit(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerPhysics->LinearLimit(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerPhysics", "m_linearLimit", false, value);
}
float GCTriggerPhysics::GetLinearDamping() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerPhysics->LinearDamping(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CTriggerPhysics", "m_linearDamping");
}
void GCTriggerPhysics::SetLinearDamping(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerPhysics->LinearDamping(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerPhysics", "m_linearDamping", false, value);
}
float GCTriggerPhysics::GetAngularLimit() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerPhysics->AngularLimit(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CTriggerPhysics", "m_angularLimit");
}
void GCTriggerPhysics::SetAngularLimit(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerPhysics->AngularLimit(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerPhysics", "m_angularLimit", false, value);
}
float GCTriggerPhysics::GetAngularDamping() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerPhysics->AngularDamping(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CTriggerPhysics", "m_angularDamping");
}
void GCTriggerPhysics::SetAngularDamping(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerPhysics->AngularDamping(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerPhysics", "m_angularDamping", false, value);
}
float GCTriggerPhysics::GetLinearForce() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerPhysics->LinearForce(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CTriggerPhysics", "m_linearForce");
}
void GCTriggerPhysics::SetLinearForce(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerPhysics->LinearForce(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerPhysics", "m_linearForce", false, value);
}
float GCTriggerPhysics::GetFrequency() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerPhysics->Frequency(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CTriggerPhysics", "m_flFrequency");
}
void GCTriggerPhysics::SetFrequency(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerPhysics->Frequency(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerPhysics", "m_flFrequency", false, value);
}
float GCTriggerPhysics::GetDampingRatio() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerPhysics->DampingRatio(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CTriggerPhysics", "m_flDampingRatio");
}
void GCTriggerPhysics::SetDampingRatio(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerPhysics->DampingRatio(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerPhysics", "m_flDampingRatio", false, value);
}
Vector GCTriggerPhysics::GetLinearForcePointAt() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerPhysics->LinearForcePointAt(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CTriggerPhysics", "m_vecLinearForcePointAt");
}
void GCTriggerPhysics::SetLinearForcePointAt(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerPhysics->LinearForcePointAt(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerPhysics", "m_vecLinearForcePointAt", false, value);
}
bool GCTriggerPhysics::GetCollapseToForcePoint() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerPhysics->CollapseToForcePoint(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CTriggerPhysics", "m_bCollapseToForcePoint");
}
void GCTriggerPhysics::SetCollapseToForcePoint(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerPhysics->CollapseToForcePoint(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerPhysics", "m_bCollapseToForcePoint", false, value);
}
Vector GCTriggerPhysics::GetLinearForcePointAtWorld() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerPhysics->LinearForcePointAtWorld(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CTriggerPhysics", "m_vecLinearForcePointAtWorld");
}
void GCTriggerPhysics::SetLinearForcePointAtWorld(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerPhysics->LinearForcePointAtWorld(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerPhysics", "m_vecLinearForcePointAtWorld", false, value);
}
Vector GCTriggerPhysics::GetLinearForceDirection() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerPhysics->LinearForceDirection(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CTriggerPhysics", "m_vecLinearForceDirection");
}
void GCTriggerPhysics::SetLinearForceDirection(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerPhysics->LinearForceDirection(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerPhysics", "m_vecLinearForceDirection", false, value);
}
bool GCTriggerPhysics::GetConvertToDebrisWhenPossible() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerPhysics->ConvertToDebrisWhenPossible(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CTriggerPhysics", "m_bConvertToDebrisWhenPossible");
}
void GCTriggerPhysics::SetConvertToDebrisWhenPossible(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerPhysics->ConvertToDebrisWhenPossible(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTriggerPhysics", "m_bConvertToDebrisWhenPossible", false, value);
}
void* GCTriggerPhysics::GetPtr() {
    return m_ptr;
}
std::string GCTriggerPhysics::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCTriggerPhysics::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseTrigger GCTriggerPhysics::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTriggerPhysics::GetParent(ptr=%p)", m_ptr));
    GCBaseTrigger value(m_ptr);
    return value;
}
void GCTriggerPhysics::SetParent(GCBaseTrigger value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTriggerPhysics::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCTriggerPhysics(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCTriggerPhysics>("CTriggerPhysics")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("GravityScale", &GCTriggerPhysics::GetGravityScale, &GCTriggerPhysics::SetGravityScale)
        .addProperty("LinearLimit", &GCTriggerPhysics::GetLinearLimit, &GCTriggerPhysics::SetLinearLimit)
        .addProperty("LinearDamping", &GCTriggerPhysics::GetLinearDamping, &GCTriggerPhysics::SetLinearDamping)
        .addProperty("AngularLimit", &GCTriggerPhysics::GetAngularLimit, &GCTriggerPhysics::SetAngularLimit)
        .addProperty("AngularDamping", &GCTriggerPhysics::GetAngularDamping, &GCTriggerPhysics::SetAngularDamping)
        .addProperty("LinearForce", &GCTriggerPhysics::GetLinearForce, &GCTriggerPhysics::SetLinearForce)
        .addProperty("Frequency", &GCTriggerPhysics::GetFrequency, &GCTriggerPhysics::SetFrequency)
        .addProperty("DampingRatio", &GCTriggerPhysics::GetDampingRatio, &GCTriggerPhysics::SetDampingRatio)
        .addProperty("LinearForcePointAt", &GCTriggerPhysics::GetLinearForcePointAt, &GCTriggerPhysics::SetLinearForcePointAt)
        .addProperty("CollapseToForcePoint", &GCTriggerPhysics::GetCollapseToForcePoint, &GCTriggerPhysics::SetCollapseToForcePoint)
        .addProperty("LinearForcePointAtWorld", &GCTriggerPhysics::GetLinearForcePointAtWorld, &GCTriggerPhysics::SetLinearForcePointAtWorld)
        .addProperty("LinearForceDirection", &GCTriggerPhysics::GetLinearForceDirection, &GCTriggerPhysics::SetLinearForceDirection)
        .addProperty("ConvertToDebrisWhenPossible", &GCTriggerPhysics::GetConvertToDebrisWhenPossible, &GCTriggerPhysics::SetConvertToDebrisWhenPossible)
        .addProperty("Parent", &GCTriggerPhysics::GetParent, &GCTriggerPhysics::SetParent)
        .addFunction("ToPtr", &GCTriggerPhysics::ToPtr)
        .addFunction("IsValid", &GCTriggerPhysics::IsValid)
        .endClass();
}
GEntityRenderAttribute_t::GEntityRenderAttribute_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GEntityRenderAttribute_t::GEntityRenderAttribute_t(void *ptr) {
    m_ptr = ptr;
}
uint32_t GEntityRenderAttribute_t::GetID() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: EntityRenderAttribute_t->ID(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlStringToken>(m_ptr, "EntityRenderAttribute_t", "m_ID").m_nHashCode;
}
void GEntityRenderAttribute_t::SetID(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: EntityRenderAttribute_t->ID(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "EntityRenderAttribute_t", "m_ID", true, CUtlStringToken(value));
}
Vector4D GEntityRenderAttribute_t::GetValues() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: EntityRenderAttribute_t->Values(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector4D>(m_ptr, "EntityRenderAttribute_t", "m_Values");
}
void GEntityRenderAttribute_t::SetValues(Vector4D value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: EntityRenderAttribute_t->Values(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "EntityRenderAttribute_t", "m_Values", true, value);
}
void* GEntityRenderAttribute_t::GetPtr() {
    return m_ptr;
}
std::string GEntityRenderAttribute_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GEntityRenderAttribute_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassEntityRenderAttribute_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GEntityRenderAttribute_t>("EntityRenderAttribute_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("ID", &GEntityRenderAttribute_t::GetID, &GEntityRenderAttribute_t::SetID)
        .addProperty("Values", &GEntityRenderAttribute_t::GetValues, &GEntityRenderAttribute_t::SetValues)
        .addFunction("ToPtr", &GEntityRenderAttribute_t::ToPtr)
        .addFunction("IsValid", &GEntityRenderAttribute_t::IsValid)
        .endClass();
}
GCPointBroadcastClientCommand::GCPointBroadcastClientCommand(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPointBroadcastClientCommand::GCPointBroadcastClientCommand(void *ptr) {
    m_ptr = ptr;
}
void* GCPointBroadcastClientCommand::GetPtr() {
    return m_ptr;
}
std::string GCPointBroadcastClientCommand::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPointBroadcastClientCommand::IsValid() {
    return (m_ptr != nullptr);
}
GCPointEntity GCPointBroadcastClientCommand::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPointBroadcastClientCommand::GetParent(ptr=%p)", m_ptr));
    GCPointEntity value(m_ptr);
    return value;
}
void GCPointBroadcastClientCommand::SetParent(GCPointEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPointBroadcastClientCommand::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCPointBroadcastClientCommand(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPointBroadcastClientCommand>("CPointBroadcastClientCommand")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCPointBroadcastClientCommand::GetParent, &GCPointBroadcastClientCommand::SetParent)
        .addFunction("ToPtr", &GCPointBroadcastClientCommand::ToPtr)
        .addFunction("IsValid", &GCPointBroadcastClientCommand::IsValid)
        .endClass();
}
GCFuncShatterglass::GCFuncShatterglass(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCFuncShatterglass::GCFuncShatterglass(void *ptr) {
    m_ptr = ptr;
}
std::vector<uint32> GCFuncShatterglass::GetShatterGlassShards() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncShatterglass->ShatterGlassShards(ptr=%p)", m_ptr));
    CUtlVector<uint32>* vec = GetSchemaValue<CUtlVector<uint32>*>(m_ptr, "CFuncShatterglass", "m_vecShatterGlassShards"); std::vector<uint32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCFuncShatterglass::SetShatterGlassShards(std::vector<uint32> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncShatterglass->ShatterGlassShards(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<uint32>(m_ptr, "CFuncShatterglass", "m_vecShatterGlassShards", false, value);
}
Vector2D GCFuncShatterglass::GetPanelSize() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncShatterglass->PanelSize(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector2D>(m_ptr, "CFuncShatterglass", "m_PanelSize");
}
void GCFuncShatterglass::SetPanelSize(Vector2D value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncShatterglass->PanelSize(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_PanelSize", false, value);
}
Vector GCFuncShatterglass::GetPanelNormalWs() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncShatterglass->PanelNormalWs(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CFuncShatterglass", "m_vecPanelNormalWs");
}
void GCFuncShatterglass::SetPanelNormalWs(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncShatterglass->PanelNormalWs(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_vecPanelNormalWs", false, value);
}
int32_t GCFuncShatterglass::GetNumShardsEverCreated() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncShatterglass->NumShardsEverCreated(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CFuncShatterglass", "m_nNumShardsEverCreated");
}
void GCFuncShatterglass::SetNumShardsEverCreated(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncShatterglass->NumShardsEverCreated(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_nNumShardsEverCreated", false, value);
}
float GCFuncShatterglass::GetLastShatterSoundEmitTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncShatterglass->LastShatterSoundEmitTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CFuncShatterglass", "m_flLastShatterSoundEmitTime");
}
void GCFuncShatterglass::SetLastShatterSoundEmitTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncShatterglass->LastShatterSoundEmitTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_flLastShatterSoundEmitTime", false, value);
}
float GCFuncShatterglass::GetLastCleanupTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncShatterglass->LastCleanupTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CFuncShatterglass", "m_flLastCleanupTime");
}
void GCFuncShatterglass::SetLastCleanupTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncShatterglass->LastCleanupTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_flLastCleanupTime", false, value);
}
float GCFuncShatterglass::GetInitAtTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncShatterglass->InitAtTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CFuncShatterglass", "m_flInitAtTime");
}
void GCFuncShatterglass::SetInitAtTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncShatterglass->InitAtTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_flInitAtTime", false, value);
}
float GCFuncShatterglass::GetGlassThickness() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncShatterglass->GlassThickness(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CFuncShatterglass", "m_flGlassThickness");
}
void GCFuncShatterglass::SetGlassThickness(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncShatterglass->GlassThickness(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_flGlassThickness", false, value);
}
float GCFuncShatterglass::GetSpawnInvulnerability() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncShatterglass->SpawnInvulnerability(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CFuncShatterglass", "m_flSpawnInvulnerability");
}
void GCFuncShatterglass::SetSpawnInvulnerability(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncShatterglass->SpawnInvulnerability(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_flSpawnInvulnerability", false, value);
}
bool GCFuncShatterglass::GetBreakSilent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncShatterglass->BreakSilent(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CFuncShatterglass", "m_bBreakSilent");
}
void GCFuncShatterglass::SetBreakSilent(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncShatterglass->BreakSilent(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_bBreakSilent", false, value);
}
bool GCFuncShatterglass::GetBreakShardless() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncShatterglass->BreakShardless(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CFuncShatterglass", "m_bBreakShardless");
}
void GCFuncShatterglass::SetBreakShardless(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncShatterglass->BreakShardless(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_bBreakShardless", false, value);
}
bool GCFuncShatterglass::GetBroken() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncShatterglass->Broken(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CFuncShatterglass", "m_bBroken");
}
void GCFuncShatterglass::SetBroken(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncShatterglass->Broken(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_bBroken", false, value);
}
bool GCFuncShatterglass::GetHasRateLimitedShards() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncShatterglass->HasRateLimitedShards(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CFuncShatterglass", "m_bHasRateLimitedShards");
}
void GCFuncShatterglass::SetHasRateLimitedShards(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncShatterglass->HasRateLimitedShards(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_bHasRateLimitedShards", false, value);
}
bool GCFuncShatterglass::GetGlassNavIgnore() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncShatterglass->GlassNavIgnore(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CFuncShatterglass", "m_bGlassNavIgnore");
}
void GCFuncShatterglass::SetGlassNavIgnore(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncShatterglass->GlassNavIgnore(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_bGlassNavIgnore", false, value);
}
bool GCFuncShatterglass::GetGlassInFrame() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncShatterglass->GlassInFrame(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CFuncShatterglass", "m_bGlassInFrame");
}
void GCFuncShatterglass::SetGlassInFrame(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncShatterglass->GlassInFrame(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_bGlassInFrame", false, value);
}
bool GCFuncShatterglass::GetStartBroken() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncShatterglass->StartBroken(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CFuncShatterglass", "m_bStartBroken");
}
void GCFuncShatterglass::SetStartBroken(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncShatterglass->StartBroken(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_bStartBroken", false, value);
}
uint32_t GCFuncShatterglass::GetInitialDamageType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncShatterglass->InitialDamageType(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CFuncShatterglass", "m_iInitialDamageType");
}
void GCFuncShatterglass::SetInitialDamageType(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncShatterglass->InitialDamageType(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_iInitialDamageType", false, value);
}
std::string GCFuncShatterglass::GetDamagePositioningEntityName01() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncShatterglass->DamagePositioningEntityName01(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncShatterglass", "m_szDamagePositioningEntityName01").String();
}
void GCFuncShatterglass::SetDamagePositioningEntityName01(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncShatterglass->DamagePositioningEntityName01(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_szDamagePositioningEntityName01", false, CUtlSymbolLarge(value.c_str()));
}
std::string GCFuncShatterglass::GetDamagePositioningEntityName02() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncShatterglass->DamagePositioningEntityName02(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncShatterglass", "m_szDamagePositioningEntityName02").String();
}
void GCFuncShatterglass::SetDamagePositioningEntityName02(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncShatterglass->DamagePositioningEntityName02(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_szDamagePositioningEntityName02", false, CUtlSymbolLarge(value.c_str()));
}
std::string GCFuncShatterglass::GetDamagePositioningEntityName03() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncShatterglass->DamagePositioningEntityName03(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncShatterglass", "m_szDamagePositioningEntityName03").String();
}
void GCFuncShatterglass::SetDamagePositioningEntityName03(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncShatterglass->DamagePositioningEntityName03(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_szDamagePositioningEntityName03", false, CUtlSymbolLarge(value.c_str()));
}
std::string GCFuncShatterglass::GetDamagePositioningEntityName04() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncShatterglass->DamagePositioningEntityName04(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncShatterglass", "m_szDamagePositioningEntityName04").String();
}
void GCFuncShatterglass::SetDamagePositioningEntityName04(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncShatterglass->DamagePositioningEntityName04(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_szDamagePositioningEntityName04", false, CUtlSymbolLarge(value.c_str()));
}
std::vector<Vector> GCFuncShatterglass::GetInitialDamagePositions() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncShatterglass->InitialDamagePositions(ptr=%p)", m_ptr));
    CUtlVector<Vector>* vec = GetSchemaValue<CUtlVector<Vector>*>(m_ptr, "CFuncShatterglass", "m_vInitialDamagePositions"); std::vector<Vector> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCFuncShatterglass::SetInitialDamagePositions(std::vector<Vector> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncShatterglass->InitialDamagePositions(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<Vector>(m_ptr, "CFuncShatterglass", "m_vInitialDamagePositions", false, value);
}
std::vector<Vector> GCFuncShatterglass::GetExtraDamagePositions() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncShatterglass->ExtraDamagePositions(ptr=%p)", m_ptr));
    CUtlVector<Vector>* vec = GetSchemaValue<CUtlVector<Vector>*>(m_ptr, "CFuncShatterglass", "m_vExtraDamagePositions"); std::vector<Vector> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCFuncShatterglass::SetExtraDamagePositions(std::vector<Vector> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncShatterglass->ExtraDamagePositions(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<Vector>(m_ptr, "CFuncShatterglass", "m_vExtraDamagePositions", false, value);
}
GCEntityIOOutput GCFuncShatterglass::GetOnBroken() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncShatterglass->OnBroken(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CFuncShatterglass", "m_OnBroken"));
    return value;
}
void GCFuncShatterglass::SetOnBroken(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncShatterglass->OnBroken(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnBroken' is not possible.\n");
}
uint32_t GCFuncShatterglass::GetSurfaceType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncShatterglass->SurfaceType(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CFuncShatterglass", "m_iSurfaceType");
}
void GCFuncShatterglass::SetSurfaceType(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncShatterglass->SurfaceType(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncShatterglass", "m_iSurfaceType", false, value);
}
void* GCFuncShatterglass::GetPtr() {
    return m_ptr;
}
std::string GCFuncShatterglass::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCFuncShatterglass::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseModelEntity GCFuncShatterglass::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFuncShatterglass::GetParent(ptr=%p)", m_ptr));
    GCBaseModelEntity value(m_ptr);
    return value;
}
void GCFuncShatterglass::SetParent(GCBaseModelEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFuncShatterglass::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCFuncShatterglass(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCFuncShatterglass>("CFuncShatterglass")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("ShatterGlassShards", &GCFuncShatterglass::GetShatterGlassShards, &GCFuncShatterglass::SetShatterGlassShards)
        .addProperty("PanelSize", &GCFuncShatterglass::GetPanelSize, &GCFuncShatterglass::SetPanelSize)
        .addProperty("PanelNormalWs", &GCFuncShatterglass::GetPanelNormalWs, &GCFuncShatterglass::SetPanelNormalWs)
        .addProperty("NumShardsEverCreated", &GCFuncShatterglass::GetNumShardsEverCreated, &GCFuncShatterglass::SetNumShardsEverCreated)
        .addProperty("LastShatterSoundEmitTime", &GCFuncShatterglass::GetLastShatterSoundEmitTime, &GCFuncShatterglass::SetLastShatterSoundEmitTime)
        .addProperty("LastCleanupTime", &GCFuncShatterglass::GetLastCleanupTime, &GCFuncShatterglass::SetLastCleanupTime)
        .addProperty("InitAtTime", &GCFuncShatterglass::GetInitAtTime, &GCFuncShatterglass::SetInitAtTime)
        .addProperty("GlassThickness", &GCFuncShatterglass::GetGlassThickness, &GCFuncShatterglass::SetGlassThickness)
        .addProperty("SpawnInvulnerability", &GCFuncShatterglass::GetSpawnInvulnerability, &GCFuncShatterglass::SetSpawnInvulnerability)
        .addProperty("BreakSilent", &GCFuncShatterglass::GetBreakSilent, &GCFuncShatterglass::SetBreakSilent)
        .addProperty("BreakShardless", &GCFuncShatterglass::GetBreakShardless, &GCFuncShatterglass::SetBreakShardless)
        .addProperty("Broken", &GCFuncShatterglass::GetBroken, &GCFuncShatterglass::SetBroken)
        .addProperty("HasRateLimitedShards", &GCFuncShatterglass::GetHasRateLimitedShards, &GCFuncShatterglass::SetHasRateLimitedShards)
        .addProperty("GlassNavIgnore", &GCFuncShatterglass::GetGlassNavIgnore, &GCFuncShatterglass::SetGlassNavIgnore)
        .addProperty("GlassInFrame", &GCFuncShatterglass::GetGlassInFrame, &GCFuncShatterglass::SetGlassInFrame)
        .addProperty("StartBroken", &GCFuncShatterglass::GetStartBroken, &GCFuncShatterglass::SetStartBroken)
        .addProperty("InitialDamageType", &GCFuncShatterglass::GetInitialDamageType, &GCFuncShatterglass::SetInitialDamageType)
        .addProperty("DamagePositioningEntityName01", &GCFuncShatterglass::GetDamagePositioningEntityName01, &GCFuncShatterglass::SetDamagePositioningEntityName01)
        .addProperty("DamagePositioningEntityName02", &GCFuncShatterglass::GetDamagePositioningEntityName02, &GCFuncShatterglass::SetDamagePositioningEntityName02)
        .addProperty("DamagePositioningEntityName03", &GCFuncShatterglass::GetDamagePositioningEntityName03, &GCFuncShatterglass::SetDamagePositioningEntityName03)
        .addProperty("DamagePositioningEntityName04", &GCFuncShatterglass::GetDamagePositioningEntityName04, &GCFuncShatterglass::SetDamagePositioningEntityName04)
        .addProperty("InitialDamagePositions", &GCFuncShatterglass::GetInitialDamagePositions, &GCFuncShatterglass::SetInitialDamagePositions)
        .addProperty("ExtraDamagePositions", &GCFuncShatterglass::GetExtraDamagePositions, &GCFuncShatterglass::SetExtraDamagePositions)
        .addProperty("OnBroken", &GCFuncShatterglass::GetOnBroken, &GCFuncShatterglass::SetOnBroken)
        .addProperty("SurfaceType", &GCFuncShatterglass::GetSurfaceType, &GCFuncShatterglass::SetSurfaceType)
        .addProperty("Parent", &GCFuncShatterglass::GetParent, &GCFuncShatterglass::SetParent)
        .addFunction("ToPtr", &GCFuncShatterglass::ToPtr)
        .addFunction("IsValid", &GCFuncShatterglass::IsValid)
        .endClass();
}
GCRotButton::GCRotButton(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCRotButton::GCRotButton(void *ptr) {
    m_ptr = ptr;
}
void* GCRotButton::GetPtr() {
    return m_ptr;
}
std::string GCRotButton::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCRotButton::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseButton GCRotButton::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CRotButton::GetParent(ptr=%p)", m_ptr));
    GCBaseButton value(m_ptr);
    return value;
}
void GCRotButton::SetParent(GCBaseButton value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CRotButton::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCRotButton(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCRotButton>("CRotButton")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCRotButton::GetParent, &GCRotButton::SetParent)
        .addFunction("ToPtr", &GCRotButton::ToPtr)
        .addFunction("IsValid", &GCRotButton::IsValid)
        .endClass();
}
GCSoundEventSphereEntity::GCSoundEventSphereEntity(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCSoundEventSphereEntity::GCSoundEventSphereEntity(void *ptr) {
    m_ptr = ptr;
}
float GCSoundEventSphereEntity::GetRadius() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSoundEventSphereEntity->Radius(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CSoundEventSphereEntity", "m_flRadius");
}
void GCSoundEventSphereEntity::SetRadius(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSoundEventSphereEntity->Radius(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSoundEventSphereEntity", "m_flRadius", false, value);
}
void* GCSoundEventSphereEntity::GetPtr() {
    return m_ptr;
}
std::string GCSoundEventSphereEntity::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCSoundEventSphereEntity::IsValid() {
    return (m_ptr != nullptr);
}
GCSoundEventEntity GCSoundEventSphereEntity::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSoundEventSphereEntity::GetParent(ptr=%p)", m_ptr));
    GCSoundEventEntity value(m_ptr);
    return value;
}
void GCSoundEventSphereEntity::SetParent(GCSoundEventEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSoundEventSphereEntity::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCSoundEventSphereEntity(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCSoundEventSphereEntity>("CSoundEventSphereEntity")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Radius", &GCSoundEventSphereEntity::GetRadius, &GCSoundEventSphereEntity::SetRadius)
        .addProperty("Parent", &GCSoundEventSphereEntity::GetParent, &GCSoundEventSphereEntity::SetParent)
        .addFunction("ToPtr", &GCSoundEventSphereEntity::ToPtr)
        .addFunction("IsValid", &GCSoundEventSphereEntity::IsValid)
        .endClass();
}
GCWeaponHKP2000::GCWeaponHKP2000(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCWeaponHKP2000::GCWeaponHKP2000(void *ptr) {
    m_ptr = ptr;
}
void* GCWeaponHKP2000::GetPtr() {
    return m_ptr;
}
std::string GCWeaponHKP2000::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCWeaponHKP2000::IsValid() {
    return (m_ptr != nullptr);
}
GCCSWeaponBaseGun GCWeaponHKP2000::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponHKP2000::GetParent(ptr=%p)", m_ptr));
    GCCSWeaponBaseGun value(m_ptr);
    return value;
}
void GCWeaponHKP2000::SetParent(GCCSWeaponBaseGun value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponHKP2000::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCWeaponHKP2000(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCWeaponHKP2000>("CWeaponHKP2000")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCWeaponHKP2000::GetParent, &GCWeaponHKP2000::SetParent)
        .addFunction("ToPtr", &GCWeaponHKP2000::ToPtr)
        .addFunction("IsValid", &GCWeaponHKP2000::IsValid)
        .endClass();
}
GCPlantedC4::GCPlantedC4(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPlantedC4::GCPlantedC4(void *ptr) {
    m_ptr = ptr;
}
bool GCPlantedC4::GetBombTicking() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPlantedC4->BombTicking(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPlantedC4", "m_bBombTicking");
}
void GCPlantedC4::SetBombTicking(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPlantedC4->BombTicking(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPlantedC4", "m_bBombTicking", false, value);
}
float GCPlantedC4::GetC4Blow() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPlantedC4->C4Blow(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPlantedC4", "m_flC4Blow");
}
void GCPlantedC4::SetC4Blow(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPlantedC4->C4Blow(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPlantedC4", "m_flC4Blow", false, value);
}
int32_t GCPlantedC4::GetBombSite() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPlantedC4->BombSite(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CPlantedC4", "m_nBombSite");
}
void GCPlantedC4::SetBombSite(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPlantedC4->BombSite(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPlantedC4", "m_nBombSite", false, value);
}
int32_t GCPlantedC4::GetSourceSoundscapeHash() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPlantedC4->SourceSoundscapeHash(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CPlantedC4", "m_nSourceSoundscapeHash");
}
void GCPlantedC4::SetSourceSoundscapeHash(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPlantedC4->SourceSoundscapeHash(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPlantedC4", "m_nSourceSoundscapeHash", false, value);
}
GCEntityIOOutput GCPlantedC4::GetOnBombDefused() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPlantedC4->OnBombDefused(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CPlantedC4", "m_OnBombDefused"));
    return value;
}
void GCPlantedC4::SetOnBombDefused(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPlantedC4->OnBombDefused(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnBombDefused' is not possible.\n");
}
GCEntityIOOutput GCPlantedC4::GetOnBombBeginDefuse() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPlantedC4->OnBombBeginDefuse(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CPlantedC4", "m_OnBombBeginDefuse"));
    return value;
}
void GCPlantedC4::SetOnBombBeginDefuse(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPlantedC4->OnBombBeginDefuse(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnBombBeginDefuse' is not possible.\n");
}
GCEntityIOOutput GCPlantedC4::GetOnBombDefuseAborted() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPlantedC4->OnBombDefuseAborted(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CPlantedC4", "m_OnBombDefuseAborted"));
    return value;
}
void GCPlantedC4::SetOnBombDefuseAborted(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPlantedC4->OnBombDefuseAborted(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnBombDefuseAborted' is not possible.\n");
}
bool GCPlantedC4::GetCannotBeDefused() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPlantedC4->CannotBeDefused(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPlantedC4", "m_bCannotBeDefused");
}
void GCPlantedC4::SetCannotBeDefused(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPlantedC4->CannotBeDefused(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPlantedC4", "m_bCannotBeDefused", false, value);
}
GEntitySpottedState_t GCPlantedC4::GetEntitySpottedState() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPlantedC4->EntitySpottedState(ptr=%p)", m_ptr));
    GEntitySpottedState_t value(GetSchemaPtr(m_ptr, "CPlantedC4", "m_entitySpottedState"));
    return value;
}
void GCPlantedC4::SetEntitySpottedState(GEntitySpottedState_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPlantedC4->EntitySpottedState(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'EntitySpottedState' is not possible.\n");
}
int32_t GCPlantedC4::GetSpotRules() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPlantedC4->SpotRules(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CPlantedC4", "m_nSpotRules");
}
void GCPlantedC4::SetSpotRules(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPlantedC4->SpotRules(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPlantedC4", "m_nSpotRules", false, value);
}
bool GCPlantedC4::GetTrainingPlacedByPlayer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPlantedC4->TrainingPlacedByPlayer(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPlantedC4", "m_bTrainingPlacedByPlayer");
}
void GCPlantedC4::SetTrainingPlacedByPlayer(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPlantedC4->TrainingPlacedByPlayer(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPlantedC4", "m_bTrainingPlacedByPlayer", false, value);
}
bool GCPlantedC4::GetHasExploded() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPlantedC4->HasExploded(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPlantedC4", "m_bHasExploded");
}
void GCPlantedC4::SetHasExploded(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPlantedC4->HasExploded(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPlantedC4", "m_bHasExploded", false, value);
}
float GCPlantedC4::GetTimerLength() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPlantedC4->TimerLength(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPlantedC4", "m_flTimerLength");
}
void GCPlantedC4::SetTimerLength(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPlantedC4->TimerLength(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPlantedC4", "m_flTimerLength", false, value);
}
bool GCPlantedC4::GetBeingDefused() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPlantedC4->BeingDefused(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPlantedC4", "m_bBeingDefused");
}
void GCPlantedC4::SetBeingDefused(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPlantedC4->BeingDefused(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPlantedC4", "m_bBeingDefused", false, value);
}
float GCPlantedC4::GetLastDefuseTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPlantedC4->LastDefuseTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPlantedC4", "m_fLastDefuseTime");
}
void GCPlantedC4::SetLastDefuseTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPlantedC4->LastDefuseTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPlantedC4", "m_fLastDefuseTime", false, value);
}
float GCPlantedC4::GetDefuseLength() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPlantedC4->DefuseLength(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPlantedC4", "m_flDefuseLength");
}
void GCPlantedC4::SetDefuseLength(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPlantedC4->DefuseLength(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPlantedC4", "m_flDefuseLength", false, value);
}
float GCPlantedC4::GetDefuseCountDown() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPlantedC4->DefuseCountDown(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPlantedC4", "m_flDefuseCountDown");
}
void GCPlantedC4::SetDefuseCountDown(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPlantedC4->DefuseCountDown(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPlantedC4", "m_flDefuseCountDown", false, value);
}
bool GCPlantedC4::GetBombDefused() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPlantedC4->BombDefused(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPlantedC4", "m_bBombDefused");
}
void GCPlantedC4::SetBombDefused(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPlantedC4->BombDefused(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPlantedC4", "m_bBombDefused", false, value);
}
GCCSPlayerPawn GCPlantedC4::GetBombDefuser() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPlantedC4->BombDefuser(ptr=%p)", m_ptr));
    GCCSPlayerPawn value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CPlantedC4", "m_hBombDefuser").Get()));
    return value;
}
void GCPlantedC4::SetBombDefuser(GCCSPlayerPawn value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPlantedC4->BombDefuser(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'BombDefuser' is not possible.\n");
}
GCBaseEntity GCPlantedC4::GetControlPanel() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPlantedC4->ControlPanel(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CPlantedC4", "m_hControlPanel").Get()));
    return value;
}
void GCPlantedC4::SetControlPanel(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPlantedC4->ControlPanel(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ControlPanel' is not possible.\n");
}
int32_t GCPlantedC4::GetProgressBarTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPlantedC4->ProgressBarTime(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CPlantedC4", "m_iProgressBarTime");
}
void GCPlantedC4::SetProgressBarTime(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPlantedC4->ProgressBarTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPlantedC4", "m_iProgressBarTime", false, value);
}
bool GCPlantedC4::GetVoiceAlertFired() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPlantedC4->VoiceAlertFired(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPlantedC4", "m_bVoiceAlertFired");
}
void GCPlantedC4::SetVoiceAlertFired(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPlantedC4->VoiceAlertFired(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPlantedC4", "m_bVoiceAlertFired", false, value);
}
std::vector<bool> GCPlantedC4::GetVoiceAlertPlayed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPlantedC4->VoiceAlertPlayed(ptr=%p,size=4)", m_ptr));
    bool* outValue = (bool*)GetSchemaPtr(m_ptr, "CPlantedC4", "m_bVoiceAlertPlayed"); std::vector<bool> ret; for(int i = 0; i < 4; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCPlantedC4::SetVoiceAlertPlayed(std::vector<bool> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPlantedC4->VoiceAlertPlayed(ptr=%p,size=4)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'VoiceAlertPlayed' is not possible.\n");
}
float GCPlantedC4::GetNextBotBeepTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPlantedC4->NextBotBeepTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPlantedC4", "m_flNextBotBeepTime");
}
void GCPlantedC4::SetNextBotBeepTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPlantedC4->NextBotBeepTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPlantedC4", "m_flNextBotBeepTime", false, value);
}
QAngle GCPlantedC4::GetCatchUpToPlayerEye() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPlantedC4->CatchUpToPlayerEye(ptr=%p)", m_ptr));
    return GetSchemaValue<QAngle>(m_ptr, "CPlantedC4", "m_angCatchUpToPlayerEye");
}
void GCPlantedC4::SetCatchUpToPlayerEye(QAngle value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPlantedC4->CatchUpToPlayerEye(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPlantedC4", "m_angCatchUpToPlayerEye", false, value);
}
float GCPlantedC4::GetLastSpinDetectionTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPlantedC4->LastSpinDetectionTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPlantedC4", "m_flLastSpinDetectionTime");
}
void GCPlantedC4::SetLastSpinDetectionTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPlantedC4->LastSpinDetectionTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPlantedC4", "m_flLastSpinDetectionTime", false, value);
}
void* GCPlantedC4::GetPtr() {
    return m_ptr;
}
std::string GCPlantedC4::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPlantedC4::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseAnimGraph GCPlantedC4::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPlantedC4::GetParent(ptr=%p)", m_ptr));
    GCBaseAnimGraph value(m_ptr);
    return value;
}
void GCPlantedC4::SetParent(GCBaseAnimGraph value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPlantedC4::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCPlantedC4(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPlantedC4>("CPlantedC4")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("BombTicking", &GCPlantedC4::GetBombTicking, &GCPlantedC4::SetBombTicking)
        .addProperty("C4Blow", &GCPlantedC4::GetC4Blow, &GCPlantedC4::SetC4Blow)
        .addProperty("BombSite", &GCPlantedC4::GetBombSite, &GCPlantedC4::SetBombSite)
        .addProperty("SourceSoundscapeHash", &GCPlantedC4::GetSourceSoundscapeHash, &GCPlantedC4::SetSourceSoundscapeHash)
        .addProperty("OnBombDefused", &GCPlantedC4::GetOnBombDefused, &GCPlantedC4::SetOnBombDefused)
        .addProperty("OnBombBeginDefuse", &GCPlantedC4::GetOnBombBeginDefuse, &GCPlantedC4::SetOnBombBeginDefuse)
        .addProperty("OnBombDefuseAborted", &GCPlantedC4::GetOnBombDefuseAborted, &GCPlantedC4::SetOnBombDefuseAborted)
        .addProperty("CannotBeDefused", &GCPlantedC4::GetCannotBeDefused, &GCPlantedC4::SetCannotBeDefused)
        .addProperty("EntitySpottedState", &GCPlantedC4::GetEntitySpottedState, &GCPlantedC4::SetEntitySpottedState)
        .addProperty("SpotRules", &GCPlantedC4::GetSpotRules, &GCPlantedC4::SetSpotRules)
        .addProperty("TrainingPlacedByPlayer", &GCPlantedC4::GetTrainingPlacedByPlayer, &GCPlantedC4::SetTrainingPlacedByPlayer)
        .addProperty("HasExploded", &GCPlantedC4::GetHasExploded, &GCPlantedC4::SetHasExploded)
        .addProperty("TimerLength", &GCPlantedC4::GetTimerLength, &GCPlantedC4::SetTimerLength)
        .addProperty("BeingDefused", &GCPlantedC4::GetBeingDefused, &GCPlantedC4::SetBeingDefused)
        .addProperty("LastDefuseTime", &GCPlantedC4::GetLastDefuseTime, &GCPlantedC4::SetLastDefuseTime)
        .addProperty("DefuseLength", &GCPlantedC4::GetDefuseLength, &GCPlantedC4::SetDefuseLength)
        .addProperty("DefuseCountDown", &GCPlantedC4::GetDefuseCountDown, &GCPlantedC4::SetDefuseCountDown)
        .addProperty("BombDefused", &GCPlantedC4::GetBombDefused, &GCPlantedC4::SetBombDefused)
        .addProperty("BombDefuser", &GCPlantedC4::GetBombDefuser, &GCPlantedC4::SetBombDefuser)
        .addProperty("ControlPanel", &GCPlantedC4::GetControlPanel, &GCPlantedC4::SetControlPanel)
        .addProperty("ProgressBarTime", &GCPlantedC4::GetProgressBarTime, &GCPlantedC4::SetProgressBarTime)
        .addProperty("VoiceAlertFired", &GCPlantedC4::GetVoiceAlertFired, &GCPlantedC4::SetVoiceAlertFired)
        .addProperty("VoiceAlertPlayed", &GCPlantedC4::GetVoiceAlertPlayed, &GCPlantedC4::SetVoiceAlertPlayed)
        .addProperty("NextBotBeepTime", &GCPlantedC4::GetNextBotBeepTime, &GCPlantedC4::SetNextBotBeepTime)
        .addProperty("CatchUpToPlayerEye", &GCPlantedC4::GetCatchUpToPlayerEye, &GCPlantedC4::SetCatchUpToPlayerEye)
        .addProperty("LastSpinDetectionTime", &GCPlantedC4::GetLastSpinDetectionTime, &GCPlantedC4::SetLastSpinDetectionTime)
        .addProperty("Parent", &GCPlantedC4::GetParent, &GCPlantedC4::SetParent)
        .addFunction("ToPtr", &GCPlantedC4::ToPtr)
        .addFunction("IsValid", &GCPlantedC4::IsValid)
        .endClass();
}
GCPointClientUIDialog::GCPointClientUIDialog(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPointClientUIDialog::GCPointClientUIDialog(void *ptr) {
    m_ptr = ptr;
}
GCBaseEntity GCPointClientUIDialog::GetActivator() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointClientUIDialog->Activator(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CPointClientUIDialog", "m_hActivator").Get()));
    return value;
}
void GCPointClientUIDialog::SetActivator(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointClientUIDialog->Activator(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Activator' is not possible.\n");
}
bool GCPointClientUIDialog::GetStartEnabled() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointClientUIDialog->StartEnabled(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPointClientUIDialog", "m_bStartEnabled");
}
void GCPointClientUIDialog::SetStartEnabled(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointClientUIDialog->StartEnabled(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointClientUIDialog", "m_bStartEnabled", false, value);
}
void* GCPointClientUIDialog::GetPtr() {
    return m_ptr;
}
std::string GCPointClientUIDialog::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPointClientUIDialog::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseClientUIEntity GCPointClientUIDialog::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPointClientUIDialog::GetParent(ptr=%p)", m_ptr));
    GCBaseClientUIEntity value(m_ptr);
    return value;
}
void GCPointClientUIDialog::SetParent(GCBaseClientUIEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPointClientUIDialog::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCPointClientUIDialog(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPointClientUIDialog>("CPointClientUIDialog")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Activator", &GCPointClientUIDialog::GetActivator, &GCPointClientUIDialog::SetActivator)
        .addProperty("StartEnabled", &GCPointClientUIDialog::GetStartEnabled, &GCPointClientUIDialog::SetStartEnabled)
        .addProperty("Parent", &GCPointClientUIDialog::GetParent, &GCPointClientUIDialog::SetParent)
        .addFunction("ToPtr", &GCPointClientUIDialog::ToPtr)
        .addFunction("IsValid", &GCPointClientUIDialog::IsValid)
        .endClass();
}
GCEnvSplash::GCEnvSplash(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCEnvSplash::GCEnvSplash(void *ptr) {
    m_ptr = ptr;
}
float GCEnvSplash::GetScale() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvSplash->Scale(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CEnvSplash", "m_flScale");
}
void GCEnvSplash::SetScale(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvSplash->Scale(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvSplash", "m_flScale", false, value);
}
void* GCEnvSplash::GetPtr() {
    return m_ptr;
}
std::string GCEnvSplash::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCEnvSplash::IsValid() {
    return (m_ptr != nullptr);
}
GCPointEntity GCEnvSplash::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CEnvSplash::GetParent(ptr=%p)", m_ptr));
    GCPointEntity value(m_ptr);
    return value;
}
void GCEnvSplash::SetParent(GCPointEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CEnvSplash::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCEnvSplash(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCEnvSplash>("CEnvSplash")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Scale", &GCEnvSplash::GetScale, &GCEnvSplash::SetScale)
        .addProperty("Parent", &GCEnvSplash::GetParent, &GCEnvSplash::SetParent)
        .addFunction("ToPtr", &GCEnvSplash::ToPtr)
        .addFunction("IsValid", &GCEnvSplash::IsValid)
        .endClass();
}
GCSkyCamera::GCSkyCamera(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCSkyCamera::GCSkyCamera(void *ptr) {
    m_ptr = ptr;
}
Gsky3dparams_t GCSkyCamera::GetSkyboxData() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSkyCamera->SkyboxData(ptr=%p)", m_ptr));
    Gsky3dparams_t value(GetSchemaPtr(m_ptr, "CSkyCamera", "m_skyboxData"));
    return value;
}
void GCSkyCamera::SetSkyboxData(Gsky3dparams_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSkyCamera->SkyboxData(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'SkyboxData' is not possible.\n");
}
uint32_t GCSkyCamera::GetSkyboxSlotToken() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSkyCamera->SkyboxSlotToken(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlStringToken>(m_ptr, "CSkyCamera", "m_skyboxSlotToken").m_nHashCode;
}
void GCSkyCamera::SetSkyboxSlotToken(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSkyCamera->SkyboxSlotToken(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSkyCamera", "m_skyboxSlotToken", false, CUtlStringToken(value));
}
bool GCSkyCamera::GetUseAngles() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSkyCamera->UseAngles(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CSkyCamera", "m_bUseAngles");
}
void GCSkyCamera::SetUseAngles(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSkyCamera->UseAngles(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSkyCamera", "m_bUseAngles", false, value);
}
GCSkyCamera GCSkyCamera::GetNext() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSkyCamera->Next(ptr=%p)", m_ptr));
    GCSkyCamera value(*(void**)GetSchemaPtr(m_ptr, "CSkyCamera", "m_pNext"));
    return value;
}
void GCSkyCamera::SetNext(GCSkyCamera value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSkyCamera->Next(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSkyCamera","m_pNext", false, (char*)value.GetPtr());
}
void* GCSkyCamera::GetPtr() {
    return m_ptr;
}
std::string GCSkyCamera::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCSkyCamera::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseEntity GCSkyCamera::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSkyCamera::GetParent(ptr=%p)", m_ptr));
    GCBaseEntity value(m_ptr);
    return value;
}
void GCSkyCamera::SetParent(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSkyCamera::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCSkyCamera(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCSkyCamera>("CSkyCamera")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("SkyboxData", &GCSkyCamera::GetSkyboxData, &GCSkyCamera::SetSkyboxData)
        .addProperty("SkyboxSlotToken", &GCSkyCamera::GetSkyboxSlotToken, &GCSkyCamera::SetSkyboxSlotToken)
        .addProperty("UseAngles", &GCSkyCamera::GetUseAngles, &GCSkyCamera::SetUseAngles)
        .addProperty("Next", &GCSkyCamera::GetNext, &GCSkyCamera::SetNext)
        .addProperty("Parent", &GCSkyCamera::GetParent, &GCSkyCamera::SetParent)
        .addFunction("ToPtr", &GCSkyCamera::ToPtr)
        .addFunction("IsValid", &GCSkyCamera::IsValid)
        .endClass();
}
GCWeaponNOVA::GCWeaponNOVA(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCWeaponNOVA::GCWeaponNOVA(void *ptr) {
    m_ptr = ptr;
}
void* GCWeaponNOVA::GetPtr() {
    return m_ptr;
}
std::string GCWeaponNOVA::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCWeaponNOVA::IsValid() {
    return (m_ptr != nullptr);
}
GCCSWeaponBase GCWeaponNOVA::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponNOVA::GetParent(ptr=%p)", m_ptr));
    GCCSWeaponBase value(m_ptr);
    return value;
}
void GCWeaponNOVA::SetParent(GCCSWeaponBase value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponNOVA::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCWeaponNOVA(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCWeaponNOVA>("CWeaponNOVA")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCWeaponNOVA::GetParent, &GCWeaponNOVA::SetParent)
        .addFunction("ToPtr", &GCWeaponNOVA::ToPtr)
        .addFunction("IsValid", &GCWeaponNOVA::IsValid)
        .endClass();
}
GCPointCameraVFOV::GCPointCameraVFOV(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPointCameraVFOV::GCPointCameraVFOV(void *ptr) {
    m_ptr = ptr;
}
float GCPointCameraVFOV::GetVerticalFOV() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointCameraVFOV->VerticalFOV(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPointCameraVFOV", "m_flVerticalFOV");
}
void GCPointCameraVFOV::SetVerticalFOV(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointCameraVFOV->VerticalFOV(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointCameraVFOV", "m_flVerticalFOV", false, value);
}
void* GCPointCameraVFOV::GetPtr() {
    return m_ptr;
}
std::string GCPointCameraVFOV::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPointCameraVFOV::IsValid() {
    return (m_ptr != nullptr);
}
GCPointCamera GCPointCameraVFOV::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPointCameraVFOV::GetParent(ptr=%p)", m_ptr));
    GCPointCamera value(m_ptr);
    return value;
}
void GCPointCameraVFOV::SetParent(GCPointCamera value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPointCameraVFOV::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCPointCameraVFOV(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPointCameraVFOV>("CPointCameraVFOV")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("VerticalFOV", &GCPointCameraVFOV::GetVerticalFOV, &GCPointCameraVFOV::SetVerticalFOV)
        .addProperty("Parent", &GCPointCameraVFOV::GetParent, &GCPointCameraVFOV::SetParent)
        .addFunction("ToPtr", &GCPointCameraVFOV::ToPtr)
        .addFunction("IsValid", &GCPointCameraVFOV::IsValid)
        .endClass();
}
GCWeaponTaser::GCWeaponTaser(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCWeaponTaser::GCWeaponTaser(void *ptr) {
    m_ptr = ptr;
}
float GCWeaponTaser::GetFireTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CWeaponTaser->FireTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CWeaponTaser", "m_fFireTime");
}
void GCWeaponTaser::SetFireTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CWeaponTaser->FireTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CWeaponTaser", "m_fFireTime", false, value);
}
int32_t GCWeaponTaser::GetLastAttackTick() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CWeaponTaser->LastAttackTick(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CWeaponTaser", "m_nLastAttackTick");
}
void GCWeaponTaser::SetLastAttackTick(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CWeaponTaser->LastAttackTick(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CWeaponTaser", "m_nLastAttackTick", false, value);
}
void* GCWeaponTaser::GetPtr() {
    return m_ptr;
}
std::string GCWeaponTaser::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCWeaponTaser::IsValid() {
    return (m_ptr != nullptr);
}
GCCSWeaponBaseGun GCWeaponTaser::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponTaser::GetParent(ptr=%p)", m_ptr));
    GCCSWeaponBaseGun value(m_ptr);
    return value;
}
void GCWeaponTaser::SetParent(GCCSWeaponBaseGun value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponTaser::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCWeaponTaser(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCWeaponTaser>("CWeaponTaser")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("FireTime", &GCWeaponTaser::GetFireTime, &GCWeaponTaser::SetFireTime)
        .addProperty("LastAttackTick", &GCWeaponTaser::GetLastAttackTick, &GCWeaponTaser::SetLastAttackTick)
        .addProperty("Parent", &GCWeaponTaser::GetParent, &GCWeaponTaser::SetParent)
        .addFunction("ToPtr", &GCWeaponTaser::ToPtr)
        .addFunction("IsValid", &GCWeaponTaser::IsValid)
        .endClass();
}
GCWaterBullet::GCWaterBullet(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCWaterBullet::GCWaterBullet(void *ptr) {
    m_ptr = ptr;
}
void* GCWaterBullet::GetPtr() {
    return m_ptr;
}
std::string GCWaterBullet::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCWaterBullet::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseAnimGraph GCWaterBullet::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWaterBullet::GetParent(ptr=%p)", m_ptr));
    GCBaseAnimGraph value(m_ptr);
    return value;
}
void GCWaterBullet::SetParent(GCBaseAnimGraph value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWaterBullet::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCWaterBullet(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCWaterBullet>("CWaterBullet")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCWaterBullet::GetParent, &GCWaterBullet::SetParent)
        .addFunction("ToPtr", &GCWaterBullet::ToPtr)
        .addFunction("IsValid", &GCWaterBullet::IsValid)
        .endClass();
}
GCMarkupVolumeWithRef::GCMarkupVolumeWithRef(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCMarkupVolumeWithRef::GCMarkupVolumeWithRef(void *ptr) {
    m_ptr = ptr;
}
bool GCMarkupVolumeWithRef::GetUseRef() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMarkupVolumeWithRef->UseRef(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CMarkupVolumeWithRef", "m_bUseRef");
}
void GCMarkupVolumeWithRef::SetUseRef(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMarkupVolumeWithRef->UseRef(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMarkupVolumeWithRef", "m_bUseRef", false, value);
}
Vector GCMarkupVolumeWithRef::GetRefPos() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMarkupVolumeWithRef->RefPos(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CMarkupVolumeWithRef", "m_vRefPos");
}
void GCMarkupVolumeWithRef::SetRefPos(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMarkupVolumeWithRef->RefPos(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMarkupVolumeWithRef", "m_vRefPos", false, value);
}
float GCMarkupVolumeWithRef::GetRefDot() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMarkupVolumeWithRef->RefDot(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CMarkupVolumeWithRef", "m_flRefDot");
}
void GCMarkupVolumeWithRef::SetRefDot(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMarkupVolumeWithRef->RefDot(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMarkupVolumeWithRef", "m_flRefDot", false, value);
}
void* GCMarkupVolumeWithRef::GetPtr() {
    return m_ptr;
}
std::string GCMarkupVolumeWithRef::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCMarkupVolumeWithRef::IsValid() {
    return (m_ptr != nullptr);
}
GCMarkupVolumeTagged GCMarkupVolumeWithRef::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CMarkupVolumeWithRef::GetParent(ptr=%p)", m_ptr));
    GCMarkupVolumeTagged value(m_ptr);
    return value;
}
void GCMarkupVolumeWithRef::SetParent(GCMarkupVolumeTagged value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CMarkupVolumeWithRef::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCMarkupVolumeWithRef(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCMarkupVolumeWithRef>("CMarkupVolumeWithRef")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("UseRef", &GCMarkupVolumeWithRef::GetUseRef, &GCMarkupVolumeWithRef::SetUseRef)
        .addProperty("RefPos", &GCMarkupVolumeWithRef::GetRefPos, &GCMarkupVolumeWithRef::SetRefPos)
        .addProperty("RefDot", &GCMarkupVolumeWithRef::GetRefDot, &GCMarkupVolumeWithRef::SetRefDot)
        .addProperty("Parent", &GCMarkupVolumeWithRef::GetParent, &GCMarkupVolumeWithRef::SetParent)
        .addFunction("ToPtr", &GCMarkupVolumeWithRef::ToPtr)
        .addFunction("IsValid", &GCMarkupVolumeWithRef::IsValid)
        .endClass();
}
GCMessage::GCMessage(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCMessage::GCMessage(void *ptr) {
    m_ptr = ptr;
}
std::string GCMessage::GetMessage() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMessage->Message(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CMessage", "m_iszMessage").String();
}
void GCMessage::SetMessage(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMessage->Message(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMessage", "m_iszMessage", false, CUtlSymbolLarge(value.c_str()));
}
float GCMessage::GetMessageVolume() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMessage->MessageVolume(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CMessage", "m_MessageVolume");
}
void GCMessage::SetMessageVolume(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMessage->MessageVolume(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMessage", "m_MessageVolume", false, value);
}
int32_t GCMessage::GetMessageAttenuation() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMessage->MessageAttenuation(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CMessage", "m_MessageAttenuation");
}
void GCMessage::SetMessageAttenuation(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMessage->MessageAttenuation(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMessage", "m_MessageAttenuation", false, value);
}
float GCMessage::GetRadius() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMessage->Radius(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CMessage", "m_Radius");
}
void GCMessage::SetRadius(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMessage->Radius(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMessage", "m_Radius", false, value);
}
std::string GCMessage::GetNoise() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMessage->Noise(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CMessage", "m_sNoise").String();
}
void GCMessage::SetNoise(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMessage->Noise(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMessage", "m_sNoise", false, CUtlSymbolLarge(value.c_str()));
}
GCEntityIOOutput GCMessage::GetOnShowMessage() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMessage->OnShowMessage(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CMessage", "m_OnShowMessage"));
    return value;
}
void GCMessage::SetOnShowMessage(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMessage->OnShowMessage(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnShowMessage' is not possible.\n");
}
void* GCMessage::GetPtr() {
    return m_ptr;
}
std::string GCMessage::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCMessage::IsValid() {
    return (m_ptr != nullptr);
}
GCPointEntity GCMessage::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CMessage::GetParent(ptr=%p)", m_ptr));
    GCPointEntity value(m_ptr);
    return value;
}
void GCMessage::SetParent(GCPointEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CMessage::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCMessage(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCMessage>("CMessage")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Message", &GCMessage::GetMessage, &GCMessage::SetMessage)
        .addProperty("MessageVolume", &GCMessage::GetMessageVolume, &GCMessage::SetMessageVolume)
        .addProperty("MessageAttenuation", &GCMessage::GetMessageAttenuation, &GCMessage::SetMessageAttenuation)
        .addProperty("Radius", &GCMessage::GetRadius, &GCMessage::SetRadius)
        .addProperty("Noise", &GCMessage::GetNoise, &GCMessage::SetNoise)
        .addProperty("OnShowMessage", &GCMessage::GetOnShowMessage, &GCMessage::SetOnShowMessage)
        .addProperty("Parent", &GCMessage::GetParent, &GCMessage::SetParent)
        .addFunction("ToPtr", &GCMessage::ToPtr)
        .addFunction("IsValid", &GCMessage::IsValid)
        .endClass();
}
GCLogicGameEventListener::GCLogicGameEventListener(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCLogicGameEventListener::GCLogicGameEventListener(void *ptr) {
    m_ptr = ptr;
}
GCEntityIOOutput GCLogicGameEventListener::GetOnEventFired() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CLogicGameEventListener->OnEventFired(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CLogicGameEventListener", "m_OnEventFired"));
    return value;
}
void GCLogicGameEventListener::SetOnEventFired(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CLogicGameEventListener->OnEventFired(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnEventFired' is not possible.\n");
}
std::string GCLogicGameEventListener::GetGameEventName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CLogicGameEventListener->GameEventName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CLogicGameEventListener", "m_iszGameEventName").String();
}
void GCLogicGameEventListener::SetGameEventName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CLogicGameEventListener->GameEventName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CLogicGameEventListener", "m_iszGameEventName", false, CUtlSymbolLarge(value.c_str()));
}
std::string GCLogicGameEventListener::GetGameEventItem() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CLogicGameEventListener->GameEventItem(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CLogicGameEventListener", "m_iszGameEventItem").String();
}
void GCLogicGameEventListener::SetGameEventItem(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CLogicGameEventListener->GameEventItem(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CLogicGameEventListener", "m_iszGameEventItem", false, CUtlSymbolLarge(value.c_str()));
}
bool GCLogicGameEventListener::GetEnabled() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CLogicGameEventListener->Enabled(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CLogicGameEventListener", "m_bEnabled");
}
void GCLogicGameEventListener::SetEnabled(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CLogicGameEventListener->Enabled(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CLogicGameEventListener", "m_bEnabled", false, value);
}
bool GCLogicGameEventListener::GetStartDisabled() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CLogicGameEventListener->StartDisabled(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CLogicGameEventListener", "m_bStartDisabled");
}
void GCLogicGameEventListener::SetStartDisabled(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CLogicGameEventListener->StartDisabled(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CLogicGameEventListener", "m_bStartDisabled", false, value);
}
void* GCLogicGameEventListener::GetPtr() {
    return m_ptr;
}
std::string GCLogicGameEventListener::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCLogicGameEventListener::IsValid() {
    return (m_ptr != nullptr);
}
GCLogicalEntity GCLogicGameEventListener::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CLogicGameEventListener::GetParent(ptr=%p)", m_ptr));
    GCLogicalEntity value(m_ptr);
    return value;
}
void GCLogicGameEventListener::SetParent(GCLogicalEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CLogicGameEventListener::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCLogicGameEventListener(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCLogicGameEventListener>("CLogicGameEventListener")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("OnEventFired", &GCLogicGameEventListener::GetOnEventFired, &GCLogicGameEventListener::SetOnEventFired)
        .addProperty("GameEventName", &GCLogicGameEventListener::GetGameEventName, &GCLogicGameEventListener::SetGameEventName)
        .addProperty("GameEventItem", &GCLogicGameEventListener::GetGameEventItem, &GCLogicGameEventListener::SetGameEventItem)
        .addProperty("Enabled", &GCLogicGameEventListener::GetEnabled, &GCLogicGameEventListener::SetEnabled)
        .addProperty("StartDisabled", &GCLogicGameEventListener::GetStartDisabled, &GCLogicGameEventListener::SetStartDisabled)
        .addProperty("Parent", &GCLogicGameEventListener::GetParent, &GCLogicGameEventListener::SetParent)
        .addFunction("ToPtr", &GCLogicGameEventListener::ToPtr)
        .addFunction("IsValid", &GCLogicGameEventListener::IsValid)
        .endClass();
}
GCPushable::GCPushable(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPushable::GCPushable(void *ptr) {
    m_ptr = ptr;
}
void* GCPushable::GetPtr() {
    return m_ptr;
}
std::string GCPushable::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPushable::IsValid() {
    return (m_ptr != nullptr);
}
GCBreakable GCPushable::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPushable::GetParent(ptr=%p)", m_ptr));
    GCBreakable value(m_ptr);
    return value;
}
void GCPushable::SetParent(GCBreakable value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPushable::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCPushable(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPushable>("CPushable")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCPushable::GetParent, &GCPushable::SetParent)
        .addFunction("ToPtr", &GCPushable::ToPtr)
        .addFunction("IsValid", &GCPushable::IsValid)
        .endClass();
}
GCTriggerRemove::GCTriggerRemove(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCTriggerRemove::GCTriggerRemove(void *ptr) {
    m_ptr = ptr;
}
GCEntityIOOutput GCTriggerRemove::GetOnRemove() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerRemove->OnRemove(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CTriggerRemove", "m_OnRemove"));
    return value;
}
void GCTriggerRemove::SetOnRemove(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerRemove->OnRemove(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnRemove' is not possible.\n");
}
void* GCTriggerRemove::GetPtr() {
    return m_ptr;
}
std::string GCTriggerRemove::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCTriggerRemove::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseTrigger GCTriggerRemove::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTriggerRemove::GetParent(ptr=%p)", m_ptr));
    GCBaseTrigger value(m_ptr);
    return value;
}
void GCTriggerRemove::SetParent(GCBaseTrigger value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTriggerRemove::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCTriggerRemove(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCTriggerRemove>("CTriggerRemove")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("OnRemove", &GCTriggerRemove::GetOnRemove, &GCTriggerRemove::SetOnRemove)
        .addProperty("Parent", &GCTriggerRemove::GetParent, &GCTriggerRemove::SetParent)
        .addFunction("ToPtr", &GCTriggerRemove::ToPtr)
        .addFunction("IsValid", &GCTriggerRemove::IsValid)
        .endClass();
}
GCInfoTarget::GCInfoTarget(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCInfoTarget::GCInfoTarget(void *ptr) {
    m_ptr = ptr;
}
void* GCInfoTarget::GetPtr() {
    return m_ptr;
}
std::string GCInfoTarget::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCInfoTarget::IsValid() {
    return (m_ptr != nullptr);
}
GCPointEntity GCInfoTarget::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CInfoTarget::GetParent(ptr=%p)", m_ptr));
    GCPointEntity value(m_ptr);
    return value;
}
void GCInfoTarget::SetParent(GCPointEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CInfoTarget::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCInfoTarget(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCInfoTarget>("CInfoTarget")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCInfoTarget::GetParent, &GCInfoTarget::SetParent)
        .addFunction("ToPtr", &GCInfoTarget::ToPtr)
        .addFunction("IsValid", &GCInfoTarget::IsValid)
        .endClass();
}
GCMomentaryRotButton::GCMomentaryRotButton(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCMomentaryRotButton::GCMomentaryRotButton(void *ptr) {
    m_ptr = ptr;
}
GCEntityIOOutput GCMomentaryRotButton::GetOnUnpressed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMomentaryRotButton->OnUnpressed(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CMomentaryRotButton", "m_OnUnpressed"));
    return value;
}
void GCMomentaryRotButton::SetOnUnpressed(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMomentaryRotButton->OnUnpressed(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnUnpressed' is not possible.\n");
}
GCEntityIOOutput GCMomentaryRotButton::GetOnFullyOpen() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMomentaryRotButton->OnFullyOpen(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CMomentaryRotButton", "m_OnFullyOpen"));
    return value;
}
void GCMomentaryRotButton::SetOnFullyOpen(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMomentaryRotButton->OnFullyOpen(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnFullyOpen' is not possible.\n");
}
GCEntityIOOutput GCMomentaryRotButton::GetOnFullyClosed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMomentaryRotButton->OnFullyClosed(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CMomentaryRotButton", "m_OnFullyClosed"));
    return value;
}
void GCMomentaryRotButton::SetOnFullyClosed(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMomentaryRotButton->OnFullyClosed(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnFullyClosed' is not possible.\n");
}
GCEntityIOOutput GCMomentaryRotButton::GetOnReachedPosition() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMomentaryRotButton->OnReachedPosition(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CMomentaryRotButton", "m_OnReachedPosition"));
    return value;
}
void GCMomentaryRotButton::SetOnReachedPosition(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMomentaryRotButton->OnReachedPosition(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnReachedPosition' is not possible.\n");
}
int32_t GCMomentaryRotButton::GetLastUsed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMomentaryRotButton->LastUsed(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CMomentaryRotButton", "m_lastUsed");
}
void GCMomentaryRotButton::SetLastUsed(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMomentaryRotButton->LastUsed(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMomentaryRotButton", "m_lastUsed", false, value);
}
QAngle GCMomentaryRotButton::GetStart() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMomentaryRotButton->Start(ptr=%p)", m_ptr));
    return GetSchemaValue<QAngle>(m_ptr, "CMomentaryRotButton", "m_start");
}
void GCMomentaryRotButton::SetStart(QAngle value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMomentaryRotButton->Start(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMomentaryRotButton", "m_start", false, value);
}
QAngle GCMomentaryRotButton::GetEnd() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMomentaryRotButton->End(ptr=%p)", m_ptr));
    return GetSchemaValue<QAngle>(m_ptr, "CMomentaryRotButton", "m_end");
}
void GCMomentaryRotButton::SetEnd(QAngle value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMomentaryRotButton->End(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMomentaryRotButton", "m_end", false, value);
}
float GCMomentaryRotButton::GetIdealYaw() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMomentaryRotButton->IdealYaw(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CMomentaryRotButton", "m_IdealYaw");
}
void GCMomentaryRotButton::SetIdealYaw(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMomentaryRotButton->IdealYaw(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMomentaryRotButton", "m_IdealYaw", false, value);
}
std::string GCMomentaryRotButton::GetNoise() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMomentaryRotButton->Noise(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CMomentaryRotButton", "m_sNoise").String();
}
void GCMomentaryRotButton::SetNoise(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMomentaryRotButton->Noise(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMomentaryRotButton", "m_sNoise", false, CUtlSymbolLarge(value.c_str()));
}
bool GCMomentaryRotButton::GetUpdateTarget() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMomentaryRotButton->UpdateTarget(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CMomentaryRotButton", "m_bUpdateTarget");
}
void GCMomentaryRotButton::SetUpdateTarget(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMomentaryRotButton->UpdateTarget(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMomentaryRotButton", "m_bUpdateTarget", false, value);
}
int32_t GCMomentaryRotButton::GetDirection() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMomentaryRotButton->Direction(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CMomentaryRotButton", "m_direction");
}
void GCMomentaryRotButton::SetDirection(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMomentaryRotButton->Direction(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMomentaryRotButton", "m_direction", false, value);
}
float GCMomentaryRotButton::GetReturnSpeed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMomentaryRotButton->ReturnSpeed(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CMomentaryRotButton", "m_returnSpeed");
}
void GCMomentaryRotButton::SetReturnSpeed(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMomentaryRotButton->ReturnSpeed(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMomentaryRotButton", "m_returnSpeed", false, value);
}
float GCMomentaryRotButton::GetStartPosition() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMomentaryRotButton->StartPosition(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CMomentaryRotButton", "m_flStartPosition");
}
void GCMomentaryRotButton::SetStartPosition(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMomentaryRotButton->StartPosition(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMomentaryRotButton", "m_flStartPosition", false, value);
}
void* GCMomentaryRotButton::GetPtr() {
    return m_ptr;
}
std::string GCMomentaryRotButton::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCMomentaryRotButton::IsValid() {
    return (m_ptr != nullptr);
}
GCRotButton GCMomentaryRotButton::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CMomentaryRotButton::GetParent(ptr=%p)", m_ptr));
    GCRotButton value(m_ptr);
    return value;
}
void GCMomentaryRotButton::SetParent(GCRotButton value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CMomentaryRotButton::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCMomentaryRotButton(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCMomentaryRotButton>("CMomentaryRotButton")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("OnUnpressed", &GCMomentaryRotButton::GetOnUnpressed, &GCMomentaryRotButton::SetOnUnpressed)
        .addProperty("OnFullyOpen", &GCMomentaryRotButton::GetOnFullyOpen, &GCMomentaryRotButton::SetOnFullyOpen)
        .addProperty("OnFullyClosed", &GCMomentaryRotButton::GetOnFullyClosed, &GCMomentaryRotButton::SetOnFullyClosed)
        .addProperty("OnReachedPosition", &GCMomentaryRotButton::GetOnReachedPosition, &GCMomentaryRotButton::SetOnReachedPosition)
        .addProperty("LastUsed", &GCMomentaryRotButton::GetLastUsed, &GCMomentaryRotButton::SetLastUsed)
        .addProperty("Start", &GCMomentaryRotButton::GetStart, &GCMomentaryRotButton::SetStart)
        .addProperty("End", &GCMomentaryRotButton::GetEnd, &GCMomentaryRotButton::SetEnd)
        .addProperty("IdealYaw", &GCMomentaryRotButton::GetIdealYaw, &GCMomentaryRotButton::SetIdealYaw)
        .addProperty("Noise", &GCMomentaryRotButton::GetNoise, &GCMomentaryRotButton::SetNoise)
        .addProperty("UpdateTarget", &GCMomentaryRotButton::GetUpdateTarget, &GCMomentaryRotButton::SetUpdateTarget)
        .addProperty("Direction", &GCMomentaryRotButton::GetDirection, &GCMomentaryRotButton::SetDirection)
        .addProperty("ReturnSpeed", &GCMomentaryRotButton::GetReturnSpeed, &GCMomentaryRotButton::SetReturnSpeed)
        .addProperty("StartPosition", &GCMomentaryRotButton::GetStartPosition, &GCMomentaryRotButton::SetStartPosition)
        .addProperty("Parent", &GCMomentaryRotButton::GetParent, &GCMomentaryRotButton::SetParent)
        .addFunction("ToPtr", &GCMomentaryRotButton::ToPtr)
        .addFunction("IsValid", &GCMomentaryRotButton::IsValid)
        .endClass();
}
GCPropDoorRotating::GCPropDoorRotating(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPropDoorRotating::GCPropDoorRotating(void *ptr) {
    m_ptr = ptr;
}
Vector GCPropDoorRotating::GetAxis() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPropDoorRotating->Axis(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CPropDoorRotating", "m_vecAxis");
}
void GCPropDoorRotating::SetAxis(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPropDoorRotating->Axis(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPropDoorRotating", "m_vecAxis", false, value);
}
float GCPropDoorRotating::GetDistance() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPropDoorRotating->Distance(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPropDoorRotating", "m_flDistance");
}
void GCPropDoorRotating::SetDistance(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPropDoorRotating->Distance(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPropDoorRotating", "m_flDistance", false, value);
}
uint64_t GCPropDoorRotating::GetSpawnPosition() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPropDoorRotating->SpawnPosition(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CPropDoorRotating", "m_eSpawnPosition");
}
void GCPropDoorRotating::SetSpawnPosition(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPropDoorRotating->SpawnPosition(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPropDoorRotating", "m_eSpawnPosition", false, value);
}
uint64_t GCPropDoorRotating::GetOpenDirection() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPropDoorRotating->OpenDirection(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CPropDoorRotating", "m_eOpenDirection");
}
void GCPropDoorRotating::SetOpenDirection(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPropDoorRotating->OpenDirection(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPropDoorRotating", "m_eOpenDirection", false, value);
}
uint64_t GCPropDoorRotating::GetCurrentOpenDirection() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPropDoorRotating->CurrentOpenDirection(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CPropDoorRotating", "m_eCurrentOpenDirection");
}
void GCPropDoorRotating::SetCurrentOpenDirection(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPropDoorRotating->CurrentOpenDirection(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPropDoorRotating", "m_eCurrentOpenDirection", false, value);
}
float GCPropDoorRotating::GetAjarAngle() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPropDoorRotating->AjarAngle(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPropDoorRotating", "m_flAjarAngle");
}
void GCPropDoorRotating::SetAjarAngle(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPropDoorRotating->AjarAngle(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPropDoorRotating", "m_flAjarAngle", false, value);
}
QAngle GCPropDoorRotating::GetRotationAjarDeprecated() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPropDoorRotating->RotationAjarDeprecated(ptr=%p)", m_ptr));
    return GetSchemaValue<QAngle>(m_ptr, "CPropDoorRotating", "m_angRotationAjarDeprecated");
}
void GCPropDoorRotating::SetRotationAjarDeprecated(QAngle value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPropDoorRotating->RotationAjarDeprecated(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPropDoorRotating", "m_angRotationAjarDeprecated", false, value);
}
QAngle GCPropDoorRotating::GetRotationClosed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPropDoorRotating->RotationClosed(ptr=%p)", m_ptr));
    return GetSchemaValue<QAngle>(m_ptr, "CPropDoorRotating", "m_angRotationClosed");
}
void GCPropDoorRotating::SetRotationClosed(QAngle value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPropDoorRotating->RotationClosed(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPropDoorRotating", "m_angRotationClosed", false, value);
}
QAngle GCPropDoorRotating::GetRotationOpenForward() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPropDoorRotating->RotationOpenForward(ptr=%p)", m_ptr));
    return GetSchemaValue<QAngle>(m_ptr, "CPropDoorRotating", "m_angRotationOpenForward");
}
void GCPropDoorRotating::SetRotationOpenForward(QAngle value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPropDoorRotating->RotationOpenForward(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPropDoorRotating", "m_angRotationOpenForward", false, value);
}
QAngle GCPropDoorRotating::GetRotationOpenBack() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPropDoorRotating->RotationOpenBack(ptr=%p)", m_ptr));
    return GetSchemaValue<QAngle>(m_ptr, "CPropDoorRotating", "m_angRotationOpenBack");
}
void GCPropDoorRotating::SetRotationOpenBack(QAngle value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPropDoorRotating->RotationOpenBack(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPropDoorRotating", "m_angRotationOpenBack", false, value);
}
QAngle GCPropDoorRotating::GetGoal() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPropDoorRotating->Goal(ptr=%p)", m_ptr));
    return GetSchemaValue<QAngle>(m_ptr, "CPropDoorRotating", "m_angGoal");
}
void GCPropDoorRotating::SetGoal(QAngle value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPropDoorRotating->Goal(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPropDoorRotating", "m_angGoal", false, value);
}
Vector GCPropDoorRotating::GetForwardBoundsMin() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPropDoorRotating->ForwardBoundsMin(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CPropDoorRotating", "m_vecForwardBoundsMin");
}
void GCPropDoorRotating::SetForwardBoundsMin(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPropDoorRotating->ForwardBoundsMin(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPropDoorRotating", "m_vecForwardBoundsMin", false, value);
}
Vector GCPropDoorRotating::GetForwardBoundsMax() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPropDoorRotating->ForwardBoundsMax(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CPropDoorRotating", "m_vecForwardBoundsMax");
}
void GCPropDoorRotating::SetForwardBoundsMax(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPropDoorRotating->ForwardBoundsMax(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPropDoorRotating", "m_vecForwardBoundsMax", false, value);
}
Vector GCPropDoorRotating::GetBackBoundsMin() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPropDoorRotating->BackBoundsMin(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CPropDoorRotating", "m_vecBackBoundsMin");
}
void GCPropDoorRotating::SetBackBoundsMin(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPropDoorRotating->BackBoundsMin(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPropDoorRotating", "m_vecBackBoundsMin", false, value);
}
Vector GCPropDoorRotating::GetBackBoundsMax() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPropDoorRotating->BackBoundsMax(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CPropDoorRotating", "m_vecBackBoundsMax");
}
void GCPropDoorRotating::SetBackBoundsMax(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPropDoorRotating->BackBoundsMax(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPropDoorRotating", "m_vecBackBoundsMax", false, value);
}
bool GCPropDoorRotating::GetAjarDoorShouldntAlwaysOpen() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPropDoorRotating->AjarDoorShouldntAlwaysOpen(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPropDoorRotating", "m_bAjarDoorShouldntAlwaysOpen");
}
void GCPropDoorRotating::SetAjarDoorShouldntAlwaysOpen(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPropDoorRotating->AjarDoorShouldntAlwaysOpen(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPropDoorRotating", "m_bAjarDoorShouldntAlwaysOpen", false, value);
}
GCEntityBlocker GCPropDoorRotating::GetEntityBlocker() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPropDoorRotating->EntityBlocker(ptr=%p)", m_ptr));
    GCEntityBlocker value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CPropDoorRotating", "m_hEntityBlocker").Get()));
    return value;
}
void GCPropDoorRotating::SetEntityBlocker(GCEntityBlocker value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPropDoorRotating->EntityBlocker(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'EntityBlocker' is not possible.\n");
}
void* GCPropDoorRotating::GetPtr() {
    return m_ptr;
}
std::string GCPropDoorRotating::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPropDoorRotating::IsValid() {
    return (m_ptr != nullptr);
}
GCBasePropDoor GCPropDoorRotating::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPropDoorRotating::GetParent(ptr=%p)", m_ptr));
    GCBasePropDoor value(m_ptr);
    return value;
}
void GCPropDoorRotating::SetParent(GCBasePropDoor value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPropDoorRotating::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCPropDoorRotating(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPropDoorRotating>("CPropDoorRotating")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Axis", &GCPropDoorRotating::GetAxis, &GCPropDoorRotating::SetAxis)
        .addProperty("Distance", &GCPropDoorRotating::GetDistance, &GCPropDoorRotating::SetDistance)
        .addProperty("SpawnPosition", &GCPropDoorRotating::GetSpawnPosition, &GCPropDoorRotating::SetSpawnPosition)
        .addProperty("OpenDirection", &GCPropDoorRotating::GetOpenDirection, &GCPropDoorRotating::SetOpenDirection)
        .addProperty("CurrentOpenDirection", &GCPropDoorRotating::GetCurrentOpenDirection, &GCPropDoorRotating::SetCurrentOpenDirection)
        .addProperty("AjarAngle", &GCPropDoorRotating::GetAjarAngle, &GCPropDoorRotating::SetAjarAngle)
        .addProperty("RotationAjarDeprecated", &GCPropDoorRotating::GetRotationAjarDeprecated, &GCPropDoorRotating::SetRotationAjarDeprecated)
        .addProperty("RotationClosed", &GCPropDoorRotating::GetRotationClosed, &GCPropDoorRotating::SetRotationClosed)
        .addProperty("RotationOpenForward", &GCPropDoorRotating::GetRotationOpenForward, &GCPropDoorRotating::SetRotationOpenForward)
        .addProperty("RotationOpenBack", &GCPropDoorRotating::GetRotationOpenBack, &GCPropDoorRotating::SetRotationOpenBack)
        .addProperty("Goal", &GCPropDoorRotating::GetGoal, &GCPropDoorRotating::SetGoal)
        .addProperty("ForwardBoundsMin", &GCPropDoorRotating::GetForwardBoundsMin, &GCPropDoorRotating::SetForwardBoundsMin)
        .addProperty("ForwardBoundsMax", &GCPropDoorRotating::GetForwardBoundsMax, &GCPropDoorRotating::SetForwardBoundsMax)
        .addProperty("BackBoundsMin", &GCPropDoorRotating::GetBackBoundsMin, &GCPropDoorRotating::SetBackBoundsMin)
        .addProperty("BackBoundsMax", &GCPropDoorRotating::GetBackBoundsMax, &GCPropDoorRotating::SetBackBoundsMax)
        .addProperty("AjarDoorShouldntAlwaysOpen", &GCPropDoorRotating::GetAjarDoorShouldntAlwaysOpen, &GCPropDoorRotating::SetAjarDoorShouldntAlwaysOpen)
        .addProperty("EntityBlocker", &GCPropDoorRotating::GetEntityBlocker, &GCPropDoorRotating::SetEntityBlocker)
        .addProperty("Parent", &GCPropDoorRotating::GetParent, &GCPropDoorRotating::SetParent)
        .addFunction("ToPtr", &GCPropDoorRotating::ToPtr)
        .addFunction("IsValid", &GCPropDoorRotating::IsValid)
        .endClass();
}
Ghudtextparms_t::Ghudtextparms_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
Ghudtextparms_t::Ghudtextparms_t(void *ptr) {
    m_ptr = ptr;
}
Color Ghudtextparms_t::GetColor1() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: hudtextparms_t->Color1(ptr=%p)", m_ptr));
    return GetSchemaValue<Color>(m_ptr, "hudtextparms_t", "color1");
}
void Ghudtextparms_t::SetColor1(Color value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: hudtextparms_t->Color1(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "hudtextparms_t", "color1", true, value);
}
Color Ghudtextparms_t::GetColor2() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: hudtextparms_t->Color2(ptr=%p)", m_ptr));
    return GetSchemaValue<Color>(m_ptr, "hudtextparms_t", "color2");
}
void Ghudtextparms_t::SetColor2(Color value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: hudtextparms_t->Color2(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "hudtextparms_t", "color2", true, value);
}
uint32_t Ghudtextparms_t::GetEffect() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: hudtextparms_t->Effect(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "hudtextparms_t", "effect");
}
void Ghudtextparms_t::SetEffect(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: hudtextparms_t->Effect(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "hudtextparms_t", "effect", true, value);
}
uint32_t Ghudtextparms_t::GetChannel() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: hudtextparms_t->Channel(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "hudtextparms_t", "channel");
}
void Ghudtextparms_t::SetChannel(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: hudtextparms_t->Channel(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "hudtextparms_t", "channel", true, value);
}
float Ghudtextparms_t::GetX() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: hudtextparms_t->X(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "hudtextparms_t", "x");
}
void Ghudtextparms_t::SetX(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: hudtextparms_t->X(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "hudtextparms_t", "x", true, value);
}
float Ghudtextparms_t::GetY() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: hudtextparms_t->Y(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "hudtextparms_t", "y");
}
void Ghudtextparms_t::SetY(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: hudtextparms_t->Y(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "hudtextparms_t", "y", true, value);
}
void* Ghudtextparms_t::GetPtr() {
    return m_ptr;
}
std::string Ghudtextparms_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool Ghudtextparms_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClasshudtextparms_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<Ghudtextparms_t>("hudtextparms_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Color1", &Ghudtextparms_t::GetColor1, &Ghudtextparms_t::SetColor1)
        .addProperty("Color2", &Ghudtextparms_t::GetColor2, &Ghudtextparms_t::SetColor2)
        .addProperty("Effect", &Ghudtextparms_t::GetEffect, &Ghudtextparms_t::SetEffect)
        .addProperty("Channel", &Ghudtextparms_t::GetChannel, &Ghudtextparms_t::SetChannel)
        .addProperty("X", &Ghudtextparms_t::GetX, &Ghudtextparms_t::SetX)
        .addProperty("Y", &Ghudtextparms_t::GetY, &Ghudtextparms_t::SetY)
        .addFunction("ToPtr", &Ghudtextparms_t::ToPtr)
        .addFunction("IsValid", &Ghudtextparms_t::IsValid)
        .endClass();
}
GCWeaponMP5SD::GCWeaponMP5SD(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCWeaponMP5SD::GCWeaponMP5SD(void *ptr) {
    m_ptr = ptr;
}
void* GCWeaponMP5SD::GetPtr() {
    return m_ptr;
}
std::string GCWeaponMP5SD::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCWeaponMP5SD::IsValid() {
    return (m_ptr != nullptr);
}
GCCSWeaponBaseGun GCWeaponMP5SD::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponMP5SD::GetParent(ptr=%p)", m_ptr));
    GCCSWeaponBaseGun value(m_ptr);
    return value;
}
void GCWeaponMP5SD::SetParent(GCCSWeaponBaseGun value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponMP5SD::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCWeaponMP5SD(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCWeaponMP5SD>("CWeaponMP5SD")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCWeaponMP5SD::GetParent, &GCWeaponMP5SD::SetParent)
        .addFunction("ToPtr", &GCWeaponMP5SD::ToPtr)
        .addFunction("IsValid", &GCWeaponMP5SD::IsValid)
        .endClass();
}
GCTextureBasedAnimatable::GCTextureBasedAnimatable(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCTextureBasedAnimatable::GCTextureBasedAnimatable(void *ptr) {
    m_ptr = ptr;
}
bool GCTextureBasedAnimatable::GetLoop() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTextureBasedAnimatable->Loop(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CTextureBasedAnimatable", "m_bLoop");
}
void GCTextureBasedAnimatable::SetLoop(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTextureBasedAnimatable->Loop(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTextureBasedAnimatable", "m_bLoop", false, value);
}
float GCTextureBasedAnimatable::GetFPS() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTextureBasedAnimatable->FPS(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CTextureBasedAnimatable", "m_flFPS");
}
void GCTextureBasedAnimatable::SetFPS(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTextureBasedAnimatable->FPS(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTextureBasedAnimatable", "m_flFPS", false, value);
}
Vector GCTextureBasedAnimatable::GetAnimationBoundsMin() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTextureBasedAnimatable->AnimationBoundsMin(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CTextureBasedAnimatable", "m_vAnimationBoundsMin");
}
void GCTextureBasedAnimatable::SetAnimationBoundsMin(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTextureBasedAnimatable->AnimationBoundsMin(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTextureBasedAnimatable", "m_vAnimationBoundsMin", false, value);
}
Vector GCTextureBasedAnimatable::GetAnimationBoundsMax() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTextureBasedAnimatable->AnimationBoundsMax(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CTextureBasedAnimatable", "m_vAnimationBoundsMax");
}
void GCTextureBasedAnimatable::SetAnimationBoundsMax(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTextureBasedAnimatable->AnimationBoundsMax(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTextureBasedAnimatable", "m_vAnimationBoundsMax", false, value);
}
float GCTextureBasedAnimatable::GetStartTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTextureBasedAnimatable->StartTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CTextureBasedAnimatable", "m_flStartTime");
}
void GCTextureBasedAnimatable::SetStartTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTextureBasedAnimatable->StartTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTextureBasedAnimatable", "m_flStartTime", false, value);
}
float GCTextureBasedAnimatable::GetStartFrame() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTextureBasedAnimatable->StartFrame(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CTextureBasedAnimatable", "m_flStartFrame");
}
void GCTextureBasedAnimatable::SetStartFrame(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTextureBasedAnimatable->StartFrame(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTextureBasedAnimatable", "m_flStartFrame", false, value);
}
void* GCTextureBasedAnimatable::GetPtr() {
    return m_ptr;
}
std::string GCTextureBasedAnimatable::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCTextureBasedAnimatable::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseModelEntity GCTextureBasedAnimatable::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTextureBasedAnimatable::GetParent(ptr=%p)", m_ptr));
    GCBaseModelEntity value(m_ptr);
    return value;
}
void GCTextureBasedAnimatable::SetParent(GCBaseModelEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTextureBasedAnimatable::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCTextureBasedAnimatable(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCTextureBasedAnimatable>("CTextureBasedAnimatable")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Loop", &GCTextureBasedAnimatable::GetLoop, &GCTextureBasedAnimatable::SetLoop)
        .addProperty("FPS", &GCTextureBasedAnimatable::GetFPS, &GCTextureBasedAnimatable::SetFPS)
        .addProperty("AnimationBoundsMin", &GCTextureBasedAnimatable::GetAnimationBoundsMin, &GCTextureBasedAnimatable::SetAnimationBoundsMin)
        .addProperty("AnimationBoundsMax", &GCTextureBasedAnimatable::GetAnimationBoundsMax, &GCTextureBasedAnimatable::SetAnimationBoundsMax)
        .addProperty("StartTime", &GCTextureBasedAnimatable::GetStartTime, &GCTextureBasedAnimatable::SetStartTime)
        .addProperty("StartFrame", &GCTextureBasedAnimatable::GetStartFrame, &GCTextureBasedAnimatable::SetStartFrame)
        .addProperty("Parent", &GCTextureBasedAnimatable::GetParent, &GCTextureBasedAnimatable::SetParent)
        .addFunction("ToPtr", &GCTextureBasedAnimatable::ToPtr)
        .addFunction("IsValid", &GCTextureBasedAnimatable::IsValid)
        .endClass();
}
GCMarkupVolumeTagged_NavGame::GCMarkupVolumeTagged_NavGame(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCMarkupVolumeTagged_NavGame::GCMarkupVolumeTagged_NavGame(void *ptr) {
    m_ptr = ptr;
}
bool GCMarkupVolumeTagged_NavGame::GetFloodFillAttribute() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMarkupVolumeTagged_NavGame->FloodFillAttribute(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CMarkupVolumeTagged_NavGame", "m_bFloodFillAttribute");
}
void GCMarkupVolumeTagged_NavGame::SetFloodFillAttribute(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMarkupVolumeTagged_NavGame->FloodFillAttribute(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMarkupVolumeTagged_NavGame", "m_bFloodFillAttribute", false, value);
}
void* GCMarkupVolumeTagged_NavGame::GetPtr() {
    return m_ptr;
}
std::string GCMarkupVolumeTagged_NavGame::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCMarkupVolumeTagged_NavGame::IsValid() {
    return (m_ptr != nullptr);
}
GCMarkupVolumeWithRef GCMarkupVolumeTagged_NavGame::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CMarkupVolumeTagged_NavGame::GetParent(ptr=%p)", m_ptr));
    GCMarkupVolumeWithRef value(m_ptr);
    return value;
}
void GCMarkupVolumeTagged_NavGame::SetParent(GCMarkupVolumeWithRef value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CMarkupVolumeTagged_NavGame::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCMarkupVolumeTagged_NavGame(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCMarkupVolumeTagged_NavGame>("CMarkupVolumeTagged_NavGame")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("FloodFillAttribute", &GCMarkupVolumeTagged_NavGame::GetFloodFillAttribute, &GCMarkupVolumeTagged_NavGame::SetFloodFillAttribute)
        .addProperty("Parent", &GCMarkupVolumeTagged_NavGame::GetParent, &GCMarkupVolumeTagged_NavGame::SetParent)
        .addFunction("ToPtr", &GCMarkupVolumeTagged_NavGame::ToPtr)
        .addFunction("IsValid", &GCMarkupVolumeTagged_NavGame::IsValid)
        .endClass();
}
GCPhysThruster::GCPhysThruster(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPhysThruster::GCPhysThruster(void *ptr) {
    m_ptr = ptr;
}
Vector GCPhysThruster::GetLocalOrigin() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysThruster->LocalOrigin(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CPhysThruster", "m_localOrigin");
}
void GCPhysThruster::SetLocalOrigin(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysThruster->LocalOrigin(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysThruster", "m_localOrigin", false, value);
}
void* GCPhysThruster::GetPtr() {
    return m_ptr;
}
std::string GCPhysThruster::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPhysThruster::IsValid() {
    return (m_ptr != nullptr);
}
GCPhysForce GCPhysThruster::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPhysThruster::GetParent(ptr=%p)", m_ptr));
    GCPhysForce value(m_ptr);
    return value;
}
void GCPhysThruster::SetParent(GCPhysForce value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPhysThruster::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCPhysThruster(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPhysThruster>("CPhysThruster")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("LocalOrigin", &GCPhysThruster::GetLocalOrigin, &GCPhysThruster::SetLocalOrigin)
        .addProperty("Parent", &GCPhysThruster::GetParent, &GCPhysThruster::SetParent)
        .addFunction("ToPtr", &GCPhysThruster::ToPtr)
        .addFunction("IsValid", &GCPhysThruster::IsValid)
        .endClass();
}
GCCSPointScriptExtensions_player::GCCSPointScriptExtensions_player(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCCSPointScriptExtensions_player::GCCSPointScriptExtensions_player(void *ptr) {
    m_ptr = ptr;
}
void* GCCSPointScriptExtensions_player::GetPtr() {
    return m_ptr;
}
std::string GCCSPointScriptExtensions_player::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCCSPointScriptExtensions_player::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCCSPointScriptExtensions_player(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCCSPointScriptExtensions_player>("CCSPointScriptExtensions_player")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addFunction("ToPtr", &GCCSPointScriptExtensions_player::ToPtr)
        .addFunction("IsValid", &GCCSPointScriptExtensions_player::IsValid)
        .endClass();
}
GCCitadelSoundOpvarSetOBB::GCCitadelSoundOpvarSetOBB(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCCitadelSoundOpvarSetOBB::GCCitadelSoundOpvarSetOBB(void *ptr) {
    m_ptr = ptr;
}
std::string GCCitadelSoundOpvarSetOBB::GetStackName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCitadelSoundOpvarSetOBB->StackName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CCitadelSoundOpvarSetOBB", "m_iszStackName").String();
}
void GCCitadelSoundOpvarSetOBB::SetStackName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCitadelSoundOpvarSetOBB->StackName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCitadelSoundOpvarSetOBB", "m_iszStackName", false, CUtlSymbolLarge(value.c_str()));
}
std::string GCCitadelSoundOpvarSetOBB::GetOperatorName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCitadelSoundOpvarSetOBB->OperatorName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CCitadelSoundOpvarSetOBB", "m_iszOperatorName").String();
}
void GCCitadelSoundOpvarSetOBB::SetOperatorName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCitadelSoundOpvarSetOBB->OperatorName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCitadelSoundOpvarSetOBB", "m_iszOperatorName", false, CUtlSymbolLarge(value.c_str()));
}
std::string GCCitadelSoundOpvarSetOBB::GetOpvarName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCitadelSoundOpvarSetOBB->OpvarName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CCitadelSoundOpvarSetOBB", "m_iszOpvarName").String();
}
void GCCitadelSoundOpvarSetOBB::SetOpvarName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCitadelSoundOpvarSetOBB->OpvarName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCitadelSoundOpvarSetOBB", "m_iszOpvarName", false, CUtlSymbolLarge(value.c_str()));
}
Vector GCCitadelSoundOpvarSetOBB::GetDistanceInnerMins() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCitadelSoundOpvarSetOBB->DistanceInnerMins(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CCitadelSoundOpvarSetOBB", "m_vDistanceInnerMins");
}
void GCCitadelSoundOpvarSetOBB::SetDistanceInnerMins(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCitadelSoundOpvarSetOBB->DistanceInnerMins(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCitadelSoundOpvarSetOBB", "m_vDistanceInnerMins", false, value);
}
Vector GCCitadelSoundOpvarSetOBB::GetDistanceInnerMaxs() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCitadelSoundOpvarSetOBB->DistanceInnerMaxs(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CCitadelSoundOpvarSetOBB", "m_vDistanceInnerMaxs");
}
void GCCitadelSoundOpvarSetOBB::SetDistanceInnerMaxs(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCitadelSoundOpvarSetOBB->DistanceInnerMaxs(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCitadelSoundOpvarSetOBB", "m_vDistanceInnerMaxs", false, value);
}
Vector GCCitadelSoundOpvarSetOBB::GetDistanceOuterMins() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCitadelSoundOpvarSetOBB->DistanceOuterMins(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CCitadelSoundOpvarSetOBB", "m_vDistanceOuterMins");
}
void GCCitadelSoundOpvarSetOBB::SetDistanceOuterMins(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCitadelSoundOpvarSetOBB->DistanceOuterMins(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCitadelSoundOpvarSetOBB", "m_vDistanceOuterMins", false, value);
}
Vector GCCitadelSoundOpvarSetOBB::GetDistanceOuterMaxs() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCitadelSoundOpvarSetOBB->DistanceOuterMaxs(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CCitadelSoundOpvarSetOBB", "m_vDistanceOuterMaxs");
}
void GCCitadelSoundOpvarSetOBB::SetDistanceOuterMaxs(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCitadelSoundOpvarSetOBB->DistanceOuterMaxs(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCitadelSoundOpvarSetOBB", "m_vDistanceOuterMaxs", false, value);
}
int32_t GCCitadelSoundOpvarSetOBB::GetAABBDirection() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCitadelSoundOpvarSetOBB->AABBDirection(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCitadelSoundOpvarSetOBB", "m_nAABBDirection");
}
void GCCitadelSoundOpvarSetOBB::SetAABBDirection(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCitadelSoundOpvarSetOBB->AABBDirection(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCitadelSoundOpvarSetOBB", "m_nAABBDirection", false, value);
}
void* GCCitadelSoundOpvarSetOBB::GetPtr() {
    return m_ptr;
}
std::string GCCitadelSoundOpvarSetOBB::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCCitadelSoundOpvarSetOBB::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseEntity GCCitadelSoundOpvarSetOBB::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCitadelSoundOpvarSetOBB::GetParent(ptr=%p)", m_ptr));
    GCBaseEntity value(m_ptr);
    return value;
}
void GCCitadelSoundOpvarSetOBB::SetParent(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCitadelSoundOpvarSetOBB::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCCitadelSoundOpvarSetOBB(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCCitadelSoundOpvarSetOBB>("CCitadelSoundOpvarSetOBB")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("StackName", &GCCitadelSoundOpvarSetOBB::GetStackName, &GCCitadelSoundOpvarSetOBB::SetStackName)
        .addProperty("OperatorName", &GCCitadelSoundOpvarSetOBB::GetOperatorName, &GCCitadelSoundOpvarSetOBB::SetOperatorName)
        .addProperty("OpvarName", &GCCitadelSoundOpvarSetOBB::GetOpvarName, &GCCitadelSoundOpvarSetOBB::SetOpvarName)
        .addProperty("DistanceInnerMins", &GCCitadelSoundOpvarSetOBB::GetDistanceInnerMins, &GCCitadelSoundOpvarSetOBB::SetDistanceInnerMins)
        .addProperty("DistanceInnerMaxs", &GCCitadelSoundOpvarSetOBB::GetDistanceInnerMaxs, &GCCitadelSoundOpvarSetOBB::SetDistanceInnerMaxs)
        .addProperty("DistanceOuterMins", &GCCitadelSoundOpvarSetOBB::GetDistanceOuterMins, &GCCitadelSoundOpvarSetOBB::SetDistanceOuterMins)
        .addProperty("DistanceOuterMaxs", &GCCitadelSoundOpvarSetOBB::GetDistanceOuterMaxs, &GCCitadelSoundOpvarSetOBB::SetDistanceOuterMaxs)
        .addProperty("AABBDirection", &GCCitadelSoundOpvarSetOBB::GetAABBDirection, &GCCitadelSoundOpvarSetOBB::SetAABBDirection)
        .addProperty("Parent", &GCCitadelSoundOpvarSetOBB::GetParent, &GCCitadelSoundOpvarSetOBB::SetParent)
        .addFunction("ToPtr", &GCCitadelSoundOpvarSetOBB::ToPtr)
        .addFunction("IsValid", &GCCitadelSoundOpvarSetOBB::IsValid)
        .endClass();
}
GSellbackPurchaseEntry_t::GSellbackPurchaseEntry_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GSellbackPurchaseEntry_t::GSellbackPurchaseEntry_t(void *ptr) {
    m_ptr = ptr;
}
uint16_t GSellbackPurchaseEntry_t::GetDefIdx() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: SellbackPurchaseEntry_t->DefIdx(ptr=%p)", m_ptr));
    return GetSchemaValue<uint16_t>(m_ptr, "SellbackPurchaseEntry_t", "m_unDefIdx");
}
void GSellbackPurchaseEntry_t::SetDefIdx(uint16_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: SellbackPurchaseEntry_t->DefIdx(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "SellbackPurchaseEntry_t", "m_unDefIdx", true, value);
}
int32_t GSellbackPurchaseEntry_t::GetCost() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: SellbackPurchaseEntry_t->Cost(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "SellbackPurchaseEntry_t", "m_nCost");
}
void GSellbackPurchaseEntry_t::SetCost(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: SellbackPurchaseEntry_t->Cost(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "SellbackPurchaseEntry_t", "m_nCost", true, value);
}
int32_t GSellbackPurchaseEntry_t::GetPrevArmor() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: SellbackPurchaseEntry_t->PrevArmor(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "SellbackPurchaseEntry_t", "m_nPrevArmor");
}
void GSellbackPurchaseEntry_t::SetPrevArmor(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: SellbackPurchaseEntry_t->PrevArmor(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "SellbackPurchaseEntry_t", "m_nPrevArmor", true, value);
}
bool GSellbackPurchaseEntry_t::GetPrevHelmet() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: SellbackPurchaseEntry_t->PrevHelmet(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "SellbackPurchaseEntry_t", "m_bPrevHelmet");
}
void GSellbackPurchaseEntry_t::SetPrevHelmet(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: SellbackPurchaseEntry_t->PrevHelmet(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "SellbackPurchaseEntry_t", "m_bPrevHelmet", true, value);
}
GCEntityInstance GSellbackPurchaseEntry_t::GetItem() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: SellbackPurchaseEntry_t->Item(ptr=%p)", m_ptr));
    GCEntityInstance value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "SellbackPurchaseEntry_t", "m_hItem").Get()));
    return value;
}
void GSellbackPurchaseEntry_t::SetItem(GCEntityInstance value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: SellbackPurchaseEntry_t->Item(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Item' is not possible.\n");
}
void* GSellbackPurchaseEntry_t::GetPtr() {
    return m_ptr;
}
std::string GSellbackPurchaseEntry_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GSellbackPurchaseEntry_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassSellbackPurchaseEntry_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GSellbackPurchaseEntry_t>("SellbackPurchaseEntry_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("DefIdx", &GSellbackPurchaseEntry_t::GetDefIdx, &GSellbackPurchaseEntry_t::SetDefIdx)
        .addProperty("Cost", &GSellbackPurchaseEntry_t::GetCost, &GSellbackPurchaseEntry_t::SetCost)
        .addProperty("PrevArmor", &GSellbackPurchaseEntry_t::GetPrevArmor, &GSellbackPurchaseEntry_t::SetPrevArmor)
        .addProperty("PrevHelmet", &GSellbackPurchaseEntry_t::GetPrevHelmet, &GSellbackPurchaseEntry_t::SetPrevHelmet)
        .addProperty("Item", &GSellbackPurchaseEntry_t::GetItem, &GSellbackPurchaseEntry_t::SetItem)
        .addFunction("ToPtr", &GSellbackPurchaseEntry_t::ToPtr)
        .addFunction("IsValid", &GSellbackPurchaseEntry_t::IsValid)
        .endClass();
}
GCWeaponFamas::GCWeaponFamas(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCWeaponFamas::GCWeaponFamas(void *ptr) {
    m_ptr = ptr;
}
void* GCWeaponFamas::GetPtr() {
    return m_ptr;
}
std::string GCWeaponFamas::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCWeaponFamas::IsValid() {
    return (m_ptr != nullptr);
}
GCCSWeaponBaseGun GCWeaponFamas::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponFamas::GetParent(ptr=%p)", m_ptr));
    GCCSWeaponBaseGun value(m_ptr);
    return value;
}
void GCWeaponFamas::SetParent(GCCSWeaponBaseGun value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponFamas::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCWeaponFamas(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCWeaponFamas>("CWeaponFamas")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCWeaponFamas::GetParent, &GCWeaponFamas::SetParent)
        .addFunction("ToPtr", &GCWeaponFamas::ToPtr)
        .addFunction("IsValid", &GCWeaponFamas::IsValid)
        .endClass();
}
GCShatterGlassShardPhysics::GCShatterGlassShardPhysics(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCShatterGlassShardPhysics::GCShatterGlassShardPhysics(void *ptr) {
    m_ptr = ptr;
}
bool GCShatterGlassShardPhysics::GetDebris() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CShatterGlassShardPhysics->Debris(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CShatterGlassShardPhysics", "m_bDebris");
}
void GCShatterGlassShardPhysics::SetDebris(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CShatterGlassShardPhysics->Debris(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CShatterGlassShardPhysics", "m_bDebris", false, value);
}
uint32_t GCShatterGlassShardPhysics::GetParentShard() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CShatterGlassShardPhysics->ParentShard(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CShatterGlassShardPhysics", "m_hParentShard");
}
void GCShatterGlassShardPhysics::SetParentShard(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CShatterGlassShardPhysics->ParentShard(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CShatterGlassShardPhysics", "m_hParentShard", false, value);
}
Gshard_model_desc_t GCShatterGlassShardPhysics::GetShardDesc() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CShatterGlassShardPhysics->ShardDesc(ptr=%p)", m_ptr));
    Gshard_model_desc_t value(GetSchemaPtr(m_ptr, "CShatterGlassShardPhysics", "m_ShardDesc"));
    return value;
}
void GCShatterGlassShardPhysics::SetShardDesc(Gshard_model_desc_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CShatterGlassShardPhysics->ShardDesc(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ShardDesc' is not possible.\n");
}
void* GCShatterGlassShardPhysics::GetPtr() {
    return m_ptr;
}
std::string GCShatterGlassShardPhysics::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCShatterGlassShardPhysics::IsValid() {
    return (m_ptr != nullptr);
}
GCPhysicsProp GCShatterGlassShardPhysics::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CShatterGlassShardPhysics::GetParent(ptr=%p)", m_ptr));
    GCPhysicsProp value(m_ptr);
    return value;
}
void GCShatterGlassShardPhysics::SetParent(GCPhysicsProp value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CShatterGlassShardPhysics::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCShatterGlassShardPhysics(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCShatterGlassShardPhysics>("CShatterGlassShardPhysics")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Debris", &GCShatterGlassShardPhysics::GetDebris, &GCShatterGlassShardPhysics::SetDebris)
        .addProperty("ParentShard", &GCShatterGlassShardPhysics::GetParentShard, &GCShatterGlassShardPhysics::SetParentShard)
        .addProperty("ShardDesc", &GCShatterGlassShardPhysics::GetShardDesc, &GCShatterGlassShardPhysics::SetShardDesc)
        .addProperty("Parent", &GCShatterGlassShardPhysics::GetParent, &GCShatterGlassShardPhysics::SetParent)
        .addFunction("ToPtr", &GCShatterGlassShardPhysics::ToPtr)
        .addFunction("IsValid", &GCShatterGlassShardPhysics::IsValid)
        .endClass();
}
GCFilterModel::GCFilterModel(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCFilterModel::GCFilterModel(void *ptr) {
    m_ptr = ptr;
}
std::string GCFilterModel::GetFilterModel() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFilterModel->FilterModel(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFilterModel", "m_iFilterModel").String();
}
void GCFilterModel::SetFilterModel(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFilterModel->FilterModel(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFilterModel", "m_iFilterModel", false, CUtlSymbolLarge(value.c_str()));
}
void* GCFilterModel::GetPtr() {
    return m_ptr;
}
std::string GCFilterModel::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCFilterModel::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseFilter GCFilterModel::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFilterModel::GetParent(ptr=%p)", m_ptr));
    GCBaseFilter value(m_ptr);
    return value;
}
void GCFilterModel::SetParent(GCBaseFilter value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFilterModel::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCFilterModel(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCFilterModel>("CFilterModel")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("FilterModel", &GCFilterModel::GetFilterModel, &GCFilterModel::SetFilterModel)
        .addProperty("Parent", &GCFilterModel::GetParent, &GCFilterModel::SetParent)
        .addFunction("ToPtr", &GCFilterModel::ToPtr)
        .addFunction("IsValid", &GCFilterModel::IsValid)
        .endClass();
}
GCCSPlayerPawnBase::GCCSPlayerPawnBase(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCCSPlayerPawnBase::GCCSPlayerPawnBase(void *ptr) {
    m_ptr = ptr;
}
GCTouchExpansionComponent GCCSPlayerPawnBase::GetCTouchExpansionComponent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawnBase->CTouchExpansionComponent(ptr=%p)", m_ptr));
    GCTouchExpansionComponent value(GetSchemaPtr(m_ptr, "CCSPlayerPawnBase", "m_CTouchExpansionComponent"));
    return value;
}
void GCCSPlayerPawnBase::SetCTouchExpansionComponent(GCTouchExpansionComponent value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawnBase->CTouchExpansionComponent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'CTouchExpansionComponent' is not possible.\n");
}
GCCSPlayer_PingServices GCCSPlayerPawnBase::GetPingServices() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawnBase->PingServices(ptr=%p)", m_ptr));
    GCCSPlayer_PingServices value(*(void**)GetSchemaPtr(m_ptr, "CCSPlayerPawnBase", "m_pPingServices"));
    return value;
}
void GCCSPlayerPawnBase::SetPingServices(GCCSPlayer_PingServices value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawnBase->PingServices(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase","m_pPingServices", false, (char*)value.GetPtr());
}
GCPlayer_ViewModelServices GCCSPlayerPawnBase::GetViewModelServices() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawnBase->ViewModelServices(ptr=%p)", m_ptr));
    GCPlayer_ViewModelServices value(*(void**)GetSchemaPtr(m_ptr, "CCSPlayerPawnBase", "m_pViewModelServices"));
    return value;
}
void GCCSPlayerPawnBase::SetViewModelServices(GCPlayer_ViewModelServices value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawnBase->ViewModelServices(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase","m_pViewModelServices", false, (char*)value.GetPtr());
}
float GCCSPlayerPawnBase::GetBlindUntilTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawnBase->BlindUntilTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawnBase", "m_blindUntilTime");
}
void GCCSPlayerPawnBase::SetBlindUntilTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawnBase->BlindUntilTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase", "m_blindUntilTime", false, value);
}
float GCCSPlayerPawnBase::GetBlindStartTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawnBase->BlindStartTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawnBase", "m_blindStartTime");
}
void GCCSPlayerPawnBase::SetBlindStartTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawnBase->BlindStartTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase", "m_blindStartTime", false, value);
}
uint64_t GCCSPlayerPawnBase::GetPlayerState() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawnBase->PlayerState(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CCSPlayerPawnBase", "m_iPlayerState");
}
void GCCSPlayerPawnBase::SetPlayerState(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawnBase->PlayerState(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase", "m_iPlayerState", false, value);
}
bool GCCSPlayerPawnBase::GetRespawning() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawnBase->Respawning(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawnBase", "m_bRespawning");
}
void GCCSPlayerPawnBase::SetRespawning(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawnBase->Respawning(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase", "m_bRespawning", false, value);
}
float GCCSPlayerPawnBase::GetImmuneToGunGameDamageTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawnBase->ImmuneToGunGameDamageTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawnBase", "m_fImmuneToGunGameDamageTime");
}
void GCCSPlayerPawnBase::SetImmuneToGunGameDamageTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawnBase->ImmuneToGunGameDamageTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase", "m_fImmuneToGunGameDamageTime", false, value);
}
bool GCCSPlayerPawnBase::GetGunGameImmunity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawnBase->GunGameImmunity(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawnBase", "m_bGunGameImmunity");
}
void GCCSPlayerPawnBase::SetGunGameImmunity(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawnBase->GunGameImmunity(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase", "m_bGunGameImmunity", false, value);
}
float GCCSPlayerPawnBase::GetMolotovDamageTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawnBase->MolotovDamageTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawnBase", "m_fMolotovDamageTime");
}
void GCCSPlayerPawnBase::SetMolotovDamageTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawnBase->MolotovDamageTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase", "m_fMolotovDamageTime", false, value);
}
bool GCCSPlayerPawnBase::GetHasMovedSinceSpawn() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawnBase->HasMovedSinceSpawn(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawnBase", "m_bHasMovedSinceSpawn");
}
void GCCSPlayerPawnBase::SetHasMovedSinceSpawn(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawnBase->HasMovedSinceSpawn(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase", "m_bHasMovedSinceSpawn", false, value);
}
int32_t GCCSPlayerPawnBase::GetNumSpawns() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawnBase->NumSpawns(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawnBase", "m_iNumSpawns");
}
void GCCSPlayerPawnBase::SetNumSpawns(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawnBase->NumSpawns(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase", "m_iNumSpawns", false, value);
}
float GCCSPlayerPawnBase::GetIdleTimeSinceLastAction() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawnBase->IdleTimeSinceLastAction(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawnBase", "m_flIdleTimeSinceLastAction");
}
void GCCSPlayerPawnBase::SetIdleTimeSinceLastAction(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawnBase->IdleTimeSinceLastAction(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase", "m_flIdleTimeSinceLastAction", false, value);
}
float GCCSPlayerPawnBase::GetNextRadarUpdateTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawnBase->NextRadarUpdateTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawnBase", "m_fNextRadarUpdateTime");
}
void GCCSPlayerPawnBase::SetNextRadarUpdateTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawnBase->NextRadarUpdateTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase", "m_fNextRadarUpdateTime", false, value);
}
float GCCSPlayerPawnBase::GetFlashDuration() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawnBase->FlashDuration(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawnBase", "m_flFlashDuration");
}
void GCCSPlayerPawnBase::SetFlashDuration(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawnBase->FlashDuration(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase", "m_flFlashDuration", false, value);
}
float GCCSPlayerPawnBase::GetFlashMaxAlpha() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawnBase->FlashMaxAlpha(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawnBase", "m_flFlashMaxAlpha");
}
void GCCSPlayerPawnBase::SetFlashMaxAlpha(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawnBase->FlashMaxAlpha(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase", "m_flFlashMaxAlpha", false, value);
}
float GCCSPlayerPawnBase::GetProgressBarStartTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawnBase->ProgressBarStartTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawnBase", "m_flProgressBarStartTime");
}
void GCCSPlayerPawnBase::SetProgressBarStartTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawnBase->ProgressBarStartTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase", "m_flProgressBarStartTime", false, value);
}
int32_t GCCSPlayerPawnBase::GetProgressBarDuration() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawnBase->ProgressBarDuration(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawnBase", "m_iProgressBarDuration");
}
void GCCSPlayerPawnBase::SetProgressBarDuration(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawnBase->ProgressBarDuration(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase", "m_iProgressBarDuration", false, value);
}
QAngle GCCSPlayerPawnBase::GetEyeAngles() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawnBase->EyeAngles(ptr=%p)", m_ptr));
    return GetSchemaValue<QAngle>(m_ptr, "CCSPlayerPawnBase", "m_angEyeAngles");
}
void GCCSPlayerPawnBase::SetEyeAngles(QAngle value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawnBase->EyeAngles(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase", "m_angEyeAngles", false, value);
}
int32_t GCCSPlayerPawnBase::GetNumEnemiesAtRoundStart() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawnBase->NumEnemiesAtRoundStart(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawnBase", "m_NumEnemiesAtRoundStart");
}
void GCCSPlayerPawnBase::SetNumEnemiesAtRoundStart(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawnBase->NumEnemiesAtRoundStart(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase", "m_NumEnemiesAtRoundStart", false, value);
}
bool GCCSPlayerPawnBase::GetWasNotKilledNaturally() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawnBase->WasNotKilledNaturally(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawnBase", "m_wasNotKilledNaturally");
}
void GCCSPlayerPawnBase::SetWasNotKilledNaturally(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawnBase->WasNotKilledNaturally(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase", "m_wasNotKilledNaturally", false, value);
}
bool GCCSPlayerPawnBase::GetCommittingSuicideOnTeamChange() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawnBase->CommittingSuicideOnTeamChange(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawnBase", "m_bCommittingSuicideOnTeamChange");
}
void GCCSPlayerPawnBase::SetCommittingSuicideOnTeamChange(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawnBase->CommittingSuicideOnTeamChange(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawnBase", "m_bCommittingSuicideOnTeamChange", false, value);
}
GCCSPlayerController GCCSPlayerPawnBase::GetOriginalController() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawnBase->OriginalController(ptr=%p)", m_ptr));
    GCCSPlayerController value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CCSPlayerPawnBase", "m_hOriginalController").Get()));
    return value;
}
void GCCSPlayerPawnBase::SetOriginalController(GCCSPlayerController value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawnBase->OriginalController(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OriginalController' is not possible.\n");
}
void* GCCSPlayerPawnBase::GetPtr() {
    return m_ptr;
}
std::string GCCSPlayerPawnBase::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCCSPlayerPawnBase::IsValid() {
    return (m_ptr != nullptr);
}
GCBasePlayerPawn GCCSPlayerPawnBase::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSPlayerPawnBase::GetParent(ptr=%p)", m_ptr));
    GCBasePlayerPawn value(m_ptr);
    return value;
}
void GCCSPlayerPawnBase::SetParent(GCBasePlayerPawn value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSPlayerPawnBase::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCCSPlayerPawnBase(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCCSPlayerPawnBase>("CCSPlayerPawnBase")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("CTouchExpansionComponent", &GCCSPlayerPawnBase::GetCTouchExpansionComponent, &GCCSPlayerPawnBase::SetCTouchExpansionComponent)
        .addProperty("PingServices", &GCCSPlayerPawnBase::GetPingServices, &GCCSPlayerPawnBase::SetPingServices)
        .addProperty("ViewModelServices", &GCCSPlayerPawnBase::GetViewModelServices, &GCCSPlayerPawnBase::SetViewModelServices)
        .addProperty("BlindUntilTime", &GCCSPlayerPawnBase::GetBlindUntilTime, &GCCSPlayerPawnBase::SetBlindUntilTime)
        .addProperty("BlindStartTime", &GCCSPlayerPawnBase::GetBlindStartTime, &GCCSPlayerPawnBase::SetBlindStartTime)
        .addProperty("PlayerState", &GCCSPlayerPawnBase::GetPlayerState, &GCCSPlayerPawnBase::SetPlayerState)
        .addProperty("Respawning", &GCCSPlayerPawnBase::GetRespawning, &GCCSPlayerPawnBase::SetRespawning)
        .addProperty("ImmuneToGunGameDamageTime", &GCCSPlayerPawnBase::GetImmuneToGunGameDamageTime, &GCCSPlayerPawnBase::SetImmuneToGunGameDamageTime)
        .addProperty("GunGameImmunity", &GCCSPlayerPawnBase::GetGunGameImmunity, &GCCSPlayerPawnBase::SetGunGameImmunity)
        .addProperty("MolotovDamageTime", &GCCSPlayerPawnBase::GetMolotovDamageTime, &GCCSPlayerPawnBase::SetMolotovDamageTime)
        .addProperty("HasMovedSinceSpawn", &GCCSPlayerPawnBase::GetHasMovedSinceSpawn, &GCCSPlayerPawnBase::SetHasMovedSinceSpawn)
        .addProperty("NumSpawns", &GCCSPlayerPawnBase::GetNumSpawns, &GCCSPlayerPawnBase::SetNumSpawns)
        .addProperty("IdleTimeSinceLastAction", &GCCSPlayerPawnBase::GetIdleTimeSinceLastAction, &GCCSPlayerPawnBase::SetIdleTimeSinceLastAction)
        .addProperty("NextRadarUpdateTime", &GCCSPlayerPawnBase::GetNextRadarUpdateTime, &GCCSPlayerPawnBase::SetNextRadarUpdateTime)
        .addProperty("FlashDuration", &GCCSPlayerPawnBase::GetFlashDuration, &GCCSPlayerPawnBase::SetFlashDuration)
        .addProperty("FlashMaxAlpha", &GCCSPlayerPawnBase::GetFlashMaxAlpha, &GCCSPlayerPawnBase::SetFlashMaxAlpha)
        .addProperty("ProgressBarStartTime", &GCCSPlayerPawnBase::GetProgressBarStartTime, &GCCSPlayerPawnBase::SetProgressBarStartTime)
        .addProperty("ProgressBarDuration", &GCCSPlayerPawnBase::GetProgressBarDuration, &GCCSPlayerPawnBase::SetProgressBarDuration)
        .addProperty("EyeAngles", &GCCSPlayerPawnBase::GetEyeAngles, &GCCSPlayerPawnBase::SetEyeAngles)
        .addProperty("NumEnemiesAtRoundStart", &GCCSPlayerPawnBase::GetNumEnemiesAtRoundStart, &GCCSPlayerPawnBase::SetNumEnemiesAtRoundStart)
        .addProperty("WasNotKilledNaturally", &GCCSPlayerPawnBase::GetWasNotKilledNaturally, &GCCSPlayerPawnBase::SetWasNotKilledNaturally)
        .addProperty("CommittingSuicideOnTeamChange", &GCCSPlayerPawnBase::GetCommittingSuicideOnTeamChange, &GCCSPlayerPawnBase::SetCommittingSuicideOnTeamChange)
        .addProperty("OriginalController", &GCCSPlayerPawnBase::GetOriginalController, &GCCSPlayerPawnBase::SetOriginalController)
        .addProperty("Parent", &GCCSPlayerPawnBase::GetParent, &GCCSPlayerPawnBase::SetParent)
        .addFunction("ToPtr", &GCCSPlayerPawnBase::ToPtr)
        .addFunction("IsValid", &GCCSPlayerPawnBase::IsValid)
        .endClass();
}
GCPathTrack::GCPathTrack(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPathTrack::GCPathTrack(void *ptr) {
    m_ptr = ptr;
}
GCPathTrack GCPathTrack::GetPnext() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPathTrack->Pnext(ptr=%p)", m_ptr));
    GCPathTrack value(*(void**)GetSchemaPtr(m_ptr, "CPathTrack", "m_pnext"));
    return value;
}
void GCPathTrack::SetPnext(GCPathTrack value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPathTrack->Pnext(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPathTrack","m_pnext", false, (char*)value.GetPtr());
}
GCPathTrack GCPathTrack::GetPprevious() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPathTrack->Pprevious(ptr=%p)", m_ptr));
    GCPathTrack value(*(void**)GetSchemaPtr(m_ptr, "CPathTrack", "m_pprevious"));
    return value;
}
void GCPathTrack::SetPprevious(GCPathTrack value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPathTrack->Pprevious(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPathTrack","m_pprevious", false, (char*)value.GetPtr());
}
GCPathTrack GCPathTrack::GetPaltpath() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPathTrack->Paltpath(ptr=%p)", m_ptr));
    GCPathTrack value(*(void**)GetSchemaPtr(m_ptr, "CPathTrack", "m_paltpath"));
    return value;
}
void GCPathTrack::SetPaltpath(GCPathTrack value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPathTrack->Paltpath(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPathTrack","m_paltpath", false, (char*)value.GetPtr());
}
float GCPathTrack::GetRadius() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPathTrack->Radius(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPathTrack", "m_flRadius");
}
void GCPathTrack::SetRadius(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPathTrack->Radius(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPathTrack", "m_flRadius", false, value);
}
float GCPathTrack::GetLength() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPathTrack->Length(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPathTrack", "m_length");
}
void GCPathTrack::SetLength(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPathTrack->Length(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPathTrack", "m_length", false, value);
}
std::string GCPathTrack::GetAltName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPathTrack->AltName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPathTrack", "m_altName").String();
}
void GCPathTrack::SetAltName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPathTrack->AltName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPathTrack", "m_altName", false, CUtlSymbolLarge(value.c_str()));
}
int32_t GCPathTrack::GetIterVal() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPathTrack->IterVal(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CPathTrack", "m_nIterVal");
}
void GCPathTrack::SetIterVal(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPathTrack->IterVal(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPathTrack", "m_nIterVal", false, value);
}
uint64_t GCPathTrack::GetOrientationType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPathTrack->OrientationType(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CPathTrack", "m_eOrientationType");
}
void GCPathTrack::SetOrientationType(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPathTrack->OrientationType(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPathTrack", "m_eOrientationType", false, value);
}
GCEntityIOOutput GCPathTrack::GetOnPass() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPathTrack->OnPass(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CPathTrack", "m_OnPass"));
    return value;
}
void GCPathTrack::SetOnPass(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPathTrack->OnPass(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnPass' is not possible.\n");
}
void* GCPathTrack::GetPtr() {
    return m_ptr;
}
std::string GCPathTrack::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPathTrack::IsValid() {
    return (m_ptr != nullptr);
}
GCPointEntity GCPathTrack::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPathTrack::GetParent(ptr=%p)", m_ptr));
    GCPointEntity value(m_ptr);
    return value;
}
void GCPathTrack::SetParent(GCPointEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPathTrack::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCPathTrack(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPathTrack>("CPathTrack")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Pnext", &GCPathTrack::GetPnext, &GCPathTrack::SetPnext)
        .addProperty("Pprevious", &GCPathTrack::GetPprevious, &GCPathTrack::SetPprevious)
        .addProperty("Paltpath", &GCPathTrack::GetPaltpath, &GCPathTrack::SetPaltpath)
        .addProperty("Radius", &GCPathTrack::GetRadius, &GCPathTrack::SetRadius)
        .addProperty("Length", &GCPathTrack::GetLength, &GCPathTrack::SetLength)
        .addProperty("AltName", &GCPathTrack::GetAltName, &GCPathTrack::SetAltName)
        .addProperty("IterVal", &GCPathTrack::GetIterVal, &GCPathTrack::SetIterVal)
        .addProperty("OrientationType", &GCPathTrack::GetOrientationType, &GCPathTrack::SetOrientationType)
        .addProperty("OnPass", &GCPathTrack::GetOnPass, &GCPathTrack::SetOnPass)
        .addProperty("Parent", &GCPathTrack::GetParent, &GCPathTrack::SetParent)
        .addFunction("ToPtr", &GCPathTrack::ToPtr)
        .addFunction("IsValid", &GCPathTrack::IsValid)
        .endClass();
}
GCLogicDistanceCheck::GCLogicDistanceCheck(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCLogicDistanceCheck::GCLogicDistanceCheck(void *ptr) {
    m_ptr = ptr;
}
std::string GCLogicDistanceCheck::GetEntityA() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CLogicDistanceCheck->EntityA(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CLogicDistanceCheck", "m_iszEntityA").String();
}
void GCLogicDistanceCheck::SetEntityA(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CLogicDistanceCheck->EntityA(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CLogicDistanceCheck", "m_iszEntityA", false, CUtlSymbolLarge(value.c_str()));
}
std::string GCLogicDistanceCheck::GetEntityB() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CLogicDistanceCheck->EntityB(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CLogicDistanceCheck", "m_iszEntityB").String();
}
void GCLogicDistanceCheck::SetEntityB(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CLogicDistanceCheck->EntityB(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CLogicDistanceCheck", "m_iszEntityB", false, CUtlSymbolLarge(value.c_str()));
}
float GCLogicDistanceCheck::GetZone1Distance() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CLogicDistanceCheck->Zone1Distance(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CLogicDistanceCheck", "m_flZone1Distance");
}
void GCLogicDistanceCheck::SetZone1Distance(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CLogicDistanceCheck->Zone1Distance(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CLogicDistanceCheck", "m_flZone1Distance", false, value);
}
float GCLogicDistanceCheck::GetZone2Distance() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CLogicDistanceCheck->Zone2Distance(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CLogicDistanceCheck", "m_flZone2Distance");
}
void GCLogicDistanceCheck::SetZone2Distance(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CLogicDistanceCheck->Zone2Distance(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CLogicDistanceCheck", "m_flZone2Distance", false, value);
}
GCEntityIOOutput GCLogicDistanceCheck::GetInZone1() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CLogicDistanceCheck->InZone1(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CLogicDistanceCheck", "m_InZone1"));
    return value;
}
void GCLogicDistanceCheck::SetInZone1(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CLogicDistanceCheck->InZone1(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'InZone1' is not possible.\n");
}
GCEntityIOOutput GCLogicDistanceCheck::GetInZone2() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CLogicDistanceCheck->InZone2(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CLogicDistanceCheck", "m_InZone2"));
    return value;
}
void GCLogicDistanceCheck::SetInZone2(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CLogicDistanceCheck->InZone2(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'InZone2' is not possible.\n");
}
GCEntityIOOutput GCLogicDistanceCheck::GetInZone3() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CLogicDistanceCheck->InZone3(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CLogicDistanceCheck", "m_InZone3"));
    return value;
}
void GCLogicDistanceCheck::SetInZone3(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CLogicDistanceCheck->InZone3(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'InZone3' is not possible.\n");
}
void* GCLogicDistanceCheck::GetPtr() {
    return m_ptr;
}
std::string GCLogicDistanceCheck::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCLogicDistanceCheck::IsValid() {
    return (m_ptr != nullptr);
}
GCLogicalEntity GCLogicDistanceCheck::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CLogicDistanceCheck::GetParent(ptr=%p)", m_ptr));
    GCLogicalEntity value(m_ptr);
    return value;
}
void GCLogicDistanceCheck::SetParent(GCLogicalEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CLogicDistanceCheck::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCLogicDistanceCheck(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCLogicDistanceCheck>("CLogicDistanceCheck")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("EntityA", &GCLogicDistanceCheck::GetEntityA, &GCLogicDistanceCheck::SetEntityA)
        .addProperty("EntityB", &GCLogicDistanceCheck::GetEntityB, &GCLogicDistanceCheck::SetEntityB)
        .addProperty("Zone1Distance", &GCLogicDistanceCheck::GetZone1Distance, &GCLogicDistanceCheck::SetZone1Distance)
        .addProperty("Zone2Distance", &GCLogicDistanceCheck::GetZone2Distance, &GCLogicDistanceCheck::SetZone2Distance)
        .addProperty("InZone1", &GCLogicDistanceCheck::GetInZone1, &GCLogicDistanceCheck::SetInZone1)
        .addProperty("InZone2", &GCLogicDistanceCheck::GetInZone2, &GCLogicDistanceCheck::SetInZone2)
        .addProperty("InZone3", &GCLogicDistanceCheck::GetInZone3, &GCLogicDistanceCheck::SetInZone3)
        .addProperty("Parent", &GCLogicDistanceCheck::GetParent, &GCLogicDistanceCheck::SetParent)
        .addFunction("ToPtr", &GCLogicDistanceCheck::ToPtr)
        .addFunction("IsValid", &GCLogicDistanceCheck::IsValid)
        .endClass();
}
GCOmniLight::GCOmniLight(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCOmniLight::GCOmniLight(void *ptr) {
    m_ptr = ptr;
}
float GCOmniLight::GetInnerAngle() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: COmniLight->InnerAngle(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "COmniLight", "m_flInnerAngle");
}
void GCOmniLight::SetInnerAngle(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: COmniLight->InnerAngle(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "COmniLight", "m_flInnerAngle", false, value);
}
float GCOmniLight::GetOuterAngle() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: COmniLight->OuterAngle(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "COmniLight", "m_flOuterAngle");
}
void GCOmniLight::SetOuterAngle(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: COmniLight->OuterAngle(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "COmniLight", "m_flOuterAngle", false, value);
}
bool GCOmniLight::GetShowLight() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: COmniLight->ShowLight(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "COmniLight", "m_bShowLight");
}
void GCOmniLight::SetShowLight(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: COmniLight->ShowLight(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "COmniLight", "m_bShowLight", false, value);
}
void* GCOmniLight::GetPtr() {
    return m_ptr;
}
std::string GCOmniLight::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCOmniLight::IsValid() {
    return (m_ptr != nullptr);
}
GCBarnLight GCOmniLight::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("COmniLight::GetParent(ptr=%p)", m_ptr));
    GCBarnLight value(m_ptr);
    return value;
}
void GCOmniLight::SetParent(GCBarnLight value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("COmniLight::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCOmniLight(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCOmniLight>("COmniLight")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("InnerAngle", &GCOmniLight::GetInnerAngle, &GCOmniLight::SetInnerAngle)
        .addProperty("OuterAngle", &GCOmniLight::GetOuterAngle, &GCOmniLight::SetOuterAngle)
        .addProperty("ShowLight", &GCOmniLight::GetShowLight, &GCOmniLight::SetShowLight)
        .addProperty("Parent", &GCOmniLight::GetParent, &GCOmniLight::SetParent)
        .addFunction("ToPtr", &GCOmniLight::ToPtr)
        .addFunction("IsValid", &GCOmniLight::IsValid)
        .endClass();
}
GCInfoOffscreenPanoramaTexture::GCInfoOffscreenPanoramaTexture(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCInfoOffscreenPanoramaTexture::GCInfoOffscreenPanoramaTexture(void *ptr) {
    m_ptr = ptr;
}
bool GCInfoOffscreenPanoramaTexture::GetDisabled() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInfoOffscreenPanoramaTexture->Disabled(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CInfoOffscreenPanoramaTexture", "m_bDisabled");
}
void GCInfoOffscreenPanoramaTexture::SetDisabled(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInfoOffscreenPanoramaTexture->Disabled(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInfoOffscreenPanoramaTexture", "m_bDisabled", false, value);
}
int32_t GCInfoOffscreenPanoramaTexture::GetResolutionX() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInfoOffscreenPanoramaTexture->ResolutionX(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CInfoOffscreenPanoramaTexture", "m_nResolutionX");
}
void GCInfoOffscreenPanoramaTexture::SetResolutionX(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInfoOffscreenPanoramaTexture->ResolutionX(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInfoOffscreenPanoramaTexture", "m_nResolutionX", false, value);
}
int32_t GCInfoOffscreenPanoramaTexture::GetResolutionY() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInfoOffscreenPanoramaTexture->ResolutionY(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CInfoOffscreenPanoramaTexture", "m_nResolutionY");
}
void GCInfoOffscreenPanoramaTexture::SetResolutionY(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInfoOffscreenPanoramaTexture->ResolutionY(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInfoOffscreenPanoramaTexture", "m_nResolutionY", false, value);
}
std::string GCInfoOffscreenPanoramaTexture::GetLayoutFileName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInfoOffscreenPanoramaTexture->LayoutFileName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CInfoOffscreenPanoramaTexture", "m_szLayoutFileName").String();
}
void GCInfoOffscreenPanoramaTexture::SetLayoutFileName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInfoOffscreenPanoramaTexture->LayoutFileName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInfoOffscreenPanoramaTexture", "m_szLayoutFileName", false, CUtlSymbolLarge(value.c_str()));
}
std::string GCInfoOffscreenPanoramaTexture::GetRenderAttrName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInfoOffscreenPanoramaTexture->RenderAttrName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CInfoOffscreenPanoramaTexture", "m_RenderAttrName").String();
}
void GCInfoOffscreenPanoramaTexture::SetRenderAttrName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInfoOffscreenPanoramaTexture->RenderAttrName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInfoOffscreenPanoramaTexture", "m_RenderAttrName", false, CUtlSymbolLarge(value.c_str()));
}
std::vector<GCBaseModelEntity> GCInfoOffscreenPanoramaTexture::GetTargetEntities() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInfoOffscreenPanoramaTexture->TargetEntities(ptr=%p)", m_ptr));
    CUtlVector<CHandle<CEntityInstance>>* vec = GetSchemaValue<CUtlVector<CHandle<CEntityInstance>>*>(m_ptr, "CInfoOffscreenPanoramaTexture", "m_TargetEntities"); 
    std::vector<GCBaseModelEntity> outVec; 
    for(int i = 0; i < vec->Count(); i++) { 
        outVec.push_back(GCBaseModelEntity((void*)(vec->Element(i).Get()))); 
    } 
    return outVec;
}
void GCInfoOffscreenPanoramaTexture::SetTargetEntities(std::vector<GCBaseModelEntity> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInfoOffscreenPanoramaTexture->TargetEntities(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'TargetEntities' is not possible.\n");
}
int32_t GCInfoOffscreenPanoramaTexture::GetTargetChangeCount() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInfoOffscreenPanoramaTexture->TargetChangeCount(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CInfoOffscreenPanoramaTexture", "m_nTargetChangeCount");
}
void GCInfoOffscreenPanoramaTexture::SetTargetChangeCount(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInfoOffscreenPanoramaTexture->TargetChangeCount(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInfoOffscreenPanoramaTexture", "m_nTargetChangeCount", false, value);
}
std::vector<CUtlSymbolLarge> GCInfoOffscreenPanoramaTexture::GetCSSClasses() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInfoOffscreenPanoramaTexture->CSSClasses(ptr=%p)", m_ptr));
    CUtlVector<CUtlSymbolLarge>* vec = GetSchemaValue<CUtlVector<CUtlSymbolLarge>*>(m_ptr, "CInfoOffscreenPanoramaTexture", "m_vecCSSClasses"); std::vector<CUtlSymbolLarge> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCInfoOffscreenPanoramaTexture::SetCSSClasses(std::vector<CUtlSymbolLarge> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInfoOffscreenPanoramaTexture->CSSClasses(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<CUtlSymbolLarge>(m_ptr, "CInfoOffscreenPanoramaTexture", "m_vecCSSClasses", false, value);
}
std::string GCInfoOffscreenPanoramaTexture::GetTargetsName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInfoOffscreenPanoramaTexture->TargetsName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CInfoOffscreenPanoramaTexture", "m_szTargetsName").String();
}
void GCInfoOffscreenPanoramaTexture::SetTargetsName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInfoOffscreenPanoramaTexture->TargetsName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInfoOffscreenPanoramaTexture", "m_szTargetsName", false, CUtlSymbolLarge(value.c_str()));
}
void* GCInfoOffscreenPanoramaTexture::GetPtr() {
    return m_ptr;
}
std::string GCInfoOffscreenPanoramaTexture::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCInfoOffscreenPanoramaTexture::IsValid() {
    return (m_ptr != nullptr);
}
GCPointEntity GCInfoOffscreenPanoramaTexture::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CInfoOffscreenPanoramaTexture::GetParent(ptr=%p)", m_ptr));
    GCPointEntity value(m_ptr);
    return value;
}
void GCInfoOffscreenPanoramaTexture::SetParent(GCPointEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CInfoOffscreenPanoramaTexture::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCInfoOffscreenPanoramaTexture(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCInfoOffscreenPanoramaTexture>("CInfoOffscreenPanoramaTexture")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Disabled", &GCInfoOffscreenPanoramaTexture::GetDisabled, &GCInfoOffscreenPanoramaTexture::SetDisabled)
        .addProperty("ResolutionX", &GCInfoOffscreenPanoramaTexture::GetResolutionX, &GCInfoOffscreenPanoramaTexture::SetResolutionX)
        .addProperty("ResolutionY", &GCInfoOffscreenPanoramaTexture::GetResolutionY, &GCInfoOffscreenPanoramaTexture::SetResolutionY)
        .addProperty("LayoutFileName", &GCInfoOffscreenPanoramaTexture::GetLayoutFileName, &GCInfoOffscreenPanoramaTexture::SetLayoutFileName)
        .addProperty("RenderAttrName", &GCInfoOffscreenPanoramaTexture::GetRenderAttrName, &GCInfoOffscreenPanoramaTexture::SetRenderAttrName)
        .addProperty("TargetEntities", &GCInfoOffscreenPanoramaTexture::GetTargetEntities, &GCInfoOffscreenPanoramaTexture::SetTargetEntities)
        .addProperty("TargetChangeCount", &GCInfoOffscreenPanoramaTexture::GetTargetChangeCount, &GCInfoOffscreenPanoramaTexture::SetTargetChangeCount)
        .addProperty("CSSClasses", &GCInfoOffscreenPanoramaTexture::GetCSSClasses, &GCInfoOffscreenPanoramaTexture::SetCSSClasses)
        .addProperty("TargetsName", &GCInfoOffscreenPanoramaTexture::GetTargetsName, &GCInfoOffscreenPanoramaTexture::SetTargetsName)
        .addProperty("Parent", &GCInfoOffscreenPanoramaTexture::GetParent, &GCInfoOffscreenPanoramaTexture::SetParent)
        .addFunction("ToPtr", &GCInfoOffscreenPanoramaTexture::ToPtr)
        .addFunction("IsValid", &GCInfoOffscreenPanoramaTexture::IsValid)
        .endClass();
}
GCInfoVisibilityBox::GCInfoVisibilityBox(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCInfoVisibilityBox::GCInfoVisibilityBox(void *ptr) {
    m_ptr = ptr;
}
int32_t GCInfoVisibilityBox::GetMode() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInfoVisibilityBox->Mode(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CInfoVisibilityBox", "m_nMode");
}
void GCInfoVisibilityBox::SetMode(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInfoVisibilityBox->Mode(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInfoVisibilityBox", "m_nMode", false, value);
}
Vector GCInfoVisibilityBox::GetBoxSize() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInfoVisibilityBox->BoxSize(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CInfoVisibilityBox", "m_vBoxSize");
}
void GCInfoVisibilityBox::SetBoxSize(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInfoVisibilityBox->BoxSize(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInfoVisibilityBox", "m_vBoxSize", false, value);
}
bool GCInfoVisibilityBox::GetEnabled() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInfoVisibilityBox->Enabled(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CInfoVisibilityBox", "m_bEnabled");
}
void GCInfoVisibilityBox::SetEnabled(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInfoVisibilityBox->Enabled(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInfoVisibilityBox", "m_bEnabled", false, value);
}
void* GCInfoVisibilityBox::GetPtr() {
    return m_ptr;
}
std::string GCInfoVisibilityBox::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCInfoVisibilityBox::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseEntity GCInfoVisibilityBox::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CInfoVisibilityBox::GetParent(ptr=%p)", m_ptr));
    GCBaseEntity value(m_ptr);
    return value;
}
void GCInfoVisibilityBox::SetParent(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CInfoVisibilityBox::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCInfoVisibilityBox(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCInfoVisibilityBox>("CInfoVisibilityBox")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Mode", &GCInfoVisibilityBox::GetMode, &GCInfoVisibilityBox::SetMode)
        .addProperty("BoxSize", &GCInfoVisibilityBox::GetBoxSize, &GCInfoVisibilityBox::SetBoxSize)
        .addProperty("Enabled", &GCInfoVisibilityBox::GetEnabled, &GCInfoVisibilityBox::SetEnabled)
        .addProperty("Parent", &GCInfoVisibilityBox::GetParent, &GCInfoVisibilityBox::SetParent)
        .addFunction("ToPtr", &GCInfoVisibilityBox::ToPtr)
        .addFunction("IsValid", &GCInfoVisibilityBox::IsValid)
        .endClass();
}
GCGamePlayerEquip::GCGamePlayerEquip(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCGamePlayerEquip::GCGamePlayerEquip(void *ptr) {
    m_ptr = ptr;
}
void* GCGamePlayerEquip::GetPtr() {
    return m_ptr;
}
std::string GCGamePlayerEquip::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCGamePlayerEquip::IsValid() {
    return (m_ptr != nullptr);
}
GCRulePointEntity GCGamePlayerEquip::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CGamePlayerEquip::GetParent(ptr=%p)", m_ptr));
    GCRulePointEntity value(m_ptr);
    return value;
}
void GCGamePlayerEquip::SetParent(GCRulePointEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CGamePlayerEquip::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCGamePlayerEquip(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCGamePlayerEquip>("CGamePlayerEquip")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCGamePlayerEquip::GetParent, &GCGamePlayerEquip::SetParent)
        .addFunction("ToPtr", &GCGamePlayerEquip::ToPtr)
        .addFunction("IsValid", &GCGamePlayerEquip::IsValid)
        .endClass();
}
GCInfoTargetServerOnly::GCInfoTargetServerOnly(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCInfoTargetServerOnly::GCInfoTargetServerOnly(void *ptr) {
    m_ptr = ptr;
}
void* GCInfoTargetServerOnly::GetPtr() {
    return m_ptr;
}
std::string GCInfoTargetServerOnly::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCInfoTargetServerOnly::IsValid() {
    return (m_ptr != nullptr);
}
GCServerOnlyPointEntity GCInfoTargetServerOnly::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CInfoTargetServerOnly::GetParent(ptr=%p)", m_ptr));
    GCServerOnlyPointEntity value(m_ptr);
    return value;
}
void GCInfoTargetServerOnly::SetParent(GCServerOnlyPointEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CInfoTargetServerOnly::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCInfoTargetServerOnly(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCInfoTargetServerOnly>("CInfoTargetServerOnly")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCInfoTargetServerOnly::GetParent, &GCInfoTargetServerOnly::SetParent)
        .addFunction("ToPtr", &GCInfoTargetServerOnly::ToPtr)
        .addFunction("IsValid", &GCInfoTargetServerOnly::IsValid)
        .endClass();
}
GCSoundOpvarSetPathCornerEntity::GCSoundOpvarSetPathCornerEntity(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCSoundOpvarSetPathCornerEntity::GCSoundOpvarSetPathCornerEntity(void *ptr) {
    m_ptr = ptr;
}
float GCSoundOpvarSetPathCornerEntity::GetDistMinSqr() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSoundOpvarSetPathCornerEntity->DistMinSqr(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CSoundOpvarSetPathCornerEntity", "m_flDistMinSqr");
}
void GCSoundOpvarSetPathCornerEntity::SetDistMinSqr(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSoundOpvarSetPathCornerEntity->DistMinSqr(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSoundOpvarSetPathCornerEntity", "m_flDistMinSqr", false, value);
}
float GCSoundOpvarSetPathCornerEntity::GetDistMaxSqr() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSoundOpvarSetPathCornerEntity->DistMaxSqr(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CSoundOpvarSetPathCornerEntity", "m_flDistMaxSqr");
}
void GCSoundOpvarSetPathCornerEntity::SetDistMaxSqr(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSoundOpvarSetPathCornerEntity->DistMaxSqr(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSoundOpvarSetPathCornerEntity", "m_flDistMaxSqr", false, value);
}
std::string GCSoundOpvarSetPathCornerEntity::GetPathCornerEntityName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSoundOpvarSetPathCornerEntity->PathCornerEntityName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSoundOpvarSetPathCornerEntity", "m_iszPathCornerEntityName").String();
}
void GCSoundOpvarSetPathCornerEntity::SetPathCornerEntityName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSoundOpvarSetPathCornerEntity->PathCornerEntityName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSoundOpvarSetPathCornerEntity", "m_iszPathCornerEntityName", false, CUtlSymbolLarge(value.c_str()));
}
void* GCSoundOpvarSetPathCornerEntity::GetPtr() {
    return m_ptr;
}
std::string GCSoundOpvarSetPathCornerEntity::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCSoundOpvarSetPathCornerEntity::IsValid() {
    return (m_ptr != nullptr);
}
GCSoundOpvarSetPointEntity GCSoundOpvarSetPathCornerEntity::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSoundOpvarSetPathCornerEntity::GetParent(ptr=%p)", m_ptr));
    GCSoundOpvarSetPointEntity value(m_ptr);
    return value;
}
void GCSoundOpvarSetPathCornerEntity::SetParent(GCSoundOpvarSetPointEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSoundOpvarSetPathCornerEntity::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCSoundOpvarSetPathCornerEntity(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCSoundOpvarSetPathCornerEntity>("CSoundOpvarSetPathCornerEntity")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("DistMinSqr", &GCSoundOpvarSetPathCornerEntity::GetDistMinSqr, &GCSoundOpvarSetPathCornerEntity::SetDistMinSqr)
        .addProperty("DistMaxSqr", &GCSoundOpvarSetPathCornerEntity::GetDistMaxSqr, &GCSoundOpvarSetPathCornerEntity::SetDistMaxSqr)
        .addProperty("PathCornerEntityName", &GCSoundOpvarSetPathCornerEntity::GetPathCornerEntityName, &GCSoundOpvarSetPathCornerEntity::SetPathCornerEntityName)
        .addProperty("Parent", &GCSoundOpvarSetPathCornerEntity::GetParent, &GCSoundOpvarSetPathCornerEntity::SetParent)
        .addFunction("ToPtr", &GCSoundOpvarSetPathCornerEntity::ToPtr)
        .addFunction("IsValid", &GCSoundOpvarSetPathCornerEntity::IsValid)
        .endClass();
}
GCCSPlayer_WeaponServices::GCCSPlayer_WeaponServices(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCCSPlayer_WeaponServices::GCCSPlayer_WeaponServices(void *ptr) {
    m_ptr = ptr;
}
float GCCSPlayer_WeaponServices::GetNextAttack() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_WeaponServices->NextAttack(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayer_WeaponServices", "m_flNextAttack");
}
void GCCSPlayer_WeaponServices::SetNextAttack(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_WeaponServices->NextAttack(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_WeaponServices", "m_flNextAttack", false, value);
}
bool GCCSPlayer_WeaponServices::GetIsLookingAtWeapon() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_WeaponServices->IsLookingAtWeapon(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_WeaponServices", "m_bIsLookingAtWeapon");
}
void GCCSPlayer_WeaponServices::SetIsLookingAtWeapon(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_WeaponServices->IsLookingAtWeapon(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_WeaponServices", "m_bIsLookingAtWeapon", false, value);
}
bool GCCSPlayer_WeaponServices::GetIsHoldingLookAtWeapon() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_WeaponServices->IsHoldingLookAtWeapon(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_WeaponServices", "m_bIsHoldingLookAtWeapon");
}
void GCCSPlayer_WeaponServices::SetIsHoldingLookAtWeapon(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_WeaponServices->IsHoldingLookAtWeapon(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_WeaponServices", "m_bIsHoldingLookAtWeapon", false, value);
}
GCBasePlayerWeapon GCCSPlayer_WeaponServices::GetSavedWeapon() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_WeaponServices->SavedWeapon(ptr=%p)", m_ptr));
    GCBasePlayerWeapon value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CCSPlayer_WeaponServices", "m_hSavedWeapon").Get()));
    return value;
}
void GCCSPlayer_WeaponServices::SetSavedWeapon(GCBasePlayerWeapon value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_WeaponServices->SavedWeapon(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'SavedWeapon' is not possible.\n");
}
int32_t GCCSPlayer_WeaponServices::GetTimeToMelee() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_WeaponServices->TimeToMelee(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayer_WeaponServices", "m_nTimeToMelee");
}
void GCCSPlayer_WeaponServices::SetTimeToMelee(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_WeaponServices->TimeToMelee(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_WeaponServices", "m_nTimeToMelee", false, value);
}
int32_t GCCSPlayer_WeaponServices::GetTimeToSecondary() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_WeaponServices->TimeToSecondary(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayer_WeaponServices", "m_nTimeToSecondary");
}
void GCCSPlayer_WeaponServices::SetTimeToSecondary(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_WeaponServices->TimeToSecondary(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_WeaponServices", "m_nTimeToSecondary", false, value);
}
int32_t GCCSPlayer_WeaponServices::GetTimeToPrimary() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_WeaponServices->TimeToPrimary(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayer_WeaponServices", "m_nTimeToPrimary");
}
void GCCSPlayer_WeaponServices::SetTimeToPrimary(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_WeaponServices->TimeToPrimary(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_WeaponServices", "m_nTimeToPrimary", false, value);
}
int32_t GCCSPlayer_WeaponServices::GetTimeToSniperRifle() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_WeaponServices->TimeToSniperRifle(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayer_WeaponServices", "m_nTimeToSniperRifle");
}
void GCCSPlayer_WeaponServices::SetTimeToSniperRifle(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_WeaponServices->TimeToSniperRifle(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_WeaponServices", "m_nTimeToSniperRifle", false, value);
}
bool GCCSPlayer_WeaponServices::GetIsBeingGivenItem() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_WeaponServices->IsBeingGivenItem(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_WeaponServices", "m_bIsBeingGivenItem");
}
void GCCSPlayer_WeaponServices::SetIsBeingGivenItem(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_WeaponServices->IsBeingGivenItem(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_WeaponServices", "m_bIsBeingGivenItem", false, value);
}
bool GCCSPlayer_WeaponServices::GetIsPickingUpItemWithUse() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_WeaponServices->IsPickingUpItemWithUse(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_WeaponServices", "m_bIsPickingUpItemWithUse");
}
void GCCSPlayer_WeaponServices::SetIsPickingUpItemWithUse(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_WeaponServices->IsPickingUpItemWithUse(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_WeaponServices", "m_bIsPickingUpItemWithUse", false, value);
}
bool GCCSPlayer_WeaponServices::GetPickedUpWeapon() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_WeaponServices->PickedUpWeapon(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_WeaponServices", "m_bPickedUpWeapon");
}
void GCCSPlayer_WeaponServices::SetPickedUpWeapon(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_WeaponServices->PickedUpWeapon(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_WeaponServices", "m_bPickedUpWeapon", false, value);
}
bool GCCSPlayer_WeaponServices::GetDisableAutoDeploy() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_WeaponServices->DisableAutoDeploy(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_WeaponServices", "m_bDisableAutoDeploy");
}
void GCCSPlayer_WeaponServices::SetDisableAutoDeploy(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_WeaponServices->DisableAutoDeploy(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_WeaponServices", "m_bDisableAutoDeploy", false, value);
}
bool GCCSPlayer_WeaponServices::GetIsPickingUpGroundWeapon() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_WeaponServices->IsPickingUpGroundWeapon(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_WeaponServices", "m_bIsPickingUpGroundWeapon");
}
void GCCSPlayer_WeaponServices::SetIsPickingUpGroundWeapon(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_WeaponServices->IsPickingUpGroundWeapon(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_WeaponServices", "m_bIsPickingUpGroundWeapon", false, value);
}
uint32_t GCCSPlayer_WeaponServices::GetOldShootPositionHistoryCount() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_WeaponServices->OldShootPositionHistoryCount(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CCSPlayer_WeaponServices", "m_nOldShootPositionHistoryCount");
}
void GCCSPlayer_WeaponServices::SetOldShootPositionHistoryCount(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_WeaponServices->OldShootPositionHistoryCount(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_WeaponServices", "m_nOldShootPositionHistoryCount", false, value);
}
uint32_t GCCSPlayer_WeaponServices::GetOldInputHistoryCount() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_WeaponServices->OldInputHistoryCount(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CCSPlayer_WeaponServices", "m_nOldInputHistoryCount");
}
void GCCSPlayer_WeaponServices::SetOldInputHistoryCount(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_WeaponServices->OldInputHistoryCount(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_WeaponServices", "m_nOldInputHistoryCount", false, value);
}
void* GCCSPlayer_WeaponServices::GetPtr() {
    return m_ptr;
}
std::string GCCSPlayer_WeaponServices::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCCSPlayer_WeaponServices::IsValid() {
    return (m_ptr != nullptr);
}
GCPlayer_WeaponServices GCCSPlayer_WeaponServices::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSPlayer_WeaponServices::GetParent(ptr=%p)", m_ptr));
    GCPlayer_WeaponServices value(m_ptr);
    return value;
}
void GCCSPlayer_WeaponServices::SetParent(GCPlayer_WeaponServices value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSPlayer_WeaponServices::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCCSPlayer_WeaponServices(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCCSPlayer_WeaponServices>("CCSPlayer_WeaponServices")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("NextAttack", &GCCSPlayer_WeaponServices::GetNextAttack, &GCCSPlayer_WeaponServices::SetNextAttack)
        .addProperty("IsLookingAtWeapon", &GCCSPlayer_WeaponServices::GetIsLookingAtWeapon, &GCCSPlayer_WeaponServices::SetIsLookingAtWeapon)
        .addProperty("IsHoldingLookAtWeapon", &GCCSPlayer_WeaponServices::GetIsHoldingLookAtWeapon, &GCCSPlayer_WeaponServices::SetIsHoldingLookAtWeapon)
        .addProperty("SavedWeapon", &GCCSPlayer_WeaponServices::GetSavedWeapon, &GCCSPlayer_WeaponServices::SetSavedWeapon)
        .addProperty("TimeToMelee", &GCCSPlayer_WeaponServices::GetTimeToMelee, &GCCSPlayer_WeaponServices::SetTimeToMelee)
        .addProperty("TimeToSecondary", &GCCSPlayer_WeaponServices::GetTimeToSecondary, &GCCSPlayer_WeaponServices::SetTimeToSecondary)
        .addProperty("TimeToPrimary", &GCCSPlayer_WeaponServices::GetTimeToPrimary, &GCCSPlayer_WeaponServices::SetTimeToPrimary)
        .addProperty("TimeToSniperRifle", &GCCSPlayer_WeaponServices::GetTimeToSniperRifle, &GCCSPlayer_WeaponServices::SetTimeToSniperRifle)
        .addProperty("IsBeingGivenItem", &GCCSPlayer_WeaponServices::GetIsBeingGivenItem, &GCCSPlayer_WeaponServices::SetIsBeingGivenItem)
        .addProperty("IsPickingUpItemWithUse", &GCCSPlayer_WeaponServices::GetIsPickingUpItemWithUse, &GCCSPlayer_WeaponServices::SetIsPickingUpItemWithUse)
        .addProperty("PickedUpWeapon", &GCCSPlayer_WeaponServices::GetPickedUpWeapon, &GCCSPlayer_WeaponServices::SetPickedUpWeapon)
        .addProperty("DisableAutoDeploy", &GCCSPlayer_WeaponServices::GetDisableAutoDeploy, &GCCSPlayer_WeaponServices::SetDisableAutoDeploy)
        .addProperty("IsPickingUpGroundWeapon", &GCCSPlayer_WeaponServices::GetIsPickingUpGroundWeapon, &GCCSPlayer_WeaponServices::SetIsPickingUpGroundWeapon)
        .addProperty("OldShootPositionHistoryCount", &GCCSPlayer_WeaponServices::GetOldShootPositionHistoryCount, &GCCSPlayer_WeaponServices::SetOldShootPositionHistoryCount)
        .addProperty("OldInputHistoryCount", &GCCSPlayer_WeaponServices::GetOldInputHistoryCount, &GCCSPlayer_WeaponServices::SetOldInputHistoryCount)
        .addProperty("Parent", &GCCSPlayer_WeaponServices::GetParent, &GCCSPlayer_WeaponServices::SetParent)
        .addFunction("ToPtr", &GCCSPlayer_WeaponServices::ToPtr)
        .addFunction("IsValid", &GCCSPlayer_WeaponServices::IsValid)
        .endClass();
}
GCEntityFlame::GCEntityFlame(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCEntityFlame::GCEntityFlame(void *ptr) {
    m_ptr = ptr;
}
GCBaseEntity GCEntityFlame::GetEntAttached() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEntityFlame->EntAttached(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CEntityFlame", "m_hEntAttached").Get()));
    return value;
}
void GCEntityFlame::SetEntAttached(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEntityFlame->EntAttached(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'EntAttached' is not possible.\n");
}
bool GCEntityFlame::GetCheapEffect() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEntityFlame->CheapEffect(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CEntityFlame", "m_bCheapEffect");
}
void GCEntityFlame::SetCheapEffect(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEntityFlame->CheapEffect(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEntityFlame", "m_bCheapEffect", false, value);
}
float GCEntityFlame::GetSize() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEntityFlame->Size(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CEntityFlame", "m_flSize");
}
void GCEntityFlame::SetSize(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEntityFlame->Size(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEntityFlame", "m_flSize", false, value);
}
bool GCEntityFlame::GetUseHitboxes() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEntityFlame->UseHitboxes(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CEntityFlame", "m_bUseHitboxes");
}
void GCEntityFlame::SetUseHitboxes(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEntityFlame->UseHitboxes(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEntityFlame", "m_bUseHitboxes", false, value);
}
int32_t GCEntityFlame::GetNumHitboxFires() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEntityFlame->NumHitboxFires(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CEntityFlame", "m_iNumHitboxFires");
}
void GCEntityFlame::SetNumHitboxFires(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEntityFlame->NumHitboxFires(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEntityFlame", "m_iNumHitboxFires", false, value);
}
float GCEntityFlame::GetHitboxFireScale() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEntityFlame->HitboxFireScale(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CEntityFlame", "m_flHitboxFireScale");
}
void GCEntityFlame::SetHitboxFireScale(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEntityFlame->HitboxFireScale(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEntityFlame", "m_flHitboxFireScale", false, value);
}
float GCEntityFlame::GetLifetime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEntityFlame->Lifetime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CEntityFlame", "m_flLifetime");
}
void GCEntityFlame::SetLifetime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEntityFlame->Lifetime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEntityFlame", "m_flLifetime", false, value);
}
GCBaseEntity GCEntityFlame::GetAttacker() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEntityFlame->Attacker(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CEntityFlame", "m_hAttacker").Get()));
    return value;
}
void GCEntityFlame::SetAttacker(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEntityFlame->Attacker(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Attacker' is not possible.\n");
}
int32_t GCEntityFlame::GetDangerSound() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEntityFlame->DangerSound(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CEntityFlame", "m_iDangerSound");
}
void GCEntityFlame::SetDangerSound(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEntityFlame->DangerSound(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEntityFlame", "m_iDangerSound", false, value);
}
float GCEntityFlame::GetDirectDamagePerSecond() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEntityFlame->DirectDamagePerSecond(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CEntityFlame", "m_flDirectDamagePerSecond");
}
void GCEntityFlame::SetDirectDamagePerSecond(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEntityFlame->DirectDamagePerSecond(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEntityFlame", "m_flDirectDamagePerSecond", false, value);
}
int32_t GCEntityFlame::GetCustomDamageType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEntityFlame->CustomDamageType(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CEntityFlame", "m_iCustomDamageType");
}
void GCEntityFlame::SetCustomDamageType(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEntityFlame->CustomDamageType(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEntityFlame", "m_iCustomDamageType", false, value);
}
void* GCEntityFlame::GetPtr() {
    return m_ptr;
}
std::string GCEntityFlame::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCEntityFlame::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseEntity GCEntityFlame::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CEntityFlame::GetParent(ptr=%p)", m_ptr));
    GCBaseEntity value(m_ptr);
    return value;
}
void GCEntityFlame::SetParent(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CEntityFlame::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCEntityFlame(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCEntityFlame>("CEntityFlame")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("EntAttached", &GCEntityFlame::GetEntAttached, &GCEntityFlame::SetEntAttached)
        .addProperty("CheapEffect", &GCEntityFlame::GetCheapEffect, &GCEntityFlame::SetCheapEffect)
        .addProperty("Size", &GCEntityFlame::GetSize, &GCEntityFlame::SetSize)
        .addProperty("UseHitboxes", &GCEntityFlame::GetUseHitboxes, &GCEntityFlame::SetUseHitboxes)
        .addProperty("NumHitboxFires", &GCEntityFlame::GetNumHitboxFires, &GCEntityFlame::SetNumHitboxFires)
        .addProperty("HitboxFireScale", &GCEntityFlame::GetHitboxFireScale, &GCEntityFlame::SetHitboxFireScale)
        .addProperty("Lifetime", &GCEntityFlame::GetLifetime, &GCEntityFlame::SetLifetime)
        .addProperty("Attacker", &GCEntityFlame::GetAttacker, &GCEntityFlame::SetAttacker)
        .addProperty("DangerSound", &GCEntityFlame::GetDangerSound, &GCEntityFlame::SetDangerSound)
        .addProperty("DirectDamagePerSecond", &GCEntityFlame::GetDirectDamagePerSecond, &GCEntityFlame::SetDirectDamagePerSecond)
        .addProperty("CustomDamageType", &GCEntityFlame::GetCustomDamageType, &GCEntityFlame::SetCustomDamageType)
        .addProperty("Parent", &GCEntityFlame::GetParent, &GCEntityFlame::SetParent)
        .addFunction("ToPtr", &GCEntityFlame::ToPtr)
        .addFunction("IsValid", &GCEntityFlame::IsValid)
        .endClass();
}
GCWeaponMP9::GCWeaponMP9(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCWeaponMP9::GCWeaponMP9(void *ptr) {
    m_ptr = ptr;
}
void* GCWeaponMP9::GetPtr() {
    return m_ptr;
}
std::string GCWeaponMP9::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCWeaponMP9::IsValid() {
    return (m_ptr != nullptr);
}
GCCSWeaponBaseGun GCWeaponMP9::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponMP9::GetParent(ptr=%p)", m_ptr));
    GCCSWeaponBaseGun value(m_ptr);
    return value;
}
void GCWeaponMP9::SetParent(GCCSWeaponBaseGun value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponMP9::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCWeaponMP9(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCWeaponMP9>("CWeaponMP9")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCWeaponMP9::GetParent, &GCWeaponMP9::SetParent)
        .addFunction("ToPtr", &GCWeaponMP9::ToPtr)
        .addFunction("IsValid", &GCWeaponMP9::IsValid)
        .endClass();
}
GCCSBot::GCCSBot(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCCSBot::GCCSBot(void *ptr) {
    m_ptr = ptr;
}
Vector GCCSBot::GetEyePosition() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->EyePosition(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CCSBot", "m_eyePosition");
}
void GCCSBot::SetEyePosition(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->EyePosition(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_eyePosition", false, value);
}
std::string GCCSBot::GetName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->Name(ptr=%p)", m_ptr));
    return GetSchemaValuePtr<char>(m_ptr, "CCSBot", "m_name");
}
void GCCSBot::SetName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->Name(ptr=%p)", m_ptr));
    WriteSchemaPtrValue(m_ptr, "CCSBot", "m_name", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 64);
}
float GCCSBot::GetCombatRange() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->CombatRange(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_combatRange");
}
void GCCSBot::SetCombatRange(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->CombatRange(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_combatRange", false, value);
}
bool GCCSBot::GetIsRogue() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->IsRogue(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_isRogue");
}
void GCCSBot::SetIsRogue(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->IsRogue(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_isRogue", false, value);
}
GCountdownTimer GCCSBot::GetRogueTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->RogueTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CCSBot", "m_rogueTimer"));
    return value;
}
void GCCSBot::SetRogueTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->RogueTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'RogueTimer' is not possible.\n");
}
bool GCCSBot::GetDiedLastRound() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->DiedLastRound(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_diedLastRound");
}
void GCCSBot::SetDiedLastRound(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->DiedLastRound(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_diedLastRound", false, value);
}
float GCCSBot::GetSafeTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->SafeTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_safeTime");
}
void GCCSBot::SetSafeTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->SafeTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_safeTime", false, value);
}
bool GCCSBot::GetWasSafe() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->WasSafe(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_wasSafe");
}
void GCCSBot::SetWasSafe(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->WasSafe(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_wasSafe", false, value);
}
bool GCCSBot::GetBlindFire() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->BlindFire(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_blindFire");
}
void GCCSBot::SetBlindFire(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->BlindFire(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_blindFire", false, value);
}
GCountdownTimer GCCSBot::GetSurpriseTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->SurpriseTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CCSBot", "m_surpriseTimer"));
    return value;
}
void GCCSBot::SetSurpriseTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->SurpriseTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'SurpriseTimer' is not possible.\n");
}
bool GCCSBot::GetAllowActive() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->AllowActive(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_bAllowActive");
}
void GCCSBot::SetAllowActive(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->AllowActive(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_bAllowActive", false, value);
}
bool GCCSBot::GetIsFollowing() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->IsFollowing(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_isFollowing");
}
void GCCSBot::SetIsFollowing(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->IsFollowing(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_isFollowing", false, value);
}
GCCSPlayerPawn GCCSBot::GetLeader() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->Leader(ptr=%p)", m_ptr));
    GCCSPlayerPawn value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CCSBot", "m_leader").Get()));
    return value;
}
void GCCSBot::SetLeader(GCCSPlayerPawn value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->Leader(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Leader' is not possible.\n");
}
float GCCSBot::GetFollowTimestamp() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->FollowTimestamp(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_followTimestamp");
}
void GCCSBot::SetFollowTimestamp(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->FollowTimestamp(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_followTimestamp", false, value);
}
float GCCSBot::GetAllowAutoFollowTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->AllowAutoFollowTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_allowAutoFollowTime");
}
void GCCSBot::SetAllowAutoFollowTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->AllowAutoFollowTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_allowAutoFollowTime", false, value);
}
GCountdownTimer GCCSBot::GetHurryTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->HurryTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CCSBot", "m_hurryTimer"));
    return value;
}
void GCCSBot::SetHurryTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->HurryTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'HurryTimer' is not possible.\n");
}
GCountdownTimer GCCSBot::GetAlertTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->AlertTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CCSBot", "m_alertTimer"));
    return value;
}
void GCCSBot::SetAlertTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->AlertTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'AlertTimer' is not possible.\n");
}
GCountdownTimer GCCSBot::GetSneakTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->SneakTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CCSBot", "m_sneakTimer"));
    return value;
}
void GCCSBot::SetSneakTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->SneakTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'SneakTimer' is not possible.\n");
}
GCountdownTimer GCCSBot::GetPanicTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->PanicTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CCSBot", "m_panicTimer"));
    return value;
}
void GCCSBot::SetPanicTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->PanicTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'PanicTimer' is not possible.\n");
}
float GCCSBot::GetStateTimestamp() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->StateTimestamp(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_stateTimestamp");
}
void GCCSBot::SetStateTimestamp(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->StateTimestamp(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_stateTimestamp", false, value);
}
bool GCCSBot::GetIsAttacking() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->IsAttacking(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_isAttacking");
}
void GCCSBot::SetIsAttacking(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->IsAttacking(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_isAttacking", false, value);
}
bool GCCSBot::GetIsOpeningDoor() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->IsOpeningDoor(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_isOpeningDoor");
}
void GCCSBot::SetIsOpeningDoor(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->IsOpeningDoor(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_isOpeningDoor", false, value);
}
GCBaseEntity GCCSBot::GetTaskEntity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->TaskEntity(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CCSBot", "m_taskEntity").Get()));
    return value;
}
void GCCSBot::SetTaskEntity(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->TaskEntity(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'TaskEntity' is not possible.\n");
}
Vector GCCSBot::GetGoalPosition() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->GoalPosition(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CCSBot", "m_goalPosition");
}
void GCCSBot::SetGoalPosition(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->GoalPosition(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_goalPosition", false, value);
}
GCBaseEntity GCCSBot::GetGoalEntity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->GoalEntity(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CCSBot", "m_goalEntity").Get()));
    return value;
}
void GCCSBot::SetGoalEntity(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->GoalEntity(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'GoalEntity' is not possible.\n");
}
GCBaseEntity GCCSBot::GetAvoid() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->Avoid(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CCSBot", "m_avoid").Get()));
    return value;
}
void GCCSBot::SetAvoid(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->Avoid(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Avoid' is not possible.\n");
}
float GCCSBot::GetAvoidTimestamp() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->AvoidTimestamp(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_avoidTimestamp");
}
void GCCSBot::SetAvoidTimestamp(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->AvoidTimestamp(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_avoidTimestamp", false, value);
}
bool GCCSBot::GetIsStopping() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->IsStopping(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_isStopping");
}
void GCCSBot::SetIsStopping(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->IsStopping(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_isStopping", false, value);
}
bool GCCSBot::GetHasVisitedEnemySpawn() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->HasVisitedEnemySpawn(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_hasVisitedEnemySpawn");
}
void GCCSBot::SetHasVisitedEnemySpawn(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->HasVisitedEnemySpawn(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_hasVisitedEnemySpawn", false, value);
}
GIntervalTimer GCCSBot::GetStillTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->StillTimer(ptr=%p)", m_ptr));
    GIntervalTimer value(GetSchemaPtr(m_ptr, "CCSBot", "m_stillTimer"));
    return value;
}
void GCCSBot::SetStillTimer(GIntervalTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->StillTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'StillTimer' is not possible.\n");
}
bool GCCSBot::GetEyeAnglesUnderPathFinderControl() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->EyeAnglesUnderPathFinderControl(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_bEyeAnglesUnderPathFinderControl");
}
void GCCSBot::SetEyeAnglesUnderPathFinderControl(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->EyeAnglesUnderPathFinderControl(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_bEyeAnglesUnderPathFinderControl", false, value);
}
int32_t GCCSBot::GetPathIndex() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->PathIndex(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSBot", "m_pathIndex");
}
void GCCSBot::SetPathIndex(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->PathIndex(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_pathIndex", false, value);
}
float GCCSBot::GetAreaEnteredTimestamp() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->AreaEnteredTimestamp(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_areaEnteredTimestamp");
}
void GCCSBot::SetAreaEnteredTimestamp(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->AreaEnteredTimestamp(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_areaEnteredTimestamp", false, value);
}
GCountdownTimer GCCSBot::GetRepathTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->RepathTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CCSBot", "m_repathTimer"));
    return value;
}
void GCCSBot::SetRepathTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->RepathTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'RepathTimer' is not possible.\n");
}
GCountdownTimer GCCSBot::GetAvoidFriendTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->AvoidFriendTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CCSBot", "m_avoidFriendTimer"));
    return value;
}
void GCCSBot::SetAvoidFriendTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->AvoidFriendTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'AvoidFriendTimer' is not possible.\n");
}
bool GCCSBot::GetIsFriendInTheWay() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->IsFriendInTheWay(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_isFriendInTheWay");
}
void GCCSBot::SetIsFriendInTheWay(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->IsFriendInTheWay(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_isFriendInTheWay", false, value);
}
GCountdownTimer GCCSBot::GetPoliteTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->PoliteTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CCSBot", "m_politeTimer"));
    return value;
}
void GCCSBot::SetPoliteTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->PoliteTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'PoliteTimer' is not possible.\n");
}
bool GCCSBot::GetIsWaitingBehindFriend() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->IsWaitingBehindFriend(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_isWaitingBehindFriend");
}
void GCCSBot::SetIsWaitingBehindFriend(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->IsWaitingBehindFriend(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_isWaitingBehindFriend", false, value);
}
float GCCSBot::GetPathLadderEnd() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->PathLadderEnd(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_pathLadderEnd");
}
void GCCSBot::SetPathLadderEnd(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->PathLadderEnd(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_pathLadderEnd", false, value);
}
GCountdownTimer GCCSBot::GetMustRunTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->MustRunTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CCSBot", "m_mustRunTimer"));
    return value;
}
void GCCSBot::SetMustRunTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->MustRunTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'MustRunTimer' is not possible.\n");
}
GCountdownTimer GCCSBot::GetWaitTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->WaitTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CCSBot", "m_waitTimer"));
    return value;
}
void GCCSBot::SetWaitTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->WaitTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'WaitTimer' is not possible.\n");
}
GCountdownTimer GCCSBot::GetUpdateTravelDistanceTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->UpdateTravelDistanceTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CCSBot", "m_updateTravelDistanceTimer"));
    return value;
}
void GCCSBot::SetUpdateTravelDistanceTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->UpdateTravelDistanceTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'UpdateTravelDistanceTimer' is not possible.\n");
}
std::vector<float> GCCSBot::GetPlayerTravelDistance() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->PlayerTravelDistance(ptr=%p,size=64)", m_ptr));
    float* outValue = (float*)GetSchemaPtr(m_ptr, "CCSBot", "m_playerTravelDistance"); std::vector<float> ret; for(int i = 0; i < 64; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCCSBot::SetPlayerTravelDistance(std::vector<float> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->PlayerTravelDistance(ptr=%p,size=64)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'PlayerTravelDistance' is not possible.\n");
}
uint32_t GCCSBot::GetTravelDistancePhase() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->TravelDistancePhase(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CCSBot", "m_travelDistancePhase");
}
void GCCSBot::SetTravelDistancePhase(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->TravelDistancePhase(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_travelDistancePhase", false, value);
}
uint32_t GCCSBot::GetHostageEscortCount() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->HostageEscortCount(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CCSBot", "m_hostageEscortCount");
}
void GCCSBot::SetHostageEscortCount(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->HostageEscortCount(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_hostageEscortCount", false, value);
}
float GCCSBot::GetHostageEscortCountTimestamp() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->HostageEscortCountTimestamp(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_hostageEscortCountTimestamp");
}
void GCCSBot::SetHostageEscortCountTimestamp(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->HostageEscortCountTimestamp(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_hostageEscortCountTimestamp", false, value);
}
int32_t GCCSBot::GetDesiredTeam() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->DesiredTeam(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSBot", "m_desiredTeam");
}
void GCCSBot::SetDesiredTeam(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->DesiredTeam(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_desiredTeam", false, value);
}
bool GCCSBot::GetHasJoined() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->HasJoined(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_hasJoined");
}
void GCCSBot::SetHasJoined(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->HasJoined(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_hasJoined", false, value);
}
bool GCCSBot::GetIsWaitingForHostage() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->IsWaitingForHostage(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_isWaitingForHostage");
}
void GCCSBot::SetIsWaitingForHostage(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->IsWaitingForHostage(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_isWaitingForHostage", false, value);
}
GCountdownTimer GCCSBot::GetInhibitWaitingForHostageTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->InhibitWaitingForHostageTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CCSBot", "m_inhibitWaitingForHostageTimer"));
    return value;
}
void GCCSBot::SetInhibitWaitingForHostageTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->InhibitWaitingForHostageTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'InhibitWaitingForHostageTimer' is not possible.\n");
}
GCountdownTimer GCCSBot::GetWaitForHostageTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->WaitForHostageTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CCSBot", "m_waitForHostageTimer"));
    return value;
}
void GCCSBot::SetWaitForHostageTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->WaitForHostageTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'WaitForHostageTimer' is not possible.\n");
}
Vector GCCSBot::GetNoisePosition() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->NoisePosition(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CCSBot", "m_noisePosition");
}
void GCCSBot::SetNoisePosition(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->NoisePosition(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_noisePosition", false, value);
}
float GCCSBot::GetNoiseTravelDistance() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->NoiseTravelDistance(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_noiseTravelDistance");
}
void GCCSBot::SetNoiseTravelDistance(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->NoiseTravelDistance(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_noiseTravelDistance", false, value);
}
float GCCSBot::GetNoiseTimestamp() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->NoiseTimestamp(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_noiseTimestamp");
}
void GCCSBot::SetNoiseTimestamp(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->NoiseTimestamp(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_noiseTimestamp", false, value);
}
GCCSPlayerPawn GCCSBot::GetNoiseSource() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->NoiseSource(ptr=%p)", m_ptr));
    GCCSPlayerPawn value(*(void**)GetSchemaPtr(m_ptr, "CCSBot", "m_noiseSource"));
    return value;
}
void GCCSBot::SetNoiseSource(GCCSPlayerPawn value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->NoiseSource(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot","m_noiseSource", false, (char*)value.GetPtr());
}
GCountdownTimer GCCSBot::GetNoiseBendTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->NoiseBendTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CCSBot", "m_noiseBendTimer"));
    return value;
}
void GCCSBot::SetNoiseBendTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->NoiseBendTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'NoiseBendTimer' is not possible.\n");
}
Vector GCCSBot::GetBentNoisePosition() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->BentNoisePosition(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CCSBot", "m_bentNoisePosition");
}
void GCCSBot::SetBentNoisePosition(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->BentNoisePosition(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_bentNoisePosition", false, value);
}
bool GCCSBot::GetBendNoisePositionValid() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->BendNoisePositionValid(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_bendNoisePositionValid");
}
void GCCSBot::SetBendNoisePositionValid(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->BendNoisePositionValid(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_bendNoisePositionValid", false, value);
}
float GCCSBot::GetLookAroundStateTimestamp() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->LookAroundStateTimestamp(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_lookAroundStateTimestamp");
}
void GCCSBot::SetLookAroundStateTimestamp(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->LookAroundStateTimestamp(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_lookAroundStateTimestamp", false, value);
}
float GCCSBot::GetLookAheadAngle() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->LookAheadAngle(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_lookAheadAngle");
}
void GCCSBot::SetLookAheadAngle(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->LookAheadAngle(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_lookAheadAngle", false, value);
}
float GCCSBot::GetForwardAngle() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->ForwardAngle(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_forwardAngle");
}
void GCCSBot::SetForwardAngle(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->ForwardAngle(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_forwardAngle", false, value);
}
float GCCSBot::GetInhibitLookAroundTimestamp() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->InhibitLookAroundTimestamp(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_inhibitLookAroundTimestamp");
}
void GCCSBot::SetInhibitLookAroundTimestamp(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->InhibitLookAroundTimestamp(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_inhibitLookAroundTimestamp", false, value);
}
Vector GCCSBot::GetLookAtSpot() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->LookAtSpot(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CCSBot", "m_lookAtSpot");
}
void GCCSBot::SetLookAtSpot(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->LookAtSpot(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_lookAtSpot", false, value);
}
float GCCSBot::GetLookAtSpotDuration() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->LookAtSpotDuration(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_lookAtSpotDuration");
}
void GCCSBot::SetLookAtSpotDuration(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->LookAtSpotDuration(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_lookAtSpotDuration", false, value);
}
float GCCSBot::GetLookAtSpotTimestamp() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->LookAtSpotTimestamp(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_lookAtSpotTimestamp");
}
void GCCSBot::SetLookAtSpotTimestamp(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->LookAtSpotTimestamp(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_lookAtSpotTimestamp", false, value);
}
float GCCSBot::GetLookAtSpotAngleTolerance() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->LookAtSpotAngleTolerance(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_lookAtSpotAngleTolerance");
}
void GCCSBot::SetLookAtSpotAngleTolerance(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->LookAtSpotAngleTolerance(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_lookAtSpotAngleTolerance", false, value);
}
bool GCCSBot::GetLookAtSpotClearIfClose() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->LookAtSpotClearIfClose(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_lookAtSpotClearIfClose");
}
void GCCSBot::SetLookAtSpotClearIfClose(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->LookAtSpotClearIfClose(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_lookAtSpotClearIfClose", false, value);
}
bool GCCSBot::GetLookAtSpotAttack() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->LookAtSpotAttack(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_lookAtSpotAttack");
}
void GCCSBot::SetLookAtSpotAttack(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->LookAtSpotAttack(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_lookAtSpotAttack", false, value);
}
std::string GCCSBot::GetLookAtDesc() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->LookAtDesc(ptr=%p)", m_ptr));
    return GetSchemaValuePtr<char>(m_ptr, "CCSBot", "m_lookAtDesc");
}
void GCCSBot::SetLookAtDesc(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->LookAtDesc(ptr=%p)", m_ptr));
    WriteSchemaPtrValue(m_ptr, "CCSBot", "m_lookAtDesc", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), value.size());
}
float GCCSBot::GetPeripheralTimestamp() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->PeripheralTimestamp(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_peripheralTimestamp");
}
void GCCSBot::SetPeripheralTimestamp(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->PeripheralTimestamp(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_peripheralTimestamp", false, value);
}
uint32_t GCCSBot::GetApproachPointCount() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->ApproachPointCount(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CCSBot", "m_approachPointCount");
}
void GCCSBot::SetApproachPointCount(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->ApproachPointCount(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_approachPointCount", false, value);
}
Vector GCCSBot::GetApproachPointViewPosition() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->ApproachPointViewPosition(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CCSBot", "m_approachPointViewPosition");
}
void GCCSBot::SetApproachPointViewPosition(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->ApproachPointViewPosition(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_approachPointViewPosition", false, value);
}
GIntervalTimer GCCSBot::GetViewSteadyTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->ViewSteadyTimer(ptr=%p)", m_ptr));
    GIntervalTimer value(GetSchemaPtr(m_ptr, "CCSBot", "m_viewSteadyTimer"));
    return value;
}
void GCCSBot::SetViewSteadyTimer(GIntervalTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->ViewSteadyTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ViewSteadyTimer' is not possible.\n");
}
GCountdownTimer GCCSBot::GetTossGrenadeTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->TossGrenadeTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CCSBot", "m_tossGrenadeTimer"));
    return value;
}
void GCCSBot::SetTossGrenadeTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->TossGrenadeTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'TossGrenadeTimer' is not possible.\n");
}
GCountdownTimer GCCSBot::GetIsAvoidingGrenade() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->IsAvoidingGrenade(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CCSBot", "m_isAvoidingGrenade"));
    return value;
}
void GCCSBot::SetIsAvoidingGrenade(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->IsAvoidingGrenade(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'IsAvoidingGrenade' is not possible.\n");
}
float GCCSBot::GetSpotCheckTimestamp() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->SpotCheckTimestamp(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_spotCheckTimestamp");
}
void GCCSBot::SetSpotCheckTimestamp(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->SpotCheckTimestamp(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_spotCheckTimestamp", false, value);
}
int32_t GCCSBot::GetCheckedHidingSpotCount() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->CheckedHidingSpotCount(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSBot", "m_checkedHidingSpotCount");
}
void GCCSBot::SetCheckedHidingSpotCount(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->CheckedHidingSpotCount(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_checkedHidingSpotCount", false, value);
}
float GCCSBot::GetLookPitch() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->LookPitch(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_lookPitch");
}
void GCCSBot::SetLookPitch(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->LookPitch(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_lookPitch", false, value);
}
float GCCSBot::GetLookPitchVel() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->LookPitchVel(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_lookPitchVel");
}
void GCCSBot::SetLookPitchVel(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->LookPitchVel(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_lookPitchVel", false, value);
}
float GCCSBot::GetLookYaw() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->LookYaw(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_lookYaw");
}
void GCCSBot::SetLookYaw(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->LookYaw(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_lookYaw", false, value);
}
float GCCSBot::GetLookYawVel() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->LookYawVel(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_lookYawVel");
}
void GCCSBot::SetLookYawVel(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->LookYawVel(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_lookYawVel", false, value);
}
Vector GCCSBot::GetTargetSpot() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->TargetSpot(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CCSBot", "m_targetSpot");
}
void GCCSBot::SetTargetSpot(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->TargetSpot(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_targetSpot", false, value);
}
Vector GCCSBot::GetTargetSpotVelocity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->TargetSpotVelocity(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CCSBot", "m_targetSpotVelocity");
}
void GCCSBot::SetTargetSpotVelocity(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->TargetSpotVelocity(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_targetSpotVelocity", false, value);
}
Vector GCCSBot::GetTargetSpotPredicted() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->TargetSpotPredicted(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CCSBot", "m_targetSpotPredicted");
}
void GCCSBot::SetTargetSpotPredicted(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->TargetSpotPredicted(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_targetSpotPredicted", false, value);
}
QAngle GCCSBot::GetAimError() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->AimError(ptr=%p)", m_ptr));
    return GetSchemaValue<QAngle>(m_ptr, "CCSBot", "m_aimError");
}
void GCCSBot::SetAimError(QAngle value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->AimError(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_aimError", false, value);
}
QAngle GCCSBot::GetAimGoal() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->AimGoal(ptr=%p)", m_ptr));
    return GetSchemaValue<QAngle>(m_ptr, "CCSBot", "m_aimGoal");
}
void GCCSBot::SetAimGoal(QAngle value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->AimGoal(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_aimGoal", false, value);
}
float GCCSBot::GetTargetSpotTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->TargetSpotTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_targetSpotTime");
}
void GCCSBot::SetTargetSpotTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->TargetSpotTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_targetSpotTime", false, value);
}
float GCCSBot::GetAimFocus() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->AimFocus(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_aimFocus");
}
void GCCSBot::SetAimFocus(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->AimFocus(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_aimFocus", false, value);
}
float GCCSBot::GetAimFocusInterval() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->AimFocusInterval(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_aimFocusInterval");
}
void GCCSBot::SetAimFocusInterval(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->AimFocusInterval(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_aimFocusInterval", false, value);
}
float GCCSBot::GetAimFocusNextUpdate() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->AimFocusNextUpdate(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_aimFocusNextUpdate");
}
void GCCSBot::SetAimFocusNextUpdate(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->AimFocusNextUpdate(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_aimFocusNextUpdate", false, value);
}
GCountdownTimer GCCSBot::GetIgnoreEnemiesTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->IgnoreEnemiesTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CCSBot", "m_ignoreEnemiesTimer"));
    return value;
}
void GCCSBot::SetIgnoreEnemiesTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->IgnoreEnemiesTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'IgnoreEnemiesTimer' is not possible.\n");
}
GCCSPlayerPawn GCCSBot::GetEnemy() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->Enemy(ptr=%p)", m_ptr));
    GCCSPlayerPawn value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CCSBot", "m_enemy").Get()));
    return value;
}
void GCCSBot::SetEnemy(GCCSPlayerPawn value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->Enemy(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Enemy' is not possible.\n");
}
bool GCCSBot::GetIsEnemyVisible() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->IsEnemyVisible(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_isEnemyVisible");
}
void GCCSBot::SetIsEnemyVisible(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->IsEnemyVisible(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_isEnemyVisible", false, value);
}
uint32_t GCCSBot::GetVisibleEnemyParts() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->VisibleEnemyParts(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CCSBot", "m_visibleEnemyParts");
}
void GCCSBot::SetVisibleEnemyParts(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->VisibleEnemyParts(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_visibleEnemyParts", false, value);
}
Vector GCCSBot::GetLastEnemyPosition() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->LastEnemyPosition(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CCSBot", "m_lastEnemyPosition");
}
void GCCSBot::SetLastEnemyPosition(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->LastEnemyPosition(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_lastEnemyPosition", false, value);
}
float GCCSBot::GetLastSawEnemyTimestamp() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->LastSawEnemyTimestamp(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_lastSawEnemyTimestamp");
}
void GCCSBot::SetLastSawEnemyTimestamp(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->LastSawEnemyTimestamp(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_lastSawEnemyTimestamp", false, value);
}
float GCCSBot::GetFirstSawEnemyTimestamp() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->FirstSawEnemyTimestamp(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_firstSawEnemyTimestamp");
}
void GCCSBot::SetFirstSawEnemyTimestamp(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->FirstSawEnemyTimestamp(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_firstSawEnemyTimestamp", false, value);
}
float GCCSBot::GetCurrentEnemyAcquireTimestamp() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->CurrentEnemyAcquireTimestamp(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_currentEnemyAcquireTimestamp");
}
void GCCSBot::SetCurrentEnemyAcquireTimestamp(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->CurrentEnemyAcquireTimestamp(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_currentEnemyAcquireTimestamp", false, value);
}
float GCCSBot::GetEnemyDeathTimestamp() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->EnemyDeathTimestamp(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_enemyDeathTimestamp");
}
void GCCSBot::SetEnemyDeathTimestamp(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->EnemyDeathTimestamp(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_enemyDeathTimestamp", false, value);
}
float GCCSBot::GetFriendDeathTimestamp() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->FriendDeathTimestamp(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_friendDeathTimestamp");
}
void GCCSBot::SetFriendDeathTimestamp(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->FriendDeathTimestamp(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_friendDeathTimestamp", false, value);
}
bool GCCSBot::GetIsLastEnemyDead() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->IsLastEnemyDead(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_isLastEnemyDead");
}
void GCCSBot::SetIsLastEnemyDead(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->IsLastEnemyDead(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_isLastEnemyDead", false, value);
}
int32_t GCCSBot::GetNearbyEnemyCount() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->NearbyEnemyCount(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSBot", "m_nearbyEnemyCount");
}
void GCCSBot::SetNearbyEnemyCount(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->NearbyEnemyCount(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_nearbyEnemyCount", false, value);
}
GCCSPlayerPawn GCCSBot::GetBomber() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->Bomber(ptr=%p)", m_ptr));
    GCCSPlayerPawn value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CCSBot", "m_bomber").Get()));
    return value;
}
void GCCSBot::SetBomber(GCCSPlayerPawn value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->Bomber(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Bomber' is not possible.\n");
}
int32_t GCCSBot::GetNearbyFriendCount() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->NearbyFriendCount(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSBot", "m_nearbyFriendCount");
}
void GCCSBot::SetNearbyFriendCount(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->NearbyFriendCount(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_nearbyFriendCount", false, value);
}
GCCSPlayerPawn GCCSBot::GetClosestVisibleFriend() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->ClosestVisibleFriend(ptr=%p)", m_ptr));
    GCCSPlayerPawn value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CCSBot", "m_closestVisibleFriend").Get()));
    return value;
}
void GCCSBot::SetClosestVisibleFriend(GCCSPlayerPawn value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->ClosestVisibleFriend(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ClosestVisibleFriend' is not possible.\n");
}
GCCSPlayerPawn GCCSBot::GetClosestVisibleHumanFriend() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->ClosestVisibleHumanFriend(ptr=%p)", m_ptr));
    GCCSPlayerPawn value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CCSBot", "m_closestVisibleHumanFriend").Get()));
    return value;
}
void GCCSBot::SetClosestVisibleHumanFriend(GCCSPlayerPawn value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->ClosestVisibleHumanFriend(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ClosestVisibleHumanFriend' is not possible.\n");
}
GIntervalTimer GCCSBot::GetAttentionInterval() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->AttentionInterval(ptr=%p)", m_ptr));
    GIntervalTimer value(GetSchemaPtr(m_ptr, "CCSBot", "m_attentionInterval"));
    return value;
}
void GCCSBot::SetAttentionInterval(GIntervalTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->AttentionInterval(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'AttentionInterval' is not possible.\n");
}
GCCSPlayerPawn GCCSBot::GetAttacker() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->Attacker(ptr=%p)", m_ptr));
    GCCSPlayerPawn value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CCSBot", "m_attacker").Get()));
    return value;
}
void GCCSBot::SetAttacker(GCCSPlayerPawn value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->Attacker(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Attacker' is not possible.\n");
}
float GCCSBot::GetAttackedTimestamp() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->AttackedTimestamp(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_attackedTimestamp");
}
void GCCSBot::SetAttackedTimestamp(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->AttackedTimestamp(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_attackedTimestamp", false, value);
}
GIntervalTimer GCCSBot::GetBurnedByFlamesTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->BurnedByFlamesTimer(ptr=%p)", m_ptr));
    GIntervalTimer value(GetSchemaPtr(m_ptr, "CCSBot", "m_burnedByFlamesTimer"));
    return value;
}
void GCCSBot::SetBurnedByFlamesTimer(GIntervalTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->BurnedByFlamesTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'BurnedByFlamesTimer' is not possible.\n");
}
int32_t GCCSBot::GetLastVictimID() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->LastVictimID(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSBot", "m_lastVictimID");
}
void GCCSBot::SetLastVictimID(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->LastVictimID(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_lastVictimID", false, value);
}
bool GCCSBot::GetIsAimingAtEnemy() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->IsAimingAtEnemy(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_isAimingAtEnemy");
}
void GCCSBot::SetIsAimingAtEnemy(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->IsAimingAtEnemy(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_isAimingAtEnemy", false, value);
}
bool GCCSBot::GetIsRapidFiring() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->IsRapidFiring(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_isRapidFiring");
}
void GCCSBot::SetIsRapidFiring(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->IsRapidFiring(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_isRapidFiring", false, value);
}
GIntervalTimer GCCSBot::GetEquipTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->EquipTimer(ptr=%p)", m_ptr));
    GIntervalTimer value(GetSchemaPtr(m_ptr, "CCSBot", "m_equipTimer"));
    return value;
}
void GCCSBot::SetEquipTimer(GIntervalTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->EquipTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'EquipTimer' is not possible.\n");
}
GCountdownTimer GCCSBot::GetZoomTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->ZoomTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CCSBot", "m_zoomTimer"));
    return value;
}
void GCCSBot::SetZoomTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->ZoomTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ZoomTimer' is not possible.\n");
}
float GCCSBot::GetFireWeaponTimestamp() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->FireWeaponTimestamp(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_fireWeaponTimestamp");
}
void GCCSBot::SetFireWeaponTimestamp(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->FireWeaponTimestamp(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_fireWeaponTimestamp", false, value);
}
GCountdownTimer GCCSBot::GetLookForWeaponsOnGroundTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->LookForWeaponsOnGroundTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CCSBot", "m_lookForWeaponsOnGroundTimer"));
    return value;
}
void GCCSBot::SetLookForWeaponsOnGroundTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->LookForWeaponsOnGroundTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'LookForWeaponsOnGroundTimer' is not possible.\n");
}
bool GCCSBot::GetIsSleeping() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->IsSleeping(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_bIsSleeping");
}
void GCCSBot::SetIsSleeping(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->IsSleeping(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_bIsSleeping", false, value);
}
bool GCCSBot::GetIsEnemySniperVisible() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->IsEnemySniperVisible(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_isEnemySniperVisible");
}
void GCCSBot::SetIsEnemySniperVisible(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->IsEnemySniperVisible(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_isEnemySniperVisible", false, value);
}
GCountdownTimer GCCSBot::GetSawEnemySniperTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->SawEnemySniperTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CCSBot", "m_sawEnemySniperTimer"));
    return value;
}
void GCCSBot::SetSawEnemySniperTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->SawEnemySniperTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'SawEnemySniperTimer' is not possible.\n");
}
uint32_t GCCSBot::GetEnemyQueueIndex() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->EnemyQueueIndex(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CCSBot", "m_enemyQueueIndex");
}
void GCCSBot::SetEnemyQueueIndex(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->EnemyQueueIndex(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_enemyQueueIndex", false, value);
}
uint32_t GCCSBot::GetEnemyQueueCount() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->EnemyQueueCount(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CCSBot", "m_enemyQueueCount");
}
void GCCSBot::SetEnemyQueueCount(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->EnemyQueueCount(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_enemyQueueCount", false, value);
}
uint32_t GCCSBot::GetEnemyQueueAttendIndex() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->EnemyQueueAttendIndex(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CCSBot", "m_enemyQueueAttendIndex");
}
void GCCSBot::SetEnemyQueueAttendIndex(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->EnemyQueueAttendIndex(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_enemyQueueAttendIndex", false, value);
}
bool GCCSBot::GetIsStuck() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->IsStuck(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSBot", "m_isStuck");
}
void GCCSBot::SetIsStuck(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->IsStuck(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_isStuck", false, value);
}
float GCCSBot::GetStuckTimestamp() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->StuckTimestamp(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_stuckTimestamp");
}
void GCCSBot::SetStuckTimestamp(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->StuckTimestamp(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_stuckTimestamp", false, value);
}
Vector GCCSBot::GetStuckSpot() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->StuckSpot(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CCSBot", "m_stuckSpot");
}
void GCCSBot::SetStuckSpot(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->StuckSpot(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_stuckSpot", false, value);
}
GCountdownTimer GCCSBot::GetWiggleTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->WiggleTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CCSBot", "m_wiggleTimer"));
    return value;
}
void GCCSBot::SetWiggleTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->WiggleTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'WiggleTimer' is not possible.\n");
}
GCountdownTimer GCCSBot::GetStuckJumpTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->StuckJumpTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CCSBot", "m_stuckJumpTimer"));
    return value;
}
void GCCSBot::SetStuckJumpTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->StuckJumpTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'StuckJumpTimer' is not possible.\n");
}
float GCCSBot::GetNextCleanupCheckTimestamp() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->NextCleanupCheckTimestamp(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_nextCleanupCheckTimestamp");
}
void GCCSBot::SetNextCleanupCheckTimestamp(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->NextCleanupCheckTimestamp(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_nextCleanupCheckTimestamp", false, value);
}
std::vector<float> GCCSBot::GetAvgVel() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->AvgVel(ptr=%p,size=10)", m_ptr));
    float* outValue = (float*)GetSchemaPtr(m_ptr, "CCSBot", "m_avgVel"); std::vector<float> ret; for(int i = 0; i < 10; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCCSBot::SetAvgVel(std::vector<float> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->AvgVel(ptr=%p,size=10)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'AvgVel' is not possible.\n");
}
int32_t GCCSBot::GetAvgVelIndex() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->AvgVelIndex(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSBot", "m_avgVelIndex");
}
void GCCSBot::SetAvgVelIndex(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->AvgVelIndex(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_avgVelIndex", false, value);
}
int32_t GCCSBot::GetAvgVelCount() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->AvgVelCount(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSBot", "m_avgVelCount");
}
void GCCSBot::SetAvgVelCount(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->AvgVelCount(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_avgVelCount", false, value);
}
Vector GCCSBot::GetLastOrigin() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->LastOrigin(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CCSBot", "m_lastOrigin");
}
void GCCSBot::SetLastOrigin(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->LastOrigin(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_lastOrigin", false, value);
}
float GCCSBot::GetLastRadioRecievedTimestamp() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->LastRadioRecievedTimestamp(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_lastRadioRecievedTimestamp");
}
void GCCSBot::SetLastRadioRecievedTimestamp(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->LastRadioRecievedTimestamp(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_lastRadioRecievedTimestamp", false, value);
}
float GCCSBot::GetLastRadioSentTimestamp() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->LastRadioSentTimestamp(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_lastRadioSentTimestamp");
}
void GCCSBot::SetLastRadioSentTimestamp(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->LastRadioSentTimestamp(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_lastRadioSentTimestamp", false, value);
}
GCCSPlayerPawn GCCSBot::GetRadioSubject() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->RadioSubject(ptr=%p)", m_ptr));
    GCCSPlayerPawn value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CCSBot", "m_radioSubject").Get()));
    return value;
}
void GCCSBot::SetRadioSubject(GCCSPlayerPawn value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->RadioSubject(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'RadioSubject' is not possible.\n");
}
Vector GCCSBot::GetRadioPosition() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->RadioPosition(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CCSBot", "m_radioPosition");
}
void GCCSBot::SetRadioPosition(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->RadioPosition(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_radioPosition", false, value);
}
float GCCSBot::GetVoiceEndTimestamp() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->VoiceEndTimestamp(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSBot", "m_voiceEndTimestamp");
}
void GCCSBot::SetVoiceEndTimestamp(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->VoiceEndTimestamp(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_voiceEndTimestamp", false, value);
}
int32_t GCCSBot::GetLastValidReactionQueueFrame() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSBot->LastValidReactionQueueFrame(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSBot", "m_lastValidReactionQueueFrame");
}
void GCCSBot::SetLastValidReactionQueueFrame(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSBot->LastValidReactionQueueFrame(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSBot", "m_lastValidReactionQueueFrame", false, value);
}
void* GCCSBot::GetPtr() {
    return m_ptr;
}
std::string GCCSBot::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCCSBot::IsValid() {
    return (m_ptr != nullptr);
}
GCBot GCCSBot::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSBot::GetParent(ptr=%p)", m_ptr));
    GCBot value(m_ptr);
    return value;
}
void GCCSBot::SetParent(GCBot value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSBot::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCCSBot(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCCSBot>("CCSBot")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("EyePosition", &GCCSBot::GetEyePosition, &GCCSBot::SetEyePosition)
        .addProperty("Name", &GCCSBot::GetName, &GCCSBot::SetName)
        .addProperty("CombatRange", &GCCSBot::GetCombatRange, &GCCSBot::SetCombatRange)
        .addProperty("IsRogue", &GCCSBot::GetIsRogue, &GCCSBot::SetIsRogue)
        .addProperty("RogueTimer", &GCCSBot::GetRogueTimer, &GCCSBot::SetRogueTimer)
        .addProperty("DiedLastRound", &GCCSBot::GetDiedLastRound, &GCCSBot::SetDiedLastRound)
        .addProperty("SafeTime", &GCCSBot::GetSafeTime, &GCCSBot::SetSafeTime)
        .addProperty("WasSafe", &GCCSBot::GetWasSafe, &GCCSBot::SetWasSafe)
        .addProperty("BlindFire", &GCCSBot::GetBlindFire, &GCCSBot::SetBlindFire)
        .addProperty("SurpriseTimer", &GCCSBot::GetSurpriseTimer, &GCCSBot::SetSurpriseTimer)
        .addProperty("AllowActive", &GCCSBot::GetAllowActive, &GCCSBot::SetAllowActive)
        .addProperty("IsFollowing", &GCCSBot::GetIsFollowing, &GCCSBot::SetIsFollowing)
        .addProperty("Leader", &GCCSBot::GetLeader, &GCCSBot::SetLeader)
        .addProperty("FollowTimestamp", &GCCSBot::GetFollowTimestamp, &GCCSBot::SetFollowTimestamp)
        .addProperty("AllowAutoFollowTime", &GCCSBot::GetAllowAutoFollowTime, &GCCSBot::SetAllowAutoFollowTime)
        .addProperty("HurryTimer", &GCCSBot::GetHurryTimer, &GCCSBot::SetHurryTimer)
        .addProperty("AlertTimer", &GCCSBot::GetAlertTimer, &GCCSBot::SetAlertTimer)
        .addProperty("SneakTimer", &GCCSBot::GetSneakTimer, &GCCSBot::SetSneakTimer)
        .addProperty("PanicTimer", &GCCSBot::GetPanicTimer, &GCCSBot::SetPanicTimer)
        .addProperty("StateTimestamp", &GCCSBot::GetStateTimestamp, &GCCSBot::SetStateTimestamp)
        .addProperty("IsAttacking", &GCCSBot::GetIsAttacking, &GCCSBot::SetIsAttacking)
        .addProperty("IsOpeningDoor", &GCCSBot::GetIsOpeningDoor, &GCCSBot::SetIsOpeningDoor)
        .addProperty("TaskEntity", &GCCSBot::GetTaskEntity, &GCCSBot::SetTaskEntity)
        .addProperty("GoalPosition", &GCCSBot::GetGoalPosition, &GCCSBot::SetGoalPosition)
        .addProperty("GoalEntity", &GCCSBot::GetGoalEntity, &GCCSBot::SetGoalEntity)
        .addProperty("Avoid", &GCCSBot::GetAvoid, &GCCSBot::SetAvoid)
        .addProperty("AvoidTimestamp", &GCCSBot::GetAvoidTimestamp, &GCCSBot::SetAvoidTimestamp)
        .addProperty("IsStopping", &GCCSBot::GetIsStopping, &GCCSBot::SetIsStopping)
        .addProperty("HasVisitedEnemySpawn", &GCCSBot::GetHasVisitedEnemySpawn, &GCCSBot::SetHasVisitedEnemySpawn)
        .addProperty("StillTimer", &GCCSBot::GetStillTimer, &GCCSBot::SetStillTimer)
        .addProperty("EyeAnglesUnderPathFinderControl", &GCCSBot::GetEyeAnglesUnderPathFinderControl, &GCCSBot::SetEyeAnglesUnderPathFinderControl)
        .addProperty("PathIndex", &GCCSBot::GetPathIndex, &GCCSBot::SetPathIndex)
        .addProperty("AreaEnteredTimestamp", &GCCSBot::GetAreaEnteredTimestamp, &GCCSBot::SetAreaEnteredTimestamp)
        .addProperty("RepathTimer", &GCCSBot::GetRepathTimer, &GCCSBot::SetRepathTimer)
        .addProperty("AvoidFriendTimer", &GCCSBot::GetAvoidFriendTimer, &GCCSBot::SetAvoidFriendTimer)
        .addProperty("IsFriendInTheWay", &GCCSBot::GetIsFriendInTheWay, &GCCSBot::SetIsFriendInTheWay)
        .addProperty("PoliteTimer", &GCCSBot::GetPoliteTimer, &GCCSBot::SetPoliteTimer)
        .addProperty("IsWaitingBehindFriend", &GCCSBot::GetIsWaitingBehindFriend, &GCCSBot::SetIsWaitingBehindFriend)
        .addProperty("PathLadderEnd", &GCCSBot::GetPathLadderEnd, &GCCSBot::SetPathLadderEnd)
        .addProperty("MustRunTimer", &GCCSBot::GetMustRunTimer, &GCCSBot::SetMustRunTimer)
        .addProperty("WaitTimer", &GCCSBot::GetWaitTimer, &GCCSBot::SetWaitTimer)
        .addProperty("UpdateTravelDistanceTimer", &GCCSBot::GetUpdateTravelDistanceTimer, &GCCSBot::SetUpdateTravelDistanceTimer)
        .addProperty("PlayerTravelDistance", &GCCSBot::GetPlayerTravelDistance, &GCCSBot::SetPlayerTravelDistance)
        .addProperty("TravelDistancePhase", &GCCSBot::GetTravelDistancePhase, &GCCSBot::SetTravelDistancePhase)
        .addProperty("HostageEscortCount", &GCCSBot::GetHostageEscortCount, &GCCSBot::SetHostageEscortCount)
        .addProperty("HostageEscortCountTimestamp", &GCCSBot::GetHostageEscortCountTimestamp, &GCCSBot::SetHostageEscortCountTimestamp)
        .addProperty("DesiredTeam", &GCCSBot::GetDesiredTeam, &GCCSBot::SetDesiredTeam)
        .addProperty("HasJoined", &GCCSBot::GetHasJoined, &GCCSBot::SetHasJoined)
        .addProperty("IsWaitingForHostage", &GCCSBot::GetIsWaitingForHostage, &GCCSBot::SetIsWaitingForHostage)
        .addProperty("InhibitWaitingForHostageTimer", &GCCSBot::GetInhibitWaitingForHostageTimer, &GCCSBot::SetInhibitWaitingForHostageTimer)
        .addProperty("WaitForHostageTimer", &GCCSBot::GetWaitForHostageTimer, &GCCSBot::SetWaitForHostageTimer)
        .addProperty("NoisePosition", &GCCSBot::GetNoisePosition, &GCCSBot::SetNoisePosition)
        .addProperty("NoiseTravelDistance", &GCCSBot::GetNoiseTravelDistance, &GCCSBot::SetNoiseTravelDistance)
        .addProperty("NoiseTimestamp", &GCCSBot::GetNoiseTimestamp, &GCCSBot::SetNoiseTimestamp)
        .addProperty("NoiseSource", &GCCSBot::GetNoiseSource, &GCCSBot::SetNoiseSource)
        .addProperty("NoiseBendTimer", &GCCSBot::GetNoiseBendTimer, &GCCSBot::SetNoiseBendTimer)
        .addProperty("BentNoisePosition", &GCCSBot::GetBentNoisePosition, &GCCSBot::SetBentNoisePosition)
        .addProperty("BendNoisePositionValid", &GCCSBot::GetBendNoisePositionValid, &GCCSBot::SetBendNoisePositionValid)
        .addProperty("LookAroundStateTimestamp", &GCCSBot::GetLookAroundStateTimestamp, &GCCSBot::SetLookAroundStateTimestamp)
        .addProperty("LookAheadAngle", &GCCSBot::GetLookAheadAngle, &GCCSBot::SetLookAheadAngle)
        .addProperty("ForwardAngle", &GCCSBot::GetForwardAngle, &GCCSBot::SetForwardAngle)
        .addProperty("InhibitLookAroundTimestamp", &GCCSBot::GetInhibitLookAroundTimestamp, &GCCSBot::SetInhibitLookAroundTimestamp)
        .addProperty("LookAtSpot", &GCCSBot::GetLookAtSpot, &GCCSBot::SetLookAtSpot)
        .addProperty("LookAtSpotDuration", &GCCSBot::GetLookAtSpotDuration, &GCCSBot::SetLookAtSpotDuration)
        .addProperty("LookAtSpotTimestamp", &GCCSBot::GetLookAtSpotTimestamp, &GCCSBot::SetLookAtSpotTimestamp)
        .addProperty("LookAtSpotAngleTolerance", &GCCSBot::GetLookAtSpotAngleTolerance, &GCCSBot::SetLookAtSpotAngleTolerance)
        .addProperty("LookAtSpotClearIfClose", &GCCSBot::GetLookAtSpotClearIfClose, &GCCSBot::SetLookAtSpotClearIfClose)
        .addProperty("LookAtSpotAttack", &GCCSBot::GetLookAtSpotAttack, &GCCSBot::SetLookAtSpotAttack)
        .addProperty("LookAtDesc", &GCCSBot::GetLookAtDesc, &GCCSBot::SetLookAtDesc)
        .addProperty("PeripheralTimestamp", &GCCSBot::GetPeripheralTimestamp, &GCCSBot::SetPeripheralTimestamp)
        .addProperty("ApproachPointCount", &GCCSBot::GetApproachPointCount, &GCCSBot::SetApproachPointCount)
        .addProperty("ApproachPointViewPosition", &GCCSBot::GetApproachPointViewPosition, &GCCSBot::SetApproachPointViewPosition)
        .addProperty("ViewSteadyTimer", &GCCSBot::GetViewSteadyTimer, &GCCSBot::SetViewSteadyTimer)
        .addProperty("TossGrenadeTimer", &GCCSBot::GetTossGrenadeTimer, &GCCSBot::SetTossGrenadeTimer)
        .addProperty("IsAvoidingGrenade", &GCCSBot::GetIsAvoidingGrenade, &GCCSBot::SetIsAvoidingGrenade)
        .addProperty("SpotCheckTimestamp", &GCCSBot::GetSpotCheckTimestamp, &GCCSBot::SetSpotCheckTimestamp)
        .addProperty("CheckedHidingSpotCount", &GCCSBot::GetCheckedHidingSpotCount, &GCCSBot::SetCheckedHidingSpotCount)
        .addProperty("LookPitch", &GCCSBot::GetLookPitch, &GCCSBot::SetLookPitch)
        .addProperty("LookPitchVel", &GCCSBot::GetLookPitchVel, &GCCSBot::SetLookPitchVel)
        .addProperty("LookYaw", &GCCSBot::GetLookYaw, &GCCSBot::SetLookYaw)
        .addProperty("LookYawVel", &GCCSBot::GetLookYawVel, &GCCSBot::SetLookYawVel)
        .addProperty("TargetSpot", &GCCSBot::GetTargetSpot, &GCCSBot::SetTargetSpot)
        .addProperty("TargetSpotVelocity", &GCCSBot::GetTargetSpotVelocity, &GCCSBot::SetTargetSpotVelocity)
        .addProperty("TargetSpotPredicted", &GCCSBot::GetTargetSpotPredicted, &GCCSBot::SetTargetSpotPredicted)
        .addProperty("AimError", &GCCSBot::GetAimError, &GCCSBot::SetAimError)
        .addProperty("AimGoal", &GCCSBot::GetAimGoal, &GCCSBot::SetAimGoal)
        .addProperty("TargetSpotTime", &GCCSBot::GetTargetSpotTime, &GCCSBot::SetTargetSpotTime)
        .addProperty("AimFocus", &GCCSBot::GetAimFocus, &GCCSBot::SetAimFocus)
        .addProperty("AimFocusInterval", &GCCSBot::GetAimFocusInterval, &GCCSBot::SetAimFocusInterval)
        .addProperty("AimFocusNextUpdate", &GCCSBot::GetAimFocusNextUpdate, &GCCSBot::SetAimFocusNextUpdate)
        .addProperty("IgnoreEnemiesTimer", &GCCSBot::GetIgnoreEnemiesTimer, &GCCSBot::SetIgnoreEnemiesTimer)
        .addProperty("Enemy", &GCCSBot::GetEnemy, &GCCSBot::SetEnemy)
        .addProperty("IsEnemyVisible", &GCCSBot::GetIsEnemyVisible, &GCCSBot::SetIsEnemyVisible)
        .addProperty("VisibleEnemyParts", &GCCSBot::GetVisibleEnemyParts, &GCCSBot::SetVisibleEnemyParts)
        .addProperty("LastEnemyPosition", &GCCSBot::GetLastEnemyPosition, &GCCSBot::SetLastEnemyPosition)
        .addProperty("LastSawEnemyTimestamp", &GCCSBot::GetLastSawEnemyTimestamp, &GCCSBot::SetLastSawEnemyTimestamp)
        .addProperty("FirstSawEnemyTimestamp", &GCCSBot::GetFirstSawEnemyTimestamp, &GCCSBot::SetFirstSawEnemyTimestamp)
        .addProperty("CurrentEnemyAcquireTimestamp", &GCCSBot::GetCurrentEnemyAcquireTimestamp, &GCCSBot::SetCurrentEnemyAcquireTimestamp)
        .addProperty("EnemyDeathTimestamp", &GCCSBot::GetEnemyDeathTimestamp, &GCCSBot::SetEnemyDeathTimestamp)
        .addProperty("FriendDeathTimestamp", &GCCSBot::GetFriendDeathTimestamp, &GCCSBot::SetFriendDeathTimestamp)
        .addProperty("IsLastEnemyDead", &GCCSBot::GetIsLastEnemyDead, &GCCSBot::SetIsLastEnemyDead)
        .addProperty("NearbyEnemyCount", &GCCSBot::GetNearbyEnemyCount, &GCCSBot::SetNearbyEnemyCount)
        .addProperty("Bomber", &GCCSBot::GetBomber, &GCCSBot::SetBomber)
        .addProperty("NearbyFriendCount", &GCCSBot::GetNearbyFriendCount, &GCCSBot::SetNearbyFriendCount)
        .addProperty("ClosestVisibleFriend", &GCCSBot::GetClosestVisibleFriend, &GCCSBot::SetClosestVisibleFriend)
        .addProperty("ClosestVisibleHumanFriend", &GCCSBot::GetClosestVisibleHumanFriend, &GCCSBot::SetClosestVisibleHumanFriend)
        .addProperty("AttentionInterval", &GCCSBot::GetAttentionInterval, &GCCSBot::SetAttentionInterval)
        .addProperty("Attacker", &GCCSBot::GetAttacker, &GCCSBot::SetAttacker)
        .addProperty("AttackedTimestamp", &GCCSBot::GetAttackedTimestamp, &GCCSBot::SetAttackedTimestamp)
        .addProperty("BurnedByFlamesTimer", &GCCSBot::GetBurnedByFlamesTimer, &GCCSBot::SetBurnedByFlamesTimer)
        .addProperty("LastVictimID", &GCCSBot::GetLastVictimID, &GCCSBot::SetLastVictimID)
        .addProperty("IsAimingAtEnemy", &GCCSBot::GetIsAimingAtEnemy, &GCCSBot::SetIsAimingAtEnemy)
        .addProperty("IsRapidFiring", &GCCSBot::GetIsRapidFiring, &GCCSBot::SetIsRapidFiring)
        .addProperty("EquipTimer", &GCCSBot::GetEquipTimer, &GCCSBot::SetEquipTimer)
        .addProperty("ZoomTimer", &GCCSBot::GetZoomTimer, &GCCSBot::SetZoomTimer)
        .addProperty("FireWeaponTimestamp", &GCCSBot::GetFireWeaponTimestamp, &GCCSBot::SetFireWeaponTimestamp)
        .addProperty("LookForWeaponsOnGroundTimer", &GCCSBot::GetLookForWeaponsOnGroundTimer, &GCCSBot::SetLookForWeaponsOnGroundTimer)
        .addProperty("IsSleeping", &GCCSBot::GetIsSleeping, &GCCSBot::SetIsSleeping)
        .addProperty("IsEnemySniperVisible", &GCCSBot::GetIsEnemySniperVisible, &GCCSBot::SetIsEnemySniperVisible)
        .addProperty("SawEnemySniperTimer", &GCCSBot::GetSawEnemySniperTimer, &GCCSBot::SetSawEnemySniperTimer)
        .addProperty("EnemyQueueIndex", &GCCSBot::GetEnemyQueueIndex, &GCCSBot::SetEnemyQueueIndex)
        .addProperty("EnemyQueueCount", &GCCSBot::GetEnemyQueueCount, &GCCSBot::SetEnemyQueueCount)
        .addProperty("EnemyQueueAttendIndex", &GCCSBot::GetEnemyQueueAttendIndex, &GCCSBot::SetEnemyQueueAttendIndex)
        .addProperty("IsStuck", &GCCSBot::GetIsStuck, &GCCSBot::SetIsStuck)
        .addProperty("StuckTimestamp", &GCCSBot::GetStuckTimestamp, &GCCSBot::SetStuckTimestamp)
        .addProperty("StuckSpot", &GCCSBot::GetStuckSpot, &GCCSBot::SetStuckSpot)
        .addProperty("WiggleTimer", &GCCSBot::GetWiggleTimer, &GCCSBot::SetWiggleTimer)
        .addProperty("StuckJumpTimer", &GCCSBot::GetStuckJumpTimer, &GCCSBot::SetStuckJumpTimer)
        .addProperty("NextCleanupCheckTimestamp", &GCCSBot::GetNextCleanupCheckTimestamp, &GCCSBot::SetNextCleanupCheckTimestamp)
        .addProperty("AvgVel", &GCCSBot::GetAvgVel, &GCCSBot::SetAvgVel)
        .addProperty("AvgVelIndex", &GCCSBot::GetAvgVelIndex, &GCCSBot::SetAvgVelIndex)
        .addProperty("AvgVelCount", &GCCSBot::GetAvgVelCount, &GCCSBot::SetAvgVelCount)
        .addProperty("LastOrigin", &GCCSBot::GetLastOrigin, &GCCSBot::SetLastOrigin)
        .addProperty("LastRadioRecievedTimestamp", &GCCSBot::GetLastRadioRecievedTimestamp, &GCCSBot::SetLastRadioRecievedTimestamp)
        .addProperty("LastRadioSentTimestamp", &GCCSBot::GetLastRadioSentTimestamp, &GCCSBot::SetLastRadioSentTimestamp)
        .addProperty("RadioSubject", &GCCSBot::GetRadioSubject, &GCCSBot::SetRadioSubject)
        .addProperty("RadioPosition", &GCCSBot::GetRadioPosition, &GCCSBot::SetRadioPosition)
        .addProperty("VoiceEndTimestamp", &GCCSBot::GetVoiceEndTimestamp, &GCCSBot::SetVoiceEndTimestamp)
        .addProperty("LastValidReactionQueueFrame", &GCCSBot::GetLastValidReactionQueueFrame, &GCCSBot::SetLastValidReactionQueueFrame)
        .addProperty("Parent", &GCCSBot::GetParent, &GCCSBot::SetParent)
        .addFunction("ToPtr", &GCCSBot::ToPtr)
        .addFunction("IsValid", &GCCSBot::IsValid)
        .endClass();
}
GCEntityIdentity::GCEntityIdentity(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCEntityIdentity::GCEntityIdentity(void *ptr) {
    m_ptr = ptr;
}
int32_t GCEntityIdentity::GetNameStringableIndex() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEntityIdentity->NameStringableIndex(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CEntityIdentity", "m_nameStringableIndex");
}
void GCEntityIdentity::SetNameStringableIndex(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEntityIdentity->NameStringableIndex(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEntityIdentity", "m_nameStringableIndex", false, value);
}
std::string GCEntityIdentity::GetName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEntityIdentity->Name(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEntityIdentity", "m_name").String();
}
void GCEntityIdentity::SetName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEntityIdentity->Name(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEntityIdentity", "m_name", false, CUtlSymbolLarge(value.c_str()));
}
std::string GCEntityIdentity::GetDesignerName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEntityIdentity->DesignerName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEntityIdentity", "m_designerName").String();
}
void GCEntityIdentity::SetDesignerName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEntityIdentity->DesignerName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEntityIdentity", "m_designerName", false, CUtlSymbolLarge(value.c_str()));
}
uint32_t GCEntityIdentity::GetFlags() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEntityIdentity->Flags(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CEntityIdentity", "m_flags");
}
void GCEntityIdentity::SetFlags(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEntityIdentity->Flags(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEntityIdentity", "m_flags", false, value);
}
uint32_t GCEntityIdentity::GetWorldGroupId() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEntityIdentity->WorldGroupId(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlStringToken>(m_ptr, "CEntityIdentity", "m_worldGroupId").m_nHashCode;
}
void GCEntityIdentity::SetWorldGroupId(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEntityIdentity->WorldGroupId(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEntityIdentity", "m_worldGroupId", false, CUtlStringToken(value));
}
uint32_t GCEntityIdentity::GetDataObjectTypes() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEntityIdentity->DataObjectTypes(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CEntityIdentity", "m_fDataObjectTypes");
}
void GCEntityIdentity::SetDataObjectTypes(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEntityIdentity->DataObjectTypes(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEntityIdentity", "m_fDataObjectTypes", false, value);
}
GChangeAccessorFieldPathIndex_t GCEntityIdentity::GetPathIndex() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEntityIdentity->PathIndex(ptr=%p)", m_ptr));
    GChangeAccessorFieldPathIndex_t value(GetSchemaPtr(m_ptr, "CEntityIdentity", "m_PathIndex"));
    return value;
}
void GCEntityIdentity::SetPathIndex(GChangeAccessorFieldPathIndex_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEntityIdentity->PathIndex(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'PathIndex' is not possible.\n");
}
GCEntityIdentity GCEntityIdentity::GetPrev() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEntityIdentity->Prev(ptr=%p)", m_ptr));
    GCEntityIdentity value(*(void**)GetSchemaPtr(m_ptr, "CEntityIdentity", "m_pPrev"));
    return value;
}
void GCEntityIdentity::SetPrev(GCEntityIdentity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEntityIdentity->Prev(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEntityIdentity","m_pPrev", false, (char*)value.GetPtr());
}
GCEntityIdentity GCEntityIdentity::GetNext() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEntityIdentity->Next(ptr=%p)", m_ptr));
    GCEntityIdentity value(*(void**)GetSchemaPtr(m_ptr, "CEntityIdentity", "m_pNext"));
    return value;
}
void GCEntityIdentity::SetNext(GCEntityIdentity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEntityIdentity->Next(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEntityIdentity","m_pNext", false, (char*)value.GetPtr());
}
GCEntityIdentity GCEntityIdentity::GetPrevByClass() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEntityIdentity->PrevByClass(ptr=%p)", m_ptr));
    GCEntityIdentity value(*(void**)GetSchemaPtr(m_ptr, "CEntityIdentity", "m_pPrevByClass"));
    return value;
}
void GCEntityIdentity::SetPrevByClass(GCEntityIdentity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEntityIdentity->PrevByClass(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEntityIdentity","m_pPrevByClass", false, (char*)value.GetPtr());
}
GCEntityIdentity GCEntityIdentity::GetNextByClass() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEntityIdentity->NextByClass(ptr=%p)", m_ptr));
    GCEntityIdentity value(*(void**)GetSchemaPtr(m_ptr, "CEntityIdentity", "m_pNextByClass"));
    return value;
}
void GCEntityIdentity::SetNextByClass(GCEntityIdentity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEntityIdentity->NextByClass(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEntityIdentity","m_pNextByClass", false, (char*)value.GetPtr());
}
void* GCEntityIdentity::GetPtr() {
    return m_ptr;
}
std::string GCEntityIdentity::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCEntityIdentity::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCEntityIdentity(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCEntityIdentity>("CEntityIdentity")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("NameStringableIndex", &GCEntityIdentity::GetNameStringableIndex, &GCEntityIdentity::SetNameStringableIndex)
        .addProperty("Name", &GCEntityIdentity::GetName, &GCEntityIdentity::SetName)
        .addProperty("DesignerName", &GCEntityIdentity::GetDesignerName, &GCEntityIdentity::SetDesignerName)
        .addProperty("Flags", &GCEntityIdentity::GetFlags, &GCEntityIdentity::SetFlags)
        .addProperty("WorldGroupId", &GCEntityIdentity::GetWorldGroupId, &GCEntityIdentity::SetWorldGroupId)
        .addProperty("DataObjectTypes", &GCEntityIdentity::GetDataObjectTypes, &GCEntityIdentity::SetDataObjectTypes)
        .addProperty("PathIndex", &GCEntityIdentity::GetPathIndex, &GCEntityIdentity::SetPathIndex)
        .addProperty("Prev", &GCEntityIdentity::GetPrev, &GCEntityIdentity::SetPrev)
        .addProperty("Next", &GCEntityIdentity::GetNext, &GCEntityIdentity::SetNext)
        .addProperty("PrevByClass", &GCEntityIdentity::GetPrevByClass, &GCEntityIdentity::SetPrevByClass)
        .addProperty("NextByClass", &GCEntityIdentity::GetNextByClass, &GCEntityIdentity::SetNextByClass)
        .addFunction("ToPtr", &GCEntityIdentity::ToPtr)
        .addFunction("IsValid", &GCEntityIdentity::IsValid)
        .endClass();
}
GCGunTarget::GCGunTarget(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCGunTarget::GCGunTarget(void *ptr) {
    m_ptr = ptr;
}
bool GCGunTarget::GetOn() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CGunTarget->On(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CGunTarget", "m_on");
}
void GCGunTarget::SetOn(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CGunTarget->On(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CGunTarget", "m_on", false, value);
}
GCBaseEntity GCGunTarget::GetTargetEnt() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CGunTarget->TargetEnt(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CGunTarget", "m_hTargetEnt").Get()));
    return value;
}
void GCGunTarget::SetTargetEnt(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CGunTarget->TargetEnt(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'TargetEnt' is not possible.\n");
}
GCEntityIOOutput GCGunTarget::GetOnDeath() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CGunTarget->OnDeath(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CGunTarget", "m_OnDeath"));
    return value;
}
void GCGunTarget::SetOnDeath(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CGunTarget->OnDeath(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnDeath' is not possible.\n");
}
void* GCGunTarget::GetPtr() {
    return m_ptr;
}
std::string GCGunTarget::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCGunTarget::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseToggle GCGunTarget::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CGunTarget::GetParent(ptr=%p)", m_ptr));
    GCBaseToggle value(m_ptr);
    return value;
}
void GCGunTarget::SetParent(GCBaseToggle value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CGunTarget::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCGunTarget(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCGunTarget>("CGunTarget")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("On", &GCGunTarget::GetOn, &GCGunTarget::SetOn)
        .addProperty("TargetEnt", &GCGunTarget::GetTargetEnt, &GCGunTarget::SetTargetEnt)
        .addProperty("OnDeath", &GCGunTarget::GetOnDeath, &GCGunTarget::SetOnDeath)
        .addProperty("Parent", &GCGunTarget::GetParent, &GCGunTarget::SetParent)
        .addFunction("ToPtr", &GCGunTarget::ToPtr)
        .addFunction("IsValid", &GCGunTarget::IsValid)
        .endClass();
}
GCSoundEventParameter::GCSoundEventParameter(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCSoundEventParameter::GCSoundEventParameter(void *ptr) {
    m_ptr = ptr;
}
std::string GCSoundEventParameter::GetParamName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSoundEventParameter->ParamName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSoundEventParameter", "m_iszParamName").String();
}
void GCSoundEventParameter::SetParamName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSoundEventParameter->ParamName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSoundEventParameter", "m_iszParamName", false, CUtlSymbolLarge(value.c_str()));
}
float GCSoundEventParameter::GetFloatValue() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSoundEventParameter->FloatValue(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CSoundEventParameter", "m_flFloatValue");
}
void GCSoundEventParameter::SetFloatValue(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSoundEventParameter->FloatValue(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSoundEventParameter", "m_flFloatValue", false, value);
}
void* GCSoundEventParameter::GetPtr() {
    return m_ptr;
}
std::string GCSoundEventParameter::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCSoundEventParameter::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseEntity GCSoundEventParameter::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSoundEventParameter::GetParent(ptr=%p)", m_ptr));
    GCBaseEntity value(m_ptr);
    return value;
}
void GCSoundEventParameter::SetParent(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSoundEventParameter::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCSoundEventParameter(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCSoundEventParameter>("CSoundEventParameter")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("ParamName", &GCSoundEventParameter::GetParamName, &GCSoundEventParameter::SetParamName)
        .addProperty("FloatValue", &GCSoundEventParameter::GetFloatValue, &GCSoundEventParameter::SetFloatValue)
        .addProperty("Parent", &GCSoundEventParameter::GetParent, &GCSoundEventParameter::SetParent)
        .addFunction("ToPtr", &GCSoundEventParameter::ToPtr)
        .addFunction("IsValid", &GCSoundEventParameter::IsValid)
        .endClass();
}
GCSimpleMarkupVolumeTagged::GCSimpleMarkupVolumeTagged(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCSimpleMarkupVolumeTagged::GCSimpleMarkupVolumeTagged(void *ptr) {
    m_ptr = ptr;
}
void* GCSimpleMarkupVolumeTagged::GetPtr() {
    return m_ptr;
}
std::string GCSimpleMarkupVolumeTagged::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCSimpleMarkupVolumeTagged::IsValid() {
    return (m_ptr != nullptr);
}
GCMarkupVolumeTagged GCSimpleMarkupVolumeTagged::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSimpleMarkupVolumeTagged::GetParent(ptr=%p)", m_ptr));
    GCMarkupVolumeTagged value(m_ptr);
    return value;
}
void GCSimpleMarkupVolumeTagged::SetParent(GCMarkupVolumeTagged value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSimpleMarkupVolumeTagged::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCSimpleMarkupVolumeTagged(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCSimpleMarkupVolumeTagged>("CSimpleMarkupVolumeTagged")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCSimpleMarkupVolumeTagged::GetParent, &GCSimpleMarkupVolumeTagged::SetParent)
        .addFunction("ToPtr", &GCSimpleMarkupVolumeTagged::ToPtr)
        .addFunction("IsValid", &GCSimpleMarkupVolumeTagged::IsValid)
        .endClass();
}
GCTestEffect::GCTestEffect(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCTestEffect::GCTestEffect(void *ptr) {
    m_ptr = ptr;
}
int32_t GCTestEffect::GetLoop() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTestEffect->Loop(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CTestEffect", "m_iLoop");
}
void GCTestEffect::SetLoop(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTestEffect->Loop(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTestEffect", "m_iLoop", false, value);
}
int32_t GCTestEffect::GetBeam() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTestEffect->Beam(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CTestEffect", "m_iBeam");
}
void GCTestEffect::SetBeam(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTestEffect->Beam(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTestEffect", "m_iBeam", false, value);
}
std::vector<GCBeam*> GCTestEffect::GetBeam1() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTestEffect->Beam1(ptr=%p,size=24)", m_ptr));
    GCBeam** outValue = (GCBeam**)GetSchemaPtr(m_ptr, "CTestEffect", "m_pBeam"); std::vector<GCBeam*> ret; for(int i = 0; i < 24; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCTestEffect::SetBeam1(std::vector<GCBeam*> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTestEffect->Beam1(ptr=%p,size=24)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Beam1' is not possible.\n");
}
std::vector<float> GCTestEffect::GetBeamTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTestEffect->BeamTime(ptr=%p,size=24)", m_ptr));
    float* outValue = (float*)GetSchemaPtr(m_ptr, "CTestEffect", "m_flBeamTime"); std::vector<float> ret; for(int i = 0; i < 24; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCTestEffect::SetBeamTime(std::vector<float> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTestEffect->BeamTime(ptr=%p,size=24)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'BeamTime' is not possible.\n");
}
float GCTestEffect::GetStartTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTestEffect->StartTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CTestEffect", "m_flStartTime");
}
void GCTestEffect::SetStartTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTestEffect->StartTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTestEffect", "m_flStartTime", false, value);
}
void* GCTestEffect::GetPtr() {
    return m_ptr;
}
std::string GCTestEffect::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCTestEffect::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseEntity GCTestEffect::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTestEffect::GetParent(ptr=%p)", m_ptr));
    GCBaseEntity value(m_ptr);
    return value;
}
void GCTestEffect::SetParent(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTestEffect::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCTestEffect(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCTestEffect>("CTestEffect")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Loop", &GCTestEffect::GetLoop, &GCTestEffect::SetLoop)
        .addProperty("Beam", &GCTestEffect::GetBeam, &GCTestEffect::SetBeam)
        .addProperty("Beam1", &GCTestEffect::GetBeam1, &GCTestEffect::SetBeam1)
        .addProperty("BeamTime", &GCTestEffect::GetBeamTime, &GCTestEffect::SetBeamTime)
        .addProperty("StartTime", &GCTestEffect::GetStartTime, &GCTestEffect::SetStartTime)
        .addProperty("Parent", &GCTestEffect::GetParent, &GCTestEffect::SetParent)
        .addFunction("ToPtr", &GCTestEffect::ToPtr)
        .addFunction("IsValid", &GCTestEffect::IsValid)
        .endClass();
}
GCWeaponM4A1Silencer::GCWeaponM4A1Silencer(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCWeaponM4A1Silencer::GCWeaponM4A1Silencer(void *ptr) {
    m_ptr = ptr;
}
void* GCWeaponM4A1Silencer::GetPtr() {
    return m_ptr;
}
std::string GCWeaponM4A1Silencer::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCWeaponM4A1Silencer::IsValid() {
    return (m_ptr != nullptr);
}
GCCSWeaponBaseGun GCWeaponM4A1Silencer::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponM4A1Silencer::GetParent(ptr=%p)", m_ptr));
    GCCSWeaponBaseGun value(m_ptr);
    return value;
}
void GCWeaponM4A1Silencer::SetParent(GCCSWeaponBaseGun value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponM4A1Silencer::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCWeaponM4A1Silencer(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCWeaponM4A1Silencer>("CWeaponM4A1Silencer")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCWeaponM4A1Silencer::GetParent, &GCWeaponM4A1Silencer::SetParent)
        .addFunction("ToPtr", &GCWeaponM4A1Silencer::ToPtr)
        .addFunction("IsValid", &GCWeaponM4A1Silencer::IsValid)
        .endClass();
}
GCScriptNavBlocker::GCScriptNavBlocker(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCScriptNavBlocker::GCScriptNavBlocker(void *ptr) {
    m_ptr = ptr;
}
Vector GCScriptNavBlocker::GetExtent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CScriptNavBlocker->Extent(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CScriptNavBlocker", "m_vExtent");
}
void GCScriptNavBlocker::SetExtent(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CScriptNavBlocker->Extent(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CScriptNavBlocker", "m_vExtent", false, value);
}
void* GCScriptNavBlocker::GetPtr() {
    return m_ptr;
}
std::string GCScriptNavBlocker::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCScriptNavBlocker::IsValid() {
    return (m_ptr != nullptr);
}
GCFuncNavBlocker GCScriptNavBlocker::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CScriptNavBlocker::GetParent(ptr=%p)", m_ptr));
    GCFuncNavBlocker value(m_ptr);
    return value;
}
void GCScriptNavBlocker::SetParent(GCFuncNavBlocker value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CScriptNavBlocker::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCScriptNavBlocker(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCScriptNavBlocker>("CScriptNavBlocker")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Extent", &GCScriptNavBlocker::GetExtent, &GCScriptNavBlocker::SetExtent)
        .addProperty("Parent", &GCScriptNavBlocker::GetParent, &GCScriptNavBlocker::SetParent)
        .addFunction("ToPtr", &GCScriptNavBlocker::ToPtr)
        .addFunction("IsValid", &GCScriptNavBlocker::IsValid)
        .endClass();
}
GCConstraintAnchor::GCConstraintAnchor(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCConstraintAnchor::GCConstraintAnchor(void *ptr) {
    m_ptr = ptr;
}
float GCConstraintAnchor::GetMassScale() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CConstraintAnchor->MassScale(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CConstraintAnchor", "m_massScale");
}
void GCConstraintAnchor::SetMassScale(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CConstraintAnchor->MassScale(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CConstraintAnchor", "m_massScale", false, value);
}
void* GCConstraintAnchor::GetPtr() {
    return m_ptr;
}
std::string GCConstraintAnchor::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCConstraintAnchor::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseAnimGraph GCConstraintAnchor::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CConstraintAnchor::GetParent(ptr=%p)", m_ptr));
    GCBaseAnimGraph value(m_ptr);
    return value;
}
void GCConstraintAnchor::SetParent(GCBaseAnimGraph value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CConstraintAnchor::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCConstraintAnchor(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCConstraintAnchor>("CConstraintAnchor")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("MassScale", &GCConstraintAnchor::GetMassScale, &GCConstraintAnchor::SetMassScale)
        .addProperty("Parent", &GCConstraintAnchor::GetParent, &GCConstraintAnchor::SetParent)
        .addFunction("ToPtr", &GCConstraintAnchor::ToPtr)
        .addFunction("IsValid", &GCConstraintAnchor::IsValid)
        .endClass();
}
GCWeaponTec9::GCWeaponTec9(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCWeaponTec9::GCWeaponTec9(void *ptr) {
    m_ptr = ptr;
}
void* GCWeaponTec9::GetPtr() {
    return m_ptr;
}
std::string GCWeaponTec9::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCWeaponTec9::IsValid() {
    return (m_ptr != nullptr);
}
GCCSWeaponBaseGun GCWeaponTec9::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponTec9::GetParent(ptr=%p)", m_ptr));
    GCCSWeaponBaseGun value(m_ptr);
    return value;
}
void GCWeaponTec9::SetParent(GCCSWeaponBaseGun value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponTec9::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCWeaponTec9(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCWeaponTec9>("CWeaponTec9")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCWeaponTec9::GetParent, &GCWeaponTec9::SetParent)
        .addFunction("ToPtr", &GCWeaponTec9::ToPtr)
        .addFunction("IsValid", &GCWeaponTec9::IsValid)
        .endClass();
}
GCMarkupVolumeTagged_Nav::GCMarkupVolumeTagged_Nav(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCMarkupVolumeTagged_Nav::GCMarkupVolumeTagged_Nav(void *ptr) {
    m_ptr = ptr;
}
void* GCMarkupVolumeTagged_Nav::GetPtr() {
    return m_ptr;
}
std::string GCMarkupVolumeTagged_Nav::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCMarkupVolumeTagged_Nav::IsValid() {
    return (m_ptr != nullptr);
}
GCMarkupVolumeTagged GCMarkupVolumeTagged_Nav::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CMarkupVolumeTagged_Nav::GetParent(ptr=%p)", m_ptr));
    GCMarkupVolumeTagged value(m_ptr);
    return value;
}
void GCMarkupVolumeTagged_Nav::SetParent(GCMarkupVolumeTagged value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CMarkupVolumeTagged_Nav::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCMarkupVolumeTagged_Nav(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCMarkupVolumeTagged_Nav>("CMarkupVolumeTagged_Nav")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCMarkupVolumeTagged_Nav::GetParent, &GCMarkupVolumeTagged_Nav::SetParent)
        .addFunction("ToPtr", &GCMarkupVolumeTagged_Nav::ToPtr)
        .addFunction("IsValid", &GCMarkupVolumeTagged_Nav::IsValid)
        .endClass();
}
GCInstancedSceneEntity::GCInstancedSceneEntity(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCInstancedSceneEntity::GCInstancedSceneEntity(void *ptr) {
    m_ptr = ptr;
}
GCBaseEntity GCInstancedSceneEntity::GetOwner() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInstancedSceneEntity->Owner(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CInstancedSceneEntity", "m_hOwner").Get()));
    return value;
}
void GCInstancedSceneEntity::SetOwner(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInstancedSceneEntity->Owner(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Owner' is not possible.\n");
}
bool GCInstancedSceneEntity::GetHadOwner() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInstancedSceneEntity->HadOwner(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CInstancedSceneEntity", "m_bHadOwner");
}
void GCInstancedSceneEntity::SetHadOwner(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInstancedSceneEntity->HadOwner(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInstancedSceneEntity", "m_bHadOwner", false, value);
}
float GCInstancedSceneEntity::GetPostSpeakDelay() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInstancedSceneEntity->PostSpeakDelay(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CInstancedSceneEntity", "m_flPostSpeakDelay");
}
void GCInstancedSceneEntity::SetPostSpeakDelay(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInstancedSceneEntity->PostSpeakDelay(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInstancedSceneEntity", "m_flPostSpeakDelay", false, value);
}
float GCInstancedSceneEntity::GetPreDelay() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInstancedSceneEntity->PreDelay(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CInstancedSceneEntity", "m_flPreDelay");
}
void GCInstancedSceneEntity::SetPreDelay(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInstancedSceneEntity->PreDelay(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInstancedSceneEntity", "m_flPreDelay", false, value);
}
bool GCInstancedSceneEntity::GetIsBackground() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInstancedSceneEntity->IsBackground(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CInstancedSceneEntity", "m_bIsBackground");
}
void GCInstancedSceneEntity::SetIsBackground(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInstancedSceneEntity->IsBackground(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInstancedSceneEntity", "m_bIsBackground", false, value);
}
bool GCInstancedSceneEntity::GetRemoveOnCompletion() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInstancedSceneEntity->RemoveOnCompletion(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CInstancedSceneEntity", "m_bRemoveOnCompletion");
}
void GCInstancedSceneEntity::SetRemoveOnCompletion(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInstancedSceneEntity->RemoveOnCompletion(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInstancedSceneEntity", "m_bRemoveOnCompletion", false, value);
}
GCBaseEntity GCInstancedSceneEntity::GetTarget() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInstancedSceneEntity->Target(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CInstancedSceneEntity", "m_hTarget").Get()));
    return value;
}
void GCInstancedSceneEntity::SetTarget(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInstancedSceneEntity->Target(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Target' is not possible.\n");
}
void* GCInstancedSceneEntity::GetPtr() {
    return m_ptr;
}
std::string GCInstancedSceneEntity::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCInstancedSceneEntity::IsValid() {
    return (m_ptr != nullptr);
}
GCSceneEntity GCInstancedSceneEntity::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CInstancedSceneEntity::GetParent(ptr=%p)", m_ptr));
    GCSceneEntity value(m_ptr);
    return value;
}
void GCInstancedSceneEntity::SetParent(GCSceneEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CInstancedSceneEntity::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCInstancedSceneEntity(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCInstancedSceneEntity>("CInstancedSceneEntity")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Owner", &GCInstancedSceneEntity::GetOwner, &GCInstancedSceneEntity::SetOwner)
        .addProperty("HadOwner", &GCInstancedSceneEntity::GetHadOwner, &GCInstancedSceneEntity::SetHadOwner)
        .addProperty("PostSpeakDelay", &GCInstancedSceneEntity::GetPostSpeakDelay, &GCInstancedSceneEntity::SetPostSpeakDelay)
        .addProperty("PreDelay", &GCInstancedSceneEntity::GetPreDelay, &GCInstancedSceneEntity::SetPreDelay)
        .addProperty("IsBackground", &GCInstancedSceneEntity::GetIsBackground, &GCInstancedSceneEntity::SetIsBackground)
        .addProperty("RemoveOnCompletion", &GCInstancedSceneEntity::GetRemoveOnCompletion, &GCInstancedSceneEntity::SetRemoveOnCompletion)
        .addProperty("Target", &GCInstancedSceneEntity::GetTarget, &GCInstancedSceneEntity::SetTarget)
        .addProperty("Parent", &GCInstancedSceneEntity::GetParent, &GCInstancedSceneEntity::SetParent)
        .addFunction("ToPtr", &GCInstancedSceneEntity::ToPtr)
        .addFunction("IsValid", &GCInstancedSceneEntity::IsValid)
        .endClass();
}
GCLightEnvironmentEntity::GCLightEnvironmentEntity(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCLightEnvironmentEntity::GCLightEnvironmentEntity(void *ptr) {
    m_ptr = ptr;
}
void* GCLightEnvironmentEntity::GetPtr() {
    return m_ptr;
}
std::string GCLightEnvironmentEntity::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCLightEnvironmentEntity::IsValid() {
    return (m_ptr != nullptr);
}
GCLightDirectionalEntity GCLightEnvironmentEntity::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CLightEnvironmentEntity::GetParent(ptr=%p)", m_ptr));
    GCLightDirectionalEntity value(m_ptr);
    return value;
}
void GCLightEnvironmentEntity::SetParent(GCLightDirectionalEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CLightEnvironmentEntity::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCLightEnvironmentEntity(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCLightEnvironmentEntity>("CLightEnvironmentEntity")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCLightEnvironmentEntity::GetParent, &GCLightEnvironmentEntity::SetParent)
        .addFunction("ToPtr", &GCLightEnvironmentEntity::ToPtr)
        .addFunction("IsValid", &GCLightEnvironmentEntity::IsValid)
        .endClass();
}
GCLogicActiveAutosave::GCLogicActiveAutosave(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCLogicActiveAutosave::GCLogicActiveAutosave(void *ptr) {
    m_ptr = ptr;
}
int32_t GCLogicActiveAutosave::GetTriggerHitPoints() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CLogicActiveAutosave->TriggerHitPoints(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CLogicActiveAutosave", "m_TriggerHitPoints");
}
void GCLogicActiveAutosave::SetTriggerHitPoints(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CLogicActiveAutosave->TriggerHitPoints(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CLogicActiveAutosave", "m_TriggerHitPoints", false, value);
}
float GCLogicActiveAutosave::GetTimeToTrigger() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CLogicActiveAutosave->TimeToTrigger(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CLogicActiveAutosave", "m_flTimeToTrigger");
}
void GCLogicActiveAutosave::SetTimeToTrigger(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CLogicActiveAutosave->TimeToTrigger(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CLogicActiveAutosave", "m_flTimeToTrigger", false, value);
}
float GCLogicActiveAutosave::GetStartTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CLogicActiveAutosave->StartTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CLogicActiveAutosave", "m_flStartTime");
}
void GCLogicActiveAutosave::SetStartTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CLogicActiveAutosave->StartTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CLogicActiveAutosave", "m_flStartTime", false, value);
}
float GCLogicActiveAutosave::GetDangerousTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CLogicActiveAutosave->DangerousTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CLogicActiveAutosave", "m_flDangerousTime");
}
void GCLogicActiveAutosave::SetDangerousTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CLogicActiveAutosave->DangerousTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CLogicActiveAutosave", "m_flDangerousTime", false, value);
}
void* GCLogicActiveAutosave::GetPtr() {
    return m_ptr;
}
std::string GCLogicActiveAutosave::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCLogicActiveAutosave::IsValid() {
    return (m_ptr != nullptr);
}
GCLogicAutosave GCLogicActiveAutosave::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CLogicActiveAutosave::GetParent(ptr=%p)", m_ptr));
    GCLogicAutosave value(m_ptr);
    return value;
}
void GCLogicActiveAutosave::SetParent(GCLogicAutosave value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CLogicActiveAutosave::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCLogicActiveAutosave(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCLogicActiveAutosave>("CLogicActiveAutosave")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("TriggerHitPoints", &GCLogicActiveAutosave::GetTriggerHitPoints, &GCLogicActiveAutosave::SetTriggerHitPoints)
        .addProperty("TimeToTrigger", &GCLogicActiveAutosave::GetTimeToTrigger, &GCLogicActiveAutosave::SetTimeToTrigger)
        .addProperty("StartTime", &GCLogicActiveAutosave::GetStartTime, &GCLogicActiveAutosave::SetStartTime)
        .addProperty("DangerousTime", &GCLogicActiveAutosave::GetDangerousTime, &GCLogicActiveAutosave::SetDangerousTime)
        .addProperty("Parent", &GCLogicActiveAutosave::GetParent, &GCLogicActiveAutosave::SetParent)
        .addFunction("ToPtr", &GCLogicActiveAutosave::ToPtr)
        .addFunction("IsValid", &GCLogicActiveAutosave::IsValid)
        .endClass();
}
GCEnvBeverage::GCEnvBeverage(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCEnvBeverage::GCEnvBeverage(void *ptr) {
    m_ptr = ptr;
}
bool GCEnvBeverage::GetCanInDispenser() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvBeverage->CanInDispenser(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CEnvBeverage", "m_CanInDispenser");
}
void GCEnvBeverage::SetCanInDispenser(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvBeverage->CanInDispenser(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvBeverage", "m_CanInDispenser", false, value);
}
int32_t GCEnvBeverage::GetBeverageType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvBeverage->BeverageType(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CEnvBeverage", "m_nBeverageType");
}
void GCEnvBeverage::SetBeverageType(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvBeverage->BeverageType(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvBeverage", "m_nBeverageType", false, value);
}
void* GCEnvBeverage::GetPtr() {
    return m_ptr;
}
std::string GCEnvBeverage::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCEnvBeverage::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseEntity GCEnvBeverage::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CEnvBeverage::GetParent(ptr=%p)", m_ptr));
    GCBaseEntity value(m_ptr);
    return value;
}
void GCEnvBeverage::SetParent(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CEnvBeverage::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCEnvBeverage(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCEnvBeverage>("CEnvBeverage")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("CanInDispenser", &GCEnvBeverage::GetCanInDispenser, &GCEnvBeverage::SetCanInDispenser)
        .addProperty("BeverageType", &GCEnvBeverage::GetBeverageType, &GCEnvBeverage::SetBeverageType)
        .addProperty("Parent", &GCEnvBeverage::GetParent, &GCEnvBeverage::SetParent)
        .addFunction("ToPtr", &GCEnvBeverage::ToPtr)
        .addFunction("IsValid", &GCEnvBeverage::IsValid)
        .endClass();
}
GCWeaponCZ75a::GCWeaponCZ75a(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCWeaponCZ75a::GCWeaponCZ75a(void *ptr) {
    m_ptr = ptr;
}
void* GCWeaponCZ75a::GetPtr() {
    return m_ptr;
}
std::string GCWeaponCZ75a::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCWeaponCZ75a::IsValid() {
    return (m_ptr != nullptr);
}
GCCSWeaponBaseGun GCWeaponCZ75a::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponCZ75a::GetParent(ptr=%p)", m_ptr));
    GCCSWeaponBaseGun value(m_ptr);
    return value;
}
void GCWeaponCZ75a::SetParent(GCCSWeaponBaseGun value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponCZ75a::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCWeaponCZ75a(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCWeaponCZ75a>("CWeaponCZ75a")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCWeaponCZ75a::GetParent, &GCWeaponCZ75a::SetParent)
        .addFunction("ToPtr", &GCWeaponCZ75a::ToPtr)
        .addFunction("IsValid", &GCWeaponCZ75a::IsValid)
        .endClass();
}
GCWeaponP250::GCWeaponP250(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCWeaponP250::GCWeaponP250(void *ptr) {
    m_ptr = ptr;
}
void* GCWeaponP250::GetPtr() {
    return m_ptr;
}
std::string GCWeaponP250::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCWeaponP250::IsValid() {
    return (m_ptr != nullptr);
}
GCCSWeaponBaseGun GCWeaponP250::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponP250::GetParent(ptr=%p)", m_ptr));
    GCCSWeaponBaseGun value(m_ptr);
    return value;
}
void GCWeaponP250::SetParent(GCCSWeaponBaseGun value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponP250::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCWeaponP250(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCWeaponP250>("CWeaponP250")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCWeaponP250::GetParent, &GCWeaponP250::SetParent)
        .addFunction("ToPtr", &GCWeaponP250::ToPtr)
        .addFunction("IsValid", &GCWeaponP250::IsValid)
        .endClass();
}
GCHostage::GCHostage(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCHostage::GCHostage(void *ptr) {
    m_ptr = ptr;
}
GCEntityIOOutput GCHostage::GetOnHostageBeginGrab() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->OnHostageBeginGrab(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CHostage", "m_OnHostageBeginGrab"));
    return value;
}
void GCHostage::SetOnHostageBeginGrab(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->OnHostageBeginGrab(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnHostageBeginGrab' is not possible.\n");
}
GCEntityIOOutput GCHostage::GetOnFirstPickedUp() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->OnFirstPickedUp(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CHostage", "m_OnFirstPickedUp"));
    return value;
}
void GCHostage::SetOnFirstPickedUp(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->OnFirstPickedUp(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnFirstPickedUp' is not possible.\n");
}
GCEntityIOOutput GCHostage::GetOnDroppedNotRescued() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->OnDroppedNotRescued(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CHostage", "m_OnDroppedNotRescued"));
    return value;
}
void GCHostage::SetOnDroppedNotRescued(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->OnDroppedNotRescued(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnDroppedNotRescued' is not possible.\n");
}
GCEntityIOOutput GCHostage::GetOnRescued() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->OnRescued(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CHostage", "m_OnRescued"));
    return value;
}
void GCHostage::SetOnRescued(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->OnRescued(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnRescued' is not possible.\n");
}
GEntitySpottedState_t GCHostage::GetEntitySpottedState() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->EntitySpottedState(ptr=%p)", m_ptr));
    GEntitySpottedState_t value(GetSchemaPtr(m_ptr, "CHostage", "m_entitySpottedState"));
    return value;
}
void GCHostage::SetEntitySpottedState(GEntitySpottedState_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->EntitySpottedState(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'EntitySpottedState' is not possible.\n");
}
int32_t GCHostage::GetSpotRules() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->SpotRules(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CHostage", "m_nSpotRules");
}
void GCHostage::SetSpotRules(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->SpotRules(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CHostage", "m_nSpotRules", false, value);
}
uint32_t GCHostage::GetUiHostageSpawnExclusionGroupMask() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->UiHostageSpawnExclusionGroupMask(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CHostage", "m_uiHostageSpawnExclusionGroupMask");
}
void GCHostage::SetUiHostageSpawnExclusionGroupMask(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->UiHostageSpawnExclusionGroupMask(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CHostage", "m_uiHostageSpawnExclusionGroupMask", false, value);
}
uint32_t GCHostage::GetHostageSpawnRandomFactor() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->HostageSpawnRandomFactor(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CHostage", "m_nHostageSpawnRandomFactor");
}
void GCHostage::SetHostageSpawnRandomFactor(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->HostageSpawnRandomFactor(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CHostage", "m_nHostageSpawnRandomFactor", false, value);
}
bool GCHostage::GetRemove() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->Remove(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CHostage", "m_bRemove");
}
void GCHostage::SetRemove(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->Remove(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CHostage", "m_bRemove", false, value);
}
Vector GCHostage::GetVel() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->Vel(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CHostage", "m_vel");
}
void GCHostage::SetVel(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->Vel(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CHostage", "m_vel", false, value);
}
bool GCHostage::GetIsRescued() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->IsRescued(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CHostage", "m_isRescued");
}
void GCHostage::SetIsRescued(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->IsRescued(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CHostage", "m_isRescued", false, value);
}
bool GCHostage::GetJumpedThisFrame() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->JumpedThisFrame(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CHostage", "m_jumpedThisFrame");
}
void GCHostage::SetJumpedThisFrame(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->JumpedThisFrame(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CHostage", "m_jumpedThisFrame", false, value);
}
int32_t GCHostage::GetHostageState() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->HostageState(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CHostage", "m_nHostageState");
}
void GCHostage::SetHostageState(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->HostageState(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CHostage", "m_nHostageState", false, value);
}
GCBaseEntity GCHostage::GetLeader() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->Leader(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CHostage", "m_leader").Get()));
    return value;
}
void GCHostage::SetLeader(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->Leader(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Leader' is not possible.\n");
}
GCCSPlayerPawnBase GCHostage::GetLastLeader() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->LastLeader(ptr=%p)", m_ptr));
    GCCSPlayerPawnBase value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CHostage", "m_lastLeader").Get()));
    return value;
}
void GCHostage::SetLastLeader(GCCSPlayerPawnBase value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->LastLeader(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'LastLeader' is not possible.\n");
}
GCountdownTimer GCHostage::GetReuseTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->ReuseTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CHostage", "m_reuseTimer"));
    return value;
}
void GCHostage::SetReuseTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->ReuseTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ReuseTimer' is not possible.\n");
}
bool GCHostage::GetHasBeenUsed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->HasBeenUsed(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CHostage", "m_hasBeenUsed");
}
void GCHostage::SetHasBeenUsed(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->HasBeenUsed(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CHostage", "m_hasBeenUsed", false, value);
}
Vector GCHostage::GetAccel() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->Accel(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CHostage", "m_accel");
}
void GCHostage::SetAccel(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->Accel(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CHostage", "m_accel", false, value);
}
bool GCHostage::GetIsRunning() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->IsRunning(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CHostage", "m_isRunning");
}
void GCHostage::SetIsRunning(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->IsRunning(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CHostage", "m_isRunning", false, value);
}
bool GCHostage::GetIsCrouching() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->IsCrouching(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CHostage", "m_isCrouching");
}
void GCHostage::SetIsCrouching(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->IsCrouching(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CHostage", "m_isCrouching", false, value);
}
GCountdownTimer GCHostage::GetJumpTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->JumpTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CHostage", "m_jumpTimer"));
    return value;
}
void GCHostage::SetJumpTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->JumpTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'JumpTimer' is not possible.\n");
}
bool GCHostage::GetIsWaitingForLeader() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->IsWaitingForLeader(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CHostage", "m_isWaitingForLeader");
}
void GCHostage::SetIsWaitingForLeader(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->IsWaitingForLeader(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CHostage", "m_isWaitingForLeader", false, value);
}
GCountdownTimer GCHostage::GetRepathTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->RepathTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CHostage", "m_repathTimer"));
    return value;
}
void GCHostage::SetRepathTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->RepathTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'RepathTimer' is not possible.\n");
}
GCountdownTimer GCHostage::GetInhibitDoorTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->InhibitDoorTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CHostage", "m_inhibitDoorTimer"));
    return value;
}
void GCHostage::SetInhibitDoorTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->InhibitDoorTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'InhibitDoorTimer' is not possible.\n");
}
GCountdownTimer GCHostage::GetInhibitObstacleAvoidanceTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->InhibitObstacleAvoidanceTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CHostage", "m_inhibitObstacleAvoidanceTimer"));
    return value;
}
void GCHostage::SetInhibitObstacleAvoidanceTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->InhibitObstacleAvoidanceTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'InhibitObstacleAvoidanceTimer' is not possible.\n");
}
GCountdownTimer GCHostage::GetWiggleTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->WiggleTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CHostage", "m_wiggleTimer"));
    return value;
}
void GCHostage::SetWiggleTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->WiggleTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'WiggleTimer' is not possible.\n");
}
bool GCHostage::GetIsAdjusted() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->IsAdjusted(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CHostage", "m_isAdjusted");
}
void GCHostage::SetIsAdjusted(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->IsAdjusted(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CHostage", "m_isAdjusted", false, value);
}
bool GCHostage::GetHandsHaveBeenCut() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->HandsHaveBeenCut(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CHostage", "m_bHandsHaveBeenCut");
}
void GCHostage::SetHandsHaveBeenCut(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->HandsHaveBeenCut(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CHostage", "m_bHandsHaveBeenCut", false, value);
}
GCCSPlayerPawn GCHostage::GetHostageGrabber() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->HostageGrabber(ptr=%p)", m_ptr));
    GCCSPlayerPawn value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CHostage", "m_hHostageGrabber").Get()));
    return value;
}
void GCHostage::SetHostageGrabber(GCCSPlayerPawn value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->HostageGrabber(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'HostageGrabber' is not possible.\n");
}
float GCHostage::GetLastGrabTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->LastGrabTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CHostage", "m_fLastGrabTime");
}
void GCHostage::SetLastGrabTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->LastGrabTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CHostage", "m_fLastGrabTime", false, value);
}
Vector GCHostage::GetPositionWhenStartedDroppingToGround() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->PositionWhenStartedDroppingToGround(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CHostage", "m_vecPositionWhenStartedDroppingToGround");
}
void GCHostage::SetPositionWhenStartedDroppingToGround(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->PositionWhenStartedDroppingToGround(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CHostage", "m_vecPositionWhenStartedDroppingToGround", false, value);
}
Vector GCHostage::GetGrabbedPos() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->GrabbedPos(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CHostage", "m_vecGrabbedPos");
}
void GCHostage::SetGrabbedPos(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->GrabbedPos(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CHostage", "m_vecGrabbedPos", false, value);
}
float GCHostage::GetRescueStartTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->RescueStartTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CHostage", "m_flRescueStartTime");
}
void GCHostage::SetRescueStartTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->RescueStartTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CHostage", "m_flRescueStartTime", false, value);
}
float GCHostage::GetGrabSuccessTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->GrabSuccessTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CHostage", "m_flGrabSuccessTime");
}
void GCHostage::SetGrabSuccessTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->GrabSuccessTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CHostage", "m_flGrabSuccessTime", false, value);
}
float GCHostage::GetDropStartTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->DropStartTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CHostage", "m_flDropStartTime");
}
void GCHostage::SetDropStartTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->DropStartTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CHostage", "m_flDropStartTime", false, value);
}
int32_t GCHostage::GetApproachRewardPayouts() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->ApproachRewardPayouts(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CHostage", "m_nApproachRewardPayouts");
}
void GCHostage::SetApproachRewardPayouts(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->ApproachRewardPayouts(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CHostage", "m_nApproachRewardPayouts", false, value);
}
int32_t GCHostage::GetPickupEventCount() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->PickupEventCount(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CHostage", "m_nPickupEventCount");
}
void GCHostage::SetPickupEventCount(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->PickupEventCount(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CHostage", "m_nPickupEventCount", false, value);
}
Vector GCHostage::GetSpawnGroundPos() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->SpawnGroundPos(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CHostage", "m_vecSpawnGroundPos");
}
void GCHostage::SetSpawnGroundPos(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->SpawnGroundPos(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CHostage", "m_vecSpawnGroundPos", false, value);
}
Vector GCHostage::GetHostageResetPosition() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHostage->HostageResetPosition(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CHostage", "m_vecHostageResetPosition");
}
void GCHostage::SetHostageResetPosition(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHostage->HostageResetPosition(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CHostage", "m_vecHostageResetPosition", false, value);
}
void* GCHostage::GetPtr() {
    return m_ptr;
}
std::string GCHostage::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCHostage::IsValid() {
    return (m_ptr != nullptr);
}
GCHostageExpresserShim GCHostage::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CHostage::GetParent(ptr=%p)", m_ptr));
    GCHostageExpresserShim value(m_ptr);
    return value;
}
void GCHostage::SetParent(GCHostageExpresserShim value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CHostage::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCHostage(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCHostage>("CHostage")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("OnHostageBeginGrab", &GCHostage::GetOnHostageBeginGrab, &GCHostage::SetOnHostageBeginGrab)
        .addProperty("OnFirstPickedUp", &GCHostage::GetOnFirstPickedUp, &GCHostage::SetOnFirstPickedUp)
        .addProperty("OnDroppedNotRescued", &GCHostage::GetOnDroppedNotRescued, &GCHostage::SetOnDroppedNotRescued)
        .addProperty("OnRescued", &GCHostage::GetOnRescued, &GCHostage::SetOnRescued)
        .addProperty("EntitySpottedState", &GCHostage::GetEntitySpottedState, &GCHostage::SetEntitySpottedState)
        .addProperty("SpotRules", &GCHostage::GetSpotRules, &GCHostage::SetSpotRules)
        .addProperty("UiHostageSpawnExclusionGroupMask", &GCHostage::GetUiHostageSpawnExclusionGroupMask, &GCHostage::SetUiHostageSpawnExclusionGroupMask)
        .addProperty("HostageSpawnRandomFactor", &GCHostage::GetHostageSpawnRandomFactor, &GCHostage::SetHostageSpawnRandomFactor)
        .addProperty("Remove", &GCHostage::GetRemove, &GCHostage::SetRemove)
        .addProperty("Vel", &GCHostage::GetVel, &GCHostage::SetVel)
        .addProperty("IsRescued", &GCHostage::GetIsRescued, &GCHostage::SetIsRescued)
        .addProperty("JumpedThisFrame", &GCHostage::GetJumpedThisFrame, &GCHostage::SetJumpedThisFrame)
        .addProperty("HostageState", &GCHostage::GetHostageState, &GCHostage::SetHostageState)
        .addProperty("Leader", &GCHostage::GetLeader, &GCHostage::SetLeader)
        .addProperty("LastLeader", &GCHostage::GetLastLeader, &GCHostage::SetLastLeader)
        .addProperty("ReuseTimer", &GCHostage::GetReuseTimer, &GCHostage::SetReuseTimer)
        .addProperty("HasBeenUsed", &GCHostage::GetHasBeenUsed, &GCHostage::SetHasBeenUsed)
        .addProperty("Accel", &GCHostage::GetAccel, &GCHostage::SetAccel)
        .addProperty("IsRunning", &GCHostage::GetIsRunning, &GCHostage::SetIsRunning)
        .addProperty("IsCrouching", &GCHostage::GetIsCrouching, &GCHostage::SetIsCrouching)
        .addProperty("JumpTimer", &GCHostage::GetJumpTimer, &GCHostage::SetJumpTimer)
        .addProperty("IsWaitingForLeader", &GCHostage::GetIsWaitingForLeader, &GCHostage::SetIsWaitingForLeader)
        .addProperty("RepathTimer", &GCHostage::GetRepathTimer, &GCHostage::SetRepathTimer)
        .addProperty("InhibitDoorTimer", &GCHostage::GetInhibitDoorTimer, &GCHostage::SetInhibitDoorTimer)
        .addProperty("InhibitObstacleAvoidanceTimer", &GCHostage::GetInhibitObstacleAvoidanceTimer, &GCHostage::SetInhibitObstacleAvoidanceTimer)
        .addProperty("WiggleTimer", &GCHostage::GetWiggleTimer, &GCHostage::SetWiggleTimer)
        .addProperty("IsAdjusted", &GCHostage::GetIsAdjusted, &GCHostage::SetIsAdjusted)
        .addProperty("HandsHaveBeenCut", &GCHostage::GetHandsHaveBeenCut, &GCHostage::SetHandsHaveBeenCut)
        .addProperty("HostageGrabber", &GCHostage::GetHostageGrabber, &GCHostage::SetHostageGrabber)
        .addProperty("LastGrabTime", &GCHostage::GetLastGrabTime, &GCHostage::SetLastGrabTime)
        .addProperty("PositionWhenStartedDroppingToGround", &GCHostage::GetPositionWhenStartedDroppingToGround, &GCHostage::SetPositionWhenStartedDroppingToGround)
        .addProperty("GrabbedPos", &GCHostage::GetGrabbedPos, &GCHostage::SetGrabbedPos)
        .addProperty("RescueStartTime", &GCHostage::GetRescueStartTime, &GCHostage::SetRescueStartTime)
        .addProperty("GrabSuccessTime", &GCHostage::GetGrabSuccessTime, &GCHostage::SetGrabSuccessTime)
        .addProperty("DropStartTime", &GCHostage::GetDropStartTime, &GCHostage::SetDropStartTime)
        .addProperty("ApproachRewardPayouts", &GCHostage::GetApproachRewardPayouts, &GCHostage::SetApproachRewardPayouts)
        .addProperty("PickupEventCount", &GCHostage::GetPickupEventCount, &GCHostage::SetPickupEventCount)
        .addProperty("SpawnGroundPos", &GCHostage::GetSpawnGroundPos, &GCHostage::SetSpawnGroundPos)
        .addProperty("HostageResetPosition", &GCHostage::GetHostageResetPosition, &GCHostage::SetHostageResetPosition)
        .addProperty("Parent", &GCHostage::GetParent, &GCHostage::SetParent)
        .addFunction("ToPtr", &GCHostage::ToPtr)
        .addFunction("IsValid", &GCHostage::IsValid)
        .endClass();
}
GCScriptTriggerHurt::GCScriptTriggerHurt(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCScriptTriggerHurt::GCScriptTriggerHurt(void *ptr) {
    m_ptr = ptr;
}
Vector GCScriptTriggerHurt::GetExtent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CScriptTriggerHurt->Extent(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CScriptTriggerHurt", "m_vExtent");
}
void GCScriptTriggerHurt::SetExtent(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CScriptTriggerHurt->Extent(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CScriptTriggerHurt", "m_vExtent", false, value);
}
void* GCScriptTriggerHurt::GetPtr() {
    return m_ptr;
}
std::string GCScriptTriggerHurt::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCScriptTriggerHurt::IsValid() {
    return (m_ptr != nullptr);
}
GCTriggerHurt GCScriptTriggerHurt::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CScriptTriggerHurt::GetParent(ptr=%p)", m_ptr));
    GCTriggerHurt value(m_ptr);
    return value;
}
void GCScriptTriggerHurt::SetParent(GCTriggerHurt value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CScriptTriggerHurt::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCScriptTriggerHurt(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCScriptTriggerHurt>("CScriptTriggerHurt")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Extent", &GCScriptTriggerHurt::GetExtent, &GCScriptTriggerHurt::SetExtent)
        .addProperty("Parent", &GCScriptTriggerHurt::GetParent, &GCScriptTriggerHurt::SetParent)
        .addFunction("ToPtr", &GCScriptTriggerHurt::ToPtr)
        .addFunction("IsValid", &GCScriptTriggerHurt::IsValid)
        .endClass();
}
GCBasePlayerWeaponVData::GCBasePlayerWeaponVData(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCBasePlayerWeaponVData::GCBasePlayerWeaponVData(void *ptr) {
    m_ptr = ptr;
}
bool GCBasePlayerWeaponVData::GetBuiltRightHanded() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBasePlayerWeaponVData->BuiltRightHanded(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CBasePlayerWeaponVData", "m_bBuiltRightHanded");
}
void GCBasePlayerWeaponVData::SetBuiltRightHanded(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBasePlayerWeaponVData->BuiltRightHanded(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBasePlayerWeaponVData", "m_bBuiltRightHanded", false, value);
}
bool GCBasePlayerWeaponVData::GetAllowFlipping() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBasePlayerWeaponVData->AllowFlipping(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CBasePlayerWeaponVData", "m_bAllowFlipping");
}
void GCBasePlayerWeaponVData::SetAllowFlipping(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBasePlayerWeaponVData->AllowFlipping(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBasePlayerWeaponVData", "m_bAllowFlipping", false, value);
}
std::string GCBasePlayerWeaponVData::GetMuzzleAttachment() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBasePlayerWeaponVData->MuzzleAttachment(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlString>(m_ptr, "CBasePlayerWeaponVData", "m_sMuzzleAttachment").Get();
}
void GCBasePlayerWeaponVData::SetMuzzleAttachment(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBasePlayerWeaponVData->MuzzleAttachment(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBasePlayerWeaponVData", "m_sMuzzleAttachment", false, CUtlString(value.c_str()));
}
uint64_t GCBasePlayerWeaponVData::GetFlags() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBasePlayerWeaponVData->Flags(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CBasePlayerWeaponVData", "m_iFlags");
}
void GCBasePlayerWeaponVData::SetFlags(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBasePlayerWeaponVData->Flags(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBasePlayerWeaponVData", "m_iFlags", false, value);
}
uint32_t GCBasePlayerWeaponVData::GetPrimaryAmmoType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBasePlayerWeaponVData->PrimaryAmmoType(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CBasePlayerWeaponVData", "m_nPrimaryAmmoType");
}
void GCBasePlayerWeaponVData::SetPrimaryAmmoType(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBasePlayerWeaponVData->PrimaryAmmoType(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBasePlayerWeaponVData", "m_nPrimaryAmmoType", false, value);
}
uint32_t GCBasePlayerWeaponVData::GetSecondaryAmmoType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBasePlayerWeaponVData->SecondaryAmmoType(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CBasePlayerWeaponVData", "m_nSecondaryAmmoType");
}
void GCBasePlayerWeaponVData::SetSecondaryAmmoType(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBasePlayerWeaponVData->SecondaryAmmoType(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBasePlayerWeaponVData", "m_nSecondaryAmmoType", false, value);
}
int32_t GCBasePlayerWeaponVData::GetMaxClip1() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBasePlayerWeaponVData->MaxClip1(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CBasePlayerWeaponVData", "m_iMaxClip1");
}
void GCBasePlayerWeaponVData::SetMaxClip1(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBasePlayerWeaponVData->MaxClip1(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBasePlayerWeaponVData", "m_iMaxClip1", false, value);
}
int32_t GCBasePlayerWeaponVData::GetMaxClip2() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBasePlayerWeaponVData->MaxClip2(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CBasePlayerWeaponVData", "m_iMaxClip2");
}
void GCBasePlayerWeaponVData::SetMaxClip2(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBasePlayerWeaponVData->MaxClip2(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBasePlayerWeaponVData", "m_iMaxClip2", false, value);
}
int32_t GCBasePlayerWeaponVData::GetDefaultClip1() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBasePlayerWeaponVData->DefaultClip1(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CBasePlayerWeaponVData", "m_iDefaultClip1");
}
void GCBasePlayerWeaponVData::SetDefaultClip1(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBasePlayerWeaponVData->DefaultClip1(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBasePlayerWeaponVData", "m_iDefaultClip1", false, value);
}
int32_t GCBasePlayerWeaponVData::GetDefaultClip2() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBasePlayerWeaponVData->DefaultClip2(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CBasePlayerWeaponVData", "m_iDefaultClip2");
}
void GCBasePlayerWeaponVData::SetDefaultClip2(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBasePlayerWeaponVData->DefaultClip2(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBasePlayerWeaponVData", "m_iDefaultClip2", false, value);
}
int32_t GCBasePlayerWeaponVData::GetWeight() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBasePlayerWeaponVData->Weight(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CBasePlayerWeaponVData", "m_iWeight");
}
void GCBasePlayerWeaponVData::SetWeight(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBasePlayerWeaponVData->Weight(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBasePlayerWeaponVData", "m_iWeight", false, value);
}
bool GCBasePlayerWeaponVData::GetAutoSwitchTo() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBasePlayerWeaponVData->AutoSwitchTo(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CBasePlayerWeaponVData", "m_bAutoSwitchTo");
}
void GCBasePlayerWeaponVData::SetAutoSwitchTo(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBasePlayerWeaponVData->AutoSwitchTo(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBasePlayerWeaponVData", "m_bAutoSwitchTo", false, value);
}
bool GCBasePlayerWeaponVData::GetAutoSwitchFrom() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBasePlayerWeaponVData->AutoSwitchFrom(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CBasePlayerWeaponVData", "m_bAutoSwitchFrom");
}
void GCBasePlayerWeaponVData::SetAutoSwitchFrom(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBasePlayerWeaponVData->AutoSwitchFrom(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBasePlayerWeaponVData", "m_bAutoSwitchFrom", false, value);
}
uint64_t GCBasePlayerWeaponVData::GetRumbleEffect() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBasePlayerWeaponVData->RumbleEffect(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CBasePlayerWeaponVData", "m_iRumbleEffect");
}
void GCBasePlayerWeaponVData::SetRumbleEffect(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBasePlayerWeaponVData->RumbleEffect(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBasePlayerWeaponVData", "m_iRumbleEffect", false, value);
}
bool GCBasePlayerWeaponVData::GetLinkedCooldowns() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBasePlayerWeaponVData->LinkedCooldowns(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CBasePlayerWeaponVData", "m_bLinkedCooldowns");
}
void GCBasePlayerWeaponVData::SetLinkedCooldowns(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBasePlayerWeaponVData->LinkedCooldowns(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBasePlayerWeaponVData", "m_bLinkedCooldowns", false, value);
}
int32_t GCBasePlayerWeaponVData::GetSlot() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBasePlayerWeaponVData->Slot(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CBasePlayerWeaponVData", "m_iSlot");
}
void GCBasePlayerWeaponVData::SetSlot(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBasePlayerWeaponVData->Slot(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBasePlayerWeaponVData", "m_iSlot", false, value);
}
int32_t GCBasePlayerWeaponVData::GetPosition() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBasePlayerWeaponVData->Position(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CBasePlayerWeaponVData", "m_iPosition");
}
void GCBasePlayerWeaponVData::SetPosition(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBasePlayerWeaponVData->Position(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBasePlayerWeaponVData", "m_iPosition", false, value);
}
void* GCBasePlayerWeaponVData::GetPtr() {
    return m_ptr;
}
std::string GCBasePlayerWeaponVData::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCBasePlayerWeaponVData::IsValid() {
    return (m_ptr != nullptr);
}
GCEntitySubclassVDataBase GCBasePlayerWeaponVData::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CBasePlayerWeaponVData::GetParent(ptr=%p)", m_ptr));
    GCEntitySubclassVDataBase value(m_ptr);
    return value;
}
void GCBasePlayerWeaponVData::SetParent(GCEntitySubclassVDataBase value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CBasePlayerWeaponVData::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCBasePlayerWeaponVData(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCBasePlayerWeaponVData>("CBasePlayerWeaponVData")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("BuiltRightHanded", &GCBasePlayerWeaponVData::GetBuiltRightHanded, &GCBasePlayerWeaponVData::SetBuiltRightHanded)
        .addProperty("AllowFlipping", &GCBasePlayerWeaponVData::GetAllowFlipping, &GCBasePlayerWeaponVData::SetAllowFlipping)
        .addProperty("MuzzleAttachment", &GCBasePlayerWeaponVData::GetMuzzleAttachment, &GCBasePlayerWeaponVData::SetMuzzleAttachment)
        .addProperty("Flags", &GCBasePlayerWeaponVData::GetFlags, &GCBasePlayerWeaponVData::SetFlags)
        .addProperty("PrimaryAmmoType", &GCBasePlayerWeaponVData::GetPrimaryAmmoType, &GCBasePlayerWeaponVData::SetPrimaryAmmoType)
        .addProperty("SecondaryAmmoType", &GCBasePlayerWeaponVData::GetSecondaryAmmoType, &GCBasePlayerWeaponVData::SetSecondaryAmmoType)
        .addProperty("MaxClip1", &GCBasePlayerWeaponVData::GetMaxClip1, &GCBasePlayerWeaponVData::SetMaxClip1)
        .addProperty("MaxClip2", &GCBasePlayerWeaponVData::GetMaxClip2, &GCBasePlayerWeaponVData::SetMaxClip2)
        .addProperty("DefaultClip1", &GCBasePlayerWeaponVData::GetDefaultClip1, &GCBasePlayerWeaponVData::SetDefaultClip1)
        .addProperty("DefaultClip2", &GCBasePlayerWeaponVData::GetDefaultClip2, &GCBasePlayerWeaponVData::SetDefaultClip2)
        .addProperty("Weight", &GCBasePlayerWeaponVData::GetWeight, &GCBasePlayerWeaponVData::SetWeight)
        .addProperty("AutoSwitchTo", &GCBasePlayerWeaponVData::GetAutoSwitchTo, &GCBasePlayerWeaponVData::SetAutoSwitchTo)
        .addProperty("AutoSwitchFrom", &GCBasePlayerWeaponVData::GetAutoSwitchFrom, &GCBasePlayerWeaponVData::SetAutoSwitchFrom)
        .addProperty("RumbleEffect", &GCBasePlayerWeaponVData::GetRumbleEffect, &GCBasePlayerWeaponVData::SetRumbleEffect)
        .addProperty("LinkedCooldowns", &GCBasePlayerWeaponVData::GetLinkedCooldowns, &GCBasePlayerWeaponVData::SetLinkedCooldowns)
        .addProperty("Slot", &GCBasePlayerWeaponVData::GetSlot, &GCBasePlayerWeaponVData::SetSlot)
        .addProperty("Position", &GCBasePlayerWeaponVData::GetPosition, &GCBasePlayerWeaponVData::SetPosition)
        .addProperty("Parent", &GCBasePlayerWeaponVData::GetParent, &GCBasePlayerWeaponVData::SetParent)
        .addFunction("ToPtr", &GCBasePlayerWeaponVData::ToPtr)
        .addFunction("IsValid", &GCBasePlayerWeaponVData::IsValid)
        .endClass();
}
GCMathColorBlend::GCMathColorBlend(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCMathColorBlend::GCMathColorBlend(void *ptr) {
    m_ptr = ptr;
}
float GCMathColorBlend::GetInMin() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMathColorBlend->InMin(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CMathColorBlend", "m_flInMin");
}
void GCMathColorBlend::SetInMin(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMathColorBlend->InMin(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMathColorBlend", "m_flInMin", false, value);
}
float GCMathColorBlend::GetInMax() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMathColorBlend->InMax(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CMathColorBlend", "m_flInMax");
}
void GCMathColorBlend::SetInMax(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMathColorBlend->InMax(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMathColorBlend", "m_flInMax", false, value);
}
Color GCMathColorBlend::GetOutColor1() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMathColorBlend->OutColor1(ptr=%p)", m_ptr));
    return GetSchemaValue<Color>(m_ptr, "CMathColorBlend", "m_OutColor1");
}
void GCMathColorBlend::SetOutColor1(Color value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMathColorBlend->OutColor1(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMathColorBlend", "m_OutColor1", false, value);
}
Color GCMathColorBlend::GetOutColor2() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMathColorBlend->OutColor2(ptr=%p)", m_ptr));
    return GetSchemaValue<Color>(m_ptr, "CMathColorBlend", "m_OutColor2");
}
void GCMathColorBlend::SetOutColor2(Color value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMathColorBlend->OutColor2(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMathColorBlend", "m_OutColor2", false, value);
}
void* GCMathColorBlend::GetPtr() {
    return m_ptr;
}
std::string GCMathColorBlend::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCMathColorBlend::IsValid() {
    return (m_ptr != nullptr);
}
GCLogicalEntity GCMathColorBlend::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CMathColorBlend::GetParent(ptr=%p)", m_ptr));
    GCLogicalEntity value(m_ptr);
    return value;
}
void GCMathColorBlend::SetParent(GCLogicalEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CMathColorBlend::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCMathColorBlend(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCMathColorBlend>("CMathColorBlend")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("InMin", &GCMathColorBlend::GetInMin, &GCMathColorBlend::SetInMin)
        .addProperty("InMax", &GCMathColorBlend::GetInMax, &GCMathColorBlend::SetInMax)
        .addProperty("OutColor1", &GCMathColorBlend::GetOutColor1, &GCMathColorBlend::SetOutColor1)
        .addProperty("OutColor2", &GCMathColorBlend::GetOutColor2, &GCMathColorBlend::SetOutColor2)
        .addProperty("Parent", &GCMathColorBlend::GetParent, &GCMathColorBlend::SetParent)
        .addFunction("ToPtr", &GCMathColorBlend::ToPtr)
        .addFunction("IsValid", &GCMathColorBlend::IsValid)
        .endClass();
}
GCEnvScreenOverlay::GCEnvScreenOverlay(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCEnvScreenOverlay::GCEnvScreenOverlay(void *ptr) {
    m_ptr = ptr;
}
std::vector<CUtlSymbolLarge> GCEnvScreenOverlay::GetOverlayNames() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvScreenOverlay->OverlayNames(ptr=%p,size=10)", m_ptr));
    CUtlSymbolLarge* outValue = (CUtlSymbolLarge*)GetSchemaPtr(m_ptr, "CEnvScreenOverlay", "m_iszOverlayNames"); std::vector<CUtlSymbolLarge> ret; for(int i = 0; i < 10; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCEnvScreenOverlay::SetOverlayNames(std::vector<CUtlSymbolLarge> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvScreenOverlay->OverlayNames(ptr=%p,size=10)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OverlayNames' is not possible.\n");
}
std::vector<float> GCEnvScreenOverlay::GetOverlayTimes() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvScreenOverlay->OverlayTimes(ptr=%p,size=10)", m_ptr));
    float* outValue = (float*)GetSchemaPtr(m_ptr, "CEnvScreenOverlay", "m_flOverlayTimes"); std::vector<float> ret; for(int i = 0; i < 10; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCEnvScreenOverlay::SetOverlayTimes(std::vector<float> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvScreenOverlay->OverlayTimes(ptr=%p,size=10)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OverlayTimes' is not possible.\n");
}
float GCEnvScreenOverlay::GetStartTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvScreenOverlay->StartTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CEnvScreenOverlay", "m_flStartTime");
}
void GCEnvScreenOverlay::SetStartTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvScreenOverlay->StartTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvScreenOverlay", "m_flStartTime", false, value);
}
int32_t GCEnvScreenOverlay::GetDesiredOverlay() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvScreenOverlay->DesiredOverlay(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CEnvScreenOverlay", "m_iDesiredOverlay");
}
void GCEnvScreenOverlay::SetDesiredOverlay(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvScreenOverlay->DesiredOverlay(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvScreenOverlay", "m_iDesiredOverlay", false, value);
}
bool GCEnvScreenOverlay::GetIsActive() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvScreenOverlay->IsActive(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CEnvScreenOverlay", "m_bIsActive");
}
void GCEnvScreenOverlay::SetIsActive(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvScreenOverlay->IsActive(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvScreenOverlay", "m_bIsActive", false, value);
}
void* GCEnvScreenOverlay::GetPtr() {
    return m_ptr;
}
std::string GCEnvScreenOverlay::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCEnvScreenOverlay::IsValid() {
    return (m_ptr != nullptr);
}
GCPointEntity GCEnvScreenOverlay::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CEnvScreenOverlay::GetParent(ptr=%p)", m_ptr));
    GCPointEntity value(m_ptr);
    return value;
}
void GCEnvScreenOverlay::SetParent(GCPointEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CEnvScreenOverlay::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCEnvScreenOverlay(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCEnvScreenOverlay>("CEnvScreenOverlay")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("OverlayNames", &GCEnvScreenOverlay::GetOverlayNames, &GCEnvScreenOverlay::SetOverlayNames)
        .addProperty("OverlayTimes", &GCEnvScreenOverlay::GetOverlayTimes, &GCEnvScreenOverlay::SetOverlayTimes)
        .addProperty("StartTime", &GCEnvScreenOverlay::GetStartTime, &GCEnvScreenOverlay::SetStartTime)
        .addProperty("DesiredOverlay", &GCEnvScreenOverlay::GetDesiredOverlay, &GCEnvScreenOverlay::SetDesiredOverlay)
        .addProperty("IsActive", &GCEnvScreenOverlay::GetIsActive, &GCEnvScreenOverlay::SetIsActive)
        .addProperty("Parent", &GCEnvScreenOverlay::GetParent, &GCEnvScreenOverlay::SetParent)
        .addFunction("ToPtr", &GCEnvScreenOverlay::ToPtr)
        .addFunction("IsValid", &GCEnvScreenOverlay::IsValid)
        .endClass();
}
GCCSPlayerPawn::GCCSPlayerPawn(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCCSPlayerPawn::GCCSPlayerPawn(void *ptr) {
    m_ptr = ptr;
}
GCCSPlayer_BulletServices GCCSPlayerPawn::GetBulletServices() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->BulletServices(ptr=%p)", m_ptr));
    GCCSPlayer_BulletServices value(*(void**)GetSchemaPtr(m_ptr, "CCSPlayerPawn", "m_pBulletServices"));
    return value;
}
void GCCSPlayerPawn::SetBulletServices(GCCSPlayer_BulletServices value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->BulletServices(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn","m_pBulletServices", false, (char*)value.GetPtr());
}
GCCSPlayer_HostageServices GCCSPlayerPawn::GetHostageServices() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->HostageServices(ptr=%p)", m_ptr));
    GCCSPlayer_HostageServices value(*(void**)GetSchemaPtr(m_ptr, "CCSPlayerPawn", "m_pHostageServices"));
    return value;
}
void GCCSPlayerPawn::SetHostageServices(GCCSPlayer_HostageServices value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->HostageServices(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn","m_pHostageServices", false, (char*)value.GetPtr());
}
GCCSPlayer_BuyServices GCCSPlayerPawn::GetBuyServices() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->BuyServices(ptr=%p)", m_ptr));
    GCCSPlayer_BuyServices value(*(void**)GetSchemaPtr(m_ptr, "CCSPlayerPawn", "m_pBuyServices"));
    return value;
}
void GCCSPlayerPawn::SetBuyServices(GCCSPlayer_BuyServices value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->BuyServices(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn","m_pBuyServices", false, (char*)value.GetPtr());
}
GCCSPlayer_ActionTrackingServices GCCSPlayerPawn::GetActionTrackingServices() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->ActionTrackingServices(ptr=%p)", m_ptr));
    GCCSPlayer_ActionTrackingServices value(*(void**)GetSchemaPtr(m_ptr, "CCSPlayerPawn", "m_pActionTrackingServices"));
    return value;
}
void GCCSPlayerPawn::SetActionTrackingServices(GCCSPlayer_ActionTrackingServices value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->ActionTrackingServices(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn","m_pActionTrackingServices", false, (char*)value.GetPtr());
}
GCCSPlayer_RadioServices GCCSPlayerPawn::GetRadioServices() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->RadioServices(ptr=%p)", m_ptr));
    GCCSPlayer_RadioServices value(*(void**)GetSchemaPtr(m_ptr, "CCSPlayerPawn", "m_pRadioServices"));
    return value;
}
void GCCSPlayerPawn::SetRadioServices(GCCSPlayer_RadioServices value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->RadioServices(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn","m_pRadioServices", false, (char*)value.GetPtr());
}
GCCSPlayer_DamageReactServices GCCSPlayerPawn::GetDamageReactServices() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->DamageReactServices(ptr=%p)", m_ptr));
    GCCSPlayer_DamageReactServices value(*(void**)GetSchemaPtr(m_ptr, "CCSPlayerPawn", "m_pDamageReactServices"));
    return value;
}
void GCCSPlayerPawn::SetDamageReactServices(GCCSPlayer_DamageReactServices value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->DamageReactServices(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn","m_pDamageReactServices", false, (char*)value.GetPtr());
}
uint16_t GCCSPlayerPawn::GetCharacterDefIndex() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->CharacterDefIndex(ptr=%p)", m_ptr));
    return GetSchemaValue<uint16_t>(m_ptr, "CCSPlayerPawn", "m_nCharacterDefIndex");
}
void GCCSPlayerPawn::SetCharacterDefIndex(uint16_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->CharacterDefIndex(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_nCharacterDefIndex", false, value);
}
bool GCCSPlayerPawn::GetHasFemaleVoice() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->HasFemaleVoice(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bHasFemaleVoice");
}
void GCCSPlayerPawn::SetHasFemaleVoice(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->HasFemaleVoice(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bHasFemaleVoice", false, value);
}
std::string GCCSPlayerPawn::GetStrVOPrefix() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->StrVOPrefix(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlString>(m_ptr, "CCSPlayerPawn", "m_strVOPrefix").Get();
}
void GCCSPlayerPawn::SetStrVOPrefix(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->StrVOPrefix(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_strVOPrefix", false, CUtlString(value.c_str()));
}
std::string GCCSPlayerPawn::GetLastPlaceName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->LastPlaceName(ptr=%p)", m_ptr));
    return GetSchemaValuePtr<char>(m_ptr, "CCSPlayerPawn", "m_szLastPlaceName");
}
void GCCSPlayerPawn::SetLastPlaceName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->LastPlaceName(ptr=%p)", m_ptr));
    WriteSchemaPtrValue(m_ptr, "CCSPlayerPawn", "m_szLastPlaceName", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 18);
}
bool GCCSPlayerPawn::GetInHostageResetZone() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->InHostageResetZone(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bInHostageResetZone");
}
void GCCSPlayerPawn::SetInHostageResetZone(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->InHostageResetZone(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bInHostageResetZone", false, value);
}
bool GCCSPlayerPawn::GetInBuyZone() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->InBuyZone(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bInBuyZone");
}
void GCCSPlayerPawn::SetInBuyZone(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->InBuyZone(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bInBuyZone", false, value);
}
bool GCCSPlayerPawn::GetWasInBuyZone() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->WasInBuyZone(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bWasInBuyZone");
}
void GCCSPlayerPawn::SetWasInBuyZone(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->WasInBuyZone(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bWasInBuyZone", false, value);
}
bool GCCSPlayerPawn::GetInHostageRescueZone() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->InHostageRescueZone(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bInHostageRescueZone");
}
void GCCSPlayerPawn::SetInHostageRescueZone(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->InHostageRescueZone(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bInHostageRescueZone", false, value);
}
bool GCCSPlayerPawn::GetInBombZone() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->InBombZone(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bInBombZone");
}
void GCCSPlayerPawn::SetInBombZone(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->InBombZone(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bInBombZone", false, value);
}
bool GCCSPlayerPawn::GetWasInHostageRescueZone() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->WasInHostageRescueZone(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bWasInHostageRescueZone");
}
void GCCSPlayerPawn::SetWasInHostageRescueZone(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->WasInHostageRescueZone(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bWasInHostageRescueZone", false, value);
}
int32_t GCCSPlayerPawn::GetRetakesOffering() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->RetakesOffering(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawn", "m_iRetakesOffering");
}
void GCCSPlayerPawn::SetRetakesOffering(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->RetakesOffering(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_iRetakesOffering", false, value);
}
int32_t GCCSPlayerPawn::GetRetakesOfferingCard() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->RetakesOfferingCard(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawn", "m_iRetakesOfferingCard");
}
void GCCSPlayerPawn::SetRetakesOfferingCard(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->RetakesOfferingCard(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_iRetakesOfferingCard", false, value);
}
bool GCCSPlayerPawn::GetRetakesHasDefuseKit() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->RetakesHasDefuseKit(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bRetakesHasDefuseKit");
}
void GCCSPlayerPawn::SetRetakesHasDefuseKit(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->RetakesHasDefuseKit(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bRetakesHasDefuseKit", false, value);
}
bool GCCSPlayerPawn::GetRetakesMVPLastRound() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->RetakesMVPLastRound(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bRetakesMVPLastRound");
}
void GCCSPlayerPawn::SetRetakesMVPLastRound(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->RetakesMVPLastRound(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bRetakesMVPLastRound", false, value);
}
int32_t GCCSPlayerPawn::GetRetakesMVPBoostItem() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->RetakesMVPBoostItem(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawn", "m_iRetakesMVPBoostItem");
}
void GCCSPlayerPawn::SetRetakesMVPBoostItem(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->RetakesMVPBoostItem(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_iRetakesMVPBoostItem", false, value);
}
uint64_t GCCSPlayerPawn::GetRetakesMVPBoostExtraUtility() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->RetakesMVPBoostExtraUtility(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CCSPlayerPawn", "m_RetakesMVPBoostExtraUtility");
}
void GCCSPlayerPawn::SetRetakesMVPBoostExtraUtility(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->RetakesMVPBoostExtraUtility(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_RetakesMVPBoostExtraUtility", false, value);
}
float GCCSPlayerPawn::GetHealthShotBoostExpirationTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->HealthShotBoostExpirationTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_flHealthShotBoostExpirationTime");
}
void GCCSPlayerPawn::SetHealthShotBoostExpirationTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->HealthShotBoostExpirationTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_flHealthShotBoostExpirationTime", false, value);
}
float GCCSPlayerPawn::GetLandingTimeSeconds() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->LandingTimeSeconds(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_flLandingTimeSeconds");
}
void GCCSPlayerPawn::SetLandingTimeSeconds(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->LandingTimeSeconds(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_flLandingTimeSeconds", false, value);
}
QAngle GCCSPlayerPawn::GetAimPunchAngle() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->AimPunchAngle(ptr=%p)", m_ptr));
    return GetSchemaValue<QAngle>(m_ptr, "CCSPlayerPawn", "m_aimPunchAngle");
}
void GCCSPlayerPawn::SetAimPunchAngle(QAngle value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->AimPunchAngle(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_aimPunchAngle", false, value);
}
QAngle GCCSPlayerPawn::GetAimPunchAngleVel() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->AimPunchAngleVel(ptr=%p)", m_ptr));
    return GetSchemaValue<QAngle>(m_ptr, "CCSPlayerPawn", "m_aimPunchAngleVel");
}
void GCCSPlayerPawn::SetAimPunchAngleVel(QAngle value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->AimPunchAngleVel(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_aimPunchAngleVel", false, value);
}
int32_t GCCSPlayerPawn::GetAimPunchTickBase() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->AimPunchTickBase(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawn", "m_aimPunchTickBase");
}
void GCCSPlayerPawn::SetAimPunchTickBase(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->AimPunchTickBase(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_aimPunchTickBase", false, value);
}
float GCCSPlayerPawn::GetAimPunchTickFraction() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->AimPunchTickFraction(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_aimPunchTickFraction");
}
void GCCSPlayerPawn::SetAimPunchTickFraction(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->AimPunchTickFraction(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_aimPunchTickFraction", false, value);
}
std::vector<QAngle> GCCSPlayerPawn::GetAimPunchCache() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->AimPunchCache(ptr=%p)", m_ptr));
    CUtlVector<QAngle>* vec = GetSchemaValue<CUtlVector<QAngle>*>(m_ptr, "CCSPlayerPawn", "m_aimPunchCache"); std::vector<QAngle> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCCSPlayerPawn::SetAimPunchCache(std::vector<QAngle> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->AimPunchCache(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<QAngle>(m_ptr, "CCSPlayerPawn", "m_aimPunchCache", false, value);
}
bool GCCSPlayerPawn::GetIsBuyMenuOpen() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->IsBuyMenuOpen(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bIsBuyMenuOpen");
}
void GCCSPlayerPawn::SetIsBuyMenuOpen(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->IsBuyMenuOpen(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bIsBuyMenuOpen", false, value);
}
bool GCCSPlayerPawn::GetLastHeadBoneTransformIsValid() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->LastHeadBoneTransformIsValid(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bLastHeadBoneTransformIsValid");
}
void GCCSPlayerPawn::SetLastHeadBoneTransformIsValid(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->LastHeadBoneTransformIsValid(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bLastHeadBoneTransformIsValid", false, value);
}
float GCCSPlayerPawn::GetLastLandTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->LastLandTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_lastLandTime");
}
void GCCSPlayerPawn::SetLastLandTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->LastLandTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_lastLandTime", false, value);
}
bool GCCSPlayerPawn::GetOnGroundLastTick() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->OnGroundLastTick(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bOnGroundLastTick");
}
void GCCSPlayerPawn::SetOnGroundLastTick(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->OnGroundLastTick(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bOnGroundLastTick", false, value);
}
int32_t GCCSPlayerPawn::GetPlayerLocked() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->PlayerLocked(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawn", "m_iPlayerLocked");
}
void GCCSPlayerPawn::SetPlayerLocked(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->PlayerLocked(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_iPlayerLocked", false, value);
}
float GCCSPlayerPawn::GetTimeOfLastInjury() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->TimeOfLastInjury(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_flTimeOfLastInjury");
}
void GCCSPlayerPawn::SetTimeOfLastInjury(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->TimeOfLastInjury(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_flTimeOfLastInjury", false, value);
}
float GCCSPlayerPawn::GetNextSprayDecalTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->NextSprayDecalTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_flNextSprayDecalTime");
}
void GCCSPlayerPawn::SetNextSprayDecalTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->NextSprayDecalTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_flNextSprayDecalTime", false, value);
}
bool GCCSPlayerPawn::GetNextSprayDecalTimeExpedited() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->NextSprayDecalTimeExpedited(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bNextSprayDecalTimeExpedited");
}
void GCCSPlayerPawn::SetNextSprayDecalTimeExpedited(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->NextSprayDecalTimeExpedited(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bNextSprayDecalTimeExpedited", false, value);
}
int32_t GCCSPlayerPawn::GetRagdollDamageBone() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->RagdollDamageBone(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawn", "m_nRagdollDamageBone");
}
void GCCSPlayerPawn::SetRagdollDamageBone(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->RagdollDamageBone(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_nRagdollDamageBone", false, value);
}
Vector GCCSPlayerPawn::GetRagdollDamageForce() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->RagdollDamageForce(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CCSPlayerPawn", "m_vRagdollDamageForce");
}
void GCCSPlayerPawn::SetRagdollDamageForce(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->RagdollDamageForce(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_vRagdollDamageForce", false, value);
}
Vector GCCSPlayerPawn::GetRagdollDamagePosition() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->RagdollDamagePosition(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CCSPlayerPawn", "m_vRagdollDamagePosition");
}
void GCCSPlayerPawn::SetRagdollDamagePosition(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->RagdollDamagePosition(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_vRagdollDamagePosition", false, value);
}
std::string GCCSPlayerPawn::GetRagdollDamageWeaponName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->RagdollDamageWeaponName(ptr=%p)", m_ptr));
    return GetSchemaValuePtr<char>(m_ptr, "CCSPlayerPawn", "m_szRagdollDamageWeaponName");
}
void GCCSPlayerPawn::SetRagdollDamageWeaponName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->RagdollDamageWeaponName(ptr=%p)", m_ptr));
    WriteSchemaPtrValue(m_ptr, "CCSPlayerPawn", "m_szRagdollDamageWeaponName", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 64);
}
bool GCCSPlayerPawn::GetRagdollDamageHeadshot() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->RagdollDamageHeadshot(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bRagdollDamageHeadshot");
}
void GCCSPlayerPawn::SetRagdollDamageHeadshot(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->RagdollDamageHeadshot(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bRagdollDamageHeadshot", false, value);
}
Vector GCCSPlayerPawn::GetRagdollServerOrigin() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->RagdollServerOrigin(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CCSPlayerPawn", "m_vRagdollServerOrigin");
}
void GCCSPlayerPawn::SetRagdollServerOrigin(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->RagdollServerOrigin(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_vRagdollServerOrigin", false, value);
}
GCEconItemView GCCSPlayerPawn::GetEconGloves() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->EconGloves(ptr=%p)", m_ptr));
    GCEconItemView value(GetSchemaPtr(m_ptr, "CCSPlayerPawn", "m_EconGloves"));
    return value;
}
void GCCSPlayerPawn::SetEconGloves(GCEconItemView value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->EconGloves(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'EconGloves' is not possible.\n");
}
uint32_t GCCSPlayerPawn::GetEconGlovesChanged() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->EconGlovesChanged(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CCSPlayerPawn", "m_nEconGlovesChanged");
}
void GCCSPlayerPawn::SetEconGlovesChanged(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->EconGlovesChanged(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_nEconGlovesChanged", false, value);
}
QAngle GCCSPlayerPawn::GetDeathEyeAngles() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->DeathEyeAngles(ptr=%p)", m_ptr));
    return GetSchemaValue<QAngle>(m_ptr, "CCSPlayerPawn", "m_qDeathEyeAngles");
}
void GCCSPlayerPawn::SetDeathEyeAngles(QAngle value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->DeathEyeAngles(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_qDeathEyeAngles", false, value);
}
bool GCCSPlayerPawn::GetSkipOneHeadConstraintUpdate() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->SkipOneHeadConstraintUpdate(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bSkipOneHeadConstraintUpdate");
}
void GCCSPlayerPawn::SetSkipOneHeadConstraintUpdate(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->SkipOneHeadConstraintUpdate(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bSkipOneHeadConstraintUpdate", false, value);
}
bool GCCSPlayerPawn::GetLeftHanded() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->LeftHanded(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bLeftHanded");
}
void GCCSPlayerPawn::SetLeftHanded(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->LeftHanded(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bLeftHanded", false, value);
}
float GCCSPlayerPawn::GetSwitchedHandednessTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->SwitchedHandednessTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_fSwitchedHandednessTime");
}
void GCCSPlayerPawn::SetSwitchedHandednessTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->SwitchedHandednessTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_fSwitchedHandednessTime", false, value);
}
float GCCSPlayerPawn::GetViewmodelOffsetX() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->ViewmodelOffsetX(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_flViewmodelOffsetX");
}
void GCCSPlayerPawn::SetViewmodelOffsetX(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->ViewmodelOffsetX(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_flViewmodelOffsetX", false, value);
}
float GCCSPlayerPawn::GetViewmodelOffsetY() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->ViewmodelOffsetY(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_flViewmodelOffsetY");
}
void GCCSPlayerPawn::SetViewmodelOffsetY(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->ViewmodelOffsetY(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_flViewmodelOffsetY", false, value);
}
float GCCSPlayerPawn::GetViewmodelOffsetZ() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->ViewmodelOffsetZ(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_flViewmodelOffsetZ");
}
void GCCSPlayerPawn::SetViewmodelOffsetZ(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->ViewmodelOffsetZ(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_flViewmodelOffsetZ", false, value);
}
float GCCSPlayerPawn::GetViewmodelFOV() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->ViewmodelFOV(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_flViewmodelFOV");
}
void GCCSPlayerPawn::SetViewmodelFOV(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->ViewmodelFOV(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_flViewmodelFOV", false, value);
}
bool GCCSPlayerPawn::GetIsWalking() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->IsWalking(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bIsWalking");
}
void GCCSPlayerPawn::SetIsWalking(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->IsWalking(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bIsWalking", false, value);
}
float GCCSPlayerPawn::GetLastGivenDefuserTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->LastGivenDefuserTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_fLastGivenDefuserTime");
}
void GCCSPlayerPawn::SetLastGivenDefuserTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->LastGivenDefuserTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_fLastGivenDefuserTime", false, value);
}
float GCCSPlayerPawn::GetLastGivenBombTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->LastGivenBombTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_fLastGivenBombTime");
}
void GCCSPlayerPawn::SetLastGivenBombTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->LastGivenBombTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_fLastGivenBombTime", false, value);
}
float GCCSPlayerPawn::GetDealtDamageToEnemyMostRecentTimestamp() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->DealtDamageToEnemyMostRecentTimestamp(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_flDealtDamageToEnemyMostRecentTimestamp");
}
void GCCSPlayerPawn::SetDealtDamageToEnemyMostRecentTimestamp(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->DealtDamageToEnemyMostRecentTimestamp(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_flDealtDamageToEnemyMostRecentTimestamp", false, value);
}
uint32_t GCCSPlayerPawn::GetDisplayHistoryBits() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->DisplayHistoryBits(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CCSPlayerPawn", "m_iDisplayHistoryBits");
}
void GCCSPlayerPawn::SetDisplayHistoryBits(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->DisplayHistoryBits(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_iDisplayHistoryBits", false, value);
}
float GCCSPlayerPawn::GetLastAttackedTeammate() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->LastAttackedTeammate(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_flLastAttackedTeammate");
}
void GCCSPlayerPawn::SetLastAttackedTeammate(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->LastAttackedTeammate(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_flLastAttackedTeammate", false, value);
}
float GCCSPlayerPawn::GetAllowAutoFollowTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->AllowAutoFollowTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_allowAutoFollowTime");
}
void GCCSPlayerPawn::SetAllowAutoFollowTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->AllowAutoFollowTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_allowAutoFollowTime", false, value);
}
bool GCCSPlayerPawn::GetResetArmorNextSpawn() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->ResetArmorNextSpawn(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bResetArmorNextSpawn");
}
void GCCSPlayerPawn::SetResetArmorNextSpawn(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->ResetArmorNextSpawn(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bResetArmorNextSpawn", false, value);
}
int GCCSPlayerPawn::GetLastKillerIndex() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->LastKillerIndex(ptr=%p)", m_ptr));
    return GetSchemaValue<CEntityIndex>(m_ptr, "CCSPlayerPawn", "m_nLastKillerIndex").Get();
}
void GCCSPlayerPawn::SetLastKillerIndex(int value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->LastKillerIndex(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_nLastKillerIndex", false, CEntityIndex(value));
}
GEntitySpottedState_t GCCSPlayerPawn::GetEntitySpottedState() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->EntitySpottedState(ptr=%p)", m_ptr));
    GEntitySpottedState_t value(GetSchemaPtr(m_ptr, "CCSPlayerPawn", "m_entitySpottedState"));
    return value;
}
void GCCSPlayerPawn::SetEntitySpottedState(GEntitySpottedState_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->EntitySpottedState(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'EntitySpottedState' is not possible.\n");
}
int32_t GCCSPlayerPawn::GetSpotRules() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->SpotRules(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawn", "m_nSpotRules");
}
void GCCSPlayerPawn::SetSpotRules(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->SpotRules(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_nSpotRules", false, value);
}
bool GCCSPlayerPawn::GetIsScoped() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->IsScoped(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bIsScoped");
}
void GCCSPlayerPawn::SetIsScoped(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->IsScoped(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bIsScoped", false, value);
}
bool GCCSPlayerPawn::GetResumeZoom() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->ResumeZoom(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bResumeZoom");
}
void GCCSPlayerPawn::SetResumeZoom(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->ResumeZoom(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bResumeZoom", false, value);
}
bool GCCSPlayerPawn::GetIsDefusing() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->IsDefusing(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bIsDefusing");
}
void GCCSPlayerPawn::SetIsDefusing(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->IsDefusing(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bIsDefusing", false, value);
}
bool GCCSPlayerPawn::GetIsGrabbingHostage() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->IsGrabbingHostage(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bIsGrabbingHostage");
}
void GCCSPlayerPawn::SetIsGrabbingHostage(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->IsGrabbingHostage(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bIsGrabbingHostage", false, value);
}
uint64_t GCCSPlayerPawn::GetBlockingUseActionInProgress() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->BlockingUseActionInProgress(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CCSPlayerPawn", "m_iBlockingUseActionInProgress");
}
void GCCSPlayerPawn::SetBlockingUseActionInProgress(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->BlockingUseActionInProgress(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_iBlockingUseActionInProgress", false, value);
}
float GCCSPlayerPawn::GetEmitSoundTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->EmitSoundTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_flEmitSoundTime");
}
void GCCSPlayerPawn::SetEmitSoundTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->EmitSoundTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_flEmitSoundTime", false, value);
}
bool GCCSPlayerPawn::GetInNoDefuseArea() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->InNoDefuseArea(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bInNoDefuseArea");
}
void GCCSPlayerPawn::SetInNoDefuseArea(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->InNoDefuseArea(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bInNoDefuseArea", false, value);
}
int GCCSPlayerPawn::GetBombSiteIndex() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->BombSiteIndex(ptr=%p)", m_ptr));
    return GetSchemaValue<CEntityIndex>(m_ptr, "CCSPlayerPawn", "m_iBombSiteIndex").Get();
}
void GCCSPlayerPawn::SetBombSiteIndex(int value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->BombSiteIndex(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_iBombSiteIndex", false, CEntityIndex(value));
}
int32_t GCCSPlayerPawn::GetWhichBombZone() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->WhichBombZone(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawn", "m_nWhichBombZone");
}
void GCCSPlayerPawn::SetWhichBombZone(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->WhichBombZone(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_nWhichBombZone", false, value);
}
bool GCCSPlayerPawn::GetInBombZoneTrigger() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->InBombZoneTrigger(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bInBombZoneTrigger");
}
void GCCSPlayerPawn::SetInBombZoneTrigger(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->InBombZoneTrigger(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bInBombZoneTrigger", false, value);
}
bool GCCSPlayerPawn::GetWasInBombZoneTrigger() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->WasInBombZoneTrigger(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bWasInBombZoneTrigger");
}
void GCCSPlayerPawn::SetWasInBombZoneTrigger(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->WasInBombZoneTrigger(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bWasInBombZoneTrigger", false, value);
}
int32_t GCCSPlayerPawn::GetShotsFired() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->ShotsFired(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawn", "m_iShotsFired");
}
void GCCSPlayerPawn::SetShotsFired(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->ShotsFired(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_iShotsFired", false, value);
}
float GCCSPlayerPawn::GetFlinchStack() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->FlinchStack(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_flFlinchStack");
}
void GCCSPlayerPawn::SetFlinchStack(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->FlinchStack(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_flFlinchStack", false, value);
}
float GCCSPlayerPawn::GetVelocityModifier() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->VelocityModifier(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_flVelocityModifier");
}
void GCCSPlayerPawn::SetVelocityModifier(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->VelocityModifier(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_flVelocityModifier", false, value);
}
float GCCSPlayerPawn::GetHitHeading() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->HitHeading(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_flHitHeading");
}
void GCCSPlayerPawn::SetHitHeading(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->HitHeading(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_flHitHeading", false, value);
}
int32_t GCCSPlayerPawn::GetHitBodyPart() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->HitBodyPart(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawn", "m_nHitBodyPart");
}
void GCCSPlayerPawn::SetHitBodyPart(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->HitBodyPart(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_nHitBodyPart", false, value);
}
Vector GCCSPlayerPawn::GetTotalBulletForce() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->TotalBulletForce(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CCSPlayerPawn", "m_vecTotalBulletForce");
}
void GCCSPlayerPawn::SetTotalBulletForce(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->TotalBulletForce(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_vecTotalBulletForce", false, value);
}
bool GCCSPlayerPawn::GetWaitForNoAttack() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->WaitForNoAttack(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bWaitForNoAttack");
}
void GCCSPlayerPawn::SetWaitForNoAttack(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->WaitForNoAttack(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bWaitForNoAttack", false, value);
}
float GCCSPlayerPawn::GetIgnoreLadderJumpTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->IgnoreLadderJumpTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_ignoreLadderJumpTime");
}
void GCCSPlayerPawn::SetIgnoreLadderJumpTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->IgnoreLadderJumpTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_ignoreLadderJumpTime", false, value);
}
bool GCCSPlayerPawn::GetKilledByHeadshot() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->KilledByHeadshot(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bKilledByHeadshot");
}
void GCCSPlayerPawn::SetKilledByHeadshot(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->KilledByHeadshot(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bKilledByHeadshot", false, value);
}
int32_t GCCSPlayerPawn::GetLastHitBox() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->LastHitBox(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawn", "m_LastHitBox");
}
void GCCSPlayerPawn::SetLastHitBox(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->LastHitBox(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_LastHitBox", false, value);
}
int32_t GCCSPlayerPawn::GetLastHealth() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->LastHealth(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawn", "m_LastHealth");
}
void GCCSPlayerPawn::SetLastHealth(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->LastHealth(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_LastHealth", false, value);
}
GCCSBot GCCSPlayerPawn::GetBot() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->Bot(ptr=%p)", m_ptr));
    GCCSBot value(*(void**)GetSchemaPtr(m_ptr, "CCSPlayerPawn", "m_pBot"));
    return value;
}
void GCCSPlayerPawn::SetBot(GCCSBot value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->Bot(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn","m_pBot", false, (char*)value.GetPtr());
}
bool GCCSPlayerPawn::GetBotAllowActive() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->BotAllowActive(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bBotAllowActive");
}
void GCCSPlayerPawn::SetBotAllowActive(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->BotAllowActive(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bBotAllowActive", false, value);
}
QAngle GCCSPlayerPawn::GetThirdPersonHeading() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->ThirdPersonHeading(ptr=%p)", m_ptr));
    return GetSchemaValue<QAngle>(m_ptr, "CCSPlayerPawn", "m_thirdPersonHeading");
}
void GCCSPlayerPawn::SetThirdPersonHeading(QAngle value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->ThirdPersonHeading(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_thirdPersonHeading", false, value);
}
float GCCSPlayerPawn::GetSlopeDropOffset() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->SlopeDropOffset(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_flSlopeDropOffset");
}
void GCCSPlayerPawn::SetSlopeDropOffset(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->SlopeDropOffset(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_flSlopeDropOffset", false, value);
}
float GCCSPlayerPawn::GetSlopeDropHeight() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->SlopeDropHeight(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_flSlopeDropHeight");
}
void GCCSPlayerPawn::SetSlopeDropHeight(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->SlopeDropHeight(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_flSlopeDropHeight", false, value);
}
Vector GCCSPlayerPawn::GetHeadConstraintOffset() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->HeadConstraintOffset(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CCSPlayerPawn", "m_vHeadConstraintOffset");
}
void GCCSPlayerPawn::SetHeadConstraintOffset(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->HeadConstraintOffset(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_vHeadConstraintOffset", false, value);
}
int32_t GCCSPlayerPawn::GetLastPickupPriority() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->LastPickupPriority(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawn", "m_nLastPickupPriority");
}
void GCCSPlayerPawn::SetLastPickupPriority(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->LastPickupPriority(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_nLastPickupPriority", false, value);
}
float GCCSPlayerPawn::GetLastPickupPriorityTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->LastPickupPriorityTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_flLastPickupPriorityTime");
}
void GCCSPlayerPawn::SetLastPickupPriorityTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->LastPickupPriorityTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_flLastPickupPriorityTime", false, value);
}
int32_t GCCSPlayerPawn::GetArmorValue() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->ArmorValue(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawn", "m_ArmorValue");
}
void GCCSPlayerPawn::SetArmorValue(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->ArmorValue(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_ArmorValue", false, value);
}
uint16_t GCCSPlayerPawn::GetCurrentEquipmentValue() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->CurrentEquipmentValue(ptr=%p)", m_ptr));
    return GetSchemaValue<uint16_t>(m_ptr, "CCSPlayerPawn", "m_unCurrentEquipmentValue");
}
void GCCSPlayerPawn::SetCurrentEquipmentValue(uint16_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->CurrentEquipmentValue(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_unCurrentEquipmentValue", false, value);
}
uint16_t GCCSPlayerPawn::GetRoundStartEquipmentValue() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->RoundStartEquipmentValue(ptr=%p)", m_ptr));
    return GetSchemaValue<uint16_t>(m_ptr, "CCSPlayerPawn", "m_unRoundStartEquipmentValue");
}
void GCCSPlayerPawn::SetRoundStartEquipmentValue(uint16_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->RoundStartEquipmentValue(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_unRoundStartEquipmentValue", false, value);
}
uint16_t GCCSPlayerPawn::GetFreezetimeEndEquipmentValue() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->FreezetimeEndEquipmentValue(ptr=%p)", m_ptr));
    return GetSchemaValue<uint16_t>(m_ptr, "CCSPlayerPawn", "m_unFreezetimeEndEquipmentValue");
}
void GCCSPlayerPawn::SetFreezetimeEndEquipmentValue(uint16_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->FreezetimeEndEquipmentValue(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_unFreezetimeEndEquipmentValue", false, value);
}
int32_t GCCSPlayerPawn::GetLastWeaponFireUsercmd() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->LastWeaponFireUsercmd(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawn", "m_iLastWeaponFireUsercmd");
}
void GCCSPlayerPawn::SetLastWeaponFireUsercmd(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->LastWeaponFireUsercmd(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_iLastWeaponFireUsercmd", false, value);
}
float GCCSPlayerPawn::GetLastFriendlyFireDamageReductionRatio() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->LastFriendlyFireDamageReductionRatio(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_flLastFriendlyFireDamageReductionRatio");
}
void GCCSPlayerPawn::SetLastFriendlyFireDamageReductionRatio(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->LastFriendlyFireDamageReductionRatio(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_flLastFriendlyFireDamageReductionRatio", false, value);
}
bool GCCSPlayerPawn::GetIsSpawning() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->IsSpawning(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bIsSpawning");
}
void GCCSPlayerPawn::SetIsSpawning(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->IsSpawning(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bIsSpawning", false, value);
}
int32_t GCCSPlayerPawn::GetDeathFlags() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->DeathFlags(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerPawn", "m_iDeathFlags");
}
void GCCSPlayerPawn::SetDeathFlags(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->DeathFlags(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_iDeathFlags", false, value);
}
bool GCCSPlayerPawn::GetHasDeathInfo() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->HasDeathInfo(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bHasDeathInfo");
}
void GCCSPlayerPawn::SetHasDeathInfo(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->HasDeathInfo(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bHasDeathInfo", false, value);
}
float GCCSPlayerPawn::GetDeathInfoTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->DeathInfoTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_flDeathInfoTime");
}
void GCCSPlayerPawn::SetDeathInfoTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->DeathInfoTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_flDeathInfoTime", false, value);
}
Vector GCCSPlayerPawn::GetDeathInfoOrigin() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->DeathInfoOrigin(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CCSPlayerPawn", "m_vecDeathInfoOrigin");
}
void GCCSPlayerPawn::SetDeathInfoOrigin(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->DeathInfoOrigin(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_vecDeathInfoOrigin", false, value);
}
std::vector<uint32_t> GCCSPlayerPawn::GetPlayerPatchEconIndices() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->PlayerPatchEconIndices(ptr=%p,size=5)", m_ptr));
    uint32_t* outValue = (uint32_t*)GetSchemaPtr(m_ptr, "CCSPlayerPawn", "m_vecPlayerPatchEconIndices"); std::vector<uint32_t> ret; for(int i = 0; i < 5; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCCSPlayerPawn::SetPlayerPatchEconIndices(std::vector<uint32_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->PlayerPatchEconIndices(ptr=%p,size=5)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'PlayerPatchEconIndices' is not possible.\n");
}
Color GCCSPlayerPawn::GetGunGameImmunityColor() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->GunGameImmunityColor(ptr=%p)", m_ptr));
    return GetSchemaValue<Color>(m_ptr, "CCSPlayerPawn", "m_GunGameImmunityColor");
}
void GCCSPlayerPawn::SetGunGameImmunityColor(Color value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->GunGameImmunityColor(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_GunGameImmunityColor", false, value);
}
float GCCSPlayerPawn::GetGrenadeParameterStashTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->GrenadeParameterStashTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerPawn", "m_grenadeParameterStashTime");
}
void GCCSPlayerPawn::SetGrenadeParameterStashTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->GrenadeParameterStashTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_grenadeParameterStashTime", false, value);
}
bool GCCSPlayerPawn::GetGrenadeParametersStashed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->GrenadeParametersStashed(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerPawn", "m_bGrenadeParametersStashed");
}
void GCCSPlayerPawn::SetGrenadeParametersStashed(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->GrenadeParametersStashed(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_bGrenadeParametersStashed", false, value);
}
QAngle GCCSPlayerPawn::GetStashedShootAngles() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->StashedShootAngles(ptr=%p)", m_ptr));
    return GetSchemaValue<QAngle>(m_ptr, "CCSPlayerPawn", "m_angStashedShootAngles");
}
void GCCSPlayerPawn::SetStashedShootAngles(QAngle value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->StashedShootAngles(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_angStashedShootAngles", false, value);
}
Vector GCCSPlayerPawn::GetStashedGrenadeThrowPosition() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->StashedGrenadeThrowPosition(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CCSPlayerPawn", "m_vecStashedGrenadeThrowPosition");
}
void GCCSPlayerPawn::SetStashedGrenadeThrowPosition(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->StashedGrenadeThrowPosition(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_vecStashedGrenadeThrowPosition", false, value);
}
Vector GCCSPlayerPawn::GetStashedVelocity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->StashedVelocity(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CCSPlayerPawn", "m_vecStashedVelocity");
}
void GCCSPlayerPawn::SetStashedVelocity(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->StashedVelocity(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerPawn", "m_vecStashedVelocity", false, value);
}
std::vector<QAngle> GCCSPlayerPawn::GetShootAngleHistory() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->ShootAngleHistory(ptr=%p,size=2)", m_ptr));
    QAngle* outValue = (QAngle*)GetSchemaPtr(m_ptr, "CCSPlayerPawn", "m_angShootAngleHistory"); std::vector<QAngle> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCCSPlayerPawn::SetShootAngleHistory(std::vector<QAngle> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->ShootAngleHistory(ptr=%p,size=2)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ShootAngleHistory' is not possible.\n");
}
std::vector<Vector> GCCSPlayerPawn::GetThrowPositionHistory() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->ThrowPositionHistory(ptr=%p,size=2)", m_ptr));
    Vector* outValue = (Vector*)GetSchemaPtr(m_ptr, "CCSPlayerPawn", "m_vecThrowPositionHistory"); std::vector<Vector> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCCSPlayerPawn::SetThrowPositionHistory(std::vector<Vector> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->ThrowPositionHistory(ptr=%p,size=2)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ThrowPositionHistory' is not possible.\n");
}
std::vector<Vector> GCCSPlayerPawn::GetVelocityHistory() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerPawn->VelocityHistory(ptr=%p,size=2)", m_ptr));
    Vector* outValue = (Vector*)GetSchemaPtr(m_ptr, "CCSPlayerPawn", "m_vecVelocityHistory"); std::vector<Vector> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCCSPlayerPawn::SetVelocityHistory(std::vector<Vector> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerPawn->VelocityHistory(ptr=%p,size=2)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'VelocityHistory' is not possible.\n");
}
void* GCCSPlayerPawn::GetPtr() {
    return m_ptr;
}
std::string GCCSPlayerPawn::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCCSPlayerPawn::IsValid() {
    return (m_ptr != nullptr);
}
GCCSPlayerPawnBase GCCSPlayerPawn::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSPlayerPawn::GetParent(ptr=%p)", m_ptr));
    GCCSPlayerPawnBase value(m_ptr);
    return value;
}
void GCCSPlayerPawn::SetParent(GCCSPlayerPawnBase value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSPlayerPawn::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCCSPlayerPawn(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCCSPlayerPawn>("CCSPlayerPawn")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("BulletServices", &GCCSPlayerPawn::GetBulletServices, &GCCSPlayerPawn::SetBulletServices)
        .addProperty("HostageServices", &GCCSPlayerPawn::GetHostageServices, &GCCSPlayerPawn::SetHostageServices)
        .addProperty("BuyServices", &GCCSPlayerPawn::GetBuyServices, &GCCSPlayerPawn::SetBuyServices)
        .addProperty("ActionTrackingServices", &GCCSPlayerPawn::GetActionTrackingServices, &GCCSPlayerPawn::SetActionTrackingServices)
        .addProperty("RadioServices", &GCCSPlayerPawn::GetRadioServices, &GCCSPlayerPawn::SetRadioServices)
        .addProperty("DamageReactServices", &GCCSPlayerPawn::GetDamageReactServices, &GCCSPlayerPawn::SetDamageReactServices)
        .addProperty("CharacterDefIndex", &GCCSPlayerPawn::GetCharacterDefIndex, &GCCSPlayerPawn::SetCharacterDefIndex)
        .addProperty("HasFemaleVoice", &GCCSPlayerPawn::GetHasFemaleVoice, &GCCSPlayerPawn::SetHasFemaleVoice)
        .addProperty("StrVOPrefix", &GCCSPlayerPawn::GetStrVOPrefix, &GCCSPlayerPawn::SetStrVOPrefix)
        .addProperty("LastPlaceName", &GCCSPlayerPawn::GetLastPlaceName, &GCCSPlayerPawn::SetLastPlaceName)
        .addProperty("InHostageResetZone", &GCCSPlayerPawn::GetInHostageResetZone, &GCCSPlayerPawn::SetInHostageResetZone)
        .addProperty("InBuyZone", &GCCSPlayerPawn::GetInBuyZone, &GCCSPlayerPawn::SetInBuyZone)
        .addProperty("WasInBuyZone", &GCCSPlayerPawn::GetWasInBuyZone, &GCCSPlayerPawn::SetWasInBuyZone)
        .addProperty("InHostageRescueZone", &GCCSPlayerPawn::GetInHostageRescueZone, &GCCSPlayerPawn::SetInHostageRescueZone)
        .addProperty("InBombZone", &GCCSPlayerPawn::GetInBombZone, &GCCSPlayerPawn::SetInBombZone)
        .addProperty("WasInHostageRescueZone", &GCCSPlayerPawn::GetWasInHostageRescueZone, &GCCSPlayerPawn::SetWasInHostageRescueZone)
        .addProperty("RetakesOffering", &GCCSPlayerPawn::GetRetakesOffering, &GCCSPlayerPawn::SetRetakesOffering)
        .addProperty("RetakesOfferingCard", &GCCSPlayerPawn::GetRetakesOfferingCard, &GCCSPlayerPawn::SetRetakesOfferingCard)
        .addProperty("RetakesHasDefuseKit", &GCCSPlayerPawn::GetRetakesHasDefuseKit, &GCCSPlayerPawn::SetRetakesHasDefuseKit)
        .addProperty("RetakesMVPLastRound", &GCCSPlayerPawn::GetRetakesMVPLastRound, &GCCSPlayerPawn::SetRetakesMVPLastRound)
        .addProperty("RetakesMVPBoostItem", &GCCSPlayerPawn::GetRetakesMVPBoostItem, &GCCSPlayerPawn::SetRetakesMVPBoostItem)
        .addProperty("RetakesMVPBoostExtraUtility", &GCCSPlayerPawn::GetRetakesMVPBoostExtraUtility, &GCCSPlayerPawn::SetRetakesMVPBoostExtraUtility)
        .addProperty("HealthShotBoostExpirationTime", &GCCSPlayerPawn::GetHealthShotBoostExpirationTime, &GCCSPlayerPawn::SetHealthShotBoostExpirationTime)
        .addProperty("LandingTimeSeconds", &GCCSPlayerPawn::GetLandingTimeSeconds, &GCCSPlayerPawn::SetLandingTimeSeconds)
        .addProperty("AimPunchAngle", &GCCSPlayerPawn::GetAimPunchAngle, &GCCSPlayerPawn::SetAimPunchAngle)
        .addProperty("AimPunchAngleVel", &GCCSPlayerPawn::GetAimPunchAngleVel, &GCCSPlayerPawn::SetAimPunchAngleVel)
        .addProperty("AimPunchTickBase", &GCCSPlayerPawn::GetAimPunchTickBase, &GCCSPlayerPawn::SetAimPunchTickBase)
        .addProperty("AimPunchTickFraction", &GCCSPlayerPawn::GetAimPunchTickFraction, &GCCSPlayerPawn::SetAimPunchTickFraction)
        .addProperty("AimPunchCache", &GCCSPlayerPawn::GetAimPunchCache, &GCCSPlayerPawn::SetAimPunchCache)
        .addProperty("IsBuyMenuOpen", &GCCSPlayerPawn::GetIsBuyMenuOpen, &GCCSPlayerPawn::SetIsBuyMenuOpen)
        .addProperty("LastHeadBoneTransformIsValid", &GCCSPlayerPawn::GetLastHeadBoneTransformIsValid, &GCCSPlayerPawn::SetLastHeadBoneTransformIsValid)
        .addProperty("LastLandTime", &GCCSPlayerPawn::GetLastLandTime, &GCCSPlayerPawn::SetLastLandTime)
        .addProperty("OnGroundLastTick", &GCCSPlayerPawn::GetOnGroundLastTick, &GCCSPlayerPawn::SetOnGroundLastTick)
        .addProperty("PlayerLocked", &GCCSPlayerPawn::GetPlayerLocked, &GCCSPlayerPawn::SetPlayerLocked)
        .addProperty("TimeOfLastInjury", &GCCSPlayerPawn::GetTimeOfLastInjury, &GCCSPlayerPawn::SetTimeOfLastInjury)
        .addProperty("NextSprayDecalTime", &GCCSPlayerPawn::GetNextSprayDecalTime, &GCCSPlayerPawn::SetNextSprayDecalTime)
        .addProperty("NextSprayDecalTimeExpedited", &GCCSPlayerPawn::GetNextSprayDecalTimeExpedited, &GCCSPlayerPawn::SetNextSprayDecalTimeExpedited)
        .addProperty("RagdollDamageBone", &GCCSPlayerPawn::GetRagdollDamageBone, &GCCSPlayerPawn::SetRagdollDamageBone)
        .addProperty("RagdollDamageForce", &GCCSPlayerPawn::GetRagdollDamageForce, &GCCSPlayerPawn::SetRagdollDamageForce)
        .addProperty("RagdollDamagePosition", &GCCSPlayerPawn::GetRagdollDamagePosition, &GCCSPlayerPawn::SetRagdollDamagePosition)
        .addProperty("RagdollDamageWeaponName", &GCCSPlayerPawn::GetRagdollDamageWeaponName, &GCCSPlayerPawn::SetRagdollDamageWeaponName)
        .addProperty("RagdollDamageHeadshot", &GCCSPlayerPawn::GetRagdollDamageHeadshot, &GCCSPlayerPawn::SetRagdollDamageHeadshot)
        .addProperty("RagdollServerOrigin", &GCCSPlayerPawn::GetRagdollServerOrigin, &GCCSPlayerPawn::SetRagdollServerOrigin)
        .addProperty("EconGloves", &GCCSPlayerPawn::GetEconGloves, &GCCSPlayerPawn::SetEconGloves)
        .addProperty("EconGlovesChanged", &GCCSPlayerPawn::GetEconGlovesChanged, &GCCSPlayerPawn::SetEconGlovesChanged)
        .addProperty("DeathEyeAngles", &GCCSPlayerPawn::GetDeathEyeAngles, &GCCSPlayerPawn::SetDeathEyeAngles)
        .addProperty("SkipOneHeadConstraintUpdate", &GCCSPlayerPawn::GetSkipOneHeadConstraintUpdate, &GCCSPlayerPawn::SetSkipOneHeadConstraintUpdate)
        .addProperty("LeftHanded", &GCCSPlayerPawn::GetLeftHanded, &GCCSPlayerPawn::SetLeftHanded)
        .addProperty("SwitchedHandednessTime", &GCCSPlayerPawn::GetSwitchedHandednessTime, &GCCSPlayerPawn::SetSwitchedHandednessTime)
        .addProperty("ViewmodelOffsetX", &GCCSPlayerPawn::GetViewmodelOffsetX, &GCCSPlayerPawn::SetViewmodelOffsetX)
        .addProperty("ViewmodelOffsetY", &GCCSPlayerPawn::GetViewmodelOffsetY, &GCCSPlayerPawn::SetViewmodelOffsetY)
        .addProperty("ViewmodelOffsetZ", &GCCSPlayerPawn::GetViewmodelOffsetZ, &GCCSPlayerPawn::SetViewmodelOffsetZ)
        .addProperty("ViewmodelFOV", &GCCSPlayerPawn::GetViewmodelFOV, &GCCSPlayerPawn::SetViewmodelFOV)
        .addProperty("IsWalking", &GCCSPlayerPawn::GetIsWalking, &GCCSPlayerPawn::SetIsWalking)
        .addProperty("LastGivenDefuserTime", &GCCSPlayerPawn::GetLastGivenDefuserTime, &GCCSPlayerPawn::SetLastGivenDefuserTime)
        .addProperty("LastGivenBombTime", &GCCSPlayerPawn::GetLastGivenBombTime, &GCCSPlayerPawn::SetLastGivenBombTime)
        .addProperty("DealtDamageToEnemyMostRecentTimestamp", &GCCSPlayerPawn::GetDealtDamageToEnemyMostRecentTimestamp, &GCCSPlayerPawn::SetDealtDamageToEnemyMostRecentTimestamp)
        .addProperty("DisplayHistoryBits", &GCCSPlayerPawn::GetDisplayHistoryBits, &GCCSPlayerPawn::SetDisplayHistoryBits)
        .addProperty("LastAttackedTeammate", &GCCSPlayerPawn::GetLastAttackedTeammate, &GCCSPlayerPawn::SetLastAttackedTeammate)
        .addProperty("AllowAutoFollowTime", &GCCSPlayerPawn::GetAllowAutoFollowTime, &GCCSPlayerPawn::SetAllowAutoFollowTime)
        .addProperty("ResetArmorNextSpawn", &GCCSPlayerPawn::GetResetArmorNextSpawn, &GCCSPlayerPawn::SetResetArmorNextSpawn)
        .addProperty("LastKillerIndex", &GCCSPlayerPawn::GetLastKillerIndex, &GCCSPlayerPawn::SetLastKillerIndex)
        .addProperty("EntitySpottedState", &GCCSPlayerPawn::GetEntitySpottedState, &GCCSPlayerPawn::SetEntitySpottedState)
        .addProperty("SpotRules", &GCCSPlayerPawn::GetSpotRules, &GCCSPlayerPawn::SetSpotRules)
        .addProperty("IsScoped", &GCCSPlayerPawn::GetIsScoped, &GCCSPlayerPawn::SetIsScoped)
        .addProperty("ResumeZoom", &GCCSPlayerPawn::GetResumeZoom, &GCCSPlayerPawn::SetResumeZoom)
        .addProperty("IsDefusing", &GCCSPlayerPawn::GetIsDefusing, &GCCSPlayerPawn::SetIsDefusing)
        .addProperty("IsGrabbingHostage", &GCCSPlayerPawn::GetIsGrabbingHostage, &GCCSPlayerPawn::SetIsGrabbingHostage)
        .addProperty("BlockingUseActionInProgress", &GCCSPlayerPawn::GetBlockingUseActionInProgress, &GCCSPlayerPawn::SetBlockingUseActionInProgress)
        .addProperty("EmitSoundTime", &GCCSPlayerPawn::GetEmitSoundTime, &GCCSPlayerPawn::SetEmitSoundTime)
        .addProperty("InNoDefuseArea", &GCCSPlayerPawn::GetInNoDefuseArea, &GCCSPlayerPawn::SetInNoDefuseArea)
        .addProperty("BombSiteIndex", &GCCSPlayerPawn::GetBombSiteIndex, &GCCSPlayerPawn::SetBombSiteIndex)
        .addProperty("WhichBombZone", &GCCSPlayerPawn::GetWhichBombZone, &GCCSPlayerPawn::SetWhichBombZone)
        .addProperty("InBombZoneTrigger", &GCCSPlayerPawn::GetInBombZoneTrigger, &GCCSPlayerPawn::SetInBombZoneTrigger)
        .addProperty("WasInBombZoneTrigger", &GCCSPlayerPawn::GetWasInBombZoneTrigger, &GCCSPlayerPawn::SetWasInBombZoneTrigger)
        .addProperty("ShotsFired", &GCCSPlayerPawn::GetShotsFired, &GCCSPlayerPawn::SetShotsFired)
        .addProperty("FlinchStack", &GCCSPlayerPawn::GetFlinchStack, &GCCSPlayerPawn::SetFlinchStack)
        .addProperty("VelocityModifier", &GCCSPlayerPawn::GetVelocityModifier, &GCCSPlayerPawn::SetVelocityModifier)
        .addProperty("HitHeading", &GCCSPlayerPawn::GetHitHeading, &GCCSPlayerPawn::SetHitHeading)
        .addProperty("HitBodyPart", &GCCSPlayerPawn::GetHitBodyPart, &GCCSPlayerPawn::SetHitBodyPart)
        .addProperty("TotalBulletForce", &GCCSPlayerPawn::GetTotalBulletForce, &GCCSPlayerPawn::SetTotalBulletForce)
        .addProperty("WaitForNoAttack", &GCCSPlayerPawn::GetWaitForNoAttack, &GCCSPlayerPawn::SetWaitForNoAttack)
        .addProperty("IgnoreLadderJumpTime", &GCCSPlayerPawn::GetIgnoreLadderJumpTime, &GCCSPlayerPawn::SetIgnoreLadderJumpTime)
        .addProperty("KilledByHeadshot", &GCCSPlayerPawn::GetKilledByHeadshot, &GCCSPlayerPawn::SetKilledByHeadshot)
        .addProperty("LastHitBox", &GCCSPlayerPawn::GetLastHitBox, &GCCSPlayerPawn::SetLastHitBox)
        .addProperty("LastHealth", &GCCSPlayerPawn::GetLastHealth, &GCCSPlayerPawn::SetLastHealth)
        .addProperty("Bot", &GCCSPlayerPawn::GetBot, &GCCSPlayerPawn::SetBot)
        .addProperty("BotAllowActive", &GCCSPlayerPawn::GetBotAllowActive, &GCCSPlayerPawn::SetBotAllowActive)
        .addProperty("ThirdPersonHeading", &GCCSPlayerPawn::GetThirdPersonHeading, &GCCSPlayerPawn::SetThirdPersonHeading)
        .addProperty("SlopeDropOffset", &GCCSPlayerPawn::GetSlopeDropOffset, &GCCSPlayerPawn::SetSlopeDropOffset)
        .addProperty("SlopeDropHeight", &GCCSPlayerPawn::GetSlopeDropHeight, &GCCSPlayerPawn::SetSlopeDropHeight)
        .addProperty("HeadConstraintOffset", &GCCSPlayerPawn::GetHeadConstraintOffset, &GCCSPlayerPawn::SetHeadConstraintOffset)
        .addProperty("LastPickupPriority", &GCCSPlayerPawn::GetLastPickupPriority, &GCCSPlayerPawn::SetLastPickupPriority)
        .addProperty("LastPickupPriorityTime", &GCCSPlayerPawn::GetLastPickupPriorityTime, &GCCSPlayerPawn::SetLastPickupPriorityTime)
        .addProperty("ArmorValue", &GCCSPlayerPawn::GetArmorValue, &GCCSPlayerPawn::SetArmorValue)
        .addProperty("CurrentEquipmentValue", &GCCSPlayerPawn::GetCurrentEquipmentValue, &GCCSPlayerPawn::SetCurrentEquipmentValue)
        .addProperty("RoundStartEquipmentValue", &GCCSPlayerPawn::GetRoundStartEquipmentValue, &GCCSPlayerPawn::SetRoundStartEquipmentValue)
        .addProperty("FreezetimeEndEquipmentValue", &GCCSPlayerPawn::GetFreezetimeEndEquipmentValue, &GCCSPlayerPawn::SetFreezetimeEndEquipmentValue)
        .addProperty("LastWeaponFireUsercmd", &GCCSPlayerPawn::GetLastWeaponFireUsercmd, &GCCSPlayerPawn::SetLastWeaponFireUsercmd)
        .addProperty("LastFriendlyFireDamageReductionRatio", &GCCSPlayerPawn::GetLastFriendlyFireDamageReductionRatio, &GCCSPlayerPawn::SetLastFriendlyFireDamageReductionRatio)
        .addProperty("IsSpawning", &GCCSPlayerPawn::GetIsSpawning, &GCCSPlayerPawn::SetIsSpawning)
        .addProperty("DeathFlags", &GCCSPlayerPawn::GetDeathFlags, &GCCSPlayerPawn::SetDeathFlags)
        .addProperty("HasDeathInfo", &GCCSPlayerPawn::GetHasDeathInfo, &GCCSPlayerPawn::SetHasDeathInfo)
        .addProperty("DeathInfoTime", &GCCSPlayerPawn::GetDeathInfoTime, &GCCSPlayerPawn::SetDeathInfoTime)
        .addProperty("DeathInfoOrigin", &GCCSPlayerPawn::GetDeathInfoOrigin, &GCCSPlayerPawn::SetDeathInfoOrigin)
        .addProperty("PlayerPatchEconIndices", &GCCSPlayerPawn::GetPlayerPatchEconIndices, &GCCSPlayerPawn::SetPlayerPatchEconIndices)
        .addProperty("GunGameImmunityColor", &GCCSPlayerPawn::GetGunGameImmunityColor, &GCCSPlayerPawn::SetGunGameImmunityColor)
        .addProperty("GrenadeParameterStashTime", &GCCSPlayerPawn::GetGrenadeParameterStashTime, &GCCSPlayerPawn::SetGrenadeParameterStashTime)
        .addProperty("GrenadeParametersStashed", &GCCSPlayerPawn::GetGrenadeParametersStashed, &GCCSPlayerPawn::SetGrenadeParametersStashed)
        .addProperty("StashedShootAngles", &GCCSPlayerPawn::GetStashedShootAngles, &GCCSPlayerPawn::SetStashedShootAngles)
        .addProperty("StashedGrenadeThrowPosition", &GCCSPlayerPawn::GetStashedGrenadeThrowPosition, &GCCSPlayerPawn::SetStashedGrenadeThrowPosition)
        .addProperty("StashedVelocity", &GCCSPlayerPawn::GetStashedVelocity, &GCCSPlayerPawn::SetStashedVelocity)
        .addProperty("ShootAngleHistory", &GCCSPlayerPawn::GetShootAngleHistory, &GCCSPlayerPawn::SetShootAngleHistory)
        .addProperty("ThrowPositionHistory", &GCCSPlayerPawn::GetThrowPositionHistory, &GCCSPlayerPawn::SetThrowPositionHistory)
        .addProperty("VelocityHistory", &GCCSPlayerPawn::GetVelocityHistory, &GCCSPlayerPawn::SetVelocityHistory)
        .addProperty("Parent", &GCCSPlayerPawn::GetParent, &GCCSPlayerPawn::SetParent)
        .addFunction("ToPtr", &GCCSPlayerPawn::ToPtr)
        .addFunction("IsValid", &GCCSPlayerPawn::IsValid)
        .endClass();
}
GCBumpMineProjectile::GCBumpMineProjectile(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCBumpMineProjectile::GCBumpMineProjectile(void *ptr) {
    m_ptr = ptr;
}
void* GCBumpMineProjectile::GetPtr() {
    return m_ptr;
}
std::string GCBumpMineProjectile::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCBumpMineProjectile::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseGrenade GCBumpMineProjectile::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CBumpMineProjectile::GetParent(ptr=%p)", m_ptr));
    GCBaseGrenade value(m_ptr);
    return value;
}
void GCBumpMineProjectile::SetParent(GCBaseGrenade value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CBumpMineProjectile::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCBumpMineProjectile(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCBumpMineProjectile>("CBumpMineProjectile")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCBumpMineProjectile::GetParent, &GCBumpMineProjectile::SetParent)
        .addFunction("ToPtr", &GCBumpMineProjectile::ToPtr)
        .addFunction("IsValid", &GCBumpMineProjectile::IsValid)
        .endClass();
}
GCCSPlayerController::GCCSPlayerController(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCCSPlayerController::GCCSPlayerController(void *ptr) {
    m_ptr = ptr;
}
GCCSPlayerController_InGameMoneyServices GCCSPlayerController::GetInGameMoneyServices() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->InGameMoneyServices(ptr=%p)", m_ptr));
    GCCSPlayerController_InGameMoneyServices value(*(void**)GetSchemaPtr(m_ptr, "CCSPlayerController", "m_pInGameMoneyServices"));
    return value;
}
void GCCSPlayerController::SetInGameMoneyServices(GCCSPlayerController_InGameMoneyServices value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->InGameMoneyServices(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController","m_pInGameMoneyServices", false, (char*)value.GetPtr());
}
GCCSPlayerController_InventoryServices GCCSPlayerController::GetInventoryServices() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->InventoryServices(ptr=%p)", m_ptr));
    GCCSPlayerController_InventoryServices value(*(void**)GetSchemaPtr(m_ptr, "CCSPlayerController", "m_pInventoryServices"));
    return value;
}
void GCCSPlayerController::SetInventoryServices(GCCSPlayerController_InventoryServices value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->InventoryServices(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController","m_pInventoryServices", false, (char*)value.GetPtr());
}
GCCSPlayerController_ActionTrackingServices GCCSPlayerController::GetActionTrackingServices() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->ActionTrackingServices(ptr=%p)", m_ptr));
    GCCSPlayerController_ActionTrackingServices value(*(void**)GetSchemaPtr(m_ptr, "CCSPlayerController", "m_pActionTrackingServices"));
    return value;
}
void GCCSPlayerController::SetActionTrackingServices(GCCSPlayerController_ActionTrackingServices value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->ActionTrackingServices(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController","m_pActionTrackingServices", false, (char*)value.GetPtr());
}
GCCSPlayerController_DamageServices GCCSPlayerController::GetDamageServices() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->DamageServices(ptr=%p)", m_ptr));
    GCCSPlayerController_DamageServices value(*(void**)GetSchemaPtr(m_ptr, "CCSPlayerController", "m_pDamageServices"));
    return value;
}
void GCCSPlayerController::SetDamageServices(GCCSPlayerController_DamageServices value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->DamageServices(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController","m_pDamageServices", false, (char*)value.GetPtr());
}
uint32_t GCCSPlayerController::GetPing() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->Ping(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CCSPlayerController", "m_iPing");
}
void GCCSPlayerController::SetPing(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->Ping(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iPing", false, value);
}
bool GCCSPlayerController::GetHasCommunicationAbuseMute() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->HasCommunicationAbuseMute(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bHasCommunicationAbuseMute");
}
void GCCSPlayerController::SetHasCommunicationAbuseMute(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->HasCommunicationAbuseMute(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bHasCommunicationAbuseMute", false, value);
}
std::string GCCSPlayerController::GetCrosshairCodes() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->CrosshairCodes(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CCSPlayerController", "m_szCrosshairCodes").String();
}
void GCCSPlayerController::SetCrosshairCodes(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->CrosshairCodes(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_szCrosshairCodes", false, CUtlSymbolLarge(value.c_str()));
}
uint32_t GCCSPlayerController::GetPendingTeamNum() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->PendingTeamNum(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CCSPlayerController", "m_iPendingTeamNum");
}
void GCCSPlayerController::SetPendingTeamNum(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->PendingTeamNum(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iPendingTeamNum", false, value);
}
float GCCSPlayerController::GetForceTeamTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->ForceTeamTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerController", "m_flForceTeamTime");
}
void GCCSPlayerController::SetForceTeamTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->ForceTeamTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_flForceTeamTime", false, value);
}
int32_t GCCSPlayerController::GetCompTeammateColor() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->CompTeammateColor(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iCompTeammateColor");
}
void GCCSPlayerController::SetCompTeammateColor(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->CompTeammateColor(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iCompTeammateColor", false, value);
}
bool GCCSPlayerController::GetEverPlayedOnTeam() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->EverPlayedOnTeam(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bEverPlayedOnTeam");
}
void GCCSPlayerController::SetEverPlayedOnTeam(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->EverPlayedOnTeam(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bEverPlayedOnTeam", false, value);
}
bool GCCSPlayerController::GetAttemptedToGetColor() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->AttemptedToGetColor(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bAttemptedToGetColor");
}
void GCCSPlayerController::SetAttemptedToGetColor(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->AttemptedToGetColor(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bAttemptedToGetColor", false, value);
}
int32_t GCCSPlayerController::GetTeammatePreferredColor() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->TeammatePreferredColor(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iTeammatePreferredColor");
}
void GCCSPlayerController::SetTeammatePreferredColor(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->TeammatePreferredColor(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iTeammatePreferredColor", false, value);
}
bool GCCSPlayerController::GetTeamChanged() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->TeamChanged(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bTeamChanged");
}
void GCCSPlayerController::SetTeamChanged(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->TeamChanged(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bTeamChanged", false, value);
}
bool GCCSPlayerController::GetInSwitchTeam() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->InSwitchTeam(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bInSwitchTeam");
}
void GCCSPlayerController::SetInSwitchTeam(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->InSwitchTeam(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bInSwitchTeam", false, value);
}
bool GCCSPlayerController::GetHasSeenJoinGame() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->HasSeenJoinGame(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bHasSeenJoinGame");
}
void GCCSPlayerController::SetHasSeenJoinGame(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->HasSeenJoinGame(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bHasSeenJoinGame", false, value);
}
bool GCCSPlayerController::GetJustBecameSpectator() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->JustBecameSpectator(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bJustBecameSpectator");
}
void GCCSPlayerController::SetJustBecameSpectator(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->JustBecameSpectator(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bJustBecameSpectator", false, value);
}
bool GCCSPlayerController::GetSwitchTeamsOnNextRoundReset() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->SwitchTeamsOnNextRoundReset(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bSwitchTeamsOnNextRoundReset");
}
void GCCSPlayerController::SetSwitchTeamsOnNextRoundReset(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->SwitchTeamsOnNextRoundReset(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bSwitchTeamsOnNextRoundReset", false, value);
}
bool GCCSPlayerController::GetRemoveAllItemsOnNextRoundReset() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->RemoveAllItemsOnNextRoundReset(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bRemoveAllItemsOnNextRoundReset");
}
void GCCSPlayerController::SetRemoveAllItemsOnNextRoundReset(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->RemoveAllItemsOnNextRoundReset(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bRemoveAllItemsOnNextRoundReset", false, value);
}
std::string GCCSPlayerController::GetClan() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->Clan(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CCSPlayerController", "m_szClan").String();
}
void GCCSPlayerController::SetClan(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->Clan(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_szClan", false, CUtlSymbolLarge(value.c_str()));
}
std::string GCCSPlayerController::GetClanName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->ClanName(ptr=%p)", m_ptr));
    return GetSchemaValuePtr<char>(m_ptr, "CCSPlayerController", "m_szClanName");
}
void GCCSPlayerController::SetClanName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->ClanName(ptr=%p)", m_ptr));
    WriteSchemaPtrValue(m_ptr, "CCSPlayerController", "m_szClanName", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 32);
}
int32_t GCCSPlayerController::GetCoachingTeam() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->CoachingTeam(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iCoachingTeam");
}
void GCCSPlayerController::SetCoachingTeam(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->CoachingTeam(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iCoachingTeam", false, value);
}
uint64_t GCCSPlayerController::GetPlayerDominated() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->PlayerDominated(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CCSPlayerController", "m_nPlayerDominated");
}
void GCCSPlayerController::SetPlayerDominated(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->PlayerDominated(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_nPlayerDominated", false, value);
}
uint64_t GCCSPlayerController::GetPlayerDominatingMe() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->PlayerDominatingMe(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CCSPlayerController", "m_nPlayerDominatingMe");
}
void GCCSPlayerController::SetPlayerDominatingMe(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->PlayerDominatingMe(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_nPlayerDominatingMe", false, value);
}
int32_t GCCSPlayerController::GetCompetitiveRanking() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->CompetitiveRanking(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iCompetitiveRanking");
}
void GCCSPlayerController::SetCompetitiveRanking(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->CompetitiveRanking(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iCompetitiveRanking", false, value);
}
int32_t GCCSPlayerController::GetCompetitiveWins() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->CompetitiveWins(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iCompetitiveWins");
}
void GCCSPlayerController::SetCompetitiveWins(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->CompetitiveWins(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iCompetitiveWins", false, value);
}
int32_t GCCSPlayerController::GetCompetitiveRankType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->CompetitiveRankType(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iCompetitiveRankType");
}
void GCCSPlayerController::SetCompetitiveRankType(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->CompetitiveRankType(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iCompetitiveRankType", false, value);
}
int32_t GCCSPlayerController::GetCompetitiveRankingPredicted_Win() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->CompetitiveRankingPredicted_Win(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iCompetitiveRankingPredicted_Win");
}
void GCCSPlayerController::SetCompetitiveRankingPredicted_Win(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->CompetitiveRankingPredicted_Win(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iCompetitiveRankingPredicted_Win", false, value);
}
int32_t GCCSPlayerController::GetCompetitiveRankingPredicted_Loss() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->CompetitiveRankingPredicted_Loss(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iCompetitiveRankingPredicted_Loss");
}
void GCCSPlayerController::SetCompetitiveRankingPredicted_Loss(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->CompetitiveRankingPredicted_Loss(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iCompetitiveRankingPredicted_Loss", false, value);
}
int32_t GCCSPlayerController::GetCompetitiveRankingPredicted_Tie() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->CompetitiveRankingPredicted_Tie(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iCompetitiveRankingPredicted_Tie");
}
void GCCSPlayerController::SetCompetitiveRankingPredicted_Tie(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->CompetitiveRankingPredicted_Tie(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iCompetitiveRankingPredicted_Tie", false, value);
}
int32_t GCCSPlayerController::GetEndMatchNextMapVote() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->EndMatchNextMapVote(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_nEndMatchNextMapVote");
}
void GCCSPlayerController::SetEndMatchNextMapVote(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->EndMatchNextMapVote(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_nEndMatchNextMapVote", false, value);
}
uint16_t GCCSPlayerController::GetActiveQuestId() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->ActiveQuestId(ptr=%p)", m_ptr));
    return GetSchemaValue<uint16_t>(m_ptr, "CCSPlayerController", "m_unActiveQuestId");
}
void GCCSPlayerController::SetActiveQuestId(uint16_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->ActiveQuestId(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_unActiveQuestId", false, value);
}
GQuestProgress GCCSPlayerController::GetQuestProgressReason() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->QuestProgressReason(ptr=%p)", m_ptr));
    GQuestProgress value(GetSchemaPtr(m_ptr, "CCSPlayerController", "m_nQuestProgressReason"));
    return value;
}
void GCCSPlayerController::SetQuestProgressReason(GQuestProgress value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->QuestProgressReason(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'QuestProgressReason' is not possible.\n");
}
uint32_t GCCSPlayerController::GetPlayerTvControlFlags() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->PlayerTvControlFlags(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CCSPlayerController", "m_unPlayerTvControlFlags");
}
void GCCSPlayerController::SetPlayerTvControlFlags(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->PlayerTvControlFlags(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_unPlayerTvControlFlags", false, value);
}
int32_t GCCSPlayerController::GetDraftIndex() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->DraftIndex(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iDraftIndex");
}
void GCCSPlayerController::SetDraftIndex(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->DraftIndex(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iDraftIndex", false, value);
}
uint32_t GCCSPlayerController::GetMsQueuedModeDisconnectionTimestamp() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->MsQueuedModeDisconnectionTimestamp(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CCSPlayerController", "m_msQueuedModeDisconnectionTimestamp");
}
void GCCSPlayerController::SetMsQueuedModeDisconnectionTimestamp(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->MsQueuedModeDisconnectionTimestamp(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_msQueuedModeDisconnectionTimestamp", false, value);
}
uint32_t GCCSPlayerController::GetUiAbandonRecordedReason() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->UiAbandonRecordedReason(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CCSPlayerController", "m_uiAbandonRecordedReason");
}
void GCCSPlayerController::SetUiAbandonRecordedReason(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->UiAbandonRecordedReason(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_uiAbandonRecordedReason", false, value);
}
bool GCCSPlayerController::GetCannotBeKicked() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->CannotBeKicked(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bCannotBeKicked");
}
void GCCSPlayerController::SetCannotBeKicked(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->CannotBeKicked(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bCannotBeKicked", false, value);
}
bool GCCSPlayerController::GetEverFullyConnected() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->EverFullyConnected(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bEverFullyConnected");
}
void GCCSPlayerController::SetEverFullyConnected(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->EverFullyConnected(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bEverFullyConnected", false, value);
}
bool GCCSPlayerController::GetAbandonAllowsSurrender() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->AbandonAllowsSurrender(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bAbandonAllowsSurrender");
}
void GCCSPlayerController::SetAbandonAllowsSurrender(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->AbandonAllowsSurrender(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bAbandonAllowsSurrender", false, value);
}
bool GCCSPlayerController::GetAbandonOffersInstantSurrender() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->AbandonOffersInstantSurrender(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bAbandonOffersInstantSurrender");
}
void GCCSPlayerController::SetAbandonOffersInstantSurrender(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->AbandonOffersInstantSurrender(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bAbandonOffersInstantSurrender", false, value);
}
bool GCCSPlayerController::GetDisconnection1MinWarningPrinted() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->Disconnection1MinWarningPrinted(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bDisconnection1MinWarningPrinted");
}
void GCCSPlayerController::SetDisconnection1MinWarningPrinted(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->Disconnection1MinWarningPrinted(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bDisconnection1MinWarningPrinted", false, value);
}
bool GCCSPlayerController::GetScoreReported() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->ScoreReported(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bScoreReported");
}
void GCCSPlayerController::SetScoreReported(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->ScoreReported(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bScoreReported", false, value);
}
int32_t GCCSPlayerController::GetDisconnectionTick() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->DisconnectionTick(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_nDisconnectionTick");
}
void GCCSPlayerController::SetDisconnectionTick(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->DisconnectionTick(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_nDisconnectionTick", false, value);
}
bool GCCSPlayerController::GetControllingBot() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->ControllingBot(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bControllingBot");
}
void GCCSPlayerController::SetControllingBot(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->ControllingBot(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bControllingBot", false, value);
}
bool GCCSPlayerController::GetHasControlledBotThisRound() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->HasControlledBotThisRound(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bHasControlledBotThisRound");
}
void GCCSPlayerController::SetHasControlledBotThisRound(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->HasControlledBotThisRound(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bHasControlledBotThisRound", false, value);
}
bool GCCSPlayerController::GetHasBeenControlledByPlayerThisRound() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->HasBeenControlledByPlayerThisRound(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bHasBeenControlledByPlayerThisRound");
}
void GCCSPlayerController::SetHasBeenControlledByPlayerThisRound(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->HasBeenControlledByPlayerThisRound(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bHasBeenControlledByPlayerThisRound", false, value);
}
int32_t GCCSPlayerController::GetBotsControlledThisRound() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->BotsControlledThisRound(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_nBotsControlledThisRound");
}
void GCCSPlayerController::SetBotsControlledThisRound(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->BotsControlledThisRound(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_nBotsControlledThisRound", false, value);
}
bool GCCSPlayerController::GetCanControlObservedBot() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->CanControlObservedBot(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bCanControlObservedBot");
}
void GCCSPlayerController::SetCanControlObservedBot(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->CanControlObservedBot(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bCanControlObservedBot", false, value);
}
GCCSPlayerPawn GCCSPlayerController::GetPlayerPawn() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->PlayerPawn(ptr=%p)", m_ptr));
    GCCSPlayerPawn value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CCSPlayerController", "m_hPlayerPawn").Get()));
    return value;
}
void GCCSPlayerController::SetPlayerPawn(GCCSPlayerPawn value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->PlayerPawn(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'PlayerPawn' is not possible.\n");
}
GCCSObserverPawn GCCSPlayerController::GetObserverPawn() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->ObserverPawn(ptr=%p)", m_ptr));
    GCCSObserverPawn value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CCSPlayerController", "m_hObserverPawn").Get()));
    return value;
}
void GCCSPlayerController::SetObserverPawn(GCCSObserverPawn value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->ObserverPawn(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ObserverPawn' is not possible.\n");
}
int32_t GCCSPlayerController::GetDesiredObserverMode() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->DesiredObserverMode(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_DesiredObserverMode");
}
void GCCSPlayerController::SetDesiredObserverMode(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->DesiredObserverMode(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_DesiredObserverMode", false, value);
}
GCEntityInstance GCCSPlayerController::GetDesiredObserverTarget() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->DesiredObserverTarget(ptr=%p)", m_ptr));
    GCEntityInstance value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CCSPlayerController", "m_hDesiredObserverTarget").Get()));
    return value;
}
void GCCSPlayerController::SetDesiredObserverTarget(GCEntityInstance value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->DesiredObserverTarget(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'DesiredObserverTarget' is not possible.\n");
}
bool GCCSPlayerController::GetPawnIsAlive() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->PawnIsAlive(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bPawnIsAlive");
}
void GCCSPlayerController::SetPawnIsAlive(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->PawnIsAlive(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bPawnIsAlive", false, value);
}
uint32_t GCCSPlayerController::GetPawnHealth() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->PawnHealth(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CCSPlayerController", "m_iPawnHealth");
}
void GCCSPlayerController::SetPawnHealth(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->PawnHealth(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iPawnHealth", false, value);
}
int32_t GCCSPlayerController::GetPawnArmor() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->PawnArmor(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iPawnArmor");
}
void GCCSPlayerController::SetPawnArmor(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->PawnArmor(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iPawnArmor", false, value);
}
bool GCCSPlayerController::GetPawnHasDefuser() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->PawnHasDefuser(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bPawnHasDefuser");
}
void GCCSPlayerController::SetPawnHasDefuser(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->PawnHasDefuser(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bPawnHasDefuser", false, value);
}
bool GCCSPlayerController::GetPawnHasHelmet() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->PawnHasHelmet(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bPawnHasHelmet");
}
void GCCSPlayerController::SetPawnHasHelmet(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->PawnHasHelmet(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bPawnHasHelmet", false, value);
}
uint16_t GCCSPlayerController::GetPawnCharacterDefIndex() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->PawnCharacterDefIndex(ptr=%p)", m_ptr));
    return GetSchemaValue<uint16_t>(m_ptr, "CCSPlayerController", "m_nPawnCharacterDefIndex");
}
void GCCSPlayerController::SetPawnCharacterDefIndex(uint16_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->PawnCharacterDefIndex(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_nPawnCharacterDefIndex", false, value);
}
int32_t GCCSPlayerController::GetPawnLifetimeStart() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->PawnLifetimeStart(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iPawnLifetimeStart");
}
void GCCSPlayerController::SetPawnLifetimeStart(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->PawnLifetimeStart(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iPawnLifetimeStart", false, value);
}
int32_t GCCSPlayerController::GetPawnLifetimeEnd() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->PawnLifetimeEnd(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iPawnLifetimeEnd");
}
void GCCSPlayerController::SetPawnLifetimeEnd(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->PawnLifetimeEnd(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iPawnLifetimeEnd", false, value);
}
int32_t GCCSPlayerController::GetPawnBotDifficulty() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->PawnBotDifficulty(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iPawnBotDifficulty");
}
void GCCSPlayerController::SetPawnBotDifficulty(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->PawnBotDifficulty(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iPawnBotDifficulty", false, value);
}
GCCSPlayerController GCCSPlayerController::GetOriginalControllerOfCurrentPawn() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->OriginalControllerOfCurrentPawn(ptr=%p)", m_ptr));
    GCCSPlayerController value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CCSPlayerController", "m_hOriginalControllerOfCurrentPawn").Get()));
    return value;
}
void GCCSPlayerController::SetOriginalControllerOfCurrentPawn(GCCSPlayerController value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->OriginalControllerOfCurrentPawn(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OriginalControllerOfCurrentPawn' is not possible.\n");
}
int32_t GCCSPlayerController::GetScore() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->Score(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iScore");
}
void GCCSPlayerController::SetScore(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->Score(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iScore", false, value);
}
int32_t GCCSPlayerController::GetRoundScore() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->RoundScore(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iRoundScore");
}
void GCCSPlayerController::SetRoundScore(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->RoundScore(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iRoundScore", false, value);
}
int32_t GCCSPlayerController::GetRoundsWon() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->RoundsWon(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iRoundsWon");
}
void GCCSPlayerController::SetRoundsWon(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->RoundsWon(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iRoundsWon", false, value);
}
std::vector<EKillTypes_t> GCCSPlayerController::GetKills() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->Kills(ptr=%p)", m_ptr));
    CUtlVector<EKillTypes_t>* vec = GetSchemaValue<CUtlVector<EKillTypes_t>*>(m_ptr, "CCSPlayerController", "m_vecKills"); std::vector<EKillTypes_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCCSPlayerController::SetKills(std::vector<EKillTypes_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->Kills(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<EKillTypes_t>(m_ptr, "CCSPlayerController", "m_vecKills", false, value);
}
bool GCCSPlayerController::GetMvpNoMusic() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->MvpNoMusic(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bMvpNoMusic");
}
void GCCSPlayerController::SetMvpNoMusic(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->MvpNoMusic(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bMvpNoMusic", false, value);
}
int32_t GCCSPlayerController::GetMvpReason() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->MvpReason(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_eMvpReason");
}
void GCCSPlayerController::SetMvpReason(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->MvpReason(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_eMvpReason", false, value);
}
int32_t GCCSPlayerController::GetMusicKitID() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->MusicKitID(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iMusicKitID");
}
void GCCSPlayerController::SetMusicKitID(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->MusicKitID(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iMusicKitID", false, value);
}
int32_t GCCSPlayerController::GetMusicKitMVPs() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->MusicKitMVPs(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iMusicKitMVPs");
}
void GCCSPlayerController::SetMusicKitMVPs(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->MusicKitMVPs(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iMusicKitMVPs", false, value);
}
int32_t GCCSPlayerController::GetMVPs() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->MVPs(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iMVPs");
}
void GCCSPlayerController::SetMVPs(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->MVPs(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iMVPs", false, value);
}
int32_t GCCSPlayerController::GetUpdateCounter() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->UpdateCounter(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_nUpdateCounter");
}
void GCCSPlayerController::SetUpdateCounter(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->UpdateCounter(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_nUpdateCounter", false, value);
}
float GCCSPlayerController::GetSmoothedPing() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->SmoothedPing(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerController", "m_flSmoothedPing");
}
void GCCSPlayerController::SetSmoothedPing(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->SmoothedPing(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_flSmoothedPing", false, value);
}
GIntervalTimer GCCSPlayerController::GetLastHeldVoteTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->LastHeldVoteTimer(ptr=%p)", m_ptr));
    GIntervalTimer value(GetSchemaPtr(m_ptr, "CCSPlayerController", "m_lastHeldVoteTimer"));
    return value;
}
void GCCSPlayerController::SetLastHeldVoteTimer(GIntervalTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->LastHeldVoteTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'LastHeldVoteTimer' is not possible.\n");
}
bool GCCSPlayerController::GetShowHints() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->ShowHints(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bShowHints");
}
void GCCSPlayerController::SetShowHints(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->ShowHints(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bShowHints", false, value);
}
int32_t GCCSPlayerController::GetNextTimeCheck() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->NextTimeCheck(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController", "m_iNextTimeCheck");
}
void GCCSPlayerController::SetNextTimeCheck(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->NextTimeCheck(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_iNextTimeCheck", false, value);
}
bool GCCSPlayerController::GetJustDidTeamKill() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->JustDidTeamKill(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bJustDidTeamKill");
}
void GCCSPlayerController::SetJustDidTeamKill(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->JustDidTeamKill(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bJustDidTeamKill", false, value);
}
bool GCCSPlayerController::GetPunishForTeamKill() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->PunishForTeamKill(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bPunishForTeamKill");
}
void GCCSPlayerController::SetPunishForTeamKill(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->PunishForTeamKill(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bPunishForTeamKill", false, value);
}
bool GCCSPlayerController::GetGaveTeamDamageWarning() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->GaveTeamDamageWarning(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bGaveTeamDamageWarning");
}
void GCCSPlayerController::SetGaveTeamDamageWarning(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->GaveTeamDamageWarning(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bGaveTeamDamageWarning", false, value);
}
bool GCCSPlayerController::GetGaveTeamDamageWarningThisRound() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->GaveTeamDamageWarningThisRound(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayerController", "m_bGaveTeamDamageWarningThisRound");
}
void GCCSPlayerController::SetGaveTeamDamageWarningThisRound(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->GaveTeamDamageWarningThisRound(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_bGaveTeamDamageWarningThisRound", false, value);
}
double GCCSPlayerController::GetDblLastReceivedPacketPlatFloatTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->DblLastReceivedPacketPlatFloatTime(ptr=%p)", m_ptr));
    return GetSchemaValue<double>(m_ptr, "CCSPlayerController", "m_dblLastReceivedPacketPlatFloatTime");
}
void GCCSPlayerController::SetDblLastReceivedPacketPlatFloatTime(double value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->DblLastReceivedPacketPlatFloatTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_dblLastReceivedPacketPlatFloatTime", false, value);
}
float GCCSPlayerController::GetLastTeamDamageWarningTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->LastTeamDamageWarningTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerController", "m_LastTeamDamageWarningTime");
}
void GCCSPlayerController::SetLastTeamDamageWarningTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->LastTeamDamageWarningTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_LastTeamDamageWarningTime", false, value);
}
float GCCSPlayerController::GetLastTimePlayerWasDisconnectedForPawnsRemove() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->LastTimePlayerWasDisconnectedForPawnsRemove(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayerController", "m_LastTimePlayerWasDisconnectedForPawnsRemove");
}
void GCCSPlayerController::SetLastTimePlayerWasDisconnectedForPawnsRemove(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->LastTimePlayerWasDisconnectedForPawnsRemove(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_LastTimePlayerWasDisconnectedForPawnsRemove", false, value);
}
uint32_t GCCSPlayerController::GetSuspiciousHitCount() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->SuspiciousHitCount(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CCSPlayerController", "m_nSuspiciousHitCount");
}
void GCCSPlayerController::SetSuspiciousHitCount(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->SuspiciousHitCount(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_nSuspiciousHitCount", false, value);
}
uint32_t GCCSPlayerController::GetNonSuspiciousHitStreak() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController->NonSuspiciousHitStreak(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CCSPlayerController", "m_nNonSuspiciousHitStreak");
}
void GCCSPlayerController::SetNonSuspiciousHitStreak(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController->NonSuspiciousHitStreak(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController", "m_nNonSuspiciousHitStreak", false, value);
}
void* GCCSPlayerController::GetPtr() {
    return m_ptr;
}
std::string GCCSPlayerController::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCCSPlayerController::IsValid() {
    return (m_ptr != nullptr);
}
GCBasePlayerController GCCSPlayerController::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSPlayerController::GetParent(ptr=%p)", m_ptr));
    GCBasePlayerController value(m_ptr);
    return value;
}
void GCCSPlayerController::SetParent(GCBasePlayerController value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSPlayerController::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCCSPlayerController(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCCSPlayerController>("CCSPlayerController")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("InGameMoneyServices", &GCCSPlayerController::GetInGameMoneyServices, &GCCSPlayerController::SetInGameMoneyServices)
        .addProperty("InventoryServices", &GCCSPlayerController::GetInventoryServices, &GCCSPlayerController::SetInventoryServices)
        .addProperty("ActionTrackingServices", &GCCSPlayerController::GetActionTrackingServices, &GCCSPlayerController::SetActionTrackingServices)
        .addProperty("DamageServices", &GCCSPlayerController::GetDamageServices, &GCCSPlayerController::SetDamageServices)
        .addProperty("Ping", &GCCSPlayerController::GetPing, &GCCSPlayerController::SetPing)
        .addProperty("HasCommunicationAbuseMute", &GCCSPlayerController::GetHasCommunicationAbuseMute, &GCCSPlayerController::SetHasCommunicationAbuseMute)
        .addProperty("CrosshairCodes", &GCCSPlayerController::GetCrosshairCodes, &GCCSPlayerController::SetCrosshairCodes)
        .addProperty("PendingTeamNum", &GCCSPlayerController::GetPendingTeamNum, &GCCSPlayerController::SetPendingTeamNum)
        .addProperty("ForceTeamTime", &GCCSPlayerController::GetForceTeamTime, &GCCSPlayerController::SetForceTeamTime)
        .addProperty("CompTeammateColor", &GCCSPlayerController::GetCompTeammateColor, &GCCSPlayerController::SetCompTeammateColor)
        .addProperty("EverPlayedOnTeam", &GCCSPlayerController::GetEverPlayedOnTeam, &GCCSPlayerController::SetEverPlayedOnTeam)
        .addProperty("AttemptedToGetColor", &GCCSPlayerController::GetAttemptedToGetColor, &GCCSPlayerController::SetAttemptedToGetColor)
        .addProperty("TeammatePreferredColor", &GCCSPlayerController::GetTeammatePreferredColor, &GCCSPlayerController::SetTeammatePreferredColor)
        .addProperty("TeamChanged", &GCCSPlayerController::GetTeamChanged, &GCCSPlayerController::SetTeamChanged)
        .addProperty("InSwitchTeam", &GCCSPlayerController::GetInSwitchTeam, &GCCSPlayerController::SetInSwitchTeam)
        .addProperty("HasSeenJoinGame", &GCCSPlayerController::GetHasSeenJoinGame, &GCCSPlayerController::SetHasSeenJoinGame)
        .addProperty("JustBecameSpectator", &GCCSPlayerController::GetJustBecameSpectator, &GCCSPlayerController::SetJustBecameSpectator)
        .addProperty("SwitchTeamsOnNextRoundReset", &GCCSPlayerController::GetSwitchTeamsOnNextRoundReset, &GCCSPlayerController::SetSwitchTeamsOnNextRoundReset)
        .addProperty("RemoveAllItemsOnNextRoundReset", &GCCSPlayerController::GetRemoveAllItemsOnNextRoundReset, &GCCSPlayerController::SetRemoveAllItemsOnNextRoundReset)
        .addProperty("Clan", &GCCSPlayerController::GetClan, &GCCSPlayerController::SetClan)
        .addProperty("ClanName", &GCCSPlayerController::GetClanName, &GCCSPlayerController::SetClanName)
        .addProperty("CoachingTeam", &GCCSPlayerController::GetCoachingTeam, &GCCSPlayerController::SetCoachingTeam)
        .addProperty("PlayerDominated", &GCCSPlayerController::GetPlayerDominated, &GCCSPlayerController::SetPlayerDominated)
        .addProperty("PlayerDominatingMe", &GCCSPlayerController::GetPlayerDominatingMe, &GCCSPlayerController::SetPlayerDominatingMe)
        .addProperty("CompetitiveRanking", &GCCSPlayerController::GetCompetitiveRanking, &GCCSPlayerController::SetCompetitiveRanking)
        .addProperty("CompetitiveWins", &GCCSPlayerController::GetCompetitiveWins, &GCCSPlayerController::SetCompetitiveWins)
        .addProperty("CompetitiveRankType", &GCCSPlayerController::GetCompetitiveRankType, &GCCSPlayerController::SetCompetitiveRankType)
        .addProperty("CompetitiveRankingPredicted_Win", &GCCSPlayerController::GetCompetitiveRankingPredicted_Win, &GCCSPlayerController::SetCompetitiveRankingPredicted_Win)
        .addProperty("CompetitiveRankingPredicted_Loss", &GCCSPlayerController::GetCompetitiveRankingPredicted_Loss, &GCCSPlayerController::SetCompetitiveRankingPredicted_Loss)
        .addProperty("CompetitiveRankingPredicted_Tie", &GCCSPlayerController::GetCompetitiveRankingPredicted_Tie, &GCCSPlayerController::SetCompetitiveRankingPredicted_Tie)
        .addProperty("EndMatchNextMapVote", &GCCSPlayerController::GetEndMatchNextMapVote, &GCCSPlayerController::SetEndMatchNextMapVote)
        .addProperty("ActiveQuestId", &GCCSPlayerController::GetActiveQuestId, &GCCSPlayerController::SetActiveQuestId)
        .addProperty("QuestProgressReason", &GCCSPlayerController::GetQuestProgressReason, &GCCSPlayerController::SetQuestProgressReason)
        .addProperty("PlayerTvControlFlags", &GCCSPlayerController::GetPlayerTvControlFlags, &GCCSPlayerController::SetPlayerTvControlFlags)
        .addProperty("DraftIndex", &GCCSPlayerController::GetDraftIndex, &GCCSPlayerController::SetDraftIndex)
        .addProperty("MsQueuedModeDisconnectionTimestamp", &GCCSPlayerController::GetMsQueuedModeDisconnectionTimestamp, &GCCSPlayerController::SetMsQueuedModeDisconnectionTimestamp)
        .addProperty("UiAbandonRecordedReason", &GCCSPlayerController::GetUiAbandonRecordedReason, &GCCSPlayerController::SetUiAbandonRecordedReason)
        .addProperty("CannotBeKicked", &GCCSPlayerController::GetCannotBeKicked, &GCCSPlayerController::SetCannotBeKicked)
        .addProperty("EverFullyConnected", &GCCSPlayerController::GetEverFullyConnected, &GCCSPlayerController::SetEverFullyConnected)
        .addProperty("AbandonAllowsSurrender", &GCCSPlayerController::GetAbandonAllowsSurrender, &GCCSPlayerController::SetAbandonAllowsSurrender)
        .addProperty("AbandonOffersInstantSurrender", &GCCSPlayerController::GetAbandonOffersInstantSurrender, &GCCSPlayerController::SetAbandonOffersInstantSurrender)
        .addProperty("Disconnection1MinWarningPrinted", &GCCSPlayerController::GetDisconnection1MinWarningPrinted, &GCCSPlayerController::SetDisconnection1MinWarningPrinted)
        .addProperty("ScoreReported", &GCCSPlayerController::GetScoreReported, &GCCSPlayerController::SetScoreReported)
        .addProperty("DisconnectionTick", &GCCSPlayerController::GetDisconnectionTick, &GCCSPlayerController::SetDisconnectionTick)
        .addProperty("ControllingBot", &GCCSPlayerController::GetControllingBot, &GCCSPlayerController::SetControllingBot)
        .addProperty("HasControlledBotThisRound", &GCCSPlayerController::GetHasControlledBotThisRound, &GCCSPlayerController::SetHasControlledBotThisRound)
        .addProperty("HasBeenControlledByPlayerThisRound", &GCCSPlayerController::GetHasBeenControlledByPlayerThisRound, &GCCSPlayerController::SetHasBeenControlledByPlayerThisRound)
        .addProperty("BotsControlledThisRound", &GCCSPlayerController::GetBotsControlledThisRound, &GCCSPlayerController::SetBotsControlledThisRound)
        .addProperty("CanControlObservedBot", &GCCSPlayerController::GetCanControlObservedBot, &GCCSPlayerController::SetCanControlObservedBot)
        .addProperty("PlayerPawn", &GCCSPlayerController::GetPlayerPawn, &GCCSPlayerController::SetPlayerPawn)
        .addProperty("ObserverPawn", &GCCSPlayerController::GetObserverPawn, &GCCSPlayerController::SetObserverPawn)
        .addProperty("DesiredObserverMode", &GCCSPlayerController::GetDesiredObserverMode, &GCCSPlayerController::SetDesiredObserverMode)
        .addProperty("DesiredObserverTarget", &GCCSPlayerController::GetDesiredObserverTarget, &GCCSPlayerController::SetDesiredObserverTarget)
        .addProperty("PawnIsAlive", &GCCSPlayerController::GetPawnIsAlive, &GCCSPlayerController::SetPawnIsAlive)
        .addProperty("PawnHealth", &GCCSPlayerController::GetPawnHealth, &GCCSPlayerController::SetPawnHealth)
        .addProperty("PawnArmor", &GCCSPlayerController::GetPawnArmor, &GCCSPlayerController::SetPawnArmor)
        .addProperty("PawnHasDefuser", &GCCSPlayerController::GetPawnHasDefuser, &GCCSPlayerController::SetPawnHasDefuser)
        .addProperty("PawnHasHelmet", &GCCSPlayerController::GetPawnHasHelmet, &GCCSPlayerController::SetPawnHasHelmet)
        .addProperty("PawnCharacterDefIndex", &GCCSPlayerController::GetPawnCharacterDefIndex, &GCCSPlayerController::SetPawnCharacterDefIndex)
        .addProperty("PawnLifetimeStart", &GCCSPlayerController::GetPawnLifetimeStart, &GCCSPlayerController::SetPawnLifetimeStart)
        .addProperty("PawnLifetimeEnd", &GCCSPlayerController::GetPawnLifetimeEnd, &GCCSPlayerController::SetPawnLifetimeEnd)
        .addProperty("PawnBotDifficulty", &GCCSPlayerController::GetPawnBotDifficulty, &GCCSPlayerController::SetPawnBotDifficulty)
        .addProperty("OriginalControllerOfCurrentPawn", &GCCSPlayerController::GetOriginalControllerOfCurrentPawn, &GCCSPlayerController::SetOriginalControllerOfCurrentPawn)
        .addProperty("Score", &GCCSPlayerController::GetScore, &GCCSPlayerController::SetScore)
        .addProperty("RoundScore", &GCCSPlayerController::GetRoundScore, &GCCSPlayerController::SetRoundScore)
        .addProperty("RoundsWon", &GCCSPlayerController::GetRoundsWon, &GCCSPlayerController::SetRoundsWon)
        .addProperty("Kills", &GCCSPlayerController::GetKills, &GCCSPlayerController::SetKills)
        .addProperty("MvpNoMusic", &GCCSPlayerController::GetMvpNoMusic, &GCCSPlayerController::SetMvpNoMusic)
        .addProperty("MvpReason", &GCCSPlayerController::GetMvpReason, &GCCSPlayerController::SetMvpReason)
        .addProperty("MusicKitID", &GCCSPlayerController::GetMusicKitID, &GCCSPlayerController::SetMusicKitID)
        .addProperty("MusicKitMVPs", &GCCSPlayerController::GetMusicKitMVPs, &GCCSPlayerController::SetMusicKitMVPs)
        .addProperty("MVPs", &GCCSPlayerController::GetMVPs, &GCCSPlayerController::SetMVPs)
        .addProperty("UpdateCounter", &GCCSPlayerController::GetUpdateCounter, &GCCSPlayerController::SetUpdateCounter)
        .addProperty("SmoothedPing", &GCCSPlayerController::GetSmoothedPing, &GCCSPlayerController::SetSmoothedPing)
        .addProperty("LastHeldVoteTimer", &GCCSPlayerController::GetLastHeldVoteTimer, &GCCSPlayerController::SetLastHeldVoteTimer)
        .addProperty("ShowHints", &GCCSPlayerController::GetShowHints, &GCCSPlayerController::SetShowHints)
        .addProperty("NextTimeCheck", &GCCSPlayerController::GetNextTimeCheck, &GCCSPlayerController::SetNextTimeCheck)
        .addProperty("JustDidTeamKill", &GCCSPlayerController::GetJustDidTeamKill, &GCCSPlayerController::SetJustDidTeamKill)
        .addProperty("PunishForTeamKill", &GCCSPlayerController::GetPunishForTeamKill, &GCCSPlayerController::SetPunishForTeamKill)
        .addProperty("GaveTeamDamageWarning", &GCCSPlayerController::GetGaveTeamDamageWarning, &GCCSPlayerController::SetGaveTeamDamageWarning)
        .addProperty("GaveTeamDamageWarningThisRound", &GCCSPlayerController::GetGaveTeamDamageWarningThisRound, &GCCSPlayerController::SetGaveTeamDamageWarningThisRound)
        .addProperty("DblLastReceivedPacketPlatFloatTime", &GCCSPlayerController::GetDblLastReceivedPacketPlatFloatTime, &GCCSPlayerController::SetDblLastReceivedPacketPlatFloatTime)
        .addProperty("LastTeamDamageWarningTime", &GCCSPlayerController::GetLastTeamDamageWarningTime, &GCCSPlayerController::SetLastTeamDamageWarningTime)
        .addProperty("LastTimePlayerWasDisconnectedForPawnsRemove", &GCCSPlayerController::GetLastTimePlayerWasDisconnectedForPawnsRemove, &GCCSPlayerController::SetLastTimePlayerWasDisconnectedForPawnsRemove)
        .addProperty("SuspiciousHitCount", &GCCSPlayerController::GetSuspiciousHitCount, &GCCSPlayerController::SetSuspiciousHitCount)
        .addProperty("NonSuspiciousHitStreak", &GCCSPlayerController::GetNonSuspiciousHitStreak, &GCCSPlayerController::SetNonSuspiciousHitStreak)
        .addProperty("Parent", &GCCSPlayerController::GetParent, &GCCSPlayerController::SetParent)
        .addFunction("ToPtr", &GCCSPlayerController::ToPtr)
        .addFunction("IsValid", &GCCSPlayerController::IsValid)
        .endClass();
}
GCChicken::GCChicken(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCChicken::GCChicken(void *ptr) {
    m_ptr = ptr;
}
GCAttributeContainer GCChicken::GetAttributeManager() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChicken->AttributeManager(ptr=%p)", m_ptr));
    GCAttributeContainer value(GetSchemaPtr(m_ptr, "CChicken", "m_AttributeManager"));
    return value;
}
void GCChicken::SetAttributeManager(GCAttributeContainer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChicken->AttributeManager(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'AttributeManager' is not possible.\n");
}
uint32_t GCChicken::GetActivityFinishedTag() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChicken->ActivityFinishedTag(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlStringToken>(m_ptr, "CChicken", "m_sActivityFinishedTag").m_nHashCode;
}
void GCChicken::SetActivityFinishedTag(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChicken->ActivityFinishedTag(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CChicken", "m_sActivityFinishedTag", false, CUtlStringToken(value));
}
GCountdownTimer GCChicken::GetUpdateTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChicken->UpdateTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CChicken", "m_updateTimer"));
    return value;
}
void GCChicken::SetUpdateTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChicken->UpdateTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'UpdateTimer' is not possible.\n");
}
Vector GCChicken::GetStuckAnchor() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChicken->StuckAnchor(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CChicken", "m_stuckAnchor");
}
void GCChicken::SetStuckAnchor(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChicken->StuckAnchor(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CChicken", "m_stuckAnchor", false, value);
}
GCountdownTimer GCChicken::GetStuckTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChicken->StuckTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CChicken", "m_stuckTimer"));
    return value;
}
void GCChicken::SetStuckTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChicken->StuckTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'StuckTimer' is not possible.\n");
}
GCountdownTimer GCChicken::GetCollisionStuckTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChicken->CollisionStuckTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CChicken", "m_collisionStuckTimer"));
    return value;
}
void GCChicken::SetCollisionStuckTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChicken->CollisionStuckTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'CollisionStuckTimer' is not possible.\n");
}
bool GCChicken::GetIsOnGround() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChicken->IsOnGround(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CChicken", "m_isOnGround");
}
void GCChicken::SetIsOnGround(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChicken->IsOnGround(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CChicken", "m_isOnGround", false, value);
}
Vector GCChicken::GetFallVelocity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChicken->FallVelocity(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CChicken", "m_vFallVelocity");
}
void GCChicken::SetFallVelocity(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChicken->FallVelocity(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CChicken", "m_vFallVelocity", false, value);
}
uint64_t GCChicken::GetDesiredActivity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChicken->DesiredActivity(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CChicken", "m_desiredActivity");
}
void GCChicken::SetDesiredActivity(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChicken->DesiredActivity(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CChicken", "m_desiredActivity", false, value);
}
uint64_t GCChicken::GetCurrentActivity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChicken->CurrentActivity(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CChicken", "m_currentActivity");
}
void GCChicken::SetCurrentActivity(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChicken->CurrentActivity(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CChicken", "m_currentActivity", false, value);
}
GCountdownTimer GCChicken::GetActivityTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChicken->ActivityTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CChicken", "m_activityTimer"));
    return value;
}
void GCChicken::SetActivityTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChicken->ActivityTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ActivityTimer' is not possible.\n");
}
float GCChicken::GetTurnRate() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChicken->TurnRate(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CChicken", "m_turnRate");
}
void GCChicken::SetTurnRate(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChicken->TurnRate(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CChicken", "m_turnRate", false, value);
}
GCBaseEntity GCChicken::GetFleeFrom() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChicken->FleeFrom(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CChicken", "m_fleeFrom").Get()));
    return value;
}
void GCChicken::SetFleeFrom(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChicken->FleeFrom(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'FleeFrom' is not possible.\n");
}
GCountdownTimer GCChicken::GetMoveRateThrottleTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChicken->MoveRateThrottleTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CChicken", "m_moveRateThrottleTimer"));
    return value;
}
void GCChicken::SetMoveRateThrottleTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChicken->MoveRateThrottleTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'MoveRateThrottleTimer' is not possible.\n");
}
GCountdownTimer GCChicken::GetStartleTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChicken->StartleTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CChicken", "m_startleTimer"));
    return value;
}
void GCChicken::SetStartleTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChicken->StartleTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'StartleTimer' is not possible.\n");
}
GCountdownTimer GCChicken::GetVocalizeTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChicken->VocalizeTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CChicken", "m_vocalizeTimer"));
    return value;
}
void GCChicken::SetVocalizeTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChicken->VocalizeTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'VocalizeTimer' is not possible.\n");
}
float GCChicken::GetWhenZombified() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChicken->WhenZombified(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CChicken", "m_flWhenZombified");
}
void GCChicken::SetWhenZombified(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChicken->WhenZombified(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CChicken", "m_flWhenZombified", false, value);
}
bool GCChicken::GetJumpedThisFrame() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChicken->JumpedThisFrame(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CChicken", "m_jumpedThisFrame");
}
void GCChicken::SetJumpedThisFrame(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChicken->JumpedThisFrame(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CChicken", "m_jumpedThisFrame", false, value);
}
GCCSPlayerPawn GCChicken::GetLeader() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChicken->Leader(ptr=%p)", m_ptr));
    GCCSPlayerPawn value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CChicken", "m_leader").Get()));
    return value;
}
void GCChicken::SetLeader(GCCSPlayerPawn value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChicken->Leader(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Leader' is not possible.\n");
}
GCountdownTimer GCChicken::GetReuseTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChicken->ReuseTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CChicken", "m_reuseTimer"));
    return value;
}
void GCChicken::SetReuseTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChicken->ReuseTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ReuseTimer' is not possible.\n");
}
bool GCChicken::GetHasBeenUsed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChicken->HasBeenUsed(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CChicken", "m_hasBeenUsed");
}
void GCChicken::SetHasBeenUsed(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChicken->HasBeenUsed(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CChicken", "m_hasBeenUsed", false, value);
}
GCountdownTimer GCChicken::GetJumpTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChicken->JumpTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CChicken", "m_jumpTimer"));
    return value;
}
void GCChicken::SetJumpTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChicken->JumpTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'JumpTimer' is not possible.\n");
}
float GCChicken::GetLastJumpTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChicken->LastJumpTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CChicken", "m_flLastJumpTime");
}
void GCChicken::SetLastJumpTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChicken->LastJumpTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CChicken", "m_flLastJumpTime", false, value);
}
bool GCChicken::GetInJump() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChicken->InJump(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CChicken", "m_bInJump");
}
void GCChicken::SetInJump(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChicken->InJump(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CChicken", "m_bInJump", false, value);
}
bool GCChicken::GetIsWaitingForLeader() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChicken->IsWaitingForLeader(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CChicken", "m_isWaitingForLeader");
}
void GCChicken::SetIsWaitingForLeader(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChicken->IsWaitingForLeader(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CChicken", "m_isWaitingForLeader", false, value);
}
GCountdownTimer GCChicken::GetRepathTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChicken->RepathTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CChicken", "m_repathTimer"));
    return value;
}
void GCChicken::SetRepathTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChicken->RepathTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'RepathTimer' is not possible.\n");
}
GCountdownTimer GCChicken::GetInhibitDoorTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChicken->InhibitDoorTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CChicken", "m_inhibitDoorTimer"));
    return value;
}
void GCChicken::SetInhibitDoorTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChicken->InhibitDoorTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'InhibitDoorTimer' is not possible.\n");
}
GCountdownTimer GCChicken::GetInhibitObstacleAvoidanceTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChicken->InhibitObstacleAvoidanceTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CChicken", "m_inhibitObstacleAvoidanceTimer"));
    return value;
}
void GCChicken::SetInhibitObstacleAvoidanceTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChicken->InhibitObstacleAvoidanceTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'InhibitObstacleAvoidanceTimer' is not possible.\n");
}
Vector GCChicken::GetPathGoal() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChicken->PathGoal(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CChicken", "m_vecPathGoal");
}
void GCChicken::SetPathGoal(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChicken->PathGoal(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CChicken", "m_vecPathGoal", false, value);
}
float GCChicken::GetActiveFollowStartTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChicken->ActiveFollowStartTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CChicken", "m_flActiveFollowStartTime");
}
void GCChicken::SetActiveFollowStartTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChicken->ActiveFollowStartTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CChicken", "m_flActiveFollowStartTime", false, value);
}
GCountdownTimer GCChicken::GetFollowMinuteTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChicken->FollowMinuteTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CChicken", "m_followMinuteTimer"));
    return value;
}
void GCChicken::SetFollowMinuteTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChicken->FollowMinuteTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'FollowMinuteTimer' is not possible.\n");
}
Vector GCChicken::GetLastEggPoopPosition() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChicken->LastEggPoopPosition(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CChicken", "m_vecLastEggPoopPosition");
}
void GCChicken::SetLastEggPoopPosition(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChicken->LastEggPoopPosition(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CChicken", "m_vecLastEggPoopPosition", false, value);
}
GCountdownTimer GCChicken::GetBlockDirectionTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CChicken->BlockDirectionTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CChicken", "m_BlockDirectionTimer"));
    return value;
}
void GCChicken::SetBlockDirectionTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CChicken->BlockDirectionTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'BlockDirectionTimer' is not possible.\n");
}
void* GCChicken::GetPtr() {
    return m_ptr;
}
std::string GCChicken::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCChicken::IsValid() {
    return (m_ptr != nullptr);
}
GCDynamicProp GCChicken::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CChicken::GetParent(ptr=%p)", m_ptr));
    GCDynamicProp value(m_ptr);
    return value;
}
void GCChicken::SetParent(GCDynamicProp value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CChicken::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCChicken(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCChicken>("CChicken")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("AttributeManager", &GCChicken::GetAttributeManager, &GCChicken::SetAttributeManager)
        .addProperty("ActivityFinishedTag", &GCChicken::GetActivityFinishedTag, &GCChicken::SetActivityFinishedTag)
        .addProperty("UpdateTimer", &GCChicken::GetUpdateTimer, &GCChicken::SetUpdateTimer)
        .addProperty("StuckAnchor", &GCChicken::GetStuckAnchor, &GCChicken::SetStuckAnchor)
        .addProperty("StuckTimer", &GCChicken::GetStuckTimer, &GCChicken::SetStuckTimer)
        .addProperty("CollisionStuckTimer", &GCChicken::GetCollisionStuckTimer, &GCChicken::SetCollisionStuckTimer)
        .addProperty("IsOnGround", &GCChicken::GetIsOnGround, &GCChicken::SetIsOnGround)
        .addProperty("FallVelocity", &GCChicken::GetFallVelocity, &GCChicken::SetFallVelocity)
        .addProperty("DesiredActivity", &GCChicken::GetDesiredActivity, &GCChicken::SetDesiredActivity)
        .addProperty("CurrentActivity", &GCChicken::GetCurrentActivity, &GCChicken::SetCurrentActivity)
        .addProperty("ActivityTimer", &GCChicken::GetActivityTimer, &GCChicken::SetActivityTimer)
        .addProperty("TurnRate", &GCChicken::GetTurnRate, &GCChicken::SetTurnRate)
        .addProperty("FleeFrom", &GCChicken::GetFleeFrom, &GCChicken::SetFleeFrom)
        .addProperty("MoveRateThrottleTimer", &GCChicken::GetMoveRateThrottleTimer, &GCChicken::SetMoveRateThrottleTimer)
        .addProperty("StartleTimer", &GCChicken::GetStartleTimer, &GCChicken::SetStartleTimer)
        .addProperty("VocalizeTimer", &GCChicken::GetVocalizeTimer, &GCChicken::SetVocalizeTimer)
        .addProperty("WhenZombified", &GCChicken::GetWhenZombified, &GCChicken::SetWhenZombified)
        .addProperty("JumpedThisFrame", &GCChicken::GetJumpedThisFrame, &GCChicken::SetJumpedThisFrame)
        .addProperty("Leader", &GCChicken::GetLeader, &GCChicken::SetLeader)
        .addProperty("ReuseTimer", &GCChicken::GetReuseTimer, &GCChicken::SetReuseTimer)
        .addProperty("HasBeenUsed", &GCChicken::GetHasBeenUsed, &GCChicken::SetHasBeenUsed)
        .addProperty("JumpTimer", &GCChicken::GetJumpTimer, &GCChicken::SetJumpTimer)
        .addProperty("LastJumpTime", &GCChicken::GetLastJumpTime, &GCChicken::SetLastJumpTime)
        .addProperty("InJump", &GCChicken::GetInJump, &GCChicken::SetInJump)
        .addProperty("IsWaitingForLeader", &GCChicken::GetIsWaitingForLeader, &GCChicken::SetIsWaitingForLeader)
        .addProperty("RepathTimer", &GCChicken::GetRepathTimer, &GCChicken::SetRepathTimer)
        .addProperty("InhibitDoorTimer", &GCChicken::GetInhibitDoorTimer, &GCChicken::SetInhibitDoorTimer)
        .addProperty("InhibitObstacleAvoidanceTimer", &GCChicken::GetInhibitObstacleAvoidanceTimer, &GCChicken::SetInhibitObstacleAvoidanceTimer)
        .addProperty("PathGoal", &GCChicken::GetPathGoal, &GCChicken::SetPathGoal)
        .addProperty("ActiveFollowStartTime", &GCChicken::GetActiveFollowStartTime, &GCChicken::SetActiveFollowStartTime)
        .addProperty("FollowMinuteTimer", &GCChicken::GetFollowMinuteTimer, &GCChicken::SetFollowMinuteTimer)
        .addProperty("LastEggPoopPosition", &GCChicken::GetLastEggPoopPosition, &GCChicken::SetLastEggPoopPosition)
        .addProperty("BlockDirectionTimer", &GCChicken::GetBlockDirectionTimer, &GCChicken::SetBlockDirectionTimer)
        .addProperty("Parent", &GCChicken::GetParent, &GCChicken::SetParent)
        .addFunction("ToPtr", &GCChicken::ToPtr)
        .addFunction("IsValid", &GCChicken::IsValid)
        .endClass();
}
GCInfoInstructorHintBombTargetA::GCInfoInstructorHintBombTargetA(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCInfoInstructorHintBombTargetA::GCInfoInstructorHintBombTargetA(void *ptr) {
    m_ptr = ptr;
}
void* GCInfoInstructorHintBombTargetA::GetPtr() {
    return m_ptr;
}
std::string GCInfoInstructorHintBombTargetA::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCInfoInstructorHintBombTargetA::IsValid() {
    return (m_ptr != nullptr);
}
GCPointEntity GCInfoInstructorHintBombTargetA::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CInfoInstructorHintBombTargetA::GetParent(ptr=%p)", m_ptr));
    GCPointEntity value(m_ptr);
    return value;
}
void GCInfoInstructorHintBombTargetA::SetParent(GCPointEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CInfoInstructorHintBombTargetA::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCInfoInstructorHintBombTargetA(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCInfoInstructorHintBombTargetA>("CInfoInstructorHintBombTargetA")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCInfoInstructorHintBombTargetA::GetParent, &GCInfoInstructorHintBombTargetA::SetParent)
        .addFunction("ToPtr", &GCInfoInstructorHintBombTargetA::ToPtr)
        .addFunction("IsValid", &GCInfoInstructorHintBombTargetA::IsValid)
        .endClass();
}
GCWeaponAWP::GCWeaponAWP(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCWeaponAWP::GCWeaponAWP(void *ptr) {
    m_ptr = ptr;
}
void* GCWeaponAWP::GetPtr() {
    return m_ptr;
}
std::string GCWeaponAWP::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCWeaponAWP::IsValid() {
    return (m_ptr != nullptr);
}
GCCSWeaponBaseGun GCWeaponAWP::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponAWP::GetParent(ptr=%p)", m_ptr));
    GCCSWeaponBaseGun value(m_ptr);
    return value;
}
void GCWeaponAWP::SetParent(GCCSWeaponBaseGun value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponAWP::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCWeaponAWP(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCWeaponAWP>("CWeaponAWP")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCWeaponAWP::GetParent, &GCWeaponAWP::SetParent)
        .addFunction("ToPtr", &GCWeaponAWP::ToPtr)
        .addFunction("IsValid", &GCWeaponAWP::IsValid)
        .endClass();
}
GCCSObserverPawn::GCCSObserverPawn(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCCSObserverPawn::GCCSObserverPawn(void *ptr) {
    m_ptr = ptr;
}
void* GCCSObserverPawn::GetPtr() {
    return m_ptr;
}
std::string GCCSObserverPawn::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCCSObserverPawn::IsValid() {
    return (m_ptr != nullptr);
}
GCCSPlayerPawnBase GCCSObserverPawn::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSObserverPawn::GetParent(ptr=%p)", m_ptr));
    GCCSPlayerPawnBase value(m_ptr);
    return value;
}
void GCCSObserverPawn::SetParent(GCCSPlayerPawnBase value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSObserverPawn::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCCSObserverPawn(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCCSObserverPawn>("CCSObserverPawn")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCCSObserverPawn::GetParent, &GCCSObserverPawn::SetParent)
        .addFunction("ToPtr", &GCCSObserverPawn::ToPtr)
        .addFunction("IsValid", &GCCSObserverPawn::IsValid)
        .endClass();
}
GCPostProcessingVolume::GCPostProcessingVolume(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPostProcessingVolume::GCPostProcessingVolume(void *ptr) {
    m_ptr = ptr;
}
float GCPostProcessingVolume::GetFadeDuration() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPostProcessingVolume->FadeDuration(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPostProcessingVolume", "m_flFadeDuration");
}
void GCPostProcessingVolume::SetFadeDuration(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPostProcessingVolume->FadeDuration(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPostProcessingVolume", "m_flFadeDuration", false, value);
}
float GCPostProcessingVolume::GetMinLogExposure() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPostProcessingVolume->MinLogExposure(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPostProcessingVolume", "m_flMinLogExposure");
}
void GCPostProcessingVolume::SetMinLogExposure(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPostProcessingVolume->MinLogExposure(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPostProcessingVolume", "m_flMinLogExposure", false, value);
}
float GCPostProcessingVolume::GetMaxLogExposure() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPostProcessingVolume->MaxLogExposure(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPostProcessingVolume", "m_flMaxLogExposure");
}
void GCPostProcessingVolume::SetMaxLogExposure(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPostProcessingVolume->MaxLogExposure(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPostProcessingVolume", "m_flMaxLogExposure", false, value);
}
float GCPostProcessingVolume::GetMinExposure() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPostProcessingVolume->MinExposure(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPostProcessingVolume", "m_flMinExposure");
}
void GCPostProcessingVolume::SetMinExposure(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPostProcessingVolume->MinExposure(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPostProcessingVolume", "m_flMinExposure", false, value);
}
float GCPostProcessingVolume::GetMaxExposure() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPostProcessingVolume->MaxExposure(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPostProcessingVolume", "m_flMaxExposure");
}
void GCPostProcessingVolume::SetMaxExposure(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPostProcessingVolume->MaxExposure(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPostProcessingVolume", "m_flMaxExposure", false, value);
}
float GCPostProcessingVolume::GetExposureCompensation() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPostProcessingVolume->ExposureCompensation(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPostProcessingVolume", "m_flExposureCompensation");
}
void GCPostProcessingVolume::SetExposureCompensation(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPostProcessingVolume->ExposureCompensation(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPostProcessingVolume", "m_flExposureCompensation", false, value);
}
float GCPostProcessingVolume::GetExposureFadeSpeedUp() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPostProcessingVolume->ExposureFadeSpeedUp(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPostProcessingVolume", "m_flExposureFadeSpeedUp");
}
void GCPostProcessingVolume::SetExposureFadeSpeedUp(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPostProcessingVolume->ExposureFadeSpeedUp(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPostProcessingVolume", "m_flExposureFadeSpeedUp", false, value);
}
float GCPostProcessingVolume::GetExposureFadeSpeedDown() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPostProcessingVolume->ExposureFadeSpeedDown(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPostProcessingVolume", "m_flExposureFadeSpeedDown");
}
void GCPostProcessingVolume::SetExposureFadeSpeedDown(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPostProcessingVolume->ExposureFadeSpeedDown(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPostProcessingVolume", "m_flExposureFadeSpeedDown", false, value);
}
float GCPostProcessingVolume::GetTonemapEVSmoothingRange() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPostProcessingVolume->TonemapEVSmoothingRange(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPostProcessingVolume", "m_flTonemapEVSmoothingRange");
}
void GCPostProcessingVolume::SetTonemapEVSmoothingRange(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPostProcessingVolume->TonemapEVSmoothingRange(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPostProcessingVolume", "m_flTonemapEVSmoothingRange", false, value);
}
bool GCPostProcessingVolume::GetMaster() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPostProcessingVolume->Master(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPostProcessingVolume", "m_bMaster");
}
void GCPostProcessingVolume::SetMaster(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPostProcessingVolume->Master(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPostProcessingVolume", "m_bMaster", false, value);
}
bool GCPostProcessingVolume::GetExposureControl() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPostProcessingVolume->ExposureControl(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPostProcessingVolume", "m_bExposureControl");
}
void GCPostProcessingVolume::SetExposureControl(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPostProcessingVolume->ExposureControl(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPostProcessingVolume", "m_bExposureControl", false, value);
}
float GCPostProcessingVolume::GetRate() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPostProcessingVolume->Rate(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPostProcessingVolume", "m_flRate");
}
void GCPostProcessingVolume::SetRate(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPostProcessingVolume->Rate(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPostProcessingVolume", "m_flRate", false, value);
}
float GCPostProcessingVolume::GetTonemapPercentTarget() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPostProcessingVolume->TonemapPercentTarget(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPostProcessingVolume", "m_flTonemapPercentTarget");
}
void GCPostProcessingVolume::SetTonemapPercentTarget(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPostProcessingVolume->TonemapPercentTarget(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPostProcessingVolume", "m_flTonemapPercentTarget", false, value);
}
float GCPostProcessingVolume::GetTonemapPercentBrightPixels() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPostProcessingVolume->TonemapPercentBrightPixels(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPostProcessingVolume", "m_flTonemapPercentBrightPixels");
}
void GCPostProcessingVolume::SetTonemapPercentBrightPixels(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPostProcessingVolume->TonemapPercentBrightPixels(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPostProcessingVolume", "m_flTonemapPercentBrightPixels", false, value);
}
float GCPostProcessingVolume::GetTonemapMinAvgLum() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPostProcessingVolume->TonemapMinAvgLum(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPostProcessingVolume", "m_flTonemapMinAvgLum");
}
void GCPostProcessingVolume::SetTonemapMinAvgLum(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPostProcessingVolume->TonemapMinAvgLum(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPostProcessingVolume", "m_flTonemapMinAvgLum", false, value);
}
void* GCPostProcessingVolume::GetPtr() {
    return m_ptr;
}
std::string GCPostProcessingVolume::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPostProcessingVolume::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseTrigger GCPostProcessingVolume::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPostProcessingVolume::GetParent(ptr=%p)", m_ptr));
    GCBaseTrigger value(m_ptr);
    return value;
}
void GCPostProcessingVolume::SetParent(GCBaseTrigger value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPostProcessingVolume::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCPostProcessingVolume(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPostProcessingVolume>("CPostProcessingVolume")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("FadeDuration", &GCPostProcessingVolume::GetFadeDuration, &GCPostProcessingVolume::SetFadeDuration)
        .addProperty("MinLogExposure", &GCPostProcessingVolume::GetMinLogExposure, &GCPostProcessingVolume::SetMinLogExposure)
        .addProperty("MaxLogExposure", &GCPostProcessingVolume::GetMaxLogExposure, &GCPostProcessingVolume::SetMaxLogExposure)
        .addProperty("MinExposure", &GCPostProcessingVolume::GetMinExposure, &GCPostProcessingVolume::SetMinExposure)
        .addProperty("MaxExposure", &GCPostProcessingVolume::GetMaxExposure, &GCPostProcessingVolume::SetMaxExposure)
        .addProperty("ExposureCompensation", &GCPostProcessingVolume::GetExposureCompensation, &GCPostProcessingVolume::SetExposureCompensation)
        .addProperty("ExposureFadeSpeedUp", &GCPostProcessingVolume::GetExposureFadeSpeedUp, &GCPostProcessingVolume::SetExposureFadeSpeedUp)
        .addProperty("ExposureFadeSpeedDown", &GCPostProcessingVolume::GetExposureFadeSpeedDown, &GCPostProcessingVolume::SetExposureFadeSpeedDown)
        .addProperty("TonemapEVSmoothingRange", &GCPostProcessingVolume::GetTonemapEVSmoothingRange, &GCPostProcessingVolume::SetTonemapEVSmoothingRange)
        .addProperty("Master", &GCPostProcessingVolume::GetMaster, &GCPostProcessingVolume::SetMaster)
        .addProperty("ExposureControl", &GCPostProcessingVolume::GetExposureControl, &GCPostProcessingVolume::SetExposureControl)
        .addProperty("Rate", &GCPostProcessingVolume::GetRate, &GCPostProcessingVolume::SetRate)
        .addProperty("TonemapPercentTarget", &GCPostProcessingVolume::GetTonemapPercentTarget, &GCPostProcessingVolume::SetTonemapPercentTarget)
        .addProperty("TonemapPercentBrightPixels", &GCPostProcessingVolume::GetTonemapPercentBrightPixels, &GCPostProcessingVolume::SetTonemapPercentBrightPixels)
        .addProperty("TonemapMinAvgLum", &GCPostProcessingVolume::GetTonemapMinAvgLum, &GCPostProcessingVolume::SetTonemapMinAvgLum)
        .addProperty("Parent", &GCPostProcessingVolume::GetParent, &GCPostProcessingVolume::SetParent)
        .addFunction("ToPtr", &GCPostProcessingVolume::ToPtr)
        .addFunction("IsValid", &GCPostProcessingVolume::IsValid)
        .endClass();
}
GCSpotlightEnd::GCSpotlightEnd(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCSpotlightEnd::GCSpotlightEnd(void *ptr) {
    m_ptr = ptr;
}
float GCSpotlightEnd::GetLightScale() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSpotlightEnd->LightScale(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CSpotlightEnd", "m_flLightScale");
}
void GCSpotlightEnd::SetLightScale(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSpotlightEnd->LightScale(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSpotlightEnd", "m_flLightScale", false, value);
}
float GCSpotlightEnd::GetRadius() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSpotlightEnd->Radius(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CSpotlightEnd", "m_Radius");
}
void GCSpotlightEnd::SetRadius(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSpotlightEnd->Radius(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSpotlightEnd", "m_Radius", false, value);
}
Vector GCSpotlightEnd::GetSpotlightDir() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSpotlightEnd->SpotlightDir(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CSpotlightEnd", "m_vSpotlightDir");
}
void GCSpotlightEnd::SetSpotlightDir(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSpotlightEnd->SpotlightDir(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSpotlightEnd", "m_vSpotlightDir", false, value);
}
Vector GCSpotlightEnd::GetSpotlightOrg() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSpotlightEnd->SpotlightOrg(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CSpotlightEnd", "m_vSpotlightOrg");
}
void GCSpotlightEnd::SetSpotlightOrg(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSpotlightEnd->SpotlightOrg(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSpotlightEnd", "m_vSpotlightOrg", false, value);
}
void* GCSpotlightEnd::GetPtr() {
    return m_ptr;
}
std::string GCSpotlightEnd::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCSpotlightEnd::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseModelEntity GCSpotlightEnd::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSpotlightEnd::GetParent(ptr=%p)", m_ptr));
    GCBaseModelEntity value(m_ptr);
    return value;
}
void GCSpotlightEnd::SetParent(GCBaseModelEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSpotlightEnd::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCSpotlightEnd(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCSpotlightEnd>("CSpotlightEnd")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("LightScale", &GCSpotlightEnd::GetLightScale, &GCSpotlightEnd::SetLightScale)
        .addProperty("Radius", &GCSpotlightEnd::GetRadius, &GCSpotlightEnd::SetRadius)
        .addProperty("SpotlightDir", &GCSpotlightEnd::GetSpotlightDir, &GCSpotlightEnd::SetSpotlightDir)
        .addProperty("SpotlightOrg", &GCSpotlightEnd::GetSpotlightOrg, &GCSpotlightEnd::SetSpotlightOrg)
        .addProperty("Parent", &GCSpotlightEnd::GetParent, &GCSpotlightEnd::SetParent)
        .addFunction("ToPtr", &GCSpotlightEnd::ToPtr)
        .addFunction("IsValid", &GCSpotlightEnd::IsValid)
        .endClass();
}
GCGamePlayerZone::GCGamePlayerZone(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCGamePlayerZone::GCGamePlayerZone(void *ptr) {
    m_ptr = ptr;
}
GCEntityIOOutput GCGamePlayerZone::GetOnPlayerInZone() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CGamePlayerZone->OnPlayerInZone(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CGamePlayerZone", "m_OnPlayerInZone"));
    return value;
}
void GCGamePlayerZone::SetOnPlayerInZone(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CGamePlayerZone->OnPlayerInZone(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnPlayerInZone' is not possible.\n");
}
GCEntityIOOutput GCGamePlayerZone::GetOnPlayerOutZone() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CGamePlayerZone->OnPlayerOutZone(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CGamePlayerZone", "m_OnPlayerOutZone"));
    return value;
}
void GCGamePlayerZone::SetOnPlayerOutZone(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CGamePlayerZone->OnPlayerOutZone(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnPlayerOutZone' is not possible.\n");
}
void* GCGamePlayerZone::GetPtr() {
    return m_ptr;
}
std::string GCGamePlayerZone::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCGamePlayerZone::IsValid() {
    return (m_ptr != nullptr);
}
GCRuleBrushEntity GCGamePlayerZone::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CGamePlayerZone::GetParent(ptr=%p)", m_ptr));
    GCRuleBrushEntity value(m_ptr);
    return value;
}
void GCGamePlayerZone::SetParent(GCRuleBrushEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CGamePlayerZone::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCGamePlayerZone(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCGamePlayerZone>("CGamePlayerZone")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("OnPlayerInZone", &GCGamePlayerZone::GetOnPlayerInZone, &GCGamePlayerZone::SetOnPlayerInZone)
        .addProperty("OnPlayerOutZone", &GCGamePlayerZone::GetOnPlayerOutZone, &GCGamePlayerZone::SetOnPlayerOutZone)
        .addProperty("Parent", &GCGamePlayerZone::GetParent, &GCGamePlayerZone::SetParent)
        .addFunction("ToPtr", &GCGamePlayerZone::ToPtr)
        .addFunction("IsValid", &GCGamePlayerZone::IsValid)
        .endClass();
}
GCSensorGrenade::GCSensorGrenade(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCSensorGrenade::GCSensorGrenade(void *ptr) {
    m_ptr = ptr;
}
void* GCSensorGrenade::GetPtr() {
    return m_ptr;
}
std::string GCSensorGrenade::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCSensorGrenade::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseCSGrenade GCSensorGrenade::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSensorGrenade::GetParent(ptr=%p)", m_ptr));
    GCBaseCSGrenade value(m_ptr);
    return value;
}
void GCSensorGrenade::SetParent(GCBaseCSGrenade value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSensorGrenade::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCSensorGrenade(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCSensorGrenade>("CSensorGrenade")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCSensorGrenade::GetParent, &GCSensorGrenade::SetParent)
        .addFunction("ToPtr", &GCSensorGrenade::ToPtr)
        .addFunction("IsValid", &GCSensorGrenade::IsValid)
        .endClass();
}
GCCSGO_WingmanIntroTerroristPosition::GCCSGO_WingmanIntroTerroristPosition(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCCSGO_WingmanIntroTerroristPosition::GCCSGO_WingmanIntroTerroristPosition(void *ptr) {
    m_ptr = ptr;
}
void* GCCSGO_WingmanIntroTerroristPosition::GetPtr() {
    return m_ptr;
}
std::string GCCSGO_WingmanIntroTerroristPosition::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCCSGO_WingmanIntroTerroristPosition::IsValid() {
    return (m_ptr != nullptr);
}
GCCSGO_WingmanIntroCharacterPosition GCCSGO_WingmanIntroTerroristPosition::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSGO_WingmanIntroTerroristPosition::GetParent(ptr=%p)", m_ptr));
    GCCSGO_WingmanIntroCharacterPosition value(m_ptr);
    return value;
}
void GCCSGO_WingmanIntroTerroristPosition::SetParent(GCCSGO_WingmanIntroCharacterPosition value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSGO_WingmanIntroTerroristPosition::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCCSGO_WingmanIntroTerroristPosition(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCCSGO_WingmanIntroTerroristPosition>("CCSGO_WingmanIntroTerroristPosition")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCCSGO_WingmanIntroTerroristPosition::GetParent, &GCCSGO_WingmanIntroTerroristPosition::SetParent)
        .addFunction("ToPtr", &GCCSGO_WingmanIntroTerroristPosition::ToPtr)
        .addFunction("IsValid", &GCCSGO_WingmanIntroTerroristPosition::IsValid)
        .endClass();
}
GCTriggerDetectExplosion::GCTriggerDetectExplosion(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCTriggerDetectExplosion::GCTriggerDetectExplosion(void *ptr) {
    m_ptr = ptr;
}
GCEntityIOOutput GCTriggerDetectExplosion::GetOnDetectedExplosion() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTriggerDetectExplosion->OnDetectedExplosion(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CTriggerDetectExplosion", "m_OnDetectedExplosion"));
    return value;
}
void GCTriggerDetectExplosion::SetOnDetectedExplosion(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTriggerDetectExplosion->OnDetectedExplosion(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnDetectedExplosion' is not possible.\n");
}
void* GCTriggerDetectExplosion::GetPtr() {
    return m_ptr;
}
std::string GCTriggerDetectExplosion::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCTriggerDetectExplosion::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseTrigger GCTriggerDetectExplosion::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTriggerDetectExplosion::GetParent(ptr=%p)", m_ptr));
    GCBaseTrigger value(m_ptr);
    return value;
}
void GCTriggerDetectExplosion::SetParent(GCBaseTrigger value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTriggerDetectExplosion::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCTriggerDetectExplosion(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCTriggerDetectExplosion>("CTriggerDetectExplosion")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("OnDetectedExplosion", &GCTriggerDetectExplosion::GetOnDetectedExplosion, &GCTriggerDetectExplosion::SetOnDetectedExplosion)
        .addProperty("Parent", &GCTriggerDetectExplosion::GetParent, &GCTriggerDetectExplosion::SetParent)
        .addFunction("ToPtr", &GCTriggerDetectExplosion::ToPtr)
        .addFunction("IsValid", &GCTriggerDetectExplosion::IsValid)
        .endClass();
}
GCSoundStackSave::GCSoundStackSave(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCSoundStackSave::GCSoundStackSave(void *ptr) {
    m_ptr = ptr;
}
std::string GCSoundStackSave::GetStackName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSoundStackSave->StackName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSoundStackSave", "m_iszStackName").String();
}
void GCSoundStackSave::SetStackName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSoundStackSave->StackName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSoundStackSave", "m_iszStackName", false, CUtlSymbolLarge(value.c_str()));
}
void* GCSoundStackSave::GetPtr() {
    return m_ptr;
}
std::string GCSoundStackSave::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCSoundStackSave::IsValid() {
    return (m_ptr != nullptr);
}
GCLogicalEntity GCSoundStackSave::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSoundStackSave::GetParent(ptr=%p)", m_ptr));
    GCLogicalEntity value(m_ptr);
    return value;
}
void GCSoundStackSave::SetParent(GCLogicalEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSoundStackSave::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCSoundStackSave(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCSoundStackSave>("CSoundStackSave")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("StackName", &GCSoundStackSave::GetStackName, &GCSoundStackSave::SetStackName)
        .addProperty("Parent", &GCSoundStackSave::GetParent, &GCSoundStackSave::SetParent)
        .addFunction("ToPtr", &GCSoundStackSave::ToPtr)
        .addFunction("IsValid", &GCSoundStackSave::IsValid)
        .endClass();
}
GConstraintSoundInfo::GConstraintSoundInfo(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GConstraintSoundInfo::GConstraintSoundInfo(void *ptr) {
    m_ptr = ptr;
}
GVelocitySampler GConstraintSoundInfo::GetSampler() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ConstraintSoundInfo->Sampler(ptr=%p)", m_ptr));
    GVelocitySampler value(GetSchemaPtr(m_ptr, "ConstraintSoundInfo", "m_vSampler"));
    return value;
}
void GConstraintSoundInfo::SetSampler(GVelocitySampler value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ConstraintSoundInfo->Sampler(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Sampler' is not possible.\n");
}
GSimpleConstraintSoundProfile GConstraintSoundInfo::GetSoundProfile() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ConstraintSoundInfo->SoundProfile(ptr=%p)", m_ptr));
    GSimpleConstraintSoundProfile value(GetSchemaPtr(m_ptr, "ConstraintSoundInfo", "m_soundProfile"));
    return value;
}
void GConstraintSoundInfo::SetSoundProfile(GSimpleConstraintSoundProfile value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ConstraintSoundInfo->SoundProfile(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'SoundProfile' is not possible.\n");
}
Vector GConstraintSoundInfo::GetForwardAxis() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ConstraintSoundInfo->ForwardAxis(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "ConstraintSoundInfo", "m_forwardAxis");
}
void GConstraintSoundInfo::SetForwardAxis(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ConstraintSoundInfo->ForwardAxis(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "ConstraintSoundInfo", "m_forwardAxis", false, value);
}
std::string GConstraintSoundInfo::GetTravelSoundFwd() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ConstraintSoundInfo->TravelSoundFwd(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "ConstraintSoundInfo", "m_iszTravelSoundFwd").String();
}
void GConstraintSoundInfo::SetTravelSoundFwd(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ConstraintSoundInfo->TravelSoundFwd(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "ConstraintSoundInfo", "m_iszTravelSoundFwd", false, CUtlSymbolLarge(value.c_str()));
}
std::string GConstraintSoundInfo::GetTravelSoundBack() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ConstraintSoundInfo->TravelSoundBack(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "ConstraintSoundInfo", "m_iszTravelSoundBack").String();
}
void GConstraintSoundInfo::SetTravelSoundBack(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ConstraintSoundInfo->TravelSoundBack(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "ConstraintSoundInfo", "m_iszTravelSoundBack", false, CUtlSymbolLarge(value.c_str()));
}
std::vector<CUtlSymbolLarge> GConstraintSoundInfo::GetReversalSounds() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ConstraintSoundInfo->ReversalSounds(ptr=%p,size=3)", m_ptr));
    CUtlSymbolLarge* outValue = (CUtlSymbolLarge*)GetSchemaPtr(m_ptr, "ConstraintSoundInfo", "m_iszReversalSounds"); std::vector<CUtlSymbolLarge> ret; for(int i = 0; i < 3; i++) { ret.push_back(outValue[i]); } return ret;
}
void GConstraintSoundInfo::SetReversalSounds(std::vector<CUtlSymbolLarge> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ConstraintSoundInfo->ReversalSounds(ptr=%p,size=3)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ReversalSounds' is not possible.\n");
}
bool GConstraintSoundInfo::GetPlayTravelSound() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ConstraintSoundInfo->PlayTravelSound(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "ConstraintSoundInfo", "m_bPlayTravelSound");
}
void GConstraintSoundInfo::SetPlayTravelSound(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ConstraintSoundInfo->PlayTravelSound(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "ConstraintSoundInfo", "m_bPlayTravelSound", false, value);
}
bool GConstraintSoundInfo::GetPlayReversalSound() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ConstraintSoundInfo->PlayReversalSound(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "ConstraintSoundInfo", "m_bPlayReversalSound");
}
void GConstraintSoundInfo::SetPlayReversalSound(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ConstraintSoundInfo->PlayReversalSound(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "ConstraintSoundInfo", "m_bPlayReversalSound", false, value);
}
void* GConstraintSoundInfo::GetPtr() {
    return m_ptr;
}
std::string GConstraintSoundInfo::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GConstraintSoundInfo::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassConstraintSoundInfo(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GConstraintSoundInfo>("ConstraintSoundInfo")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Sampler", &GConstraintSoundInfo::GetSampler, &GConstraintSoundInfo::SetSampler)
        .addProperty("SoundProfile", &GConstraintSoundInfo::GetSoundProfile, &GConstraintSoundInfo::SetSoundProfile)
        .addProperty("ForwardAxis", &GConstraintSoundInfo::GetForwardAxis, &GConstraintSoundInfo::SetForwardAxis)
        .addProperty("TravelSoundFwd", &GConstraintSoundInfo::GetTravelSoundFwd, &GConstraintSoundInfo::SetTravelSoundFwd)
        .addProperty("TravelSoundBack", &GConstraintSoundInfo::GetTravelSoundBack, &GConstraintSoundInfo::SetTravelSoundBack)
        .addProperty("ReversalSounds", &GConstraintSoundInfo::GetReversalSounds, &GConstraintSoundInfo::SetReversalSounds)
        .addProperty("PlayTravelSound", &GConstraintSoundInfo::GetPlayTravelSound, &GConstraintSoundInfo::SetPlayTravelSound)
        .addProperty("PlayReversalSound", &GConstraintSoundInfo::GetPlayReversalSound, &GConstraintSoundInfo::SetPlayReversalSound)
        .addFunction("ToPtr", &GConstraintSoundInfo::ToPtr)
        .addFunction("IsValid", &GConstraintSoundInfo::IsValid)
        .endClass();
}
GCSingleplayRules::GCSingleplayRules(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCSingleplayRules::GCSingleplayRules(void *ptr) {
    m_ptr = ptr;
}
bool GCSingleplayRules::GetSinglePlayerGameEnding() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSingleplayRules->SinglePlayerGameEnding(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CSingleplayRules", "m_bSinglePlayerGameEnding");
}
void GCSingleplayRules::SetSinglePlayerGameEnding(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSingleplayRules->SinglePlayerGameEnding(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSingleplayRules", "m_bSinglePlayerGameEnding", false, value);
}
void* GCSingleplayRules::GetPtr() {
    return m_ptr;
}
std::string GCSingleplayRules::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCSingleplayRules::IsValid() {
    return (m_ptr != nullptr);
}
GCGameRules GCSingleplayRules::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSingleplayRules::GetParent(ptr=%p)", m_ptr));
    GCGameRules value(m_ptr);
    return value;
}
void GCSingleplayRules::SetParent(GCGameRules value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSingleplayRules::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCSingleplayRules(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCSingleplayRules>("CSingleplayRules")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("SinglePlayerGameEnding", &GCSingleplayRules::GetSinglePlayerGameEnding, &GCSingleplayRules::SetSinglePlayerGameEnding)
        .addProperty("Parent", &GCSingleplayRules::GetParent, &GCSingleplayRules::SetParent)
        .addFunction("ToPtr", &GCSingleplayRules::ToPtr)
        .addFunction("IsValid", &GCSingleplayRules::IsValid)
        .endClass();
}
GCFilterProximity::GCFilterProximity(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCFilterProximity::GCFilterProximity(void *ptr) {
    m_ptr = ptr;
}
float GCFilterProximity::GetRadius() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFilterProximity->Radius(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CFilterProximity", "m_flRadius");
}
void GCFilterProximity::SetRadius(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFilterProximity->Radius(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFilterProximity", "m_flRadius", false, value);
}
void* GCFilterProximity::GetPtr() {
    return m_ptr;
}
std::string GCFilterProximity::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCFilterProximity::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseFilter GCFilterProximity::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFilterProximity::GetParent(ptr=%p)", m_ptr));
    GCBaseFilter value(m_ptr);
    return value;
}
void GCFilterProximity::SetParent(GCBaseFilter value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFilterProximity::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCFilterProximity(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCFilterProximity>("CFilterProximity")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Radius", &GCFilterProximity::GetRadius, &GCFilterProximity::SetRadius)
        .addProperty("Parent", &GCFilterProximity::GetParent, &GCFilterProximity::SetParent)
        .addFunction("ToPtr", &GCFilterProximity::ToPtr)
        .addFunction("IsValid", &GCFilterProximity::IsValid)
        .endClass();
}
GCEconWearable::GCEconWearable(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCEconWearable::GCEconWearable(void *ptr) {
    m_ptr = ptr;
}
int32_t GCEconWearable::GetForceSkin() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEconWearable->ForceSkin(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CEconWearable", "m_nForceSkin");
}
void GCEconWearable::SetForceSkin(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEconWearable->ForceSkin(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEconWearable", "m_nForceSkin", false, value);
}
bool GCEconWearable::GetAlwaysAllow() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEconWearable->AlwaysAllow(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CEconWearable", "m_bAlwaysAllow");
}
void GCEconWearable::SetAlwaysAllow(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEconWearable->AlwaysAllow(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEconWearable", "m_bAlwaysAllow", false, value);
}
void* GCEconWearable::GetPtr() {
    return m_ptr;
}
std::string GCEconWearable::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCEconWearable::IsValid() {
    return (m_ptr != nullptr);
}
GCEconEntity GCEconWearable::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CEconWearable::GetParent(ptr=%p)", m_ptr));
    GCEconEntity value(m_ptr);
    return value;
}
void GCEconWearable::SetParent(GCEconEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CEconWearable::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCEconWearable(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCEconWearable>("CEconWearable")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("ForceSkin", &GCEconWearable::GetForceSkin, &GCEconWearable::SetForceSkin)
        .addProperty("AlwaysAllow", &GCEconWearable::GetAlwaysAllow, &GCEconWearable::SetAlwaysAllow)
        .addProperty("Parent", &GCEconWearable::GetParent, &GCEconWearable::SetParent)
        .addFunction("ToPtr", &GCEconWearable::ToPtr)
        .addFunction("IsValid", &GCEconWearable::IsValid)
        .endClass();
}
GCCSPlayer_ItemServices::GCCSPlayer_ItemServices(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCCSPlayer_ItemServices::GCCSPlayer_ItemServices(void *ptr) {
    m_ptr = ptr;
}
bool GCCSPlayer_ItemServices::GetHasDefuser() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_ItemServices->HasDefuser(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_ItemServices", "m_bHasDefuser");
}
void GCCSPlayer_ItemServices::SetHasDefuser(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_ItemServices->HasDefuser(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_ItemServices", "m_bHasDefuser", false, value);
}
bool GCCSPlayer_ItemServices::GetHasHelmet() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_ItemServices->HasHelmet(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_ItemServices", "m_bHasHelmet");
}
void GCCSPlayer_ItemServices::SetHasHelmet(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_ItemServices->HasHelmet(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_ItemServices", "m_bHasHelmet", false, value);
}
bool GCCSPlayer_ItemServices::GetHasHeavyArmor() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_ItemServices->HasHeavyArmor(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_ItemServices", "m_bHasHeavyArmor");
}
void GCCSPlayer_ItemServices::SetHasHeavyArmor(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_ItemServices->HasHeavyArmor(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_ItemServices", "m_bHasHeavyArmor", false, value);
}
void* GCCSPlayer_ItemServices::GetPtr() {
    return m_ptr;
}
std::string GCCSPlayer_ItemServices::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCCSPlayer_ItemServices::IsValid() {
    return (m_ptr != nullptr);
}
GCPlayer_ItemServices GCCSPlayer_ItemServices::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSPlayer_ItemServices::GetParent(ptr=%p)", m_ptr));
    GCPlayer_ItemServices value(m_ptr);
    return value;
}
void GCCSPlayer_ItemServices::SetParent(GCPlayer_ItemServices value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSPlayer_ItemServices::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCCSPlayer_ItemServices(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCCSPlayer_ItemServices>("CCSPlayer_ItemServices")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("HasDefuser", &GCCSPlayer_ItemServices::GetHasDefuser, &GCCSPlayer_ItemServices::SetHasDefuser)
        .addProperty("HasHelmet", &GCCSPlayer_ItemServices::GetHasHelmet, &GCCSPlayer_ItemServices::SetHasHelmet)
        .addProperty("HasHeavyArmor", &GCCSPlayer_ItemServices::GetHasHeavyArmor, &GCCSPlayer_ItemServices::SetHasHeavyArmor)
        .addProperty("Parent", &GCCSPlayer_ItemServices::GetParent, &GCCSPlayer_ItemServices::SetParent)
        .addFunction("ToPtr", &GCCSPlayer_ItemServices::ToPtr)
        .addFunction("IsValid", &GCCSPlayer_ItemServices::IsValid)
        .endClass();
}
GCFuncConveyor::GCFuncConveyor(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCFuncConveyor::GCFuncConveyor(void *ptr) {
    m_ptr = ptr;
}
std::string GCFuncConveyor::GetConveyorModels() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncConveyor->ConveyorModels(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncConveyor", "m_szConveyorModels").String();
}
void GCFuncConveyor::SetConveyorModels(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncConveyor->ConveyorModels(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncConveyor", "m_szConveyorModels", false, CUtlSymbolLarge(value.c_str()));
}
float GCFuncConveyor::GetTransitionDurationSeconds() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncConveyor->TransitionDurationSeconds(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CFuncConveyor", "m_flTransitionDurationSeconds");
}
void GCFuncConveyor::SetTransitionDurationSeconds(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncConveyor->TransitionDurationSeconds(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncConveyor", "m_flTransitionDurationSeconds", false, value);
}
QAngle GCFuncConveyor::GetMoveEntitySpace() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncConveyor->MoveEntitySpace(ptr=%p)", m_ptr));
    return GetSchemaValue<QAngle>(m_ptr, "CFuncConveyor", "m_angMoveEntitySpace");
}
void GCFuncConveyor::SetMoveEntitySpace(QAngle value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncConveyor->MoveEntitySpace(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncConveyor", "m_angMoveEntitySpace", false, value);
}
Vector GCFuncConveyor::GetMoveDirEntitySpace() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncConveyor->MoveDirEntitySpace(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CFuncConveyor", "m_vecMoveDirEntitySpace");
}
void GCFuncConveyor::SetMoveDirEntitySpace(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncConveyor->MoveDirEntitySpace(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncConveyor", "m_vecMoveDirEntitySpace", false, value);
}
float GCFuncConveyor::GetTargetSpeed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncConveyor->TargetSpeed(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CFuncConveyor", "m_flTargetSpeed");
}
void GCFuncConveyor::SetTargetSpeed(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncConveyor->TargetSpeed(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncConveyor", "m_flTargetSpeed", false, value);
}
int32 GCFuncConveyor::GetTransitionStartTick() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncConveyor->TransitionStartTick(ptr=%p)", m_ptr));
    return GetSchemaValue<int32>(m_ptr, "CFuncConveyor", "m_nTransitionStartTick");
}
void GCFuncConveyor::SetTransitionStartTick(int32 value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncConveyor->TransitionStartTick(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncConveyor", "m_nTransitionStartTick", false, value);
}
int32_t GCFuncConveyor::GetTransitionDurationTicks() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncConveyor->TransitionDurationTicks(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CFuncConveyor", "m_nTransitionDurationTicks");
}
void GCFuncConveyor::SetTransitionDurationTicks(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncConveyor->TransitionDurationTicks(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncConveyor", "m_nTransitionDurationTicks", false, value);
}
float GCFuncConveyor::GetTransitionStartSpeed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncConveyor->TransitionStartSpeed(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CFuncConveyor", "m_flTransitionStartSpeed");
}
void GCFuncConveyor::SetTransitionStartSpeed(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncConveyor->TransitionStartSpeed(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncConveyor", "m_flTransitionStartSpeed", false, value);
}
std::vector<GCBaseEntity> GCFuncConveyor::GetConveyorModels1() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncConveyor->ConveyorModels1(ptr=%p)", m_ptr));
    CUtlVector<CHandle<CEntityInstance>>* vec = GetSchemaValue<CUtlVector<CHandle<CEntityInstance>>*>(m_ptr, "CFuncConveyor", "m_hConveyorModels"); 
    std::vector<GCBaseEntity> outVec; 
    for(int i = 0; i < vec->Count(); i++) { 
        outVec.push_back(GCBaseEntity((void*)(vec->Element(i).Get()))); 
    } 
    return outVec;
}
void GCFuncConveyor::SetConveyorModels1(std::vector<GCBaseEntity> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncConveyor->ConveyorModels1(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ConveyorModels1' is not possible.\n");
}
void* GCFuncConveyor::GetPtr() {
    return m_ptr;
}
std::string GCFuncConveyor::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCFuncConveyor::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseModelEntity GCFuncConveyor::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFuncConveyor::GetParent(ptr=%p)", m_ptr));
    GCBaseModelEntity value(m_ptr);
    return value;
}
void GCFuncConveyor::SetParent(GCBaseModelEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFuncConveyor::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCFuncConveyor(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCFuncConveyor>("CFuncConveyor")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("ConveyorModels", &GCFuncConveyor::GetConveyorModels, &GCFuncConveyor::SetConveyorModels)
        .addProperty("TransitionDurationSeconds", &GCFuncConveyor::GetTransitionDurationSeconds, &GCFuncConveyor::SetTransitionDurationSeconds)
        .addProperty("MoveEntitySpace", &GCFuncConveyor::GetMoveEntitySpace, &GCFuncConveyor::SetMoveEntitySpace)
        .addProperty("MoveDirEntitySpace", &GCFuncConveyor::GetMoveDirEntitySpace, &GCFuncConveyor::SetMoveDirEntitySpace)
        .addProperty("TargetSpeed", &GCFuncConveyor::GetTargetSpeed, &GCFuncConveyor::SetTargetSpeed)
        .addProperty("TransitionStartTick", &GCFuncConveyor::GetTransitionStartTick, &GCFuncConveyor::SetTransitionStartTick)
        .addProperty("TransitionDurationTicks", &GCFuncConveyor::GetTransitionDurationTicks, &GCFuncConveyor::SetTransitionDurationTicks)
        .addProperty("TransitionStartSpeed", &GCFuncConveyor::GetTransitionStartSpeed, &GCFuncConveyor::SetTransitionStartSpeed)
        .addProperty("ConveyorModels1", &GCFuncConveyor::GetConveyorModels1, &GCFuncConveyor::SetConveyorModels1)
        .addProperty("Parent", &GCFuncConveyor::GetParent, &GCFuncConveyor::SetParent)
        .addFunction("ToPtr", &GCFuncConveyor::ToPtr)
        .addFunction("IsValid", &GCFuncConveyor::IsValid)
        .endClass();
}
GCWeaponMag7::GCWeaponMag7(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCWeaponMag7::GCWeaponMag7(void *ptr) {
    m_ptr = ptr;
}
void* GCWeaponMag7::GetPtr() {
    return m_ptr;
}
std::string GCWeaponMag7::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCWeaponMag7::IsValid() {
    return (m_ptr != nullptr);
}
GCCSWeaponBaseGun GCWeaponMag7::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponMag7::GetParent(ptr=%p)", m_ptr));
    GCCSWeaponBaseGun value(m_ptr);
    return value;
}
void GCWeaponMag7::SetParent(GCCSWeaponBaseGun value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponMag7::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCWeaponMag7(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCWeaponMag7>("CWeaponMag7")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCWeaponMag7::GetParent, &GCWeaponMag7::SetParent)
        .addFunction("ToPtr", &GCWeaponMag7::ToPtr)
        .addFunction("IsValid", &GCWeaponMag7::IsValid)
        .endClass();
}
GCMathCounter::GCMathCounter(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCMathCounter::GCMathCounter(void *ptr) {
    m_ptr = ptr;
}
float GCMathCounter::GetMin() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMathCounter->Min(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CMathCounter", "m_flMin");
}
void GCMathCounter::SetMin(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMathCounter->Min(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMathCounter", "m_flMin", false, value);
}
float GCMathCounter::GetMax() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMathCounter->Max(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CMathCounter", "m_flMax");
}
void GCMathCounter::SetMax(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMathCounter->Max(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMathCounter", "m_flMax", false, value);
}
bool GCMathCounter::GetHitMin() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMathCounter->HitMin(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CMathCounter", "m_bHitMin");
}
void GCMathCounter::SetHitMin(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMathCounter->HitMin(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMathCounter", "m_bHitMin", false, value);
}
bool GCMathCounter::GetHitMax() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMathCounter->HitMax(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CMathCounter", "m_bHitMax");
}
void GCMathCounter::SetHitMax(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMathCounter->HitMax(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMathCounter", "m_bHitMax", false, value);
}
bool GCMathCounter::GetDisabled() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMathCounter->Disabled(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CMathCounter", "m_bDisabled");
}
void GCMathCounter::SetDisabled(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMathCounter->Disabled(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMathCounter", "m_bDisabled", false, value);
}
GCEntityIOOutput GCMathCounter::GetOnHitMin() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMathCounter->OnHitMin(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CMathCounter", "m_OnHitMin"));
    return value;
}
void GCMathCounter::SetOnHitMin(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMathCounter->OnHitMin(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnHitMin' is not possible.\n");
}
GCEntityIOOutput GCMathCounter::GetOnHitMax() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMathCounter->OnHitMax(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CMathCounter", "m_OnHitMax"));
    return value;
}
void GCMathCounter::SetOnHitMax(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMathCounter->OnHitMax(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnHitMax' is not possible.\n");
}
GCEntityIOOutput GCMathCounter::GetOnChangedFromMin() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMathCounter->OnChangedFromMin(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CMathCounter", "m_OnChangedFromMin"));
    return value;
}
void GCMathCounter::SetOnChangedFromMin(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMathCounter->OnChangedFromMin(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnChangedFromMin' is not possible.\n");
}
GCEntityIOOutput GCMathCounter::GetOnChangedFromMax() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMathCounter->OnChangedFromMax(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CMathCounter", "m_OnChangedFromMax"));
    return value;
}
void GCMathCounter::SetOnChangedFromMax(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMathCounter->OnChangedFromMax(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnChangedFromMax' is not possible.\n");
}
void* GCMathCounter::GetPtr() {
    return m_ptr;
}
std::string GCMathCounter::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCMathCounter::IsValid() {
    return (m_ptr != nullptr);
}
GCLogicalEntity GCMathCounter::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CMathCounter::GetParent(ptr=%p)", m_ptr));
    GCLogicalEntity value(m_ptr);
    return value;
}
void GCMathCounter::SetParent(GCLogicalEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CMathCounter::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCMathCounter(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCMathCounter>("CMathCounter")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Min", &GCMathCounter::GetMin, &GCMathCounter::SetMin)
        .addProperty("Max", &GCMathCounter::GetMax, &GCMathCounter::SetMax)
        .addProperty("HitMin", &GCMathCounter::GetHitMin, &GCMathCounter::SetHitMin)
        .addProperty("HitMax", &GCMathCounter::GetHitMax, &GCMathCounter::SetHitMax)
        .addProperty("Disabled", &GCMathCounter::GetDisabled, &GCMathCounter::SetDisabled)
        .addProperty("OnHitMin", &GCMathCounter::GetOnHitMin, &GCMathCounter::SetOnHitMin)
        .addProperty("OnHitMax", &GCMathCounter::GetOnHitMax, &GCMathCounter::SetOnHitMax)
        .addProperty("OnChangedFromMin", &GCMathCounter::GetOnChangedFromMin, &GCMathCounter::SetOnChangedFromMin)
        .addProperty("OnChangedFromMax", &GCMathCounter::GetOnChangedFromMax, &GCMathCounter::SetOnChangedFromMax)
        .addProperty("Parent", &GCMathCounter::GetParent, &GCMathCounter::SetParent)
        .addFunction("ToPtr", &GCMathCounter::ToPtr)
        .addFunction("IsValid", &GCMathCounter::IsValid)
        .endClass();
}
GCInfoWorldLayer::GCInfoWorldLayer(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCInfoWorldLayer::GCInfoWorldLayer(void *ptr) {
    m_ptr = ptr;
}
GCEntityIOOutput GCInfoWorldLayer::GetOutputOnEntitiesSpawned() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInfoWorldLayer->OutputOnEntitiesSpawned(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CInfoWorldLayer", "m_pOutputOnEntitiesSpawned"));
    return value;
}
void GCInfoWorldLayer::SetOutputOnEntitiesSpawned(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInfoWorldLayer->OutputOnEntitiesSpawned(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OutputOnEntitiesSpawned' is not possible.\n");
}
std::string GCInfoWorldLayer::GetWorldName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInfoWorldLayer->WorldName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CInfoWorldLayer", "m_worldName").String();
}
void GCInfoWorldLayer::SetWorldName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInfoWorldLayer->WorldName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInfoWorldLayer", "m_worldName", false, CUtlSymbolLarge(value.c_str()));
}
std::string GCInfoWorldLayer::GetLayerName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInfoWorldLayer->LayerName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CInfoWorldLayer", "m_layerName").String();
}
void GCInfoWorldLayer::SetLayerName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInfoWorldLayer->LayerName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInfoWorldLayer", "m_layerName", false, CUtlSymbolLarge(value.c_str()));
}
bool GCInfoWorldLayer::GetWorldLayerVisible() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInfoWorldLayer->WorldLayerVisible(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CInfoWorldLayer", "m_bWorldLayerVisible");
}
void GCInfoWorldLayer::SetWorldLayerVisible(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInfoWorldLayer->WorldLayerVisible(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInfoWorldLayer", "m_bWorldLayerVisible", false, value);
}
bool GCInfoWorldLayer::GetEntitiesSpawned() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInfoWorldLayer->EntitiesSpawned(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CInfoWorldLayer", "m_bEntitiesSpawned");
}
void GCInfoWorldLayer::SetEntitiesSpawned(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInfoWorldLayer->EntitiesSpawned(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInfoWorldLayer", "m_bEntitiesSpawned", false, value);
}
bool GCInfoWorldLayer::GetCreateAsChildSpawnGroup() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInfoWorldLayer->CreateAsChildSpawnGroup(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CInfoWorldLayer", "m_bCreateAsChildSpawnGroup");
}
void GCInfoWorldLayer::SetCreateAsChildSpawnGroup(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInfoWorldLayer->CreateAsChildSpawnGroup(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInfoWorldLayer", "m_bCreateAsChildSpawnGroup", false, value);
}
uint32_t GCInfoWorldLayer::GetLayerSpawnGroup() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CInfoWorldLayer->LayerSpawnGroup(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CInfoWorldLayer", "m_hLayerSpawnGroup");
}
void GCInfoWorldLayer::SetLayerSpawnGroup(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CInfoWorldLayer->LayerSpawnGroup(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CInfoWorldLayer", "m_hLayerSpawnGroup", false, value);
}
void* GCInfoWorldLayer::GetPtr() {
    return m_ptr;
}
std::string GCInfoWorldLayer::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCInfoWorldLayer::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseEntity GCInfoWorldLayer::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CInfoWorldLayer::GetParent(ptr=%p)", m_ptr));
    GCBaseEntity value(m_ptr);
    return value;
}
void GCInfoWorldLayer::SetParent(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CInfoWorldLayer::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCInfoWorldLayer(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCInfoWorldLayer>("CInfoWorldLayer")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("OutputOnEntitiesSpawned", &GCInfoWorldLayer::GetOutputOnEntitiesSpawned, &GCInfoWorldLayer::SetOutputOnEntitiesSpawned)
        .addProperty("WorldName", &GCInfoWorldLayer::GetWorldName, &GCInfoWorldLayer::SetWorldName)
        .addProperty("LayerName", &GCInfoWorldLayer::GetLayerName, &GCInfoWorldLayer::SetLayerName)
        .addProperty("WorldLayerVisible", &GCInfoWorldLayer::GetWorldLayerVisible, &GCInfoWorldLayer::SetWorldLayerVisible)
        .addProperty("EntitiesSpawned", &GCInfoWorldLayer::GetEntitiesSpawned, &GCInfoWorldLayer::SetEntitiesSpawned)
        .addProperty("CreateAsChildSpawnGroup", &GCInfoWorldLayer::GetCreateAsChildSpawnGroup, &GCInfoWorldLayer::SetCreateAsChildSpawnGroup)
        .addProperty("LayerSpawnGroup", &GCInfoWorldLayer::GetLayerSpawnGroup, &GCInfoWorldLayer::SetLayerSpawnGroup)
        .addProperty("Parent", &GCInfoWorldLayer::GetParent, &GCInfoWorldLayer::SetParent)
        .addFunction("ToPtr", &GCInfoWorldLayer::ToPtr)
        .addFunction("IsValid", &GCInfoWorldLayer::IsValid)
        .endClass();
}
GCRectLight::GCRectLight(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCRectLight::GCRectLight(void *ptr) {
    m_ptr = ptr;
}
bool GCRectLight::GetShowLight() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CRectLight->ShowLight(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CRectLight", "m_bShowLight");
}
void GCRectLight::SetShowLight(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CRectLight->ShowLight(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CRectLight", "m_bShowLight", false, value);
}
void* GCRectLight::GetPtr() {
    return m_ptr;
}
std::string GCRectLight::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCRectLight::IsValid() {
    return (m_ptr != nullptr);
}
GCBarnLight GCRectLight::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CRectLight::GetParent(ptr=%p)", m_ptr));
    GCBarnLight value(m_ptr);
    return value;
}
void GCRectLight::SetParent(GCBarnLight value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CRectLight::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCRectLight(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCRectLight>("CRectLight")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("ShowLight", &GCRectLight::GetShowLight, &GCRectLight::SetShowLight)
        .addProperty("Parent", &GCRectLight::GetParent, &GCRectLight::SetParent)
        .addFunction("ToPtr", &GCRectLight::ToPtr)
        .addFunction("IsValid", &GCRectLight::IsValid)
        .endClass();
}
GCCSGO_TeamSelectCharacterPosition::GCCSGO_TeamSelectCharacterPosition(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCCSGO_TeamSelectCharacterPosition::GCCSGO_TeamSelectCharacterPosition(void *ptr) {
    m_ptr = ptr;
}
void* GCCSGO_TeamSelectCharacterPosition::GetPtr() {
    return m_ptr;
}
std::string GCCSGO_TeamSelectCharacterPosition::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCCSGO_TeamSelectCharacterPosition::IsValid() {
    return (m_ptr != nullptr);
}
GCCSGO_TeamPreviewCharacterPosition GCCSGO_TeamSelectCharacterPosition::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSGO_TeamSelectCharacterPosition::GetParent(ptr=%p)", m_ptr));
    GCCSGO_TeamPreviewCharacterPosition value(m_ptr);
    return value;
}
void GCCSGO_TeamSelectCharacterPosition::SetParent(GCCSGO_TeamPreviewCharacterPosition value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSGO_TeamSelectCharacterPosition::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCCSGO_TeamSelectCharacterPosition(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCCSGO_TeamSelectCharacterPosition>("CCSGO_TeamSelectCharacterPosition")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCCSGO_TeamSelectCharacterPosition::GetParent, &GCCSGO_TeamSelectCharacterPosition::SetParent)
        .addFunction("ToPtr", &GCCSGO_TeamSelectCharacterPosition::ToPtr)
        .addFunction("IsValid", &GCCSGO_TeamSelectCharacterPosition::IsValid)
        .endClass();
}
GCBaseDoor::GCBaseDoor(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCBaseDoor::GCBaseDoor(void *ptr) {
    m_ptr = ptr;
}
QAngle GCBaseDoor::GetMoveEntitySpace() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseDoor->MoveEntitySpace(ptr=%p)", m_ptr));
    return GetSchemaValue<QAngle>(m_ptr, "CBaseDoor", "m_angMoveEntitySpace");
}
void GCBaseDoor::SetMoveEntitySpace(QAngle value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseDoor->MoveEntitySpace(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseDoor", "m_angMoveEntitySpace", false, value);
}
Vector GCBaseDoor::GetMoveDirParentSpace() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseDoor->MoveDirParentSpace(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CBaseDoor", "m_vecMoveDirParentSpace");
}
void GCBaseDoor::SetMoveDirParentSpace(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseDoor->MoveDirParentSpace(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseDoor", "m_vecMoveDirParentSpace", false, value);
}
Glocksound_t GCBaseDoor::GetLs() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseDoor->Ls(ptr=%p)", m_ptr));
    Glocksound_t value(GetSchemaPtr(m_ptr, "CBaseDoor", "m_ls"));
    return value;
}
void GCBaseDoor::SetLs(Glocksound_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseDoor->Ls(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Ls' is not possible.\n");
}
bool GCBaseDoor::GetForceClosed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseDoor->ForceClosed(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CBaseDoor", "m_bForceClosed");
}
void GCBaseDoor::SetForceClosed(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseDoor->ForceClosed(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseDoor", "m_bForceClosed", false, value);
}
bool GCBaseDoor::GetDoorGroup() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseDoor->DoorGroup(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CBaseDoor", "m_bDoorGroup");
}
void GCBaseDoor::SetDoorGroup(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseDoor->DoorGroup(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseDoor", "m_bDoorGroup", false, value);
}
bool GCBaseDoor::GetLocked() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseDoor->Locked(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CBaseDoor", "m_bLocked");
}
void GCBaseDoor::SetLocked(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseDoor->Locked(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseDoor", "m_bLocked", false, value);
}
bool GCBaseDoor::GetIgnoreDebris() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseDoor->IgnoreDebris(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CBaseDoor", "m_bIgnoreDebris");
}
void GCBaseDoor::SetIgnoreDebris(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseDoor->IgnoreDebris(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseDoor", "m_bIgnoreDebris", false, value);
}
uint64_t GCBaseDoor::GetSpawnPosition() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseDoor->SpawnPosition(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CBaseDoor", "m_eSpawnPosition");
}
void GCBaseDoor::SetSpawnPosition(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseDoor->SpawnPosition(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseDoor", "m_eSpawnPosition", false, value);
}
float GCBaseDoor::GetBlockDamage() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseDoor->BlockDamage(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CBaseDoor", "m_flBlockDamage");
}
void GCBaseDoor::SetBlockDamage(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseDoor->BlockDamage(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseDoor", "m_flBlockDamage", false, value);
}
std::string GCBaseDoor::GetNoiseMoving() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseDoor->NoiseMoving(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBaseDoor", "m_NoiseMoving").String();
}
void GCBaseDoor::SetNoiseMoving(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseDoor->NoiseMoving(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseDoor", "m_NoiseMoving", false, CUtlSymbolLarge(value.c_str()));
}
std::string GCBaseDoor::GetNoiseArrived() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseDoor->NoiseArrived(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBaseDoor", "m_NoiseArrived").String();
}
void GCBaseDoor::SetNoiseArrived(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseDoor->NoiseArrived(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseDoor", "m_NoiseArrived", false, CUtlSymbolLarge(value.c_str()));
}
std::string GCBaseDoor::GetNoiseMovingClosed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseDoor->NoiseMovingClosed(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBaseDoor", "m_NoiseMovingClosed").String();
}
void GCBaseDoor::SetNoiseMovingClosed(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseDoor->NoiseMovingClosed(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseDoor", "m_NoiseMovingClosed", false, CUtlSymbolLarge(value.c_str()));
}
std::string GCBaseDoor::GetNoiseArrivedClosed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseDoor->NoiseArrivedClosed(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBaseDoor", "m_NoiseArrivedClosed").String();
}
void GCBaseDoor::SetNoiseArrivedClosed(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseDoor->NoiseArrivedClosed(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseDoor", "m_NoiseArrivedClosed", false, CUtlSymbolLarge(value.c_str()));
}
std::string GCBaseDoor::GetChainTarget() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseDoor->ChainTarget(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBaseDoor", "m_ChainTarget").String();
}
void GCBaseDoor::SetChainTarget(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseDoor->ChainTarget(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseDoor", "m_ChainTarget", false, CUtlSymbolLarge(value.c_str()));
}
GCEntityIOOutput GCBaseDoor::GetOnBlockedClosing() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseDoor->OnBlockedClosing(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CBaseDoor", "m_OnBlockedClosing"));
    return value;
}
void GCBaseDoor::SetOnBlockedClosing(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseDoor->OnBlockedClosing(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnBlockedClosing' is not possible.\n");
}
GCEntityIOOutput GCBaseDoor::GetOnBlockedOpening() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseDoor->OnBlockedOpening(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CBaseDoor", "m_OnBlockedOpening"));
    return value;
}
void GCBaseDoor::SetOnBlockedOpening(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseDoor->OnBlockedOpening(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnBlockedOpening' is not possible.\n");
}
GCEntityIOOutput GCBaseDoor::GetOnUnblockedClosing() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseDoor->OnUnblockedClosing(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CBaseDoor", "m_OnUnblockedClosing"));
    return value;
}
void GCBaseDoor::SetOnUnblockedClosing(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseDoor->OnUnblockedClosing(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnUnblockedClosing' is not possible.\n");
}
GCEntityIOOutput GCBaseDoor::GetOnUnblockedOpening() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseDoor->OnUnblockedOpening(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CBaseDoor", "m_OnUnblockedOpening"));
    return value;
}
void GCBaseDoor::SetOnUnblockedOpening(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseDoor->OnUnblockedOpening(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnUnblockedOpening' is not possible.\n");
}
GCEntityIOOutput GCBaseDoor::GetOnFullyClosed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseDoor->OnFullyClosed(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CBaseDoor", "m_OnFullyClosed"));
    return value;
}
void GCBaseDoor::SetOnFullyClosed(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseDoor->OnFullyClosed(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnFullyClosed' is not possible.\n");
}
GCEntityIOOutput GCBaseDoor::GetOnFullyOpen() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseDoor->OnFullyOpen(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CBaseDoor", "m_OnFullyOpen"));
    return value;
}
void GCBaseDoor::SetOnFullyOpen(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseDoor->OnFullyOpen(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnFullyOpen' is not possible.\n");
}
GCEntityIOOutput GCBaseDoor::GetOnClose() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseDoor->OnClose(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CBaseDoor", "m_OnClose"));
    return value;
}
void GCBaseDoor::SetOnClose(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseDoor->OnClose(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnClose' is not possible.\n");
}
GCEntityIOOutput GCBaseDoor::GetOnOpen() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseDoor->OnOpen(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CBaseDoor", "m_OnOpen"));
    return value;
}
void GCBaseDoor::SetOnOpen(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseDoor->OnOpen(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnOpen' is not possible.\n");
}
GCEntityIOOutput GCBaseDoor::GetOnLockedUse() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseDoor->OnLockedUse(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CBaseDoor", "m_OnLockedUse"));
    return value;
}
void GCBaseDoor::SetOnLockedUse(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseDoor->OnLockedUse(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnLockedUse' is not possible.\n");
}
bool GCBaseDoor::GetLoopMoveSound() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseDoor->LoopMoveSound(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CBaseDoor", "m_bLoopMoveSound");
}
void GCBaseDoor::SetLoopMoveSound(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseDoor->LoopMoveSound(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseDoor", "m_bLoopMoveSound", false, value);
}
bool GCBaseDoor::GetCreateNavObstacle() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseDoor->CreateNavObstacle(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CBaseDoor", "m_bCreateNavObstacle");
}
void GCBaseDoor::SetCreateNavObstacle(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseDoor->CreateNavObstacle(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseDoor", "m_bCreateNavObstacle", false, value);
}
bool GCBaseDoor::GetIsChaining() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseDoor->IsChaining(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CBaseDoor", "m_isChaining");
}
void GCBaseDoor::SetIsChaining(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseDoor->IsChaining(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseDoor", "m_isChaining", false, value);
}
bool GCBaseDoor::GetIsUsable() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseDoor->IsUsable(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CBaseDoor", "m_bIsUsable");
}
void GCBaseDoor::SetIsUsable(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseDoor->IsUsable(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseDoor", "m_bIsUsable", false, value);
}
void* GCBaseDoor::GetPtr() {
    return m_ptr;
}
std::string GCBaseDoor::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCBaseDoor::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseToggle GCBaseDoor::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CBaseDoor::GetParent(ptr=%p)", m_ptr));
    GCBaseToggle value(m_ptr);
    return value;
}
void GCBaseDoor::SetParent(GCBaseToggle value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CBaseDoor::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCBaseDoor(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCBaseDoor>("CBaseDoor")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("MoveEntitySpace", &GCBaseDoor::GetMoveEntitySpace, &GCBaseDoor::SetMoveEntitySpace)
        .addProperty("MoveDirParentSpace", &GCBaseDoor::GetMoveDirParentSpace, &GCBaseDoor::SetMoveDirParentSpace)
        .addProperty("Ls", &GCBaseDoor::GetLs, &GCBaseDoor::SetLs)
        .addProperty("ForceClosed", &GCBaseDoor::GetForceClosed, &GCBaseDoor::SetForceClosed)
        .addProperty("DoorGroup", &GCBaseDoor::GetDoorGroup, &GCBaseDoor::SetDoorGroup)
        .addProperty("Locked", &GCBaseDoor::GetLocked, &GCBaseDoor::SetLocked)
        .addProperty("IgnoreDebris", &GCBaseDoor::GetIgnoreDebris, &GCBaseDoor::SetIgnoreDebris)
        .addProperty("SpawnPosition", &GCBaseDoor::GetSpawnPosition, &GCBaseDoor::SetSpawnPosition)
        .addProperty("BlockDamage", &GCBaseDoor::GetBlockDamage, &GCBaseDoor::SetBlockDamage)
        .addProperty("NoiseMoving", &GCBaseDoor::GetNoiseMoving, &GCBaseDoor::SetNoiseMoving)
        .addProperty("NoiseArrived", &GCBaseDoor::GetNoiseArrived, &GCBaseDoor::SetNoiseArrived)
        .addProperty("NoiseMovingClosed", &GCBaseDoor::GetNoiseMovingClosed, &GCBaseDoor::SetNoiseMovingClosed)
        .addProperty("NoiseArrivedClosed", &GCBaseDoor::GetNoiseArrivedClosed, &GCBaseDoor::SetNoiseArrivedClosed)
        .addProperty("ChainTarget", &GCBaseDoor::GetChainTarget, &GCBaseDoor::SetChainTarget)
        .addProperty("OnBlockedClosing", &GCBaseDoor::GetOnBlockedClosing, &GCBaseDoor::SetOnBlockedClosing)
        .addProperty("OnBlockedOpening", &GCBaseDoor::GetOnBlockedOpening, &GCBaseDoor::SetOnBlockedOpening)
        .addProperty("OnUnblockedClosing", &GCBaseDoor::GetOnUnblockedClosing, &GCBaseDoor::SetOnUnblockedClosing)
        .addProperty("OnUnblockedOpening", &GCBaseDoor::GetOnUnblockedOpening, &GCBaseDoor::SetOnUnblockedOpening)
        .addProperty("OnFullyClosed", &GCBaseDoor::GetOnFullyClosed, &GCBaseDoor::SetOnFullyClosed)
        .addProperty("OnFullyOpen", &GCBaseDoor::GetOnFullyOpen, &GCBaseDoor::SetOnFullyOpen)
        .addProperty("OnClose", &GCBaseDoor::GetOnClose, &GCBaseDoor::SetOnClose)
        .addProperty("OnOpen", &GCBaseDoor::GetOnOpen, &GCBaseDoor::SetOnOpen)
        .addProperty("OnLockedUse", &GCBaseDoor::GetOnLockedUse, &GCBaseDoor::SetOnLockedUse)
        .addProperty("LoopMoveSound", &GCBaseDoor::GetLoopMoveSound, &GCBaseDoor::SetLoopMoveSound)
        .addProperty("CreateNavObstacle", &GCBaseDoor::GetCreateNavObstacle, &GCBaseDoor::SetCreateNavObstacle)
        .addProperty("IsChaining", &GCBaseDoor::GetIsChaining, &GCBaseDoor::SetIsChaining)
        .addProperty("IsUsable", &GCBaseDoor::GetIsUsable, &GCBaseDoor::SetIsUsable)
        .addProperty("Parent", &GCBaseDoor::GetParent, &GCBaseDoor::SetParent)
        .addFunction("ToPtr", &GCBaseDoor::ToPtr)
        .addFunction("IsValid", &GCBaseDoor::IsValid)
        .endClass();
}
GCLogicLineToEntity::GCLogicLineToEntity(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCLogicLineToEntity::GCLogicLineToEntity(void *ptr) {
    m_ptr = ptr;
}
std::string GCLogicLineToEntity::GetSourceName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CLogicLineToEntity->SourceName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CLogicLineToEntity", "m_SourceName").String();
}
void GCLogicLineToEntity::SetSourceName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CLogicLineToEntity->SourceName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CLogicLineToEntity", "m_SourceName", false, CUtlSymbolLarge(value.c_str()));
}
GCBaseEntity GCLogicLineToEntity::GetStartEntity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CLogicLineToEntity->StartEntity(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CLogicLineToEntity", "m_StartEntity").Get()));
    return value;
}
void GCLogicLineToEntity::SetStartEntity(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CLogicLineToEntity->StartEntity(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'StartEntity' is not possible.\n");
}
GCBaseEntity GCLogicLineToEntity::GetEndEntity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CLogicLineToEntity->EndEntity(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CLogicLineToEntity", "m_EndEntity").Get()));
    return value;
}
void GCLogicLineToEntity::SetEndEntity(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CLogicLineToEntity->EndEntity(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'EndEntity' is not possible.\n");
}
void* GCLogicLineToEntity::GetPtr() {
    return m_ptr;
}
std::string GCLogicLineToEntity::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCLogicLineToEntity::IsValid() {
    return (m_ptr != nullptr);
}
GCLogicalEntity GCLogicLineToEntity::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CLogicLineToEntity::GetParent(ptr=%p)", m_ptr));
    GCLogicalEntity value(m_ptr);
    return value;
}
void GCLogicLineToEntity::SetParent(GCLogicalEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CLogicLineToEntity::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCLogicLineToEntity(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCLogicLineToEntity>("CLogicLineToEntity")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("SourceName", &GCLogicLineToEntity::GetSourceName, &GCLogicLineToEntity::SetSourceName)
        .addProperty("StartEntity", &GCLogicLineToEntity::GetStartEntity, &GCLogicLineToEntity::SetStartEntity)
        .addProperty("EndEntity", &GCLogicLineToEntity::GetEndEntity, &GCLogicLineToEntity::SetEndEntity)
        .addProperty("Parent", &GCLogicLineToEntity::GetParent, &GCLogicLineToEntity::SetParent)
        .addFunction("ToPtr", &GCLogicLineToEntity::ToPtr)
        .addFunction("IsValid", &GCLogicLineToEntity::IsValid)
        .endClass();
}
GCRetakeGameRules::GCRetakeGameRules(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCRetakeGameRules::GCRetakeGameRules(void *ptr) {
    m_ptr = ptr;
}
int32_t GCRetakeGameRules::GetMatchSeed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CRetakeGameRules->MatchSeed(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CRetakeGameRules", "m_nMatchSeed");
}
void GCRetakeGameRules::SetMatchSeed(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CRetakeGameRules->MatchSeed(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CRetakeGameRules", "m_nMatchSeed", false, value);
}
bool GCRetakeGameRules::GetBlockersPresent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CRetakeGameRules->BlockersPresent(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CRetakeGameRules", "m_bBlockersPresent");
}
void GCRetakeGameRules::SetBlockersPresent(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CRetakeGameRules->BlockersPresent(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CRetakeGameRules", "m_bBlockersPresent", false, value);
}
bool GCRetakeGameRules::GetRoundInProgress() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CRetakeGameRules->RoundInProgress(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CRetakeGameRules", "m_bRoundInProgress");
}
void GCRetakeGameRules::SetRoundInProgress(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CRetakeGameRules->RoundInProgress(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CRetakeGameRules", "m_bRoundInProgress", false, value);
}
int32_t GCRetakeGameRules::GetFirstSecondHalfRound() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CRetakeGameRules->FirstSecondHalfRound(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CRetakeGameRules", "m_iFirstSecondHalfRound");
}
void GCRetakeGameRules::SetFirstSecondHalfRound(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CRetakeGameRules->FirstSecondHalfRound(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CRetakeGameRules", "m_iFirstSecondHalfRound", false, value);
}
int32_t GCRetakeGameRules::GetBombSite() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CRetakeGameRules->BombSite(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CRetakeGameRules", "m_iBombSite");
}
void GCRetakeGameRules::SetBombSite(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CRetakeGameRules->BombSite(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CRetakeGameRules", "m_iBombSite", false, value);
}
void* GCRetakeGameRules::GetPtr() {
    return m_ptr;
}
std::string GCRetakeGameRules::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCRetakeGameRules::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCRetakeGameRules(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCRetakeGameRules>("CRetakeGameRules")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("MatchSeed", &GCRetakeGameRules::GetMatchSeed, &GCRetakeGameRules::SetMatchSeed)
        .addProperty("BlockersPresent", &GCRetakeGameRules::GetBlockersPresent, &GCRetakeGameRules::SetBlockersPresent)
        .addProperty("RoundInProgress", &GCRetakeGameRules::GetRoundInProgress, &GCRetakeGameRules::SetRoundInProgress)
        .addProperty("FirstSecondHalfRound", &GCRetakeGameRules::GetFirstSecondHalfRound, &GCRetakeGameRules::SetFirstSecondHalfRound)
        .addProperty("BombSite", &GCRetakeGameRules::GetBombSite, &GCRetakeGameRules::SetBombSite)
        .addFunction("ToPtr", &GCRetakeGameRules::ToPtr)
        .addFunction("IsValid", &GCRetakeGameRules::IsValid)
        .endClass();
}
GCCSGameRulesProxy::GCCSGameRulesProxy(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCCSGameRulesProxy::GCCSGameRulesProxy(void *ptr) {
    m_ptr = ptr;
}
GCCSGameRules GCCSGameRulesProxy::GetGameRules() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRulesProxy->GameRules(ptr=%p)", m_ptr));
    GCCSGameRules value(*(void**)GetSchemaPtr(m_ptr, "CCSGameRulesProxy", "m_pGameRules"));
    return value;
}
void GCCSGameRulesProxy::SetGameRules(GCCSGameRules value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRulesProxy->GameRules(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRulesProxy","m_pGameRules", false, (char*)value.GetPtr());
}
void* GCCSGameRulesProxy::GetPtr() {
    return m_ptr;
}
std::string GCCSGameRulesProxy::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCCSGameRulesProxy::IsValid() {
    return (m_ptr != nullptr);
}
GCGameRulesProxy GCCSGameRulesProxy::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSGameRulesProxy::GetParent(ptr=%p)", m_ptr));
    GCGameRulesProxy value(m_ptr);
    return value;
}
void GCCSGameRulesProxy::SetParent(GCGameRulesProxy value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSGameRulesProxy::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCCSGameRulesProxy(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCCSGameRulesProxy>("CCSGameRulesProxy")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("GameRules", &GCCSGameRulesProxy::GetGameRules, &GCCSGameRulesProxy::SetGameRules)
        .addProperty("Parent", &GCCSGameRulesProxy::GetParent, &GCCSGameRulesProxy::SetParent)
        .addFunction("ToPtr", &GCCSGameRulesProxy::ToPtr)
        .addFunction("IsValid", &GCCSGameRulesProxy::IsValid)
        .endClass();
}
GCEnvCubemapBox::GCEnvCubemapBox(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCEnvCubemapBox::GCEnvCubemapBox(void *ptr) {
    m_ptr = ptr;
}
void* GCEnvCubemapBox::GetPtr() {
    return m_ptr;
}
std::string GCEnvCubemapBox::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCEnvCubemapBox::IsValid() {
    return (m_ptr != nullptr);
}
GCEnvCubemap GCEnvCubemapBox::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CEnvCubemapBox::GetParent(ptr=%p)", m_ptr));
    GCEnvCubemap value(m_ptr);
    return value;
}
void GCEnvCubemapBox::SetParent(GCEnvCubemap value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CEnvCubemapBox::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCEnvCubemapBox(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCEnvCubemapBox>("CEnvCubemapBox")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCEnvCubemapBox::GetParent, &GCEnvCubemapBox::SetParent)
        .addFunction("ToPtr", &GCEnvCubemapBox::ToPtr)
        .addFunction("IsValid", &GCEnvCubemapBox::IsValid)
        .endClass();
}
GCCSPlayer_DamageReactServices::GCCSPlayer_DamageReactServices(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCCSPlayer_DamageReactServices::GCCSPlayer_DamageReactServices(void *ptr) {
    m_ptr = ptr;
}
void* GCCSPlayer_DamageReactServices::GetPtr() {
    return m_ptr;
}
std::string GCCSPlayer_DamageReactServices::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCCSPlayer_DamageReactServices::IsValid() {
    return (m_ptr != nullptr);
}
GCPlayerPawnComponent GCCSPlayer_DamageReactServices::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSPlayer_DamageReactServices::GetParent(ptr=%p)", m_ptr));
    GCPlayerPawnComponent value(m_ptr);
    return value;
}
void GCCSPlayer_DamageReactServices::SetParent(GCPlayerPawnComponent value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSPlayer_DamageReactServices::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCCSPlayer_DamageReactServices(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCCSPlayer_DamageReactServices>("CCSPlayer_DamageReactServices")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCCSPlayer_DamageReactServices::GetParent, &GCCSPlayer_DamageReactServices::SetParent)
        .addFunction("ToPtr", &GCCSPlayer_DamageReactServices::ToPtr)
        .addFunction("IsValid", &GCCSPlayer_DamageReactServices::IsValid)
        .endClass();
}
GServerAuthoritativeWeaponSlot_t::GServerAuthoritativeWeaponSlot_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GServerAuthoritativeWeaponSlot_t::GServerAuthoritativeWeaponSlot_t(void *ptr) {
    m_ptr = ptr;
}
uint16_t GServerAuthoritativeWeaponSlot_t::GetClass() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ServerAuthoritativeWeaponSlot_t->Class(ptr=%p)", m_ptr));
    return GetSchemaValue<uint16_t>(m_ptr, "ServerAuthoritativeWeaponSlot_t", "unClass");
}
void GServerAuthoritativeWeaponSlot_t::SetClass(uint16_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ServerAuthoritativeWeaponSlot_t->Class(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "ServerAuthoritativeWeaponSlot_t", "unClass", true, value);
}
uint16_t GServerAuthoritativeWeaponSlot_t::GetSlot() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ServerAuthoritativeWeaponSlot_t->Slot(ptr=%p)", m_ptr));
    return GetSchemaValue<uint16_t>(m_ptr, "ServerAuthoritativeWeaponSlot_t", "unSlot");
}
void GServerAuthoritativeWeaponSlot_t::SetSlot(uint16_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ServerAuthoritativeWeaponSlot_t->Slot(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "ServerAuthoritativeWeaponSlot_t", "unSlot", true, value);
}
uint16_t GServerAuthoritativeWeaponSlot_t::GetItemDefIdx() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ServerAuthoritativeWeaponSlot_t->ItemDefIdx(ptr=%p)", m_ptr));
    return GetSchemaValue<uint16_t>(m_ptr, "ServerAuthoritativeWeaponSlot_t", "unItemDefIdx");
}
void GServerAuthoritativeWeaponSlot_t::SetItemDefIdx(uint16_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ServerAuthoritativeWeaponSlot_t->ItemDefIdx(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "ServerAuthoritativeWeaponSlot_t", "unItemDefIdx", true, value);
}
void* GServerAuthoritativeWeaponSlot_t::GetPtr() {
    return m_ptr;
}
std::string GServerAuthoritativeWeaponSlot_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GServerAuthoritativeWeaponSlot_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassServerAuthoritativeWeaponSlot_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GServerAuthoritativeWeaponSlot_t>("ServerAuthoritativeWeaponSlot_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Class", &GServerAuthoritativeWeaponSlot_t::GetClass, &GServerAuthoritativeWeaponSlot_t::SetClass)
        .addProperty("Slot", &GServerAuthoritativeWeaponSlot_t::GetSlot, &GServerAuthoritativeWeaponSlot_t::SetSlot)
        .addProperty("ItemDefIdx", &GServerAuthoritativeWeaponSlot_t::GetItemDefIdx, &GServerAuthoritativeWeaponSlot_t::SetItemDefIdx)
        .addFunction("ToPtr", &GServerAuthoritativeWeaponSlot_t::ToPtr)
        .addFunction("IsValid", &GServerAuthoritativeWeaponSlot_t::IsValid)
        .endClass();
}
GCCSGameRules::GCCSGameRules(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCCSGameRules::GCCSGameRules(void *ptr) {
    m_ptr = ptr;
}
bool GCCSGameRules::GetFreezePeriod() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->FreezePeriod(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bFreezePeriod");
}
void GCCSGameRules::SetFreezePeriod(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->FreezePeriod(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bFreezePeriod", false, value);
}
bool GCCSGameRules::GetWarmupPeriod() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->WarmupPeriod(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bWarmupPeriod");
}
void GCCSGameRules::SetWarmupPeriod(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->WarmupPeriod(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bWarmupPeriod", false, value);
}
float GCCSGameRules::GetWarmupPeriodEnd() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->WarmupPeriodEnd(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_fWarmupPeriodEnd");
}
void GCCSGameRules::SetWarmupPeriodEnd(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->WarmupPeriodEnd(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_fWarmupPeriodEnd", false, value);
}
float GCCSGameRules::GetWarmupPeriodStart() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->WarmupPeriodStart(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_fWarmupPeriodStart");
}
void GCCSGameRules::SetWarmupPeriodStart(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->WarmupPeriodStart(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_fWarmupPeriodStart", false, value);
}
bool GCCSGameRules::GetServerPaused() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->ServerPaused(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bServerPaused");
}
void GCCSGameRules::SetServerPaused(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->ServerPaused(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bServerPaused", false, value);
}
bool GCCSGameRules::GetTerroristTimeOutActive() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->TerroristTimeOutActive(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bTerroristTimeOutActive");
}
void GCCSGameRules::SetTerroristTimeOutActive(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->TerroristTimeOutActive(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bTerroristTimeOutActive", false, value);
}
bool GCCSGameRules::GetCTTimeOutActive() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->CTTimeOutActive(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bCTTimeOutActive");
}
void GCCSGameRules::SetCTTimeOutActive(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->CTTimeOutActive(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bCTTimeOutActive", false, value);
}
float GCCSGameRules::GetTerroristTimeOutRemaining() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->TerroristTimeOutRemaining(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_flTerroristTimeOutRemaining");
}
void GCCSGameRules::SetTerroristTimeOutRemaining(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->TerroristTimeOutRemaining(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_flTerroristTimeOutRemaining", false, value);
}
float GCCSGameRules::GetCTTimeOutRemaining() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->CTTimeOutRemaining(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_flCTTimeOutRemaining");
}
void GCCSGameRules::SetCTTimeOutRemaining(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->CTTimeOutRemaining(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_flCTTimeOutRemaining", false, value);
}
int32_t GCCSGameRules::GetTerroristTimeOuts() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->TerroristTimeOuts(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_nTerroristTimeOuts");
}
void GCCSGameRules::SetTerroristTimeOuts(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->TerroristTimeOuts(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nTerroristTimeOuts", false, value);
}
int32_t GCCSGameRules::GetCTTimeOuts() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->CTTimeOuts(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_nCTTimeOuts");
}
void GCCSGameRules::SetCTTimeOuts(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->CTTimeOuts(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nCTTimeOuts", false, value);
}
bool GCCSGameRules::GetTechnicalTimeOut() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->TechnicalTimeOut(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bTechnicalTimeOut");
}
void GCCSGameRules::SetTechnicalTimeOut(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->TechnicalTimeOut(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bTechnicalTimeOut", false, value);
}
bool GCCSGameRules::GetMatchWaitingForResume() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->MatchWaitingForResume(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bMatchWaitingForResume");
}
void GCCSGameRules::SetMatchWaitingForResume(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->MatchWaitingForResume(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bMatchWaitingForResume", false, value);
}
int32_t GCCSGameRules::GetRoundTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->RoundTime(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iRoundTime");
}
void GCCSGameRules::SetRoundTime(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->RoundTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iRoundTime", false, value);
}
float GCCSGameRules::GetMatchStartTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->MatchStartTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_fMatchStartTime");
}
void GCCSGameRules::SetMatchStartTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->MatchStartTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_fMatchStartTime", false, value);
}
float GCCSGameRules::GetRoundStartTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->RoundStartTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_fRoundStartTime");
}
void GCCSGameRules::SetRoundStartTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->RoundStartTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_fRoundStartTime", false, value);
}
float GCCSGameRules::GetRestartRoundTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->RestartRoundTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_flRestartRoundTime");
}
void GCCSGameRules::SetRestartRoundTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->RestartRoundTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_flRestartRoundTime", false, value);
}
bool GCCSGameRules::GetGameRestart() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->GameRestart(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bGameRestart");
}
void GCCSGameRules::SetGameRestart(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->GameRestart(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bGameRestart", false, value);
}
float GCCSGameRules::GetGameStartTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->GameStartTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_flGameStartTime");
}
void GCCSGameRules::SetGameStartTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->GameStartTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_flGameStartTime", false, value);
}
float GCCSGameRules::GetTimeUntilNextPhaseStarts() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->TimeUntilNextPhaseStarts(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_timeUntilNextPhaseStarts");
}
void GCCSGameRules::SetTimeUntilNextPhaseStarts(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->TimeUntilNextPhaseStarts(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_timeUntilNextPhaseStarts", false, value);
}
int32_t GCCSGameRules::GetGamePhase() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->GamePhase(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_gamePhase");
}
void GCCSGameRules::SetGamePhase(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->GamePhase(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_gamePhase", false, value);
}
int32_t GCCSGameRules::GetTotalRoundsPlayed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->TotalRoundsPlayed(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_totalRoundsPlayed");
}
void GCCSGameRules::SetTotalRoundsPlayed(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->TotalRoundsPlayed(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_totalRoundsPlayed", false, value);
}
int32_t GCCSGameRules::GetRoundsPlayedThisPhase() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->RoundsPlayedThisPhase(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_nRoundsPlayedThisPhase");
}
void GCCSGameRules::SetRoundsPlayedThisPhase(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->RoundsPlayedThisPhase(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nRoundsPlayedThisPhase", false, value);
}
int32_t GCCSGameRules::GetOvertimePlaying() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->OvertimePlaying(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_nOvertimePlaying");
}
void GCCSGameRules::SetOvertimePlaying(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->OvertimePlaying(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nOvertimePlaying", false, value);
}
int32_t GCCSGameRules::GetHostagesRemaining() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->HostagesRemaining(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iHostagesRemaining");
}
void GCCSGameRules::SetHostagesRemaining(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->HostagesRemaining(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iHostagesRemaining", false, value);
}
bool GCCSGameRules::GetAnyHostageReached() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->AnyHostageReached(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bAnyHostageReached");
}
void GCCSGameRules::SetAnyHostageReached(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->AnyHostageReached(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bAnyHostageReached", false, value);
}
bool GCCSGameRules::GetMapHasBombTarget() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->MapHasBombTarget(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bMapHasBombTarget");
}
void GCCSGameRules::SetMapHasBombTarget(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->MapHasBombTarget(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bMapHasBombTarget", false, value);
}
bool GCCSGameRules::GetMapHasRescueZone() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->MapHasRescueZone(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bMapHasRescueZone");
}
void GCCSGameRules::SetMapHasRescueZone(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->MapHasRescueZone(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bMapHasRescueZone", false, value);
}
bool GCCSGameRules::GetMapHasBuyZone() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->MapHasBuyZone(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bMapHasBuyZone");
}
void GCCSGameRules::SetMapHasBuyZone(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->MapHasBuyZone(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bMapHasBuyZone", false, value);
}
bool GCCSGameRules::GetIsQueuedMatchmaking() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->IsQueuedMatchmaking(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bIsQueuedMatchmaking");
}
void GCCSGameRules::SetIsQueuedMatchmaking(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->IsQueuedMatchmaking(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bIsQueuedMatchmaking", false, value);
}
int32_t GCCSGameRules::GetQueuedMatchmakingMode() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->QueuedMatchmakingMode(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_nQueuedMatchmakingMode");
}
void GCCSGameRules::SetQueuedMatchmakingMode(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->QueuedMatchmakingMode(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nQueuedMatchmakingMode", false, value);
}
bool GCCSGameRules::GetIsValveDS() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->IsValveDS(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bIsValveDS");
}
void GCCSGameRules::SetIsValveDS(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->IsValveDS(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bIsValveDS", false, value);
}
bool GCCSGameRules::GetLogoMap() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->LogoMap(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bLogoMap");
}
void GCCSGameRules::SetLogoMap(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->LogoMap(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bLogoMap", false, value);
}
bool GCCSGameRules::GetPlayAllStepSoundsOnServer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->PlayAllStepSoundsOnServer(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bPlayAllStepSoundsOnServer");
}
void GCCSGameRules::SetPlayAllStepSoundsOnServer(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->PlayAllStepSoundsOnServer(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bPlayAllStepSoundsOnServer", false, value);
}
int32_t GCCSGameRules::GetSpectatorSlotCount() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->SpectatorSlotCount(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iSpectatorSlotCount");
}
void GCCSGameRules::SetSpectatorSlotCount(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->SpectatorSlotCount(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iSpectatorSlotCount", false, value);
}
int32_t GCCSGameRules::GetMatchDevice() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->MatchDevice(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_MatchDevice");
}
void GCCSGameRules::SetMatchDevice(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->MatchDevice(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_MatchDevice", false, value);
}
bool GCCSGameRules::GetHasMatchStarted() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->HasMatchStarted(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bHasMatchStarted");
}
void GCCSGameRules::SetHasMatchStarted(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->HasMatchStarted(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bHasMatchStarted", false, value);
}
int32_t GCCSGameRules::GetNextMapInMapgroup() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->NextMapInMapgroup(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_nNextMapInMapgroup");
}
void GCCSGameRules::SetNextMapInMapgroup(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->NextMapInMapgroup(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nNextMapInMapgroup", false, value);
}
std::string GCCSGameRules::GetTournamentEventName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->TournamentEventName(ptr=%p)", m_ptr));
    return GetSchemaValuePtr<char>(m_ptr, "CCSGameRules", "m_szTournamentEventName");
}
void GCCSGameRules::SetTournamentEventName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->TournamentEventName(ptr=%p)", m_ptr));
    WriteSchemaPtrValue(m_ptr, "CCSGameRules", "m_szTournamentEventName", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 512);
}
std::string GCCSGameRules::GetTournamentEventStage() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->TournamentEventStage(ptr=%p)", m_ptr));
    return GetSchemaValuePtr<char>(m_ptr, "CCSGameRules", "m_szTournamentEventStage");
}
void GCCSGameRules::SetTournamentEventStage(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->TournamentEventStage(ptr=%p)", m_ptr));
    WriteSchemaPtrValue(m_ptr, "CCSGameRules", "m_szTournamentEventStage", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 512);
}
std::string GCCSGameRules::GetMatchStatTxt() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->MatchStatTxt(ptr=%p)", m_ptr));
    return GetSchemaValuePtr<char>(m_ptr, "CCSGameRules", "m_szMatchStatTxt");
}
void GCCSGameRules::SetMatchStatTxt(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->MatchStatTxt(ptr=%p)", m_ptr));
    WriteSchemaPtrValue(m_ptr, "CCSGameRules", "m_szMatchStatTxt", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 512);
}
std::string GCCSGameRules::GetTournamentPredictionsTxt() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->TournamentPredictionsTxt(ptr=%p)", m_ptr));
    return GetSchemaValuePtr<char>(m_ptr, "CCSGameRules", "m_szTournamentPredictionsTxt");
}
void GCCSGameRules::SetTournamentPredictionsTxt(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->TournamentPredictionsTxt(ptr=%p)", m_ptr));
    WriteSchemaPtrValue(m_ptr, "CCSGameRules", "m_szTournamentPredictionsTxt", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 512);
}
int32_t GCCSGameRules::GetTournamentPredictionsPct() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->TournamentPredictionsPct(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_nTournamentPredictionsPct");
}
void GCCSGameRules::SetTournamentPredictionsPct(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->TournamentPredictionsPct(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nTournamentPredictionsPct", false, value);
}
float GCCSGameRules::GetCMMItemDropRevealStartTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->CMMItemDropRevealStartTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_flCMMItemDropRevealStartTime");
}
void GCCSGameRules::SetCMMItemDropRevealStartTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->CMMItemDropRevealStartTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_flCMMItemDropRevealStartTime", false, value);
}
float GCCSGameRules::GetCMMItemDropRevealEndTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->CMMItemDropRevealEndTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_flCMMItemDropRevealEndTime");
}
void GCCSGameRules::SetCMMItemDropRevealEndTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->CMMItemDropRevealEndTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_flCMMItemDropRevealEndTime", false, value);
}
bool GCCSGameRules::GetIsDroppingItems() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->IsDroppingItems(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bIsDroppingItems");
}
void GCCSGameRules::SetIsDroppingItems(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->IsDroppingItems(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bIsDroppingItems", false, value);
}
bool GCCSGameRules::GetIsQuestEligible() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->IsQuestEligible(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bIsQuestEligible");
}
void GCCSGameRules::SetIsQuestEligible(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->IsQuestEligible(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bIsQuestEligible", false, value);
}
bool GCCSGameRules::GetIsHltvActive() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->IsHltvActive(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bIsHltvActive");
}
void GCCSGameRules::SetIsHltvActive(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->IsHltvActive(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bIsHltvActive", false, value);
}
std::vector<uint16_t> GCCSGameRules::GetProhibitedItemIndices() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->ProhibitedItemIndices(ptr=%p,size=100)", m_ptr));
    uint16_t* outValue = (uint16_t*)GetSchemaPtr(m_ptr, "CCSGameRules", "m_arrProhibitedItemIndices"); std::vector<uint16_t> ret; for(int i = 0; i < 100; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCCSGameRules::SetProhibitedItemIndices(std::vector<uint16_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->ProhibitedItemIndices(ptr=%p,size=100)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ProhibitedItemIndices' is not possible.\n");
}
std::vector<uint32_t> GCCSGameRules::GetTournamentActiveCasterAccounts() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->TournamentActiveCasterAccounts(ptr=%p,size=4)", m_ptr));
    uint32_t* outValue = (uint32_t*)GetSchemaPtr(m_ptr, "CCSGameRules", "m_arrTournamentActiveCasterAccounts"); std::vector<uint32_t> ret; for(int i = 0; i < 4; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCCSGameRules::SetTournamentActiveCasterAccounts(std::vector<uint32_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->TournamentActiveCasterAccounts(ptr=%p,size=4)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'TournamentActiveCasterAccounts' is not possible.\n");
}
int32_t GCCSGameRules::GetNumBestOfMaps() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->NumBestOfMaps(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_numBestOfMaps");
}
void GCCSGameRules::SetNumBestOfMaps(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->NumBestOfMaps(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_numBestOfMaps", false, value);
}
int32_t GCCSGameRules::GetHalloweenMaskListSeed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->HalloweenMaskListSeed(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_nHalloweenMaskListSeed");
}
void GCCSGameRules::SetHalloweenMaskListSeed(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->HalloweenMaskListSeed(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nHalloweenMaskListSeed", false, value);
}
bool GCCSGameRules::GetBombDropped() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->BombDropped(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bBombDropped");
}
void GCCSGameRules::SetBombDropped(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->BombDropped(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bBombDropped", false, value);
}
bool GCCSGameRules::GetBombPlanted() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->BombPlanted(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bBombPlanted");
}
void GCCSGameRules::SetBombPlanted(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->BombPlanted(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bBombPlanted", false, value);
}
int32_t GCCSGameRules::GetRoundWinStatus() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->RoundWinStatus(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iRoundWinStatus");
}
void GCCSGameRules::SetRoundWinStatus(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->RoundWinStatus(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iRoundWinStatus", false, value);
}
int32_t GCCSGameRules::GetRoundWinReason() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->RoundWinReason(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_eRoundWinReason");
}
void GCCSGameRules::SetRoundWinReason(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->RoundWinReason(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_eRoundWinReason", false, value);
}
bool GCCSGameRules::GetTCantBuy() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->TCantBuy(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bTCantBuy");
}
void GCCSGameRules::SetTCantBuy(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->TCantBuy(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bTCantBuy", false, value);
}
bool GCCSGameRules::GetCTCantBuy() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->CTCantBuy(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bCTCantBuy");
}
void GCCSGameRules::SetCTCantBuy(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->CTCantBuy(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bCTCantBuy", false, value);
}
std::vector<int32_t> GCCSGameRules::GetMatchStats_RoundResults() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->MatchStats_RoundResults(ptr=%p,size=30)", m_ptr));
    int32_t* outValue = (int32_t*)GetSchemaPtr(m_ptr, "CCSGameRules", "m_iMatchStats_RoundResults"); std::vector<int32_t> ret; for(int i = 0; i < 30; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCCSGameRules::SetMatchStats_RoundResults(std::vector<int32_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->MatchStats_RoundResults(ptr=%p,size=30)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'MatchStats_RoundResults' is not possible.\n");
}
std::vector<int32_t> GCCSGameRules::GetMatchStats_PlayersAlive_CT() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->MatchStats_PlayersAlive_CT(ptr=%p,size=30)", m_ptr));
    int32_t* outValue = (int32_t*)GetSchemaPtr(m_ptr, "CCSGameRules", "m_iMatchStats_PlayersAlive_CT"); std::vector<int32_t> ret; for(int i = 0; i < 30; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCCSGameRules::SetMatchStats_PlayersAlive_CT(std::vector<int32_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->MatchStats_PlayersAlive_CT(ptr=%p,size=30)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'MatchStats_PlayersAlive_CT' is not possible.\n");
}
std::vector<int32_t> GCCSGameRules::GetMatchStats_PlayersAlive_T() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->MatchStats_PlayersAlive_T(ptr=%p,size=30)", m_ptr));
    int32_t* outValue = (int32_t*)GetSchemaPtr(m_ptr, "CCSGameRules", "m_iMatchStats_PlayersAlive_T"); std::vector<int32_t> ret; for(int i = 0; i < 30; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCCSGameRules::SetMatchStats_PlayersAlive_T(std::vector<int32_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->MatchStats_PlayersAlive_T(ptr=%p,size=30)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'MatchStats_PlayersAlive_T' is not possible.\n");
}
std::vector<float> GCCSGameRules::GetTeamRespawnWaveTimes() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->TeamRespawnWaveTimes(ptr=%p,size=32)", m_ptr));
    float* outValue = (float*)GetSchemaPtr(m_ptr, "CCSGameRules", "m_TeamRespawnWaveTimes"); std::vector<float> ret; for(int i = 0; i < 32; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCCSGameRules::SetTeamRespawnWaveTimes(std::vector<float> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->TeamRespawnWaveTimes(ptr=%p,size=32)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'TeamRespawnWaveTimes' is not possible.\n");
}
std::vector<float> GCCSGameRules::GetNextRespawnWave() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->NextRespawnWave(ptr=%p,size=32)", m_ptr));
    float* outValue = (float*)GetSchemaPtr(m_ptr, "CCSGameRules", "m_flNextRespawnWave"); std::vector<float> ret; for(int i = 0; i < 32; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCCSGameRules::SetNextRespawnWave(std::vector<float> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->NextRespawnWave(ptr=%p,size=32)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'NextRespawnWave' is not possible.\n");
}
int32_t GCCSGameRules::GetServerQuestID() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->ServerQuestID(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_nServerQuestID");
}
void GCCSGameRules::SetServerQuestID(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->ServerQuestID(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nServerQuestID", false, value);
}
Vector GCCSGameRules::GetMinimapMins() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->MinimapMins(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CCSGameRules", "m_vMinimapMins");
}
void GCCSGameRules::SetMinimapMins(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->MinimapMins(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_vMinimapMins", false, value);
}
Vector GCCSGameRules::GetMinimapMaxs() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->MinimapMaxs(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CCSGameRules", "m_vMinimapMaxs");
}
void GCCSGameRules::SetMinimapMaxs(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->MinimapMaxs(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_vMinimapMaxs", false, value);
}
std::vector<float> GCCSGameRules::GetMinimapVerticalSectionHeights() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->MinimapVerticalSectionHeights(ptr=%p,size=8)", m_ptr));
    float* outValue = (float*)GetSchemaPtr(m_ptr, "CCSGameRules", "m_MinimapVerticalSectionHeights"); std::vector<float> ret; for(int i = 0; i < 8; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCCSGameRules::SetMinimapVerticalSectionHeights(std::vector<float> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->MinimapVerticalSectionHeights(ptr=%p,size=8)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'MinimapVerticalSectionHeights' is not possible.\n");
}
bool GCCSGameRules::GetSpawnedTerrorHuntHeavy() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->SpawnedTerrorHuntHeavy(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bSpawnedTerrorHuntHeavy");
}
void GCCSGameRules::SetSpawnedTerrorHuntHeavy(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->SpawnedTerrorHuntHeavy(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bSpawnedTerrorHuntHeavy", false, value);
}
std::vector<int32_t> GCCSGameRules::GetEndMatchMapGroupVoteTypes() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->EndMatchMapGroupVoteTypes(ptr=%p,size=10)", m_ptr));
    int32_t* outValue = (int32_t*)GetSchemaPtr(m_ptr, "CCSGameRules", "m_nEndMatchMapGroupVoteTypes"); std::vector<int32_t> ret; for(int i = 0; i < 10; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCCSGameRules::SetEndMatchMapGroupVoteTypes(std::vector<int32_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->EndMatchMapGroupVoteTypes(ptr=%p,size=10)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'EndMatchMapGroupVoteTypes' is not possible.\n");
}
std::vector<int32_t> GCCSGameRules::GetEndMatchMapGroupVoteOptions() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->EndMatchMapGroupVoteOptions(ptr=%p,size=10)", m_ptr));
    int32_t* outValue = (int32_t*)GetSchemaPtr(m_ptr, "CCSGameRules", "m_nEndMatchMapGroupVoteOptions"); std::vector<int32_t> ret; for(int i = 0; i < 10; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCCSGameRules::SetEndMatchMapGroupVoteOptions(std::vector<int32_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->EndMatchMapGroupVoteOptions(ptr=%p,size=10)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'EndMatchMapGroupVoteOptions' is not possible.\n");
}
int32_t GCCSGameRules::GetEndMatchMapVoteWinner() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->EndMatchMapVoteWinner(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_nEndMatchMapVoteWinner");
}
void GCCSGameRules::SetEndMatchMapVoteWinner(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->EndMatchMapVoteWinner(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nEndMatchMapVoteWinner", false, value);
}
int32_t GCCSGameRules::GetNumConsecutiveCTLoses() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->NumConsecutiveCTLoses(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iNumConsecutiveCTLoses");
}
void GCCSGameRules::SetNumConsecutiveCTLoses(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->NumConsecutiveCTLoses(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iNumConsecutiveCTLoses", false, value);
}
int32_t GCCSGameRules::GetNumConsecutiveTerroristLoses() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->NumConsecutiveTerroristLoses(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iNumConsecutiveTerroristLoses");
}
void GCCSGameRules::SetNumConsecutiveTerroristLoses(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->NumConsecutiveTerroristLoses(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iNumConsecutiveTerroristLoses", false, value);
}
bool GCCSGameRules::GetHasHostageBeenTouched() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->HasHostageBeenTouched(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bHasHostageBeenTouched");
}
void GCCSGameRules::SetHasHostageBeenTouched(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->HasHostageBeenTouched(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bHasHostageBeenTouched", false, value);
}
float GCCSGameRules::GetIntermissionStartTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->IntermissionStartTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_flIntermissionStartTime");
}
void GCCSGameRules::SetIntermissionStartTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->IntermissionStartTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_flIntermissionStartTime", false, value);
}
float GCCSGameRules::GetIntermissionEndTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->IntermissionEndTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_flIntermissionEndTime");
}
void GCCSGameRules::SetIntermissionEndTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->IntermissionEndTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_flIntermissionEndTime", false, value);
}
bool GCCSGameRules::GetLevelInitialized() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->LevelInitialized(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bLevelInitialized");
}
void GCCSGameRules::SetLevelInitialized(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->LevelInitialized(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bLevelInitialized", false, value);
}
int32_t GCCSGameRules::GetTotalRoundsPlayed1() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->TotalRoundsPlayed1(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iTotalRoundsPlayed");
}
void GCCSGameRules::SetTotalRoundsPlayed1(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->TotalRoundsPlayed1(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iTotalRoundsPlayed", false, value);
}
int32_t GCCSGameRules::GetUnBalancedRounds() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->UnBalancedRounds(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iUnBalancedRounds");
}
void GCCSGameRules::SetUnBalancedRounds(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->UnBalancedRounds(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iUnBalancedRounds", false, value);
}
bool GCCSGameRules::GetEndMatchOnRoundReset() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->EndMatchOnRoundReset(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_endMatchOnRoundReset");
}
void GCCSGameRules::SetEndMatchOnRoundReset(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->EndMatchOnRoundReset(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_endMatchOnRoundReset", false, value);
}
bool GCCSGameRules::GetEndMatchOnThink() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->EndMatchOnThink(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_endMatchOnThink");
}
void GCCSGameRules::SetEndMatchOnThink(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->EndMatchOnThink(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_endMatchOnThink", false, value);
}
int32_t GCCSGameRules::GetFreezeTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->FreezeTime(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iFreezeTime");
}
void GCCSGameRules::SetFreezeTime(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->FreezeTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iFreezeTime", false, value);
}
int32_t GCCSGameRules::GetNumTerrorist() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->NumTerrorist(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iNumTerrorist");
}
void GCCSGameRules::SetNumTerrorist(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->NumTerrorist(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iNumTerrorist", false, value);
}
int32_t GCCSGameRules::GetNumCT() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->NumCT(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iNumCT");
}
void GCCSGameRules::SetNumCT(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->NumCT(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iNumCT", false, value);
}
int32_t GCCSGameRules::GetNumSpawnableTerrorist() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->NumSpawnableTerrorist(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iNumSpawnableTerrorist");
}
void GCCSGameRules::SetNumSpawnableTerrorist(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->NumSpawnableTerrorist(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iNumSpawnableTerrorist", false, value);
}
int32_t GCCSGameRules::GetNumSpawnableCT() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->NumSpawnableCT(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iNumSpawnableCT");
}
void GCCSGameRules::SetNumSpawnableCT(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->NumSpawnableCT(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iNumSpawnableCT", false, value);
}
std::vector<int32> GCCSGameRules::GetSelectedHostageSpawnIndices() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->SelectedHostageSpawnIndices(ptr=%p)", m_ptr));
    CUtlVector<int32>* vec = GetSchemaValue<CUtlVector<int32>*>(m_ptr, "CCSGameRules", "m_arrSelectedHostageSpawnIndices"); std::vector<int32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCCSGameRules::SetSelectedHostageSpawnIndices(std::vector<int32> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->SelectedHostageSpawnIndices(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<int32>(m_ptr, "CCSGameRules", "m_arrSelectedHostageSpawnIndices", false, value);
}
int32_t GCCSGameRules::GetSpawnPointsRandomSeed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->SpawnPointsRandomSeed(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_nSpawnPointsRandomSeed");
}
void GCCSGameRules::SetSpawnPointsRandomSeed(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->SpawnPointsRandomSeed(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nSpawnPointsRandomSeed", false, value);
}
bool GCCSGameRules::GetFirstConnected() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->FirstConnected(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bFirstConnected");
}
void GCCSGameRules::SetFirstConnected(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->FirstConnected(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bFirstConnected", false, value);
}
bool GCCSGameRules::GetCompleteReset() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->CompleteReset(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bCompleteReset");
}
void GCCSGameRules::SetCompleteReset(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->CompleteReset(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bCompleteReset", false, value);
}
bool GCCSGameRules::GetPickNewTeamsOnReset() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->PickNewTeamsOnReset(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bPickNewTeamsOnReset");
}
void GCCSGameRules::SetPickNewTeamsOnReset(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->PickNewTeamsOnReset(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bPickNewTeamsOnReset", false, value);
}
bool GCCSGameRules::GetScrambleTeamsOnRestart() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->ScrambleTeamsOnRestart(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bScrambleTeamsOnRestart");
}
void GCCSGameRules::SetScrambleTeamsOnRestart(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->ScrambleTeamsOnRestart(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bScrambleTeamsOnRestart", false, value);
}
bool GCCSGameRules::GetSwapTeamsOnRestart() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->SwapTeamsOnRestart(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bSwapTeamsOnRestart");
}
void GCCSGameRules::SetSwapTeamsOnRestart(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->SwapTeamsOnRestart(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bSwapTeamsOnRestart", false, value);
}
std::vector<int32> GCCSGameRules::GetEndMatchTiedVotes() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->EndMatchTiedVotes(ptr=%p)", m_ptr));
    CUtlVector<int32>* vec = GetSchemaValue<CUtlVector<int32>*>(m_ptr, "CCSGameRules", "m_nEndMatchTiedVotes"); std::vector<int32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCCSGameRules::SetEndMatchTiedVotes(std::vector<int32> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->EndMatchTiedVotes(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<int32>(m_ptr, "CCSGameRules", "m_nEndMatchTiedVotes", false, value);
}
bool GCCSGameRules::GetNeedToAskPlayersForContinueVote() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->NeedToAskPlayersForContinueVote(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bNeedToAskPlayersForContinueVote");
}
void GCCSGameRules::SetNeedToAskPlayersForContinueVote(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->NeedToAskPlayersForContinueVote(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bNeedToAskPlayersForContinueVote", false, value);
}
uint32_t GCCSGameRules::GetNumQueuedMatchmakingAccounts() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->NumQueuedMatchmakingAccounts(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CCSGameRules", "m_numQueuedMatchmakingAccounts");
}
void GCCSGameRules::SetNumQueuedMatchmakingAccounts(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->NumQueuedMatchmakingAccounts(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_numQueuedMatchmakingAccounts", false, value);
}
float GCCSGameRules::GetAvgPlayerRank() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->AvgPlayerRank(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_fAvgPlayerRank");
}
void GCCSGameRules::SetAvgPlayerRank(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->AvgPlayerRank(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_fAvgPlayerRank", false, value);
}
std::string GCCSGameRules::GetQueuedMatchmakingReservationString() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->QueuedMatchmakingReservationString(ptr=%p)", m_ptr));
    return GetSchemaValuePtr<char>(m_ptr, "CCSGameRules", "m_pQueuedMatchmakingReservationString");
}
void GCCSGameRules::SetQueuedMatchmakingReservationString(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->QueuedMatchmakingReservationString(ptr=%p)", m_ptr));
    WriteSchemaPtrValue(m_ptr, "CCSGameRules", "m_pQueuedMatchmakingReservationString", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), value.size());
}
uint32_t GCCSGameRules::GetNumTotalTournamentDrops() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->NumTotalTournamentDrops(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CCSGameRules", "m_numTotalTournamentDrops");
}
void GCCSGameRules::SetNumTotalTournamentDrops(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->NumTotalTournamentDrops(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_numTotalTournamentDrops", false, value);
}
uint32_t GCCSGameRules::GetNumSpectatorsCountMax() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->NumSpectatorsCountMax(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CCSGameRules", "m_numSpectatorsCountMax");
}
void GCCSGameRules::SetNumSpectatorsCountMax(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->NumSpectatorsCountMax(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_numSpectatorsCountMax", false, value);
}
uint32_t GCCSGameRules::GetNumSpectatorsCountMaxTV() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->NumSpectatorsCountMaxTV(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CCSGameRules", "m_numSpectatorsCountMaxTV");
}
void GCCSGameRules::SetNumSpectatorsCountMaxTV(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->NumSpectatorsCountMaxTV(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_numSpectatorsCountMaxTV", false, value);
}
uint32_t GCCSGameRules::GetNumSpectatorsCountMaxLnk() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->NumSpectatorsCountMaxLnk(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CCSGameRules", "m_numSpectatorsCountMaxLnk");
}
void GCCSGameRules::SetNumSpectatorsCountMaxLnk(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->NumSpectatorsCountMaxLnk(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_numSpectatorsCountMaxLnk", false, value);
}
bool GCCSGameRules::GetForceTeamChangeSilent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->ForceTeamChangeSilent(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bForceTeamChangeSilent");
}
void GCCSGameRules::SetForceTeamChangeSilent(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->ForceTeamChangeSilent(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bForceTeamChangeSilent", false, value);
}
bool GCCSGameRules::GetLoadingRoundBackupData() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->LoadingRoundBackupData(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bLoadingRoundBackupData");
}
void GCCSGameRules::SetLoadingRoundBackupData(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->LoadingRoundBackupData(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bLoadingRoundBackupData", false, value);
}
int32_t GCCSGameRules::GetMatchInfoShowType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->MatchInfoShowType(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_nMatchInfoShowType");
}
void GCCSGameRules::SetMatchInfoShowType(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->MatchInfoShowType(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nMatchInfoShowType", false, value);
}
float GCCSGameRules::GetMatchInfoDecidedTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->MatchInfoDecidedTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_flMatchInfoDecidedTime");
}
void GCCSGameRules::SetMatchInfoDecidedTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->MatchInfoDecidedTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_flMatchInfoDecidedTime", false, value);
}
int32_t GCCSGameRules::GetMTeamDMLastWinningTeamNumber() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->MTeamDMLastWinningTeamNumber(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "mTeamDMLastWinningTeamNumber");
}
void GCCSGameRules::SetMTeamDMLastWinningTeamNumber(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->MTeamDMLastWinningTeamNumber(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "mTeamDMLastWinningTeamNumber", false, value);
}
float GCCSGameRules::GetMTeamDMLastThinkTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->MTeamDMLastThinkTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "mTeamDMLastThinkTime");
}
void GCCSGameRules::SetMTeamDMLastThinkTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->MTeamDMLastThinkTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "mTeamDMLastThinkTime", false, value);
}
float GCCSGameRules::GetTeamDMLastAnnouncementTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->TeamDMLastAnnouncementTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_flTeamDMLastAnnouncementTime");
}
void GCCSGameRules::SetTeamDMLastAnnouncementTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->TeamDMLastAnnouncementTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_flTeamDMLastAnnouncementTime", false, value);
}
int32_t GCCSGameRules::GetAccountTerrorist() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->AccountTerrorist(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iAccountTerrorist");
}
void GCCSGameRules::SetAccountTerrorist(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->AccountTerrorist(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iAccountTerrorist", false, value);
}
int32_t GCCSGameRules::GetAccountCT() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->AccountCT(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iAccountCT");
}
void GCCSGameRules::SetAccountCT(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->AccountCT(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iAccountCT", false, value);
}
int32_t GCCSGameRules::GetSpawnPointCount_Terrorist() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->SpawnPointCount_Terrorist(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iSpawnPointCount_Terrorist");
}
void GCCSGameRules::SetSpawnPointCount_Terrorist(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->SpawnPointCount_Terrorist(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iSpawnPointCount_Terrorist", false, value);
}
int32_t GCCSGameRules::GetSpawnPointCount_CT() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->SpawnPointCount_CT(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iSpawnPointCount_CT");
}
void GCCSGameRules::SetSpawnPointCount_CT(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->SpawnPointCount_CT(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iSpawnPointCount_CT", false, value);
}
int32_t GCCSGameRules::GetMaxNumTerrorists() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->MaxNumTerrorists(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iMaxNumTerrorists");
}
void GCCSGameRules::SetMaxNumTerrorists(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->MaxNumTerrorists(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iMaxNumTerrorists", false, value);
}
int32_t GCCSGameRules::GetMaxNumCTs() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->MaxNumCTs(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iMaxNumCTs");
}
void GCCSGameRules::SetMaxNumCTs(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->MaxNumCTs(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iMaxNumCTs", false, value);
}
int32_t GCCSGameRules::GetLoserBonusMostRecentTeam() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->LoserBonusMostRecentTeam(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iLoserBonusMostRecentTeam");
}
void GCCSGameRules::SetLoserBonusMostRecentTeam(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->LoserBonusMostRecentTeam(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iLoserBonusMostRecentTeam", false, value);
}
float GCCSGameRules::GetTmNextPeriodicThink() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->TmNextPeriodicThink(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_tmNextPeriodicThink");
}
void GCCSGameRules::SetTmNextPeriodicThink(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->TmNextPeriodicThink(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_tmNextPeriodicThink", false, value);
}
bool GCCSGameRules::GetVoiceWonMatchBragFired() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->VoiceWonMatchBragFired(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bVoiceWonMatchBragFired");
}
void GCCSGameRules::SetVoiceWonMatchBragFired(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->VoiceWonMatchBragFired(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bVoiceWonMatchBragFired", false, value);
}
float GCCSGameRules::GetWarmupNextChatNoticeTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->WarmupNextChatNoticeTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_fWarmupNextChatNoticeTime");
}
void GCCSGameRules::SetWarmupNextChatNoticeTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->WarmupNextChatNoticeTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_fWarmupNextChatNoticeTime", false, value);
}
int32_t GCCSGameRules::GetHostagesRescued() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->HostagesRescued(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iHostagesRescued");
}
void GCCSGameRules::SetHostagesRescued(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->HostagesRescued(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iHostagesRescued", false, value);
}
int32_t GCCSGameRules::GetHostagesTouched() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->HostagesTouched(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iHostagesTouched");
}
void GCCSGameRules::SetHostagesTouched(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->HostagesTouched(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iHostagesTouched", false, value);
}
float GCCSGameRules::GetNextHostageAnnouncement() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->NextHostageAnnouncement(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_flNextHostageAnnouncement");
}
void GCCSGameRules::SetNextHostageAnnouncement(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->NextHostageAnnouncement(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_flNextHostageAnnouncement", false, value);
}
bool GCCSGameRules::GetNoTerroristsKilled() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->NoTerroristsKilled(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bNoTerroristsKilled");
}
void GCCSGameRules::SetNoTerroristsKilled(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->NoTerroristsKilled(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bNoTerroristsKilled", false, value);
}
bool GCCSGameRules::GetNoCTsKilled() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->NoCTsKilled(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bNoCTsKilled");
}
void GCCSGameRules::SetNoCTsKilled(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->NoCTsKilled(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bNoCTsKilled", false, value);
}
bool GCCSGameRules::GetNoEnemiesKilled() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->NoEnemiesKilled(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bNoEnemiesKilled");
}
void GCCSGameRules::SetNoEnemiesKilled(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->NoEnemiesKilled(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bNoEnemiesKilled", false, value);
}
bool GCCSGameRules::GetCanDonateWeapons() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->CanDonateWeapons(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bCanDonateWeapons");
}
void GCCSGameRules::SetCanDonateWeapons(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->CanDonateWeapons(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bCanDonateWeapons", false, value);
}
float GCCSGameRules::GetFirstKillTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->FirstKillTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_firstKillTime");
}
void GCCSGameRules::SetFirstKillTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->FirstKillTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_firstKillTime", false, value);
}
float GCCSGameRules::GetFirstBloodTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->FirstBloodTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_firstBloodTime");
}
void GCCSGameRules::SetFirstBloodTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->FirstBloodTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_firstBloodTime", false, value);
}
bool GCCSGameRules::GetHostageWasInjured() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->HostageWasInjured(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_hostageWasInjured");
}
void GCCSGameRules::SetHostageWasInjured(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->HostageWasInjured(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_hostageWasInjured", false, value);
}
bool GCCSGameRules::GetHostageWasKilled() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->HostageWasKilled(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_hostageWasKilled");
}
void GCCSGameRules::SetHostageWasKilled(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->HostageWasKilled(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_hostageWasKilled", false, value);
}
bool GCCSGameRules::GetVoteCalled() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->VoteCalled(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bVoteCalled");
}
void GCCSGameRules::SetVoteCalled(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->VoteCalled(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bVoteCalled", false, value);
}
bool GCCSGameRules::GetServerVoteOnReset() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->ServerVoteOnReset(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bServerVoteOnReset");
}
void GCCSGameRules::SetServerVoteOnReset(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->ServerVoteOnReset(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bServerVoteOnReset", false, value);
}
float GCCSGameRules::GetVoteCheckThrottle() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->VoteCheckThrottle(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_flVoteCheckThrottle");
}
void GCCSGameRules::SetVoteCheckThrottle(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->VoteCheckThrottle(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_flVoteCheckThrottle", false, value);
}
bool GCCSGameRules::GetBuyTimeEnded() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->BuyTimeEnded(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bBuyTimeEnded");
}
void GCCSGameRules::SetBuyTimeEnded(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->BuyTimeEnded(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bBuyTimeEnded", false, value);
}
int32_t GCCSGameRules::GetLastFreezeEndBeep() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->LastFreezeEndBeep(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_nLastFreezeEndBeep");
}
void GCCSGameRules::SetLastFreezeEndBeep(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->LastFreezeEndBeep(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nLastFreezeEndBeep", false, value);
}
bool GCCSGameRules::GetTargetBombed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->TargetBombed(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bTargetBombed");
}
void GCCSGameRules::SetTargetBombed(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->TargetBombed(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bTargetBombed", false, value);
}
bool GCCSGameRules::GetBombDefused() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->BombDefused(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bBombDefused");
}
void GCCSGameRules::SetBombDefused(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->BombDefused(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bBombDefused", false, value);
}
bool GCCSGameRules::GetMapHasBombZone() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->MapHasBombZone(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bMapHasBombZone");
}
void GCCSGameRules::SetMapHasBombZone(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->MapHasBombZone(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bMapHasBombZone", false, value);
}
Vector GCCSGameRules::GetMainCTSpawnPos() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->MainCTSpawnPos(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CCSGameRules", "m_vecMainCTSpawnPos");
}
void GCCSGameRules::SetMainCTSpawnPos(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->MainCTSpawnPos(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_vecMainCTSpawnPos", false, value);
}
std::vector<GSpawnPoint*> GCCSGameRules::GetCTSpawnPointsMasterList() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->CTSpawnPointsMasterList(ptr=%p)", m_ptr));
    CUtlVector<GSpawnPoint*>* vec = GetSchemaValue<CUtlVector<GSpawnPoint*>*>(m_ptr, "CCSGameRules", "m_CTSpawnPointsMasterList"); std::vector<GSpawnPoint*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCCSGameRules::SetCTSpawnPointsMasterList(std::vector<GSpawnPoint*> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->CTSpawnPointsMasterList(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GSpawnPoint*>(m_ptr, "CCSGameRules", "m_CTSpawnPointsMasterList", false, value);
}
std::vector<GSpawnPoint*> GCCSGameRules::GetTerroristSpawnPointsMasterList() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->TerroristSpawnPointsMasterList(ptr=%p)", m_ptr));
    CUtlVector<GSpawnPoint*>* vec = GetSchemaValue<CUtlVector<GSpawnPoint*>*>(m_ptr, "CCSGameRules", "m_TerroristSpawnPointsMasterList"); std::vector<GSpawnPoint*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCCSGameRules::SetTerroristSpawnPointsMasterList(std::vector<GSpawnPoint*> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->TerroristSpawnPointsMasterList(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GSpawnPoint*>(m_ptr, "CCSGameRules", "m_TerroristSpawnPointsMasterList", false, value);
}
bool GCCSGameRules::GetRespawningAllRespawnablePlayers() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->RespawningAllRespawnablePlayers(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bRespawningAllRespawnablePlayers");
}
void GCCSGameRules::SetRespawningAllRespawnablePlayers(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->RespawningAllRespawnablePlayers(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bRespawningAllRespawnablePlayers", false, value);
}
int32_t GCCSGameRules::GetNextCTSpawnPoint() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->NextCTSpawnPoint(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iNextCTSpawnPoint");
}
void GCCSGameRules::SetNextCTSpawnPoint(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->NextCTSpawnPoint(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iNextCTSpawnPoint", false, value);
}
float GCCSGameRules::GetCTSpawnPointUsedTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->CTSpawnPointUsedTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_flCTSpawnPointUsedTime");
}
void GCCSGameRules::SetCTSpawnPointUsedTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->CTSpawnPointUsedTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_flCTSpawnPointUsedTime", false, value);
}
int32_t GCCSGameRules::GetNextTerroristSpawnPoint() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->NextTerroristSpawnPoint(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iNextTerroristSpawnPoint");
}
void GCCSGameRules::SetNextTerroristSpawnPoint(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->NextTerroristSpawnPoint(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iNextTerroristSpawnPoint", false, value);
}
float GCCSGameRules::GetTerroristSpawnPointUsedTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->TerroristSpawnPointUsedTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_flTerroristSpawnPointUsedTime");
}
void GCCSGameRules::SetTerroristSpawnPointUsedTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->TerroristSpawnPointUsedTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_flTerroristSpawnPointUsedTime", false, value);
}
std::vector<GSpawnPoint*> GCCSGameRules::GetCTSpawnPoints() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->CTSpawnPoints(ptr=%p)", m_ptr));
    CUtlVector<GSpawnPoint*>* vec = GetSchemaValue<CUtlVector<GSpawnPoint*>*>(m_ptr, "CCSGameRules", "m_CTSpawnPoints"); std::vector<GSpawnPoint*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCCSGameRules::SetCTSpawnPoints(std::vector<GSpawnPoint*> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->CTSpawnPoints(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GSpawnPoint*>(m_ptr, "CCSGameRules", "m_CTSpawnPoints", false, value);
}
std::vector<GSpawnPoint*> GCCSGameRules::GetTerroristSpawnPoints() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->TerroristSpawnPoints(ptr=%p)", m_ptr));
    CUtlVector<GSpawnPoint*>* vec = GetSchemaValue<CUtlVector<GSpawnPoint*>*>(m_ptr, "CCSGameRules", "m_TerroristSpawnPoints"); std::vector<GSpawnPoint*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCCSGameRules::SetTerroristSpawnPoints(std::vector<GSpawnPoint*> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->TerroristSpawnPoints(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GSpawnPoint*>(m_ptr, "CCSGameRules", "m_TerroristSpawnPoints", false, value);
}
bool GCCSGameRules::GetIsUnreservedGameServer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->IsUnreservedGameServer(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bIsUnreservedGameServer");
}
void GCCSGameRules::SetIsUnreservedGameServer(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->IsUnreservedGameServer(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bIsUnreservedGameServer", false, value);
}
float GCCSGameRules::GetAutobalanceDisplayTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->AutobalanceDisplayTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_fAutobalanceDisplayTime");
}
void GCCSGameRules::SetAutobalanceDisplayTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->AutobalanceDisplayTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_fAutobalanceDisplayTime", false, value);
}
bool GCCSGameRules::GetAllowWeaponSwitch() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->AllowWeaponSwitch(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bAllowWeaponSwitch");
}
void GCCSGameRules::SetAllowWeaponSwitch(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->AllowWeaponSwitch(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bAllowWeaponSwitch", false, value);
}
bool GCCSGameRules::GetRoundTimeWarningTriggered() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->RoundTimeWarningTriggered(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bRoundTimeWarningTriggered");
}
void GCCSGameRules::SetRoundTimeWarningTriggered(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->RoundTimeWarningTriggered(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bRoundTimeWarningTriggered", false, value);
}
float GCCSGameRules::GetPhaseChangeAnnouncementTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->PhaseChangeAnnouncementTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_phaseChangeAnnouncementTime");
}
void GCCSGameRules::SetPhaseChangeAnnouncementTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->PhaseChangeAnnouncementTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_phaseChangeAnnouncementTime", false, value);
}
float GCCSGameRules::GetNextUpdateTeamClanNamesTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->NextUpdateTeamClanNamesTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_fNextUpdateTeamClanNamesTime");
}
void GCCSGameRules::SetNextUpdateTeamClanNamesTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->NextUpdateTeamClanNamesTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_fNextUpdateTeamClanNamesTime", false, value);
}
float GCCSGameRules::GetLastThinkTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->LastThinkTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_flLastThinkTime");
}
void GCCSGameRules::SetLastThinkTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->LastThinkTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_flLastThinkTime", false, value);
}
float GCCSGameRules::GetAccumulatedRoundOffDamage() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->AccumulatedRoundOffDamage(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_fAccumulatedRoundOffDamage");
}
void GCCSGameRules::SetAccumulatedRoundOffDamage(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->AccumulatedRoundOffDamage(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_fAccumulatedRoundOffDamage", false, value);
}
int32_t GCCSGameRules::GetShorthandedBonusLastEvalRound() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->ShorthandedBonusLastEvalRound(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_nShorthandedBonusLastEvalRound");
}
void GCCSGameRules::SetShorthandedBonusLastEvalRound(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->ShorthandedBonusLastEvalRound(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nShorthandedBonusLastEvalRound", false, value);
}
int32_t GCCSGameRules::GetMatchAbortedEarlyReason() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->MatchAbortedEarlyReason(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_nMatchAbortedEarlyReason");
}
void GCCSGameRules::SetMatchAbortedEarlyReason(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->MatchAbortedEarlyReason(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nMatchAbortedEarlyReason", false, value);
}
bool GCCSGameRules::GetHasTriggeredRoundStartMusic() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->HasTriggeredRoundStartMusic(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bHasTriggeredRoundStartMusic");
}
void GCCSGameRules::SetHasTriggeredRoundStartMusic(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->HasTriggeredRoundStartMusic(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bHasTriggeredRoundStartMusic", false, value);
}
bool GCCSGameRules::GetSwitchingTeamsAtRoundReset() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->SwitchingTeamsAtRoundReset(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bSwitchingTeamsAtRoundReset");
}
void GCCSGameRules::SetSwitchingTeamsAtRoundReset(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->SwitchingTeamsAtRoundReset(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bSwitchingTeamsAtRoundReset", false, value);
}
GCCSGameModeRules GCCSGameRules::GetGameModeRules() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->GameModeRules(ptr=%p)", m_ptr));
    GCCSGameModeRules value(*(void**)GetSchemaPtr(m_ptr, "CCSGameRules", "m_pGameModeRules"));
    return value;
}
void GCCSGameRules::SetGameModeRules(GCCSGameModeRules value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->GameModeRules(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules","m_pGameModeRules", false, (char*)value.GetPtr());
}
GCBaseEntity GCCSGameRules::GetPlayerResource() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->PlayerResource(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CCSGameRules", "m_hPlayerResource").Get()));
    return value;
}
void GCCSGameRules::SetPlayerResource(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->PlayerResource(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'PlayerResource' is not possible.\n");
}
GCRetakeGameRules GCCSGameRules::GetRetakeRules() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->RetakeRules(ptr=%p)", m_ptr));
    GCRetakeGameRules value(GetSchemaPtr(m_ptr, "CCSGameRules", "m_RetakeRules"));
    return value;
}
void GCCSGameRules::SetRetakeRules(GCRetakeGameRules value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->RetakeRules(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'RetakeRules' is not possible.\n");
}
std::vector<bool> GCCSGameRules::GetTeamLastKillUsedUniqueWeaponMatch() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->TeamLastKillUsedUniqueWeaponMatch(ptr=%p,size=4)", m_ptr));
    bool* outValue = (bool*)GetSchemaPtr(m_ptr, "CCSGameRules", "m_bTeamLastKillUsedUniqueWeaponMatch"); std::vector<bool> ret; for(int i = 0; i < 4; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCCSGameRules::SetTeamLastKillUsedUniqueWeaponMatch(std::vector<bool> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->TeamLastKillUsedUniqueWeaponMatch(ptr=%p,size=4)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'TeamLastKillUsedUniqueWeaponMatch' is not possible.\n");
}
uint32_t GCCSGameRules::GetMatchEndCount() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->MatchEndCount(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CCSGameRules", "m_nMatchEndCount");
}
void GCCSGameRules::SetMatchEndCount(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->MatchEndCount(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nMatchEndCount", false, value);
}
int32_t GCCSGameRules::GetTTeamIntroVariant() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->TTeamIntroVariant(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_nTTeamIntroVariant");
}
void GCCSGameRules::SetTTeamIntroVariant(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->TTeamIntroVariant(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nTTeamIntroVariant", false, value);
}
int32_t GCCSGameRules::GetCTTeamIntroVariant() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->CTTeamIntroVariant(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_nCTTeamIntroVariant");
}
void GCCSGameRules::SetCTTeamIntroVariant(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->CTTeamIntroVariant(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nCTTeamIntroVariant", false, value);
}
bool GCCSGameRules::GetTeamIntroPeriod() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->TeamIntroPeriod(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bTeamIntroPeriod");
}
void GCCSGameRules::SetTeamIntroPeriod(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->TeamIntroPeriod(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bTeamIntroPeriod", false, value);
}
float GCCSGameRules::GetTeamIntroPeriodEnd() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->TeamIntroPeriodEnd(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSGameRules", "m_fTeamIntroPeriodEnd");
}
void GCCSGameRules::SetTeamIntroPeriodEnd(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->TeamIntroPeriodEnd(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_fTeamIntroPeriodEnd", false, value);
}
bool GCCSGameRules::GetPlayedTeamIntroVO() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->PlayedTeamIntroVO(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bPlayedTeamIntroVO");
}
void GCCSGameRules::SetPlayedTeamIntroVO(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->PlayedTeamIntroVO(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bPlayedTeamIntroVO", false, value);
}
int32_t GCCSGameRules::GetRoundEndWinnerTeam() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->RoundEndWinnerTeam(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iRoundEndWinnerTeam");
}
void GCCSGameRules::SetRoundEndWinnerTeam(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->RoundEndWinnerTeam(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iRoundEndWinnerTeam", false, value);
}
int32_t GCCSGameRules::GetRoundEndReason() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->RoundEndReason(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_eRoundEndReason");
}
void GCCSGameRules::SetRoundEndReason(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->RoundEndReason(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_eRoundEndReason", false, value);
}
bool GCCSGameRules::GetRoundEndShowTimerDefend() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->RoundEndShowTimerDefend(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bRoundEndShowTimerDefend");
}
void GCCSGameRules::SetRoundEndShowTimerDefend(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->RoundEndShowTimerDefend(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bRoundEndShowTimerDefend", false, value);
}
int32_t GCCSGameRules::GetRoundEndTimerTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->RoundEndTimerTime(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iRoundEndTimerTime");
}
void GCCSGameRules::SetRoundEndTimerTime(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->RoundEndTimerTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iRoundEndTimerTime", false, value);
}
std::string GCCSGameRules::GetRoundEndFunFactToken() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->RoundEndFunFactToken(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlString>(m_ptr, "CCSGameRules", "m_sRoundEndFunFactToken").Get();
}
void GCCSGameRules::SetRoundEndFunFactToken(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->RoundEndFunFactToken(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_sRoundEndFunFactToken", false, CUtlString(value.c_str()));
}
int32_t GCCSGameRules::GetRoundEndFunFactPlayerSlot() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->RoundEndFunFactPlayerSlot(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iRoundEndFunFactPlayerSlot");
}
void GCCSGameRules::SetRoundEndFunFactPlayerSlot(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->RoundEndFunFactPlayerSlot(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iRoundEndFunFactPlayerSlot", false, value);
}
int32_t GCCSGameRules::GetRoundEndFunFactData1() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->RoundEndFunFactData1(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iRoundEndFunFactData1");
}
void GCCSGameRules::SetRoundEndFunFactData1(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->RoundEndFunFactData1(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iRoundEndFunFactData1", false, value);
}
int32_t GCCSGameRules::GetRoundEndFunFactData2() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->RoundEndFunFactData2(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iRoundEndFunFactData2");
}
void GCCSGameRules::SetRoundEndFunFactData2(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->RoundEndFunFactData2(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iRoundEndFunFactData2", false, value);
}
int32_t GCCSGameRules::GetRoundEndFunFactData3() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->RoundEndFunFactData3(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iRoundEndFunFactData3");
}
void GCCSGameRules::SetRoundEndFunFactData3(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->RoundEndFunFactData3(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iRoundEndFunFactData3", false, value);
}
std::string GCCSGameRules::GetRoundEndMessage() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->RoundEndMessage(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlString>(m_ptr, "CCSGameRules", "m_sRoundEndMessage").Get();
}
void GCCSGameRules::SetRoundEndMessage(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->RoundEndMessage(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_sRoundEndMessage", false, CUtlString(value.c_str()));
}
int32_t GCCSGameRules::GetRoundEndPlayerCount() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->RoundEndPlayerCount(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iRoundEndPlayerCount");
}
void GCCSGameRules::SetRoundEndPlayerCount(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->RoundEndPlayerCount(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iRoundEndPlayerCount", false, value);
}
bool GCCSGameRules::GetRoundEndNoMusic() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->RoundEndNoMusic(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSGameRules", "m_bRoundEndNoMusic");
}
void GCCSGameRules::SetRoundEndNoMusic(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->RoundEndNoMusic(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_bRoundEndNoMusic", false, value);
}
int32_t GCCSGameRules::GetRoundEndLegacy() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->RoundEndLegacy(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iRoundEndLegacy");
}
void GCCSGameRules::SetRoundEndLegacy(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->RoundEndLegacy(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iRoundEndLegacy", false, value);
}
uint32_t GCCSGameRules::GetRoundEndCount() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->RoundEndCount(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CCSGameRules", "m_nRoundEndCount");
}
void GCCSGameRules::SetRoundEndCount(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->RoundEndCount(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nRoundEndCount", false, value);
}
int32_t GCCSGameRules::GetRoundStartRoundNumber() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->RoundStartRoundNumber(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSGameRules", "m_iRoundStartRoundNumber");
}
void GCCSGameRules::SetRoundStartRoundNumber(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->RoundStartRoundNumber(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_iRoundStartRoundNumber", false, value);
}
uint32_t GCCSGameRules::GetRoundStartCount() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->RoundStartCount(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CCSGameRules", "m_nRoundStartCount");
}
void GCCSGameRules::SetRoundStartCount(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->RoundStartCount(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_nRoundStartCount", false, value);
}
double GCCSGameRules::GetLastPerfSampleTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSGameRules->LastPerfSampleTime(ptr=%p)", m_ptr));
    return GetSchemaValue<double>(m_ptr, "CCSGameRules", "m_flLastPerfSampleTime");
}
void GCCSGameRules::SetLastPerfSampleTime(double value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSGameRules->LastPerfSampleTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSGameRules", "m_flLastPerfSampleTime", false, value);
}
void* GCCSGameRules::GetPtr() {
    return m_ptr;
}
std::string GCCSGameRules::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCCSGameRules::IsValid() {
    return (m_ptr != nullptr);
}
GCTeamplayRules GCCSGameRules::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSGameRules::GetParent(ptr=%p)", m_ptr));
    GCTeamplayRules value(m_ptr);
    return value;
}
void GCCSGameRules::SetParent(GCTeamplayRules value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSGameRules::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCCSGameRules(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCCSGameRules>("CCSGameRules")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("FreezePeriod", &GCCSGameRules::GetFreezePeriod, &GCCSGameRules::SetFreezePeriod)
        .addProperty("WarmupPeriod", &GCCSGameRules::GetWarmupPeriod, &GCCSGameRules::SetWarmupPeriod)
        .addProperty("WarmupPeriodEnd", &GCCSGameRules::GetWarmupPeriodEnd, &GCCSGameRules::SetWarmupPeriodEnd)
        .addProperty("WarmupPeriodStart", &GCCSGameRules::GetWarmupPeriodStart, &GCCSGameRules::SetWarmupPeriodStart)
        .addProperty("ServerPaused", &GCCSGameRules::GetServerPaused, &GCCSGameRules::SetServerPaused)
        .addProperty("TerroristTimeOutActive", &GCCSGameRules::GetTerroristTimeOutActive, &GCCSGameRules::SetTerroristTimeOutActive)
        .addProperty("CTTimeOutActive", &GCCSGameRules::GetCTTimeOutActive, &GCCSGameRules::SetCTTimeOutActive)
        .addProperty("TerroristTimeOutRemaining", &GCCSGameRules::GetTerroristTimeOutRemaining, &GCCSGameRules::SetTerroristTimeOutRemaining)
        .addProperty("CTTimeOutRemaining", &GCCSGameRules::GetCTTimeOutRemaining, &GCCSGameRules::SetCTTimeOutRemaining)
        .addProperty("TerroristTimeOuts", &GCCSGameRules::GetTerroristTimeOuts, &GCCSGameRules::SetTerroristTimeOuts)
        .addProperty("CTTimeOuts", &GCCSGameRules::GetCTTimeOuts, &GCCSGameRules::SetCTTimeOuts)
        .addProperty("TechnicalTimeOut", &GCCSGameRules::GetTechnicalTimeOut, &GCCSGameRules::SetTechnicalTimeOut)
        .addProperty("MatchWaitingForResume", &GCCSGameRules::GetMatchWaitingForResume, &GCCSGameRules::SetMatchWaitingForResume)
        .addProperty("RoundTime", &GCCSGameRules::GetRoundTime, &GCCSGameRules::SetRoundTime)
        .addProperty("MatchStartTime", &GCCSGameRules::GetMatchStartTime, &GCCSGameRules::SetMatchStartTime)
        .addProperty("RoundStartTime", &GCCSGameRules::GetRoundStartTime, &GCCSGameRules::SetRoundStartTime)
        .addProperty("RestartRoundTime", &GCCSGameRules::GetRestartRoundTime, &GCCSGameRules::SetRestartRoundTime)
        .addProperty("GameRestart", &GCCSGameRules::GetGameRestart, &GCCSGameRules::SetGameRestart)
        .addProperty("GameStartTime", &GCCSGameRules::GetGameStartTime, &GCCSGameRules::SetGameStartTime)
        .addProperty("TimeUntilNextPhaseStarts", &GCCSGameRules::GetTimeUntilNextPhaseStarts, &GCCSGameRules::SetTimeUntilNextPhaseStarts)
        .addProperty("GamePhase", &GCCSGameRules::GetGamePhase, &GCCSGameRules::SetGamePhase)
        .addProperty("TotalRoundsPlayed", &GCCSGameRules::GetTotalRoundsPlayed, &GCCSGameRules::SetTotalRoundsPlayed)
        .addProperty("RoundsPlayedThisPhase", &GCCSGameRules::GetRoundsPlayedThisPhase, &GCCSGameRules::SetRoundsPlayedThisPhase)
        .addProperty("OvertimePlaying", &GCCSGameRules::GetOvertimePlaying, &GCCSGameRules::SetOvertimePlaying)
        .addProperty("HostagesRemaining", &GCCSGameRules::GetHostagesRemaining, &GCCSGameRules::SetHostagesRemaining)
        .addProperty("AnyHostageReached", &GCCSGameRules::GetAnyHostageReached, &GCCSGameRules::SetAnyHostageReached)
        .addProperty("MapHasBombTarget", &GCCSGameRules::GetMapHasBombTarget, &GCCSGameRules::SetMapHasBombTarget)
        .addProperty("MapHasRescueZone", &GCCSGameRules::GetMapHasRescueZone, &GCCSGameRules::SetMapHasRescueZone)
        .addProperty("MapHasBuyZone", &GCCSGameRules::GetMapHasBuyZone, &GCCSGameRules::SetMapHasBuyZone)
        .addProperty("IsQueuedMatchmaking", &GCCSGameRules::GetIsQueuedMatchmaking, &GCCSGameRules::SetIsQueuedMatchmaking)
        .addProperty("QueuedMatchmakingMode", &GCCSGameRules::GetQueuedMatchmakingMode, &GCCSGameRules::SetQueuedMatchmakingMode)
        .addProperty("IsValveDS", &GCCSGameRules::GetIsValveDS, &GCCSGameRules::SetIsValveDS)
        .addProperty("LogoMap", &GCCSGameRules::GetLogoMap, &GCCSGameRules::SetLogoMap)
        .addProperty("PlayAllStepSoundsOnServer", &GCCSGameRules::GetPlayAllStepSoundsOnServer, &GCCSGameRules::SetPlayAllStepSoundsOnServer)
        .addProperty("SpectatorSlotCount", &GCCSGameRules::GetSpectatorSlotCount, &GCCSGameRules::SetSpectatorSlotCount)
        .addProperty("MatchDevice", &GCCSGameRules::GetMatchDevice, &GCCSGameRules::SetMatchDevice)
        .addProperty("HasMatchStarted", &GCCSGameRules::GetHasMatchStarted, &GCCSGameRules::SetHasMatchStarted)
        .addProperty("NextMapInMapgroup", &GCCSGameRules::GetNextMapInMapgroup, &GCCSGameRules::SetNextMapInMapgroup)
        .addProperty("TournamentEventName", &GCCSGameRules::GetTournamentEventName, &GCCSGameRules::SetTournamentEventName)
        .addProperty("TournamentEventStage", &GCCSGameRules::GetTournamentEventStage, &GCCSGameRules::SetTournamentEventStage)
        .addProperty("MatchStatTxt", &GCCSGameRules::GetMatchStatTxt, &GCCSGameRules::SetMatchStatTxt)
        .addProperty("TournamentPredictionsTxt", &GCCSGameRules::GetTournamentPredictionsTxt, &GCCSGameRules::SetTournamentPredictionsTxt)
        .addProperty("TournamentPredictionsPct", &GCCSGameRules::GetTournamentPredictionsPct, &GCCSGameRules::SetTournamentPredictionsPct)
        .addProperty("CMMItemDropRevealStartTime", &GCCSGameRules::GetCMMItemDropRevealStartTime, &GCCSGameRules::SetCMMItemDropRevealStartTime)
        .addProperty("CMMItemDropRevealEndTime", &GCCSGameRules::GetCMMItemDropRevealEndTime, &GCCSGameRules::SetCMMItemDropRevealEndTime)
        .addProperty("IsDroppingItems", &GCCSGameRules::GetIsDroppingItems, &GCCSGameRules::SetIsDroppingItems)
        .addProperty("IsQuestEligible", &GCCSGameRules::GetIsQuestEligible, &GCCSGameRules::SetIsQuestEligible)
        .addProperty("IsHltvActive", &GCCSGameRules::GetIsHltvActive, &GCCSGameRules::SetIsHltvActive)
        .addProperty("ProhibitedItemIndices", &GCCSGameRules::GetProhibitedItemIndices, &GCCSGameRules::SetProhibitedItemIndices)
        .addProperty("TournamentActiveCasterAccounts", &GCCSGameRules::GetTournamentActiveCasterAccounts, &GCCSGameRules::SetTournamentActiveCasterAccounts)
        .addProperty("NumBestOfMaps", &GCCSGameRules::GetNumBestOfMaps, &GCCSGameRules::SetNumBestOfMaps)
        .addProperty("HalloweenMaskListSeed", &GCCSGameRules::GetHalloweenMaskListSeed, &GCCSGameRules::SetHalloweenMaskListSeed)
        .addProperty("BombDropped", &GCCSGameRules::GetBombDropped, &GCCSGameRules::SetBombDropped)
        .addProperty("BombPlanted", &GCCSGameRules::GetBombPlanted, &GCCSGameRules::SetBombPlanted)
        .addProperty("RoundWinStatus", &GCCSGameRules::GetRoundWinStatus, &GCCSGameRules::SetRoundWinStatus)
        .addProperty("RoundWinReason", &GCCSGameRules::GetRoundWinReason, &GCCSGameRules::SetRoundWinReason)
        .addProperty("TCantBuy", &GCCSGameRules::GetTCantBuy, &GCCSGameRules::SetTCantBuy)
        .addProperty("CTCantBuy", &GCCSGameRules::GetCTCantBuy, &GCCSGameRules::SetCTCantBuy)
        .addProperty("MatchStats_RoundResults", &GCCSGameRules::GetMatchStats_RoundResults, &GCCSGameRules::SetMatchStats_RoundResults)
        .addProperty("MatchStats_PlayersAlive_CT", &GCCSGameRules::GetMatchStats_PlayersAlive_CT, &GCCSGameRules::SetMatchStats_PlayersAlive_CT)
        .addProperty("MatchStats_PlayersAlive_T", &GCCSGameRules::GetMatchStats_PlayersAlive_T, &GCCSGameRules::SetMatchStats_PlayersAlive_T)
        .addProperty("TeamRespawnWaveTimes", &GCCSGameRules::GetTeamRespawnWaveTimes, &GCCSGameRules::SetTeamRespawnWaveTimes)
        .addProperty("NextRespawnWave", &GCCSGameRules::GetNextRespawnWave, &GCCSGameRules::SetNextRespawnWave)
        .addProperty("ServerQuestID", &GCCSGameRules::GetServerQuestID, &GCCSGameRules::SetServerQuestID)
        .addProperty("MinimapMins", &GCCSGameRules::GetMinimapMins, &GCCSGameRules::SetMinimapMins)
        .addProperty("MinimapMaxs", &GCCSGameRules::GetMinimapMaxs, &GCCSGameRules::SetMinimapMaxs)
        .addProperty("MinimapVerticalSectionHeights", &GCCSGameRules::GetMinimapVerticalSectionHeights, &GCCSGameRules::SetMinimapVerticalSectionHeights)
        .addProperty("SpawnedTerrorHuntHeavy", &GCCSGameRules::GetSpawnedTerrorHuntHeavy, &GCCSGameRules::SetSpawnedTerrorHuntHeavy)
        .addProperty("EndMatchMapGroupVoteTypes", &GCCSGameRules::GetEndMatchMapGroupVoteTypes, &GCCSGameRules::SetEndMatchMapGroupVoteTypes)
        .addProperty("EndMatchMapGroupVoteOptions", &GCCSGameRules::GetEndMatchMapGroupVoteOptions, &GCCSGameRules::SetEndMatchMapGroupVoteOptions)
        .addProperty("EndMatchMapVoteWinner", &GCCSGameRules::GetEndMatchMapVoteWinner, &GCCSGameRules::SetEndMatchMapVoteWinner)
        .addProperty("NumConsecutiveCTLoses", &GCCSGameRules::GetNumConsecutiveCTLoses, &GCCSGameRules::SetNumConsecutiveCTLoses)
        .addProperty("NumConsecutiveTerroristLoses", &GCCSGameRules::GetNumConsecutiveTerroristLoses, &GCCSGameRules::SetNumConsecutiveTerroristLoses)
        .addProperty("HasHostageBeenTouched", &GCCSGameRules::GetHasHostageBeenTouched, &GCCSGameRules::SetHasHostageBeenTouched)
        .addProperty("IntermissionStartTime", &GCCSGameRules::GetIntermissionStartTime, &GCCSGameRules::SetIntermissionStartTime)
        .addProperty("IntermissionEndTime", &GCCSGameRules::GetIntermissionEndTime, &GCCSGameRules::SetIntermissionEndTime)
        .addProperty("LevelInitialized", &GCCSGameRules::GetLevelInitialized, &GCCSGameRules::SetLevelInitialized)
        .addProperty("TotalRoundsPlayed1", &GCCSGameRules::GetTotalRoundsPlayed1, &GCCSGameRules::SetTotalRoundsPlayed1)
        .addProperty("UnBalancedRounds", &GCCSGameRules::GetUnBalancedRounds, &GCCSGameRules::SetUnBalancedRounds)
        .addProperty("EndMatchOnRoundReset", &GCCSGameRules::GetEndMatchOnRoundReset, &GCCSGameRules::SetEndMatchOnRoundReset)
        .addProperty("EndMatchOnThink", &GCCSGameRules::GetEndMatchOnThink, &GCCSGameRules::SetEndMatchOnThink)
        .addProperty("FreezeTime", &GCCSGameRules::GetFreezeTime, &GCCSGameRules::SetFreezeTime)
        .addProperty("NumTerrorist", &GCCSGameRules::GetNumTerrorist, &GCCSGameRules::SetNumTerrorist)
        .addProperty("NumCT", &GCCSGameRules::GetNumCT, &GCCSGameRules::SetNumCT)
        .addProperty("NumSpawnableTerrorist", &GCCSGameRules::GetNumSpawnableTerrorist, &GCCSGameRules::SetNumSpawnableTerrorist)
        .addProperty("NumSpawnableCT", &GCCSGameRules::GetNumSpawnableCT, &GCCSGameRules::SetNumSpawnableCT)
        .addProperty("SelectedHostageSpawnIndices", &GCCSGameRules::GetSelectedHostageSpawnIndices, &GCCSGameRules::SetSelectedHostageSpawnIndices)
        .addProperty("SpawnPointsRandomSeed", &GCCSGameRules::GetSpawnPointsRandomSeed, &GCCSGameRules::SetSpawnPointsRandomSeed)
        .addProperty("FirstConnected", &GCCSGameRules::GetFirstConnected, &GCCSGameRules::SetFirstConnected)
        .addProperty("CompleteReset", &GCCSGameRules::GetCompleteReset, &GCCSGameRules::SetCompleteReset)
        .addProperty("PickNewTeamsOnReset", &GCCSGameRules::GetPickNewTeamsOnReset, &GCCSGameRules::SetPickNewTeamsOnReset)
        .addProperty("ScrambleTeamsOnRestart", &GCCSGameRules::GetScrambleTeamsOnRestart, &GCCSGameRules::SetScrambleTeamsOnRestart)
        .addProperty("SwapTeamsOnRestart", &GCCSGameRules::GetSwapTeamsOnRestart, &GCCSGameRules::SetSwapTeamsOnRestart)
        .addProperty("EndMatchTiedVotes", &GCCSGameRules::GetEndMatchTiedVotes, &GCCSGameRules::SetEndMatchTiedVotes)
        .addProperty("NeedToAskPlayersForContinueVote", &GCCSGameRules::GetNeedToAskPlayersForContinueVote, &GCCSGameRules::SetNeedToAskPlayersForContinueVote)
        .addProperty("NumQueuedMatchmakingAccounts", &GCCSGameRules::GetNumQueuedMatchmakingAccounts, &GCCSGameRules::SetNumQueuedMatchmakingAccounts)
        .addProperty("AvgPlayerRank", &GCCSGameRules::GetAvgPlayerRank, &GCCSGameRules::SetAvgPlayerRank)
        .addProperty("QueuedMatchmakingReservationString", &GCCSGameRules::GetQueuedMatchmakingReservationString, &GCCSGameRules::SetQueuedMatchmakingReservationString)
        .addProperty("NumTotalTournamentDrops", &GCCSGameRules::GetNumTotalTournamentDrops, &GCCSGameRules::SetNumTotalTournamentDrops)
        .addProperty("NumSpectatorsCountMax", &GCCSGameRules::GetNumSpectatorsCountMax, &GCCSGameRules::SetNumSpectatorsCountMax)
        .addProperty("NumSpectatorsCountMaxTV", &GCCSGameRules::GetNumSpectatorsCountMaxTV, &GCCSGameRules::SetNumSpectatorsCountMaxTV)
        .addProperty("NumSpectatorsCountMaxLnk", &GCCSGameRules::GetNumSpectatorsCountMaxLnk, &GCCSGameRules::SetNumSpectatorsCountMaxLnk)
        .addProperty("ForceTeamChangeSilent", &GCCSGameRules::GetForceTeamChangeSilent, &GCCSGameRules::SetForceTeamChangeSilent)
        .addProperty("LoadingRoundBackupData", &GCCSGameRules::GetLoadingRoundBackupData, &GCCSGameRules::SetLoadingRoundBackupData)
        .addProperty("MatchInfoShowType", &GCCSGameRules::GetMatchInfoShowType, &GCCSGameRules::SetMatchInfoShowType)
        .addProperty("MatchInfoDecidedTime", &GCCSGameRules::GetMatchInfoDecidedTime, &GCCSGameRules::SetMatchInfoDecidedTime)
        .addProperty("MTeamDMLastWinningTeamNumber", &GCCSGameRules::GetMTeamDMLastWinningTeamNumber, &GCCSGameRules::SetMTeamDMLastWinningTeamNumber)
        .addProperty("MTeamDMLastThinkTime", &GCCSGameRules::GetMTeamDMLastThinkTime, &GCCSGameRules::SetMTeamDMLastThinkTime)
        .addProperty("TeamDMLastAnnouncementTime", &GCCSGameRules::GetTeamDMLastAnnouncementTime, &GCCSGameRules::SetTeamDMLastAnnouncementTime)
        .addProperty("AccountTerrorist", &GCCSGameRules::GetAccountTerrorist, &GCCSGameRules::SetAccountTerrorist)
        .addProperty("AccountCT", &GCCSGameRules::GetAccountCT, &GCCSGameRules::SetAccountCT)
        .addProperty("SpawnPointCount_Terrorist", &GCCSGameRules::GetSpawnPointCount_Terrorist, &GCCSGameRules::SetSpawnPointCount_Terrorist)
        .addProperty("SpawnPointCount_CT", &GCCSGameRules::GetSpawnPointCount_CT, &GCCSGameRules::SetSpawnPointCount_CT)
        .addProperty("MaxNumTerrorists", &GCCSGameRules::GetMaxNumTerrorists, &GCCSGameRules::SetMaxNumTerrorists)
        .addProperty("MaxNumCTs", &GCCSGameRules::GetMaxNumCTs, &GCCSGameRules::SetMaxNumCTs)
        .addProperty("LoserBonusMostRecentTeam", &GCCSGameRules::GetLoserBonusMostRecentTeam, &GCCSGameRules::SetLoserBonusMostRecentTeam)
        .addProperty("TmNextPeriodicThink", &GCCSGameRules::GetTmNextPeriodicThink, &GCCSGameRules::SetTmNextPeriodicThink)
        .addProperty("VoiceWonMatchBragFired", &GCCSGameRules::GetVoiceWonMatchBragFired, &GCCSGameRules::SetVoiceWonMatchBragFired)
        .addProperty("WarmupNextChatNoticeTime", &GCCSGameRules::GetWarmupNextChatNoticeTime, &GCCSGameRules::SetWarmupNextChatNoticeTime)
        .addProperty("HostagesRescued", &GCCSGameRules::GetHostagesRescued, &GCCSGameRules::SetHostagesRescued)
        .addProperty("HostagesTouched", &GCCSGameRules::GetHostagesTouched, &GCCSGameRules::SetHostagesTouched)
        .addProperty("NextHostageAnnouncement", &GCCSGameRules::GetNextHostageAnnouncement, &GCCSGameRules::SetNextHostageAnnouncement)
        .addProperty("NoTerroristsKilled", &GCCSGameRules::GetNoTerroristsKilled, &GCCSGameRules::SetNoTerroristsKilled)
        .addProperty("NoCTsKilled", &GCCSGameRules::GetNoCTsKilled, &GCCSGameRules::SetNoCTsKilled)
        .addProperty("NoEnemiesKilled", &GCCSGameRules::GetNoEnemiesKilled, &GCCSGameRules::SetNoEnemiesKilled)
        .addProperty("CanDonateWeapons", &GCCSGameRules::GetCanDonateWeapons, &GCCSGameRules::SetCanDonateWeapons)
        .addProperty("FirstKillTime", &GCCSGameRules::GetFirstKillTime, &GCCSGameRules::SetFirstKillTime)
        .addProperty("FirstBloodTime", &GCCSGameRules::GetFirstBloodTime, &GCCSGameRules::SetFirstBloodTime)
        .addProperty("HostageWasInjured", &GCCSGameRules::GetHostageWasInjured, &GCCSGameRules::SetHostageWasInjured)
        .addProperty("HostageWasKilled", &GCCSGameRules::GetHostageWasKilled, &GCCSGameRules::SetHostageWasKilled)
        .addProperty("VoteCalled", &GCCSGameRules::GetVoteCalled, &GCCSGameRules::SetVoteCalled)
        .addProperty("ServerVoteOnReset", &GCCSGameRules::GetServerVoteOnReset, &GCCSGameRules::SetServerVoteOnReset)
        .addProperty("VoteCheckThrottle", &GCCSGameRules::GetVoteCheckThrottle, &GCCSGameRules::SetVoteCheckThrottle)
        .addProperty("BuyTimeEnded", &GCCSGameRules::GetBuyTimeEnded, &GCCSGameRules::SetBuyTimeEnded)
        .addProperty("LastFreezeEndBeep", &GCCSGameRules::GetLastFreezeEndBeep, &GCCSGameRules::SetLastFreezeEndBeep)
        .addProperty("TargetBombed", &GCCSGameRules::GetTargetBombed, &GCCSGameRules::SetTargetBombed)
        .addProperty("BombDefused", &GCCSGameRules::GetBombDefused, &GCCSGameRules::SetBombDefused)
        .addProperty("MapHasBombZone", &GCCSGameRules::GetMapHasBombZone, &GCCSGameRules::SetMapHasBombZone)
        .addProperty("MainCTSpawnPos", &GCCSGameRules::GetMainCTSpawnPos, &GCCSGameRules::SetMainCTSpawnPos)
        .addProperty("CTSpawnPointsMasterList", &GCCSGameRules::GetCTSpawnPointsMasterList, &GCCSGameRules::SetCTSpawnPointsMasterList)
        .addProperty("TerroristSpawnPointsMasterList", &GCCSGameRules::GetTerroristSpawnPointsMasterList, &GCCSGameRules::SetTerroristSpawnPointsMasterList)
        .addProperty("RespawningAllRespawnablePlayers", &GCCSGameRules::GetRespawningAllRespawnablePlayers, &GCCSGameRules::SetRespawningAllRespawnablePlayers)
        .addProperty("NextCTSpawnPoint", &GCCSGameRules::GetNextCTSpawnPoint, &GCCSGameRules::SetNextCTSpawnPoint)
        .addProperty("CTSpawnPointUsedTime", &GCCSGameRules::GetCTSpawnPointUsedTime, &GCCSGameRules::SetCTSpawnPointUsedTime)
        .addProperty("NextTerroristSpawnPoint", &GCCSGameRules::GetNextTerroristSpawnPoint, &GCCSGameRules::SetNextTerroristSpawnPoint)
        .addProperty("TerroristSpawnPointUsedTime", &GCCSGameRules::GetTerroristSpawnPointUsedTime, &GCCSGameRules::SetTerroristSpawnPointUsedTime)
        .addProperty("CTSpawnPoints", &GCCSGameRules::GetCTSpawnPoints, &GCCSGameRules::SetCTSpawnPoints)
        .addProperty("TerroristSpawnPoints", &GCCSGameRules::GetTerroristSpawnPoints, &GCCSGameRules::SetTerroristSpawnPoints)
        .addProperty("IsUnreservedGameServer", &GCCSGameRules::GetIsUnreservedGameServer, &GCCSGameRules::SetIsUnreservedGameServer)
        .addProperty("AutobalanceDisplayTime", &GCCSGameRules::GetAutobalanceDisplayTime, &GCCSGameRules::SetAutobalanceDisplayTime)
        .addProperty("AllowWeaponSwitch", &GCCSGameRules::GetAllowWeaponSwitch, &GCCSGameRules::SetAllowWeaponSwitch)
        .addProperty("RoundTimeWarningTriggered", &GCCSGameRules::GetRoundTimeWarningTriggered, &GCCSGameRules::SetRoundTimeWarningTriggered)
        .addProperty("PhaseChangeAnnouncementTime", &GCCSGameRules::GetPhaseChangeAnnouncementTime, &GCCSGameRules::SetPhaseChangeAnnouncementTime)
        .addProperty("NextUpdateTeamClanNamesTime", &GCCSGameRules::GetNextUpdateTeamClanNamesTime, &GCCSGameRules::SetNextUpdateTeamClanNamesTime)
        .addProperty("LastThinkTime", &GCCSGameRules::GetLastThinkTime, &GCCSGameRules::SetLastThinkTime)
        .addProperty("AccumulatedRoundOffDamage", &GCCSGameRules::GetAccumulatedRoundOffDamage, &GCCSGameRules::SetAccumulatedRoundOffDamage)
        .addProperty("ShorthandedBonusLastEvalRound", &GCCSGameRules::GetShorthandedBonusLastEvalRound, &GCCSGameRules::SetShorthandedBonusLastEvalRound)
        .addProperty("MatchAbortedEarlyReason", &GCCSGameRules::GetMatchAbortedEarlyReason, &GCCSGameRules::SetMatchAbortedEarlyReason)
        .addProperty("HasTriggeredRoundStartMusic", &GCCSGameRules::GetHasTriggeredRoundStartMusic, &GCCSGameRules::SetHasTriggeredRoundStartMusic)
        .addProperty("SwitchingTeamsAtRoundReset", &GCCSGameRules::GetSwitchingTeamsAtRoundReset, &GCCSGameRules::SetSwitchingTeamsAtRoundReset)
        .addProperty("GameModeRules", &GCCSGameRules::GetGameModeRules, &GCCSGameRules::SetGameModeRules)
        .addProperty("PlayerResource", &GCCSGameRules::GetPlayerResource, &GCCSGameRules::SetPlayerResource)
        .addProperty("RetakeRules", &GCCSGameRules::GetRetakeRules, &GCCSGameRules::SetRetakeRules)
        .addProperty("TeamLastKillUsedUniqueWeaponMatch", &GCCSGameRules::GetTeamLastKillUsedUniqueWeaponMatch, &GCCSGameRules::SetTeamLastKillUsedUniqueWeaponMatch)
        .addProperty("MatchEndCount", &GCCSGameRules::GetMatchEndCount, &GCCSGameRules::SetMatchEndCount)
        .addProperty("TTeamIntroVariant", &GCCSGameRules::GetTTeamIntroVariant, &GCCSGameRules::SetTTeamIntroVariant)
        .addProperty("CTTeamIntroVariant", &GCCSGameRules::GetCTTeamIntroVariant, &GCCSGameRules::SetCTTeamIntroVariant)
        .addProperty("TeamIntroPeriod", &GCCSGameRules::GetTeamIntroPeriod, &GCCSGameRules::SetTeamIntroPeriod)
        .addProperty("TeamIntroPeriodEnd", &GCCSGameRules::GetTeamIntroPeriodEnd, &GCCSGameRules::SetTeamIntroPeriodEnd)
        .addProperty("PlayedTeamIntroVO", &GCCSGameRules::GetPlayedTeamIntroVO, &GCCSGameRules::SetPlayedTeamIntroVO)
        .addProperty("RoundEndWinnerTeam", &GCCSGameRules::GetRoundEndWinnerTeam, &GCCSGameRules::SetRoundEndWinnerTeam)
        .addProperty("RoundEndReason", &GCCSGameRules::GetRoundEndReason, &GCCSGameRules::SetRoundEndReason)
        .addProperty("RoundEndShowTimerDefend", &GCCSGameRules::GetRoundEndShowTimerDefend, &GCCSGameRules::SetRoundEndShowTimerDefend)
        .addProperty("RoundEndTimerTime", &GCCSGameRules::GetRoundEndTimerTime, &GCCSGameRules::SetRoundEndTimerTime)
        .addProperty("RoundEndFunFactToken", &GCCSGameRules::GetRoundEndFunFactToken, &GCCSGameRules::SetRoundEndFunFactToken)
        .addProperty("RoundEndFunFactPlayerSlot", &GCCSGameRules::GetRoundEndFunFactPlayerSlot, &GCCSGameRules::SetRoundEndFunFactPlayerSlot)
        .addProperty("RoundEndFunFactData1", &GCCSGameRules::GetRoundEndFunFactData1, &GCCSGameRules::SetRoundEndFunFactData1)
        .addProperty("RoundEndFunFactData2", &GCCSGameRules::GetRoundEndFunFactData2, &GCCSGameRules::SetRoundEndFunFactData2)
        .addProperty("RoundEndFunFactData3", &GCCSGameRules::GetRoundEndFunFactData3, &GCCSGameRules::SetRoundEndFunFactData3)
        .addProperty("RoundEndMessage", &GCCSGameRules::GetRoundEndMessage, &GCCSGameRules::SetRoundEndMessage)
        .addProperty("RoundEndPlayerCount", &GCCSGameRules::GetRoundEndPlayerCount, &GCCSGameRules::SetRoundEndPlayerCount)
        .addProperty("RoundEndNoMusic", &GCCSGameRules::GetRoundEndNoMusic, &GCCSGameRules::SetRoundEndNoMusic)
        .addProperty("RoundEndLegacy", &GCCSGameRules::GetRoundEndLegacy, &GCCSGameRules::SetRoundEndLegacy)
        .addProperty("RoundEndCount", &GCCSGameRules::GetRoundEndCount, &GCCSGameRules::SetRoundEndCount)
        .addProperty("RoundStartRoundNumber", &GCCSGameRules::GetRoundStartRoundNumber, &GCCSGameRules::SetRoundStartRoundNumber)
        .addProperty("RoundStartCount", &GCCSGameRules::GetRoundStartCount, &GCCSGameRules::SetRoundStartCount)
        .addProperty("LastPerfSampleTime", &GCCSGameRules::GetLastPerfSampleTime, &GCCSGameRules::SetLastPerfSampleTime)
        .addProperty("Parent", &GCCSGameRules::GetParent, &GCCSGameRules::SetParent)
        .addFunction("ToPtr", &GCCSGameRules::ToPtr)
        .addFunction("IsValid", &GCCSGameRules::IsValid)
        .endClass();
}
GCColorCorrection::GCColorCorrection(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCColorCorrection::GCColorCorrection(void *ptr) {
    m_ptr = ptr;
}
float GCColorCorrection::GetFadeInDuration() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CColorCorrection->FadeInDuration(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CColorCorrection", "m_flFadeInDuration");
}
void GCColorCorrection::SetFadeInDuration(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CColorCorrection->FadeInDuration(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CColorCorrection", "m_flFadeInDuration", false, value);
}
float GCColorCorrection::GetFadeOutDuration() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CColorCorrection->FadeOutDuration(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CColorCorrection", "m_flFadeOutDuration");
}
void GCColorCorrection::SetFadeOutDuration(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CColorCorrection->FadeOutDuration(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CColorCorrection", "m_flFadeOutDuration", false, value);
}
float GCColorCorrection::GetStartFadeInWeight() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CColorCorrection->StartFadeInWeight(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CColorCorrection", "m_flStartFadeInWeight");
}
void GCColorCorrection::SetStartFadeInWeight(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CColorCorrection->StartFadeInWeight(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CColorCorrection", "m_flStartFadeInWeight", false, value);
}
float GCColorCorrection::GetStartFadeOutWeight() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CColorCorrection->StartFadeOutWeight(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CColorCorrection", "m_flStartFadeOutWeight");
}
void GCColorCorrection::SetStartFadeOutWeight(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CColorCorrection->StartFadeOutWeight(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CColorCorrection", "m_flStartFadeOutWeight", false, value);
}
float GCColorCorrection::GetTimeStartFadeIn() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CColorCorrection->TimeStartFadeIn(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CColorCorrection", "m_flTimeStartFadeIn");
}
void GCColorCorrection::SetTimeStartFadeIn(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CColorCorrection->TimeStartFadeIn(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CColorCorrection", "m_flTimeStartFadeIn", false, value);
}
float GCColorCorrection::GetTimeStartFadeOut() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CColorCorrection->TimeStartFadeOut(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CColorCorrection", "m_flTimeStartFadeOut");
}
void GCColorCorrection::SetTimeStartFadeOut(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CColorCorrection->TimeStartFadeOut(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CColorCorrection", "m_flTimeStartFadeOut", false, value);
}
float GCColorCorrection::GetMaxWeight() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CColorCorrection->MaxWeight(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CColorCorrection", "m_flMaxWeight");
}
void GCColorCorrection::SetMaxWeight(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CColorCorrection->MaxWeight(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CColorCorrection", "m_flMaxWeight", false, value);
}
bool GCColorCorrection::GetStartDisabled() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CColorCorrection->StartDisabled(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CColorCorrection", "m_bStartDisabled");
}
void GCColorCorrection::SetStartDisabled(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CColorCorrection->StartDisabled(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CColorCorrection", "m_bStartDisabled", false, value);
}
bool GCColorCorrection::GetEnabled() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CColorCorrection->Enabled(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CColorCorrection", "m_bEnabled");
}
void GCColorCorrection::SetEnabled(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CColorCorrection->Enabled(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CColorCorrection", "m_bEnabled", false, value);
}
bool GCColorCorrection::GetMaster() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CColorCorrection->Master(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CColorCorrection", "m_bMaster");
}
void GCColorCorrection::SetMaster(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CColorCorrection->Master(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CColorCorrection", "m_bMaster", false, value);
}
bool GCColorCorrection::GetClientSide() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CColorCorrection->ClientSide(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CColorCorrection", "m_bClientSide");
}
void GCColorCorrection::SetClientSide(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CColorCorrection->ClientSide(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CColorCorrection", "m_bClientSide", false, value);
}
bool GCColorCorrection::GetExclusive() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CColorCorrection->Exclusive(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CColorCorrection", "m_bExclusive");
}
void GCColorCorrection::SetExclusive(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CColorCorrection->Exclusive(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CColorCorrection", "m_bExclusive", false, value);
}
float GCColorCorrection::GetMinFalloff() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CColorCorrection->MinFalloff(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CColorCorrection", "m_MinFalloff");
}
void GCColorCorrection::SetMinFalloff(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CColorCorrection->MinFalloff(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CColorCorrection", "m_MinFalloff", false, value);
}
float GCColorCorrection::GetMaxFalloff() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CColorCorrection->MaxFalloff(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CColorCorrection", "m_MaxFalloff");
}
void GCColorCorrection::SetMaxFalloff(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CColorCorrection->MaxFalloff(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CColorCorrection", "m_MaxFalloff", false, value);
}
float GCColorCorrection::GetCurWeight() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CColorCorrection->CurWeight(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CColorCorrection", "m_flCurWeight");
}
void GCColorCorrection::SetCurWeight(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CColorCorrection->CurWeight(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CColorCorrection", "m_flCurWeight", false, value);
}
std::string GCColorCorrection::GetNetlookupFilename() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CColorCorrection->NetlookupFilename(ptr=%p)", m_ptr));
    return GetSchemaValuePtr<char>(m_ptr, "CColorCorrection", "m_netlookupFilename");
}
void GCColorCorrection::SetNetlookupFilename(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CColorCorrection->NetlookupFilename(ptr=%p)", m_ptr));
    WriteSchemaPtrValue(m_ptr, "CColorCorrection", "m_netlookupFilename", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 512);
}
std::string GCColorCorrection::GetLookupFilename() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CColorCorrection->LookupFilename(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CColorCorrection", "m_lookupFilename").String();
}
void GCColorCorrection::SetLookupFilename(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CColorCorrection->LookupFilename(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CColorCorrection", "m_lookupFilename", false, CUtlSymbolLarge(value.c_str()));
}
void* GCColorCorrection::GetPtr() {
    return m_ptr;
}
std::string GCColorCorrection::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCColorCorrection::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseEntity GCColorCorrection::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CColorCorrection::GetParent(ptr=%p)", m_ptr));
    GCBaseEntity value(m_ptr);
    return value;
}
void GCColorCorrection::SetParent(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CColorCorrection::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCColorCorrection(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCColorCorrection>("CColorCorrection")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("FadeInDuration", &GCColorCorrection::GetFadeInDuration, &GCColorCorrection::SetFadeInDuration)
        .addProperty("FadeOutDuration", &GCColorCorrection::GetFadeOutDuration, &GCColorCorrection::SetFadeOutDuration)
        .addProperty("StartFadeInWeight", &GCColorCorrection::GetStartFadeInWeight, &GCColorCorrection::SetStartFadeInWeight)
        .addProperty("StartFadeOutWeight", &GCColorCorrection::GetStartFadeOutWeight, &GCColorCorrection::SetStartFadeOutWeight)
        .addProperty("TimeStartFadeIn", &GCColorCorrection::GetTimeStartFadeIn, &GCColorCorrection::SetTimeStartFadeIn)
        .addProperty("TimeStartFadeOut", &GCColorCorrection::GetTimeStartFadeOut, &GCColorCorrection::SetTimeStartFadeOut)
        .addProperty("MaxWeight", &GCColorCorrection::GetMaxWeight, &GCColorCorrection::SetMaxWeight)
        .addProperty("StartDisabled", &GCColorCorrection::GetStartDisabled, &GCColorCorrection::SetStartDisabled)
        .addProperty("Enabled", &GCColorCorrection::GetEnabled, &GCColorCorrection::SetEnabled)
        .addProperty("Master", &GCColorCorrection::GetMaster, &GCColorCorrection::SetMaster)
        .addProperty("ClientSide", &GCColorCorrection::GetClientSide, &GCColorCorrection::SetClientSide)
        .addProperty("Exclusive", &GCColorCorrection::GetExclusive, &GCColorCorrection::SetExclusive)
        .addProperty("MinFalloff", &GCColorCorrection::GetMinFalloff, &GCColorCorrection::SetMinFalloff)
        .addProperty("MaxFalloff", &GCColorCorrection::GetMaxFalloff, &GCColorCorrection::SetMaxFalloff)
        .addProperty("CurWeight", &GCColorCorrection::GetCurWeight, &GCColorCorrection::SetCurWeight)
        .addProperty("NetlookupFilename", &GCColorCorrection::GetNetlookupFilename, &GCColorCorrection::SetNetlookupFilename)
        .addProperty("LookupFilename", &GCColorCorrection::GetLookupFilename, &GCColorCorrection::SetLookupFilename)
        .addProperty("Parent", &GCColorCorrection::GetParent, &GCColorCorrection::SetParent)
        .addFunction("ToPtr", &GCColorCorrection::ToPtr)
        .addFunction("IsValid", &GCColorCorrection::IsValid)
        .endClass();
}
GCWeaponElite::GCWeaponElite(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCWeaponElite::GCWeaponElite(void *ptr) {
    m_ptr = ptr;
}
void* GCWeaponElite::GetPtr() {
    return m_ptr;
}
std::string GCWeaponElite::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCWeaponElite::IsValid() {
    return (m_ptr != nullptr);
}
GCCSWeaponBaseGun GCWeaponElite::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponElite::GetParent(ptr=%p)", m_ptr));
    GCCSWeaponBaseGun value(m_ptr);
    return value;
}
void GCWeaponElite::SetParent(GCCSWeaponBaseGun value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponElite::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCWeaponElite(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCWeaponElite>("CWeaponElite")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCWeaponElite::GetParent, &GCWeaponElite::SetParent)
        .addFunction("ToPtr", &GCWeaponElite::ToPtr)
        .addFunction("IsValid", &GCWeaponElite::IsValid)
        .endClass();
}
GCSoundEventEntityAlias_snd_event_point::GCSoundEventEntityAlias_snd_event_point(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCSoundEventEntityAlias_snd_event_point::GCSoundEventEntityAlias_snd_event_point(void *ptr) {
    m_ptr = ptr;
}
void* GCSoundEventEntityAlias_snd_event_point::GetPtr() {
    return m_ptr;
}
std::string GCSoundEventEntityAlias_snd_event_point::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCSoundEventEntityAlias_snd_event_point::IsValid() {
    return (m_ptr != nullptr);
}
GCSoundEventEntity GCSoundEventEntityAlias_snd_event_point::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSoundEventEntityAlias_snd_event_point::GetParent(ptr=%p)", m_ptr));
    GCSoundEventEntity value(m_ptr);
    return value;
}
void GCSoundEventEntityAlias_snd_event_point::SetParent(GCSoundEventEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSoundEventEntityAlias_snd_event_point::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCSoundEventEntityAlias_snd_event_point(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCSoundEventEntityAlias_snd_event_point>("CSoundEventEntityAlias_snd_event_point")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCSoundEventEntityAlias_snd_event_point::GetParent, &GCSoundEventEntityAlias_snd_event_point::SetParent)
        .addFunction("ToPtr", &GCSoundEventEntityAlias_snd_event_point::ToPtr)
        .addFunction("IsValid", &GCSoundEventEntityAlias_snd_event_point::IsValid)
        .endClass();
}
GCBaseEntityAPI::GCBaseEntityAPI(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCBaseEntityAPI::GCBaseEntityAPI(void *ptr) {
    m_ptr = ptr;
}
void* GCBaseEntityAPI::GetPtr() {
    return m_ptr;
}
std::string GCBaseEntityAPI::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCBaseEntityAPI::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCBaseEntityAPI(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCBaseEntityAPI>("CBaseEntityAPI")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addFunction("ToPtr", &GCBaseEntityAPI::ToPtr)
        .addFunction("IsValid", &GCBaseEntityAPI::IsValid)
        .endClass();
}
GCC4::GCC4(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCC4::GCC4(void *ptr) {
    m_ptr = ptr;
}
Vector GCC4::GetLastValidPlayerHeldPosition() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CC4->LastValidPlayerHeldPosition(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CC4", "m_vecLastValidPlayerHeldPosition");
}
void GCC4::SetLastValidPlayerHeldPosition(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CC4->LastValidPlayerHeldPosition(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CC4", "m_vecLastValidPlayerHeldPosition", false, value);
}
Vector GCC4::GetLastValidDroppedPosition() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CC4->LastValidDroppedPosition(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CC4", "m_vecLastValidDroppedPosition");
}
void GCC4::SetLastValidDroppedPosition(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CC4->LastValidDroppedPosition(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CC4", "m_vecLastValidDroppedPosition", false, value);
}
bool GCC4::GetDoValidDroppedPositionCheck() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CC4->DoValidDroppedPositionCheck(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CC4", "m_bDoValidDroppedPositionCheck");
}
void GCC4::SetDoValidDroppedPositionCheck(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CC4->DoValidDroppedPositionCheck(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CC4", "m_bDoValidDroppedPositionCheck", false, value);
}
bool GCC4::GetStartedArming() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CC4->StartedArming(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CC4", "m_bStartedArming");
}
void GCC4::SetStartedArming(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CC4->StartedArming(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CC4", "m_bStartedArming", false, value);
}
float GCC4::GetArmedTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CC4->ArmedTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CC4", "m_fArmedTime");
}
void GCC4::SetArmedTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CC4->ArmedTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CC4", "m_fArmedTime", false, value);
}
bool GCC4::GetBombPlacedAnimation() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CC4->BombPlacedAnimation(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CC4", "m_bBombPlacedAnimation");
}
void GCC4::SetBombPlacedAnimation(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CC4->BombPlacedAnimation(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CC4", "m_bBombPlacedAnimation", false, value);
}
bool GCC4::GetIsPlantingViaUse() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CC4->IsPlantingViaUse(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CC4", "m_bIsPlantingViaUse");
}
void GCC4::SetIsPlantingViaUse(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CC4->IsPlantingViaUse(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CC4", "m_bIsPlantingViaUse", false, value);
}
GEntitySpottedState_t GCC4::GetEntitySpottedState() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CC4->EntitySpottedState(ptr=%p)", m_ptr));
    GEntitySpottedState_t value(GetSchemaPtr(m_ptr, "CC4", "m_entitySpottedState"));
    return value;
}
void GCC4::SetEntitySpottedState(GEntitySpottedState_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CC4->EntitySpottedState(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'EntitySpottedState' is not possible.\n");
}
int32_t GCC4::GetSpotRules() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CC4->SpotRules(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CC4", "m_nSpotRules");
}
void GCC4::SetSpotRules(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CC4->SpotRules(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CC4", "m_nSpotRules", false, value);
}
std::vector<bool> GCC4::GetPlayedArmingBeeps() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CC4->PlayedArmingBeeps(ptr=%p,size=7)", m_ptr));
    bool* outValue = (bool*)GetSchemaPtr(m_ptr, "CC4", "m_bPlayedArmingBeeps"); std::vector<bool> ret; for(int i = 0; i < 7; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCC4::SetPlayedArmingBeeps(std::vector<bool> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CC4->PlayedArmingBeeps(ptr=%p,size=7)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'PlayedArmingBeeps' is not possible.\n");
}
bool GCC4::GetBombPlanted() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CC4->BombPlanted(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CC4", "m_bBombPlanted");
}
void GCC4::SetBombPlanted(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CC4->BombPlanted(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CC4", "m_bBombPlanted", false, value);
}
void* GCC4::GetPtr() {
    return m_ptr;
}
std::string GCC4::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCC4::IsValid() {
    return (m_ptr != nullptr);
}
GCCSWeaponBase GCC4::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CC4::GetParent(ptr=%p)", m_ptr));
    GCCSWeaponBase value(m_ptr);
    return value;
}
void GCC4::SetParent(GCCSWeaponBase value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CC4::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCC4(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCC4>("CC4")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("LastValidPlayerHeldPosition", &GCC4::GetLastValidPlayerHeldPosition, &GCC4::SetLastValidPlayerHeldPosition)
        .addProperty("LastValidDroppedPosition", &GCC4::GetLastValidDroppedPosition, &GCC4::SetLastValidDroppedPosition)
        .addProperty("DoValidDroppedPositionCheck", &GCC4::GetDoValidDroppedPositionCheck, &GCC4::SetDoValidDroppedPositionCheck)
        .addProperty("StartedArming", &GCC4::GetStartedArming, &GCC4::SetStartedArming)
        .addProperty("ArmedTime", &GCC4::GetArmedTime, &GCC4::SetArmedTime)
        .addProperty("BombPlacedAnimation", &GCC4::GetBombPlacedAnimation, &GCC4::SetBombPlacedAnimation)
        .addProperty("IsPlantingViaUse", &GCC4::GetIsPlantingViaUse, &GCC4::SetIsPlantingViaUse)
        .addProperty("EntitySpottedState", &GCC4::GetEntitySpottedState, &GCC4::SetEntitySpottedState)
        .addProperty("SpotRules", &GCC4::GetSpotRules, &GCC4::SetSpotRules)
        .addProperty("PlayedArmingBeeps", &GCC4::GetPlayedArmingBeeps, &GCC4::SetPlayedArmingBeeps)
        .addProperty("BombPlanted", &GCC4::GetBombPlanted, &GCC4::SetBombPlanted)
        .addProperty("Parent", &GCC4::GetParent, &GCC4::SetParent)
        .addFunction("ToPtr", &GCC4::ToPtr)
        .addFunction("IsValid", &GCC4::IsValid)
        .endClass();
}
GCHostageRescueZone::GCHostageRescueZone(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCHostageRescueZone::GCHostageRescueZone(void *ptr) {
    m_ptr = ptr;
}
void* GCHostageRescueZone::GetPtr() {
    return m_ptr;
}
std::string GCHostageRescueZone::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCHostageRescueZone::IsValid() {
    return (m_ptr != nullptr);
}
GCHostageRescueZoneShim GCHostageRescueZone::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CHostageRescueZone::GetParent(ptr=%p)", m_ptr));
    GCHostageRescueZoneShim value(m_ptr);
    return value;
}
void GCHostageRescueZone::SetParent(GCHostageRescueZoneShim value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CHostageRescueZone::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCHostageRescueZone(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCHostageRescueZone>("CHostageRescueZone")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCHostageRescueZone::GetParent, &GCHostageRescueZone::SetParent)
        .addFunction("ToPtr", &GCHostageRescueZone::ToPtr)
        .addFunction("IsValid", &GCHostageRescueZone::IsValid)
        .endClass();
}
GCPointPrefab::GCPointPrefab(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPointPrefab::GCPointPrefab(void *ptr) {
    m_ptr = ptr;
}
std::string GCPointPrefab::GetTargetMapName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointPrefab->TargetMapName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPointPrefab", "m_targetMapName").String();
}
void GCPointPrefab::SetTargetMapName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointPrefab->TargetMapName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointPrefab", "m_targetMapName", false, CUtlSymbolLarge(value.c_str()));
}
std::string GCPointPrefab::GetForceWorldGroupID() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointPrefab->ForceWorldGroupID(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPointPrefab", "m_forceWorldGroupID").String();
}
void GCPointPrefab::SetForceWorldGroupID(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointPrefab->ForceWorldGroupID(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointPrefab", "m_forceWorldGroupID", false, CUtlSymbolLarge(value.c_str()));
}
std::string GCPointPrefab::GetAssociatedRelayTargetName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointPrefab->AssociatedRelayTargetName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPointPrefab", "m_associatedRelayTargetName").String();
}
void GCPointPrefab::SetAssociatedRelayTargetName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointPrefab->AssociatedRelayTargetName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointPrefab", "m_associatedRelayTargetName", false, CUtlSymbolLarge(value.c_str()));
}
bool GCPointPrefab::GetFixupNames() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointPrefab->FixupNames(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPointPrefab", "m_fixupNames");
}
void GCPointPrefab::SetFixupNames(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointPrefab->FixupNames(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointPrefab", "m_fixupNames", false, value);
}
bool GCPointPrefab::GetLoadDynamic() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointPrefab->LoadDynamic(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPointPrefab", "m_bLoadDynamic");
}
void GCPointPrefab::SetLoadDynamic(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointPrefab->LoadDynamic(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPointPrefab", "m_bLoadDynamic", false, value);
}
GCPointPrefab GCPointPrefab::GetAssociatedRelayEntity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPointPrefab->AssociatedRelayEntity(ptr=%p)", m_ptr));
    GCPointPrefab value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CPointPrefab", "m_associatedRelayEntity").Get()));
    return value;
}
void GCPointPrefab::SetAssociatedRelayEntity(GCPointPrefab value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPointPrefab->AssociatedRelayEntity(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'AssociatedRelayEntity' is not possible.\n");
}
void* GCPointPrefab::GetPtr() {
    return m_ptr;
}
std::string GCPointPrefab::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPointPrefab::IsValid() {
    return (m_ptr != nullptr);
}
GCServerOnlyPointEntity GCPointPrefab::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPointPrefab::GetParent(ptr=%p)", m_ptr));
    GCServerOnlyPointEntity value(m_ptr);
    return value;
}
void GCPointPrefab::SetParent(GCServerOnlyPointEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPointPrefab::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCPointPrefab(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPointPrefab>("CPointPrefab")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("TargetMapName", &GCPointPrefab::GetTargetMapName, &GCPointPrefab::SetTargetMapName)
        .addProperty("ForceWorldGroupID", &GCPointPrefab::GetForceWorldGroupID, &GCPointPrefab::SetForceWorldGroupID)
        .addProperty("AssociatedRelayTargetName", &GCPointPrefab::GetAssociatedRelayTargetName, &GCPointPrefab::SetAssociatedRelayTargetName)
        .addProperty("FixupNames", &GCPointPrefab::GetFixupNames, &GCPointPrefab::SetFixupNames)
        .addProperty("LoadDynamic", &GCPointPrefab::GetLoadDynamic, &GCPointPrefab::SetLoadDynamic)
        .addProperty("AssociatedRelayEntity", &GCPointPrefab::GetAssociatedRelayEntity, &GCPointPrefab::SetAssociatedRelayEntity)
        .addProperty("Parent", &GCPointPrefab::GetParent, &GCPointPrefab::SetParent)
        .addFunction("ToPtr", &GCPointPrefab::ToPtr)
        .addFunction("IsValid", &GCPointPrefab::IsValid)
        .endClass();
}
GCRotDoor::GCRotDoor(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCRotDoor::GCRotDoor(void *ptr) {
    m_ptr = ptr;
}
bool GCRotDoor::GetSolidBsp() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CRotDoor->SolidBsp(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CRotDoor", "m_bSolidBsp");
}
void GCRotDoor::SetSolidBsp(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CRotDoor->SolidBsp(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CRotDoor", "m_bSolidBsp", false, value);
}
void* GCRotDoor::GetPtr() {
    return m_ptr;
}
std::string GCRotDoor::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCRotDoor::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseDoor GCRotDoor::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CRotDoor::GetParent(ptr=%p)", m_ptr));
    GCBaseDoor value(m_ptr);
    return value;
}
void GCRotDoor::SetParent(GCBaseDoor value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CRotDoor::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCRotDoor(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCRotDoor>("CRotDoor")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("SolidBsp", &GCRotDoor::GetSolidBsp, &GCRotDoor::SetSolidBsp)
        .addProperty("Parent", &GCRotDoor::GetParent, &GCRotDoor::SetParent)
        .addFunction("ToPtr", &GCRotDoor::ToPtr)
        .addFunction("IsValid", &GCRotDoor::IsValid)
        .endClass();
}
GCSkeletonAnimationController::GCSkeletonAnimationController(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCSkeletonAnimationController::GCSkeletonAnimationController(void *ptr) {
    m_ptr = ptr;
}
GCSkeletonInstance GCSkeletonAnimationController::GetSkeletonInstance() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSkeletonAnimationController->SkeletonInstance(ptr=%p)", m_ptr));
    GCSkeletonInstance value(*(void**)GetSchemaPtr(m_ptr, "CSkeletonAnimationController", "m_pSkeletonInstance"));
    return value;
}
void GCSkeletonAnimationController::SetSkeletonInstance(GCSkeletonInstance value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSkeletonAnimationController->SkeletonInstance(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSkeletonAnimationController","m_pSkeletonInstance", false, (char*)value.GetPtr());
}
void* GCSkeletonAnimationController::GetPtr() {
    return m_ptr;
}
std::string GCSkeletonAnimationController::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCSkeletonAnimationController::IsValid() {
    return (m_ptr != nullptr);
}
GISkeletonAnimationController GCSkeletonAnimationController::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSkeletonAnimationController::GetParent(ptr=%p)", m_ptr));
    GISkeletonAnimationController value(m_ptr);
    return value;
}
void GCSkeletonAnimationController::SetParent(GISkeletonAnimationController value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSkeletonAnimationController::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCSkeletonAnimationController(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCSkeletonAnimationController>("CSkeletonAnimationController")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("SkeletonInstance", &GCSkeletonAnimationController::GetSkeletonInstance, &GCSkeletonAnimationController::SetSkeletonInstance)
        .addProperty("Parent", &GCSkeletonAnimationController::GetParent, &GCSkeletonAnimationController::SetParent)
        .addFunction("ToPtr", &GCSkeletonAnimationController::ToPtr)
        .addFunction("IsValid", &GCSkeletonAnimationController::IsValid)
        .endClass();
}
GCTablet::GCTablet(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCTablet::GCTablet(void *ptr) {
    m_ptr = ptr;
}
void* GCTablet::GetPtr() {
    return m_ptr;
}
std::string GCTablet::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCTablet::IsValid() {
    return (m_ptr != nullptr);
}
GCCSWeaponBase GCTablet::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTablet::GetParent(ptr=%p)", m_ptr));
    GCCSWeaponBase value(m_ptr);
    return value;
}
void GCTablet::SetParent(GCCSWeaponBase value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTablet::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCTablet(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCTablet>("CTablet")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCTablet::GetParent, &GCTablet::SetParent)
        .addFunction("ToPtr", &GCTablet::ToPtr)
        .addFunction("IsValid", &GCTablet::IsValid)
        .endClass();
}
GCTankTrainAI::GCTankTrainAI(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCTankTrainAI::GCTankTrainAI(void *ptr) {
    m_ptr = ptr;
}
GCFuncTrackTrain GCTankTrainAI::GetTrain() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTankTrainAI->Train(ptr=%p)", m_ptr));
    GCFuncTrackTrain value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CTankTrainAI", "m_hTrain").Get()));
    return value;
}
void GCTankTrainAI::SetTrain(GCFuncTrackTrain value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTankTrainAI->Train(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Train' is not possible.\n");
}
GCBaseEntity GCTankTrainAI::GetTargetEntity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTankTrainAI->TargetEntity(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CTankTrainAI", "m_hTargetEntity").Get()));
    return value;
}
void GCTankTrainAI::SetTargetEntity(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTankTrainAI->TargetEntity(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'TargetEntity' is not possible.\n");
}
int32_t GCTankTrainAI::GetSoundPlaying() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTankTrainAI->SoundPlaying(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CTankTrainAI", "m_soundPlaying");
}
void GCTankTrainAI::SetSoundPlaying(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTankTrainAI->SoundPlaying(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTankTrainAI", "m_soundPlaying", false, value);
}
std::string GCTankTrainAI::GetStartSoundName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTankTrainAI->StartSoundName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CTankTrainAI", "m_startSoundName").String();
}
void GCTankTrainAI::SetStartSoundName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTankTrainAI->StartSoundName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTankTrainAI", "m_startSoundName", false, CUtlSymbolLarge(value.c_str()));
}
std::string GCTankTrainAI::GetEngineSoundName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTankTrainAI->EngineSoundName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CTankTrainAI", "m_engineSoundName").String();
}
void GCTankTrainAI::SetEngineSoundName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTankTrainAI->EngineSoundName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTankTrainAI", "m_engineSoundName", false, CUtlSymbolLarge(value.c_str()));
}
std::string GCTankTrainAI::GetMovementSoundName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTankTrainAI->MovementSoundName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CTankTrainAI", "m_movementSoundName").String();
}
void GCTankTrainAI::SetMovementSoundName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTankTrainAI->MovementSoundName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTankTrainAI", "m_movementSoundName", false, CUtlSymbolLarge(value.c_str()));
}
std::string GCTankTrainAI::GetTargetEntityName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTankTrainAI->TargetEntityName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CTankTrainAI", "m_targetEntityName").String();
}
void GCTankTrainAI::SetTargetEntityName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTankTrainAI->TargetEntityName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTankTrainAI", "m_targetEntityName", false, CUtlSymbolLarge(value.c_str()));
}
void* GCTankTrainAI::GetPtr() {
    return m_ptr;
}
std::string GCTankTrainAI::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCTankTrainAI::IsValid() {
    return (m_ptr != nullptr);
}
GCPointEntity GCTankTrainAI::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTankTrainAI::GetParent(ptr=%p)", m_ptr));
    GCPointEntity value(m_ptr);
    return value;
}
void GCTankTrainAI::SetParent(GCPointEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTankTrainAI::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCTankTrainAI(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCTankTrainAI>("CTankTrainAI")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Train", &GCTankTrainAI::GetTrain, &GCTankTrainAI::SetTrain)
        .addProperty("TargetEntity", &GCTankTrainAI::GetTargetEntity, &GCTankTrainAI::SetTargetEntity)
        .addProperty("SoundPlaying", &GCTankTrainAI::GetSoundPlaying, &GCTankTrainAI::SetSoundPlaying)
        .addProperty("StartSoundName", &GCTankTrainAI::GetStartSoundName, &GCTankTrainAI::SetStartSoundName)
        .addProperty("EngineSoundName", &GCTankTrainAI::GetEngineSoundName, &GCTankTrainAI::SetEngineSoundName)
        .addProperty("MovementSoundName", &GCTankTrainAI::GetMovementSoundName, &GCTankTrainAI::SetMovementSoundName)
        .addProperty("TargetEntityName", &GCTankTrainAI::GetTargetEntityName, &GCTankTrainAI::SetTargetEntityName)
        .addProperty("Parent", &GCTankTrainAI::GetParent, &GCTankTrainAI::SetParent)
        .addFunction("ToPtr", &GCTankTrainAI::ToPtr)
        .addFunction("IsValid", &GCTankTrainAI::IsValid)
        .endClass();
}
GCGameGibManager::GCGameGibManager(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCGameGibManager::GCGameGibManager(void *ptr) {
    m_ptr = ptr;
}
bool GCGameGibManager::GetAllowNewGibs() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CGameGibManager->AllowNewGibs(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CGameGibManager", "m_bAllowNewGibs");
}
void GCGameGibManager::SetAllowNewGibs(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CGameGibManager->AllowNewGibs(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CGameGibManager", "m_bAllowNewGibs", false, value);
}
int32_t GCGameGibManager::GetCurrentMaxPieces() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CGameGibManager->CurrentMaxPieces(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CGameGibManager", "m_iCurrentMaxPieces");
}
void GCGameGibManager::SetCurrentMaxPieces(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CGameGibManager->CurrentMaxPieces(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CGameGibManager", "m_iCurrentMaxPieces", false, value);
}
int32_t GCGameGibManager::GetMaxPieces() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CGameGibManager->MaxPieces(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CGameGibManager", "m_iMaxPieces");
}
void GCGameGibManager::SetMaxPieces(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CGameGibManager->MaxPieces(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CGameGibManager", "m_iMaxPieces", false, value);
}
int32_t GCGameGibManager::GetLastFrame() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CGameGibManager->LastFrame(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CGameGibManager", "m_iLastFrame");
}
void GCGameGibManager::SetLastFrame(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CGameGibManager->LastFrame(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CGameGibManager", "m_iLastFrame", false, value);
}
void* GCGameGibManager::GetPtr() {
    return m_ptr;
}
std::string GCGameGibManager::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCGameGibManager::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseEntity GCGameGibManager::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CGameGibManager::GetParent(ptr=%p)", m_ptr));
    GCBaseEntity value(m_ptr);
    return value;
}
void GCGameGibManager::SetParent(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CGameGibManager::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCGameGibManager(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCGameGibManager>("CGameGibManager")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("AllowNewGibs", &GCGameGibManager::GetAllowNewGibs, &GCGameGibManager::SetAllowNewGibs)
        .addProperty("CurrentMaxPieces", &GCGameGibManager::GetCurrentMaxPieces, &GCGameGibManager::SetCurrentMaxPieces)
        .addProperty("MaxPieces", &GCGameGibManager::GetMaxPieces, &GCGameGibManager::SetMaxPieces)
        .addProperty("LastFrame", &GCGameGibManager::GetLastFrame, &GCGameGibManager::SetLastFrame)
        .addProperty("Parent", &GCGameGibManager::GetParent, &GCGameGibManager::SetParent)
        .addFunction("ToPtr", &GCGameGibManager::ToPtr)
        .addFunction("IsValid", &GCGameGibManager::IsValid)
        .endClass();
}
GCCSPointScript::GCCSPointScript(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCCSPointScript::GCCSPointScript(void *ptr) {
    m_ptr = ptr;
}
GCCSPointScriptEntity GCCSPointScript::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPointScript->Parent(ptr=%p)", m_ptr));
    GCCSPointScriptEntity value(*(void**)GetSchemaPtr(m_ptr, "CCSPointScript", "m_pParent"));
    return value;
}
void GCCSPointScript::SetParent(GCCSPointScriptEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPointScript->Parent(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPointScript","m_pParent", false, (char*)value.GetPtr());
}
void* GCCSPointScript::GetPtr() {
    return m_ptr;
}
std::string GCCSPointScript::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCCSPointScript::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCCSPointScript(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCCSPointScript>("CCSPointScript")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCCSPointScript::GetParent, &GCCSPointScript::SetParent)
        .addFunction("ToPtr", &GCCSPointScript::ToPtr)
        .addFunction("IsValid", &GCCSPointScript::IsValid)
        .endClass();
}
GCRagdollPropAlias_physics_prop_ragdoll::GCRagdollPropAlias_physics_prop_ragdoll(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCRagdollPropAlias_physics_prop_ragdoll::GCRagdollPropAlias_physics_prop_ragdoll(void *ptr) {
    m_ptr = ptr;
}
void* GCRagdollPropAlias_physics_prop_ragdoll::GetPtr() {
    return m_ptr;
}
std::string GCRagdollPropAlias_physics_prop_ragdoll::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCRagdollPropAlias_physics_prop_ragdoll::IsValid() {
    return (m_ptr != nullptr);
}
GCRagdollProp GCRagdollPropAlias_physics_prop_ragdoll::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CRagdollPropAlias_physics_prop_ragdoll::GetParent(ptr=%p)", m_ptr));
    GCRagdollProp value(m_ptr);
    return value;
}
void GCRagdollPropAlias_physics_prop_ragdoll::SetParent(GCRagdollProp value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CRagdollPropAlias_physics_prop_ragdoll::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCRagdollPropAlias_physics_prop_ragdoll(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCRagdollPropAlias_physics_prop_ragdoll>("CRagdollPropAlias_physics_prop_ragdoll")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCRagdollPropAlias_physics_prop_ragdoll::GetParent, &GCRagdollPropAlias_physics_prop_ragdoll::SetParent)
        .addFunction("ToPtr", &GCRagdollPropAlias_physics_prop_ragdoll::ToPtr)
        .addFunction("IsValid", &GCRagdollPropAlias_physics_prop_ragdoll::IsValid)
        .endClass();
}
GCCSSprite::GCCSSprite(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCCSSprite::GCCSSprite(void *ptr) {
    m_ptr = ptr;
}
void* GCCSSprite::GetPtr() {
    return m_ptr;
}
std::string GCCSSprite::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCCSSprite::IsValid() {
    return (m_ptr != nullptr);
}
GCSprite GCCSSprite::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSSprite::GetParent(ptr=%p)", m_ptr));
    GCSprite value(m_ptr);
    return value;
}
void GCCSSprite::SetParent(GCSprite value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSSprite::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCCSSprite(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCCSSprite>("CCSSprite")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCCSSprite::GetParent, &GCCSSprite::SetParent)
        .addFunction("ToPtr", &GCCSSprite::ToPtr)
        .addFunction("IsValid", &GCCSSprite::IsValid)
        .endClass();
}
GCFuncPropRespawnZone::GCFuncPropRespawnZone(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCFuncPropRespawnZone::GCFuncPropRespawnZone(void *ptr) {
    m_ptr = ptr;
}
void* GCFuncPropRespawnZone::GetPtr() {
    return m_ptr;
}
std::string GCFuncPropRespawnZone::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCFuncPropRespawnZone::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseEntity GCFuncPropRespawnZone::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFuncPropRespawnZone::GetParent(ptr=%p)", m_ptr));
    GCBaseEntity value(m_ptr);
    return value;
}
void GCFuncPropRespawnZone::SetParent(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFuncPropRespawnZone::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCFuncPropRespawnZone(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCFuncPropRespawnZone>("CFuncPropRespawnZone")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCFuncPropRespawnZone::GetParent, &GCFuncPropRespawnZone::SetParent)
        .addFunction("ToPtr", &GCFuncPropRespawnZone::ToPtr)
        .addFunction("IsValid", &GCFuncPropRespawnZone::IsValid)
        .endClass();
}
GCInfoDeathmatchSpawn::GCInfoDeathmatchSpawn(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCInfoDeathmatchSpawn::GCInfoDeathmatchSpawn(void *ptr) {
    m_ptr = ptr;
}
void* GCInfoDeathmatchSpawn::GetPtr() {
    return m_ptr;
}
std::string GCInfoDeathmatchSpawn::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCInfoDeathmatchSpawn::IsValid() {
    return (m_ptr != nullptr);
}
GSpawnPoint GCInfoDeathmatchSpawn::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CInfoDeathmatchSpawn::GetParent(ptr=%p)", m_ptr));
    GSpawnPoint value(m_ptr);
    return value;
}
void GCInfoDeathmatchSpawn::SetParent(GSpawnPoint value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CInfoDeathmatchSpawn::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCInfoDeathmatchSpawn(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCInfoDeathmatchSpawn>("CInfoDeathmatchSpawn")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCInfoDeathmatchSpawn::GetParent, &GCInfoDeathmatchSpawn::SetParent)
        .addFunction("ToPtr", &GCInfoDeathmatchSpawn::ToPtr)
        .addFunction("IsValid", &GCInfoDeathmatchSpawn::IsValid)
        .endClass();
}
GCWeaponSCAR20::GCWeaponSCAR20(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCWeaponSCAR20::GCWeaponSCAR20(void *ptr) {
    m_ptr = ptr;
}
void* GCWeaponSCAR20::GetPtr() {
    return m_ptr;
}
std::string GCWeaponSCAR20::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCWeaponSCAR20::IsValid() {
    return (m_ptr != nullptr);
}
GCCSWeaponBaseGun GCWeaponSCAR20::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponSCAR20::GetParent(ptr=%p)", m_ptr));
    GCCSWeaponBaseGun value(m_ptr);
    return value;
}
void GCWeaponSCAR20::SetParent(GCCSWeaponBaseGun value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponSCAR20::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCWeaponSCAR20(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCWeaponSCAR20>("CWeaponSCAR20")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCWeaponSCAR20::GetParent, &GCWeaponSCAR20::SetParent)
        .addFunction("ToPtr", &GCWeaponSCAR20::ToPtr)
        .addFunction("IsValid", &GCWeaponSCAR20::IsValid)
        .endClass();
}
GCTripWireFireProjectile::GCTripWireFireProjectile(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCTripWireFireProjectile::GCTripWireFireProjectile(void *ptr) {
    m_ptr = ptr;
}
void* GCTripWireFireProjectile::GetPtr() {
    return m_ptr;
}
std::string GCTripWireFireProjectile::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCTripWireFireProjectile::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseGrenade GCTripWireFireProjectile::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTripWireFireProjectile::GetParent(ptr=%p)", m_ptr));
    GCBaseGrenade value(m_ptr);
    return value;
}
void GCTripWireFireProjectile::SetParent(GCBaseGrenade value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTripWireFireProjectile::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCTripWireFireProjectile(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCTripWireFireProjectile>("CTripWireFireProjectile")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCTripWireFireProjectile::GetParent, &GCTripWireFireProjectile::SetParent)
        .addFunction("ToPtr", &GCTripWireFireProjectile::ToPtr)
        .addFunction("IsValid", &GCTripWireFireProjectile::IsValid)
        .endClass();
}
GCFuncTrackAuto::GCFuncTrackAuto(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCFuncTrackAuto::GCFuncTrackAuto(void *ptr) {
    m_ptr = ptr;
}
void* GCFuncTrackAuto::GetPtr() {
    return m_ptr;
}
std::string GCFuncTrackAuto::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCFuncTrackAuto::IsValid() {
    return (m_ptr != nullptr);
}
GCFuncTrackChange GCFuncTrackAuto::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFuncTrackAuto::GetParent(ptr=%p)", m_ptr));
    GCFuncTrackChange value(m_ptr);
    return value;
}
void GCFuncTrackAuto::SetParent(GCFuncTrackChange value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFuncTrackAuto::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCFuncTrackAuto(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCFuncTrackAuto>("CFuncTrackAuto")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCFuncTrackAuto::GetParent, &GCFuncTrackAuto::SetParent)
        .addFunction("ToPtr", &GCFuncTrackAuto::ToPtr)
        .addFunction("IsValid", &GCFuncTrackAuto::IsValid)
        .endClass();
}
GCEnvSpark::GCEnvSpark(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCEnvSpark::GCEnvSpark(void *ptr) {
    m_ptr = ptr;
}
float GCEnvSpark::GetDelay() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvSpark->Delay(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CEnvSpark", "m_flDelay");
}
void GCEnvSpark::SetDelay(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvSpark->Delay(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvSpark", "m_flDelay", false, value);
}
int32_t GCEnvSpark::GetMagnitude() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvSpark->Magnitude(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CEnvSpark", "m_nMagnitude");
}
void GCEnvSpark::SetMagnitude(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvSpark->Magnitude(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvSpark", "m_nMagnitude", false, value);
}
int32_t GCEnvSpark::GetTrailLength() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvSpark->TrailLength(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CEnvSpark", "m_nTrailLength");
}
void GCEnvSpark::SetTrailLength(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvSpark->TrailLength(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvSpark", "m_nTrailLength", false, value);
}
int32_t GCEnvSpark::GetType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvSpark->Type(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CEnvSpark", "m_nType");
}
void GCEnvSpark::SetType(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvSpark->Type(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvSpark", "m_nType", false, value);
}
GCEntityIOOutput GCEnvSpark::GetOnSpark() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvSpark->OnSpark(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CEnvSpark", "m_OnSpark"));
    return value;
}
void GCEnvSpark::SetOnSpark(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvSpark->OnSpark(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnSpark' is not possible.\n");
}
void* GCEnvSpark::GetPtr() {
    return m_ptr;
}
std::string GCEnvSpark::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCEnvSpark::IsValid() {
    return (m_ptr != nullptr);
}
GCPointEntity GCEnvSpark::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CEnvSpark::GetParent(ptr=%p)", m_ptr));
    GCPointEntity value(m_ptr);
    return value;
}
void GCEnvSpark::SetParent(GCPointEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CEnvSpark::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCEnvSpark(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCEnvSpark>("CEnvSpark")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Delay", &GCEnvSpark::GetDelay, &GCEnvSpark::SetDelay)
        .addProperty("Magnitude", &GCEnvSpark::GetMagnitude, &GCEnvSpark::SetMagnitude)
        .addProperty("TrailLength", &GCEnvSpark::GetTrailLength, &GCEnvSpark::SetTrailLength)
        .addProperty("Type", &GCEnvSpark::GetType, &GCEnvSpark::SetType)
        .addProperty("OnSpark", &GCEnvSpark::GetOnSpark, &GCEnvSpark::SetOnSpark)
        .addProperty("Parent", &GCEnvSpark::GetParent, &GCEnvSpark::SetParent)
        .addFunction("ToPtr", &GCEnvSpark::ToPtr)
        .addFunction("IsValid", &GCEnvSpark::IsValid)
        .endClass();
}
GCCSObserver_ObserverServices::GCCSObserver_ObserverServices(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCCSObserver_ObserverServices::GCCSObserver_ObserverServices(void *ptr) {
    m_ptr = ptr;
}
void* GCCSObserver_ObserverServices::GetPtr() {
    return m_ptr;
}
std::string GCCSObserver_ObserverServices::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCCSObserver_ObserverServices::IsValid() {
    return (m_ptr != nullptr);
}
GCPlayer_ObserverServices GCCSObserver_ObserverServices::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSObserver_ObserverServices::GetParent(ptr=%p)", m_ptr));
    GCPlayer_ObserverServices value(m_ptr);
    return value;
}
void GCCSObserver_ObserverServices::SetParent(GCPlayer_ObserverServices value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSObserver_ObserverServices::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCCSObserver_ObserverServices(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCCSObserver_ObserverServices>("CCSObserver_ObserverServices")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCCSObserver_ObserverServices::GetParent, &GCCSObserver_ObserverServices::SetParent)
        .addFunction("ToPtr", &GCCSObserver_ObserverServices::ToPtr)
        .addFunction("IsValid", &GCCSObserver_ObserverServices::IsValid)
        .endClass();
}
GCPlayer_AutoaimServices::GCPlayer_AutoaimServices(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPlayer_AutoaimServices::GCPlayer_AutoaimServices(void *ptr) {
    m_ptr = ptr;
}
void* GCPlayer_AutoaimServices::GetPtr() {
    return m_ptr;
}
std::string GCPlayer_AutoaimServices::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPlayer_AutoaimServices::IsValid() {
    return (m_ptr != nullptr);
}
GCPlayerPawnComponent GCPlayer_AutoaimServices::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPlayer_AutoaimServices::GetParent(ptr=%p)", m_ptr));
    GCPlayerPawnComponent value(m_ptr);
    return value;
}
void GCPlayer_AutoaimServices::SetParent(GCPlayerPawnComponent value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPlayer_AutoaimServices::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCPlayer_AutoaimServices(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPlayer_AutoaimServices>("CPlayer_AutoaimServices")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCPlayer_AutoaimServices::GetParent, &GCPlayer_AutoaimServices::SetParent)
        .addFunction("ToPtr", &GCPlayer_AutoaimServices::ToPtr)
        .addFunction("IsValid", &GCPlayer_AutoaimServices::IsValid)
        .endClass();
}
GCFuncTrain::GCFuncTrain(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCFuncTrain::GCFuncTrain(void *ptr) {
    m_ptr = ptr;
}
GCBaseEntity GCFuncTrain::GetCurrentTarget() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncTrain->CurrentTarget(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CFuncTrain", "m_hCurrentTarget").Get()));
    return value;
}
void GCFuncTrain::SetCurrentTarget(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncTrain->CurrentTarget(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'CurrentTarget' is not possible.\n");
}
bool GCFuncTrain::GetActivated() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncTrain->Activated(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CFuncTrain", "m_activated");
}
void GCFuncTrain::SetActivated(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncTrain->Activated(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncTrain", "m_activated", false, value);
}
GCBaseEntity GCFuncTrain::GetEnemy() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncTrain->Enemy(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CFuncTrain", "m_hEnemy").Get()));
    return value;
}
void GCFuncTrain::SetEnemy(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncTrain->Enemy(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Enemy' is not possible.\n");
}
float GCFuncTrain::GetBlockDamage() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncTrain->BlockDamage(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CFuncTrain", "m_flBlockDamage");
}
void GCFuncTrain::SetBlockDamage(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncTrain->BlockDamage(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncTrain", "m_flBlockDamage", false, value);
}
float GCFuncTrain::GetNextBlockTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncTrain->NextBlockTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CFuncTrain", "m_flNextBlockTime");
}
void GCFuncTrain::SetNextBlockTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncTrain->NextBlockTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncTrain", "m_flNextBlockTime", false, value);
}
std::string GCFuncTrain::GetLastTarget() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuncTrain->LastTarget(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CFuncTrain", "m_iszLastTarget").String();
}
void GCFuncTrain::SetLastTarget(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuncTrain->LastTarget(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFuncTrain", "m_iszLastTarget", false, CUtlSymbolLarge(value.c_str()));
}
void* GCFuncTrain::GetPtr() {
    return m_ptr;
}
std::string GCFuncTrain::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCFuncTrain::IsValid() {
    return (m_ptr != nullptr);
}
GCBasePlatTrain GCFuncTrain::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFuncTrain::GetParent(ptr=%p)", m_ptr));
    GCBasePlatTrain value(m_ptr);
    return value;
}
void GCFuncTrain::SetParent(GCBasePlatTrain value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFuncTrain::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCFuncTrain(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCFuncTrain>("CFuncTrain")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("CurrentTarget", &GCFuncTrain::GetCurrentTarget, &GCFuncTrain::SetCurrentTarget)
        .addProperty("Activated", &GCFuncTrain::GetActivated, &GCFuncTrain::SetActivated)
        .addProperty("Enemy", &GCFuncTrain::GetEnemy, &GCFuncTrain::SetEnemy)
        .addProperty("BlockDamage", &GCFuncTrain::GetBlockDamage, &GCFuncTrain::SetBlockDamage)
        .addProperty("NextBlockTime", &GCFuncTrain::GetNextBlockTime, &GCFuncTrain::SetNextBlockTime)
        .addProperty("LastTarget", &GCFuncTrain::GetLastTarget, &GCFuncTrain::SetLastTarget)
        .addProperty("Parent", &GCFuncTrain::GetParent, &GCFuncTrain::SetParent)
        .addFunction("ToPtr", &GCFuncTrain::ToPtr)
        .addFunction("IsValid", &GCFuncTrain::IsValid)
        .endClass();
}
GCHostageAlias_info_hostage_spawn::GCHostageAlias_info_hostage_spawn(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCHostageAlias_info_hostage_spawn::GCHostageAlias_info_hostage_spawn(void *ptr) {
    m_ptr = ptr;
}
void* GCHostageAlias_info_hostage_spawn::GetPtr() {
    return m_ptr;
}
std::string GCHostageAlias_info_hostage_spawn::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCHostageAlias_info_hostage_spawn::IsValid() {
    return (m_ptr != nullptr);
}
GCHostage GCHostageAlias_info_hostage_spawn::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CHostageAlias_info_hostage_spawn::GetParent(ptr=%p)", m_ptr));
    GCHostage value(m_ptr);
    return value;
}
void GCHostageAlias_info_hostage_spawn::SetParent(GCHostage value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CHostageAlias_info_hostage_spawn::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCHostageAlias_info_hostage_spawn(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCHostageAlias_info_hostage_spawn>("CHostageAlias_info_hostage_spawn")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCHostageAlias_info_hostage_spawn::GetParent, &GCHostageAlias_info_hostage_spawn::SetParent)
        .addFunction("ToPtr", &GCHostageAlias_info_hostage_spawn::ToPtr)
        .addFunction("IsValid", &GCHostageAlias_info_hostage_spawn::IsValid)
        .endClass();
}
GCNavLinkAreaEntity::GCNavLinkAreaEntity(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCNavLinkAreaEntity::GCNavLinkAreaEntity(void *ptr) {
    m_ptr = ptr;
}
float GCNavLinkAreaEntity::GetWidth() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNavLinkAreaEntity->Width(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CNavLinkAreaEntity", "m_flWidth");
}
void GCNavLinkAreaEntity::SetWidth(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNavLinkAreaEntity->Width(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNavLinkAreaEntity", "m_flWidth", false, value);
}
Vector GCNavLinkAreaEntity::GetLocatorOffset() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNavLinkAreaEntity->LocatorOffset(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CNavLinkAreaEntity", "m_vLocatorOffset");
}
void GCNavLinkAreaEntity::SetLocatorOffset(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNavLinkAreaEntity->LocatorOffset(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNavLinkAreaEntity", "m_vLocatorOffset", false, value);
}
QAngle GCNavLinkAreaEntity::GetLocatorAnglesOffset() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNavLinkAreaEntity->LocatorAnglesOffset(ptr=%p)", m_ptr));
    return GetSchemaValue<QAngle>(m_ptr, "CNavLinkAreaEntity", "m_qLocatorAnglesOffset");
}
void GCNavLinkAreaEntity::SetLocatorAnglesOffset(QAngle value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNavLinkAreaEntity->LocatorAnglesOffset(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNavLinkAreaEntity", "m_qLocatorAnglesOffset", false, value);
}
std::string GCNavLinkAreaEntity::GetStrMovementForward() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNavLinkAreaEntity->StrMovementForward(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CNavLinkAreaEntity", "m_strMovementForward").String();
}
void GCNavLinkAreaEntity::SetStrMovementForward(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNavLinkAreaEntity->StrMovementForward(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNavLinkAreaEntity", "m_strMovementForward", false, CUtlSymbolLarge(value.c_str()));
}
std::string GCNavLinkAreaEntity::GetStrMovementReverse() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNavLinkAreaEntity->StrMovementReverse(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CNavLinkAreaEntity", "m_strMovementReverse").String();
}
void GCNavLinkAreaEntity::SetStrMovementReverse(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNavLinkAreaEntity->StrMovementReverse(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNavLinkAreaEntity", "m_strMovementReverse", false, CUtlSymbolLarge(value.c_str()));
}
int32_t GCNavLinkAreaEntity::GetNavLinkIdForward() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNavLinkAreaEntity->NavLinkIdForward(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CNavLinkAreaEntity", "m_nNavLinkIdForward");
}
void GCNavLinkAreaEntity::SetNavLinkIdForward(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNavLinkAreaEntity->NavLinkIdForward(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNavLinkAreaEntity", "m_nNavLinkIdForward", false, value);
}
int32_t GCNavLinkAreaEntity::GetNavLinkIdReverse() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNavLinkAreaEntity->NavLinkIdReverse(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CNavLinkAreaEntity", "m_nNavLinkIdReverse");
}
void GCNavLinkAreaEntity::SetNavLinkIdReverse(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNavLinkAreaEntity->NavLinkIdReverse(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNavLinkAreaEntity", "m_nNavLinkIdReverse", false, value);
}
bool GCNavLinkAreaEntity::GetEnabled() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNavLinkAreaEntity->Enabled(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CNavLinkAreaEntity", "m_bEnabled");
}
void GCNavLinkAreaEntity::SetEnabled(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNavLinkAreaEntity->Enabled(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNavLinkAreaEntity", "m_bEnabled", false, value);
}
std::string GCNavLinkAreaEntity::GetStrFilterName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNavLinkAreaEntity->StrFilterName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CNavLinkAreaEntity", "m_strFilterName").String();
}
void GCNavLinkAreaEntity::SetStrFilterName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNavLinkAreaEntity->StrFilterName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNavLinkAreaEntity", "m_strFilterName", false, CUtlSymbolLarge(value.c_str()));
}
GCBaseFilter GCNavLinkAreaEntity::GetFilter() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNavLinkAreaEntity->Filter(ptr=%p)", m_ptr));
    GCBaseFilter value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CNavLinkAreaEntity", "m_hFilter").Get()));
    return value;
}
void GCNavLinkAreaEntity::SetFilter(GCBaseFilter value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNavLinkAreaEntity->Filter(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Filter' is not possible.\n");
}
GCEntityIOOutput GCNavLinkAreaEntity::GetOnNavLinkStart() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNavLinkAreaEntity->OnNavLinkStart(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CNavLinkAreaEntity", "m_OnNavLinkStart"));
    return value;
}
void GCNavLinkAreaEntity::SetOnNavLinkStart(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNavLinkAreaEntity->OnNavLinkStart(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnNavLinkStart' is not possible.\n");
}
GCEntityIOOutput GCNavLinkAreaEntity::GetOnNavLinkFinish() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNavLinkAreaEntity->OnNavLinkFinish(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CNavLinkAreaEntity", "m_OnNavLinkFinish"));
    return value;
}
void GCNavLinkAreaEntity::SetOnNavLinkFinish(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNavLinkAreaEntity->OnNavLinkFinish(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnNavLinkFinish' is not possible.\n");
}
bool GCNavLinkAreaEntity::GetIsTerminus() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNavLinkAreaEntity->IsTerminus(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CNavLinkAreaEntity", "m_bIsTerminus");
}
void GCNavLinkAreaEntity::SetIsTerminus(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNavLinkAreaEntity->IsTerminus(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNavLinkAreaEntity", "m_bIsTerminus", false, value);
}
void* GCNavLinkAreaEntity::GetPtr() {
    return m_ptr;
}
std::string GCNavLinkAreaEntity::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCNavLinkAreaEntity::IsValid() {
    return (m_ptr != nullptr);
}
GCPointEntity GCNavLinkAreaEntity::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CNavLinkAreaEntity::GetParent(ptr=%p)", m_ptr));
    GCPointEntity value(m_ptr);
    return value;
}
void GCNavLinkAreaEntity::SetParent(GCPointEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CNavLinkAreaEntity::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCNavLinkAreaEntity(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCNavLinkAreaEntity>("CNavLinkAreaEntity")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Width", &GCNavLinkAreaEntity::GetWidth, &GCNavLinkAreaEntity::SetWidth)
        .addProperty("LocatorOffset", &GCNavLinkAreaEntity::GetLocatorOffset, &GCNavLinkAreaEntity::SetLocatorOffset)
        .addProperty("LocatorAnglesOffset", &GCNavLinkAreaEntity::GetLocatorAnglesOffset, &GCNavLinkAreaEntity::SetLocatorAnglesOffset)
        .addProperty("StrMovementForward", &GCNavLinkAreaEntity::GetStrMovementForward, &GCNavLinkAreaEntity::SetStrMovementForward)
        .addProperty("StrMovementReverse", &GCNavLinkAreaEntity::GetStrMovementReverse, &GCNavLinkAreaEntity::SetStrMovementReverse)
        .addProperty("NavLinkIdForward", &GCNavLinkAreaEntity::GetNavLinkIdForward, &GCNavLinkAreaEntity::SetNavLinkIdForward)
        .addProperty("NavLinkIdReverse", &GCNavLinkAreaEntity::GetNavLinkIdReverse, &GCNavLinkAreaEntity::SetNavLinkIdReverse)
        .addProperty("Enabled", &GCNavLinkAreaEntity::GetEnabled, &GCNavLinkAreaEntity::SetEnabled)
        .addProperty("StrFilterName", &GCNavLinkAreaEntity::GetStrFilterName, &GCNavLinkAreaEntity::SetStrFilterName)
        .addProperty("Filter", &GCNavLinkAreaEntity::GetFilter, &GCNavLinkAreaEntity::SetFilter)
        .addProperty("OnNavLinkStart", &GCNavLinkAreaEntity::GetOnNavLinkStart, &GCNavLinkAreaEntity::SetOnNavLinkStart)
        .addProperty("OnNavLinkFinish", &GCNavLinkAreaEntity::GetOnNavLinkFinish, &GCNavLinkAreaEntity::SetOnNavLinkFinish)
        .addProperty("IsTerminus", &GCNavLinkAreaEntity::GetIsTerminus, &GCNavLinkAreaEntity::SetIsTerminus)
        .addProperty("Parent", &GCNavLinkAreaEntity::GetParent, &GCNavLinkAreaEntity::SetParent)
        .addFunction("ToPtr", &GCNavLinkAreaEntity::ToPtr)
        .addFunction("IsValid", &GCNavLinkAreaEntity::IsValid)
        .endClass();
}
GCFuncMoveLinearAlias_momentary_door::GCFuncMoveLinearAlias_momentary_door(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCFuncMoveLinearAlias_momentary_door::GCFuncMoveLinearAlias_momentary_door(void *ptr) {
    m_ptr = ptr;
}
void* GCFuncMoveLinearAlias_momentary_door::GetPtr() {
    return m_ptr;
}
std::string GCFuncMoveLinearAlias_momentary_door::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCFuncMoveLinearAlias_momentary_door::IsValid() {
    return (m_ptr != nullptr);
}
GCFuncMoveLinear GCFuncMoveLinearAlias_momentary_door::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFuncMoveLinearAlias_momentary_door::GetParent(ptr=%p)", m_ptr));
    GCFuncMoveLinear value(m_ptr);
    return value;
}
void GCFuncMoveLinearAlias_momentary_door::SetParent(GCFuncMoveLinear value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFuncMoveLinearAlias_momentary_door::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCFuncMoveLinearAlias_momentary_door(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCFuncMoveLinearAlias_momentary_door>("CFuncMoveLinearAlias_momentary_door")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCFuncMoveLinearAlias_momentary_door::GetParent, &GCFuncMoveLinearAlias_momentary_door::SetParent)
        .addFunction("ToPtr", &GCFuncMoveLinearAlias_momentary_door::ToPtr)
        .addFunction("IsValid", &GCFuncMoveLinearAlias_momentary_door::IsValid)
        .endClass();
}
GCCommentaryAuto::GCCommentaryAuto(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCCommentaryAuto::GCCommentaryAuto(void *ptr) {
    m_ptr = ptr;
}
GCEntityIOOutput GCCommentaryAuto::GetOnCommentaryNewGame() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCommentaryAuto->OnCommentaryNewGame(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CCommentaryAuto", "m_OnCommentaryNewGame"));
    return value;
}
void GCCommentaryAuto::SetOnCommentaryNewGame(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCommentaryAuto->OnCommentaryNewGame(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnCommentaryNewGame' is not possible.\n");
}
GCEntityIOOutput GCCommentaryAuto::GetOnCommentaryMidGame() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCommentaryAuto->OnCommentaryMidGame(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CCommentaryAuto", "m_OnCommentaryMidGame"));
    return value;
}
void GCCommentaryAuto::SetOnCommentaryMidGame(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCommentaryAuto->OnCommentaryMidGame(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnCommentaryMidGame' is not possible.\n");
}
GCEntityIOOutput GCCommentaryAuto::GetOnCommentaryMultiplayerSpawn() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCommentaryAuto->OnCommentaryMultiplayerSpawn(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CCommentaryAuto", "m_OnCommentaryMultiplayerSpawn"));
    return value;
}
void GCCommentaryAuto::SetOnCommentaryMultiplayerSpawn(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCommentaryAuto->OnCommentaryMultiplayerSpawn(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnCommentaryMultiplayerSpawn' is not possible.\n");
}
void* GCCommentaryAuto::GetPtr() {
    return m_ptr;
}
std::string GCCommentaryAuto::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCCommentaryAuto::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseEntity GCCommentaryAuto::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCommentaryAuto::GetParent(ptr=%p)", m_ptr));
    GCBaseEntity value(m_ptr);
    return value;
}
void GCCommentaryAuto::SetParent(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCommentaryAuto::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCCommentaryAuto(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCCommentaryAuto>("CCommentaryAuto")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("OnCommentaryNewGame", &GCCommentaryAuto::GetOnCommentaryNewGame, &GCCommentaryAuto::SetOnCommentaryNewGame)
        .addProperty("OnCommentaryMidGame", &GCCommentaryAuto::GetOnCommentaryMidGame, &GCCommentaryAuto::SetOnCommentaryMidGame)
        .addProperty("OnCommentaryMultiplayerSpawn", &GCCommentaryAuto::GetOnCommentaryMultiplayerSpawn, &GCCommentaryAuto::SetOnCommentaryMultiplayerSpawn)
        .addProperty("Parent", &GCCommentaryAuto::GetParent, &GCCommentaryAuto::SetParent)
        .addFunction("ToPtr", &GCCommentaryAuto::ToPtr)
        .addFunction("IsValid", &GCCommentaryAuto::IsValid)
        .endClass();
}
GCMapInfo::GCMapInfo(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCMapInfo::GCMapInfo(void *ptr) {
    m_ptr = ptr;
}
int32_t GCMapInfo::GetBuyingStatus() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMapInfo->BuyingStatus(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CMapInfo", "m_iBuyingStatus");
}
void GCMapInfo::SetBuyingStatus(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMapInfo->BuyingStatus(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMapInfo", "m_iBuyingStatus", false, value);
}
float GCMapInfo::GetBombRadius() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMapInfo->BombRadius(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CMapInfo", "m_flBombRadius");
}
void GCMapInfo::SetBombRadius(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMapInfo->BombRadius(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMapInfo", "m_flBombRadius", false, value);
}
int32_t GCMapInfo::GetPetPopulation() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMapInfo->PetPopulation(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CMapInfo", "m_iPetPopulation");
}
void GCMapInfo::SetPetPopulation(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMapInfo->PetPopulation(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMapInfo", "m_iPetPopulation", false, value);
}
bool GCMapInfo::GetUseNormalSpawnsForDM() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMapInfo->UseNormalSpawnsForDM(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CMapInfo", "m_bUseNormalSpawnsForDM");
}
void GCMapInfo::SetUseNormalSpawnsForDM(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMapInfo->UseNormalSpawnsForDM(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMapInfo", "m_bUseNormalSpawnsForDM", false, value);
}
bool GCMapInfo::GetDisableAutoGeneratedDMSpawns() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMapInfo->DisableAutoGeneratedDMSpawns(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CMapInfo", "m_bDisableAutoGeneratedDMSpawns");
}
void GCMapInfo::SetDisableAutoGeneratedDMSpawns(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMapInfo->DisableAutoGeneratedDMSpawns(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMapInfo", "m_bDisableAutoGeneratedDMSpawns", false, value);
}
float GCMapInfo::GetBotMaxVisionDistance() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMapInfo->BotMaxVisionDistance(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CMapInfo", "m_flBotMaxVisionDistance");
}
void GCMapInfo::SetBotMaxVisionDistance(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMapInfo->BotMaxVisionDistance(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMapInfo", "m_flBotMaxVisionDistance", false, value);
}
int32_t GCMapInfo::GetHostageCount() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMapInfo->HostageCount(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CMapInfo", "m_iHostageCount");
}
void GCMapInfo::SetHostageCount(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMapInfo->HostageCount(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMapInfo", "m_iHostageCount", false, value);
}
bool GCMapInfo::GetFadePlayerVisibilityFarZ() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMapInfo->FadePlayerVisibilityFarZ(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CMapInfo", "m_bFadePlayerVisibilityFarZ");
}
void GCMapInfo::SetFadePlayerVisibilityFarZ(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMapInfo->FadePlayerVisibilityFarZ(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMapInfo", "m_bFadePlayerVisibilityFarZ", false, value);
}
void* GCMapInfo::GetPtr() {
    return m_ptr;
}
std::string GCMapInfo::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCMapInfo::IsValid() {
    return (m_ptr != nullptr);
}
GCPointEntity GCMapInfo::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CMapInfo::GetParent(ptr=%p)", m_ptr));
    GCPointEntity value(m_ptr);
    return value;
}
void GCMapInfo::SetParent(GCPointEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CMapInfo::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCMapInfo(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCMapInfo>("CMapInfo")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("BuyingStatus", &GCMapInfo::GetBuyingStatus, &GCMapInfo::SetBuyingStatus)
        .addProperty("BombRadius", &GCMapInfo::GetBombRadius, &GCMapInfo::SetBombRadius)
        .addProperty("PetPopulation", &GCMapInfo::GetPetPopulation, &GCMapInfo::SetPetPopulation)
        .addProperty("UseNormalSpawnsForDM", &GCMapInfo::GetUseNormalSpawnsForDM, &GCMapInfo::SetUseNormalSpawnsForDM)
        .addProperty("DisableAutoGeneratedDMSpawns", &GCMapInfo::GetDisableAutoGeneratedDMSpawns, &GCMapInfo::SetDisableAutoGeneratedDMSpawns)
        .addProperty("BotMaxVisionDistance", &GCMapInfo::GetBotMaxVisionDistance, &GCMapInfo::SetBotMaxVisionDistance)
        .addProperty("HostageCount", &GCMapInfo::GetHostageCount, &GCMapInfo::SetHostageCount)
        .addProperty("FadePlayerVisibilityFarZ", &GCMapInfo::GetFadePlayerVisibilityFarZ, &GCMapInfo::SetFadePlayerVisibilityFarZ)
        .addProperty("Parent", &GCMapInfo::GetParent, &GCMapInfo::SetParent)
        .addFunction("ToPtr", &GCMapInfo::ToPtr)
        .addFunction("IsValid", &GCMapInfo::IsValid)
        .endClass();
}
GCTriggerBombReset::GCTriggerBombReset(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCTriggerBombReset::GCTriggerBombReset(void *ptr) {
    m_ptr = ptr;
}
void* GCTriggerBombReset::GetPtr() {
    return m_ptr;
}
std::string GCTriggerBombReset::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCTriggerBombReset::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseTrigger GCTriggerBombReset::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTriggerBombReset::GetParent(ptr=%p)", m_ptr));
    GCBaseTrigger value(m_ptr);
    return value;
}
void GCTriggerBombReset::SetParent(GCBaseTrigger value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CTriggerBombReset::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCTriggerBombReset(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCTriggerBombReset>("CTriggerBombReset")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCTriggerBombReset::GetParent, &GCTriggerBombReset::SetParent)
        .addFunction("ToPtr", &GCTriggerBombReset::ToPtr)
        .addFunction("IsValid", &GCTriggerBombReset::IsValid)
        .endClass();
}
GCBaseDMStart::GCBaseDMStart(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCBaseDMStart::GCBaseDMStart(void *ptr) {
    m_ptr = ptr;
}
std::string GCBaseDMStart::GetMaster() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseDMStart->Master(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CBaseDMStart", "m_Master").String();
}
void GCBaseDMStart::SetMaster(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseDMStart->Master(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseDMStart", "m_Master", false, CUtlSymbolLarge(value.c_str()));
}
void* GCBaseDMStart::GetPtr() {
    return m_ptr;
}
std::string GCBaseDMStart::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCBaseDMStart::IsValid() {
    return (m_ptr != nullptr);
}
GCPointEntity GCBaseDMStart::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CBaseDMStart::GetParent(ptr=%p)", m_ptr));
    GCPointEntity value(m_ptr);
    return value;
}
void GCBaseDMStart::SetParent(GCPointEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CBaseDMStart::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCBaseDMStart(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCBaseDMStart>("CBaseDMStart")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Master", &GCBaseDMStart::GetMaster, &GCBaseDMStart::SetMaster)
        .addProperty("Parent", &GCBaseDMStart::GetParent, &GCBaseDMStart::SetParent)
        .addFunction("ToPtr", &GCBaseDMStart::ToPtr)
        .addFunction("IsValid", &GCBaseDMStart::IsValid)
        .endClass();
}
GCLogicMeasureMovement::GCLogicMeasureMovement(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCLogicMeasureMovement::GCLogicMeasureMovement(void *ptr) {
    m_ptr = ptr;
}
std::string GCLogicMeasureMovement::GetStrMeasureTarget() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CLogicMeasureMovement->StrMeasureTarget(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CLogicMeasureMovement", "m_strMeasureTarget").String();
}
void GCLogicMeasureMovement::SetStrMeasureTarget(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CLogicMeasureMovement->StrMeasureTarget(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CLogicMeasureMovement", "m_strMeasureTarget", false, CUtlSymbolLarge(value.c_str()));
}
std::string GCLogicMeasureMovement::GetStrMeasureReference() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CLogicMeasureMovement->StrMeasureReference(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CLogicMeasureMovement", "m_strMeasureReference").String();
}
void GCLogicMeasureMovement::SetStrMeasureReference(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CLogicMeasureMovement->StrMeasureReference(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CLogicMeasureMovement", "m_strMeasureReference", false, CUtlSymbolLarge(value.c_str()));
}
std::string GCLogicMeasureMovement::GetStrTargetReference() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CLogicMeasureMovement->StrTargetReference(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CLogicMeasureMovement", "m_strTargetReference").String();
}
void GCLogicMeasureMovement::SetStrTargetReference(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CLogicMeasureMovement->StrTargetReference(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CLogicMeasureMovement", "m_strTargetReference", false, CUtlSymbolLarge(value.c_str()));
}
GCBaseEntity GCLogicMeasureMovement::GetMeasureTarget() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CLogicMeasureMovement->MeasureTarget(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CLogicMeasureMovement", "m_hMeasureTarget").Get()));
    return value;
}
void GCLogicMeasureMovement::SetMeasureTarget(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CLogicMeasureMovement->MeasureTarget(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'MeasureTarget' is not possible.\n");
}
GCBaseEntity GCLogicMeasureMovement::GetMeasureReference() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CLogicMeasureMovement->MeasureReference(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CLogicMeasureMovement", "m_hMeasureReference").Get()));
    return value;
}
void GCLogicMeasureMovement::SetMeasureReference(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CLogicMeasureMovement->MeasureReference(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'MeasureReference' is not possible.\n");
}
GCBaseEntity GCLogicMeasureMovement::GetTarget() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CLogicMeasureMovement->Target(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CLogicMeasureMovement", "m_hTarget").Get()));
    return value;
}
void GCLogicMeasureMovement::SetTarget(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CLogicMeasureMovement->Target(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Target' is not possible.\n");
}
GCBaseEntity GCLogicMeasureMovement::GetTargetReference() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CLogicMeasureMovement->TargetReference(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CLogicMeasureMovement", "m_hTargetReference").Get()));
    return value;
}
void GCLogicMeasureMovement::SetTargetReference(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CLogicMeasureMovement->TargetReference(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'TargetReference' is not possible.\n");
}
float GCLogicMeasureMovement::GetScale() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CLogicMeasureMovement->Scale(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CLogicMeasureMovement", "m_flScale");
}
void GCLogicMeasureMovement::SetScale(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CLogicMeasureMovement->Scale(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CLogicMeasureMovement", "m_flScale", false, value);
}
int32_t GCLogicMeasureMovement::GetMeasureType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CLogicMeasureMovement->MeasureType(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CLogicMeasureMovement", "m_nMeasureType");
}
void GCLogicMeasureMovement::SetMeasureType(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CLogicMeasureMovement->MeasureType(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CLogicMeasureMovement", "m_nMeasureType", false, value);
}
void* GCLogicMeasureMovement::GetPtr() {
    return m_ptr;
}
std::string GCLogicMeasureMovement::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCLogicMeasureMovement::IsValid() {
    return (m_ptr != nullptr);
}
GCLogicalEntity GCLogicMeasureMovement::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CLogicMeasureMovement::GetParent(ptr=%p)", m_ptr));
    GCLogicalEntity value(m_ptr);
    return value;
}
void GCLogicMeasureMovement::SetParent(GCLogicalEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CLogicMeasureMovement::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCLogicMeasureMovement(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCLogicMeasureMovement>("CLogicMeasureMovement")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("StrMeasureTarget", &GCLogicMeasureMovement::GetStrMeasureTarget, &GCLogicMeasureMovement::SetStrMeasureTarget)
        .addProperty("StrMeasureReference", &GCLogicMeasureMovement::GetStrMeasureReference, &GCLogicMeasureMovement::SetStrMeasureReference)
        .addProperty("StrTargetReference", &GCLogicMeasureMovement::GetStrTargetReference, &GCLogicMeasureMovement::SetStrTargetReference)
        .addProperty("MeasureTarget", &GCLogicMeasureMovement::GetMeasureTarget, &GCLogicMeasureMovement::SetMeasureTarget)
        .addProperty("MeasureReference", &GCLogicMeasureMovement::GetMeasureReference, &GCLogicMeasureMovement::SetMeasureReference)
        .addProperty("Target", &GCLogicMeasureMovement::GetTarget, &GCLogicMeasureMovement::SetTarget)
        .addProperty("TargetReference", &GCLogicMeasureMovement::GetTargetReference, &GCLogicMeasureMovement::SetTargetReference)
        .addProperty("Scale", &GCLogicMeasureMovement::GetScale, &GCLogicMeasureMovement::SetScale)
        .addProperty("MeasureType", &GCLogicMeasureMovement::GetMeasureType, &GCLogicMeasureMovement::SetMeasureType)
        .addProperty("Parent", &GCLogicMeasureMovement::GetParent, &GCLogicMeasureMovement::SetParent)
        .addFunction("ToPtr", &GCLogicMeasureMovement::ToPtr)
        .addFunction("IsValid", &GCLogicMeasureMovement::IsValid)
        .endClass();
}
GViewAngleServerChange_t::GViewAngleServerChange_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GViewAngleServerChange_t::GViewAngleServerChange_t(void *ptr) {
    m_ptr = ptr;
}
uint64_t GViewAngleServerChange_t::GetType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ViewAngleServerChange_t->Type(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "ViewAngleServerChange_t", "nType");
}
void GViewAngleServerChange_t::SetType(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ViewAngleServerChange_t->Type(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "ViewAngleServerChange_t", "nType", true, value);
}
QAngle GViewAngleServerChange_t::GetAngle() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ViewAngleServerChange_t->Angle(ptr=%p)", m_ptr));
    return GetSchemaValue<QAngle>(m_ptr, "ViewAngleServerChange_t", "qAngle");
}
void GViewAngleServerChange_t::SetAngle(QAngle value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ViewAngleServerChange_t->Angle(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "ViewAngleServerChange_t", "qAngle", true, value);
}
uint32_t GViewAngleServerChange_t::GetIndex() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ViewAngleServerChange_t->Index(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "ViewAngleServerChange_t", "nIndex");
}
void GViewAngleServerChange_t::SetIndex(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ViewAngleServerChange_t->Index(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "ViewAngleServerChange_t", "nIndex", true, value);
}
void* GViewAngleServerChange_t::GetPtr() {
    return m_ptr;
}
std::string GViewAngleServerChange_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GViewAngleServerChange_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassViewAngleServerChange_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GViewAngleServerChange_t>("ViewAngleServerChange_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Type", &GViewAngleServerChange_t::GetType, &GViewAngleServerChange_t::SetType)
        .addProperty("Angle", &GViewAngleServerChange_t::GetAngle, &GViewAngleServerChange_t::SetAngle)
        .addProperty("Index", &GViewAngleServerChange_t::GetIndex, &GViewAngleServerChange_t::SetIndex)
        .addFunction("ToPtr", &GViewAngleServerChange_t::ToPtr)
        .addFunction("IsValid", &GViewAngleServerChange_t::IsValid)
        .endClass();
}
GPhysicsRagdollPose_t::GPhysicsRagdollPose_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GPhysicsRagdollPose_t::GPhysicsRagdollPose_t(void *ptr) {
    m_ptr = ptr;
}
GCNetworkVarChainer GPhysicsRagdollPose_t::Get__pChainEntity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysicsRagdollPose_t->__pChainEntity(ptr=%p)", m_ptr));
    GCNetworkVarChainer value(GetSchemaPtr(m_ptr, "PhysicsRagdollPose_t", "__m_pChainEntity"));
    return value;
}
void GPhysicsRagdollPose_t::Set__pChainEntity(GCNetworkVarChainer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysicsRagdollPose_t->__pChainEntity(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for '__pChainEntity' is not possible.\n");
}
GCBaseEntity GPhysicsRagdollPose_t::GetOwner() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysicsRagdollPose_t->Owner(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "PhysicsRagdollPose_t", "m_hOwner").Get()));
    return value;
}
void GPhysicsRagdollPose_t::SetOwner(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysicsRagdollPose_t->Owner(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Owner' is not possible.\n");
}
void* GPhysicsRagdollPose_t::GetPtr() {
    return m_ptr;
}
std::string GPhysicsRagdollPose_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GPhysicsRagdollPose_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassPhysicsRagdollPose_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GPhysicsRagdollPose_t>("PhysicsRagdollPose_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("__pChainEntity", &GPhysicsRagdollPose_t::Get__pChainEntity, &GPhysicsRagdollPose_t::Set__pChainEntity)
        .addProperty("Owner", &GPhysicsRagdollPose_t::GetOwner, &GPhysicsRagdollPose_t::SetOwner)
        .addFunction("ToPtr", &GPhysicsRagdollPose_t::ToPtr)
        .addFunction("IsValid", &GPhysicsRagdollPose_t::IsValid)
        .endClass();
}
GCBreachChargeProjectile::GCBreachChargeProjectile(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCBreachChargeProjectile::GCBreachChargeProjectile(void *ptr) {
    m_ptr = ptr;
}
void* GCBreachChargeProjectile::GetPtr() {
    return m_ptr;
}
std::string GCBreachChargeProjectile::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCBreachChargeProjectile::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseGrenade GCBreachChargeProjectile::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CBreachChargeProjectile::GetParent(ptr=%p)", m_ptr));
    GCBaseGrenade value(m_ptr);
    return value;
}
void GCBreachChargeProjectile::SetParent(GCBaseGrenade value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CBreachChargeProjectile::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCBreachChargeProjectile(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCBreachChargeProjectile>("CBreachChargeProjectile")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCBreachChargeProjectile::GetParent, &GCBreachChargeProjectile::SetParent)
        .addFunction("ToPtr", &GCBreachChargeProjectile::ToPtr)
        .addFunction("IsValid", &GCBreachChargeProjectile::IsValid)
        .endClass();
}
GCRangeFloat::GCRangeFloat(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCRangeFloat::GCRangeFloat(void *ptr) {
    m_ptr = ptr;
}
std::vector<float> GCRangeFloat::GetValue() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CRangeFloat->Value(ptr=%p,size=2)", m_ptr));
    float* outValue = (float*)GetSchemaPtr(m_ptr, "CRangeFloat", "m_pValue"); std::vector<float> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCRangeFloat::SetValue(std::vector<float> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CRangeFloat->Value(ptr=%p,size=2)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Value' is not possible.\n");
}
void* GCRangeFloat::GetPtr() {
    return m_ptr;
}
std::string GCRangeFloat::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCRangeFloat::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCRangeFloat(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCRangeFloat>("CRangeFloat")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Value", &GCRangeFloat::GetValue, &GCRangeFloat::SetValue)
        .addFunction("ToPtr", &GCRangeFloat::ToPtr)
        .addFunction("IsValid", &GCRangeFloat::IsValid)
        .endClass();
}
GCAnimEventListenerBase::GCAnimEventListenerBase(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCAnimEventListenerBase::GCAnimEventListenerBase(void *ptr) {
    m_ptr = ptr;
}
void* GCAnimEventListenerBase::GetPtr() {
    return m_ptr;
}
std::string GCAnimEventListenerBase::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCAnimEventListenerBase::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCAnimEventListenerBase(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCAnimEventListenerBase>("CAnimEventListenerBase")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addFunction("ToPtr", &GCAnimEventListenerBase::ToPtr)
        .addFunction("IsValid", &GCAnimEventListenerBase::IsValid)
        .endClass();
}
GRelationship_t::GRelationship_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GRelationship_t::GRelationship_t(void *ptr) {
    m_ptr = ptr;
}
uint64_t GRelationship_t::GetDisposition() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: Relationship_t->Disposition(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "Relationship_t", "disposition");
}
void GRelationship_t::SetDisposition(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: Relationship_t->Disposition(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "Relationship_t", "disposition", true, value);
}
int32_t GRelationship_t::GetPriority() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: Relationship_t->Priority(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "Relationship_t", "priority");
}
void GRelationship_t::SetPriority(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: Relationship_t->Priority(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "Relationship_t", "priority", true, value);
}
void* GRelationship_t::GetPtr() {
    return m_ptr;
}
std::string GRelationship_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GRelationship_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassRelationship_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GRelationship_t>("Relationship_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Disposition", &GRelationship_t::GetDisposition, &GRelationship_t::SetDisposition)
        .addProperty("Priority", &GRelationship_t::GetPriority, &GRelationship_t::SetPriority)
        .addFunction("ToPtr", &GRelationship_t::ToPtr)
        .addFunction("IsValid", &GRelationship_t::IsValid)
        .endClass();
}
GCRemapFloat::GCRemapFloat(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCRemapFloat::GCRemapFloat(void *ptr) {
    m_ptr = ptr;
}
std::vector<float> GCRemapFloat::GetValue() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CRemapFloat->Value(ptr=%p,size=4)", m_ptr));
    float* outValue = (float*)GetSchemaPtr(m_ptr, "CRemapFloat", "m_pValue"); std::vector<float> ret; for(int i = 0; i < 4; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCRemapFloat::SetValue(std::vector<float> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CRemapFloat->Value(ptr=%p,size=4)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Value' is not possible.\n");
}
void* GCRemapFloat::GetPtr() {
    return m_ptr;
}
std::string GCRemapFloat::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCRemapFloat::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCRemapFloat(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCRemapFloat>("CRemapFloat")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Value", &GCRemapFloat::GetValue, &GCRemapFloat::SetValue)
        .addFunction("ToPtr", &GCRemapFloat::ToPtr)
        .addFunction("IsValid", &GCRemapFloat::IsValid)
        .endClass();
}
GIGapHost_GameEntity::GIGapHost_GameEntity(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GIGapHost_GameEntity::GIGapHost_GameEntity(void *ptr) {
    m_ptr = ptr;
}
void* GIGapHost_GameEntity::GetPtr() {
    return m_ptr;
}
std::string GIGapHost_GameEntity::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GIGapHost_GameEntity::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassIGapHost_GameEntity(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GIGapHost_GameEntity>("IGapHost_GameEntity")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addFunction("ToPtr", &GIGapHost_GameEntity::ToPtr)
        .addFunction("IsValid", &GIGapHost_GameEntity::IsValid)
        .endClass();
}
GCFootstepTableHandle::GCFootstepTableHandle(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCFootstepTableHandle::GCFootstepTableHandle(void *ptr) {
    m_ptr = ptr;
}
void* GCFootstepTableHandle::GetPtr() {
    return m_ptr;
}
std::string GCFootstepTableHandle::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCFootstepTableHandle::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCFootstepTableHandle(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCFootstepTableHandle>("CFootstepTableHandle")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addFunction("ToPtr", &GCFootstepTableHandle::ToPtr)
        .addFunction("IsValid", &GCFootstepTableHandle::IsValid)
        .endClass();
}
GCCSPlayerController_InventoryServices::GCCSPlayerController_InventoryServices(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCCSPlayerController_InventoryServices::GCCSPlayerController_InventoryServices(void *ptr) {
    m_ptr = ptr;
}
uint16_t GCCSPlayerController_InventoryServices::GetMusicID() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController_InventoryServices->MusicID(ptr=%p)", m_ptr));
    return GetSchemaValue<uint16_t>(m_ptr, "CCSPlayerController_InventoryServices", "m_unMusicID");
}
void GCCSPlayerController_InventoryServices::SetMusicID(uint16_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController_InventoryServices->MusicID(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController_InventoryServices", "m_unMusicID", false, value);
}
std::vector<uint64_t> GCCSPlayerController_InventoryServices::GetRank() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController_InventoryServices->Rank(ptr=%p,size=6)", m_ptr));
    uint64_t* outValue = (uint64_t*)GetSchemaPtr(m_ptr, "CCSPlayerController_InventoryServices", "m_rank"); std::vector<uint64_t> ret; for(int i = 0; i < 6; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCCSPlayerController_InventoryServices::SetRank(std::vector<uint64_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController_InventoryServices->Rank(ptr=%p,size=6)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Rank' is not possible.\n");
}
int32_t GCCSPlayerController_InventoryServices::GetPersonaDataPublicLevel() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController_InventoryServices->PersonaDataPublicLevel(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController_InventoryServices", "m_nPersonaDataPublicLevel");
}
void GCCSPlayerController_InventoryServices::SetPersonaDataPublicLevel(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController_InventoryServices->PersonaDataPublicLevel(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController_InventoryServices", "m_nPersonaDataPublicLevel", false, value);
}
int32_t GCCSPlayerController_InventoryServices::GetPersonaDataPublicCommendsLeader() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController_InventoryServices->PersonaDataPublicCommendsLeader(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController_InventoryServices", "m_nPersonaDataPublicCommendsLeader");
}
void GCCSPlayerController_InventoryServices::SetPersonaDataPublicCommendsLeader(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController_InventoryServices->PersonaDataPublicCommendsLeader(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController_InventoryServices", "m_nPersonaDataPublicCommendsLeader", false, value);
}
int32_t GCCSPlayerController_InventoryServices::GetPersonaDataPublicCommendsTeacher() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController_InventoryServices->PersonaDataPublicCommendsTeacher(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController_InventoryServices", "m_nPersonaDataPublicCommendsTeacher");
}
void GCCSPlayerController_InventoryServices::SetPersonaDataPublicCommendsTeacher(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController_InventoryServices->PersonaDataPublicCommendsTeacher(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController_InventoryServices", "m_nPersonaDataPublicCommendsTeacher", false, value);
}
int32_t GCCSPlayerController_InventoryServices::GetPersonaDataPublicCommendsFriendly() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController_InventoryServices->PersonaDataPublicCommendsFriendly(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController_InventoryServices", "m_nPersonaDataPublicCommendsFriendly");
}
void GCCSPlayerController_InventoryServices::SetPersonaDataPublicCommendsFriendly(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController_InventoryServices->PersonaDataPublicCommendsFriendly(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController_InventoryServices", "m_nPersonaDataPublicCommendsFriendly", false, value);
}
int32_t GCCSPlayerController_InventoryServices::GetPersonaDataXpTrailLevel() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController_InventoryServices->PersonaDataXpTrailLevel(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayerController_InventoryServices", "m_nPersonaDataXpTrailLevel");
}
void GCCSPlayerController_InventoryServices::SetPersonaDataXpTrailLevel(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController_InventoryServices->PersonaDataXpTrailLevel(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayerController_InventoryServices", "m_nPersonaDataXpTrailLevel", false, value);
}
std::vector<uint32_t> GCCSPlayerController_InventoryServices::GetEquippedPlayerSprayIDs() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController_InventoryServices->EquippedPlayerSprayIDs(ptr=%p,size=1)", m_ptr));
    uint32_t* outValue = (uint32_t*)GetSchemaPtr(m_ptr, "CCSPlayerController_InventoryServices", "m_unEquippedPlayerSprayIDs"); std::vector<uint32_t> ret; for(int i = 0; i < 1; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCCSPlayerController_InventoryServices::SetEquippedPlayerSprayIDs(std::vector<uint32_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController_InventoryServices->EquippedPlayerSprayIDs(ptr=%p,size=1)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'EquippedPlayerSprayIDs' is not possible.\n");
}
std::vector<GServerAuthoritativeWeaponSlot_t> GCCSPlayerController_InventoryServices::GetServerAuthoritativeWeaponSlots() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayerController_InventoryServices->ServerAuthoritativeWeaponSlots(ptr=%p)", m_ptr));
    CUtlVector<GServerAuthoritativeWeaponSlot_t>* vec = GetSchemaValue<CUtlVector<GServerAuthoritativeWeaponSlot_t>*>(m_ptr, "CCSPlayerController_InventoryServices", "m_vecServerAuthoritativeWeaponSlots"); std::vector<GServerAuthoritativeWeaponSlot_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCCSPlayerController_InventoryServices::SetServerAuthoritativeWeaponSlots(std::vector<GServerAuthoritativeWeaponSlot_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayerController_InventoryServices->ServerAuthoritativeWeaponSlots(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GServerAuthoritativeWeaponSlot_t>(m_ptr, "CCSPlayerController_InventoryServices", "m_vecServerAuthoritativeWeaponSlots", false, value);
}
void* GCCSPlayerController_InventoryServices::GetPtr() {
    return m_ptr;
}
std::string GCCSPlayerController_InventoryServices::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCCSPlayerController_InventoryServices::IsValid() {
    return (m_ptr != nullptr);
}
GCPlayerControllerComponent GCCSPlayerController_InventoryServices::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSPlayerController_InventoryServices::GetParent(ptr=%p)", m_ptr));
    GCPlayerControllerComponent value(m_ptr);
    return value;
}
void GCCSPlayerController_InventoryServices::SetParent(GCPlayerControllerComponent value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSPlayerController_InventoryServices::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCCSPlayerController_InventoryServices(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCCSPlayerController_InventoryServices>("CCSPlayerController_InventoryServices")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("MusicID", &GCCSPlayerController_InventoryServices::GetMusicID, &GCCSPlayerController_InventoryServices::SetMusicID)
        .addProperty("Rank", &GCCSPlayerController_InventoryServices::GetRank, &GCCSPlayerController_InventoryServices::SetRank)
        .addProperty("PersonaDataPublicLevel", &GCCSPlayerController_InventoryServices::GetPersonaDataPublicLevel, &GCCSPlayerController_InventoryServices::SetPersonaDataPublicLevel)
        .addProperty("PersonaDataPublicCommendsLeader", &GCCSPlayerController_InventoryServices::GetPersonaDataPublicCommendsLeader, &GCCSPlayerController_InventoryServices::SetPersonaDataPublicCommendsLeader)
        .addProperty("PersonaDataPublicCommendsTeacher", &GCCSPlayerController_InventoryServices::GetPersonaDataPublicCommendsTeacher, &GCCSPlayerController_InventoryServices::SetPersonaDataPublicCommendsTeacher)
        .addProperty("PersonaDataPublicCommendsFriendly", &GCCSPlayerController_InventoryServices::GetPersonaDataPublicCommendsFriendly, &GCCSPlayerController_InventoryServices::SetPersonaDataPublicCommendsFriendly)
        .addProperty("PersonaDataXpTrailLevel", &GCCSPlayerController_InventoryServices::GetPersonaDataXpTrailLevel, &GCCSPlayerController_InventoryServices::SetPersonaDataXpTrailLevel)
        .addProperty("EquippedPlayerSprayIDs", &GCCSPlayerController_InventoryServices::GetEquippedPlayerSprayIDs, &GCCSPlayerController_InventoryServices::SetEquippedPlayerSprayIDs)
        .addProperty("ServerAuthoritativeWeaponSlots", &GCCSPlayerController_InventoryServices::GetServerAuthoritativeWeaponSlots, &GCCSPlayerController_InventoryServices::SetServerAuthoritativeWeaponSlots)
        .addProperty("Parent", &GCCSPlayerController_InventoryServices::GetParent, &GCCSPlayerController_InventoryServices::SetParent)
        .addFunction("ToPtr", &GCCSPlayerController_InventoryServices::ToPtr)
        .addFunction("IsValid", &GCCSPlayerController_InventoryServices::IsValid)
        .endClass();
}
GCResponseQueue::GCResponseQueue(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCResponseQueue::GCResponseQueue(void *ptr) {
    m_ptr = ptr;
}
std::vector<GCAI_Expresser*> GCResponseQueue::GetExpresserTargets() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CResponseQueue->ExpresserTargets(ptr=%p)", m_ptr));
    CUtlVector<GCAI_Expresser*>* vec = GetSchemaValue<CUtlVector<GCAI_Expresser*>*>(m_ptr, "CResponseQueue", "m_ExpresserTargets"); std::vector<GCAI_Expresser*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCResponseQueue::SetExpresserTargets(std::vector<GCAI_Expresser*> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CResponseQueue->ExpresserTargets(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GCAI_Expresser*>(m_ptr, "CResponseQueue", "m_ExpresserTargets", false, value);
}
void* GCResponseQueue::GetPtr() {
    return m_ptr;
}
std::string GCResponseQueue::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCResponseQueue::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCResponseQueue(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCResponseQueue>("CResponseQueue")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("ExpresserTargets", &GCResponseQueue::GetExpresserTargets, &GCResponseQueue::SetExpresserTargets)
        .addFunction("ToPtr", &GCResponseQueue::ToPtr)
        .addFunction("IsValid", &GCResponseQueue::IsValid)
        .endClass();
}
GCScriptUniformRandomStream::GCScriptUniformRandomStream(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCScriptUniformRandomStream::GCScriptUniformRandomStream(void *ptr) {
    m_ptr = ptr;
}
int32_t GCScriptUniformRandomStream::GetInitialSeed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CScriptUniformRandomStream->InitialSeed(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CScriptUniformRandomStream", "m_nInitialSeed");
}
void GCScriptUniformRandomStream::SetInitialSeed(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CScriptUniformRandomStream->InitialSeed(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CScriptUniformRandomStream", "m_nInitialSeed", false, value);
}
void* GCScriptUniformRandomStream::GetPtr() {
    return m_ptr;
}
std::string GCScriptUniformRandomStream::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCScriptUniformRandomStream::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCScriptUniformRandomStream(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCScriptUniformRandomStream>("CScriptUniformRandomStream")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("InitialSeed", &GCScriptUniformRandomStream::GetInitialSeed, &GCScriptUniformRandomStream::SetInitialSeed)
        .addFunction("ToPtr", &GCScriptUniformRandomStream::ToPtr)
        .addFunction("IsValid", &GCScriptUniformRandomStream::IsValid)
        .endClass();
}
GParticleIndex_t::GParticleIndex_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GParticleIndex_t::GParticleIndex_t(void *ptr) {
    m_ptr = ptr;
}
int32_t GParticleIndex_t::GetValue() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ParticleIndex_t->Value(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "ParticleIndex_t", "m_Value");
}
void GParticleIndex_t::SetValue(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ParticleIndex_t->Value(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "ParticleIndex_t", "m_Value", true, value);
}
void* GParticleIndex_t::GetPtr() {
    return m_ptr;
}
std::string GParticleIndex_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GParticleIndex_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassParticleIndex_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GParticleIndex_t>("ParticleIndex_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Value", &GParticleIndex_t::GetValue, &GParticleIndex_t::SetValue)
        .addFunction("ToPtr", &GParticleIndex_t::ToPtr)
        .addFunction("IsValid", &GParticleIndex_t::IsValid)
        .endClass();
}
GCPhysHinge::GCPhysHinge(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPhysHinge::GCPhysHinge(void *ptr) {
    m_ptr = ptr;
}
GConstraintSoundInfo GCPhysHinge::GetSoundInfo() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysHinge->SoundInfo(ptr=%p)", m_ptr));
    GConstraintSoundInfo value(GetSchemaPtr(m_ptr, "CPhysHinge", "m_soundInfo"));
    return value;
}
void GCPhysHinge::SetSoundInfo(GConstraintSoundInfo value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysHinge->SoundInfo(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'SoundInfo' is not possible.\n");
}
GCEntityIOOutput GCPhysHinge::GetNotifyMinLimitReached() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysHinge->NotifyMinLimitReached(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CPhysHinge", "m_NotifyMinLimitReached"));
    return value;
}
void GCPhysHinge::SetNotifyMinLimitReached(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysHinge->NotifyMinLimitReached(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'NotifyMinLimitReached' is not possible.\n");
}
GCEntityIOOutput GCPhysHinge::GetNotifyMaxLimitReached() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysHinge->NotifyMaxLimitReached(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CPhysHinge", "m_NotifyMaxLimitReached"));
    return value;
}
void GCPhysHinge::SetNotifyMaxLimitReached(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysHinge->NotifyMaxLimitReached(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'NotifyMaxLimitReached' is not possible.\n");
}
bool GCPhysHinge::GetAtMinLimit() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysHinge->AtMinLimit(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPhysHinge", "m_bAtMinLimit");
}
void GCPhysHinge::SetAtMinLimit(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysHinge->AtMinLimit(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysHinge", "m_bAtMinLimit", false, value);
}
bool GCPhysHinge::GetAtMaxLimit() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysHinge->AtMaxLimit(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPhysHinge", "m_bAtMaxLimit");
}
void GCPhysHinge::SetAtMaxLimit(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysHinge->AtMaxLimit(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysHinge", "m_bAtMaxLimit", false, value);
}
Gconstraint_hingeparams_t GCPhysHinge::GetHinge() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysHinge->Hinge(ptr=%p)", m_ptr));
    Gconstraint_hingeparams_t value(GetSchemaPtr(m_ptr, "CPhysHinge", "m_hinge"));
    return value;
}
void GCPhysHinge::SetHinge(Gconstraint_hingeparams_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysHinge->Hinge(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Hinge' is not possible.\n");
}
float GCPhysHinge::GetHingeFriction() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysHinge->HingeFriction(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPhysHinge", "m_hingeFriction");
}
void GCPhysHinge::SetHingeFriction(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysHinge->HingeFriction(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysHinge", "m_hingeFriction", false, value);
}
float GCPhysHinge::GetSystemLoadScale() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysHinge->SystemLoadScale(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPhysHinge", "m_systemLoadScale");
}
void GCPhysHinge::SetSystemLoadScale(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysHinge->SystemLoadScale(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysHinge", "m_systemLoadScale", false, value);
}
bool GCPhysHinge::GetIsAxisLocal() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysHinge->IsAxisLocal(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPhysHinge", "m_bIsAxisLocal");
}
void GCPhysHinge::SetIsAxisLocal(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysHinge->IsAxisLocal(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysHinge", "m_bIsAxisLocal", false, value);
}
float GCPhysHinge::GetMinRotation() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysHinge->MinRotation(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPhysHinge", "m_flMinRotation");
}
void GCPhysHinge::SetMinRotation(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysHinge->MinRotation(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysHinge", "m_flMinRotation", false, value);
}
float GCPhysHinge::GetMaxRotation() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysHinge->MaxRotation(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPhysHinge", "m_flMaxRotation");
}
void GCPhysHinge::SetMaxRotation(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysHinge->MaxRotation(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysHinge", "m_flMaxRotation", false, value);
}
float GCPhysHinge::GetInitialRotation() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysHinge->InitialRotation(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPhysHinge", "m_flInitialRotation");
}
void GCPhysHinge::SetInitialRotation(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysHinge->InitialRotation(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysHinge", "m_flInitialRotation", false, value);
}
float GCPhysHinge::GetMotorFrequency() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysHinge->MotorFrequency(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPhysHinge", "m_flMotorFrequency");
}
void GCPhysHinge::SetMotorFrequency(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysHinge->MotorFrequency(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysHinge", "m_flMotorFrequency", false, value);
}
float GCPhysHinge::GetMotorDampingRatio() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysHinge->MotorDampingRatio(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPhysHinge", "m_flMotorDampingRatio");
}
void GCPhysHinge::SetMotorDampingRatio(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysHinge->MotorDampingRatio(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysHinge", "m_flMotorDampingRatio", false, value);
}
float GCPhysHinge::GetAngleSpeed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysHinge->AngleSpeed(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPhysHinge", "m_flAngleSpeed");
}
void GCPhysHinge::SetAngleSpeed(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysHinge->AngleSpeed(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysHinge", "m_flAngleSpeed", false, value);
}
float GCPhysHinge::GetAngleSpeedThreshold() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysHinge->AngleSpeedThreshold(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPhysHinge", "m_flAngleSpeedThreshold");
}
void GCPhysHinge::SetAngleSpeedThreshold(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysHinge->AngleSpeedThreshold(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysHinge", "m_flAngleSpeedThreshold", false, value);
}
GCEntityIOOutput GCPhysHinge::GetOnStartMoving() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysHinge->OnStartMoving(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CPhysHinge", "m_OnStartMoving"));
    return value;
}
void GCPhysHinge::SetOnStartMoving(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysHinge->OnStartMoving(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnStartMoving' is not possible.\n");
}
GCEntityIOOutput GCPhysHinge::GetOnStopMoving() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysHinge->OnStopMoving(ptr=%p)", m_ptr));
    GCEntityIOOutput value(GetSchemaPtr(m_ptr, "CPhysHinge", "m_OnStopMoving"));
    return value;
}
void GCPhysHinge::SetOnStopMoving(GCEntityIOOutput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysHinge->OnStopMoving(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OnStopMoving' is not possible.\n");
}
void* GCPhysHinge::GetPtr() {
    return m_ptr;
}
std::string GCPhysHinge::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPhysHinge::IsValid() {
    return (m_ptr != nullptr);
}
GCPhysConstraint GCPhysHinge::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPhysHinge::GetParent(ptr=%p)", m_ptr));
    GCPhysConstraint value(m_ptr);
    return value;
}
void GCPhysHinge::SetParent(GCPhysConstraint value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPhysHinge::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCPhysHinge(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPhysHinge>("CPhysHinge")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("SoundInfo", &GCPhysHinge::GetSoundInfo, &GCPhysHinge::SetSoundInfo)
        .addProperty("NotifyMinLimitReached", &GCPhysHinge::GetNotifyMinLimitReached, &GCPhysHinge::SetNotifyMinLimitReached)
        .addProperty("NotifyMaxLimitReached", &GCPhysHinge::GetNotifyMaxLimitReached, &GCPhysHinge::SetNotifyMaxLimitReached)
        .addProperty("AtMinLimit", &GCPhysHinge::GetAtMinLimit, &GCPhysHinge::SetAtMinLimit)
        .addProperty("AtMaxLimit", &GCPhysHinge::GetAtMaxLimit, &GCPhysHinge::SetAtMaxLimit)
        .addProperty("Hinge", &GCPhysHinge::GetHinge, &GCPhysHinge::SetHinge)
        .addProperty("HingeFriction", &GCPhysHinge::GetHingeFriction, &GCPhysHinge::SetHingeFriction)
        .addProperty("SystemLoadScale", &GCPhysHinge::GetSystemLoadScale, &GCPhysHinge::SetSystemLoadScale)
        .addProperty("IsAxisLocal", &GCPhysHinge::GetIsAxisLocal, &GCPhysHinge::SetIsAxisLocal)
        .addProperty("MinRotation", &GCPhysHinge::GetMinRotation, &GCPhysHinge::SetMinRotation)
        .addProperty("MaxRotation", &GCPhysHinge::GetMaxRotation, &GCPhysHinge::SetMaxRotation)
        .addProperty("InitialRotation", &GCPhysHinge::GetInitialRotation, &GCPhysHinge::SetInitialRotation)
        .addProperty("MotorFrequency", &GCPhysHinge::GetMotorFrequency, &GCPhysHinge::SetMotorFrequency)
        .addProperty("MotorDampingRatio", &GCPhysHinge::GetMotorDampingRatio, &GCPhysHinge::SetMotorDampingRatio)
        .addProperty("AngleSpeed", &GCPhysHinge::GetAngleSpeed, &GCPhysHinge::SetAngleSpeed)
        .addProperty("AngleSpeedThreshold", &GCPhysHinge::GetAngleSpeedThreshold, &GCPhysHinge::SetAngleSpeedThreshold)
        .addProperty("OnStartMoving", &GCPhysHinge::GetOnStartMoving, &GCPhysHinge::SetOnStartMoving)
        .addProperty("OnStopMoving", &GCPhysHinge::GetOnStopMoving, &GCPhysHinge::SetOnStopMoving)
        .addProperty("Parent", &GCPhysHinge::GetParent, &GCPhysHinge::SetParent)
        .addFunction("ToPtr", &GCPhysHinge::ToPtr)
        .addFunction("IsValid", &GCPhysHinge::IsValid)
        .endClass();
}
GCSimpleSimTimer::GCSimpleSimTimer(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCSimpleSimTimer::GCSimpleSimTimer(void *ptr) {
    m_ptr = ptr;
}
float GCSimpleSimTimer::GetNext() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSimpleSimTimer->Next(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CSimpleSimTimer", "m_next");
}
void GCSimpleSimTimer::SetNext(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSimpleSimTimer->Next(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSimpleSimTimer", "m_next", false, value);
}
uint32_t GCSimpleSimTimer::GetWorldGroupId() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSimpleSimTimer->WorldGroupId(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlStringToken>(m_ptr, "CSimpleSimTimer", "m_nWorldGroupId").m_nHashCode;
}
void GCSimpleSimTimer::SetWorldGroupId(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSimpleSimTimer->WorldGroupId(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSimpleSimTimer", "m_nWorldGroupId", false, CUtlStringToken(value));
}
void* GCSimpleSimTimer::GetPtr() {
    return m_ptr;
}
std::string GCSimpleSimTimer::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCSimpleSimTimer::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCSimpleSimTimer(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCSimpleSimTimer>("CSimpleSimTimer")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Next", &GCSimpleSimTimer::GetNext, &GCSimpleSimTimer::SetNext)
        .addProperty("WorldGroupId", &GCSimpleSimTimer::GetWorldGroupId, &GCSimpleSimTimer::SetWorldGroupId)
        .addFunction("ToPtr", &GCSimpleSimTimer::ToPtr)
        .addFunction("IsValid", &GCSimpleSimTimer::IsValid)
        .endClass();
}
GCSkillDamage::GCSkillDamage(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCSkillDamage::GCSkillDamage(void *ptr) {
    m_ptr = ptr;
}
GCSkillFloat GCSkillDamage::GetDamage() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSkillDamage->Damage(ptr=%p)", m_ptr));
    GCSkillFloat value(GetSchemaPtr(m_ptr, "CSkillDamage", "m_flDamage"));
    return value;
}
void GCSkillDamage::SetDamage(GCSkillFloat value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSkillDamage->Damage(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Damage' is not possible.\n");
}
float GCSkillDamage::GetNPCDamageScalarVsNPC() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSkillDamage->NPCDamageScalarVsNPC(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CSkillDamage", "m_flNPCDamageScalarVsNPC");
}
void GCSkillDamage::SetNPCDamageScalarVsNPC(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSkillDamage->NPCDamageScalarVsNPC(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSkillDamage", "m_flNPCDamageScalarVsNPC", false, value);
}
float GCSkillDamage::GetPhysicsForceDamage() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSkillDamage->PhysicsForceDamage(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CSkillDamage", "m_flPhysicsForceDamage");
}
void GCSkillDamage::SetPhysicsForceDamage(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSkillDamage->PhysicsForceDamage(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSkillDamage", "m_flPhysicsForceDamage", false, value);
}
void* GCSkillDamage::GetPtr() {
    return m_ptr;
}
std::string GCSkillDamage::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCSkillDamage::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCSkillDamage(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCSkillDamage>("CSkillDamage")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Damage", &GCSkillDamage::GetDamage, &GCSkillDamage::SetDamage)
        .addProperty("NPCDamageScalarVsNPC", &GCSkillDamage::GetNPCDamageScalarVsNPC, &GCSkillDamage::SetNPCDamageScalarVsNPC)
        .addProperty("PhysicsForceDamage", &GCSkillDamage::GetPhysicsForceDamage, &GCSkillDamage::SetPhysicsForceDamage)
        .addFunction("ToPtr", &GCSkillDamage::ToPtr)
        .addFunction("IsValid", &GCSkillDamage::IsValid)
        .endClass();
}
GCAnimEventQueueListener::GCAnimEventQueueListener(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCAnimEventQueueListener::GCAnimEventQueueListener(void *ptr) {
    m_ptr = ptr;
}
void* GCAnimEventQueueListener::GetPtr() {
    return m_ptr;
}
std::string GCAnimEventQueueListener::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCAnimEventQueueListener::IsValid() {
    return (m_ptr != nullptr);
}
GCAnimEventListenerBase GCAnimEventQueueListener::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CAnimEventQueueListener::GetParent(ptr=%p)", m_ptr));
    GCAnimEventListenerBase value(m_ptr);
    return value;
}
void GCAnimEventQueueListener::SetParent(GCAnimEventListenerBase value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CAnimEventQueueListener::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCAnimEventQueueListener(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCAnimEventQueueListener>("CAnimEventQueueListener")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCAnimEventQueueListener::GetParent, &GCAnimEventQueueListener::SetParent)
        .addFunction("ToPtr", &GCAnimEventQueueListener::ToPtr)
        .addFunction("IsValid", &GCAnimEventQueueListener::IsValid)
        .endClass();
}
GCEnvLaser::GCEnvLaser(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCEnvLaser::GCEnvLaser(void *ptr) {
    m_ptr = ptr;
}
std::string GCEnvLaser::GetLaserTarget() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvLaser->LaserTarget(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvLaser", "m_iszLaserTarget").String();
}
void GCEnvLaser::SetLaserTarget(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvLaser->LaserTarget(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvLaser", "m_iszLaserTarget", false, CUtlSymbolLarge(value.c_str()));
}
GCSprite GCEnvLaser::GetSprite() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvLaser->Sprite(ptr=%p)", m_ptr));
    GCSprite value(*(void**)GetSchemaPtr(m_ptr, "CEnvLaser", "m_pSprite"));
    return value;
}
void GCEnvLaser::SetSprite(GCSprite value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvLaser->Sprite(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvLaser","m_pSprite", false, (char*)value.GetPtr());
}
std::string GCEnvLaser::GetSpriteName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvLaser->SpriteName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvLaser", "m_iszSpriteName").String();
}
void GCEnvLaser::SetSpriteName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvLaser->SpriteName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvLaser", "m_iszSpriteName", false, CUtlSymbolLarge(value.c_str()));
}
Vector GCEnvLaser::GetFirePosition() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvLaser->FirePosition(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CEnvLaser", "m_firePosition");
}
void GCEnvLaser::SetFirePosition(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvLaser->FirePosition(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvLaser", "m_firePosition", false, value);
}
float GCEnvLaser::GetStartFrame() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvLaser->StartFrame(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CEnvLaser", "m_flStartFrame");
}
void GCEnvLaser::SetStartFrame(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvLaser->StartFrame(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvLaser", "m_flStartFrame", false, value);
}
void* GCEnvLaser::GetPtr() {
    return m_ptr;
}
std::string GCEnvLaser::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCEnvLaser::IsValid() {
    return (m_ptr != nullptr);
}
GCBeam GCEnvLaser::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CEnvLaser::GetParent(ptr=%p)", m_ptr));
    GCBeam value(m_ptr);
    return value;
}
void GCEnvLaser::SetParent(GCBeam value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CEnvLaser::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCEnvLaser(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCEnvLaser>("CEnvLaser")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("LaserTarget", &GCEnvLaser::GetLaserTarget, &GCEnvLaser::SetLaserTarget)
        .addProperty("Sprite", &GCEnvLaser::GetSprite, &GCEnvLaser::SetSprite)
        .addProperty("SpriteName", &GCEnvLaser::GetSpriteName, &GCEnvLaser::SetSpriteName)
        .addProperty("FirePosition", &GCEnvLaser::GetFirePosition, &GCEnvLaser::SetFirePosition)
        .addProperty("StartFrame", &GCEnvLaser::GetStartFrame, &GCEnvLaser::SetStartFrame)
        .addProperty("Parent", &GCEnvLaser::GetParent, &GCEnvLaser::SetParent)
        .addFunction("ToPtr", &GCEnvLaser::ToPtr)
        .addFunction("IsValid", &GCEnvLaser::IsValid)
        .endClass();
}
GCFiringModeFloat::GCFiringModeFloat(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCFiringModeFloat::GCFiringModeFloat(void *ptr) {
    m_ptr = ptr;
}
std::vector<float> GCFiringModeFloat::GetValues() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFiringModeFloat->Values(ptr=%p,size=2)", m_ptr));
    float* outValue = (float*)GetSchemaPtr(m_ptr, "CFiringModeFloat", "m_flValues"); std::vector<float> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCFiringModeFloat::SetValues(std::vector<float> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFiringModeFloat->Values(ptr=%p,size=2)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Values' is not possible.\n");
}
void* GCFiringModeFloat::GetPtr() {
    return m_ptr;
}
std::string GCFiringModeFloat::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCFiringModeFloat::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCFiringModeFloat(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCFiringModeFloat>("CFiringModeFloat")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Values", &GCFiringModeFloat::GetValues, &GCFiringModeFloat::SetValues)
        .addFunction("ToPtr", &GCFiringModeFloat::ToPtr)
        .addFunction("IsValid", &GCFiringModeFloat::IsValid)
        .endClass();
}
GCRopeOverlapHit::GCRopeOverlapHit(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCRopeOverlapHit::GCRopeOverlapHit(void *ptr) {
    m_ptr = ptr;
}
GCBaseEntity GCRopeOverlapHit::GetEntity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CRopeOverlapHit->Entity(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CRopeOverlapHit", "m_hEntity").Get()));
    return value;
}
void GCRopeOverlapHit::SetEntity(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CRopeOverlapHit->Entity(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Entity' is not possible.\n");
}
std::vector<int32> GCRopeOverlapHit::GetOverlappingLinks() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CRopeOverlapHit->OverlappingLinks(ptr=%p)", m_ptr));
    CUtlVector<int32>* vec = GetSchemaValue<CUtlVector<int32>*>(m_ptr, "CRopeOverlapHit", "m_vecOverlappingLinks"); std::vector<int32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCRopeOverlapHit::SetOverlappingLinks(std::vector<int32> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CRopeOverlapHit->OverlappingLinks(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<int32>(m_ptr, "CRopeOverlapHit", "m_vecOverlappingLinks", false, value);
}
void* GCRopeOverlapHit::GetPtr() {
    return m_ptr;
}
std::string GCRopeOverlapHit::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCRopeOverlapHit::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCRopeOverlapHit(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCRopeOverlapHit>("CRopeOverlapHit")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Entity", &GCRopeOverlapHit::GetEntity, &GCRopeOverlapHit::SetEntity)
        .addProperty("OverlappingLinks", &GCRopeOverlapHit::GetOverlappingLinks, &GCRopeOverlapHit::SetOverlappingLinks)
        .addFunction("ToPtr", &GCRopeOverlapHit::ToPtr)
        .addFunction("IsValid", &GCRopeOverlapHit::IsValid)
        .endClass();
}
GResponseContext_t::GResponseContext_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GResponseContext_t::GResponseContext_t(void *ptr) {
    m_ptr = ptr;
}
std::string GResponseContext_t::GetName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ResponseContext_t->Name(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "ResponseContext_t", "m_iszName").String();
}
void GResponseContext_t::SetName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ResponseContext_t->Name(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "ResponseContext_t", "m_iszName", true, CUtlSymbolLarge(value.c_str()));
}
std::string GResponseContext_t::GetValue() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ResponseContext_t->Value(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "ResponseContext_t", "m_iszValue").String();
}
void GResponseContext_t::SetValue(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ResponseContext_t->Value(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "ResponseContext_t", "m_iszValue", true, CUtlSymbolLarge(value.c_str()));
}
float GResponseContext_t::GetExpirationTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ResponseContext_t->ExpirationTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "ResponseContext_t", "m_fExpirationTime");
}
void GResponseContext_t::SetExpirationTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ResponseContext_t->ExpirationTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "ResponseContext_t", "m_fExpirationTime", true, value);
}
void* GResponseContext_t::GetPtr() {
    return m_ptr;
}
std::string GResponseContext_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GResponseContext_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassResponseContext_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GResponseContext_t>("ResponseContext_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Name", &GResponseContext_t::GetName, &GResponseContext_t::SetName)
        .addProperty("Value", &GResponseContext_t::GetValue, &GResponseContext_t::SetValue)
        .addProperty("ExpirationTime", &GResponseContext_t::GetExpirationTime, &GResponseContext_t::SetExpirationTime)
        .addFunction("ToPtr", &GResponseContext_t::ToPtr)
        .addFunction("IsValid", &GResponseContext_t::IsValid)
        .endClass();
}
GCNavVolume::GCNavVolume(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCNavVolume::GCNavVolume(void *ptr) {
    m_ptr = ptr;
}
void* GCNavVolume::GetPtr() {
    return m_ptr;
}
std::string GCNavVolume::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCNavVolume::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCNavVolume(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCNavVolume>("CNavVolume")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addFunction("ToPtr", &GCNavVolume::ToPtr)
        .addFunction("IsValid", &GCNavVolume::IsValid)
        .endClass();
}
GCCSObserver_MovementServices::GCCSObserver_MovementServices(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCCSObserver_MovementServices::GCCSObserver_MovementServices(void *ptr) {
    m_ptr = ptr;
}
void* GCCSObserver_MovementServices::GetPtr() {
    return m_ptr;
}
std::string GCCSObserver_MovementServices::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCCSObserver_MovementServices::IsValid() {
    return (m_ptr != nullptr);
}
GCPlayer_MovementServices GCCSObserver_MovementServices::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSObserver_MovementServices::GetParent(ptr=%p)", m_ptr));
    GCPlayer_MovementServices value(m_ptr);
    return value;
}
void GCCSObserver_MovementServices::SetParent(GCPlayer_MovementServices value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSObserver_MovementServices::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCCSObserver_MovementServices(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCCSObserver_MovementServices>("CCSObserver_MovementServices")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCCSObserver_MovementServices::GetParent, &GCCSObserver_MovementServices::SetParent)
        .addFunction("ToPtr", &GCCSObserver_MovementServices::ToPtr)
        .addFunction("IsValid", &GCCSObserver_MovementServices::IsValid)
        .endClass();
}
GCCSGOPlayerAnimGraphState::GCCSGOPlayerAnimGraphState(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCCSGOPlayerAnimGraphState::GCCSGOPlayerAnimGraphState(void *ptr) {
    m_ptr = ptr;
}
void* GCCSGOPlayerAnimGraphState::GetPtr() {
    return m_ptr;
}
std::string GCCSGOPlayerAnimGraphState::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCCSGOPlayerAnimGraphState::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCCSGOPlayerAnimGraphState(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCCSGOPlayerAnimGraphState>("CCSGOPlayerAnimGraphState")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addFunction("ToPtr", &GCCSGOPlayerAnimGraphState::ToPtr)
        .addFunction("IsValid", &GCCSGOPlayerAnimGraphState::IsValid)
        .endClass();
}
GCGameScriptedMoveData::GCGameScriptedMoveData(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCGameScriptedMoveData::GCGameScriptedMoveData(void *ptr) {
    m_ptr = ptr;
}
Vector GCGameScriptedMoveData::GetAccumulatedRootMotion() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CGameScriptedMoveData->AccumulatedRootMotion(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CGameScriptedMoveData", "m_vAccumulatedRootMotion");
}
void GCGameScriptedMoveData::SetAccumulatedRootMotion(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CGameScriptedMoveData->AccumulatedRootMotion(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CGameScriptedMoveData", "m_vAccumulatedRootMotion", false, value);
}
Vector GCGameScriptedMoveData::GetDest() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CGameScriptedMoveData->Dest(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CGameScriptedMoveData", "m_vDest");
}
void GCGameScriptedMoveData::SetDest(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CGameScriptedMoveData->Dest(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CGameScriptedMoveData", "m_vDest", false, value);
}
Vector GCGameScriptedMoveData::GetSrc() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CGameScriptedMoveData->Src(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CGameScriptedMoveData", "m_vSrc");
}
void GCGameScriptedMoveData::SetSrc(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CGameScriptedMoveData->Src(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CGameScriptedMoveData", "m_vSrc", false, value);
}
QAngle GCGameScriptedMoveData::GetSrc1() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CGameScriptedMoveData->Src1(ptr=%p)", m_ptr));
    return GetSchemaValue<QAngle>(m_ptr, "CGameScriptedMoveData", "m_angSrc");
}
void GCGameScriptedMoveData::SetSrc1(QAngle value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CGameScriptedMoveData->Src1(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CGameScriptedMoveData", "m_angSrc", false, value);
}
QAngle GCGameScriptedMoveData::GetDst() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CGameScriptedMoveData->Dst(ptr=%p)", m_ptr));
    return GetSchemaValue<QAngle>(m_ptr, "CGameScriptedMoveData", "m_angDst");
}
void GCGameScriptedMoveData::SetDst(QAngle value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CGameScriptedMoveData->Dst(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CGameScriptedMoveData", "m_angDst", false, value);
}
QAngle GCGameScriptedMoveData::GetCurrent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CGameScriptedMoveData->Current(ptr=%p)", m_ptr));
    return GetSchemaValue<QAngle>(m_ptr, "CGameScriptedMoveData", "m_angCurrent");
}
void GCGameScriptedMoveData::SetCurrent(QAngle value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CGameScriptedMoveData->Current(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CGameScriptedMoveData", "m_angCurrent", false, value);
}
float GCGameScriptedMoveData::GetAngRate() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CGameScriptedMoveData->AngRate(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CGameScriptedMoveData", "m_flAngRate");
}
void GCGameScriptedMoveData::SetAngRate(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CGameScriptedMoveData->AngRate(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CGameScriptedMoveData", "m_flAngRate", false, value);
}
float GCGameScriptedMoveData::GetDuration() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CGameScriptedMoveData->Duration(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CGameScriptedMoveData", "m_flDuration");
}
void GCGameScriptedMoveData::SetDuration(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CGameScriptedMoveData->Duration(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CGameScriptedMoveData", "m_flDuration", false, value);
}
float GCGameScriptedMoveData::GetStartTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CGameScriptedMoveData->StartTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CGameScriptedMoveData", "m_flStartTime");
}
void GCGameScriptedMoveData::SetStartTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CGameScriptedMoveData->StartTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CGameScriptedMoveData", "m_flStartTime", false, value);
}
bool GCGameScriptedMoveData::GetActive() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CGameScriptedMoveData->Active(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CGameScriptedMoveData", "m_bActive");
}
void GCGameScriptedMoveData::SetActive(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CGameScriptedMoveData->Active(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CGameScriptedMoveData", "m_bActive", false, value);
}
bool GCGameScriptedMoveData::GetTeleportOnEnd() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CGameScriptedMoveData->TeleportOnEnd(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CGameScriptedMoveData", "m_bTeleportOnEnd");
}
void GCGameScriptedMoveData::SetTeleportOnEnd(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CGameScriptedMoveData->TeleportOnEnd(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CGameScriptedMoveData", "m_bTeleportOnEnd", false, value);
}
bool GCGameScriptedMoveData::GetIgnoreRotation() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CGameScriptedMoveData->IgnoreRotation(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CGameScriptedMoveData", "m_bIgnoreRotation");
}
void GCGameScriptedMoveData::SetIgnoreRotation(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CGameScriptedMoveData->IgnoreRotation(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CGameScriptedMoveData", "m_bIgnoreRotation", false, value);
}
uint64_t GCGameScriptedMoveData::GetType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CGameScriptedMoveData->Type(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CGameScriptedMoveData", "m_nType");
}
void GCGameScriptedMoveData::SetType(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CGameScriptedMoveData->Type(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CGameScriptedMoveData", "m_nType", false, value);
}
bool GCGameScriptedMoveData::GetSuccess() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CGameScriptedMoveData->Success(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CGameScriptedMoveData", "m_bSuccess");
}
void GCGameScriptedMoveData::SetSuccess(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CGameScriptedMoveData->Success(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CGameScriptedMoveData", "m_bSuccess", false, value);
}
uint64_t GCGameScriptedMoveData::GetForcedCrouchState() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CGameScriptedMoveData->ForcedCrouchState(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CGameScriptedMoveData", "m_nForcedCrouchState");
}
void GCGameScriptedMoveData::SetForcedCrouchState(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CGameScriptedMoveData->ForcedCrouchState(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CGameScriptedMoveData", "m_nForcedCrouchState", false, value);
}
bool GCGameScriptedMoveData::GetIgnoreCollisions() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CGameScriptedMoveData->IgnoreCollisions(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CGameScriptedMoveData", "m_bIgnoreCollisions");
}
void GCGameScriptedMoveData::SetIgnoreCollisions(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CGameScriptedMoveData->IgnoreCollisions(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CGameScriptedMoveData", "m_bIgnoreCollisions", false, value);
}
void* GCGameScriptedMoveData::GetPtr() {
    return m_ptr;
}
std::string GCGameScriptedMoveData::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCGameScriptedMoveData::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCGameScriptedMoveData(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCGameScriptedMoveData>("CGameScriptedMoveData")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("AccumulatedRootMotion", &GCGameScriptedMoveData::GetAccumulatedRootMotion, &GCGameScriptedMoveData::SetAccumulatedRootMotion)
        .addProperty("Dest", &GCGameScriptedMoveData::GetDest, &GCGameScriptedMoveData::SetDest)
        .addProperty("Src", &GCGameScriptedMoveData::GetSrc, &GCGameScriptedMoveData::SetSrc)
        .addProperty("Src1", &GCGameScriptedMoveData::GetSrc1, &GCGameScriptedMoveData::SetSrc1)
        .addProperty("Dst", &GCGameScriptedMoveData::GetDst, &GCGameScriptedMoveData::SetDst)
        .addProperty("Current", &GCGameScriptedMoveData::GetCurrent, &GCGameScriptedMoveData::SetCurrent)
        .addProperty("AngRate", &GCGameScriptedMoveData::GetAngRate, &GCGameScriptedMoveData::SetAngRate)
        .addProperty("Duration", &GCGameScriptedMoveData::GetDuration, &GCGameScriptedMoveData::SetDuration)
        .addProperty("StartTime", &GCGameScriptedMoveData::GetStartTime, &GCGameScriptedMoveData::SetStartTime)
        .addProperty("Active", &GCGameScriptedMoveData::GetActive, &GCGameScriptedMoveData::SetActive)
        .addProperty("TeleportOnEnd", &GCGameScriptedMoveData::GetTeleportOnEnd, &GCGameScriptedMoveData::SetTeleportOnEnd)
        .addProperty("IgnoreRotation", &GCGameScriptedMoveData::GetIgnoreRotation, &GCGameScriptedMoveData::SetIgnoreRotation)
        .addProperty("Type", &GCGameScriptedMoveData::GetType, &GCGameScriptedMoveData::SetType)
        .addProperty("Success", &GCGameScriptedMoveData::GetSuccess, &GCGameScriptedMoveData::SetSuccess)
        .addProperty("ForcedCrouchState", &GCGameScriptedMoveData::GetForcedCrouchState, &GCGameScriptedMoveData::SetForcedCrouchState)
        .addProperty("IgnoreCollisions", &GCGameScriptedMoveData::GetIgnoreCollisions, &GCGameScriptedMoveData::SetIgnoreCollisions)
        .addFunction("ToPtr", &GCGameScriptedMoveData::ToPtr)
        .addFunction("IsValid", &GCGameScriptedMoveData::IsValid)
        .endClass();
}
GCBaseAnimGraphController::GCBaseAnimGraphController(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCBaseAnimGraphController::GCBaseAnimGraphController(void *ptr) {
    m_ptr = ptr;
}
GCAnimGraphNetworkedVariables GCBaseAnimGraphController::GetAnimGraphNetworkedVars() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseAnimGraphController->AnimGraphNetworkedVars(ptr=%p)", m_ptr));
    GCAnimGraphNetworkedVariables value(GetSchemaPtr(m_ptr, "CBaseAnimGraphController", "m_animGraphNetworkedVars"));
    return value;
}
void GCBaseAnimGraphController::SetAnimGraphNetworkedVars(GCAnimGraphNetworkedVariables value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseAnimGraphController->AnimGraphNetworkedVars(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'AnimGraphNetworkedVars' is not possible.\n");
}
bool GCBaseAnimGraphController::GetSequenceFinished() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseAnimGraphController->SequenceFinished(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CBaseAnimGraphController", "m_bSequenceFinished");
}
void GCBaseAnimGraphController::SetSequenceFinished(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseAnimGraphController->SequenceFinished(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseAnimGraphController", "m_bSequenceFinished", false, value);
}
float GCBaseAnimGraphController::GetSoundSyncTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseAnimGraphController->SoundSyncTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CBaseAnimGraphController", "m_flSoundSyncTime");
}
void GCBaseAnimGraphController::SetSoundSyncTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseAnimGraphController->SoundSyncTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseAnimGraphController", "m_flSoundSyncTime", false, value);
}
uint32_t GCBaseAnimGraphController::GetActiveIKChainMask() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseAnimGraphController->ActiveIKChainMask(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CBaseAnimGraphController", "m_nActiveIKChainMask");
}
void GCBaseAnimGraphController::SetActiveIKChainMask(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseAnimGraphController->ActiveIKChainMask(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseAnimGraphController", "m_nActiveIKChainMask", false, value);
}
float GCBaseAnimGraphController::GetSeqStartTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseAnimGraphController->SeqStartTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CBaseAnimGraphController", "m_flSeqStartTime");
}
void GCBaseAnimGraphController::SetSeqStartTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseAnimGraphController->SeqStartTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseAnimGraphController", "m_flSeqStartTime", false, value);
}
float GCBaseAnimGraphController::GetSeqFixedCycle() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseAnimGraphController->SeqFixedCycle(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CBaseAnimGraphController", "m_flSeqFixedCycle");
}
void GCBaseAnimGraphController::SetSeqFixedCycle(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseAnimGraphController->SeqFixedCycle(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseAnimGraphController", "m_flSeqFixedCycle", false, value);
}
uint64_t GCBaseAnimGraphController::GetAnimLoopMode() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseAnimGraphController->AnimLoopMode(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CBaseAnimGraphController", "m_nAnimLoopMode");
}
void GCBaseAnimGraphController::SetAnimLoopMode(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseAnimGraphController->AnimLoopMode(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseAnimGraphController", "m_nAnimLoopMode", false, value);
}
float GCBaseAnimGraphController::GetPlaybackRate() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseAnimGraphController->PlaybackRate(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CBaseAnimGraphController", "m_flPlaybackRate");
}
void GCBaseAnimGraphController::SetPlaybackRate(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseAnimGraphController->PlaybackRate(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseAnimGraphController", "m_flPlaybackRate", false, value);
}
uint64_t GCBaseAnimGraphController::GetNotifyState() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseAnimGraphController->NotifyState(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CBaseAnimGraphController", "m_nNotifyState");
}
void GCBaseAnimGraphController::SetNotifyState(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseAnimGraphController->NotifyState(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseAnimGraphController", "m_nNotifyState", false, value);
}
bool GCBaseAnimGraphController::GetNetworkedAnimationInputsChanged() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseAnimGraphController->NetworkedAnimationInputsChanged(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CBaseAnimGraphController", "m_bNetworkedAnimationInputsChanged");
}
void GCBaseAnimGraphController::SetNetworkedAnimationInputsChanged(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseAnimGraphController->NetworkedAnimationInputsChanged(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseAnimGraphController", "m_bNetworkedAnimationInputsChanged", false, value);
}
bool GCBaseAnimGraphController::GetNetworkedSequenceChanged() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseAnimGraphController->NetworkedSequenceChanged(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CBaseAnimGraphController", "m_bNetworkedSequenceChanged");
}
void GCBaseAnimGraphController::SetNetworkedSequenceChanged(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseAnimGraphController->NetworkedSequenceChanged(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseAnimGraphController", "m_bNetworkedSequenceChanged", false, value);
}
bool GCBaseAnimGraphController::GetLastUpdateSkipped() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseAnimGraphController->LastUpdateSkipped(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CBaseAnimGraphController", "m_bLastUpdateSkipped");
}
void GCBaseAnimGraphController::SetLastUpdateSkipped(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseAnimGraphController->LastUpdateSkipped(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseAnimGraphController", "m_bLastUpdateSkipped", false, value);
}
float GCBaseAnimGraphController::GetPrevAnimUpdateTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseAnimGraphController->PrevAnimUpdateTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CBaseAnimGraphController", "m_flPrevAnimUpdateTime");
}
void GCBaseAnimGraphController::SetPrevAnimUpdateTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseAnimGraphController->PrevAnimUpdateTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseAnimGraphController", "m_flPrevAnimUpdateTime", false, value);
}
void* GCBaseAnimGraphController::GetPtr() {
    return m_ptr;
}
std::string GCBaseAnimGraphController::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCBaseAnimGraphController::IsValid() {
    return (m_ptr != nullptr);
}
GCSkeletonAnimationController GCBaseAnimGraphController::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CBaseAnimGraphController::GetParent(ptr=%p)", m_ptr));
    GCSkeletonAnimationController value(m_ptr);
    return value;
}
void GCBaseAnimGraphController::SetParent(GCSkeletonAnimationController value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CBaseAnimGraphController::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCBaseAnimGraphController(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCBaseAnimGraphController>("CBaseAnimGraphController")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("AnimGraphNetworkedVars", &GCBaseAnimGraphController::GetAnimGraphNetworkedVars, &GCBaseAnimGraphController::SetAnimGraphNetworkedVars)
        .addProperty("SequenceFinished", &GCBaseAnimGraphController::GetSequenceFinished, &GCBaseAnimGraphController::SetSequenceFinished)
        .addProperty("SoundSyncTime", &GCBaseAnimGraphController::GetSoundSyncTime, &GCBaseAnimGraphController::SetSoundSyncTime)
        .addProperty("ActiveIKChainMask", &GCBaseAnimGraphController::GetActiveIKChainMask, &GCBaseAnimGraphController::SetActiveIKChainMask)
        .addProperty("SeqStartTime", &GCBaseAnimGraphController::GetSeqStartTime, &GCBaseAnimGraphController::SetSeqStartTime)
        .addProperty("SeqFixedCycle", &GCBaseAnimGraphController::GetSeqFixedCycle, &GCBaseAnimGraphController::SetSeqFixedCycle)
        .addProperty("AnimLoopMode", &GCBaseAnimGraphController::GetAnimLoopMode, &GCBaseAnimGraphController::SetAnimLoopMode)
        .addProperty("PlaybackRate", &GCBaseAnimGraphController::GetPlaybackRate, &GCBaseAnimGraphController::SetPlaybackRate)
        .addProperty("NotifyState", &GCBaseAnimGraphController::GetNotifyState, &GCBaseAnimGraphController::SetNotifyState)
        .addProperty("NetworkedAnimationInputsChanged", &GCBaseAnimGraphController::GetNetworkedAnimationInputsChanged, &GCBaseAnimGraphController::SetNetworkedAnimationInputsChanged)
        .addProperty("NetworkedSequenceChanged", &GCBaseAnimGraphController::GetNetworkedSequenceChanged, &GCBaseAnimGraphController::SetNetworkedSequenceChanged)
        .addProperty("LastUpdateSkipped", &GCBaseAnimGraphController::GetLastUpdateSkipped, &GCBaseAnimGraphController::SetLastUpdateSkipped)
        .addProperty("PrevAnimUpdateTime", &GCBaseAnimGraphController::GetPrevAnimUpdateTime, &GCBaseAnimGraphController::SetPrevAnimUpdateTime)
        .addProperty("Parent", &GCBaseAnimGraphController::GetParent, &GCBaseAnimGraphController::SetParent)
        .addFunction("ToPtr", &GCBaseAnimGraphController::ToPtr)
        .addFunction("IsValid", &GCBaseAnimGraphController::IsValid)
        .endClass();
}
GCNavVolumeSphere::GCNavVolumeSphere(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCNavVolumeSphere::GCNavVolumeSphere(void *ptr) {
    m_ptr = ptr;
}
Vector GCNavVolumeSphere::GetCenter() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNavVolumeSphere->Center(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CNavVolumeSphere", "m_vCenter");
}
void GCNavVolumeSphere::SetCenter(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNavVolumeSphere->Center(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNavVolumeSphere", "m_vCenter", false, value);
}
float GCNavVolumeSphere::GetRadius() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNavVolumeSphere->Radius(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CNavVolumeSphere", "m_flRadius");
}
void GCNavVolumeSphere::SetRadius(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNavVolumeSphere->Radius(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNavVolumeSphere", "m_flRadius", false, value);
}
void* GCNavVolumeSphere::GetPtr() {
    return m_ptr;
}
std::string GCNavVolumeSphere::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCNavVolumeSphere::IsValid() {
    return (m_ptr != nullptr);
}
GCNavVolume GCNavVolumeSphere::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CNavVolumeSphere::GetParent(ptr=%p)", m_ptr));
    GCNavVolume value(m_ptr);
    return value;
}
void GCNavVolumeSphere::SetParent(GCNavVolume value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CNavVolumeSphere::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCNavVolumeSphere(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCNavVolumeSphere>("CNavVolumeSphere")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Center", &GCNavVolumeSphere::GetCenter, &GCNavVolumeSphere::SetCenter)
        .addProperty("Radius", &GCNavVolumeSphere::GetRadius, &GCNavVolumeSphere::SetRadius)
        .addProperty("Parent", &GCNavVolumeSphere::GetParent, &GCNavVolumeSphere::SetParent)
        .addFunction("ToPtr", &GCNavVolumeSphere::ToPtr)
        .addFunction("IsValid", &GCNavVolumeSphere::IsValid)
        .endClass();
}
GCResponseCriteriaSet::GCResponseCriteriaSet(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCResponseCriteriaSet::GCResponseCriteriaSet(void *ptr) {
    m_ptr = ptr;
}
int32_t GCResponseCriteriaSet::GetNumPrefixedContexts() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CResponseCriteriaSet->NumPrefixedContexts(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CResponseCriteriaSet", "m_nNumPrefixedContexts");
}
void GCResponseCriteriaSet::SetNumPrefixedContexts(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CResponseCriteriaSet->NumPrefixedContexts(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CResponseCriteriaSet", "m_nNumPrefixedContexts", false, value);
}
bool GCResponseCriteriaSet::GetOverrideOnAppend() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CResponseCriteriaSet->OverrideOnAppend(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CResponseCriteriaSet", "m_bOverrideOnAppend");
}
void GCResponseCriteriaSet::SetOverrideOnAppend(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CResponseCriteriaSet->OverrideOnAppend(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CResponseCriteriaSet", "m_bOverrideOnAppend", false, value);
}
void* GCResponseCriteriaSet::GetPtr() {
    return m_ptr;
}
std::string GCResponseCriteriaSet::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCResponseCriteriaSet::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCResponseCriteriaSet(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCResponseCriteriaSet>("CResponseCriteriaSet")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("NumPrefixedContexts", &GCResponseCriteriaSet::GetNumPrefixedContexts, &GCResponseCriteriaSet::SetNumPrefixedContexts)
        .addProperty("OverrideOnAppend", &GCResponseCriteriaSet::GetOverrideOnAppend, &GCResponseCriteriaSet::SetOverrideOnAppend)
        .addFunction("ToPtr", &GCResponseCriteriaSet::ToPtr)
        .addFunction("IsValid", &GCResponseCriteriaSet::IsValid)
        .endClass();
}
GCAI_Expresser::GCAI_Expresser(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCAI_Expresser::GCAI_Expresser(void *ptr) {
    m_ptr = ptr;
}
float GCAI_Expresser::GetStopTalkTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAI_Expresser->StopTalkTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CAI_Expresser", "m_flStopTalkTime");
}
void GCAI_Expresser::SetStopTalkTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAI_Expresser->StopTalkTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CAI_Expresser", "m_flStopTalkTime", false, value);
}
float GCAI_Expresser::GetStopTalkTimeWithoutDelay() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAI_Expresser->StopTalkTimeWithoutDelay(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CAI_Expresser", "m_flStopTalkTimeWithoutDelay");
}
void GCAI_Expresser::SetStopTalkTimeWithoutDelay(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAI_Expresser->StopTalkTimeWithoutDelay(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CAI_Expresser", "m_flStopTalkTimeWithoutDelay", false, value);
}
float GCAI_Expresser::GetBlockedTalkTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAI_Expresser->BlockedTalkTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CAI_Expresser", "m_flBlockedTalkTime");
}
void GCAI_Expresser::SetBlockedTalkTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAI_Expresser->BlockedTalkTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CAI_Expresser", "m_flBlockedTalkTime", false, value);
}
int32_t GCAI_Expresser::GetVoicePitch() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAI_Expresser->VoicePitch(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CAI_Expresser", "m_voicePitch");
}
void GCAI_Expresser::SetVoicePitch(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAI_Expresser->VoicePitch(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CAI_Expresser", "m_voicePitch", false, value);
}
float GCAI_Expresser::GetLastTimeAcceptedSpeak() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAI_Expresser->LastTimeAcceptedSpeak(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CAI_Expresser", "m_flLastTimeAcceptedSpeak");
}
void GCAI_Expresser::SetLastTimeAcceptedSpeak(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAI_Expresser->LastTimeAcceptedSpeak(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CAI_Expresser", "m_flLastTimeAcceptedSpeak", false, value);
}
bool GCAI_Expresser::GetAllowSpeakingInterrupts() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAI_Expresser->AllowSpeakingInterrupts(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CAI_Expresser", "m_bAllowSpeakingInterrupts");
}
void GCAI_Expresser::SetAllowSpeakingInterrupts(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAI_Expresser->AllowSpeakingInterrupts(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CAI_Expresser", "m_bAllowSpeakingInterrupts", false, value);
}
bool GCAI_Expresser::GetConsiderSceneInvolvementAsSpeech() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAI_Expresser->ConsiderSceneInvolvementAsSpeech(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CAI_Expresser", "m_bConsiderSceneInvolvementAsSpeech");
}
void GCAI_Expresser::SetConsiderSceneInvolvementAsSpeech(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAI_Expresser->ConsiderSceneInvolvementAsSpeech(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CAI_Expresser", "m_bConsiderSceneInvolvementAsSpeech", false, value);
}
bool GCAI_Expresser::GetSceneEntityDisabled() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAI_Expresser->SceneEntityDisabled(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CAI_Expresser", "m_bSceneEntityDisabled");
}
void GCAI_Expresser::SetSceneEntityDisabled(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAI_Expresser->SceneEntityDisabled(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CAI_Expresser", "m_bSceneEntityDisabled", false, value);
}
int32_t GCAI_Expresser::GetLastSpokenPriority() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAI_Expresser->LastSpokenPriority(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CAI_Expresser", "m_nLastSpokenPriority");
}
void GCAI_Expresser::SetLastSpokenPriority(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAI_Expresser->LastSpokenPriority(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CAI_Expresser", "m_nLastSpokenPriority", false, value);
}
GCBaseFlex GCAI_Expresser::GetOuter() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAI_Expresser->Outer(ptr=%p)", m_ptr));
    GCBaseFlex value(*(void**)GetSchemaPtr(m_ptr, "CAI_Expresser", "m_pOuter"));
    return value;
}
void GCAI_Expresser::SetOuter(GCBaseFlex value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAI_Expresser->Outer(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CAI_Expresser","m_pOuter", false, (char*)value.GetPtr());
}
void* GCAI_Expresser::GetPtr() {
    return m_ptr;
}
std::string GCAI_Expresser::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCAI_Expresser::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCAI_Expresser(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCAI_Expresser>("CAI_Expresser")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("StopTalkTime", &GCAI_Expresser::GetStopTalkTime, &GCAI_Expresser::SetStopTalkTime)
        .addProperty("StopTalkTimeWithoutDelay", &GCAI_Expresser::GetStopTalkTimeWithoutDelay, &GCAI_Expresser::SetStopTalkTimeWithoutDelay)
        .addProperty("BlockedTalkTime", &GCAI_Expresser::GetBlockedTalkTime, &GCAI_Expresser::SetBlockedTalkTime)
        .addProperty("VoicePitch", &GCAI_Expresser::GetVoicePitch, &GCAI_Expresser::SetVoicePitch)
        .addProperty("LastTimeAcceptedSpeak", &GCAI_Expresser::GetLastTimeAcceptedSpeak, &GCAI_Expresser::SetLastTimeAcceptedSpeak)
        .addProperty("AllowSpeakingInterrupts", &GCAI_Expresser::GetAllowSpeakingInterrupts, &GCAI_Expresser::SetAllowSpeakingInterrupts)
        .addProperty("ConsiderSceneInvolvementAsSpeech", &GCAI_Expresser::GetConsiderSceneInvolvementAsSpeech, &GCAI_Expresser::SetConsiderSceneInvolvementAsSpeech)
        .addProperty("SceneEntityDisabled", &GCAI_Expresser::GetSceneEntityDisabled, &GCAI_Expresser::SetSceneEntityDisabled)
        .addProperty("LastSpokenPriority", &GCAI_Expresser::GetLastSpokenPriority, &GCAI_Expresser::SetLastSpokenPriority)
        .addProperty("Outer", &GCAI_Expresser::GetOuter, &GCAI_Expresser::SetOuter)
        .addFunction("ToPtr", &GCAI_Expresser::ToPtr)
        .addFunction("IsValid", &GCAI_Expresser::IsValid)
        .endClass();
}
GIChoreoServices::GIChoreoServices(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GIChoreoServices::GIChoreoServices(void *ptr) {
    m_ptr = ptr;
}
void* GIChoreoServices::GetPtr() {
    return m_ptr;
}
std::string GIChoreoServices::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GIChoreoServices::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassIChoreoServices(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GIChoreoServices>("IChoreoServices")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addFunction("ToPtr", &GIChoreoServices::ToPtr)
        .addFunction("IsValid", &GIChoreoServices::IsValid)
        .endClass();
}
GCStopwatchBase::GCStopwatchBase(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCStopwatchBase::GCStopwatchBase(void *ptr) {
    m_ptr = ptr;
}
bool GCStopwatchBase::GetIsRunning() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CStopwatchBase->IsRunning(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CStopwatchBase", "m_fIsRunning");
}
void GCStopwatchBase::SetIsRunning(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CStopwatchBase->IsRunning(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CStopwatchBase", "m_fIsRunning", false, value);
}
void* GCStopwatchBase::GetPtr() {
    return m_ptr;
}
std::string GCStopwatchBase::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCStopwatchBase::IsValid() {
    return (m_ptr != nullptr);
}
GCSimpleSimTimer GCStopwatchBase::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CStopwatchBase::GetParent(ptr=%p)", m_ptr));
    GCSimpleSimTimer value(m_ptr);
    return value;
}
void GCStopwatchBase::SetParent(GCSimpleSimTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CStopwatchBase::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCStopwatchBase(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCStopwatchBase>("CStopwatchBase")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("IsRunning", &GCStopwatchBase::GetIsRunning, &GCStopwatchBase::SetIsRunning)
        .addProperty("Parent", &GCStopwatchBase::GetParent, &GCStopwatchBase::SetParent)
        .addFunction("ToPtr", &GCStopwatchBase::ToPtr)
        .addFunction("IsValid", &GCStopwatchBase::IsValid)
        .endClass();
}
GResponseParams::GResponseParams(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GResponseParams::GResponseParams(void *ptr) {
    m_ptr = ptr;
}
int16_t GResponseParams::GetOdds() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ResponseParams->Odds(ptr=%p)", m_ptr));
    return GetSchemaValue<int16_t>(m_ptr, "ResponseParams", "odds");
}
void GResponseParams::SetOdds(int16_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ResponseParams->Odds(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "ResponseParams", "odds", false, value);
}
int16_t GResponseParams::GetFlags() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ResponseParams->Flags(ptr=%p)", m_ptr));
    return GetSchemaValue<int16_t>(m_ptr, "ResponseParams", "flags");
}
void GResponseParams::SetFlags(int16_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ResponseParams->Flags(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "ResponseParams", "flags", false, value);
}
GResponseFollowup GResponseParams::GetFollowup() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ResponseParams->Followup(ptr=%p)", m_ptr));
    GResponseFollowup value(*(void**)GetSchemaPtr(m_ptr, "ResponseParams", "m_pFollowup"));
    return value;
}
void GResponseParams::SetFollowup(GResponseFollowup value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ResponseParams->Followup(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "ResponseParams","m_pFollowup", false, (char*)value.GetPtr());
}
void* GResponseParams::GetPtr() {
    return m_ptr;
}
std::string GResponseParams::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GResponseParams::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassResponseParams(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GResponseParams>("ResponseParams")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Odds", &GResponseParams::GetOdds, &GResponseParams::SetOdds)
        .addProperty("Flags", &GResponseParams::GetFlags, &GResponseParams::SetFlags)
        .addProperty("Followup", &GResponseParams::GetFollowup, &GResponseParams::SetFollowup)
        .addFunction("ToPtr", &GResponseParams::ToPtr)
        .addFunction("IsValid", &GResponseParams::IsValid)
        .endClass();
}
GCItem_Healthshot::GCItem_Healthshot(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCItem_Healthshot::GCItem_Healthshot(void *ptr) {
    m_ptr = ptr;
}
void* GCItem_Healthshot::GetPtr() {
    return m_ptr;
}
std::string GCItem_Healthshot::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCItem_Healthshot::IsValid() {
    return (m_ptr != nullptr);
}
GCWeaponBaseItem GCItem_Healthshot::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CItem_Healthshot::GetParent(ptr=%p)", m_ptr));
    GCWeaponBaseItem value(m_ptr);
    return value;
}
void GCItem_Healthshot::SetParent(GCWeaponBaseItem value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CItem_Healthshot::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCItem_Healthshot(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCItem_Healthshot>("CItem_Healthshot")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCItem_Healthshot::GetParent, &GCItem_Healthshot::SetParent)
        .addFunction("ToPtr", &GCItem_Healthshot::ToPtr)
        .addFunction("IsValid", &GCItem_Healthshot::IsValid)
        .endClass();
}
GCPhysHingeAlias_phys_hinge_local::GCPhysHingeAlias_phys_hinge_local(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPhysHingeAlias_phys_hinge_local::GCPhysHingeAlias_phys_hinge_local(void *ptr) {
    m_ptr = ptr;
}
void* GCPhysHingeAlias_phys_hinge_local::GetPtr() {
    return m_ptr;
}
std::string GCPhysHingeAlias_phys_hinge_local::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPhysHingeAlias_phys_hinge_local::IsValid() {
    return (m_ptr != nullptr);
}
GCPhysHinge GCPhysHingeAlias_phys_hinge_local::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPhysHingeAlias_phys_hinge_local::GetParent(ptr=%p)", m_ptr));
    GCPhysHinge value(m_ptr);
    return value;
}
void GCPhysHingeAlias_phys_hinge_local::SetParent(GCPhysHinge value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPhysHingeAlias_phys_hinge_local::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCPhysHingeAlias_phys_hinge_local(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPhysHingeAlias_phys_hinge_local>("CPhysHingeAlias_phys_hinge_local")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCPhysHingeAlias_phys_hinge_local::GetParent, &GCPhysHingeAlias_phys_hinge_local::SetParent)
        .addFunction("ToPtr", &GCPhysHingeAlias_phys_hinge_local::ToPtr)
        .addFunction("IsValid", &GCPhysHingeAlias_phys_hinge_local::IsValid)
        .endClass();
}
GPointCameraSettings_t::GPointCameraSettings_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GPointCameraSettings_t::GPointCameraSettings_t(void *ptr) {
    m_ptr = ptr;
}
float GPointCameraSettings_t::GetNearBlurryDistance() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PointCameraSettings_t->NearBlurryDistance(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "PointCameraSettings_t", "m_flNearBlurryDistance");
}
void GPointCameraSettings_t::SetNearBlurryDistance(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PointCameraSettings_t->NearBlurryDistance(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PointCameraSettings_t", "m_flNearBlurryDistance", true, value);
}
float GPointCameraSettings_t::GetNearCrispDistance() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PointCameraSettings_t->NearCrispDistance(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "PointCameraSettings_t", "m_flNearCrispDistance");
}
void GPointCameraSettings_t::SetNearCrispDistance(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PointCameraSettings_t->NearCrispDistance(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PointCameraSettings_t", "m_flNearCrispDistance", true, value);
}
float GPointCameraSettings_t::GetFarCrispDistance() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PointCameraSettings_t->FarCrispDistance(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "PointCameraSettings_t", "m_flFarCrispDistance");
}
void GPointCameraSettings_t::SetFarCrispDistance(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PointCameraSettings_t->FarCrispDistance(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PointCameraSettings_t", "m_flFarCrispDistance", true, value);
}
float GPointCameraSettings_t::GetFarBlurryDistance() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PointCameraSettings_t->FarBlurryDistance(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "PointCameraSettings_t", "m_flFarBlurryDistance");
}
void GPointCameraSettings_t::SetFarBlurryDistance(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PointCameraSettings_t->FarBlurryDistance(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PointCameraSettings_t", "m_flFarBlurryDistance", true, value);
}
void* GPointCameraSettings_t::GetPtr() {
    return m_ptr;
}
std::string GPointCameraSettings_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GPointCameraSettings_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassPointCameraSettings_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GPointCameraSettings_t>("PointCameraSettings_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("NearBlurryDistance", &GPointCameraSettings_t::GetNearBlurryDistance, &GPointCameraSettings_t::SetNearBlurryDistance)
        .addProperty("NearCrispDistance", &GPointCameraSettings_t::GetNearCrispDistance, &GPointCameraSettings_t::SetNearCrispDistance)
        .addProperty("FarCrispDistance", &GPointCameraSettings_t::GetFarCrispDistance, &GPointCameraSettings_t::SetFarCrispDistance)
        .addProperty("FarBlurryDistance", &GPointCameraSettings_t::GetFarBlurryDistance, &GPointCameraSettings_t::SetFarBlurryDistance)
        .addFunction("ToPtr", &GPointCameraSettings_t::ToPtr)
        .addFunction("IsValid", &GPointCameraSettings_t::IsValid)
        .endClass();
}
GCSoundEnvelope::GCSoundEnvelope(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCSoundEnvelope::GCSoundEnvelope(void *ptr) {
    m_ptr = ptr;
}
float GCSoundEnvelope::GetCurrent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSoundEnvelope->Current(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CSoundEnvelope", "m_current");
}
void GCSoundEnvelope::SetCurrent(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSoundEnvelope->Current(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSoundEnvelope", "m_current", false, value);
}
float GCSoundEnvelope::GetTarget() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSoundEnvelope->Target(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CSoundEnvelope", "m_target");
}
void GCSoundEnvelope::SetTarget(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSoundEnvelope->Target(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSoundEnvelope", "m_target", false, value);
}
float GCSoundEnvelope::GetRate() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSoundEnvelope->Rate(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CSoundEnvelope", "m_rate");
}
void GCSoundEnvelope::SetRate(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSoundEnvelope->Rate(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSoundEnvelope", "m_rate", false, value);
}
bool GCSoundEnvelope::GetForceupdate() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSoundEnvelope->Forceupdate(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CSoundEnvelope", "m_forceupdate");
}
void GCSoundEnvelope::SetForceupdate(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSoundEnvelope->Forceupdate(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSoundEnvelope", "m_forceupdate", false, value);
}
void* GCSoundEnvelope::GetPtr() {
    return m_ptr;
}
std::string GCSoundEnvelope::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCSoundEnvelope::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCSoundEnvelope(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCSoundEnvelope>("CSoundEnvelope")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Current", &GCSoundEnvelope::GetCurrent, &GCSoundEnvelope::SetCurrent)
        .addProperty("Target", &GCSoundEnvelope::GetTarget, &GCSoundEnvelope::SetTarget)
        .addProperty("Rate", &GCSoundEnvelope::GetRate, &GCSoundEnvelope::SetRate)
        .addProperty("Forceupdate", &GCSoundEnvelope::GetForceupdate, &GCSoundEnvelope::SetForceupdate)
        .addFunction("ToPtr", &GCSoundEnvelope::ToPtr)
        .addFunction("IsValid", &GCSoundEnvelope::IsValid)
        .endClass();
}
Gdynpitchvol_t::Gdynpitchvol_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
Gdynpitchvol_t::Gdynpitchvol_t(void *ptr) {
    m_ptr = ptr;
}
void* Gdynpitchvol_t::GetPtr() {
    return m_ptr;
}
std::string Gdynpitchvol_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool Gdynpitchvol_t::IsValid() {
    return (m_ptr != nullptr);
}
Gdynpitchvol_base_t Gdynpitchvol_t::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("dynpitchvol_t::GetParent(ptr=%p)", m_ptr));
    Gdynpitchvol_base_t value(m_ptr);
    return value;
}
void Gdynpitchvol_t::SetParent(Gdynpitchvol_base_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("dynpitchvol_t::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassdynpitchvol_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<Gdynpitchvol_t>("dynpitchvol_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &Gdynpitchvol_t::GetParent, &Gdynpitchvol_t::SetParent)
        .addFunction("ToPtr", &Gdynpitchvol_t::ToPtr)
        .addFunction("IsValid", &Gdynpitchvol_t::IsValid)
        .endClass();
}
GCStopwatch::GCStopwatch(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCStopwatch::GCStopwatch(void *ptr) {
    m_ptr = ptr;
}
float GCStopwatch::GetInterval() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CStopwatch->Interval(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CStopwatch", "m_interval");
}
void GCStopwatch::SetInterval(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CStopwatch->Interval(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CStopwatch", "m_interval", false, value);
}
void* GCStopwatch::GetPtr() {
    return m_ptr;
}
std::string GCStopwatch::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCStopwatch::IsValid() {
    return (m_ptr != nullptr);
}
GCStopwatchBase GCStopwatch::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CStopwatch::GetParent(ptr=%p)", m_ptr));
    GCStopwatchBase value(m_ptr);
    return value;
}
void GCStopwatch::SetParent(GCStopwatchBase value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CStopwatch::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCStopwatch(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCStopwatch>("CStopwatch")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Interval", &GCStopwatch::GetInterval, &GCStopwatch::SetInterval)
        .addProperty("Parent", &GCStopwatch::GetParent, &GCStopwatch::SetParent)
        .addFunction("ToPtr", &GCStopwatch::ToPtr)
        .addFunction("IsValid", &GCStopwatch::IsValid)
        .endClass();
}
GCNavVolumeVector::GCNavVolumeVector(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCNavVolumeVector::GCNavVolumeVector(void *ptr) {
    m_ptr = ptr;
}
bool GCNavVolumeVector::GetHasBeenPreFiltered() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNavVolumeVector->HasBeenPreFiltered(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CNavVolumeVector", "m_bHasBeenPreFiltered");
}
void GCNavVolumeVector::SetHasBeenPreFiltered(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNavVolumeVector->HasBeenPreFiltered(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNavVolumeVector", "m_bHasBeenPreFiltered", false, value);
}
void* GCNavVolumeVector::GetPtr() {
    return m_ptr;
}
std::string GCNavVolumeVector::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCNavVolumeVector::IsValid() {
    return (m_ptr != nullptr);
}
GCNavVolume GCNavVolumeVector::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CNavVolumeVector::GetParent(ptr=%p)", m_ptr));
    GCNavVolume value(m_ptr);
    return value;
}
void GCNavVolumeVector::SetParent(GCNavVolume value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CNavVolumeVector::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCNavVolumeVector(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCNavVolumeVector>("CNavVolumeVector")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("HasBeenPreFiltered", &GCNavVolumeVector::GetHasBeenPreFiltered, &GCNavVolumeVector::SetHasBeenPreFiltered)
        .addProperty("Parent", &GCNavVolumeVector::GetParent, &GCNavVolumeVector::SetParent)
        .addFunction("ToPtr", &GCNavVolumeVector::ToPtr)
        .addFunction("IsValid", &GCNavVolumeVector::IsValid)
        .endClass();
}
GNavGravity_t::GNavGravity_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GNavGravity_t::GNavGravity_t(void *ptr) {
    m_ptr = ptr;
}
Vector GNavGravity_t::GetGravity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: NavGravity_t->Gravity(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "NavGravity_t", "m_vGravity");
}
void GNavGravity_t::SetGravity(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: NavGravity_t->Gravity(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "NavGravity_t", "m_vGravity", true, value);
}
bool GNavGravity_t::GetDefault() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: NavGravity_t->Default(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "NavGravity_t", "m_bDefault");
}
void GNavGravity_t::SetDefault(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: NavGravity_t->Default(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "NavGravity_t", "m_bDefault", true, value);
}
void* GNavGravity_t::GetPtr() {
    return m_ptr;
}
std::string GNavGravity_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GNavGravity_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassNavGravity_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GNavGravity_t>("NavGravity_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Gravity", &GNavGravity_t::GetGravity, &GNavGravity_t::SetGravity)
        .addProperty("Default", &GNavGravity_t::GetDefault, &GNavGravity_t::SetDefault)
        .addFunction("ToPtr", &GNavGravity_t::ToPtr)
        .addFunction("IsValid", &GNavGravity_t::IsValid)
        .endClass();
}
GCEnvShake::GCEnvShake(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCEnvShake::GCEnvShake(void *ptr) {
    m_ptr = ptr;
}
std::string GCEnvShake::GetLimitToEntity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvShake->LimitToEntity(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CEnvShake", "m_limitToEntity").String();
}
void GCEnvShake::SetLimitToEntity(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvShake->LimitToEntity(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvShake", "m_limitToEntity", false, CUtlSymbolLarge(value.c_str()));
}
float GCEnvShake::GetAmplitude() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvShake->Amplitude(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CEnvShake", "m_Amplitude");
}
void GCEnvShake::SetAmplitude(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvShake->Amplitude(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvShake", "m_Amplitude", false, value);
}
float GCEnvShake::GetFrequency() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvShake->Frequency(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CEnvShake", "m_Frequency");
}
void GCEnvShake::SetFrequency(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvShake->Frequency(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvShake", "m_Frequency", false, value);
}
float GCEnvShake::GetDuration() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvShake->Duration(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CEnvShake", "m_Duration");
}
void GCEnvShake::SetDuration(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvShake->Duration(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvShake", "m_Duration", false, value);
}
float GCEnvShake::GetRadius() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvShake->Radius(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CEnvShake", "m_Radius");
}
void GCEnvShake::SetRadius(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvShake->Radius(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvShake", "m_Radius", false, value);
}
float GCEnvShake::GetStopTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvShake->StopTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CEnvShake", "m_stopTime");
}
void GCEnvShake::SetStopTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvShake->StopTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvShake", "m_stopTime", false, value);
}
float GCEnvShake::GetNextShake() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvShake->NextShake(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CEnvShake", "m_nextShake");
}
void GCEnvShake::SetNextShake(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvShake->NextShake(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvShake", "m_nextShake", false, value);
}
float GCEnvShake::GetCurrentAmp() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvShake->CurrentAmp(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CEnvShake", "m_currentAmp");
}
void GCEnvShake::SetCurrentAmp(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvShake->CurrentAmp(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvShake", "m_currentAmp", false, value);
}
Vector GCEnvShake::GetMaxForce() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvShake->MaxForce(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CEnvShake", "m_maxForce");
}
void GCEnvShake::SetMaxForce(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvShake->MaxForce(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CEnvShake", "m_maxForce", false, value);
}
GCPhysicsShake GCEnvShake::GetShakeCallback() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CEnvShake->ShakeCallback(ptr=%p)", m_ptr));
    GCPhysicsShake value(GetSchemaPtr(m_ptr, "CEnvShake", "m_shakeCallback"));
    return value;
}
void GCEnvShake::SetShakeCallback(GCPhysicsShake value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CEnvShake->ShakeCallback(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ShakeCallback' is not possible.\n");
}
void* GCEnvShake::GetPtr() {
    return m_ptr;
}
std::string GCEnvShake::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCEnvShake::IsValid() {
    return (m_ptr != nullptr);
}
GCPointEntity GCEnvShake::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CEnvShake::GetParent(ptr=%p)", m_ptr));
    GCPointEntity value(m_ptr);
    return value;
}
void GCEnvShake::SetParent(GCPointEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CEnvShake::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCEnvShake(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCEnvShake>("CEnvShake")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("LimitToEntity", &GCEnvShake::GetLimitToEntity, &GCEnvShake::SetLimitToEntity)
        .addProperty("Amplitude", &GCEnvShake::GetAmplitude, &GCEnvShake::SetAmplitude)
        .addProperty("Frequency", &GCEnvShake::GetFrequency, &GCEnvShake::SetFrequency)
        .addProperty("Duration", &GCEnvShake::GetDuration, &GCEnvShake::SetDuration)
        .addProperty("Radius", &GCEnvShake::GetRadius, &GCEnvShake::SetRadius)
        .addProperty("StopTime", &GCEnvShake::GetStopTime, &GCEnvShake::SetStopTime)
        .addProperty("NextShake", &GCEnvShake::GetNextShake, &GCEnvShake::SetNextShake)
        .addProperty("CurrentAmp", &GCEnvShake::GetCurrentAmp, &GCEnvShake::SetCurrentAmp)
        .addProperty("MaxForce", &GCEnvShake::GetMaxForce, &GCEnvShake::SetMaxForce)
        .addProperty("ShakeCallback", &GCEnvShake::GetShakeCallback, &GCEnvShake::SetShakeCallback)
        .addProperty("Parent", &GCEnvShake::GetParent, &GCEnvShake::SetParent)
        .addFunction("ToPtr", &GCEnvShake::ToPtr)
        .addFunction("IsValid", &GCEnvShake::IsValid)
        .endClass();
}
GCPhysSlideConstraint::GCPhysSlideConstraint(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPhysSlideConstraint::GCPhysSlideConstraint(void *ptr) {
    m_ptr = ptr;
}
Vector GCPhysSlideConstraint::GetAxisEnd() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysSlideConstraint->AxisEnd(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CPhysSlideConstraint", "m_axisEnd");
}
void GCPhysSlideConstraint::SetAxisEnd(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysSlideConstraint->AxisEnd(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysSlideConstraint", "m_axisEnd", false, value);
}
float GCPhysSlideConstraint::GetSlideFriction() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysSlideConstraint->SlideFriction(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPhysSlideConstraint", "m_slideFriction");
}
void GCPhysSlideConstraint::SetSlideFriction(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysSlideConstraint->SlideFriction(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysSlideConstraint", "m_slideFriction", false, value);
}
float GCPhysSlideConstraint::GetSystemLoadScale() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysSlideConstraint->SystemLoadScale(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPhysSlideConstraint", "m_systemLoadScale");
}
void GCPhysSlideConstraint::SetSystemLoadScale(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysSlideConstraint->SystemLoadScale(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysSlideConstraint", "m_systemLoadScale", false, value);
}
float GCPhysSlideConstraint::GetInitialOffset() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysSlideConstraint->InitialOffset(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPhysSlideConstraint", "m_initialOffset");
}
void GCPhysSlideConstraint::SetInitialOffset(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysSlideConstraint->InitialOffset(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysSlideConstraint", "m_initialOffset", false, value);
}
bool GCPhysSlideConstraint::GetEnableLinearConstraint() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysSlideConstraint->EnableLinearConstraint(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPhysSlideConstraint", "m_bEnableLinearConstraint");
}
void GCPhysSlideConstraint::SetEnableLinearConstraint(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysSlideConstraint->EnableLinearConstraint(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysSlideConstraint", "m_bEnableLinearConstraint", false, value);
}
bool GCPhysSlideConstraint::GetEnableAngularConstraint() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysSlideConstraint->EnableAngularConstraint(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPhysSlideConstraint", "m_bEnableAngularConstraint");
}
void GCPhysSlideConstraint::SetEnableAngularConstraint(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysSlideConstraint->EnableAngularConstraint(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysSlideConstraint", "m_bEnableAngularConstraint", false, value);
}
float GCPhysSlideConstraint::GetMotorFrequency() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysSlideConstraint->MotorFrequency(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPhysSlideConstraint", "m_flMotorFrequency");
}
void GCPhysSlideConstraint::SetMotorFrequency(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysSlideConstraint->MotorFrequency(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysSlideConstraint", "m_flMotorFrequency", false, value);
}
float GCPhysSlideConstraint::GetMotorDampingRatio() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysSlideConstraint->MotorDampingRatio(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPhysSlideConstraint", "m_flMotorDampingRatio");
}
void GCPhysSlideConstraint::SetMotorDampingRatio(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysSlideConstraint->MotorDampingRatio(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysSlideConstraint", "m_flMotorDampingRatio", false, value);
}
bool GCPhysSlideConstraint::GetUseEntityPivot() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysSlideConstraint->UseEntityPivot(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPhysSlideConstraint", "m_bUseEntityPivot");
}
void GCPhysSlideConstraint::SetUseEntityPivot(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysSlideConstraint->UseEntityPivot(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysSlideConstraint", "m_bUseEntityPivot", false, value);
}
GConstraintSoundInfo GCPhysSlideConstraint::GetSoundInfo() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysSlideConstraint->SoundInfo(ptr=%p)", m_ptr));
    GConstraintSoundInfo value(GetSchemaPtr(m_ptr, "CPhysSlideConstraint", "m_soundInfo"));
    return value;
}
void GCPhysSlideConstraint::SetSoundInfo(GConstraintSoundInfo value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysSlideConstraint->SoundInfo(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'SoundInfo' is not possible.\n");
}
void* GCPhysSlideConstraint::GetPtr() {
    return m_ptr;
}
std::string GCPhysSlideConstraint::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPhysSlideConstraint::IsValid() {
    return (m_ptr != nullptr);
}
GCPhysConstraint GCPhysSlideConstraint::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPhysSlideConstraint::GetParent(ptr=%p)", m_ptr));
    GCPhysConstraint value(m_ptr);
    return value;
}
void GCPhysSlideConstraint::SetParent(GCPhysConstraint value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPhysSlideConstraint::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCPhysSlideConstraint(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPhysSlideConstraint>("CPhysSlideConstraint")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("AxisEnd", &GCPhysSlideConstraint::GetAxisEnd, &GCPhysSlideConstraint::SetAxisEnd)
        .addProperty("SlideFriction", &GCPhysSlideConstraint::GetSlideFriction, &GCPhysSlideConstraint::SetSlideFriction)
        .addProperty("SystemLoadScale", &GCPhysSlideConstraint::GetSystemLoadScale, &GCPhysSlideConstraint::SetSystemLoadScale)
        .addProperty("InitialOffset", &GCPhysSlideConstraint::GetInitialOffset, &GCPhysSlideConstraint::SetInitialOffset)
        .addProperty("EnableLinearConstraint", &GCPhysSlideConstraint::GetEnableLinearConstraint, &GCPhysSlideConstraint::SetEnableLinearConstraint)
        .addProperty("EnableAngularConstraint", &GCPhysSlideConstraint::GetEnableAngularConstraint, &GCPhysSlideConstraint::SetEnableAngularConstraint)
        .addProperty("MotorFrequency", &GCPhysSlideConstraint::GetMotorFrequency, &GCPhysSlideConstraint::SetMotorFrequency)
        .addProperty("MotorDampingRatio", &GCPhysSlideConstraint::GetMotorDampingRatio, &GCPhysSlideConstraint::SetMotorDampingRatio)
        .addProperty("UseEntityPivot", &GCPhysSlideConstraint::GetUseEntityPivot, &GCPhysSlideConstraint::SetUseEntityPivot)
        .addProperty("SoundInfo", &GCPhysSlideConstraint::GetSoundInfo, &GCPhysSlideConstraint::SetSoundInfo)
        .addProperty("Parent", &GCPhysSlideConstraint::GetParent, &GCPhysSlideConstraint::SetParent)
        .addFunction("ToPtr", &GCPhysSlideConstraint::ToPtr)
        .addFunction("IsValid", &GCPhysSlideConstraint::IsValid)
        .endClass();
}
GCSound::GCSound(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCSound::GCSound(void *ptr) {
    m_ptr = ptr;
}
GCBaseEntity GCSound::GetOwner() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSound->Owner(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CSound", "m_hOwner").Get()));
    return value;
}
void GCSound::SetOwner(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSound->Owner(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Owner' is not possible.\n");
}
GCBaseEntity GCSound::GetTarget() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSound->Target(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CSound", "m_hTarget").Get()));
    return value;
}
void GCSound::SetTarget(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSound->Target(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Target' is not possible.\n");
}
int32_t GCSound::GetVolume() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSound->Volume(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CSound", "m_iVolume");
}
void GCSound::SetVolume(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSound->Volume(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSound", "m_iVolume", false, value);
}
float GCSound::GetOcclusionScale() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSound->OcclusionScale(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CSound", "m_flOcclusionScale");
}
void GCSound::SetOcclusionScale(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSound->OcclusionScale(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSound", "m_flOcclusionScale", false, value);
}
int32_t GCSound::GetNextAudible() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSound->NextAudible(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CSound", "m_iNextAudible");
}
void GCSound::SetNextAudible(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSound->NextAudible(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSound", "m_iNextAudible", false, value);
}
float GCSound::GetExpireTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSound->ExpireTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CSound", "m_flExpireTime");
}
void GCSound::SetExpireTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSound->ExpireTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSound", "m_flExpireTime", false, value);
}
int16_t GCSound::GetNext() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSound->Next(ptr=%p)", m_ptr));
    return GetSchemaValue<int16_t>(m_ptr, "CSound", "m_iNext");
}
void GCSound::SetNext(int16_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSound->Next(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSound", "m_iNext", false, value);
}
bool GCSound::GetNoExpirationTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSound->NoExpirationTime(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CSound", "m_bNoExpirationTime");
}
void GCSound::SetNoExpirationTime(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSound->NoExpirationTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSound", "m_bNoExpirationTime", false, value);
}
int32_t GCSound::GetOwnerChannelIndex() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSound->OwnerChannelIndex(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CSound", "m_ownerChannelIndex");
}
void GCSound::SetOwnerChannelIndex(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSound->OwnerChannelIndex(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSound", "m_ownerChannelIndex", false, value);
}
Vector GCSound::GetOrigin() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSound->Origin(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CSound", "m_vecOrigin");
}
void GCSound::SetOrigin(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSound->Origin(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSound", "m_vecOrigin", false, value);
}
bool GCSound::GetHasOwner() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSound->HasOwner(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CSound", "m_bHasOwner");
}
void GCSound::SetHasOwner(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSound->HasOwner(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSound", "m_bHasOwner", false, value);
}
void* GCSound::GetPtr() {
    return m_ptr;
}
std::string GCSound::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCSound::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCSound(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCSound>("CSound")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Owner", &GCSound::GetOwner, &GCSound::SetOwner)
        .addProperty("Target", &GCSound::GetTarget, &GCSound::SetTarget)
        .addProperty("Volume", &GCSound::GetVolume, &GCSound::SetVolume)
        .addProperty("OcclusionScale", &GCSound::GetOcclusionScale, &GCSound::SetOcclusionScale)
        .addProperty("NextAudible", &GCSound::GetNextAudible, &GCSound::SetNextAudible)
        .addProperty("ExpireTime", &GCSound::GetExpireTime, &GCSound::SetExpireTime)
        .addProperty("Next", &GCSound::GetNext, &GCSound::SetNext)
        .addProperty("NoExpirationTime", &GCSound::GetNoExpirationTime, &GCSound::SetNoExpirationTime)
        .addProperty("OwnerChannelIndex", &GCSound::GetOwnerChannelIndex, &GCSound::SetOwnerChannelIndex)
        .addProperty("Origin", &GCSound::GetOrigin, &GCSound::SetOrigin)
        .addProperty("HasOwner", &GCSound::GetHasOwner, &GCSound::SetHasOwner)
        .addFunction("ToPtr", &GCSound::ToPtr)
        .addFunction("IsValid", &GCSound::IsValid)
        .endClass();
}
GCTakeDamageResult::GCTakeDamageResult(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCTakeDamageResult::GCTakeDamageResult(void *ptr) {
    m_ptr = ptr;
}
GCTakeDamageInfo GCTakeDamageResult::GetOriginatingInfo() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTakeDamageResult->OriginatingInfo(ptr=%p)", m_ptr));
    GCTakeDamageInfo value(*(void**)GetSchemaPtr(m_ptr, "CTakeDamageResult", "m_pOriginatingInfo"));
    return value;
}
void GCTakeDamageResult::SetOriginatingInfo(GCTakeDamageInfo value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTakeDamageResult->OriginatingInfo(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTakeDamageResult","m_pOriginatingInfo", false, (char*)value.GetPtr());
}
int32_t GCTakeDamageResult::GetHealthLost() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTakeDamageResult->HealthLost(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CTakeDamageResult", "m_nHealthLost");
}
void GCTakeDamageResult::SetHealthLost(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTakeDamageResult->HealthLost(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTakeDamageResult", "m_nHealthLost", false, value);
}
int32_t GCTakeDamageResult::GetDamageTaken() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTakeDamageResult->DamageTaken(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CTakeDamageResult", "m_nDamageTaken");
}
void GCTakeDamageResult::SetDamageTaken(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTakeDamageResult->DamageTaken(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTakeDamageResult", "m_nDamageTaken", false, value);
}
int32_t GCTakeDamageResult::GetTotalledHealthLost() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTakeDamageResult->TotalledHealthLost(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CTakeDamageResult", "m_nTotalledHealthLost");
}
void GCTakeDamageResult::SetTotalledHealthLost(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTakeDamageResult->TotalledHealthLost(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTakeDamageResult", "m_nTotalledHealthLost", false, value);
}
int32_t GCTakeDamageResult::GetTotalledDamageTaken() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTakeDamageResult->TotalledDamageTaken(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CTakeDamageResult", "m_nTotalledDamageTaken");
}
void GCTakeDamageResult::SetTotalledDamageTaken(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTakeDamageResult->TotalledDamageTaken(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTakeDamageResult", "m_nTotalledDamageTaken", false, value);
}
void* GCTakeDamageResult::GetPtr() {
    return m_ptr;
}
std::string GCTakeDamageResult::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCTakeDamageResult::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCTakeDamageResult(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCTakeDamageResult>("CTakeDamageResult")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("OriginatingInfo", &GCTakeDamageResult::GetOriginatingInfo, &GCTakeDamageResult::SetOriginatingInfo)
        .addProperty("HealthLost", &GCTakeDamageResult::GetHealthLost, &GCTakeDamageResult::SetHealthLost)
        .addProperty("DamageTaken", &GCTakeDamageResult::GetDamageTaken, &GCTakeDamageResult::SetDamageTaken)
        .addProperty("TotalledHealthLost", &GCTakeDamageResult::GetTotalledHealthLost, &GCTakeDamageResult::SetTotalledHealthLost)
        .addProperty("TotalledDamageTaken", &GCTakeDamageResult::GetTotalledDamageTaken, &GCTakeDamageResult::SetTotalledDamageTaken)
        .addFunction("ToPtr", &GCTakeDamageResult::ToPtr)
        .addFunction("IsValid", &GCTakeDamageResult::IsValid)
        .endClass();
}
GCMolotovProjectile::GCMolotovProjectile(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCMolotovProjectile::GCMolotovProjectile(void *ptr) {
    m_ptr = ptr;
}
bool GCMolotovProjectile::GetIsIncGrenade() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMolotovProjectile->IsIncGrenade(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CMolotovProjectile", "m_bIsIncGrenade");
}
void GCMolotovProjectile::SetIsIncGrenade(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMolotovProjectile->IsIncGrenade(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMolotovProjectile", "m_bIsIncGrenade", false, value);
}
bool GCMolotovProjectile::GetDetonated() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMolotovProjectile->Detonated(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CMolotovProjectile", "m_bDetonated");
}
void GCMolotovProjectile::SetDetonated(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMolotovProjectile->Detonated(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMolotovProjectile", "m_bDetonated", false, value);
}
GIntervalTimer GCMolotovProjectile::GetStillTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMolotovProjectile->StillTimer(ptr=%p)", m_ptr));
    GIntervalTimer value(GetSchemaPtr(m_ptr, "CMolotovProjectile", "m_stillTimer"));
    return value;
}
void GCMolotovProjectile::SetStillTimer(GIntervalTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMolotovProjectile->StillTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'StillTimer' is not possible.\n");
}
bool GCMolotovProjectile::GetHasBouncedOffPlayer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMolotovProjectile->HasBouncedOffPlayer(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CMolotovProjectile", "m_bHasBouncedOffPlayer");
}
void GCMolotovProjectile::SetHasBouncedOffPlayer(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMolotovProjectile->HasBouncedOffPlayer(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMolotovProjectile", "m_bHasBouncedOffPlayer", false, value);
}
void* GCMolotovProjectile::GetPtr() {
    return m_ptr;
}
std::string GCMolotovProjectile::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCMolotovProjectile::IsValid() {
    return (m_ptr != nullptr);
}
GCBaseCSGrenadeProjectile GCMolotovProjectile::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CMolotovProjectile::GetParent(ptr=%p)", m_ptr));
    GCBaseCSGrenadeProjectile value(m_ptr);
    return value;
}
void GCMolotovProjectile::SetParent(GCBaseCSGrenadeProjectile value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CMolotovProjectile::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCMolotovProjectile(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCMolotovProjectile>("CMolotovProjectile")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("IsIncGrenade", &GCMolotovProjectile::GetIsIncGrenade, &GCMolotovProjectile::SetIsIncGrenade)
        .addProperty("Detonated", &GCMolotovProjectile::GetDetonated, &GCMolotovProjectile::SetDetonated)
        .addProperty("StillTimer", &GCMolotovProjectile::GetStillTimer, &GCMolotovProjectile::SetStillTimer)
        .addProperty("HasBouncedOffPlayer", &GCMolotovProjectile::GetHasBouncedOffPlayer, &GCMolotovProjectile::SetHasBouncedOffPlayer)
        .addProperty("Parent", &GCMolotovProjectile::GetParent, &GCMolotovProjectile::SetParent)
        .addFunction("ToPtr", &GCMolotovProjectile::ToPtr)
        .addFunction("IsValid", &GCMolotovProjectile::IsValid)
        .endClass();
}
GCCommentarySystem::GCCommentarySystem(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCCommentarySystem::GCCommentarySystem(void *ptr) {
    m_ptr = ptr;
}
bool GCCommentarySystem::GetCommentaryConvarsChanging() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCommentarySystem->CommentaryConvarsChanging(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCommentarySystem", "m_bCommentaryConvarsChanging");
}
void GCCommentarySystem::SetCommentaryConvarsChanging(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCommentarySystem->CommentaryConvarsChanging(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCommentarySystem", "m_bCommentaryConvarsChanging", false, value);
}
bool GCCommentarySystem::GetCommentaryEnabledMidGame() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCommentarySystem->CommentaryEnabledMidGame(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCommentarySystem", "m_bCommentaryEnabledMidGame");
}
void GCCommentarySystem::SetCommentaryEnabledMidGame(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCommentarySystem->CommentaryEnabledMidGame(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCommentarySystem", "m_bCommentaryEnabledMidGame", false, value);
}
float GCCommentarySystem::GetNextTeleportTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCommentarySystem->NextTeleportTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCommentarySystem", "m_flNextTeleportTime");
}
void GCCommentarySystem::SetNextTeleportTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCommentarySystem->NextTeleportTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCommentarySystem", "m_flNextTeleportTime", false, value);
}
int32_t GCCommentarySystem::GetTeleportStage() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCommentarySystem->TeleportStage(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCommentarySystem", "m_iTeleportStage");
}
void GCCommentarySystem::SetTeleportStage(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCommentarySystem->TeleportStage(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCommentarySystem", "m_iTeleportStage", false, value);
}
bool GCCommentarySystem::GetCheatState() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCommentarySystem->CheatState(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCommentarySystem", "m_bCheatState");
}
void GCCommentarySystem::SetCheatState(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCommentarySystem->CheatState(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCommentarySystem", "m_bCheatState", false, value);
}
bool GCCommentarySystem::GetIsFirstSpawnGroupToLoad() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCommentarySystem->IsFirstSpawnGroupToLoad(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCommentarySystem", "m_bIsFirstSpawnGroupToLoad");
}
void GCCommentarySystem::SetIsFirstSpawnGroupToLoad(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCommentarySystem->IsFirstSpawnGroupToLoad(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCommentarySystem", "m_bIsFirstSpawnGroupToLoad", false, value);
}
void* GCCommentarySystem::GetPtr() {
    return m_ptr;
}
std::string GCCommentarySystem::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCCommentarySystem::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCCommentarySystem(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCCommentarySystem>("CCommentarySystem")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("CommentaryConvarsChanging", &GCCommentarySystem::GetCommentaryConvarsChanging, &GCCommentarySystem::SetCommentaryConvarsChanging)
        .addProperty("CommentaryEnabledMidGame", &GCCommentarySystem::GetCommentaryEnabledMidGame, &GCCommentarySystem::SetCommentaryEnabledMidGame)
        .addProperty("NextTeleportTime", &GCCommentarySystem::GetNextTeleportTime, &GCCommentarySystem::SetNextTeleportTime)
        .addProperty("TeleportStage", &GCCommentarySystem::GetTeleportStage, &GCCommentarySystem::SetTeleportStage)
        .addProperty("CheatState", &GCCommentarySystem::GetCheatState, &GCCommentarySystem::SetCheatState)
        .addProperty("IsFirstSpawnGroupToLoad", &GCCommentarySystem::GetIsFirstSpawnGroupToLoad, &GCCommentarySystem::SetIsFirstSpawnGroupToLoad)
        .addFunction("ToPtr", &GCCommentarySystem::ToPtr)
        .addFunction("IsValid", &GCCommentarySystem::IsValid)
        .endClass();
}
GResponseFollowup::GResponseFollowup(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GResponseFollowup::GResponseFollowup(void *ptr) {
    m_ptr = ptr;
}
std::string GResponseFollowup::GetFollowup_concept() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ResponseFollowup->Followup_concept(ptr=%p)", m_ptr));
    return GetSchemaValuePtr<char>(m_ptr, "ResponseFollowup", "followup_concept");
}
void GResponseFollowup::SetFollowup_concept(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ResponseFollowup->Followup_concept(ptr=%p)", m_ptr));
    WriteSchemaPtrValue(m_ptr, "ResponseFollowup", "followup_concept", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), value.size());
}
std::string GResponseFollowup::GetFollowup_contexts() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ResponseFollowup->Followup_contexts(ptr=%p)", m_ptr));
    return GetSchemaValuePtr<char>(m_ptr, "ResponseFollowup", "followup_contexts");
}
void GResponseFollowup::SetFollowup_contexts(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ResponseFollowup->Followup_contexts(ptr=%p)", m_ptr));
    WriteSchemaPtrValue(m_ptr, "ResponseFollowup", "followup_contexts", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), value.size());
}
float GResponseFollowup::GetFollowup_delay() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ResponseFollowup->Followup_delay(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "ResponseFollowup", "followup_delay");
}
void GResponseFollowup::SetFollowup_delay(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ResponseFollowup->Followup_delay(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "ResponseFollowup", "followup_delay", false, value);
}
std::string GResponseFollowup::GetFollowup_target() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ResponseFollowup->Followup_target(ptr=%p)", m_ptr));
    return GetSchemaValuePtr<char>(m_ptr, "ResponseFollowup", "followup_target");
}
void GResponseFollowup::SetFollowup_target(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ResponseFollowup->Followup_target(ptr=%p)", m_ptr));
    WriteSchemaPtrValue(m_ptr, "ResponseFollowup", "followup_target", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), value.size());
}
std::string GResponseFollowup::GetFollowup_entityiotarget() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ResponseFollowup->Followup_entityiotarget(ptr=%p)", m_ptr));
    return GetSchemaValuePtr<char>(m_ptr, "ResponseFollowup", "followup_entityiotarget");
}
void GResponseFollowup::SetFollowup_entityiotarget(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ResponseFollowup->Followup_entityiotarget(ptr=%p)", m_ptr));
    WriteSchemaPtrValue(m_ptr, "ResponseFollowup", "followup_entityiotarget", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), value.size());
}
std::string GResponseFollowup::GetFollowup_entityioinput() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ResponseFollowup->Followup_entityioinput(ptr=%p)", m_ptr));
    return GetSchemaValuePtr<char>(m_ptr, "ResponseFollowup", "followup_entityioinput");
}
void GResponseFollowup::SetFollowup_entityioinput(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ResponseFollowup->Followup_entityioinput(ptr=%p)", m_ptr));
    WriteSchemaPtrValue(m_ptr, "ResponseFollowup", "followup_entityioinput", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), value.size());
}
float GResponseFollowup::GetFollowup_entityiodelay() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ResponseFollowup->Followup_entityiodelay(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "ResponseFollowup", "followup_entityiodelay");
}
void GResponseFollowup::SetFollowup_entityiodelay(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ResponseFollowup->Followup_entityiodelay(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "ResponseFollowup", "followup_entityiodelay", false, value);
}
bool GResponseFollowup::GetFired() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ResponseFollowup->Fired(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "ResponseFollowup", "bFired");
}
void GResponseFollowup::SetFired(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ResponseFollowup->Fired(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "ResponseFollowup", "bFired", false, value);
}
void* GResponseFollowup::GetPtr() {
    return m_ptr;
}
std::string GResponseFollowup::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GResponseFollowup::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassResponseFollowup(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GResponseFollowup>("ResponseFollowup")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Followup_concept", &GResponseFollowup::GetFollowup_concept, &GResponseFollowup::SetFollowup_concept)
        .addProperty("Followup_contexts", &GResponseFollowup::GetFollowup_contexts, &GResponseFollowup::SetFollowup_contexts)
        .addProperty("Followup_delay", &GResponseFollowup::GetFollowup_delay, &GResponseFollowup::SetFollowup_delay)
        .addProperty("Followup_target", &GResponseFollowup::GetFollowup_target, &GResponseFollowup::SetFollowup_target)
        .addProperty("Followup_entityiotarget", &GResponseFollowup::GetFollowup_entityiotarget, &GResponseFollowup::SetFollowup_entityiotarget)
        .addProperty("Followup_entityioinput", &GResponseFollowup::GetFollowup_entityioinput, &GResponseFollowup::SetFollowup_entityioinput)
        .addProperty("Followup_entityiodelay", &GResponseFollowup::GetFollowup_entityiodelay, &GResponseFollowup::SetFollowup_entityiodelay)
        .addProperty("Fired", &GResponseFollowup::GetFired, &GResponseFollowup::SetFired)
        .addFunction("ToPtr", &GResponseFollowup::ToPtr)
        .addFunction("IsValid", &GResponseFollowup::IsValid)
        .endClass();
}
GCRangeInt::GCRangeInt(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCRangeInt::GCRangeInt(void *ptr) {
    m_ptr = ptr;
}
std::vector<int32_t> GCRangeInt::GetValue() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CRangeInt->Value(ptr=%p,size=2)", m_ptr));
    int32_t* outValue = (int32_t*)GetSchemaPtr(m_ptr, "CRangeInt", "m_pValue"); std::vector<int32_t> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCRangeInt::SetValue(std::vector<int32_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CRangeInt->Value(ptr=%p,size=2)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Value' is not possible.\n");
}
void* GCRangeInt::GetPtr() {
    return m_ptr;
}
std::string GCRangeInt::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCRangeInt::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCRangeInt(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCRangeInt>("CRangeInt")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Value", &GCRangeInt::GetValue, &GCRangeInt::SetValue)
        .addFunction("ToPtr", &GCRangeInt::ToPtr)
        .addFunction("IsValid", &GCRangeInt::IsValid)
        .endClass();
}
GCNavLinkAnimgraphVar::GCNavLinkAnimgraphVar(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCNavLinkAnimgraphVar::GCNavLinkAnimgraphVar(void *ptr) {
    m_ptr = ptr;
}
uint32_t GCNavLinkAnimgraphVar::GetAlignmentDegrees() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNavLinkAnimgraphVar->AlignmentDegrees(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CNavLinkAnimgraphVar", "m_unAlignmentDegrees");
}
void GCNavLinkAnimgraphVar::SetAlignmentDegrees(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNavLinkAnimgraphVar->AlignmentDegrees(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNavLinkAnimgraphVar", "m_unAlignmentDegrees", false, value);
}
void* GCNavLinkAnimgraphVar::GetPtr() {
    return m_ptr;
}
std::string GCNavLinkAnimgraphVar::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCNavLinkAnimgraphVar::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCNavLinkAnimgraphVar(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCNavLinkAnimgraphVar>("CNavLinkAnimgraphVar")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("AlignmentDegrees", &GCNavLinkAnimgraphVar::GetAlignmentDegrees, &GCNavLinkAnimgraphVar::SetAlignmentDegrees)
        .addFunction("ToPtr", &GCNavLinkAnimgraphVar::ToPtr)
        .addFunction("IsValid", &GCNavLinkAnimgraphVar::IsValid)
        .endClass();
}
GCCSGO_TeamSelectCounterTerroristPosition::GCCSGO_TeamSelectCounterTerroristPosition(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCCSGO_TeamSelectCounterTerroristPosition::GCCSGO_TeamSelectCounterTerroristPosition(void *ptr) {
    m_ptr = ptr;
}
void* GCCSGO_TeamSelectCounterTerroristPosition::GetPtr() {
    return m_ptr;
}
std::string GCCSGO_TeamSelectCounterTerroristPosition::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCCSGO_TeamSelectCounterTerroristPosition::IsValid() {
    return (m_ptr != nullptr);
}
GCCSGO_TeamSelectCharacterPosition GCCSGO_TeamSelectCounterTerroristPosition::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSGO_TeamSelectCounterTerroristPosition::GetParent(ptr=%p)", m_ptr));
    GCCSGO_TeamSelectCharacterPosition value(m_ptr);
    return value;
}
void GCCSGO_TeamSelectCounterTerroristPosition::SetParent(GCCSGO_TeamSelectCharacterPosition value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSGO_TeamSelectCounterTerroristPosition::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCCSGO_TeamSelectCounterTerroristPosition(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCCSGO_TeamSelectCounterTerroristPosition>("CCSGO_TeamSelectCounterTerroristPosition")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCCSGO_TeamSelectCounterTerroristPosition::GetParent, &GCCSGO_TeamSelectCounterTerroristPosition::SetParent)
        .addFunction("ToPtr", &GCCSGO_TeamSelectCounterTerroristPosition::ToPtr)
        .addFunction("IsValid", &GCCSGO_TeamSelectCounterTerroristPosition::IsValid)
        .endClass();
}
GCNavLinkMovementVData::GCNavLinkMovementVData(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCNavLinkMovementVData::GCNavLinkMovementVData(void *ptr) {
    m_ptr = ptr;
}
bool GCNavLinkMovementVData::GetIsInterpolated() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNavLinkMovementVData->IsInterpolated(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CNavLinkMovementVData", "m_bIsInterpolated");
}
void GCNavLinkMovementVData::SetIsInterpolated(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNavLinkMovementVData->IsInterpolated(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNavLinkMovementVData", "m_bIsInterpolated", false, value);
}
uint32_t GCNavLinkMovementVData::GetRecommendedDistance() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNavLinkMovementVData->RecommendedDistance(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CNavLinkMovementVData", "m_unRecommendedDistance");
}
void GCNavLinkMovementVData::SetRecommendedDistance(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNavLinkMovementVData->RecommendedDistance(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNavLinkMovementVData", "m_unRecommendedDistance", false, value);
}
std::vector<GCNavLinkAnimgraphVar> GCNavLinkMovementVData::GetAnimgraphVars() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNavLinkMovementVData->AnimgraphVars(ptr=%p)", m_ptr));
    CUtlVector<GCNavLinkAnimgraphVar>* vec = GetSchemaValue<CUtlVector<GCNavLinkAnimgraphVar>*>(m_ptr, "CNavLinkMovementVData", "m_vecAnimgraphVars"); std::vector<GCNavLinkAnimgraphVar> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCNavLinkMovementVData::SetAnimgraphVars(std::vector<GCNavLinkAnimgraphVar> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNavLinkMovementVData->AnimgraphVars(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GCNavLinkAnimgraphVar>(m_ptr, "CNavLinkMovementVData", "m_vecAnimgraphVars", false, value);
}
void* GCNavLinkMovementVData::GetPtr() {
    return m_ptr;
}
std::string GCNavLinkMovementVData::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCNavLinkMovementVData::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCNavLinkMovementVData(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCNavLinkMovementVData>("CNavLinkMovementVData")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("IsInterpolated", &GCNavLinkMovementVData::GetIsInterpolated, &GCNavLinkMovementVData::SetIsInterpolated)
        .addProperty("RecommendedDistance", &GCNavLinkMovementVData::GetRecommendedDistance, &GCNavLinkMovementVData::SetRecommendedDistance)
        .addProperty("AnimgraphVars", &GCNavLinkMovementVData::GetAnimgraphVars, &GCNavLinkMovementVData::SetAnimgraphVars)
        .addFunction("ToPtr", &GCNavLinkMovementVData::ToPtr)
        .addFunction("IsValid", &GCNavLinkMovementVData::IsValid)
        .endClass();
}
GCAnimGraphControllerBase::GCAnimGraphControllerBase(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCAnimGraphControllerBase::GCAnimGraphControllerBase(void *ptr) {
    m_ptr = ptr;
}
void* GCAnimGraphControllerBase::GetPtr() {
    return m_ptr;
}
std::string GCAnimGraphControllerBase::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCAnimGraphControllerBase::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCAnimGraphControllerBase(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCAnimGraphControllerBase>("CAnimGraphControllerBase")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addFunction("ToPtr", &GCAnimGraphControllerBase::ToPtr)
        .addFunction("IsValid", &GCAnimGraphControllerBase::IsValid)
        .endClass();
}
GRagdollCreationParams_t::GRagdollCreationParams_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GRagdollCreationParams_t::GRagdollCreationParams_t(void *ptr) {
    m_ptr = ptr;
}
Vector GRagdollCreationParams_t::GetForce() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: RagdollCreationParams_t->Force(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "RagdollCreationParams_t", "m_vForce");
}
void GRagdollCreationParams_t::SetForce(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: RagdollCreationParams_t->Force(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "RagdollCreationParams_t", "m_vForce", true, value);
}
int32_t GRagdollCreationParams_t::GetForceBone() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: RagdollCreationParams_t->ForceBone(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "RagdollCreationParams_t", "m_nForceBone");
}
void GRagdollCreationParams_t::SetForceBone(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: RagdollCreationParams_t->ForceBone(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "RagdollCreationParams_t", "m_nForceBone", true, value);
}
bool GRagdollCreationParams_t::GetForceCurrentWorldTransform() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: RagdollCreationParams_t->ForceCurrentWorldTransform(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "RagdollCreationParams_t", "m_bForceCurrentWorldTransform");
}
void GRagdollCreationParams_t::SetForceCurrentWorldTransform(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: RagdollCreationParams_t->ForceCurrentWorldTransform(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "RagdollCreationParams_t", "m_bForceCurrentWorldTransform", true, value);
}
void* GRagdollCreationParams_t::GetPtr() {
    return m_ptr;
}
std::string GRagdollCreationParams_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GRagdollCreationParams_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassRagdollCreationParams_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GRagdollCreationParams_t>("RagdollCreationParams_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Force", &GRagdollCreationParams_t::GetForce, &GRagdollCreationParams_t::SetForce)
        .addProperty("ForceBone", &GRagdollCreationParams_t::GetForceBone, &GRagdollCreationParams_t::SetForceBone)
        .addProperty("ForceCurrentWorldTransform", &GRagdollCreationParams_t::GetForceCurrentWorldTransform, &GRagdollCreationParams_t::SetForceCurrentWorldTransform)
        .addFunction("ToPtr", &GRagdollCreationParams_t::ToPtr)
        .addFunction("IsValid", &GRagdollCreationParams_t::IsValid)
        .endClass();
}
GAmmoTypeInfo_t::GAmmoTypeInfo_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GAmmoTypeInfo_t::GAmmoTypeInfo_t(void *ptr) {
    m_ptr = ptr;
}
int32_t GAmmoTypeInfo_t::GetMaxCarry() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: AmmoTypeInfo_t->MaxCarry(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "AmmoTypeInfo_t", "m_nMaxCarry");
}
void GAmmoTypeInfo_t::SetMaxCarry(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: AmmoTypeInfo_t->MaxCarry(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "AmmoTypeInfo_t", "m_nMaxCarry", true, value);
}
GCRangeInt GAmmoTypeInfo_t::GetSplashSize() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: AmmoTypeInfo_t->SplashSize(ptr=%p)", m_ptr));
    GCRangeInt value(GetSchemaPtr(m_ptr, "AmmoTypeInfo_t", "m_nSplashSize"));
    return value;
}
void GAmmoTypeInfo_t::SetSplashSize(GCRangeInt value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: AmmoTypeInfo_t->SplashSize(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'SplashSize' is not possible.\n");
}
uint64_t GAmmoTypeInfo_t::GetFlags() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: AmmoTypeInfo_t->Flags(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "AmmoTypeInfo_t", "m_nFlags");
}
void GAmmoTypeInfo_t::SetFlags(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: AmmoTypeInfo_t->Flags(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "AmmoTypeInfo_t", "m_nFlags", true, value);
}
float GAmmoTypeInfo_t::GetMass() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: AmmoTypeInfo_t->Mass(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "AmmoTypeInfo_t", "m_flMass");
}
void GAmmoTypeInfo_t::SetMass(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: AmmoTypeInfo_t->Mass(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "AmmoTypeInfo_t", "m_flMass", true, value);
}
GCRangeFloat GAmmoTypeInfo_t::GetSpeed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: AmmoTypeInfo_t->Speed(ptr=%p)", m_ptr));
    GCRangeFloat value(GetSchemaPtr(m_ptr, "AmmoTypeInfo_t", "m_flSpeed"));
    return value;
}
void GAmmoTypeInfo_t::SetSpeed(GCRangeFloat value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: AmmoTypeInfo_t->Speed(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Speed' is not possible.\n");
}
void* GAmmoTypeInfo_t::GetPtr() {
    return m_ptr;
}
std::string GAmmoTypeInfo_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GAmmoTypeInfo_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassAmmoTypeInfo_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GAmmoTypeInfo_t>("AmmoTypeInfo_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("MaxCarry", &GAmmoTypeInfo_t::GetMaxCarry, &GAmmoTypeInfo_t::SetMaxCarry)
        .addProperty("SplashSize", &GAmmoTypeInfo_t::GetSplashSize, &GAmmoTypeInfo_t::SetSplashSize)
        .addProperty("Flags", &GAmmoTypeInfo_t::GetFlags, &GAmmoTypeInfo_t::SetFlags)
        .addProperty("Mass", &GAmmoTypeInfo_t::GetMass, &GAmmoTypeInfo_t::SetMass)
        .addProperty("Speed", &GAmmoTypeInfo_t::GetSpeed, &GAmmoTypeInfo_t::SetSpeed)
        .addFunction("ToPtr", &GAmmoTypeInfo_t::ToPtr)
        .addFunction("IsValid", &GAmmoTypeInfo_t::IsValid)
        .endClass();
}
GCRandStopwatch::GCRandStopwatch(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCRandStopwatch::GCRandStopwatch(void *ptr) {
    m_ptr = ptr;
}
float GCRandStopwatch::GetMinInterval() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CRandStopwatch->MinInterval(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CRandStopwatch", "m_minInterval");
}
void GCRandStopwatch::SetMinInterval(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CRandStopwatch->MinInterval(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CRandStopwatch", "m_minInterval", false, value);
}
float GCRandStopwatch::GetMaxInterval() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CRandStopwatch->MaxInterval(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CRandStopwatch", "m_maxInterval");
}
void GCRandStopwatch::SetMaxInterval(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CRandStopwatch->MaxInterval(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CRandStopwatch", "m_maxInterval", false, value);
}
void* GCRandStopwatch::GetPtr() {
    return m_ptr;
}
std::string GCRandStopwatch::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCRandStopwatch::IsValid() {
    return (m_ptr != nullptr);
}
GCStopwatchBase GCRandStopwatch::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CRandStopwatch::GetParent(ptr=%p)", m_ptr));
    GCStopwatchBase value(m_ptr);
    return value;
}
void GCRandStopwatch::SetParent(GCStopwatchBase value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CRandStopwatch::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCRandStopwatch(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCRandStopwatch>("CRandStopwatch")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("MinInterval", &GCRandStopwatch::GetMinInterval, &GCRandStopwatch::SetMinInterval)
        .addProperty("MaxInterval", &GCRandStopwatch::GetMaxInterval, &GCRandStopwatch::SetMaxInterval)
        .addProperty("Parent", &GCRandStopwatch::GetParent, &GCRandStopwatch::SetParent)
        .addFunction("ToPtr", &GCRandStopwatch::ToPtr)
        .addFunction("IsValid", &GCRandStopwatch::IsValid)
        .endClass();
}
GCGameChoreoServices::GCGameChoreoServices(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCGameChoreoServices::GCGameChoreoServices(void *ptr) {
    m_ptr = ptr;
}
GCBaseAnimGraph GCGameChoreoServices::GetOwner() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CGameChoreoServices->Owner(ptr=%p)", m_ptr));
    GCBaseAnimGraph value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CGameChoreoServices", "m_hOwner").Get()));
    return value;
}
void GCGameChoreoServices::SetOwner(GCBaseAnimGraph value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CGameChoreoServices->Owner(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Owner' is not possible.\n");
}
GCScriptedSequence GCGameChoreoServices::GetScriptedSequence() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CGameChoreoServices->ScriptedSequence(ptr=%p)", m_ptr));
    GCScriptedSequence value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CGameChoreoServices", "m_hScriptedSequence").Get()));
    return value;
}
void GCGameChoreoServices::SetScriptedSequence(GCScriptedSequence value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CGameChoreoServices->ScriptedSequence(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ScriptedSequence' is not possible.\n");
}
GIChoreoServices GCGameChoreoServices::GetScriptState() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CGameChoreoServices->ScriptState(ptr=%p)", m_ptr));
    GIChoreoServices value(GetSchemaPtr(m_ptr, "CGameChoreoServices", "m_scriptState"));
    return value;
}
void GCGameChoreoServices::SetScriptState(GIChoreoServices value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CGameChoreoServices->ScriptState(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ScriptState' is not possible.\n");
}
GIChoreoServices GCGameChoreoServices::GetChoreoState() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CGameChoreoServices->ChoreoState(ptr=%p)", m_ptr));
    GIChoreoServices value(GetSchemaPtr(m_ptr, "CGameChoreoServices", "m_choreoState"));
    return value;
}
void GCGameChoreoServices::SetChoreoState(GIChoreoServices value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CGameChoreoServices->ChoreoState(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ChoreoState' is not possible.\n");
}
float GCGameChoreoServices::GetTimeStartedState() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CGameChoreoServices->TimeStartedState(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CGameChoreoServices", "m_flTimeStartedState");
}
void GCGameChoreoServices::SetTimeStartedState(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CGameChoreoServices->TimeStartedState(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CGameChoreoServices", "m_flTimeStartedState", false, value);
}
void* GCGameChoreoServices::GetPtr() {
    return m_ptr;
}
std::string GCGameChoreoServices::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCGameChoreoServices::IsValid() {
    return (m_ptr != nullptr);
}
GIChoreoServices GCGameChoreoServices::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CGameChoreoServices::GetParent(ptr=%p)", m_ptr));
    GIChoreoServices value(m_ptr);
    return value;
}
void GCGameChoreoServices::SetParent(GIChoreoServices value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CGameChoreoServices::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCGameChoreoServices(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCGameChoreoServices>("CGameChoreoServices")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Owner", &GCGameChoreoServices::GetOwner, &GCGameChoreoServices::SetOwner)
        .addProperty("ScriptedSequence", &GCGameChoreoServices::GetScriptedSequence, &GCGameChoreoServices::SetScriptedSequence)
        .addProperty("ScriptState", &GCGameChoreoServices::GetScriptState, &GCGameChoreoServices::SetScriptState)
        .addProperty("ChoreoState", &GCGameChoreoServices::GetChoreoState, &GCGameChoreoServices::SetChoreoState)
        .addProperty("TimeStartedState", &GCGameChoreoServices::GetTimeStartedState, &GCGameChoreoServices::SetTimeStartedState)
        .addProperty("Parent", &GCGameChoreoServices::GetParent, &GCGameChoreoServices::SetParent)
        .addFunction("ToPtr", &GCGameChoreoServices::ToPtr)
        .addFunction("IsValid", &GCGameChoreoServices::IsValid)
        .endClass();
}
GCSimpleStopwatch::GCSimpleStopwatch(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCSimpleStopwatch::GCSimpleStopwatch(void *ptr) {
    m_ptr = ptr;
}
void* GCSimpleStopwatch::GetPtr() {
    return m_ptr;
}
std::string GCSimpleStopwatch::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCSimpleStopwatch::IsValid() {
    return (m_ptr != nullptr);
}
GCStopwatchBase GCSimpleStopwatch::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSimpleStopwatch::GetParent(ptr=%p)", m_ptr));
    GCStopwatchBase value(m_ptr);
    return value;
}
void GCSimpleStopwatch::SetParent(GCStopwatchBase value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSimpleStopwatch::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCSimpleStopwatch(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCSimpleStopwatch>("CSimpleStopwatch")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCSimpleStopwatch::GetParent, &GCSimpleStopwatch::SetParent)
        .addFunction("ToPtr", &GCSimpleStopwatch::ToPtr)
        .addFunction("IsValid", &GCSimpleStopwatch::IsValid)
        .endClass();
}
GCShatterGlassShard::GCShatterGlassShard(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCShatterGlassShard::GCShatterGlassShard(void *ptr) {
    m_ptr = ptr;
}
uint32_t GCShatterGlassShard::GetShardHandle() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CShatterGlassShard->ShardHandle(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CShatterGlassShard", "m_hShardHandle");
}
void GCShatterGlassShard::SetShardHandle(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CShatterGlassShard->ShardHandle(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_hShardHandle", false, value);
}
std::vector<Vector2D> GCShatterGlassShard::GetPanelVertices() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CShatterGlassShard->PanelVertices(ptr=%p)", m_ptr));
    CUtlVector<Vector2D>* vec = GetSchemaValue<CUtlVector<Vector2D>*>(m_ptr, "CShatterGlassShard", "m_vecPanelVertices"); std::vector<Vector2D> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCShatterGlassShard::SetPanelVertices(std::vector<Vector2D> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CShatterGlassShard->PanelVertices(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<Vector2D>(m_ptr, "CShatterGlassShard", "m_vecPanelVertices", false, value);
}
Vector2D GCShatterGlassShard::GetLocalPanelSpaceOrigin() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CShatterGlassShard->LocalPanelSpaceOrigin(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector2D>(m_ptr, "CShatterGlassShard", "m_vLocalPanelSpaceOrigin");
}
void GCShatterGlassShard::SetLocalPanelSpaceOrigin(Vector2D value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CShatterGlassShard->LocalPanelSpaceOrigin(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_vLocalPanelSpaceOrigin", false, value);
}
GCShatterGlassShardPhysics GCShatterGlassShard::GetPhysicsEntity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CShatterGlassShard->PhysicsEntity(ptr=%p)", m_ptr));
    GCShatterGlassShardPhysics value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CShatterGlassShard", "m_hPhysicsEntity").Get()));
    return value;
}
void GCShatterGlassShard::SetPhysicsEntity(GCShatterGlassShardPhysics value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CShatterGlassShard->PhysicsEntity(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'PhysicsEntity' is not possible.\n");
}
GCFuncShatterglass GCShatterGlassShard::GetParentPanel() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CShatterGlassShard->ParentPanel(ptr=%p)", m_ptr));
    GCFuncShatterglass value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CShatterGlassShard", "m_hParentPanel").Get()));
    return value;
}
void GCShatterGlassShard::SetParentPanel(GCFuncShatterglass value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CShatterGlassShard->ParentPanel(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ParentPanel' is not possible.\n");
}
uint32_t GCShatterGlassShard::GetParentShard() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CShatterGlassShard->ParentShard(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CShatterGlassShard", "m_hParentShard");
}
void GCShatterGlassShard::SetParentShard(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CShatterGlassShard->ParentShard(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_hParentShard", false, value);
}
uint64_t GCShatterGlassShard::GetShatterStressType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CShatterGlassShard->ShatterStressType(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CShatterGlassShard", "m_ShatterStressType");
}
void GCShatterGlassShard::SetShatterStressType(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CShatterGlassShard->ShatterStressType(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_ShatterStressType", false, value);
}
Vector GCShatterGlassShard::GetStressVelocity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CShatterGlassShard->StressVelocity(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CShatterGlassShard", "m_vecStressVelocity");
}
void GCShatterGlassShard::SetStressVelocity(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CShatterGlassShard->StressVelocity(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_vecStressVelocity", false, value);
}
bool GCShatterGlassShard::GetCreatedModel() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CShatterGlassShard->CreatedModel(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CShatterGlassShard", "m_bCreatedModel");
}
void GCShatterGlassShard::SetCreatedModel(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CShatterGlassShard->CreatedModel(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_bCreatedModel", false, value);
}
float GCShatterGlassShard::GetLongestEdge() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CShatterGlassShard->LongestEdge(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CShatterGlassShard", "m_flLongestEdge");
}
void GCShatterGlassShard::SetLongestEdge(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CShatterGlassShard->LongestEdge(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_flLongestEdge", false, value);
}
float GCShatterGlassShard::GetShortestEdge() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CShatterGlassShard->ShortestEdge(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CShatterGlassShard", "m_flShortestEdge");
}
void GCShatterGlassShard::SetShortestEdge(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CShatterGlassShard->ShortestEdge(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_flShortestEdge", false, value);
}
float GCShatterGlassShard::GetLongestAcross() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CShatterGlassShard->LongestAcross(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CShatterGlassShard", "m_flLongestAcross");
}
void GCShatterGlassShard::SetLongestAcross(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CShatterGlassShard->LongestAcross(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_flLongestAcross", false, value);
}
float GCShatterGlassShard::GetShortestAcross() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CShatterGlassShard->ShortestAcross(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CShatterGlassShard", "m_flShortestAcross");
}
void GCShatterGlassShard::SetShortestAcross(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CShatterGlassShard->ShortestAcross(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_flShortestAcross", false, value);
}
float GCShatterGlassShard::GetSumOfAllEdges() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CShatterGlassShard->SumOfAllEdges(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CShatterGlassShard", "m_flSumOfAllEdges");
}
void GCShatterGlassShard::SetSumOfAllEdges(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CShatterGlassShard->SumOfAllEdges(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_flSumOfAllEdges", false, value);
}
float GCShatterGlassShard::GetArea() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CShatterGlassShard->Area(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CShatterGlassShard", "m_flArea");
}
void GCShatterGlassShard::SetArea(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CShatterGlassShard->Area(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_flArea", false, value);
}
uint64_t GCShatterGlassShard::GetOnFrameEdge() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CShatterGlassShard->OnFrameEdge(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CShatterGlassShard", "m_nOnFrameEdge");
}
void GCShatterGlassShard::SetOnFrameEdge(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CShatterGlassShard->OnFrameEdge(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_nOnFrameEdge", false, value);
}
int32_t GCShatterGlassShard::GetParentPanelsNthShard() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CShatterGlassShard->ParentPanelsNthShard(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CShatterGlassShard", "m_nParentPanelsNthShard");
}
void GCShatterGlassShard::SetParentPanelsNthShard(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CShatterGlassShard->ParentPanelsNthShard(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_nParentPanelsNthShard", false, value);
}
int32_t GCShatterGlassShard::GetSubShardGeneration() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CShatterGlassShard->SubShardGeneration(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CShatterGlassShard", "m_nSubShardGeneration");
}
void GCShatterGlassShard::SetSubShardGeneration(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CShatterGlassShard->SubShardGeneration(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_nSubShardGeneration", false, value);
}
Vector2D GCShatterGlassShard::GetAverageVertPosition() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CShatterGlassShard->AverageVertPosition(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector2D>(m_ptr, "CShatterGlassShard", "m_vecAverageVertPosition");
}
void GCShatterGlassShard::SetAverageVertPosition(Vector2D value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CShatterGlassShard->AverageVertPosition(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_vecAverageVertPosition", false, value);
}
bool GCShatterGlassShard::GetAverageVertPositionIsValid() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CShatterGlassShard->AverageVertPositionIsValid(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CShatterGlassShard", "m_bAverageVertPositionIsValid");
}
void GCShatterGlassShard::SetAverageVertPositionIsValid(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CShatterGlassShard->AverageVertPositionIsValid(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_bAverageVertPositionIsValid", false, value);
}
Vector2D GCShatterGlassShard::GetPanelSpaceStressPositionA() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CShatterGlassShard->PanelSpaceStressPositionA(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector2D>(m_ptr, "CShatterGlassShard", "m_vecPanelSpaceStressPositionA");
}
void GCShatterGlassShard::SetPanelSpaceStressPositionA(Vector2D value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CShatterGlassShard->PanelSpaceStressPositionA(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_vecPanelSpaceStressPositionA", false, value);
}
Vector2D GCShatterGlassShard::GetPanelSpaceStressPositionB() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CShatterGlassShard->PanelSpaceStressPositionB(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector2D>(m_ptr, "CShatterGlassShard", "m_vecPanelSpaceStressPositionB");
}
void GCShatterGlassShard::SetPanelSpaceStressPositionB(Vector2D value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CShatterGlassShard->PanelSpaceStressPositionB(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_vecPanelSpaceStressPositionB", false, value);
}
bool GCShatterGlassShard::GetStressPositionAIsValid() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CShatterGlassShard->StressPositionAIsValid(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CShatterGlassShard", "m_bStressPositionAIsValid");
}
void GCShatterGlassShard::SetStressPositionAIsValid(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CShatterGlassShard->StressPositionAIsValid(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_bStressPositionAIsValid", false, value);
}
bool GCShatterGlassShard::GetStressPositionBIsValid() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CShatterGlassShard->StressPositionBIsValid(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CShatterGlassShard", "m_bStressPositionBIsValid");
}
void GCShatterGlassShard::SetStressPositionBIsValid(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CShatterGlassShard->StressPositionBIsValid(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_bStressPositionBIsValid", false, value);
}
bool GCShatterGlassShard::GetFlaggedForRemoval() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CShatterGlassShard->FlaggedForRemoval(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CShatterGlassShard", "m_bFlaggedForRemoval");
}
void GCShatterGlassShard::SetFlaggedForRemoval(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CShatterGlassShard->FlaggedForRemoval(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_bFlaggedForRemoval", false, value);
}
float GCShatterGlassShard::GetPhysicsEntitySpawnedAtTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CShatterGlassShard->PhysicsEntitySpawnedAtTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CShatterGlassShard", "m_flPhysicsEntitySpawnedAtTime");
}
void GCShatterGlassShard::SetPhysicsEntitySpawnedAtTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CShatterGlassShard->PhysicsEntitySpawnedAtTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_flPhysicsEntitySpawnedAtTime", false, value);
}
bool GCShatterGlassShard::GetShatterRateLimited() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CShatterGlassShard->ShatterRateLimited(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CShatterGlassShard", "m_bShatterRateLimited");
}
void GCShatterGlassShard::SetShatterRateLimited(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CShatterGlassShard->ShatterRateLimited(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CShatterGlassShard", "m_bShatterRateLimited", false, value);
}
GCBaseEntity GCShatterGlassShard::GetEntityHittingMe() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CShatterGlassShard->EntityHittingMe(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CShatterGlassShard", "m_hEntityHittingMe").Get()));
    return value;
}
void GCShatterGlassShard::SetEntityHittingMe(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CShatterGlassShard->EntityHittingMe(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'EntityHittingMe' is not possible.\n");
}
std::vector<uint32> GCShatterGlassShard::GetNeighbors() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CShatterGlassShard->Neighbors(ptr=%p)", m_ptr));
    CUtlVector<uint32>* vec = GetSchemaValue<CUtlVector<uint32>*>(m_ptr, "CShatterGlassShard", "m_vecNeighbors"); std::vector<uint32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCShatterGlassShard::SetNeighbors(std::vector<uint32> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CShatterGlassShard->Neighbors(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<uint32>(m_ptr, "CShatterGlassShard", "m_vecNeighbors", false, value);
}
void* GCShatterGlassShard::GetPtr() {
    return m_ptr;
}
std::string GCShatterGlassShard::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCShatterGlassShard::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCShatterGlassShard(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCShatterGlassShard>("CShatterGlassShard")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("ShardHandle", &GCShatterGlassShard::GetShardHandle, &GCShatterGlassShard::SetShardHandle)
        .addProperty("PanelVertices", &GCShatterGlassShard::GetPanelVertices, &GCShatterGlassShard::SetPanelVertices)
        .addProperty("LocalPanelSpaceOrigin", &GCShatterGlassShard::GetLocalPanelSpaceOrigin, &GCShatterGlassShard::SetLocalPanelSpaceOrigin)
        .addProperty("PhysicsEntity", &GCShatterGlassShard::GetPhysicsEntity, &GCShatterGlassShard::SetPhysicsEntity)
        .addProperty("ParentPanel", &GCShatterGlassShard::GetParentPanel, &GCShatterGlassShard::SetParentPanel)
        .addProperty("ParentShard", &GCShatterGlassShard::GetParentShard, &GCShatterGlassShard::SetParentShard)
        .addProperty("ShatterStressType", &GCShatterGlassShard::GetShatterStressType, &GCShatterGlassShard::SetShatterStressType)
        .addProperty("StressVelocity", &GCShatterGlassShard::GetStressVelocity, &GCShatterGlassShard::SetStressVelocity)
        .addProperty("CreatedModel", &GCShatterGlassShard::GetCreatedModel, &GCShatterGlassShard::SetCreatedModel)
        .addProperty("LongestEdge", &GCShatterGlassShard::GetLongestEdge, &GCShatterGlassShard::SetLongestEdge)
        .addProperty("ShortestEdge", &GCShatterGlassShard::GetShortestEdge, &GCShatterGlassShard::SetShortestEdge)
        .addProperty("LongestAcross", &GCShatterGlassShard::GetLongestAcross, &GCShatterGlassShard::SetLongestAcross)
        .addProperty("ShortestAcross", &GCShatterGlassShard::GetShortestAcross, &GCShatterGlassShard::SetShortestAcross)
        .addProperty("SumOfAllEdges", &GCShatterGlassShard::GetSumOfAllEdges, &GCShatterGlassShard::SetSumOfAllEdges)
        .addProperty("Area", &GCShatterGlassShard::GetArea, &GCShatterGlassShard::SetArea)
        .addProperty("OnFrameEdge", &GCShatterGlassShard::GetOnFrameEdge, &GCShatterGlassShard::SetOnFrameEdge)
        .addProperty("ParentPanelsNthShard", &GCShatterGlassShard::GetParentPanelsNthShard, &GCShatterGlassShard::SetParentPanelsNthShard)
        .addProperty("SubShardGeneration", &GCShatterGlassShard::GetSubShardGeneration, &GCShatterGlassShard::SetSubShardGeneration)
        .addProperty("AverageVertPosition", &GCShatterGlassShard::GetAverageVertPosition, &GCShatterGlassShard::SetAverageVertPosition)
        .addProperty("AverageVertPositionIsValid", &GCShatterGlassShard::GetAverageVertPositionIsValid, &GCShatterGlassShard::SetAverageVertPositionIsValid)
        .addProperty("PanelSpaceStressPositionA", &GCShatterGlassShard::GetPanelSpaceStressPositionA, &GCShatterGlassShard::SetPanelSpaceStressPositionA)
        .addProperty("PanelSpaceStressPositionB", &GCShatterGlassShard::GetPanelSpaceStressPositionB, &GCShatterGlassShard::SetPanelSpaceStressPositionB)
        .addProperty("StressPositionAIsValid", &GCShatterGlassShard::GetStressPositionAIsValid, &GCShatterGlassShard::SetStressPositionAIsValid)
        .addProperty("StressPositionBIsValid", &GCShatterGlassShard::GetStressPositionBIsValid, &GCShatterGlassShard::SetStressPositionBIsValid)
        .addProperty("FlaggedForRemoval", &GCShatterGlassShard::GetFlaggedForRemoval, &GCShatterGlassShard::SetFlaggedForRemoval)
        .addProperty("PhysicsEntitySpawnedAtTime", &GCShatterGlassShard::GetPhysicsEntitySpawnedAtTime, &GCShatterGlassShard::SetPhysicsEntitySpawnedAtTime)
        .addProperty("ShatterRateLimited", &GCShatterGlassShard::GetShatterRateLimited, &GCShatterGlassShard::SetShatterRateLimited)
        .addProperty("EntityHittingMe", &GCShatterGlassShard::GetEntityHittingMe, &GCShatterGlassShard::SetEntityHittingMe)
        .addProperty("Neighbors", &GCShatterGlassShard::GetNeighbors, &GCShatterGlassShard::SetNeighbors)
        .addFunction("ToPtr", &GCShatterGlassShard::ToPtr)
        .addFunction("IsValid", &GCShatterGlassShard::IsValid)
        .endClass();
}
GCommandToolCommand_t::GCommandToolCommand_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCommandToolCommand_t::GCommandToolCommand_t(void *ptr) {
    m_ptr = ptr;
}
bool GCommandToolCommand_t::GetEnabled() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CommandToolCommand_t->Enabled(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CommandToolCommand_t", "m_bEnabled");
}
void GCommandToolCommand_t::SetEnabled(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CommandToolCommand_t->Enabled(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CommandToolCommand_t", "m_bEnabled", true, value);
}
bool GCommandToolCommand_t::GetOpened() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CommandToolCommand_t->Opened(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CommandToolCommand_t", "m_bOpened");
}
void GCommandToolCommand_t::SetOpened(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CommandToolCommand_t->Opened(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CommandToolCommand_t", "m_bOpened", true, value);
}
uint32_t GCommandToolCommand_t::GetInternalId() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CommandToolCommand_t->InternalId(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CommandToolCommand_t", "m_InternalId");
}
void GCommandToolCommand_t::SetInternalId(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CommandToolCommand_t->InternalId(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CommandToolCommand_t", "m_InternalId", true, value);
}
std::string GCommandToolCommand_t::GetShortName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CommandToolCommand_t->ShortName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlString>(m_ptr, "CommandToolCommand_t", "m_ShortName").Get();
}
void GCommandToolCommand_t::SetShortName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CommandToolCommand_t->ShortName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CommandToolCommand_t", "m_ShortName", true, CUtlString(value.c_str()));
}
uint64_t GCommandToolCommand_t::GetExecMode() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CommandToolCommand_t->ExecMode(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CommandToolCommand_t", "m_ExecMode");
}
void GCommandToolCommand_t::SetExecMode(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CommandToolCommand_t->ExecMode(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CommandToolCommand_t", "m_ExecMode", true, value);
}
std::string GCommandToolCommand_t::GetSpawnGroup() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CommandToolCommand_t->SpawnGroup(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlString>(m_ptr, "CommandToolCommand_t", "m_SpawnGroup").Get();
}
void GCommandToolCommand_t::SetSpawnGroup(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CommandToolCommand_t->SpawnGroup(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CommandToolCommand_t", "m_SpawnGroup", true, CUtlString(value.c_str()));
}
float GCommandToolCommand_t::GetPeriodicExecDelay() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CommandToolCommand_t->PeriodicExecDelay(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CommandToolCommand_t", "m_PeriodicExecDelay");
}
void GCommandToolCommand_t::SetPeriodicExecDelay(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CommandToolCommand_t->PeriodicExecDelay(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CommandToolCommand_t", "m_PeriodicExecDelay", true, value);
}
uint64_t GCommandToolCommand_t::GetSpecType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CommandToolCommand_t->SpecType(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CommandToolCommand_t", "m_SpecType");
}
void GCommandToolCommand_t::SetSpecType(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CommandToolCommand_t->SpecType(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CommandToolCommand_t", "m_SpecType", true, value);
}
std::string GCommandToolCommand_t::GetEntitySpec() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CommandToolCommand_t->EntitySpec(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlString>(m_ptr, "CommandToolCommand_t", "m_EntitySpec").Get();
}
void GCommandToolCommand_t::SetEntitySpec(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CommandToolCommand_t->EntitySpec(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CommandToolCommand_t", "m_EntitySpec", true, CUtlString(value.c_str()));
}
std::string GCommandToolCommand_t::GetCommands() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CommandToolCommand_t->Commands(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlString>(m_ptr, "CommandToolCommand_t", "m_Commands").Get();
}
void GCommandToolCommand_t::SetCommands(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CommandToolCommand_t->Commands(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CommandToolCommand_t", "m_Commands", true, CUtlString(value.c_str()));
}
uint64_t GCommandToolCommand_t::GetSetDebugBits() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CommandToolCommand_t->SetDebugBits(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CommandToolCommand_t", "m_SetDebugBits");
}
void GCommandToolCommand_t::SetSetDebugBits(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CommandToolCommand_t->SetDebugBits(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CommandToolCommand_t", "m_SetDebugBits", true, value);
}
uint64_t GCommandToolCommand_t::GetClearDebugBits() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CommandToolCommand_t->ClearDebugBits(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CommandToolCommand_t", "m_ClearDebugBits");
}
void GCommandToolCommand_t::SetClearDebugBits(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CommandToolCommand_t->ClearDebugBits(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CommandToolCommand_t", "m_ClearDebugBits", true, value);
}
void* GCommandToolCommand_t::GetPtr() {
    return m_ptr;
}
std::string GCommandToolCommand_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCommandToolCommand_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCommandToolCommand_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCommandToolCommand_t>("CommandToolCommand_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Enabled", &GCommandToolCommand_t::GetEnabled, &GCommandToolCommand_t::SetEnabled)
        .addProperty("Opened", &GCommandToolCommand_t::GetOpened, &GCommandToolCommand_t::SetOpened)
        .addProperty("InternalId", &GCommandToolCommand_t::GetInternalId, &GCommandToolCommand_t::SetInternalId)
        .addProperty("ShortName", &GCommandToolCommand_t::GetShortName, &GCommandToolCommand_t::SetShortName)
        .addProperty("ExecMode", &GCommandToolCommand_t::GetExecMode, &GCommandToolCommand_t::SetExecMode)
        .addProperty("SpawnGroup", &GCommandToolCommand_t::GetSpawnGroup, &GCommandToolCommand_t::SetSpawnGroup)
        .addProperty("PeriodicExecDelay", &GCommandToolCommand_t::GetPeriodicExecDelay, &GCommandToolCommand_t::SetPeriodicExecDelay)
        .addProperty("SpecType", &GCommandToolCommand_t::GetSpecType, &GCommandToolCommand_t::SetSpecType)
        .addProperty("EntitySpec", &GCommandToolCommand_t::GetEntitySpec, &GCommandToolCommand_t::SetEntitySpec)
        .addProperty("Commands", &GCommandToolCommand_t::GetCommands, &GCommandToolCommand_t::SetCommands)
        .addProperty("SetDebugBits", &GCommandToolCommand_t::GetSetDebugBits, &GCommandToolCommand_t::SetSetDebugBits)
        .addProperty("ClearDebugBits", &GCommandToolCommand_t::GetClearDebugBits, &GCommandToolCommand_t::SetClearDebugBits)
        .addFunction("ToPtr", &GCommandToolCommand_t::ToPtr)
        .addFunction("IsValid", &GCommandToolCommand_t::IsValid)
        .endClass();
}
Gragdollelement_t::Gragdollelement_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
Gragdollelement_t::Gragdollelement_t(void *ptr) {
    m_ptr = ptr;
}
Vector Gragdollelement_t::GetOriginParentSpace() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ragdollelement_t->OriginParentSpace(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "ragdollelement_t", "originParentSpace");
}
void Gragdollelement_t::SetOriginParentSpace(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ragdollelement_t->OriginParentSpace(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "ragdollelement_t", "originParentSpace", true, value);
}
int32_t Gragdollelement_t::GetParentIndex() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ragdollelement_t->ParentIndex(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "ragdollelement_t", "parentIndex");
}
void Gragdollelement_t::SetParentIndex(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ragdollelement_t->ParentIndex(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "ragdollelement_t", "parentIndex", true, value);
}
float Gragdollelement_t::GetRadius() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ragdollelement_t->Radius(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "ragdollelement_t", "m_flRadius");
}
void Gragdollelement_t::SetRadius(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ragdollelement_t->Radius(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "ragdollelement_t", "m_flRadius", true, value);
}
void* Gragdollelement_t::GetPtr() {
    return m_ptr;
}
std::string Gragdollelement_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool Gragdollelement_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassragdollelement_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<Gragdollelement_t>("ragdollelement_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("OriginParentSpace", &Gragdollelement_t::GetOriginParentSpace, &Gragdollelement_t::SetOriginParentSpace)
        .addProperty("ParentIndex", &Gragdollelement_t::GetParentIndex, &Gragdollelement_t::SetParentIndex)
        .addProperty("Radius", &Gragdollelement_t::GetRadius, &Gragdollelement_t::SetRadius)
        .addFunction("ToPtr", &Gragdollelement_t::ToPtr)
        .addFunction("IsValid", &Gragdollelement_t::IsValid)
        .endClass();
}
GCBodyComponentBaseModelEntity::GCBodyComponentBaseModelEntity(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCBodyComponentBaseModelEntity::GCBodyComponentBaseModelEntity(void *ptr) {
    m_ptr = ptr;
}
void* GCBodyComponentBaseModelEntity::GetPtr() {
    return m_ptr;
}
std::string GCBodyComponentBaseModelEntity::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCBodyComponentBaseModelEntity::IsValid() {
    return (m_ptr != nullptr);
}
GCBodyComponentSkeletonInstance GCBodyComponentBaseModelEntity::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CBodyComponentBaseModelEntity::GetParent(ptr=%p)", m_ptr));
    GCBodyComponentSkeletonInstance value(m_ptr);
    return value;
}
void GCBodyComponentBaseModelEntity::SetParent(GCBodyComponentSkeletonInstance value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CBodyComponentBaseModelEntity::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCBodyComponentBaseModelEntity(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCBodyComponentBaseModelEntity>("CBodyComponentBaseModelEntity")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCBodyComponentBaseModelEntity::GetParent, &GCBodyComponentBaseModelEntity::SetParent)
        .addFunction("ToPtr", &GCBodyComponentBaseModelEntity::ToPtr)
        .addFunction("IsValid", &GCBodyComponentBaseModelEntity::IsValid)
        .endClass();
}
GCNetworkOriginQuantizedVector::GCNetworkOriginQuantizedVector(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCNetworkOriginQuantizedVector::GCNetworkOriginQuantizedVector(void *ptr) {
    m_ptr = ptr;
}
float GCNetworkOriginQuantizedVector::GetX() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNetworkOriginQuantizedVector->X(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CNetworkOriginQuantizedVector", "m_vecX");
}
void GCNetworkOriginQuantizedVector::SetX(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNetworkOriginQuantizedVector->X(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNetworkOriginQuantizedVector", "m_vecX", false, value);
}
float GCNetworkOriginQuantizedVector::GetY() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNetworkOriginQuantizedVector->Y(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CNetworkOriginQuantizedVector", "m_vecY");
}
void GCNetworkOriginQuantizedVector::SetY(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNetworkOriginQuantizedVector->Y(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNetworkOriginQuantizedVector", "m_vecY", false, value);
}
float GCNetworkOriginQuantizedVector::GetZ() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNetworkOriginQuantizedVector->Z(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CNetworkOriginQuantizedVector", "m_vecZ");
}
void GCNetworkOriginQuantizedVector::SetZ(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNetworkOriginQuantizedVector->Z(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNetworkOriginQuantizedVector", "m_vecZ", false, value);
}
void* GCNetworkOriginQuantizedVector::GetPtr() {
    return m_ptr;
}
std::string GCNetworkOriginQuantizedVector::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCNetworkOriginQuantizedVector::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCNetworkOriginQuantizedVector(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCNetworkOriginQuantizedVector>("CNetworkOriginQuantizedVector")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("X", &GCNetworkOriginQuantizedVector::GetX, &GCNetworkOriginQuantizedVector::SetX)
        .addProperty("Y", &GCNetworkOriginQuantizedVector::GetY, &GCNetworkOriginQuantizedVector::SetY)
        .addProperty("Z", &GCNetworkOriginQuantizedVector::GetZ, &GCNetworkOriginQuantizedVector::SetZ)
        .addFunction("ToPtr", &GCNetworkOriginQuantizedVector::ToPtr)
        .addFunction("IsValid", &GCNetworkOriginQuantizedVector::IsValid)
        .endClass();
}
Gmagnetted_objects_t::Gmagnetted_objects_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
Gmagnetted_objects_t::Gmagnetted_objects_t(void *ptr) {
    m_ptr = ptr;
}
GCBaseEntity Gmagnetted_objects_t::GetEntity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: magnetted_objects_t->Entity(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "magnetted_objects_t", "hEntity").Get()));
    return value;
}
void Gmagnetted_objects_t::SetEntity(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: magnetted_objects_t->Entity(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Entity' is not possible.\n");
}
void* Gmagnetted_objects_t::GetPtr() {
    return m_ptr;
}
std::string Gmagnetted_objects_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool Gmagnetted_objects_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassmagnetted_objects_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<Gmagnetted_objects_t>("magnetted_objects_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Entity", &Gmagnetted_objects_t::GetEntity, &Gmagnetted_objects_t::SetEntity)
        .addFunction("ToPtr", &Gmagnetted_objects_t::ToPtr)
        .addFunction("IsValid", &Gmagnetted_objects_t::IsValid)
        .endClass();
}
GCHintMessageQueue::GCHintMessageQueue(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCHintMessageQueue::GCHintMessageQueue(void *ptr) {
    m_ptr = ptr;
}
float GCHintMessageQueue::GetTmMessageEnd() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHintMessageQueue->TmMessageEnd(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CHintMessageQueue", "m_tmMessageEnd");
}
void GCHintMessageQueue::SetTmMessageEnd(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHintMessageQueue->TmMessageEnd(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CHintMessageQueue", "m_tmMessageEnd", false, value);
}
GCBasePlayerController GCHintMessageQueue::GetPlayerController() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CHintMessageQueue->PlayerController(ptr=%p)", m_ptr));
    GCBasePlayerController value(*(void**)GetSchemaPtr(m_ptr, "CHintMessageQueue", "m_pPlayerController"));
    return value;
}
void GCHintMessageQueue::SetPlayerController(GCBasePlayerController value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CHintMessageQueue->PlayerController(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CHintMessageQueue","m_pPlayerController", false, (char*)value.GetPtr());
}
void* GCHintMessageQueue::GetPtr() {
    return m_ptr;
}
std::string GCHintMessageQueue::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCHintMessageQueue::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCHintMessageQueue(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCHintMessageQueue>("CHintMessageQueue")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("TmMessageEnd", &GCHintMessageQueue::GetTmMessageEnd, &GCHintMessageQueue::SetTmMessageEnd)
        .addProperty("PlayerController", &GCHintMessageQueue::GetPlayerController, &GCHintMessageQueue::SetPlayerController)
        .addFunction("ToPtr", &GCHintMessageQueue::ToPtr)
        .addFunction("IsValid", &GCHintMessageQueue::IsValid)
        .endClass();
}
GCSkillInt::GCSkillInt(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCSkillInt::GCSkillInt(void *ptr) {
    m_ptr = ptr;
}
std::vector<int32_t> GCSkillInt::GetValue() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSkillInt->Value(ptr=%p,size=4)", m_ptr));
    int32_t* outValue = (int32_t*)GetSchemaPtr(m_ptr, "CSkillInt", "m_pValue"); std::vector<int32_t> ret; for(int i = 0; i < 4; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCSkillInt::SetValue(std::vector<int32_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSkillInt->Value(ptr=%p,size=4)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Value' is not possible.\n");
}
void* GCSkillInt::GetPtr() {
    return m_ptr;
}
std::string GCSkillInt::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCSkillInt::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCSkillInt(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCSkillInt>("CSkillInt")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Value", &GCSkillInt::GetValue, &GCSkillInt::SetValue)
        .addFunction("ToPtr", &GCSkillInt::ToPtr)
        .addFunction("IsValid", &GCSkillInt::IsValid)
        .endClass();
}
Gthinkfunc_t::Gthinkfunc_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
Gthinkfunc_t::Gthinkfunc_t(void *ptr) {
    m_ptr = ptr;
}
uint32_t Gthinkfunc_t::GetContext() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: thinkfunc_t->Context(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlStringToken>(m_ptr, "thinkfunc_t", "m_nContext").m_nHashCode;
}
void Gthinkfunc_t::SetContext(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: thinkfunc_t->Context(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "thinkfunc_t", "m_nContext", true, CUtlStringToken(value));
}
int32 Gthinkfunc_t::GetNextThinkTick() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: thinkfunc_t->NextThinkTick(ptr=%p)", m_ptr));
    return GetSchemaValue<int32>(m_ptr, "thinkfunc_t", "m_nNextThinkTick");
}
void Gthinkfunc_t::SetNextThinkTick(int32 value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: thinkfunc_t->NextThinkTick(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "thinkfunc_t", "m_nNextThinkTick", true, value);
}
int32 Gthinkfunc_t::GetLastThinkTick() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: thinkfunc_t->LastThinkTick(ptr=%p)", m_ptr));
    return GetSchemaValue<int32>(m_ptr, "thinkfunc_t", "m_nLastThinkTick");
}
void Gthinkfunc_t::SetLastThinkTick(int32 value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: thinkfunc_t->LastThinkTick(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "thinkfunc_t", "m_nLastThinkTick", true, value);
}
void* Gthinkfunc_t::GetPtr() {
    return m_ptr;
}
std::string Gthinkfunc_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool Gthinkfunc_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassthinkfunc_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<Gthinkfunc_t>("thinkfunc_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Context", &Gthinkfunc_t::GetContext, &Gthinkfunc_t::SetContext)
        .addProperty("NextThinkTick", &Gthinkfunc_t::GetNextThinkTick, &Gthinkfunc_t::SetNextThinkTick)
        .addProperty("LastThinkTick", &Gthinkfunc_t::GetLastThinkTick, &Gthinkfunc_t::SetLastThinkTick)
        .addFunction("ToPtr", &Gthinkfunc_t::ToPtr)
        .addFunction("IsValid", &Gthinkfunc_t::IsValid)
        .endClass();
}
GCNavHullPresetVData::GCNavHullPresetVData(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCNavHullPresetVData::GCNavHullPresetVData(void *ptr) {
    m_ptr = ptr;
}
std::vector<CUtlString> GCNavHullPresetVData::GetNavHulls() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNavHullPresetVData->NavHulls(ptr=%p)", m_ptr));
    CUtlVector<CUtlString>* vec = GetSchemaValue<CUtlVector<CUtlString>*>(m_ptr, "CNavHullPresetVData", "m_vecNavHulls"); std::vector<CUtlString> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCNavHullPresetVData::SetNavHulls(std::vector<CUtlString> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNavHullPresetVData->NavHulls(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<CUtlString>(m_ptr, "CNavHullPresetVData", "m_vecNavHulls", false, value);
}
void* GCNavHullPresetVData::GetPtr() {
    return m_ptr;
}
std::string GCNavHullPresetVData::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCNavHullPresetVData::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCNavHullPresetVData(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCNavHullPresetVData>("CNavHullPresetVData")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("NavHulls", &GCNavHullPresetVData::GetNavHulls, &GCNavHullPresetVData::SetNavHulls)
        .addFunction("ToPtr", &GCNavHullPresetVData::ToPtr)
        .addFunction("IsValid", &GCNavHullPresetVData::IsValid)
        .endClass();
}
GCBasePlayerVData::GCBasePlayerVData(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCBasePlayerVData::GCBasePlayerVData(void *ptr) {
    m_ptr = ptr;
}
GCSkillFloat GCBasePlayerVData::GetHeadDamageMultiplier() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBasePlayerVData->HeadDamageMultiplier(ptr=%p)", m_ptr));
    GCSkillFloat value(GetSchemaPtr(m_ptr, "CBasePlayerVData", "m_flHeadDamageMultiplier"));
    return value;
}
void GCBasePlayerVData::SetHeadDamageMultiplier(GCSkillFloat value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBasePlayerVData->HeadDamageMultiplier(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'HeadDamageMultiplier' is not possible.\n");
}
GCSkillFloat GCBasePlayerVData::GetChestDamageMultiplier() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBasePlayerVData->ChestDamageMultiplier(ptr=%p)", m_ptr));
    GCSkillFloat value(GetSchemaPtr(m_ptr, "CBasePlayerVData", "m_flChestDamageMultiplier"));
    return value;
}
void GCBasePlayerVData::SetChestDamageMultiplier(GCSkillFloat value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBasePlayerVData->ChestDamageMultiplier(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ChestDamageMultiplier' is not possible.\n");
}
GCSkillFloat GCBasePlayerVData::GetStomachDamageMultiplier() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBasePlayerVData->StomachDamageMultiplier(ptr=%p)", m_ptr));
    GCSkillFloat value(GetSchemaPtr(m_ptr, "CBasePlayerVData", "m_flStomachDamageMultiplier"));
    return value;
}
void GCBasePlayerVData::SetStomachDamageMultiplier(GCSkillFloat value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBasePlayerVData->StomachDamageMultiplier(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'StomachDamageMultiplier' is not possible.\n");
}
GCSkillFloat GCBasePlayerVData::GetArmDamageMultiplier() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBasePlayerVData->ArmDamageMultiplier(ptr=%p)", m_ptr));
    GCSkillFloat value(GetSchemaPtr(m_ptr, "CBasePlayerVData", "m_flArmDamageMultiplier"));
    return value;
}
void GCBasePlayerVData::SetArmDamageMultiplier(GCSkillFloat value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBasePlayerVData->ArmDamageMultiplier(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ArmDamageMultiplier' is not possible.\n");
}
GCSkillFloat GCBasePlayerVData::GetLegDamageMultiplier() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBasePlayerVData->LegDamageMultiplier(ptr=%p)", m_ptr));
    GCSkillFloat value(GetSchemaPtr(m_ptr, "CBasePlayerVData", "m_flLegDamageMultiplier"));
    return value;
}
void GCBasePlayerVData::SetLegDamageMultiplier(GCSkillFloat value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBasePlayerVData->LegDamageMultiplier(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'LegDamageMultiplier' is not possible.\n");
}
float GCBasePlayerVData::GetHoldBreathTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBasePlayerVData->HoldBreathTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CBasePlayerVData", "m_flHoldBreathTime");
}
void GCBasePlayerVData::SetHoldBreathTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBasePlayerVData->HoldBreathTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBasePlayerVData", "m_flHoldBreathTime", false, value);
}
float GCBasePlayerVData::GetDrowningDamageInterval() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBasePlayerVData->DrowningDamageInterval(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CBasePlayerVData", "m_flDrowningDamageInterval");
}
void GCBasePlayerVData::SetDrowningDamageInterval(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBasePlayerVData->DrowningDamageInterval(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBasePlayerVData", "m_flDrowningDamageInterval", false, value);
}
int32_t GCBasePlayerVData::GetDrowningDamageInitial() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBasePlayerVData->DrowningDamageInitial(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CBasePlayerVData", "m_nDrowningDamageInitial");
}
void GCBasePlayerVData::SetDrowningDamageInitial(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBasePlayerVData->DrowningDamageInitial(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBasePlayerVData", "m_nDrowningDamageInitial", false, value);
}
int32_t GCBasePlayerVData::GetDrowningDamageMax() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBasePlayerVData->DrowningDamageMax(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CBasePlayerVData", "m_nDrowningDamageMax");
}
void GCBasePlayerVData::SetDrowningDamageMax(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBasePlayerVData->DrowningDamageMax(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBasePlayerVData", "m_nDrowningDamageMax", false, value);
}
int32_t GCBasePlayerVData::GetWaterSpeed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBasePlayerVData->WaterSpeed(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CBasePlayerVData", "m_nWaterSpeed");
}
void GCBasePlayerVData::SetWaterSpeed(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBasePlayerVData->WaterSpeed(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBasePlayerVData", "m_nWaterSpeed", false, value);
}
float GCBasePlayerVData::GetUseRange() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBasePlayerVData->UseRange(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CBasePlayerVData", "m_flUseRange");
}
void GCBasePlayerVData::SetUseRange(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBasePlayerVData->UseRange(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBasePlayerVData", "m_flUseRange", false, value);
}
float GCBasePlayerVData::GetUseAngleTolerance() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBasePlayerVData->UseAngleTolerance(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CBasePlayerVData", "m_flUseAngleTolerance");
}
void GCBasePlayerVData::SetUseAngleTolerance(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBasePlayerVData->UseAngleTolerance(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBasePlayerVData", "m_flUseAngleTolerance", false, value);
}
float GCBasePlayerVData::GetCrouchTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBasePlayerVData->CrouchTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CBasePlayerVData", "m_flCrouchTime");
}
void GCBasePlayerVData::SetCrouchTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBasePlayerVData->CrouchTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBasePlayerVData", "m_flCrouchTime", false, value);
}
void* GCBasePlayerVData::GetPtr() {
    return m_ptr;
}
std::string GCBasePlayerVData::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCBasePlayerVData::IsValid() {
    return (m_ptr != nullptr);
}
GCEntitySubclassVDataBase GCBasePlayerVData::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CBasePlayerVData::GetParent(ptr=%p)", m_ptr));
    GCEntitySubclassVDataBase value(m_ptr);
    return value;
}
void GCBasePlayerVData::SetParent(GCEntitySubclassVDataBase value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CBasePlayerVData::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCBasePlayerVData(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCBasePlayerVData>("CBasePlayerVData")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("HeadDamageMultiplier", &GCBasePlayerVData::GetHeadDamageMultiplier, &GCBasePlayerVData::SetHeadDamageMultiplier)
        .addProperty("ChestDamageMultiplier", &GCBasePlayerVData::GetChestDamageMultiplier, &GCBasePlayerVData::SetChestDamageMultiplier)
        .addProperty("StomachDamageMultiplier", &GCBasePlayerVData::GetStomachDamageMultiplier, &GCBasePlayerVData::SetStomachDamageMultiplier)
        .addProperty("ArmDamageMultiplier", &GCBasePlayerVData::GetArmDamageMultiplier, &GCBasePlayerVData::SetArmDamageMultiplier)
        .addProperty("LegDamageMultiplier", &GCBasePlayerVData::GetLegDamageMultiplier, &GCBasePlayerVData::SetLegDamageMultiplier)
        .addProperty("HoldBreathTime", &GCBasePlayerVData::GetHoldBreathTime, &GCBasePlayerVData::SetHoldBreathTime)
        .addProperty("DrowningDamageInterval", &GCBasePlayerVData::GetDrowningDamageInterval, &GCBasePlayerVData::SetDrowningDamageInterval)
        .addProperty("DrowningDamageInitial", &GCBasePlayerVData::GetDrowningDamageInitial, &GCBasePlayerVData::SetDrowningDamageInitial)
        .addProperty("DrowningDamageMax", &GCBasePlayerVData::GetDrowningDamageMax, &GCBasePlayerVData::SetDrowningDamageMax)
        .addProperty("WaterSpeed", &GCBasePlayerVData::GetWaterSpeed, &GCBasePlayerVData::SetWaterSpeed)
        .addProperty("UseRange", &GCBasePlayerVData::GetUseRange, &GCBasePlayerVData::SetUseRange)
        .addProperty("UseAngleTolerance", &GCBasePlayerVData::GetUseAngleTolerance, &GCBasePlayerVData::SetUseAngleTolerance)
        .addProperty("CrouchTime", &GCBasePlayerVData::GetCrouchTime, &GCBasePlayerVData::SetCrouchTime)
        .addProperty("Parent", &GCBasePlayerVData::GetParent, &GCBasePlayerVData::SetParent)
        .addFunction("ToPtr", &GCBasePlayerVData::ToPtr)
        .addFunction("IsValid", &GCBasePlayerVData::IsValid)
        .endClass();
}
GCSceneEventInfo::GCSceneEventInfo(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCSceneEventInfo::GCSceneEventInfo(void *ptr) {
    m_ptr = ptr;
}
int32_t GCSceneEventInfo::GetLayer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSceneEventInfo->Layer(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CSceneEventInfo", "m_iLayer");
}
void GCSceneEventInfo::SetLayer(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSceneEventInfo->Layer(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSceneEventInfo", "m_iLayer", false, value);
}
int32_t GCSceneEventInfo::GetPriority() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSceneEventInfo->Priority(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CSceneEventInfo", "m_iPriority");
}
void GCSceneEventInfo::SetPriority(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSceneEventInfo->Priority(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSceneEventInfo", "m_iPriority", false, value);
}
float GCSceneEventInfo::GetWeight() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSceneEventInfo->Weight(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CSceneEventInfo", "m_flWeight");
}
void GCSceneEventInfo::SetWeight(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSceneEventInfo->Weight(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSceneEventInfo", "m_flWeight", false, value);
}
bool GCSceneEventInfo::GetHasArrived() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSceneEventInfo->HasArrived(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CSceneEventInfo", "m_bHasArrived");
}
void GCSceneEventInfo::SetHasArrived(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSceneEventInfo->HasArrived(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSceneEventInfo", "m_bHasArrived", false, value);
}
int32_t GCSceneEventInfo::GetType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSceneEventInfo->Type(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CSceneEventInfo", "m_nType");
}
void GCSceneEventInfo::SetType(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSceneEventInfo->Type(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSceneEventInfo", "m_nType", false, value);
}
float GCSceneEventInfo::GetNext() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSceneEventInfo->Next(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CSceneEventInfo", "m_flNext");
}
void GCSceneEventInfo::SetNext(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSceneEventInfo->Next(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSceneEventInfo", "m_flNext", false, value);
}
bool GCSceneEventInfo::GetIsGesture() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSceneEventInfo->IsGesture(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CSceneEventInfo", "m_bIsGesture");
}
void GCSceneEventInfo::SetIsGesture(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSceneEventInfo->IsGesture(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSceneEventInfo", "m_bIsGesture", false, value);
}
bool GCSceneEventInfo::GetShouldRemove() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSceneEventInfo->ShouldRemove(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CSceneEventInfo", "m_bShouldRemove");
}
void GCSceneEventInfo::SetShouldRemove(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSceneEventInfo->ShouldRemove(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSceneEventInfo", "m_bShouldRemove", false, value);
}
GCBaseEntity GCSceneEventInfo::GetTarget() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSceneEventInfo->Target(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CSceneEventInfo", "m_hTarget").Get()));
    return value;
}
void GCSceneEventInfo::SetTarget(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSceneEventInfo->Target(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Target' is not possible.\n");
}
GSceneEventId_t GCSceneEventInfo::GetSceneEventId() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSceneEventInfo->SceneEventId(ptr=%p)", m_ptr));
    GSceneEventId_t value(GetSchemaPtr(m_ptr, "CSceneEventInfo", "m_nSceneEventId"));
    return value;
}
void GCSceneEventInfo::SetSceneEventId(GSceneEventId_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSceneEventInfo->SceneEventId(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'SceneEventId' is not possible.\n");
}
bool GCSceneEventInfo::GetClientSide() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSceneEventInfo->ClientSide(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CSceneEventInfo", "m_bClientSide");
}
void GCSceneEventInfo::SetClientSide(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSceneEventInfo->ClientSide(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSceneEventInfo", "m_bClientSide", false, value);
}
bool GCSceneEventInfo::GetStarted() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSceneEventInfo->Started(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CSceneEventInfo", "m_bStarted");
}
void GCSceneEventInfo::SetStarted(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSceneEventInfo->Started(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSceneEventInfo", "m_bStarted", false, value);
}
void* GCSceneEventInfo::GetPtr() {
    return m_ptr;
}
std::string GCSceneEventInfo::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCSceneEventInfo::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCSceneEventInfo(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCSceneEventInfo>("CSceneEventInfo")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Layer", &GCSceneEventInfo::GetLayer, &GCSceneEventInfo::SetLayer)
        .addProperty("Priority", &GCSceneEventInfo::GetPriority, &GCSceneEventInfo::SetPriority)
        .addProperty("Weight", &GCSceneEventInfo::GetWeight, &GCSceneEventInfo::SetWeight)
        .addProperty("HasArrived", &GCSceneEventInfo::GetHasArrived, &GCSceneEventInfo::SetHasArrived)
        .addProperty("Type", &GCSceneEventInfo::GetType, &GCSceneEventInfo::SetType)
        .addProperty("Next", &GCSceneEventInfo::GetNext, &GCSceneEventInfo::SetNext)
        .addProperty("IsGesture", &GCSceneEventInfo::GetIsGesture, &GCSceneEventInfo::SetIsGesture)
        .addProperty("ShouldRemove", &GCSceneEventInfo::GetShouldRemove, &GCSceneEventInfo::SetShouldRemove)
        .addProperty("Target", &GCSceneEventInfo::GetTarget, &GCSceneEventInfo::SetTarget)
        .addProperty("SceneEventId", &GCSceneEventInfo::GetSceneEventId, &GCSceneEventInfo::SetSceneEventId)
        .addProperty("ClientSide", &GCSceneEventInfo::GetClientSide, &GCSceneEventInfo::SetClientSide)
        .addProperty("Started", &GCSceneEventInfo::GetStarted, &GCSceneEventInfo::SetStarted)
        .addFunction("ToPtr", &GCSceneEventInfo::ToPtr)
        .addFunction("IsValid", &GCSceneEventInfo::IsValid)
        .endClass();
}
GCCopyRecipientFilter::GCCopyRecipientFilter(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCCopyRecipientFilter::GCCopyRecipientFilter(void *ptr) {
    m_ptr = ptr;
}
int32_t GCCopyRecipientFilter::GetFlags() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCopyRecipientFilter->Flags(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCopyRecipientFilter", "m_Flags");
}
void GCCopyRecipientFilter::SetFlags(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCopyRecipientFilter->Flags(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCopyRecipientFilter", "m_Flags", false, value);
}
std::vector<int32_t> GCCopyRecipientFilter::GetRecipients() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCopyRecipientFilter->Recipients(ptr=%p)", m_ptr));
    CUtlVector<int32_t>* vec = GetSchemaValue<CUtlVector<int32_t>*>(m_ptr, "CCopyRecipientFilter", "m_Recipients"); std::vector<int32_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCCopyRecipientFilter::SetRecipients(std::vector<int32_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCopyRecipientFilter->Recipients(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<int32_t>(m_ptr, "CCopyRecipientFilter", "m_Recipients", false, value);
}
void* GCCopyRecipientFilter::GetPtr() {
    return m_ptr;
}
std::string GCCopyRecipientFilter::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCCopyRecipientFilter::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCCopyRecipientFilter(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCCopyRecipientFilter>("CCopyRecipientFilter")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Flags", &GCCopyRecipientFilter::GetFlags, &GCCopyRecipientFilter::SetFlags)
        .addProperty("Recipients", &GCCopyRecipientFilter::GetRecipients, &GCCopyRecipientFilter::SetRecipients)
        .addFunction("ToPtr", &GCCopyRecipientFilter::ToPtr)
        .addFunction("IsValid", &GCCopyRecipientFilter::IsValid)
        .endClass();
}
GCPropDoorRotatingBreakable::GCPropDoorRotatingBreakable(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPropDoorRotatingBreakable::GCPropDoorRotatingBreakable(void *ptr) {
    m_ptr = ptr;
}
bool GCPropDoorRotatingBreakable::GetBreakable() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPropDoorRotatingBreakable->Breakable(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPropDoorRotatingBreakable", "m_bBreakable");
}
void GCPropDoorRotatingBreakable::SetBreakable(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPropDoorRotatingBreakable->Breakable(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPropDoorRotatingBreakable", "m_bBreakable", false, value);
}
bool GCPropDoorRotatingBreakable::GetIsAbleToCloseAreaPortals() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPropDoorRotatingBreakable->IsAbleToCloseAreaPortals(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPropDoorRotatingBreakable", "m_isAbleToCloseAreaPortals");
}
void GCPropDoorRotatingBreakable::SetIsAbleToCloseAreaPortals(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPropDoorRotatingBreakable->IsAbleToCloseAreaPortals(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPropDoorRotatingBreakable", "m_isAbleToCloseAreaPortals", false, value);
}
int32_t GCPropDoorRotatingBreakable::GetCurrentDamageState() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPropDoorRotatingBreakable->CurrentDamageState(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CPropDoorRotatingBreakable", "m_currentDamageState");
}
void GCPropDoorRotatingBreakable::SetCurrentDamageState(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPropDoorRotatingBreakable->CurrentDamageState(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPropDoorRotatingBreakable", "m_currentDamageState", false, value);
}
std::vector<CUtlSymbolLarge> GCPropDoorRotatingBreakable::GetDamageStates() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPropDoorRotatingBreakable->DamageStates(ptr=%p)", m_ptr));
    CUtlVector<CUtlSymbolLarge>* vec = GetSchemaValue<CUtlVector<CUtlSymbolLarge>*>(m_ptr, "CPropDoorRotatingBreakable", "m_damageStates"); std::vector<CUtlSymbolLarge> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCPropDoorRotatingBreakable::SetDamageStates(std::vector<CUtlSymbolLarge> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPropDoorRotatingBreakable->DamageStates(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<CUtlSymbolLarge>(m_ptr, "CPropDoorRotatingBreakable", "m_damageStates", false, value);
}
void* GCPropDoorRotatingBreakable::GetPtr() {
    return m_ptr;
}
std::string GCPropDoorRotatingBreakable::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPropDoorRotatingBreakable::IsValid() {
    return (m_ptr != nullptr);
}
GCPropDoorRotating GCPropDoorRotatingBreakable::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPropDoorRotatingBreakable::GetParent(ptr=%p)", m_ptr));
    GCPropDoorRotating value(m_ptr);
    return value;
}
void GCPropDoorRotatingBreakable::SetParent(GCPropDoorRotating value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPropDoorRotatingBreakable::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCPropDoorRotatingBreakable(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPropDoorRotatingBreakable>("CPropDoorRotatingBreakable")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Breakable", &GCPropDoorRotatingBreakable::GetBreakable, &GCPropDoorRotatingBreakable::SetBreakable)
        .addProperty("IsAbleToCloseAreaPortals", &GCPropDoorRotatingBreakable::GetIsAbleToCloseAreaPortals, &GCPropDoorRotatingBreakable::SetIsAbleToCloseAreaPortals)
        .addProperty("CurrentDamageState", &GCPropDoorRotatingBreakable::GetCurrentDamageState, &GCPropDoorRotatingBreakable::SetCurrentDamageState)
        .addProperty("DamageStates", &GCPropDoorRotatingBreakable::GetDamageStates, &GCPropDoorRotatingBreakable::SetDamageStates)
        .addProperty("Parent", &GCPropDoorRotatingBreakable::GetParent, &GCPropDoorRotatingBreakable::SetParent)
        .addFunction("ToPtr", &GCPropDoorRotatingBreakable::ToPtr)
        .addFunction("IsValid", &GCPropDoorRotatingBreakable::IsValid)
        .endClass();
}
GCBtActionAim::GCBtActionAim(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCBtActionAim::GCBtActionAim(void *ptr) {
    m_ptr = ptr;
}
std::string GCBtActionAim::GetSensorInputKey() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBtActionAim->SensorInputKey(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlString>(m_ptr, "CBtActionAim", "m_szSensorInputKey").Get();
}
void GCBtActionAim::SetSensorInputKey(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBtActionAim->SensorInputKey(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBtActionAim", "m_szSensorInputKey", false, CUtlString(value.c_str()));
}
std::string GCBtActionAim::GetAimReadyKey() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBtActionAim->AimReadyKey(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlString>(m_ptr, "CBtActionAim", "m_szAimReadyKey").Get();
}
void GCBtActionAim::SetAimReadyKey(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBtActionAim->AimReadyKey(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBtActionAim", "m_szAimReadyKey", false, CUtlString(value.c_str()));
}
float GCBtActionAim::GetZoomCooldownTimestamp() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBtActionAim->ZoomCooldownTimestamp(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CBtActionAim", "m_flZoomCooldownTimestamp");
}
void GCBtActionAim::SetZoomCooldownTimestamp(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBtActionAim->ZoomCooldownTimestamp(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBtActionAim", "m_flZoomCooldownTimestamp", false, value);
}
bool GCBtActionAim::GetDoneAiming() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBtActionAim->DoneAiming(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CBtActionAim", "m_bDoneAiming");
}
void GCBtActionAim::SetDoneAiming(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBtActionAim->DoneAiming(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBtActionAim", "m_bDoneAiming", false, value);
}
float GCBtActionAim::GetLerpStartTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBtActionAim->LerpStartTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CBtActionAim", "m_flLerpStartTime");
}
void GCBtActionAim::SetLerpStartTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBtActionAim->LerpStartTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBtActionAim", "m_flLerpStartTime", false, value);
}
float GCBtActionAim::GetNextLookTargetLerpTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBtActionAim->NextLookTargetLerpTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CBtActionAim", "m_flNextLookTargetLerpTime");
}
void GCBtActionAim::SetNextLookTargetLerpTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBtActionAim->NextLookTargetLerpTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBtActionAim", "m_flNextLookTargetLerpTime", false, value);
}
float GCBtActionAim::GetPenaltyReductionRatio() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBtActionAim->PenaltyReductionRatio(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CBtActionAim", "m_flPenaltyReductionRatio");
}
void GCBtActionAim::SetPenaltyReductionRatio(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBtActionAim->PenaltyReductionRatio(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBtActionAim", "m_flPenaltyReductionRatio", false, value);
}
QAngle GCBtActionAim::GetNextLookTarget() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBtActionAim->NextLookTarget(ptr=%p)", m_ptr));
    return GetSchemaValue<QAngle>(m_ptr, "CBtActionAim", "m_NextLookTarget");
}
void GCBtActionAim::SetNextLookTarget(QAngle value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBtActionAim->NextLookTarget(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBtActionAim", "m_NextLookTarget", false, value);
}
GCountdownTimer GCBtActionAim::GetAimTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBtActionAim->AimTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CBtActionAim", "m_AimTimer"));
    return value;
}
void GCBtActionAim::SetAimTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBtActionAim->AimTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'AimTimer' is not possible.\n");
}
GCountdownTimer GCBtActionAim::GetSniperHoldTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBtActionAim->SniperHoldTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CBtActionAim", "m_SniperHoldTimer"));
    return value;
}
void GCBtActionAim::SetSniperHoldTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBtActionAim->SniperHoldTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'SniperHoldTimer' is not possible.\n");
}
GCountdownTimer GCBtActionAim::GetFocusIntervalTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBtActionAim->FocusIntervalTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CBtActionAim", "m_FocusIntervalTimer"));
    return value;
}
void GCBtActionAim::SetFocusIntervalTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBtActionAim->FocusIntervalTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'FocusIntervalTimer' is not possible.\n");
}
bool GCBtActionAim::GetAcquired() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBtActionAim->Acquired(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CBtActionAim", "m_bAcquired");
}
void GCBtActionAim::SetAcquired(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBtActionAim->Acquired(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBtActionAim", "m_bAcquired", false, value);
}
void* GCBtActionAim::GetPtr() {
    return m_ptr;
}
std::string GCBtActionAim::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCBtActionAim::IsValid() {
    return (m_ptr != nullptr);
}
GCBtNode GCBtActionAim::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CBtActionAim::GetParent(ptr=%p)", m_ptr));
    GCBtNode value(m_ptr);
    return value;
}
void GCBtActionAim::SetParent(GCBtNode value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CBtActionAim::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCBtActionAim(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCBtActionAim>("CBtActionAim")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("SensorInputKey", &GCBtActionAim::GetSensorInputKey, &GCBtActionAim::SetSensorInputKey)
        .addProperty("AimReadyKey", &GCBtActionAim::GetAimReadyKey, &GCBtActionAim::SetAimReadyKey)
        .addProperty("ZoomCooldownTimestamp", &GCBtActionAim::GetZoomCooldownTimestamp, &GCBtActionAim::SetZoomCooldownTimestamp)
        .addProperty("DoneAiming", &GCBtActionAim::GetDoneAiming, &GCBtActionAim::SetDoneAiming)
        .addProperty("LerpStartTime", &GCBtActionAim::GetLerpStartTime, &GCBtActionAim::SetLerpStartTime)
        .addProperty("NextLookTargetLerpTime", &GCBtActionAim::GetNextLookTargetLerpTime, &GCBtActionAim::SetNextLookTargetLerpTime)
        .addProperty("PenaltyReductionRatio", &GCBtActionAim::GetPenaltyReductionRatio, &GCBtActionAim::SetPenaltyReductionRatio)
        .addProperty("NextLookTarget", &GCBtActionAim::GetNextLookTarget, &GCBtActionAim::SetNextLookTarget)
        .addProperty("AimTimer", &GCBtActionAim::GetAimTimer, &GCBtActionAim::SetAimTimer)
        .addProperty("SniperHoldTimer", &GCBtActionAim::GetSniperHoldTimer, &GCBtActionAim::SetSniperHoldTimer)
        .addProperty("FocusIntervalTimer", &GCBtActionAim::GetFocusIntervalTimer, &GCBtActionAim::SetFocusIntervalTimer)
        .addProperty("Acquired", &GCBtActionAim::GetAcquired, &GCBtActionAim::SetAcquired)
        .addProperty("Parent", &GCBtActionAim::GetParent, &GCBtActionAim::SetParent)
        .addFunction("ToPtr", &GCBtActionAim::ToPtr)
        .addFunction("IsValid", &GCBtActionAim::IsValid)
        .endClass();
}
GCFiringModeInt::GCFiringModeInt(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCFiringModeInt::GCFiringModeInt(void *ptr) {
    m_ptr = ptr;
}
std::vector<int32_t> GCFiringModeInt::GetValues() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFiringModeInt->Values(ptr=%p,size=2)", m_ptr));
    int32_t* outValue = (int32_t*)GetSchemaPtr(m_ptr, "CFiringModeInt", "m_nValues"); std::vector<int32_t> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCFiringModeInt::SetValues(std::vector<int32_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFiringModeInt->Values(ptr=%p,size=2)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Values' is not possible.\n");
}
void* GCFiringModeInt::GetPtr() {
    return m_ptr;
}
std::string GCFiringModeInt::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCFiringModeInt::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCFiringModeInt(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCFiringModeInt>("CFiringModeInt")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Values", &GCFiringModeInt::GetValues, &GCFiringModeInt::SetValues)
        .addFunction("ToPtr", &GCFiringModeInt::ToPtr)
        .addFunction("IsValid", &GCFiringModeInt::IsValid)
        .endClass();
}
GCSoundPatch::GCSoundPatch(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCSoundPatch::GCSoundPatch(void *ptr) {
    m_ptr = ptr;
}
GCSoundEnvelope GCSoundPatch::GetPitch() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSoundPatch->Pitch(ptr=%p)", m_ptr));
    GCSoundEnvelope value(GetSchemaPtr(m_ptr, "CSoundPatch", "m_pitch"));
    return value;
}
void GCSoundPatch::SetPitch(GCSoundEnvelope value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSoundPatch->Pitch(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Pitch' is not possible.\n");
}
GCSoundEnvelope GCSoundPatch::GetVolume() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSoundPatch->Volume(ptr=%p)", m_ptr));
    GCSoundEnvelope value(GetSchemaPtr(m_ptr, "CSoundPatch", "m_volume"));
    return value;
}
void GCSoundPatch::SetVolume(GCSoundEnvelope value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSoundPatch->Volume(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Volume' is not possible.\n");
}
float GCSoundPatch::GetShutdownTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSoundPatch->ShutdownTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CSoundPatch", "m_shutdownTime");
}
void GCSoundPatch::SetShutdownTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSoundPatch->ShutdownTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSoundPatch", "m_shutdownTime", false, value);
}
float GCSoundPatch::GetLastTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSoundPatch->LastTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CSoundPatch", "m_flLastTime");
}
void GCSoundPatch::SetLastTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSoundPatch->LastTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSoundPatch", "m_flLastTime", false, value);
}
std::string GCSoundPatch::GetSoundScriptName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSoundPatch->SoundScriptName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSoundPatch", "m_iszSoundScriptName").String();
}
void GCSoundPatch::SetSoundScriptName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSoundPatch->SoundScriptName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSoundPatch", "m_iszSoundScriptName", false, CUtlSymbolLarge(value.c_str()));
}
GCBaseEntity GCSoundPatch::GetEnt() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSoundPatch->Ent(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CSoundPatch", "m_hEnt").Get()));
    return value;
}
void GCSoundPatch::SetEnt(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSoundPatch->Ent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Ent' is not possible.\n");
}
int GCSoundPatch::GetSoundEntityIndex() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSoundPatch->SoundEntityIndex(ptr=%p)", m_ptr));
    return GetSchemaValue<CEntityIndex>(m_ptr, "CSoundPatch", "m_soundEntityIndex").Get();
}
void GCSoundPatch::SetSoundEntityIndex(int value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSoundPatch->SoundEntityIndex(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSoundPatch", "m_soundEntityIndex", false, CEntityIndex(value));
}
Vector GCSoundPatch::GetSoundOrigin() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSoundPatch->SoundOrigin(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CSoundPatch", "m_soundOrigin");
}
void GCSoundPatch::SetSoundOrigin(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSoundPatch->SoundOrigin(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSoundPatch", "m_soundOrigin", false, value);
}
int32_t GCSoundPatch::GetIsPlaying() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSoundPatch->IsPlaying(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CSoundPatch", "m_isPlaying");
}
void GCSoundPatch::SetIsPlaying(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSoundPatch->IsPlaying(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSoundPatch", "m_isPlaying", false, value);
}
GCCopyRecipientFilter GCSoundPatch::GetFilter() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSoundPatch->Filter(ptr=%p)", m_ptr));
    GCCopyRecipientFilter value(GetSchemaPtr(m_ptr, "CSoundPatch", "m_Filter"));
    return value;
}
void GCSoundPatch::SetFilter(GCCopyRecipientFilter value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSoundPatch->Filter(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Filter' is not possible.\n");
}
float GCSoundPatch::GetCloseCaptionDuration() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSoundPatch->CloseCaptionDuration(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CSoundPatch", "m_flCloseCaptionDuration");
}
void GCSoundPatch::SetCloseCaptionDuration(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSoundPatch->CloseCaptionDuration(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSoundPatch", "m_flCloseCaptionDuration", false, value);
}
bool GCSoundPatch::GetUpdatedSoundOrigin() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSoundPatch->UpdatedSoundOrigin(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CSoundPatch", "m_bUpdatedSoundOrigin");
}
void GCSoundPatch::SetUpdatedSoundOrigin(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSoundPatch->UpdatedSoundOrigin(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSoundPatch", "m_bUpdatedSoundOrigin", false, value);
}
std::string GCSoundPatch::GetClassName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSoundPatch->ClassName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CSoundPatch", "m_iszClassName").String();
}
void GCSoundPatch::SetClassName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSoundPatch->ClassName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSoundPatch", "m_iszClassName", false, CUtlSymbolLarge(value.c_str()));
}
void* GCSoundPatch::GetPtr() {
    return m_ptr;
}
std::string GCSoundPatch::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCSoundPatch::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCSoundPatch(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCSoundPatch>("CSoundPatch")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Pitch", &GCSoundPatch::GetPitch, &GCSoundPatch::SetPitch)
        .addProperty("Volume", &GCSoundPatch::GetVolume, &GCSoundPatch::SetVolume)
        .addProperty("ShutdownTime", &GCSoundPatch::GetShutdownTime, &GCSoundPatch::SetShutdownTime)
        .addProperty("LastTime", &GCSoundPatch::GetLastTime, &GCSoundPatch::SetLastTime)
        .addProperty("SoundScriptName", &GCSoundPatch::GetSoundScriptName, &GCSoundPatch::SetSoundScriptName)
        .addProperty("Ent", &GCSoundPatch::GetEnt, &GCSoundPatch::SetEnt)
        .addProperty("SoundEntityIndex", &GCSoundPatch::GetSoundEntityIndex, &GCSoundPatch::SetSoundEntityIndex)
        .addProperty("SoundOrigin", &GCSoundPatch::GetSoundOrigin, &GCSoundPatch::SetSoundOrigin)
        .addProperty("IsPlaying", &GCSoundPatch::GetIsPlaying, &GCSoundPatch::SetIsPlaying)
        .addProperty("Filter", &GCSoundPatch::GetFilter, &GCSoundPatch::SetFilter)
        .addProperty("CloseCaptionDuration", &GCSoundPatch::GetCloseCaptionDuration, &GCSoundPatch::SetCloseCaptionDuration)
        .addProperty("UpdatedSoundOrigin", &GCSoundPatch::GetUpdatedSoundOrigin, &GCSoundPatch::SetUpdatedSoundOrigin)
        .addProperty("ClassName", &GCSoundPatch::GetClassName, &GCSoundPatch::SetClassName)
        .addFunction("ToPtr", &GCSoundPatch::ToPtr)
        .addFunction("IsValid", &GCSoundPatch::IsValid)
        .endClass();
}
GCSmoothFunc::GCSmoothFunc(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCSmoothFunc::GCSmoothFunc(void *ptr) {
    m_ptr = ptr;
}
float GCSmoothFunc::GetSmoothAmplitude() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSmoothFunc->SmoothAmplitude(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CSmoothFunc", "m_flSmoothAmplitude");
}
void GCSmoothFunc::SetSmoothAmplitude(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSmoothFunc->SmoothAmplitude(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSmoothFunc", "m_flSmoothAmplitude", false, value);
}
float GCSmoothFunc::GetSmoothBias() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSmoothFunc->SmoothBias(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CSmoothFunc", "m_flSmoothBias");
}
void GCSmoothFunc::SetSmoothBias(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSmoothFunc->SmoothBias(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSmoothFunc", "m_flSmoothBias", false, value);
}
float GCSmoothFunc::GetSmoothDuration() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSmoothFunc->SmoothDuration(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CSmoothFunc", "m_flSmoothDuration");
}
void GCSmoothFunc::SetSmoothDuration(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSmoothFunc->SmoothDuration(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSmoothFunc", "m_flSmoothDuration", false, value);
}
float GCSmoothFunc::GetSmoothRemainingTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSmoothFunc->SmoothRemainingTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CSmoothFunc", "m_flSmoothRemainingTime");
}
void GCSmoothFunc::SetSmoothRemainingTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSmoothFunc->SmoothRemainingTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSmoothFunc", "m_flSmoothRemainingTime", false, value);
}
int32_t GCSmoothFunc::GetSmoothDir() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSmoothFunc->SmoothDir(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CSmoothFunc", "m_nSmoothDir");
}
void GCSmoothFunc::SetSmoothDir(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSmoothFunc->SmoothDir(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSmoothFunc", "m_nSmoothDir", false, value);
}
void* GCSmoothFunc::GetPtr() {
    return m_ptr;
}
std::string GCSmoothFunc::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCSmoothFunc::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCSmoothFunc(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCSmoothFunc>("CSmoothFunc")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("SmoothAmplitude", &GCSmoothFunc::GetSmoothAmplitude, &GCSmoothFunc::SetSmoothAmplitude)
        .addProperty("SmoothBias", &GCSmoothFunc::GetSmoothBias, &GCSmoothFunc::SetSmoothBias)
        .addProperty("SmoothDuration", &GCSmoothFunc::GetSmoothDuration, &GCSmoothFunc::SetSmoothDuration)
        .addProperty("SmoothRemainingTime", &GCSmoothFunc::GetSmoothRemainingTime, &GCSmoothFunc::SetSmoothRemainingTime)
        .addProperty("SmoothDir", &GCSmoothFunc::GetSmoothDir, &GCSmoothFunc::SetSmoothDir)
        .addFunction("ToPtr", &GCSmoothFunc::ToPtr)
        .addFunction("IsValid", &GCSmoothFunc::IsValid)
        .endClass();
}
GIHasAttributes::GIHasAttributes(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GIHasAttributes::GIHasAttributes(void *ptr) {
    m_ptr = ptr;
}
void* GIHasAttributes::GetPtr() {
    return m_ptr;
}
std::string GIHasAttributes::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GIHasAttributes::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassIHasAttributes(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GIHasAttributes>("IHasAttributes")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addFunction("ToPtr", &GIHasAttributes::ToPtr)
        .addFunction("IsValid", &GIHasAttributes::IsValid)
        .endClass();
}
GCRagdollPropAttached::GCRagdollPropAttached(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCRagdollPropAttached::GCRagdollPropAttached(void *ptr) {
    m_ptr = ptr;
}
uint32_t GCRagdollPropAttached::GetBoneIndexAttached() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CRagdollPropAttached->BoneIndexAttached(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CRagdollPropAttached", "m_boneIndexAttached");
}
void GCRagdollPropAttached::SetBoneIndexAttached(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CRagdollPropAttached->BoneIndexAttached(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CRagdollPropAttached", "m_boneIndexAttached", false, value);
}
uint32_t GCRagdollPropAttached::GetRagdollAttachedObjectIndex() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CRagdollPropAttached->RagdollAttachedObjectIndex(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CRagdollPropAttached", "m_ragdollAttachedObjectIndex");
}
void GCRagdollPropAttached::SetRagdollAttachedObjectIndex(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CRagdollPropAttached->RagdollAttachedObjectIndex(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CRagdollPropAttached", "m_ragdollAttachedObjectIndex", false, value);
}
Vector GCRagdollPropAttached::GetAttachmentPointBoneSpace() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CRagdollPropAttached->AttachmentPointBoneSpace(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CRagdollPropAttached", "m_attachmentPointBoneSpace");
}
void GCRagdollPropAttached::SetAttachmentPointBoneSpace(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CRagdollPropAttached->AttachmentPointBoneSpace(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CRagdollPropAttached", "m_attachmentPointBoneSpace", false, value);
}
Vector GCRagdollPropAttached::GetAttachmentPointRagdollSpace() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CRagdollPropAttached->AttachmentPointRagdollSpace(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CRagdollPropAttached", "m_attachmentPointRagdollSpace");
}
void GCRagdollPropAttached::SetAttachmentPointRagdollSpace(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CRagdollPropAttached->AttachmentPointRagdollSpace(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CRagdollPropAttached", "m_attachmentPointRagdollSpace", false, value);
}
bool GCRagdollPropAttached::GetShouldDetach() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CRagdollPropAttached->ShouldDetach(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CRagdollPropAttached", "m_bShouldDetach");
}
void GCRagdollPropAttached::SetShouldDetach(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CRagdollPropAttached->ShouldDetach(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CRagdollPropAttached", "m_bShouldDetach", false, value);
}
bool GCRagdollPropAttached::GetShouldDeleteAttachedActivationRecord() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CRagdollPropAttached->ShouldDeleteAttachedActivationRecord(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CRagdollPropAttached", "m_bShouldDeleteAttachedActivationRecord");
}
void GCRagdollPropAttached::SetShouldDeleteAttachedActivationRecord(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CRagdollPropAttached->ShouldDeleteAttachedActivationRecord(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CRagdollPropAttached", "m_bShouldDeleteAttachedActivationRecord", false, value);
}
void* GCRagdollPropAttached::GetPtr() {
    return m_ptr;
}
std::string GCRagdollPropAttached::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCRagdollPropAttached::IsValid() {
    return (m_ptr != nullptr);
}
GCRagdollProp GCRagdollPropAttached::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CRagdollPropAttached::GetParent(ptr=%p)", m_ptr));
    GCRagdollProp value(m_ptr);
    return value;
}
void GCRagdollPropAttached::SetParent(GCRagdollProp value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CRagdollPropAttached::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCRagdollPropAttached(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCRagdollPropAttached>("CRagdollPropAttached")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("BoneIndexAttached", &GCRagdollPropAttached::GetBoneIndexAttached, &GCRagdollPropAttached::SetBoneIndexAttached)
        .addProperty("RagdollAttachedObjectIndex", &GCRagdollPropAttached::GetRagdollAttachedObjectIndex, &GCRagdollPropAttached::SetRagdollAttachedObjectIndex)
        .addProperty("AttachmentPointBoneSpace", &GCRagdollPropAttached::GetAttachmentPointBoneSpace, &GCRagdollPropAttached::SetAttachmentPointBoneSpace)
        .addProperty("AttachmentPointRagdollSpace", &GCRagdollPropAttached::GetAttachmentPointRagdollSpace, &GCRagdollPropAttached::SetAttachmentPointRagdollSpace)
        .addProperty("ShouldDetach", &GCRagdollPropAttached::GetShouldDetach, &GCRagdollPropAttached::SetShouldDetach)
        .addProperty("ShouldDeleteAttachedActivationRecord", &GCRagdollPropAttached::GetShouldDeleteAttachedActivationRecord, &GCRagdollPropAttached::SetShouldDeleteAttachedActivationRecord)
        .addProperty("Parent", &GCRagdollPropAttached::GetParent, &GCRagdollPropAttached::SetParent)
        .addFunction("ToPtr", &GCRagdollPropAttached::ToPtr)
        .addFunction("IsValid", &GCRagdollPropAttached::IsValid)
        .endClass();
}
GHullFlags_t::GHullFlags_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GHullFlags_t::GHullFlags_t(void *ptr) {
    m_ptr = ptr;
}
bool GHullFlags_t::GetHull_Human() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: HullFlags_t->Hull_Human(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "HullFlags_t", "m_bHull_Human");
}
void GHullFlags_t::SetHull_Human(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: HullFlags_t->Hull_Human(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "HullFlags_t", "m_bHull_Human", true, value);
}
bool GHullFlags_t::GetHull_SmallCentered() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: HullFlags_t->Hull_SmallCentered(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "HullFlags_t", "m_bHull_SmallCentered");
}
void GHullFlags_t::SetHull_SmallCentered(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: HullFlags_t->Hull_SmallCentered(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "HullFlags_t", "m_bHull_SmallCentered", true, value);
}
bool GHullFlags_t::GetHull_WideHuman() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: HullFlags_t->Hull_WideHuman(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "HullFlags_t", "m_bHull_WideHuman");
}
void GHullFlags_t::SetHull_WideHuman(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: HullFlags_t->Hull_WideHuman(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "HullFlags_t", "m_bHull_WideHuman", true, value);
}
bool GHullFlags_t::GetHull_Tiny() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: HullFlags_t->Hull_Tiny(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "HullFlags_t", "m_bHull_Tiny");
}
void GHullFlags_t::SetHull_Tiny(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: HullFlags_t->Hull_Tiny(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "HullFlags_t", "m_bHull_Tiny", true, value);
}
bool GHullFlags_t::GetHull_Medium() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: HullFlags_t->Hull_Medium(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "HullFlags_t", "m_bHull_Medium");
}
void GHullFlags_t::SetHull_Medium(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: HullFlags_t->Hull_Medium(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "HullFlags_t", "m_bHull_Medium", true, value);
}
bool GHullFlags_t::GetHull_TinyCentered() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: HullFlags_t->Hull_TinyCentered(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "HullFlags_t", "m_bHull_TinyCentered");
}
void GHullFlags_t::SetHull_TinyCentered(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: HullFlags_t->Hull_TinyCentered(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "HullFlags_t", "m_bHull_TinyCentered", true, value);
}
bool GHullFlags_t::GetHull_Large() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: HullFlags_t->Hull_Large(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "HullFlags_t", "m_bHull_Large");
}
void GHullFlags_t::SetHull_Large(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: HullFlags_t->Hull_Large(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "HullFlags_t", "m_bHull_Large", true, value);
}
bool GHullFlags_t::GetHull_LargeCentered() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: HullFlags_t->Hull_LargeCentered(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "HullFlags_t", "m_bHull_LargeCentered");
}
void GHullFlags_t::SetHull_LargeCentered(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: HullFlags_t->Hull_LargeCentered(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "HullFlags_t", "m_bHull_LargeCentered", true, value);
}
bool GHullFlags_t::GetHull_MediumTall() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: HullFlags_t->Hull_MediumTall(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "HullFlags_t", "m_bHull_MediumTall");
}
void GHullFlags_t::SetHull_MediumTall(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: HullFlags_t->Hull_MediumTall(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "HullFlags_t", "m_bHull_MediumTall", true, value);
}
bool GHullFlags_t::GetHull_Small() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: HullFlags_t->Hull_Small(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "HullFlags_t", "m_bHull_Small");
}
void GHullFlags_t::SetHull_Small(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: HullFlags_t->Hull_Small(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "HullFlags_t", "m_bHull_Small", true, value);
}
void* GHullFlags_t::GetPtr() {
    return m_ptr;
}
std::string GHullFlags_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GHullFlags_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassHullFlags_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GHullFlags_t>("HullFlags_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Hull_Human", &GHullFlags_t::GetHull_Human, &GHullFlags_t::SetHull_Human)
        .addProperty("Hull_SmallCentered", &GHullFlags_t::GetHull_SmallCentered, &GHullFlags_t::SetHull_SmallCentered)
        .addProperty("Hull_WideHuman", &GHullFlags_t::GetHull_WideHuman, &GHullFlags_t::SetHull_WideHuman)
        .addProperty("Hull_Tiny", &GHullFlags_t::GetHull_Tiny, &GHullFlags_t::SetHull_Tiny)
        .addProperty("Hull_Medium", &GHullFlags_t::GetHull_Medium, &GHullFlags_t::SetHull_Medium)
        .addProperty("Hull_TinyCentered", &GHullFlags_t::GetHull_TinyCentered, &GHullFlags_t::SetHull_TinyCentered)
        .addProperty("Hull_Large", &GHullFlags_t::GetHull_Large, &GHullFlags_t::SetHull_Large)
        .addProperty("Hull_LargeCentered", &GHullFlags_t::GetHull_LargeCentered, &GHullFlags_t::SetHull_LargeCentered)
        .addProperty("Hull_MediumTall", &GHullFlags_t::GetHull_MediumTall, &GHullFlags_t::SetHull_MediumTall)
        .addProperty("Hull_Small", &GHullFlags_t::GetHull_Small, &GHullFlags_t::SetHull_Small)
        .addFunction("ToPtr", &GHullFlags_t::ToPtr)
        .addFunction("IsValid", &GHullFlags_t::IsValid)
        .endClass();
}
GCBodyComponentBaseAnimGraph::GCBodyComponentBaseAnimGraph(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCBodyComponentBaseAnimGraph::GCBodyComponentBaseAnimGraph(void *ptr) {
    m_ptr = ptr;
}
GCBaseAnimGraphController GCBodyComponentBaseAnimGraph::GetAnimationController() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBodyComponentBaseAnimGraph->AnimationController(ptr=%p)", m_ptr));
    GCBaseAnimGraphController value(GetSchemaPtr(m_ptr, "CBodyComponentBaseAnimGraph", "m_animationController"));
    return value;
}
void GCBodyComponentBaseAnimGraph::SetAnimationController(GCBaseAnimGraphController value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBodyComponentBaseAnimGraph->AnimationController(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'AnimationController' is not possible.\n");
}
void* GCBodyComponentBaseAnimGraph::GetPtr() {
    return m_ptr;
}
std::string GCBodyComponentBaseAnimGraph::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCBodyComponentBaseAnimGraph::IsValid() {
    return (m_ptr != nullptr);
}
GCBodyComponentSkeletonInstance GCBodyComponentBaseAnimGraph::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CBodyComponentBaseAnimGraph::GetParent(ptr=%p)", m_ptr));
    GCBodyComponentSkeletonInstance value(m_ptr);
    return value;
}
void GCBodyComponentBaseAnimGraph::SetParent(GCBodyComponentSkeletonInstance value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CBodyComponentBaseAnimGraph::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCBodyComponentBaseAnimGraph(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCBodyComponentBaseAnimGraph>("CBodyComponentBaseAnimGraph")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("AnimationController", &GCBodyComponentBaseAnimGraph::GetAnimationController, &GCBodyComponentBaseAnimGraph::SetAnimationController)
        .addProperty("Parent", &GCBodyComponentBaseAnimGraph::GetParent, &GCBodyComponentBaseAnimGraph::SetParent)
        .addFunction("ToPtr", &GCBodyComponentBaseAnimGraph::ToPtr)
        .addFunction("IsValid", &GCBodyComponentBaseAnimGraph::IsValid)
        .endClass();
}
GGameAmmoTypeInfo_t::GGameAmmoTypeInfo_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GGameAmmoTypeInfo_t::GGameAmmoTypeInfo_t(void *ptr) {
    m_ptr = ptr;
}
int32_t GGameAmmoTypeInfo_t::GetBuySize() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: GameAmmoTypeInfo_t->BuySize(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "GameAmmoTypeInfo_t", "m_nBuySize");
}
void GGameAmmoTypeInfo_t::SetBuySize(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: GameAmmoTypeInfo_t->BuySize(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "GameAmmoTypeInfo_t", "m_nBuySize", true, value);
}
int32_t GGameAmmoTypeInfo_t::GetCost() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: GameAmmoTypeInfo_t->Cost(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "GameAmmoTypeInfo_t", "m_nCost");
}
void GGameAmmoTypeInfo_t::SetCost(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: GameAmmoTypeInfo_t->Cost(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "GameAmmoTypeInfo_t", "m_nCost", true, value);
}
void* GGameAmmoTypeInfo_t::GetPtr() {
    return m_ptr;
}
std::string GGameAmmoTypeInfo_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GGameAmmoTypeInfo_t::IsValid() {
    return (m_ptr != nullptr);
}
GAmmoTypeInfo_t GGameAmmoTypeInfo_t::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("GameAmmoTypeInfo_t::GetParent(ptr=%p)", m_ptr));
    GAmmoTypeInfo_t value(m_ptr);
    return value;
}
void GGameAmmoTypeInfo_t::SetParent(GAmmoTypeInfo_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("GameAmmoTypeInfo_t::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassGameAmmoTypeInfo_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GGameAmmoTypeInfo_t>("GameAmmoTypeInfo_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("BuySize", &GGameAmmoTypeInfo_t::GetBuySize, &GGameAmmoTypeInfo_t::SetBuySize)
        .addProperty("Cost", &GGameAmmoTypeInfo_t::GetCost, &GGameAmmoTypeInfo_t::SetCost)
        .addProperty("Parent", &GGameAmmoTypeInfo_t::GetParent, &GGameAmmoTypeInfo_t::SetParent)
        .addFunction("ToPtr", &GGameAmmoTypeInfo_t::ToPtr)
        .addFunction("IsValid", &GGameAmmoTypeInfo_t::IsValid)
        .endClass();
}
GCPhysMotor::GCPhysMotor(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPhysMotor::GCPhysMotor(void *ptr) {
    m_ptr = ptr;
}
std::string GCPhysMotor::GetNameAttach() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysMotor->NameAttach(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CPhysMotor", "m_nameAttach").String();
}
void GCPhysMotor::SetNameAttach(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysMotor->NameAttach(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysMotor", "m_nameAttach", false, CUtlSymbolLarge(value.c_str()));
}
GCBaseEntity GCPhysMotor::GetAttachedObject() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysMotor->AttachedObject(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CPhysMotor", "m_hAttachedObject").Get()));
    return value;
}
void GCPhysMotor::SetAttachedObject(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysMotor->AttachedObject(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'AttachedObject' is not possible.\n");
}
float GCPhysMotor::GetSpinUp() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysMotor->SpinUp(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPhysMotor", "m_spinUp");
}
void GCPhysMotor::SetSpinUp(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysMotor->SpinUp(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysMotor", "m_spinUp", false, value);
}
float GCPhysMotor::GetAdditionalAcceleration() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysMotor->AdditionalAcceleration(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPhysMotor", "m_additionalAcceleration");
}
void GCPhysMotor::SetAdditionalAcceleration(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysMotor->AdditionalAcceleration(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysMotor", "m_additionalAcceleration", false, value);
}
float GCPhysMotor::GetAngularAcceleration() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysMotor->AngularAcceleration(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPhysMotor", "m_angularAcceleration");
}
void GCPhysMotor::SetAngularAcceleration(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysMotor->AngularAcceleration(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysMotor", "m_angularAcceleration", false, value);
}
float GCPhysMotor::GetLastTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysMotor->LastTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPhysMotor", "m_lastTime");
}
void GCPhysMotor::SetLastTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysMotor->LastTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysMotor", "m_lastTime", false, value);
}
GCMotorController GCPhysMotor::GetMotor() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysMotor->Motor(ptr=%p)", m_ptr));
    GCMotorController value(GetSchemaPtr(m_ptr, "CPhysMotor", "m_motor"));
    return value;
}
void GCPhysMotor::SetMotor(GCMotorController value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysMotor->Motor(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Motor' is not possible.\n");
}
void* GCPhysMotor::GetPtr() {
    return m_ptr;
}
std::string GCPhysMotor::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPhysMotor::IsValid() {
    return (m_ptr != nullptr);
}
GCLogicalEntity GCPhysMotor::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPhysMotor::GetParent(ptr=%p)", m_ptr));
    GCLogicalEntity value(m_ptr);
    return value;
}
void GCPhysMotor::SetParent(GCLogicalEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPhysMotor::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCPhysMotor(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPhysMotor>("CPhysMotor")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("NameAttach", &GCPhysMotor::GetNameAttach, &GCPhysMotor::SetNameAttach)
        .addProperty("AttachedObject", &GCPhysMotor::GetAttachedObject, &GCPhysMotor::SetAttachedObject)
        .addProperty("SpinUp", &GCPhysMotor::GetSpinUp, &GCPhysMotor::SetSpinUp)
        .addProperty("AdditionalAcceleration", &GCPhysMotor::GetAdditionalAcceleration, &GCPhysMotor::SetAdditionalAcceleration)
        .addProperty("AngularAcceleration", &GCPhysMotor::GetAngularAcceleration, &GCPhysMotor::SetAngularAcceleration)
        .addProperty("LastTime", &GCPhysMotor::GetLastTime, &GCPhysMotor::SetLastTime)
        .addProperty("Motor", &GCPhysMotor::GetMotor, &GCPhysMotor::SetMotor)
        .addProperty("Parent", &GCPhysMotor::GetParent, &GCPhysMotor::SetParent)
        .addFunction("ToPtr", &GCPhysMotor::ToPtr)
        .addFunction("IsValid", &GCPhysMotor::IsValid)
        .endClass();
}
GCSimTimer::GCSimTimer(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCSimTimer::GCSimTimer(void *ptr) {
    m_ptr = ptr;
}
float GCSimTimer::GetInterval() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSimTimer->Interval(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CSimTimer", "m_interval");
}
void GCSimTimer::SetInterval(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSimTimer->Interval(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSimTimer", "m_interval", false, value);
}
void* GCSimTimer::GetPtr() {
    return m_ptr;
}
std::string GCSimTimer::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCSimTimer::IsValid() {
    return (m_ptr != nullptr);
}
GCSimpleSimTimer GCSimTimer::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSimTimer::GetParent(ptr=%p)", m_ptr));
    GCSimpleSimTimer value(m_ptr);
    return value;
}
void GCSimTimer::SetParent(GCSimpleSimTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSimTimer::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCSimTimer(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCSimTimer>("CSimTimer")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Interval", &GCSimTimer::GetInterval, &GCSimTimer::SetInterval)
        .addProperty("Parent", &GCSimTimer::GetParent, &GCSimTimer::SetParent)
        .addFunction("ToPtr", &GCSimTimer::ToPtr)
        .addFunction("IsValid", &GCSimTimer::IsValid)
        .endClass();
}
GCBaseIssue::GCBaseIssue(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCBaseIssue::GCBaseIssue(void *ptr) {
    m_ptr = ptr;
}
std::string GCBaseIssue::GetTypeString() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseIssue->TypeString(ptr=%p)", m_ptr));
    return GetSchemaValuePtr<char>(m_ptr, "CBaseIssue", "m_szTypeString");
}
void GCBaseIssue::SetTypeString(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseIssue->TypeString(ptr=%p)", m_ptr));
    WriteSchemaPtrValue(m_ptr, "CBaseIssue", "m_szTypeString", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 64);
}
std::string GCBaseIssue::GetDetailsString() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseIssue->DetailsString(ptr=%p)", m_ptr));
    return GetSchemaValuePtr<char>(m_ptr, "CBaseIssue", "m_szDetailsString");
}
void GCBaseIssue::SetDetailsString(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseIssue->DetailsString(ptr=%p)", m_ptr));
    WriteSchemaPtrValue(m_ptr, "CBaseIssue", "m_szDetailsString", false, reinterpret_cast<byte*>(const_cast<char*>(value.c_str())), 260);
}
int32_t GCBaseIssue::GetNumYesVotes() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseIssue->NumYesVotes(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CBaseIssue", "m_iNumYesVotes");
}
void GCBaseIssue::SetNumYesVotes(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseIssue->NumYesVotes(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseIssue", "m_iNumYesVotes", false, value);
}
int32_t GCBaseIssue::GetNumNoVotes() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseIssue->NumNoVotes(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CBaseIssue", "m_iNumNoVotes");
}
void GCBaseIssue::SetNumNoVotes(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseIssue->NumNoVotes(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseIssue", "m_iNumNoVotes", false, value);
}
int32_t GCBaseIssue::GetNumPotentialVotes() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBaseIssue->NumPotentialVotes(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CBaseIssue", "m_iNumPotentialVotes");
}
void GCBaseIssue::SetNumPotentialVotes(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBaseIssue->NumPotentialVotes(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBaseIssue", "m_iNumPotentialVotes", false, value);
}
void* GCBaseIssue::GetPtr() {
    return m_ptr;
}
std::string GCBaseIssue::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCBaseIssue::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCBaseIssue(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCBaseIssue>("CBaseIssue")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("TypeString", &GCBaseIssue::GetTypeString, &GCBaseIssue::SetTypeString)
        .addProperty("DetailsString", &GCBaseIssue::GetDetailsString, &GCBaseIssue::SetDetailsString)
        .addProperty("NumYesVotes", &GCBaseIssue::GetNumYesVotes, &GCBaseIssue::SetNumYesVotes)
        .addProperty("NumNoVotes", &GCBaseIssue::GetNumNoVotes, &GCBaseIssue::SetNumNoVotes)
        .addProperty("NumPotentialVotes", &GCBaseIssue::GetNumPotentialVotes, &GCBaseIssue::SetNumPotentialVotes)
        .addFunction("ToPtr", &GCBaseIssue::ToPtr)
        .addFunction("IsValid", &GCBaseIssue::IsValid)
        .endClass();
}
GCTakeDamageInfo::GCTakeDamageInfo(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCTakeDamageInfo::GCTakeDamageInfo(void *ptr) {
    m_ptr = ptr;
}
Vector GCTakeDamageInfo::GetDamageForce() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTakeDamageInfo->DamageForce(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CTakeDamageInfo", "m_vecDamageForce");
}
void GCTakeDamageInfo::SetDamageForce(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTakeDamageInfo->DamageForce(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTakeDamageInfo", "m_vecDamageForce", false, value);
}
Vector GCTakeDamageInfo::GetDamagePosition() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTakeDamageInfo->DamagePosition(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CTakeDamageInfo", "m_vecDamagePosition");
}
void GCTakeDamageInfo::SetDamagePosition(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTakeDamageInfo->DamagePosition(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTakeDamageInfo", "m_vecDamagePosition", false, value);
}
Vector GCTakeDamageInfo::GetReportedPosition() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTakeDamageInfo->ReportedPosition(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CTakeDamageInfo", "m_vecReportedPosition");
}
void GCTakeDamageInfo::SetReportedPosition(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTakeDamageInfo->ReportedPosition(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTakeDamageInfo", "m_vecReportedPosition", false, value);
}
Vector GCTakeDamageInfo::GetDamageDirection() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTakeDamageInfo->DamageDirection(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CTakeDamageInfo", "m_vecDamageDirection");
}
void GCTakeDamageInfo::SetDamageDirection(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTakeDamageInfo->DamageDirection(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTakeDamageInfo", "m_vecDamageDirection", false, value);
}
GCBaseEntity GCTakeDamageInfo::GetInflictor() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTakeDamageInfo->Inflictor(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CTakeDamageInfo", "m_hInflictor").Get()));
    return value;
}
void GCTakeDamageInfo::SetInflictor(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTakeDamageInfo->Inflictor(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Inflictor' is not possible.\n");
}
GCBaseEntity GCTakeDamageInfo::GetAttacker() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTakeDamageInfo->Attacker(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CTakeDamageInfo", "m_hAttacker").Get()));
    return value;
}
void GCTakeDamageInfo::SetAttacker(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTakeDamageInfo->Attacker(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Attacker' is not possible.\n");
}
GCBaseEntity GCTakeDamageInfo::GetAbility() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTakeDamageInfo->Ability(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CTakeDamageInfo", "m_hAbility").Get()));
    return value;
}
void GCTakeDamageInfo::SetAbility(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTakeDamageInfo->Ability(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Ability' is not possible.\n");
}
float GCTakeDamageInfo::GetDamage() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTakeDamageInfo->Damage(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CTakeDamageInfo", "m_flDamage");
}
void GCTakeDamageInfo::SetDamage(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTakeDamageInfo->Damage(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTakeDamageInfo", "m_flDamage", false, value);
}
float GCTakeDamageInfo::GetTotalledDamage() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTakeDamageInfo->TotalledDamage(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CTakeDamageInfo", "m_flTotalledDamage");
}
void GCTakeDamageInfo::SetTotalledDamage(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTakeDamageInfo->TotalledDamage(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTakeDamageInfo", "m_flTotalledDamage", false, value);
}
int32_t GCTakeDamageInfo::GetBitsDamageType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTakeDamageInfo->BitsDamageType(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CTakeDamageInfo", "m_bitsDamageType");
}
void GCTakeDamageInfo::SetBitsDamageType(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTakeDamageInfo->BitsDamageType(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTakeDamageInfo", "m_bitsDamageType", false, value);
}
int32_t GCTakeDamageInfo::GetDamageCustom() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTakeDamageInfo->DamageCustom(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CTakeDamageInfo", "m_iDamageCustom");
}
void GCTakeDamageInfo::SetDamageCustom(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTakeDamageInfo->DamageCustom(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTakeDamageInfo", "m_iDamageCustom", false, value);
}
uint32_t GCTakeDamageInfo::GetAmmoType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTakeDamageInfo->AmmoType(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CTakeDamageInfo", "m_iAmmoType");
}
void GCTakeDamageInfo::SetAmmoType(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTakeDamageInfo->AmmoType(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTakeDamageInfo", "m_iAmmoType", false, value);
}
float GCTakeDamageInfo::GetOriginalDamage() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTakeDamageInfo->OriginalDamage(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CTakeDamageInfo", "m_flOriginalDamage");
}
void GCTakeDamageInfo::SetOriginalDamage(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTakeDamageInfo->OriginalDamage(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTakeDamageInfo", "m_flOriginalDamage", false, value);
}
bool GCTakeDamageInfo::GetShouldBleed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTakeDamageInfo->ShouldBleed(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CTakeDamageInfo", "m_bShouldBleed");
}
void GCTakeDamageInfo::SetShouldBleed(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTakeDamageInfo->ShouldBleed(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTakeDamageInfo", "m_bShouldBleed", false, value);
}
bool GCTakeDamageInfo::GetShouldSpark() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTakeDamageInfo->ShouldSpark(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CTakeDamageInfo", "m_bShouldSpark");
}
void GCTakeDamageInfo::SetShouldSpark(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTakeDamageInfo->ShouldSpark(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTakeDamageInfo", "m_bShouldSpark", false, value);
}
uint64_t GCTakeDamageInfo::GetDamageFlags() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTakeDamageInfo->DamageFlags(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CTakeDamageInfo", "m_nDamageFlags");
}
void GCTakeDamageInfo::SetDamageFlags(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTakeDamageInfo->DamageFlags(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTakeDamageInfo", "m_nDamageFlags", false, value);
}
int32_t GCTakeDamageInfo::GetNumObjectsPenetrated() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTakeDamageInfo->NumObjectsPenetrated(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CTakeDamageInfo", "m_nNumObjectsPenetrated");
}
void GCTakeDamageInfo::SetNumObjectsPenetrated(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTakeDamageInfo->NumObjectsPenetrated(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTakeDamageInfo", "m_nNumObjectsPenetrated", false, value);
}
bool GCTakeDamageInfo::GetInTakeDamageFlow() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTakeDamageInfo->InTakeDamageFlow(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CTakeDamageInfo", "m_bInTakeDamageFlow");
}
void GCTakeDamageInfo::SetInTakeDamageFlow(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTakeDamageInfo->InTakeDamageFlow(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CTakeDamageInfo", "m_bInTakeDamageFlow", false, value);
}
void* GCTakeDamageInfo::GetPtr() {
    return m_ptr;
}
std::string GCTakeDamageInfo::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCTakeDamageInfo::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCTakeDamageInfo(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCTakeDamageInfo>("CTakeDamageInfo")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("DamageForce", &GCTakeDamageInfo::GetDamageForce, &GCTakeDamageInfo::SetDamageForce)
        .addProperty("DamagePosition", &GCTakeDamageInfo::GetDamagePosition, &GCTakeDamageInfo::SetDamagePosition)
        .addProperty("ReportedPosition", &GCTakeDamageInfo::GetReportedPosition, &GCTakeDamageInfo::SetReportedPosition)
        .addProperty("DamageDirection", &GCTakeDamageInfo::GetDamageDirection, &GCTakeDamageInfo::SetDamageDirection)
        .addProperty("Inflictor", &GCTakeDamageInfo::GetInflictor, &GCTakeDamageInfo::SetInflictor)
        .addProperty("Attacker", &GCTakeDamageInfo::GetAttacker, &GCTakeDamageInfo::SetAttacker)
        .addProperty("Ability", &GCTakeDamageInfo::GetAbility, &GCTakeDamageInfo::SetAbility)
        .addProperty("Damage", &GCTakeDamageInfo::GetDamage, &GCTakeDamageInfo::SetDamage)
        .addProperty("TotalledDamage", &GCTakeDamageInfo::GetTotalledDamage, &GCTakeDamageInfo::SetTotalledDamage)
        .addProperty("BitsDamageType", &GCTakeDamageInfo::GetBitsDamageType, &GCTakeDamageInfo::SetBitsDamageType)
        .addProperty("DamageCustom", &GCTakeDamageInfo::GetDamageCustom, &GCTakeDamageInfo::SetDamageCustom)
        .addProperty("AmmoType", &GCTakeDamageInfo::GetAmmoType, &GCTakeDamageInfo::SetAmmoType)
        .addProperty("OriginalDamage", &GCTakeDamageInfo::GetOriginalDamage, &GCTakeDamageInfo::SetOriginalDamage)
        .addProperty("ShouldBleed", &GCTakeDamageInfo::GetShouldBleed, &GCTakeDamageInfo::SetShouldBleed)
        .addProperty("ShouldSpark", &GCTakeDamageInfo::GetShouldSpark, &GCTakeDamageInfo::SetShouldSpark)
        .addProperty("DamageFlags", &GCTakeDamageInfo::GetDamageFlags, &GCTakeDamageInfo::SetDamageFlags)
        .addProperty("NumObjectsPenetrated", &GCTakeDamageInfo::GetNumObjectsPenetrated, &GCTakeDamageInfo::SetNumObjectsPenetrated)
        .addProperty("InTakeDamageFlow", &GCTakeDamageInfo::GetInTakeDamageFlow, &GCTakeDamageInfo::SetInTakeDamageFlow)
        .addFunction("ToPtr", &GCTakeDamageInfo::ToPtr)
        .addFunction("IsValid", &GCTakeDamageInfo::IsValid)
        .endClass();
}
GConceptHistory_t::GConceptHistory_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GConceptHistory_t::GConceptHistory_t(void *ptr) {
    m_ptr = ptr;
}
float GConceptHistory_t::GetTimeSpoken() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ConceptHistory_t->TimeSpoken(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "ConceptHistory_t", "timeSpoken");
}
void GConceptHistory_t::SetTimeSpoken(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ConceptHistory_t->TimeSpoken(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "ConceptHistory_t", "timeSpoken", true, value);
}
void* GConceptHistory_t::GetPtr() {
    return m_ptr;
}
std::string GConceptHistory_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GConceptHistory_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassConceptHistory_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GConceptHistory_t>("ConceptHistory_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("TimeSpoken", &GConceptHistory_t::GetTimeSpoken, &GConceptHistory_t::SetTimeSpoken)
        .addFunction("ToPtr", &GConceptHistory_t::ToPtr)
        .addFunction("IsValid", &GConceptHistory_t::IsValid)
        .endClass();
}
GCPhysTorque::GCPhysTorque(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPhysTorque::GCPhysTorque(void *ptr) {
    m_ptr = ptr;
}
Vector GCPhysTorque::GetAxis() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysTorque->Axis(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CPhysTorque", "m_axis");
}
void GCPhysTorque::SetAxis(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysTorque->Axis(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysTorque", "m_axis", false, value);
}
void* GCPhysTorque::GetPtr() {
    return m_ptr;
}
std::string GCPhysTorque::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPhysTorque::IsValid() {
    return (m_ptr != nullptr);
}
GCPhysForce GCPhysTorque::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPhysTorque::GetParent(ptr=%p)", m_ptr));
    GCPhysForce value(m_ptr);
    return value;
}
void GCPhysTorque::SetParent(GCPhysForce value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPhysTorque::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCPhysTorque(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPhysTorque>("CPhysTorque")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Axis", &GCPhysTorque::GetAxis, &GCPhysTorque::SetAxis)
        .addProperty("Parent", &GCPhysTorque::GetParent, &GCPhysTorque::SetParent)
        .addFunction("ToPtr", &GCPhysTorque::ToPtr)
        .addFunction("IsValid", &GCPhysTorque::IsValid)
        .endClass();
}
GSummaryTakeDamageInfo_t::GSummaryTakeDamageInfo_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GSummaryTakeDamageInfo_t::GSummaryTakeDamageInfo_t(void *ptr) {
    m_ptr = ptr;
}
int32_t GSummaryTakeDamageInfo_t::GetSummarisedCount() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: SummaryTakeDamageInfo_t->SummarisedCount(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "SummaryTakeDamageInfo_t", "nSummarisedCount");
}
void GSummaryTakeDamageInfo_t::SetSummarisedCount(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: SummaryTakeDamageInfo_t->SummarisedCount(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "SummaryTakeDamageInfo_t", "nSummarisedCount", true, value);
}
GCTakeDamageInfo GSummaryTakeDamageInfo_t::GetInfo() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: SummaryTakeDamageInfo_t->Info(ptr=%p)", m_ptr));
    GCTakeDamageInfo value(GetSchemaPtr(m_ptr, "SummaryTakeDamageInfo_t", "info"));
    return value;
}
void GSummaryTakeDamageInfo_t::SetInfo(GCTakeDamageInfo value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: SummaryTakeDamageInfo_t->Info(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Info' is not possible.\n");
}
GCTakeDamageResult GSummaryTakeDamageInfo_t::GetResult() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: SummaryTakeDamageInfo_t->Result(ptr=%p)", m_ptr));
    GCTakeDamageResult value(GetSchemaPtr(m_ptr, "SummaryTakeDamageInfo_t", "result"));
    return value;
}
void GSummaryTakeDamageInfo_t::SetResult(GCTakeDamageResult value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: SummaryTakeDamageInfo_t->Result(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Result' is not possible.\n");
}
GCBaseEntity GSummaryTakeDamageInfo_t::GetTarget() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: SummaryTakeDamageInfo_t->Target(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "SummaryTakeDamageInfo_t", "hTarget").Get()));
    return value;
}
void GSummaryTakeDamageInfo_t::SetTarget(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: SummaryTakeDamageInfo_t->Target(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Target' is not possible.\n");
}
void* GSummaryTakeDamageInfo_t::GetPtr() {
    return m_ptr;
}
std::string GSummaryTakeDamageInfo_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GSummaryTakeDamageInfo_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassSummaryTakeDamageInfo_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GSummaryTakeDamageInfo_t>("SummaryTakeDamageInfo_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("SummarisedCount", &GSummaryTakeDamageInfo_t::GetSummarisedCount, &GSummaryTakeDamageInfo_t::SetSummarisedCount)
        .addProperty("Info", &GSummaryTakeDamageInfo_t::GetInfo, &GSummaryTakeDamageInfo_t::SetInfo)
        .addProperty("Result", &GSummaryTakeDamageInfo_t::GetResult, &GSummaryTakeDamageInfo_t::SetResult)
        .addProperty("Target", &GSummaryTakeDamageInfo_t::GetTarget, &GSummaryTakeDamageInfo_t::SetTarget)
        .addFunction("ToPtr", &GSummaryTakeDamageInfo_t::ToPtr)
        .addFunction("IsValid", &GSummaryTakeDamageInfo_t::IsValid)
        .endClass();
}
GCRandSimTimer::GCRandSimTimer(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCRandSimTimer::GCRandSimTimer(void *ptr) {
    m_ptr = ptr;
}
float GCRandSimTimer::GetMinInterval() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CRandSimTimer->MinInterval(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CRandSimTimer", "m_minInterval");
}
void GCRandSimTimer::SetMinInterval(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CRandSimTimer->MinInterval(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CRandSimTimer", "m_minInterval", false, value);
}
float GCRandSimTimer::GetMaxInterval() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CRandSimTimer->MaxInterval(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CRandSimTimer", "m_maxInterval");
}
void GCRandSimTimer::SetMaxInterval(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CRandSimTimer->MaxInterval(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CRandSimTimer", "m_maxInterval", false, value);
}
void* GCRandSimTimer::GetPtr() {
    return m_ptr;
}
std::string GCRandSimTimer::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCRandSimTimer::IsValid() {
    return (m_ptr != nullptr);
}
GCSimpleSimTimer GCRandSimTimer::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CRandSimTimer::GetParent(ptr=%p)", m_ptr));
    GCSimpleSimTimer value(m_ptr);
    return value;
}
void GCRandSimTimer::SetParent(GCSimpleSimTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CRandSimTimer::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCRandSimTimer(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCRandSimTimer>("CRandSimTimer")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("MinInterval", &GCRandSimTimer::GetMinInterval, &GCRandSimTimer::SetMinInterval)
        .addProperty("MaxInterval", &GCRandSimTimer::GetMaxInterval, &GCRandSimTimer::SetMaxInterval)
        .addProperty("Parent", &GCRandSimTimer::GetParent, &GCRandSimTimer::SetParent)
        .addFunction("ToPtr", &GCRandSimTimer::ToPtr)
        .addFunction("IsValid", &GCRandSimTimer::IsValid)
        .endClass();
}
GCBtNodeComposite::GCBtNodeComposite(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCBtNodeComposite::GCBtNodeComposite(void *ptr) {
    m_ptr = ptr;
}
void* GCBtNodeComposite::GetPtr() {
    return m_ptr;
}
std::string GCBtNodeComposite::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCBtNodeComposite::IsValid() {
    return (m_ptr != nullptr);
}
GCBtNode GCBtNodeComposite::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CBtNodeComposite::GetParent(ptr=%p)", m_ptr));
    GCBtNode value(m_ptr);
    return value;
}
void GCBtNodeComposite::SetParent(GCBtNode value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CBtNodeComposite::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCBtNodeComposite(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCBtNodeComposite>("CBtNodeComposite")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCBtNodeComposite::GetParent, &GCBtNodeComposite::SetParent)
        .addFunction("ToPtr", &GCBtNodeComposite::ToPtr)
        .addFunction("IsValid", &GCBtNodeComposite::IsValid)
        .endClass();
}
GCFireCrackerBlast::GCFireCrackerBlast(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCFireCrackerBlast::GCFireCrackerBlast(void *ptr) {
    m_ptr = ptr;
}
void* GCFireCrackerBlast::GetPtr() {
    return m_ptr;
}
std::string GCFireCrackerBlast::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCFireCrackerBlast::IsValid() {
    return (m_ptr != nullptr);
}
GCInferno GCFireCrackerBlast::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFireCrackerBlast::GetParent(ptr=%p)", m_ptr));
    GCInferno value(m_ptr);
    return value;
}
void GCFireCrackerBlast::SetParent(GCInferno value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFireCrackerBlast::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCFireCrackerBlast(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCFireCrackerBlast>("CFireCrackerBlast")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCFireCrackerBlast::GetParent, &GCFireCrackerBlast::SetParent)
        .addFunction("ToPtr", &GCFireCrackerBlast::ToPtr)
        .addFunction("IsValid", &GCFireCrackerBlast::IsValid)
        .endClass();
}
Gsndopvarlatchdata_t::Gsndopvarlatchdata_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
Gsndopvarlatchdata_t::Gsndopvarlatchdata_t(void *ptr) {
    m_ptr = ptr;
}
std::string Gsndopvarlatchdata_t::GetStack() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: sndopvarlatchdata_t->Stack(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "sndopvarlatchdata_t", "m_iszStack").String();
}
void Gsndopvarlatchdata_t::SetStack(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: sndopvarlatchdata_t->Stack(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "sndopvarlatchdata_t", "m_iszStack", true, CUtlSymbolLarge(value.c_str()));
}
std::string Gsndopvarlatchdata_t::GetOperator() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: sndopvarlatchdata_t->Operator(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "sndopvarlatchdata_t", "m_iszOperator").String();
}
void Gsndopvarlatchdata_t::SetOperator(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: sndopvarlatchdata_t->Operator(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "sndopvarlatchdata_t", "m_iszOperator", true, CUtlSymbolLarge(value.c_str()));
}
std::string Gsndopvarlatchdata_t::GetOpvar() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: sndopvarlatchdata_t->Opvar(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "sndopvarlatchdata_t", "m_iszOpvar").String();
}
void Gsndopvarlatchdata_t::SetOpvar(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: sndopvarlatchdata_t->Opvar(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "sndopvarlatchdata_t", "m_iszOpvar", true, CUtlSymbolLarge(value.c_str()));
}
float Gsndopvarlatchdata_t::GetVal() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: sndopvarlatchdata_t->Val(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "sndopvarlatchdata_t", "m_flVal");
}
void Gsndopvarlatchdata_t::SetVal(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: sndopvarlatchdata_t->Val(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "sndopvarlatchdata_t", "m_flVal", true, value);
}
Vector Gsndopvarlatchdata_t::GetPos() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: sndopvarlatchdata_t->Pos(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "sndopvarlatchdata_t", "m_vPos");
}
void Gsndopvarlatchdata_t::SetPos(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: sndopvarlatchdata_t->Pos(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "sndopvarlatchdata_t", "m_vPos", true, value);
}
void* Gsndopvarlatchdata_t::GetPtr() {
    return m_ptr;
}
std::string Gsndopvarlatchdata_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool Gsndopvarlatchdata_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClasssndopvarlatchdata_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<Gsndopvarlatchdata_t>("sndopvarlatchdata_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Stack", &Gsndopvarlatchdata_t::GetStack, &Gsndopvarlatchdata_t::SetStack)
        .addProperty("Operator", &Gsndopvarlatchdata_t::GetOperator, &Gsndopvarlatchdata_t::SetOperator)
        .addProperty("Opvar", &Gsndopvarlatchdata_t::GetOpvar, &Gsndopvarlatchdata_t::SetOpvar)
        .addProperty("Val", &Gsndopvarlatchdata_t::GetVal, &Gsndopvarlatchdata_t::SetVal)
        .addProperty("Pos", &Gsndopvarlatchdata_t::GetPos, &Gsndopvarlatchdata_t::SetPos)
        .addFunction("ToPtr", &Gsndopvarlatchdata_t::ToPtr)
        .addFunction("IsValid", &Gsndopvarlatchdata_t::IsValid)
        .endClass();
}
GCCSGO_TeamSelectTerroristPosition::GCCSGO_TeamSelectTerroristPosition(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCCSGO_TeamSelectTerroristPosition::GCCSGO_TeamSelectTerroristPosition(void *ptr) {
    m_ptr = ptr;
}
void* GCCSGO_TeamSelectTerroristPosition::GetPtr() {
    return m_ptr;
}
std::string GCCSGO_TeamSelectTerroristPosition::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCCSGO_TeamSelectTerroristPosition::IsValid() {
    return (m_ptr != nullptr);
}
GCCSGO_TeamSelectCharacterPosition GCCSGO_TeamSelectTerroristPosition::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSGO_TeamSelectTerroristPosition::GetParent(ptr=%p)", m_ptr));
    GCCSGO_TeamSelectCharacterPosition value(m_ptr);
    return value;
}
void GCCSGO_TeamSelectTerroristPosition::SetParent(GCCSGO_TeamSelectCharacterPosition value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSGO_TeamSelectTerroristPosition::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCCSGO_TeamSelectTerroristPosition(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCCSGO_TeamSelectTerroristPosition>("CCSGO_TeamSelectTerroristPosition")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCCSGO_TeamSelectTerroristPosition::GetParent, &GCCSGO_TeamSelectTerroristPosition::SetParent)
        .addFunction("ToPtr", &GCCSGO_TeamSelectTerroristPosition::ToPtr)
        .addFunction("IsValid", &GCCSGO_TeamSelectTerroristPosition::IsValid)
        .endClass();
}
GCAI_ExpresserWithFollowup::GCAI_ExpresserWithFollowup(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCAI_ExpresserWithFollowup::GCAI_ExpresserWithFollowup(void *ptr) {
    m_ptr = ptr;
}
GResponseFollowup GCAI_ExpresserWithFollowup::GetPostponedFollowup() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAI_ExpresserWithFollowup->PostponedFollowup(ptr=%p)", m_ptr));
    GResponseFollowup value(*(void**)GetSchemaPtr(m_ptr, "CAI_ExpresserWithFollowup", "m_pPostponedFollowup"));
    return value;
}
void GCAI_ExpresserWithFollowup::SetPostponedFollowup(GResponseFollowup value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAI_ExpresserWithFollowup->PostponedFollowup(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CAI_ExpresserWithFollowup","m_pPostponedFollowup", false, (char*)value.GetPtr());
}
void* GCAI_ExpresserWithFollowup::GetPtr() {
    return m_ptr;
}
std::string GCAI_ExpresserWithFollowup::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCAI_ExpresserWithFollowup::IsValid() {
    return (m_ptr != nullptr);
}
GCAI_Expresser GCAI_ExpresserWithFollowup::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CAI_ExpresserWithFollowup::GetParent(ptr=%p)", m_ptr));
    GCAI_Expresser value(m_ptr);
    return value;
}
void GCAI_ExpresserWithFollowup::SetParent(GCAI_Expresser value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CAI_ExpresserWithFollowup::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCAI_ExpresserWithFollowup(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCAI_ExpresserWithFollowup>("CAI_ExpresserWithFollowup")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("PostponedFollowup", &GCAI_ExpresserWithFollowup::GetPostponedFollowup, &GCAI_ExpresserWithFollowup::SetPostponedFollowup)
        .addProperty("Parent", &GCAI_ExpresserWithFollowup::GetParent, &GCAI_ExpresserWithFollowup::SetParent)
        .addFunction("ToPtr", &GCAI_ExpresserWithFollowup::ToPtr)
        .addFunction("IsValid", &GCAI_ExpresserWithFollowup::IsValid)
        .endClass();
}
GCNavVolumeMarkupVolume::GCNavVolumeMarkupVolume(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCNavVolumeMarkupVolume::GCNavVolumeMarkupVolume(void *ptr) {
    m_ptr = ptr;
}
void* GCNavVolumeMarkupVolume::GetPtr() {
    return m_ptr;
}
std::string GCNavVolumeMarkupVolume::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCNavVolumeMarkupVolume::IsValid() {
    return (m_ptr != nullptr);
}
GCNavVolume GCNavVolumeMarkupVolume::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CNavVolumeMarkupVolume::GetParent(ptr=%p)", m_ptr));
    GCNavVolume value(m_ptr);
    return value;
}
void GCNavVolumeMarkupVolume::SetParent(GCNavVolume value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CNavVolumeMarkupVolume::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCNavVolumeMarkupVolume(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCNavVolumeMarkupVolume>("CNavVolumeMarkupVolume")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCNavVolumeMarkupVolume::GetParent, &GCNavVolumeMarkupVolume::SetParent)
        .addFunction("ToPtr", &GCNavVolumeMarkupVolume::ToPtr)
        .addFunction("IsValid", &GCNavVolumeMarkupVolume::IsValid)
        .endClass();
}
GQuestProgress::GQuestProgress(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GQuestProgress::GQuestProgress(void *ptr) {
    m_ptr = ptr;
}
void* GQuestProgress::GetPtr() {
    return m_ptr;
}
std::string GQuestProgress::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GQuestProgress::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassQuestProgress(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GQuestProgress>("QuestProgress")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addFunction("ToPtr", &GQuestProgress::ToPtr)
        .addFunction("IsValid", &GQuestProgress::IsValid)
        .endClass();
}
Glerpdata_t::Glerpdata_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
Glerpdata_t::Glerpdata_t(void *ptr) {
    m_ptr = ptr;
}
GCBaseEntity Glerpdata_t::GetEnt() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: lerpdata_t->Ent(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "lerpdata_t", "m_hEnt").Get()));
    return value;
}
void Glerpdata_t::SetEnt(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: lerpdata_t->Ent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Ent' is not possible.\n");
}
uint64_t Glerpdata_t::GetMoveType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: lerpdata_t->MoveType(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "lerpdata_t", "m_MoveType");
}
void Glerpdata_t::SetMoveType(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: lerpdata_t->MoveType(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "lerpdata_t", "m_MoveType", true, value);
}
float Glerpdata_t::GetStartTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: lerpdata_t->StartTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "lerpdata_t", "m_flStartTime");
}
void Glerpdata_t::SetStartTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: lerpdata_t->StartTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "lerpdata_t", "m_flStartTime", true, value);
}
Vector Glerpdata_t::GetStartOrigin() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: lerpdata_t->StartOrigin(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "lerpdata_t", "m_vecStartOrigin");
}
void Glerpdata_t::SetStartOrigin(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: lerpdata_t->StartOrigin(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "lerpdata_t", "m_vecStartOrigin", true, value);
}
GParticleIndex_t Glerpdata_t::GetFXIndex() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: lerpdata_t->FXIndex(ptr=%p)", m_ptr));
    GParticleIndex_t value(GetSchemaPtr(m_ptr, "lerpdata_t", "m_nFXIndex"));
    return value;
}
void Glerpdata_t::SetFXIndex(GParticleIndex_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: lerpdata_t->FXIndex(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'FXIndex' is not possible.\n");
}
void* Glerpdata_t::GetPtr() {
    return m_ptr;
}
std::string Glerpdata_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool Glerpdata_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClasslerpdata_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<Glerpdata_t>("lerpdata_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Ent", &Glerpdata_t::GetEnt, &Glerpdata_t::SetEnt)
        .addProperty("MoveType", &Glerpdata_t::GetMoveType, &Glerpdata_t::SetMoveType)
        .addProperty("StartTime", &Glerpdata_t::GetStartTime, &Glerpdata_t::SetStartTime)
        .addProperty("StartOrigin", &Glerpdata_t::GetStartOrigin, &Glerpdata_t::SetStartOrigin)
        .addProperty("FXIndex", &Glerpdata_t::GetFXIndex, &Glerpdata_t::SetFXIndex)
        .addFunction("ToPtr", &Glerpdata_t::ToPtr)
        .addFunction("IsValid", &Glerpdata_t::IsValid)
        .endClass();
}
GCMultiplayer_Expresser::GCMultiplayer_Expresser(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCMultiplayer_Expresser::GCMultiplayer_Expresser(void *ptr) {
    m_ptr = ptr;
}
bool GCMultiplayer_Expresser::GetAllowMultipleScenes() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMultiplayer_Expresser->AllowMultipleScenes(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CMultiplayer_Expresser", "m_bAllowMultipleScenes");
}
void GCMultiplayer_Expresser::SetAllowMultipleScenes(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMultiplayer_Expresser->AllowMultipleScenes(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMultiplayer_Expresser", "m_bAllowMultipleScenes", false, value);
}
void* GCMultiplayer_Expresser::GetPtr() {
    return m_ptr;
}
std::string GCMultiplayer_Expresser::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCMultiplayer_Expresser::IsValid() {
    return (m_ptr != nullptr);
}
GCAI_ExpresserWithFollowup GCMultiplayer_Expresser::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CMultiplayer_Expresser::GetParent(ptr=%p)", m_ptr));
    GCAI_ExpresserWithFollowup value(m_ptr);
    return value;
}
void GCMultiplayer_Expresser::SetParent(GCAI_ExpresserWithFollowup value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CMultiplayer_Expresser::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCMultiplayer_Expresser(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCMultiplayer_Expresser>("CMultiplayer_Expresser")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("AllowMultipleScenes", &GCMultiplayer_Expresser::GetAllowMultipleScenes, &GCMultiplayer_Expresser::SetAllowMultipleScenes)
        .addProperty("Parent", &GCMultiplayer_Expresser::GetParent, &GCMultiplayer_Expresser::SetParent)
        .addFunction("ToPtr", &GCMultiplayer_Expresser::ToPtr)
        .addFunction("IsValid", &GCMultiplayer_Expresser::IsValid)
        .endClass();
}
GCTakeDamageSummaryScopeGuard::GCTakeDamageSummaryScopeGuard(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCTakeDamageSummaryScopeGuard::GCTakeDamageSummaryScopeGuard(void *ptr) {
    m_ptr = ptr;
}
std::vector<GSummaryTakeDamageInfo_t*> GCTakeDamageSummaryScopeGuard::GetSummaries() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CTakeDamageSummaryScopeGuard->Summaries(ptr=%p)", m_ptr));
    CUtlVector<GSummaryTakeDamageInfo_t*>* vec = GetSchemaValue<CUtlVector<GSummaryTakeDamageInfo_t*>*>(m_ptr, "CTakeDamageSummaryScopeGuard", "m_vecSummaries"); std::vector<GSummaryTakeDamageInfo_t*> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCTakeDamageSummaryScopeGuard::SetSummaries(std::vector<GSummaryTakeDamageInfo_t*> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CTakeDamageSummaryScopeGuard->Summaries(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GSummaryTakeDamageInfo_t*>(m_ptr, "CTakeDamageSummaryScopeGuard", "m_vecSummaries", false, value);
}
void* GCTakeDamageSummaryScopeGuard::GetPtr() {
    return m_ptr;
}
std::string GCTakeDamageSummaryScopeGuard::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCTakeDamageSummaryScopeGuard::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCTakeDamageSummaryScopeGuard(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCTakeDamageSummaryScopeGuard>("CTakeDamageSummaryScopeGuard")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Summaries", &GCTakeDamageSummaryScopeGuard::GetSummaries, &GCTakeDamageSummaryScopeGuard::SetSummaries)
        .addFunction("ToPtr", &GCTakeDamageSummaryScopeGuard::ToPtr)
        .addFunction("IsValid", &GCTakeDamageSummaryScopeGuard::IsValid)
        .endClass();
}
GCWeaponSawedoff::GCWeaponSawedoff(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCWeaponSawedoff::GCWeaponSawedoff(void *ptr) {
    m_ptr = ptr;
}
void* GCWeaponSawedoff::GetPtr() {
    return m_ptr;
}
std::string GCWeaponSawedoff::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCWeaponSawedoff::IsValid() {
    return (m_ptr != nullptr);
}
GCCSWeaponBase GCWeaponSawedoff::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponSawedoff::GetParent(ptr=%p)", m_ptr));
    GCCSWeaponBase value(m_ptr);
    return value;
}
void GCWeaponSawedoff::SetParent(GCCSWeaponBase value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CWeaponSawedoff::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCWeaponSawedoff(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCWeaponSawedoff>("CWeaponSawedoff")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCWeaponSawedoff::GetParent, &GCWeaponSawedoff::SetParent)
        .addFunction("ToPtr", &GCWeaponSawedoff::ToPtr)
        .addFunction("IsValid", &GCWeaponSawedoff::IsValid)
        .endClass();
}
GCCSPlayer_MovementServices::GCCSPlayer_MovementServices(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCCSPlayer_MovementServices::GCCSPlayer_MovementServices(void *ptr) {
    m_ptr = ptr;
}
float GCCSPlayer_MovementServices::GetMaxFallVelocity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->MaxFallVelocity(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayer_MovementServices", "m_flMaxFallVelocity");
}
void GCCSPlayer_MovementServices::SetMaxFallVelocity(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->MaxFallVelocity(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_flMaxFallVelocity", false, value);
}
Vector GCCSPlayer_MovementServices::GetLadderNormal() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->LadderNormal(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CCSPlayer_MovementServices", "m_vecLadderNormal");
}
void GCCSPlayer_MovementServices::SetLadderNormal(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->LadderNormal(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_vecLadderNormal", false, value);
}
int32_t GCCSPlayer_MovementServices::GetLadderSurfacePropIndex() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->LadderSurfacePropIndex(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayer_MovementServices", "m_nLadderSurfacePropIndex");
}
void GCCSPlayer_MovementServices::SetLadderSurfacePropIndex(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->LadderSurfacePropIndex(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_nLadderSurfacePropIndex", false, value);
}
float GCCSPlayer_MovementServices::GetDuckAmount() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->DuckAmount(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayer_MovementServices", "m_flDuckAmount");
}
void GCCSPlayer_MovementServices::SetDuckAmount(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->DuckAmount(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_flDuckAmount", false, value);
}
float GCCSPlayer_MovementServices::GetDuckSpeed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->DuckSpeed(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayer_MovementServices", "m_flDuckSpeed");
}
void GCCSPlayer_MovementServices::SetDuckSpeed(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->DuckSpeed(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_flDuckSpeed", false, value);
}
bool GCCSPlayer_MovementServices::GetDuckOverride() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->DuckOverride(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_MovementServices", "m_bDuckOverride");
}
void GCCSPlayer_MovementServices::SetDuckOverride(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->DuckOverride(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_bDuckOverride", false, value);
}
bool GCCSPlayer_MovementServices::GetDesiresDuck() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->DesiresDuck(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_MovementServices", "m_bDesiresDuck");
}
void GCCSPlayer_MovementServices::SetDesiresDuck(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->DesiresDuck(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_bDesiresDuck", false, value);
}
float GCCSPlayer_MovementServices::GetDuckOffset() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->DuckOffset(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayer_MovementServices", "m_flDuckOffset");
}
void GCCSPlayer_MovementServices::SetDuckOffset(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->DuckOffset(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_flDuckOffset", false, value);
}
uint32_t GCCSPlayer_MovementServices::GetDuckTimeMsecs() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->DuckTimeMsecs(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CCSPlayer_MovementServices", "m_nDuckTimeMsecs");
}
void GCCSPlayer_MovementServices::SetDuckTimeMsecs(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->DuckTimeMsecs(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_nDuckTimeMsecs", false, value);
}
uint32_t GCCSPlayer_MovementServices::GetDuckJumpTimeMsecs() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->DuckJumpTimeMsecs(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CCSPlayer_MovementServices", "m_nDuckJumpTimeMsecs");
}
void GCCSPlayer_MovementServices::SetDuckJumpTimeMsecs(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->DuckJumpTimeMsecs(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_nDuckJumpTimeMsecs", false, value);
}
uint32_t GCCSPlayer_MovementServices::GetJumpTimeMsecs() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->JumpTimeMsecs(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CCSPlayer_MovementServices", "m_nJumpTimeMsecs");
}
void GCCSPlayer_MovementServices::SetJumpTimeMsecs(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->JumpTimeMsecs(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_nJumpTimeMsecs", false, value);
}
float GCCSPlayer_MovementServices::GetLastDuckTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->LastDuckTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayer_MovementServices", "m_flLastDuckTime");
}
void GCCSPlayer_MovementServices::SetLastDuckTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->LastDuckTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_flLastDuckTime", false, value);
}
Vector2D GCCSPlayer_MovementServices::GetLastPositionAtFullCrouchSpeed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->LastPositionAtFullCrouchSpeed(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector2D>(m_ptr, "CCSPlayer_MovementServices", "m_vecLastPositionAtFullCrouchSpeed");
}
void GCCSPlayer_MovementServices::SetLastPositionAtFullCrouchSpeed(Vector2D value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->LastPositionAtFullCrouchSpeed(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_vecLastPositionAtFullCrouchSpeed", false, value);
}
bool GCCSPlayer_MovementServices::GetDuckUntilOnGround() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->DuckUntilOnGround(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_MovementServices", "m_duckUntilOnGround");
}
void GCCSPlayer_MovementServices::SetDuckUntilOnGround(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->DuckUntilOnGround(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_duckUntilOnGround", false, value);
}
bool GCCSPlayer_MovementServices::GetHasWalkMovedSinceLastJump() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->HasWalkMovedSinceLastJump(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_MovementServices", "m_bHasWalkMovedSinceLastJump");
}
void GCCSPlayer_MovementServices::SetHasWalkMovedSinceLastJump(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->HasWalkMovedSinceLastJump(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_bHasWalkMovedSinceLastJump", false, value);
}
bool GCCSPlayer_MovementServices::GetInStuckTest() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->InStuckTest(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_MovementServices", "m_bInStuckTest");
}
void GCCSPlayer_MovementServices::SetInStuckTest(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->InStuckTest(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_bInStuckTest", false, value);
}
int32_t GCCSPlayer_MovementServices::GetTraceCount() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->TraceCount(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayer_MovementServices", "m_nTraceCount");
}
void GCCSPlayer_MovementServices::SetTraceCount(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->TraceCount(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_nTraceCount", false, value);
}
int32_t GCCSPlayer_MovementServices::GetStuckLast() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->StuckLast(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayer_MovementServices", "m_StuckLast");
}
void GCCSPlayer_MovementServices::SetStuckLast(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->StuckLast(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_StuckLast", false, value);
}
bool GCCSPlayer_MovementServices::GetSpeedCropped() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->SpeedCropped(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_MovementServices", "m_bSpeedCropped");
}
void GCCSPlayer_MovementServices::SetSpeedCropped(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->SpeedCropped(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_bSpeedCropped", false, value);
}
int32_t GCCSPlayer_MovementServices::GetOldWaterLevel() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->OldWaterLevel(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayer_MovementServices", "m_nOldWaterLevel");
}
void GCCSPlayer_MovementServices::SetOldWaterLevel(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->OldWaterLevel(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_nOldWaterLevel", false, value);
}
float GCCSPlayer_MovementServices::GetWaterEntryTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->WaterEntryTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayer_MovementServices", "m_flWaterEntryTime");
}
void GCCSPlayer_MovementServices::SetWaterEntryTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->WaterEntryTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_flWaterEntryTime", false, value);
}
Vector GCCSPlayer_MovementServices::GetForward() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->Forward(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CCSPlayer_MovementServices", "m_vecForward");
}
void GCCSPlayer_MovementServices::SetForward(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->Forward(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_vecForward", false, value);
}
Vector GCCSPlayer_MovementServices::GetLeft() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->Left(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CCSPlayer_MovementServices", "m_vecLeft");
}
void GCCSPlayer_MovementServices::SetLeft(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->Left(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_vecLeft", false, value);
}
Vector GCCSPlayer_MovementServices::GetUp() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->Up(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CCSPlayer_MovementServices", "m_vecUp");
}
void GCCSPlayer_MovementServices::SetUp(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->Up(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_vecUp", false, value);
}
int32_t GCCSPlayer_MovementServices::GetGameCodeHasMovedPlayerAfterCommand() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->GameCodeHasMovedPlayerAfterCommand(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayer_MovementServices", "m_nGameCodeHasMovedPlayerAfterCommand");
}
void GCCSPlayer_MovementServices::SetGameCodeHasMovedPlayerAfterCommand(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->GameCodeHasMovedPlayerAfterCommand(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_nGameCodeHasMovedPlayerAfterCommand", false, value);
}
bool GCCSPlayer_MovementServices::GetMadeFootstepNoise() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->MadeFootstepNoise(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_MovementServices", "m_bMadeFootstepNoise");
}
void GCCSPlayer_MovementServices::SetMadeFootstepNoise(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->MadeFootstepNoise(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_bMadeFootstepNoise", false, value);
}
int32_t GCCSPlayer_MovementServices::GetFootsteps() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->Footsteps(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSPlayer_MovementServices", "m_iFootsteps");
}
void GCCSPlayer_MovementServices::SetFootsteps(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->Footsteps(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_iFootsteps", false, value);
}
bool GCCSPlayer_MovementServices::GetOldJumpPressed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->OldJumpPressed(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSPlayer_MovementServices", "m_bOldJumpPressed");
}
void GCCSPlayer_MovementServices::SetOldJumpPressed(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->OldJumpPressed(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_bOldJumpPressed", false, value);
}
float GCCSPlayer_MovementServices::GetJumpPressedTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->JumpPressedTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayer_MovementServices", "m_flJumpPressedTime");
}
void GCCSPlayer_MovementServices::SetJumpPressedTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->JumpPressedTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_flJumpPressedTime", false, value);
}
float GCCSPlayer_MovementServices::GetJumpUntil() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->JumpUntil(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayer_MovementServices", "m_flJumpUntil");
}
void GCCSPlayer_MovementServices::SetJumpUntil(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->JumpUntil(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_flJumpUntil", false, value);
}
float GCCSPlayer_MovementServices::GetJumpVel() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->JumpVel(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayer_MovementServices", "m_flJumpVel");
}
void GCCSPlayer_MovementServices::SetJumpVel(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->JumpVel(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_flJumpVel", false, value);
}
float GCCSPlayer_MovementServices::GetStashGrenadeParameterWhen() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->StashGrenadeParameterWhen(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayer_MovementServices", "m_fStashGrenadeParameterWhen");
}
void GCCSPlayer_MovementServices::SetStashGrenadeParameterWhen(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->StashGrenadeParameterWhen(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_fStashGrenadeParameterWhen", false, value);
}
uint64_t GCCSPlayer_MovementServices::GetButtonDownMaskPrev() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->ButtonDownMaskPrev(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CCSPlayer_MovementServices", "m_nButtonDownMaskPrev");
}
void GCCSPlayer_MovementServices::SetButtonDownMaskPrev(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->ButtonDownMaskPrev(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_nButtonDownMaskPrev", false, value);
}
float GCCSPlayer_MovementServices::GetOffsetTickCompleteTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->OffsetTickCompleteTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayer_MovementServices", "m_flOffsetTickCompleteTime");
}
void GCCSPlayer_MovementServices::SetOffsetTickCompleteTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->OffsetTickCompleteTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_flOffsetTickCompleteTime", false, value);
}
float GCCSPlayer_MovementServices::GetOffsetTickStashedSpeed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->OffsetTickStashedSpeed(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayer_MovementServices", "m_flOffsetTickStashedSpeed");
}
void GCCSPlayer_MovementServices::SetOffsetTickStashedSpeed(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->OffsetTickStashedSpeed(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_flOffsetTickStashedSpeed", false, value);
}
float GCCSPlayer_MovementServices::GetStamina() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->Stamina(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayer_MovementServices", "m_flStamina");
}
void GCCSPlayer_MovementServices::SetStamina(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->Stamina(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_flStamina", false, value);
}
float GCCSPlayer_MovementServices::GetHeightAtJumpStart() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->HeightAtJumpStart(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayer_MovementServices", "m_flHeightAtJumpStart");
}
void GCCSPlayer_MovementServices::SetHeightAtJumpStart(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->HeightAtJumpStart(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_flHeightAtJumpStart", false, value);
}
float GCCSPlayer_MovementServices::GetMaxJumpHeightThisJump() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSPlayer_MovementServices->MaxJumpHeightThisJump(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSPlayer_MovementServices", "m_flMaxJumpHeightThisJump");
}
void GCCSPlayer_MovementServices::SetMaxJumpHeightThisJump(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSPlayer_MovementServices->MaxJumpHeightThisJump(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSPlayer_MovementServices", "m_flMaxJumpHeightThisJump", false, value);
}
void* GCCSPlayer_MovementServices::GetPtr() {
    return m_ptr;
}
std::string GCCSPlayer_MovementServices::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCCSPlayer_MovementServices::IsValid() {
    return (m_ptr != nullptr);
}
GCPlayer_MovementServices_Humanoid GCCSPlayer_MovementServices::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSPlayer_MovementServices::GetParent(ptr=%p)", m_ptr));
    GCPlayer_MovementServices_Humanoid value(m_ptr);
    return value;
}
void GCCSPlayer_MovementServices::SetParent(GCPlayer_MovementServices_Humanoid value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSPlayer_MovementServices::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCCSPlayer_MovementServices(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCCSPlayer_MovementServices>("CCSPlayer_MovementServices")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("MaxFallVelocity", &GCCSPlayer_MovementServices::GetMaxFallVelocity, &GCCSPlayer_MovementServices::SetMaxFallVelocity)
        .addProperty("LadderNormal", &GCCSPlayer_MovementServices::GetLadderNormal, &GCCSPlayer_MovementServices::SetLadderNormal)
        .addProperty("LadderSurfacePropIndex", &GCCSPlayer_MovementServices::GetLadderSurfacePropIndex, &GCCSPlayer_MovementServices::SetLadderSurfacePropIndex)
        .addProperty("DuckAmount", &GCCSPlayer_MovementServices::GetDuckAmount, &GCCSPlayer_MovementServices::SetDuckAmount)
        .addProperty("DuckSpeed", &GCCSPlayer_MovementServices::GetDuckSpeed, &GCCSPlayer_MovementServices::SetDuckSpeed)
        .addProperty("DuckOverride", &GCCSPlayer_MovementServices::GetDuckOverride, &GCCSPlayer_MovementServices::SetDuckOverride)
        .addProperty("DesiresDuck", &GCCSPlayer_MovementServices::GetDesiresDuck, &GCCSPlayer_MovementServices::SetDesiresDuck)
        .addProperty("DuckOffset", &GCCSPlayer_MovementServices::GetDuckOffset, &GCCSPlayer_MovementServices::SetDuckOffset)
        .addProperty("DuckTimeMsecs", &GCCSPlayer_MovementServices::GetDuckTimeMsecs, &GCCSPlayer_MovementServices::SetDuckTimeMsecs)
        .addProperty("DuckJumpTimeMsecs", &GCCSPlayer_MovementServices::GetDuckJumpTimeMsecs, &GCCSPlayer_MovementServices::SetDuckJumpTimeMsecs)
        .addProperty("JumpTimeMsecs", &GCCSPlayer_MovementServices::GetJumpTimeMsecs, &GCCSPlayer_MovementServices::SetJumpTimeMsecs)
        .addProperty("LastDuckTime", &GCCSPlayer_MovementServices::GetLastDuckTime, &GCCSPlayer_MovementServices::SetLastDuckTime)
        .addProperty("LastPositionAtFullCrouchSpeed", &GCCSPlayer_MovementServices::GetLastPositionAtFullCrouchSpeed, &GCCSPlayer_MovementServices::SetLastPositionAtFullCrouchSpeed)
        .addProperty("DuckUntilOnGround", &GCCSPlayer_MovementServices::GetDuckUntilOnGround, &GCCSPlayer_MovementServices::SetDuckUntilOnGround)
        .addProperty("HasWalkMovedSinceLastJump", &GCCSPlayer_MovementServices::GetHasWalkMovedSinceLastJump, &GCCSPlayer_MovementServices::SetHasWalkMovedSinceLastJump)
        .addProperty("InStuckTest", &GCCSPlayer_MovementServices::GetInStuckTest, &GCCSPlayer_MovementServices::SetInStuckTest)
        .addProperty("TraceCount", &GCCSPlayer_MovementServices::GetTraceCount, &GCCSPlayer_MovementServices::SetTraceCount)
        .addProperty("StuckLast", &GCCSPlayer_MovementServices::GetStuckLast, &GCCSPlayer_MovementServices::SetStuckLast)
        .addProperty("SpeedCropped", &GCCSPlayer_MovementServices::GetSpeedCropped, &GCCSPlayer_MovementServices::SetSpeedCropped)
        .addProperty("OldWaterLevel", &GCCSPlayer_MovementServices::GetOldWaterLevel, &GCCSPlayer_MovementServices::SetOldWaterLevel)
        .addProperty("WaterEntryTime", &GCCSPlayer_MovementServices::GetWaterEntryTime, &GCCSPlayer_MovementServices::SetWaterEntryTime)
        .addProperty("Forward", &GCCSPlayer_MovementServices::GetForward, &GCCSPlayer_MovementServices::SetForward)
        .addProperty("Left", &GCCSPlayer_MovementServices::GetLeft, &GCCSPlayer_MovementServices::SetLeft)
        .addProperty("Up", &GCCSPlayer_MovementServices::GetUp, &GCCSPlayer_MovementServices::SetUp)
        .addProperty("GameCodeHasMovedPlayerAfterCommand", &GCCSPlayer_MovementServices::GetGameCodeHasMovedPlayerAfterCommand, &GCCSPlayer_MovementServices::SetGameCodeHasMovedPlayerAfterCommand)
        .addProperty("MadeFootstepNoise", &GCCSPlayer_MovementServices::GetMadeFootstepNoise, &GCCSPlayer_MovementServices::SetMadeFootstepNoise)
        .addProperty("Footsteps", &GCCSPlayer_MovementServices::GetFootsteps, &GCCSPlayer_MovementServices::SetFootsteps)
        .addProperty("OldJumpPressed", &GCCSPlayer_MovementServices::GetOldJumpPressed, &GCCSPlayer_MovementServices::SetOldJumpPressed)
        .addProperty("JumpPressedTime", &GCCSPlayer_MovementServices::GetJumpPressedTime, &GCCSPlayer_MovementServices::SetJumpPressedTime)
        .addProperty("JumpUntil", &GCCSPlayer_MovementServices::GetJumpUntil, &GCCSPlayer_MovementServices::SetJumpUntil)
        .addProperty("JumpVel", &GCCSPlayer_MovementServices::GetJumpVel, &GCCSPlayer_MovementServices::SetJumpVel)
        .addProperty("StashGrenadeParameterWhen", &GCCSPlayer_MovementServices::GetStashGrenadeParameterWhen, &GCCSPlayer_MovementServices::SetStashGrenadeParameterWhen)
        .addProperty("ButtonDownMaskPrev", &GCCSPlayer_MovementServices::GetButtonDownMaskPrev, &GCCSPlayer_MovementServices::SetButtonDownMaskPrev)
        .addProperty("OffsetTickCompleteTime", &GCCSPlayer_MovementServices::GetOffsetTickCompleteTime, &GCCSPlayer_MovementServices::SetOffsetTickCompleteTime)
        .addProperty("OffsetTickStashedSpeed", &GCCSPlayer_MovementServices::GetOffsetTickStashedSpeed, &GCCSPlayer_MovementServices::SetOffsetTickStashedSpeed)
        .addProperty("Stamina", &GCCSPlayer_MovementServices::GetStamina, &GCCSPlayer_MovementServices::SetStamina)
        .addProperty("HeightAtJumpStart", &GCCSPlayer_MovementServices::GetHeightAtJumpStart, &GCCSPlayer_MovementServices::SetHeightAtJumpStart)
        .addProperty("MaxJumpHeightThisJump", &GCCSPlayer_MovementServices::GetMaxJumpHeightThisJump, &GCCSPlayer_MovementServices::SetMaxJumpHeightThisJump)
        .addProperty("Parent", &GCCSPlayer_MovementServices::GetParent, &GCCSPlayer_MovementServices::SetParent)
        .addFunction("ToPtr", &GCCSPlayer_MovementServices::ToPtr)
        .addFunction("IsValid", &GCCSPlayer_MovementServices::IsValid)
        .endClass();
}
GCNavHullVData::GCNavHullVData(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCNavHullVData::GCNavHullVData(void *ptr) {
    m_ptr = ptr;
}
bool GCNavHullVData::GetAgentEnabled() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNavHullVData->AgentEnabled(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CNavHullVData", "m_bAgentEnabled");
}
void GCNavHullVData::SetAgentEnabled(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNavHullVData->AgentEnabled(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNavHullVData", "m_bAgentEnabled", false, value);
}
float GCNavHullVData::GetAgentRadius() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNavHullVData->AgentRadius(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CNavHullVData", "m_agentRadius");
}
void GCNavHullVData::SetAgentRadius(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNavHullVData->AgentRadius(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNavHullVData", "m_agentRadius", false, value);
}
float GCNavHullVData::GetAgentHeight() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNavHullVData->AgentHeight(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CNavHullVData", "m_agentHeight");
}
void GCNavHullVData::SetAgentHeight(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNavHullVData->AgentHeight(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNavHullVData", "m_agentHeight", false, value);
}
bool GCNavHullVData::GetAgentShortHeightEnabled() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNavHullVData->AgentShortHeightEnabled(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CNavHullVData", "m_agentShortHeightEnabled");
}
void GCNavHullVData::SetAgentShortHeightEnabled(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNavHullVData->AgentShortHeightEnabled(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNavHullVData", "m_agentShortHeightEnabled", false, value);
}
float GCNavHullVData::GetAgentShortHeight() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNavHullVData->AgentShortHeight(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CNavHullVData", "m_agentShortHeight");
}
void GCNavHullVData::SetAgentShortHeight(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNavHullVData->AgentShortHeight(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNavHullVData", "m_agentShortHeight", false, value);
}
float GCNavHullVData::GetAgentMaxClimb() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNavHullVData->AgentMaxClimb(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CNavHullVData", "m_agentMaxClimb");
}
void GCNavHullVData::SetAgentMaxClimb(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNavHullVData->AgentMaxClimb(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNavHullVData", "m_agentMaxClimb", false, value);
}
int32_t GCNavHullVData::GetAgentMaxSlope() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNavHullVData->AgentMaxSlope(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CNavHullVData", "m_agentMaxSlope");
}
void GCNavHullVData::SetAgentMaxSlope(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNavHullVData->AgentMaxSlope(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNavHullVData", "m_agentMaxSlope", false, value);
}
float GCNavHullVData::GetAgentMaxJumpDownDist() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNavHullVData->AgentMaxJumpDownDist(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CNavHullVData", "m_agentMaxJumpDownDist");
}
void GCNavHullVData::SetAgentMaxJumpDownDist(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNavHullVData->AgentMaxJumpDownDist(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNavHullVData", "m_agentMaxJumpDownDist", false, value);
}
float GCNavHullVData::GetAgentMaxJumpHorizDistBase() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNavHullVData->AgentMaxJumpHorizDistBase(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CNavHullVData", "m_agentMaxJumpHorizDistBase");
}
void GCNavHullVData::SetAgentMaxJumpHorizDistBase(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNavHullVData->AgentMaxJumpHorizDistBase(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNavHullVData", "m_agentMaxJumpHorizDistBase", false, value);
}
float GCNavHullVData::GetAgentMaxJumpUpDist() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNavHullVData->AgentMaxJumpUpDist(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CNavHullVData", "m_agentMaxJumpUpDist");
}
void GCNavHullVData::SetAgentMaxJumpUpDist(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNavHullVData->AgentMaxJumpUpDist(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNavHullVData", "m_agentMaxJumpUpDist", false, value);
}
int32_t GCNavHullVData::GetAgentBorderErosion() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNavHullVData->AgentBorderErosion(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CNavHullVData", "m_agentBorderErosion");
}
void GCNavHullVData::SetAgentBorderErosion(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNavHullVData->AgentBorderErosion(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNavHullVData", "m_agentBorderErosion", false, value);
}
void* GCNavHullVData::GetPtr() {
    return m_ptr;
}
std::string GCNavHullVData::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCNavHullVData::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCNavHullVData(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCNavHullVData>("CNavHullVData")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("AgentEnabled", &GCNavHullVData::GetAgentEnabled, &GCNavHullVData::SetAgentEnabled)
        .addProperty("AgentRadius", &GCNavHullVData::GetAgentRadius, &GCNavHullVData::SetAgentRadius)
        .addProperty("AgentHeight", &GCNavHullVData::GetAgentHeight, &GCNavHullVData::SetAgentHeight)
        .addProperty("AgentShortHeightEnabled", &GCNavHullVData::GetAgentShortHeightEnabled, &GCNavHullVData::SetAgentShortHeightEnabled)
        .addProperty("AgentShortHeight", &GCNavHullVData::GetAgentShortHeight, &GCNavHullVData::SetAgentShortHeight)
        .addProperty("AgentMaxClimb", &GCNavHullVData::GetAgentMaxClimb, &GCNavHullVData::SetAgentMaxClimb)
        .addProperty("AgentMaxSlope", &GCNavHullVData::GetAgentMaxSlope, &GCNavHullVData::SetAgentMaxSlope)
        .addProperty("AgentMaxJumpDownDist", &GCNavHullVData::GetAgentMaxJumpDownDist, &GCNavHullVData::SetAgentMaxJumpDownDist)
        .addProperty("AgentMaxJumpHorizDistBase", &GCNavHullVData::GetAgentMaxJumpHorizDistBase, &GCNavHullVData::SetAgentMaxJumpHorizDistBase)
        .addProperty("AgentMaxJumpUpDist", &GCNavHullVData::GetAgentMaxJumpUpDist, &GCNavHullVData::SetAgentMaxJumpUpDist)
        .addProperty("AgentBorderErosion", &GCNavHullVData::GetAgentBorderErosion, &GCNavHullVData::SetAgentBorderErosion)
        .addFunction("ToPtr", &GCNavHullVData::ToPtr)
        .addFunction("IsValid", &GCNavHullVData::IsValid)
        .endClass();
}
GSoundOpvarTraceResult_t::GSoundOpvarTraceResult_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GSoundOpvarTraceResult_t::GSoundOpvarTraceResult_t(void *ptr) {
    m_ptr = ptr;
}
Vector GSoundOpvarTraceResult_t::GetPos() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: SoundOpvarTraceResult_t->Pos(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "SoundOpvarTraceResult_t", "vPos");
}
void GSoundOpvarTraceResult_t::SetPos(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: SoundOpvarTraceResult_t->Pos(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "SoundOpvarTraceResult_t", "vPos", true, value);
}
bool GSoundOpvarTraceResult_t::GetDidHit() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: SoundOpvarTraceResult_t->DidHit(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "SoundOpvarTraceResult_t", "bDidHit");
}
void GSoundOpvarTraceResult_t::SetDidHit(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: SoundOpvarTraceResult_t->DidHit(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "SoundOpvarTraceResult_t", "bDidHit", true, value);
}
float GSoundOpvarTraceResult_t::GetDistSqrToCenter() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: SoundOpvarTraceResult_t->DistSqrToCenter(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "SoundOpvarTraceResult_t", "flDistSqrToCenter");
}
void GSoundOpvarTraceResult_t::SetDistSqrToCenter(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: SoundOpvarTraceResult_t->DistSqrToCenter(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "SoundOpvarTraceResult_t", "flDistSqrToCenter", true, value);
}
void* GSoundOpvarTraceResult_t::GetPtr() {
    return m_ptr;
}
std::string GSoundOpvarTraceResult_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GSoundOpvarTraceResult_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassSoundOpvarTraceResult_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GSoundOpvarTraceResult_t>("SoundOpvarTraceResult_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Pos", &GSoundOpvarTraceResult_t::GetPos, &GSoundOpvarTraceResult_t::SetPos)
        .addProperty("DidHit", &GSoundOpvarTraceResult_t::GetDidHit, &GSoundOpvarTraceResult_t::SetDidHit)
        .addProperty("DistSqrToCenter", &GSoundOpvarTraceResult_t::GetDistSqrToCenter, &GSoundOpvarTraceResult_t::SetDistSqrToCenter)
        .addFunction("ToPtr", &GSoundOpvarTraceResult_t::ToPtr)
        .addFunction("IsValid", &GSoundOpvarTraceResult_t::IsValid)
        .endClass();
}
GCAnimEventListener::GCAnimEventListener(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCAnimEventListener::GCAnimEventListener(void *ptr) {
    m_ptr = ptr;
}
void* GCAnimEventListener::GetPtr() {
    return m_ptr;
}
std::string GCAnimEventListener::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCAnimEventListener::IsValid() {
    return (m_ptr != nullptr);
}
GCAnimEventListenerBase GCAnimEventListener::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CAnimEventListener::GetParent(ptr=%p)", m_ptr));
    GCAnimEventListenerBase value(m_ptr);
    return value;
}
void GCAnimEventListener::SetParent(GCAnimEventListenerBase value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CAnimEventListener::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCAnimEventListener(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCAnimEventListener>("CAnimEventListener")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCAnimEventListener::GetParent, &GCAnimEventListener::SetParent)
        .addFunction("ToPtr", &GCAnimEventListener::ToPtr)
        .addFunction("IsValid", &GCAnimEventListener::IsValid)
        .endClass();
}
GCNavVolumeCalculatedVector::GCNavVolumeCalculatedVector(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCNavVolumeCalculatedVector::GCNavVolumeCalculatedVector(void *ptr) {
    m_ptr = ptr;
}
void* GCNavVolumeCalculatedVector::GetPtr() {
    return m_ptr;
}
std::string GCNavVolumeCalculatedVector::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCNavVolumeCalculatedVector::IsValid() {
    return (m_ptr != nullptr);
}
GCNavVolume GCNavVolumeCalculatedVector::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CNavVolumeCalculatedVector::GetParent(ptr=%p)", m_ptr));
    GCNavVolume value(m_ptr);
    return value;
}
void GCNavVolumeCalculatedVector::SetParent(GCNavVolume value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CNavVolumeCalculatedVector::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCNavVolumeCalculatedVector(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCNavVolumeCalculatedVector>("CNavVolumeCalculatedVector")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCNavVolumeCalculatedVector::GetParent, &GCNavVolumeCalculatedVector::SetParent)
        .addFunction("ToPtr", &GCNavVolumeCalculatedVector::ToPtr)
        .addFunction("IsValid", &GCNavVolumeCalculatedVector::IsValid)
        .endClass();
}
GCCSWeaponBaseVData::GCCSWeaponBaseVData(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCCSWeaponBaseVData::GCCSWeaponBaseVData(void *ptr) {
    m_ptr = ptr;
}
uint64_t GCCSWeaponBaseVData::GetWeaponType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->WeaponType(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CCSWeaponBaseVData", "m_WeaponType");
}
void GCCSWeaponBaseVData::SetWeaponType(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->WeaponType(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_WeaponType", false, value);
}
uint64_t GCCSWeaponBaseVData::GetWeaponCategory() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->WeaponCategory(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CCSWeaponBaseVData", "m_WeaponCategory");
}
void GCCSWeaponBaseVData::SetWeaponCategory(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->WeaponCategory(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_WeaponCategory", false, value);
}
uint64_t GCCSWeaponBaseVData::GetGearSlot() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->GearSlot(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CCSWeaponBaseVData", "m_GearSlot");
}
void GCCSWeaponBaseVData::SetGearSlot(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->GearSlot(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_GearSlot", false, value);
}
int32_t GCCSWeaponBaseVData::GetGearSlotPosition() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->GearSlotPosition(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBaseVData", "m_GearSlotPosition");
}
void GCCSWeaponBaseVData::SetGearSlotPosition(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->GearSlotPosition(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_GearSlotPosition", false, value);
}
uint64_t GCCSWeaponBaseVData::GetDefaultLoadoutSlot() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->DefaultLoadoutSlot(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CCSWeaponBaseVData", "m_DefaultLoadoutSlot");
}
void GCCSWeaponBaseVData::SetDefaultLoadoutSlot(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->DefaultLoadoutSlot(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_DefaultLoadoutSlot", false, value);
}
std::string GCCSWeaponBaseVData::GetWrongTeamMsg() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->WrongTeamMsg(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlString>(m_ptr, "CCSWeaponBaseVData", "m_sWrongTeamMsg").Get();
}
void GCCSWeaponBaseVData::SetWrongTeamMsg(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->WrongTeamMsg(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_sWrongTeamMsg", false, CUtlString(value.c_str()));
}
int32_t GCCSWeaponBaseVData::GetPrice() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->Price(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBaseVData", "m_nPrice");
}
void GCCSWeaponBaseVData::SetPrice(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->Price(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_nPrice", false, value);
}
int32_t GCCSWeaponBaseVData::GetKillAward() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->KillAward(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBaseVData", "m_nKillAward");
}
void GCCSWeaponBaseVData::SetKillAward(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->KillAward(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_nKillAward", false, value);
}
int32_t GCCSWeaponBaseVData::GetPrimaryReserveAmmoMax() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->PrimaryReserveAmmoMax(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBaseVData", "m_nPrimaryReserveAmmoMax");
}
void GCCSWeaponBaseVData::SetPrimaryReserveAmmoMax(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->PrimaryReserveAmmoMax(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_nPrimaryReserveAmmoMax", false, value);
}
int32_t GCCSWeaponBaseVData::GetSecondaryReserveAmmoMax() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->SecondaryReserveAmmoMax(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBaseVData", "m_nSecondaryReserveAmmoMax");
}
void GCCSWeaponBaseVData::SetSecondaryReserveAmmoMax(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->SecondaryReserveAmmoMax(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_nSecondaryReserveAmmoMax", false, value);
}
bool GCCSWeaponBaseVData::GetMeleeWeapon() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->MeleeWeapon(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSWeaponBaseVData", "m_bMeleeWeapon");
}
void GCCSWeaponBaseVData::SetMeleeWeapon(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->MeleeWeapon(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_bMeleeWeapon", false, value);
}
bool GCCSWeaponBaseVData::GetHasBurstMode() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->HasBurstMode(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSWeaponBaseVData", "m_bHasBurstMode");
}
void GCCSWeaponBaseVData::SetHasBurstMode(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->HasBurstMode(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_bHasBurstMode", false, value);
}
bool GCCSWeaponBaseVData::GetIsRevolver() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->IsRevolver(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSWeaponBaseVData", "m_bIsRevolver");
}
void GCCSWeaponBaseVData::SetIsRevolver(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->IsRevolver(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_bIsRevolver", false, value);
}
bool GCCSWeaponBaseVData::GetCannotShootUnderwater() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->CannotShootUnderwater(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSWeaponBaseVData", "m_bCannotShootUnderwater");
}
void GCCSWeaponBaseVData::SetCannotShootUnderwater(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->CannotShootUnderwater(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_bCannotShootUnderwater", false, value);
}
std::string GCCSWeaponBaseVData::GetAnimExtension() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->AnimExtension(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlString>(m_ptr, "CCSWeaponBaseVData", "m_szAnimExtension").Get();
}
void GCCSWeaponBaseVData::SetAnimExtension(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->AnimExtension(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_szAnimExtension", false, CUtlString(value.c_str()));
}
uint64_t GCCSWeaponBaseVData::GetSilencerType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->SilencerType(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CCSWeaponBaseVData", "m_eSilencerType");
}
void GCCSWeaponBaseVData::SetSilencerType(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->SilencerType(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_eSilencerType", false, value);
}
int32_t GCCSWeaponBaseVData::GetCrosshairMinDistance() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->CrosshairMinDistance(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBaseVData", "m_nCrosshairMinDistance");
}
void GCCSWeaponBaseVData::SetCrosshairMinDistance(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->CrosshairMinDistance(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_nCrosshairMinDistance", false, value);
}
int32_t GCCSWeaponBaseVData::GetCrosshairDeltaDistance() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->CrosshairDeltaDistance(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBaseVData", "m_nCrosshairDeltaDistance");
}
void GCCSWeaponBaseVData::SetCrosshairDeltaDistance(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->CrosshairDeltaDistance(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_nCrosshairDeltaDistance", false, value);
}
bool GCCSWeaponBaseVData::GetIsFullAuto() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->IsFullAuto(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSWeaponBaseVData", "m_bIsFullAuto");
}
void GCCSWeaponBaseVData::SetIsFullAuto(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->IsFullAuto(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_bIsFullAuto", false, value);
}
int32_t GCCSWeaponBaseVData::GetNumBullets() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->NumBullets(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBaseVData", "m_nNumBullets");
}
void GCCSWeaponBaseVData::SetNumBullets(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->NumBullets(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_nNumBullets", false, value);
}
GCFiringModeFloat GCCSWeaponBaseVData::GetCycleTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->CycleTime(ptr=%p)", m_ptr));
    GCFiringModeFloat value(GetSchemaPtr(m_ptr, "CCSWeaponBaseVData", "m_flCycleTime"));
    return value;
}
void GCCSWeaponBaseVData::SetCycleTime(GCFiringModeFloat value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->CycleTime(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'CycleTime' is not possible.\n");
}
GCFiringModeFloat GCCSWeaponBaseVData::GetMaxSpeed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->MaxSpeed(ptr=%p)", m_ptr));
    GCFiringModeFloat value(GetSchemaPtr(m_ptr, "CCSWeaponBaseVData", "m_flMaxSpeed"));
    return value;
}
void GCCSWeaponBaseVData::SetMaxSpeed(GCFiringModeFloat value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->MaxSpeed(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'MaxSpeed' is not possible.\n");
}
GCFiringModeFloat GCCSWeaponBaseVData::GetSpread() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->Spread(ptr=%p)", m_ptr));
    GCFiringModeFloat value(GetSchemaPtr(m_ptr, "CCSWeaponBaseVData", "m_flSpread"));
    return value;
}
void GCCSWeaponBaseVData::SetSpread(GCFiringModeFloat value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->Spread(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Spread' is not possible.\n");
}
GCFiringModeFloat GCCSWeaponBaseVData::GetInaccuracyCrouch() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->InaccuracyCrouch(ptr=%p)", m_ptr));
    GCFiringModeFloat value(GetSchemaPtr(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyCrouch"));
    return value;
}
void GCCSWeaponBaseVData::SetInaccuracyCrouch(GCFiringModeFloat value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->InaccuracyCrouch(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'InaccuracyCrouch' is not possible.\n");
}
GCFiringModeFloat GCCSWeaponBaseVData::GetInaccuracyStand() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->InaccuracyStand(ptr=%p)", m_ptr));
    GCFiringModeFloat value(GetSchemaPtr(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyStand"));
    return value;
}
void GCCSWeaponBaseVData::SetInaccuracyStand(GCFiringModeFloat value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->InaccuracyStand(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'InaccuracyStand' is not possible.\n");
}
GCFiringModeFloat GCCSWeaponBaseVData::GetInaccuracyJump() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->InaccuracyJump(ptr=%p)", m_ptr));
    GCFiringModeFloat value(GetSchemaPtr(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyJump"));
    return value;
}
void GCCSWeaponBaseVData::SetInaccuracyJump(GCFiringModeFloat value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->InaccuracyJump(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'InaccuracyJump' is not possible.\n");
}
GCFiringModeFloat GCCSWeaponBaseVData::GetInaccuracyLand() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->InaccuracyLand(ptr=%p)", m_ptr));
    GCFiringModeFloat value(GetSchemaPtr(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyLand"));
    return value;
}
void GCCSWeaponBaseVData::SetInaccuracyLand(GCFiringModeFloat value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->InaccuracyLand(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'InaccuracyLand' is not possible.\n");
}
GCFiringModeFloat GCCSWeaponBaseVData::GetInaccuracyLadder() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->InaccuracyLadder(ptr=%p)", m_ptr));
    GCFiringModeFloat value(GetSchemaPtr(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyLadder"));
    return value;
}
void GCCSWeaponBaseVData::SetInaccuracyLadder(GCFiringModeFloat value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->InaccuracyLadder(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'InaccuracyLadder' is not possible.\n");
}
GCFiringModeFloat GCCSWeaponBaseVData::GetInaccuracyFire() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->InaccuracyFire(ptr=%p)", m_ptr));
    GCFiringModeFloat value(GetSchemaPtr(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyFire"));
    return value;
}
void GCCSWeaponBaseVData::SetInaccuracyFire(GCFiringModeFloat value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->InaccuracyFire(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'InaccuracyFire' is not possible.\n");
}
GCFiringModeFloat GCCSWeaponBaseVData::GetInaccuracyMove() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->InaccuracyMove(ptr=%p)", m_ptr));
    GCFiringModeFloat value(GetSchemaPtr(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyMove"));
    return value;
}
void GCCSWeaponBaseVData::SetInaccuracyMove(GCFiringModeFloat value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->InaccuracyMove(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'InaccuracyMove' is not possible.\n");
}
GCFiringModeFloat GCCSWeaponBaseVData::GetRecoilAngle() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->RecoilAngle(ptr=%p)", m_ptr));
    GCFiringModeFloat value(GetSchemaPtr(m_ptr, "CCSWeaponBaseVData", "m_flRecoilAngle"));
    return value;
}
void GCCSWeaponBaseVData::SetRecoilAngle(GCFiringModeFloat value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->RecoilAngle(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'RecoilAngle' is not possible.\n");
}
GCFiringModeFloat GCCSWeaponBaseVData::GetRecoilAngleVariance() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->RecoilAngleVariance(ptr=%p)", m_ptr));
    GCFiringModeFloat value(GetSchemaPtr(m_ptr, "CCSWeaponBaseVData", "m_flRecoilAngleVariance"));
    return value;
}
void GCCSWeaponBaseVData::SetRecoilAngleVariance(GCFiringModeFloat value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->RecoilAngleVariance(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'RecoilAngleVariance' is not possible.\n");
}
GCFiringModeFloat GCCSWeaponBaseVData::GetRecoilMagnitude() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->RecoilMagnitude(ptr=%p)", m_ptr));
    GCFiringModeFloat value(GetSchemaPtr(m_ptr, "CCSWeaponBaseVData", "m_flRecoilMagnitude"));
    return value;
}
void GCCSWeaponBaseVData::SetRecoilMagnitude(GCFiringModeFloat value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->RecoilMagnitude(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'RecoilMagnitude' is not possible.\n");
}
GCFiringModeFloat GCCSWeaponBaseVData::GetRecoilMagnitudeVariance() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->RecoilMagnitudeVariance(ptr=%p)", m_ptr));
    GCFiringModeFloat value(GetSchemaPtr(m_ptr, "CCSWeaponBaseVData", "m_flRecoilMagnitudeVariance"));
    return value;
}
void GCCSWeaponBaseVData::SetRecoilMagnitudeVariance(GCFiringModeFloat value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->RecoilMagnitudeVariance(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'RecoilMagnitudeVariance' is not possible.\n");
}
GCFiringModeInt GCCSWeaponBaseVData::GetTracerFrequency() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->TracerFrequency(ptr=%p)", m_ptr));
    GCFiringModeInt value(GetSchemaPtr(m_ptr, "CCSWeaponBaseVData", "m_nTracerFrequency"));
    return value;
}
void GCCSWeaponBaseVData::SetTracerFrequency(GCFiringModeInt value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->TracerFrequency(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'TracerFrequency' is not possible.\n");
}
float GCCSWeaponBaseVData::GetInaccuracyJumpInitial() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->InaccuracyJumpInitial(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyJumpInitial");
}
void GCCSWeaponBaseVData::SetInaccuracyJumpInitial(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->InaccuracyJumpInitial(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyJumpInitial", false, value);
}
float GCCSWeaponBaseVData::GetInaccuracyJumpApex() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->InaccuracyJumpApex(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyJumpApex");
}
void GCCSWeaponBaseVData::SetInaccuracyJumpApex(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->InaccuracyJumpApex(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyJumpApex", false, value);
}
float GCCSWeaponBaseVData::GetInaccuracyReload() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->InaccuracyReload(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyReload");
}
void GCCSWeaponBaseVData::SetInaccuracyReload(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->InaccuracyReload(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyReload", false, value);
}
int32_t GCCSWeaponBaseVData::GetRecoilSeed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->RecoilSeed(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBaseVData", "m_nRecoilSeed");
}
void GCCSWeaponBaseVData::SetRecoilSeed(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->RecoilSeed(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_nRecoilSeed", false, value);
}
int32_t GCCSWeaponBaseVData::GetSpreadSeed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->SpreadSeed(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBaseVData", "m_nSpreadSeed");
}
void GCCSWeaponBaseVData::SetSpreadSeed(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->SpreadSeed(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_nSpreadSeed", false, value);
}
float GCCSWeaponBaseVData::GetTimeToIdleAfterFire() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->TimeToIdleAfterFire(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flTimeToIdleAfterFire");
}
void GCCSWeaponBaseVData::SetTimeToIdleAfterFire(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->TimeToIdleAfterFire(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flTimeToIdleAfterFire", false, value);
}
float GCCSWeaponBaseVData::GetIdleInterval() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->IdleInterval(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flIdleInterval");
}
void GCCSWeaponBaseVData::SetIdleInterval(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->IdleInterval(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flIdleInterval", false, value);
}
float GCCSWeaponBaseVData::GetAttackMovespeedFactor() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->AttackMovespeedFactor(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flAttackMovespeedFactor");
}
void GCCSWeaponBaseVData::SetAttackMovespeedFactor(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->AttackMovespeedFactor(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flAttackMovespeedFactor", false, value);
}
float GCCSWeaponBaseVData::GetHeatPerShot() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->HeatPerShot(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flHeatPerShot");
}
void GCCSWeaponBaseVData::SetHeatPerShot(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->HeatPerShot(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flHeatPerShot", false, value);
}
float GCCSWeaponBaseVData::GetInaccuracyPitchShift() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->InaccuracyPitchShift(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyPitchShift");
}
void GCCSWeaponBaseVData::SetInaccuracyPitchShift(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->InaccuracyPitchShift(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyPitchShift", false, value);
}
float GCCSWeaponBaseVData::GetInaccuracyAltSoundThreshold() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->InaccuracyAltSoundThreshold(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyAltSoundThreshold");
}
void GCCSWeaponBaseVData::SetInaccuracyAltSoundThreshold(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->InaccuracyAltSoundThreshold(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flInaccuracyAltSoundThreshold", false, value);
}
float GCCSWeaponBaseVData::GetBotAudibleRange() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->BotAudibleRange(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flBotAudibleRange");
}
void GCCSWeaponBaseVData::SetBotAudibleRange(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->BotAudibleRange(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flBotAudibleRange", false, value);
}
std::string GCCSWeaponBaseVData::GetUseRadioSubtitle() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->UseRadioSubtitle(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlString>(m_ptr, "CCSWeaponBaseVData", "m_szUseRadioSubtitle").Get();
}
void GCCSWeaponBaseVData::SetUseRadioSubtitle(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->UseRadioSubtitle(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_szUseRadioSubtitle", false, CUtlString(value.c_str()));
}
bool GCCSWeaponBaseVData::GetUnzoomsAfterShot() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->UnzoomsAfterShot(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSWeaponBaseVData", "m_bUnzoomsAfterShot");
}
void GCCSWeaponBaseVData::SetUnzoomsAfterShot(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->UnzoomsAfterShot(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_bUnzoomsAfterShot", false, value);
}
bool GCCSWeaponBaseVData::GetHideViewModelWhenZoomed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->HideViewModelWhenZoomed(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CCSWeaponBaseVData", "m_bHideViewModelWhenZoomed");
}
void GCCSWeaponBaseVData::SetHideViewModelWhenZoomed(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->HideViewModelWhenZoomed(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_bHideViewModelWhenZoomed", false, value);
}
int32_t GCCSWeaponBaseVData::GetZoomLevels() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->ZoomLevels(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBaseVData", "m_nZoomLevels");
}
void GCCSWeaponBaseVData::SetZoomLevels(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->ZoomLevels(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_nZoomLevels", false, value);
}
int32_t GCCSWeaponBaseVData::GetZoomFOV1() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->ZoomFOV1(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBaseVData", "m_nZoomFOV1");
}
void GCCSWeaponBaseVData::SetZoomFOV1(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->ZoomFOV1(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_nZoomFOV1", false, value);
}
int32_t GCCSWeaponBaseVData::GetZoomFOV2() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->ZoomFOV2(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBaseVData", "m_nZoomFOV2");
}
void GCCSWeaponBaseVData::SetZoomFOV2(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->ZoomFOV2(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_nZoomFOV2", false, value);
}
float GCCSWeaponBaseVData::GetZoomTime0() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->ZoomTime0(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flZoomTime0");
}
void GCCSWeaponBaseVData::SetZoomTime0(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->ZoomTime0(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flZoomTime0", false, value);
}
float GCCSWeaponBaseVData::GetZoomTime1() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->ZoomTime1(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flZoomTime1");
}
void GCCSWeaponBaseVData::SetZoomTime1(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->ZoomTime1(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flZoomTime1", false, value);
}
float GCCSWeaponBaseVData::GetZoomTime2() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->ZoomTime2(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flZoomTime2");
}
void GCCSWeaponBaseVData::SetZoomTime2(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->ZoomTime2(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flZoomTime2", false, value);
}
float GCCSWeaponBaseVData::GetIronSightPullUpSpeed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->IronSightPullUpSpeed(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flIronSightPullUpSpeed");
}
void GCCSWeaponBaseVData::SetIronSightPullUpSpeed(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->IronSightPullUpSpeed(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flIronSightPullUpSpeed", false, value);
}
float GCCSWeaponBaseVData::GetIronSightPutDownSpeed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->IronSightPutDownSpeed(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flIronSightPutDownSpeed");
}
void GCCSWeaponBaseVData::SetIronSightPutDownSpeed(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->IronSightPutDownSpeed(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flIronSightPutDownSpeed", false, value);
}
float GCCSWeaponBaseVData::GetIronSightFOV() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->IronSightFOV(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flIronSightFOV");
}
void GCCSWeaponBaseVData::SetIronSightFOV(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->IronSightFOV(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flIronSightFOV", false, value);
}
float GCCSWeaponBaseVData::GetIronSightPivotForward() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->IronSightPivotForward(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flIronSightPivotForward");
}
void GCCSWeaponBaseVData::SetIronSightPivotForward(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->IronSightPivotForward(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flIronSightPivotForward", false, value);
}
float GCCSWeaponBaseVData::GetIronSightLooseness() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->IronSightLooseness(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flIronSightLooseness");
}
void GCCSWeaponBaseVData::SetIronSightLooseness(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->IronSightLooseness(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flIronSightLooseness", false, value);
}
QAngle GCCSWeaponBaseVData::GetPivotAngle() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->PivotAngle(ptr=%p)", m_ptr));
    return GetSchemaValue<QAngle>(m_ptr, "CCSWeaponBaseVData", "m_angPivotAngle");
}
void GCCSWeaponBaseVData::SetPivotAngle(QAngle value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->PivotAngle(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_angPivotAngle", false, value);
}
Vector GCCSWeaponBaseVData::GetIronSightEyePos() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->IronSightEyePos(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CCSWeaponBaseVData", "m_vecIronSightEyePos");
}
void GCCSWeaponBaseVData::SetIronSightEyePos(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->IronSightEyePos(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_vecIronSightEyePos", false, value);
}
int32_t GCCSWeaponBaseVData::GetDamage() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->Damage(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBaseVData", "m_nDamage");
}
void GCCSWeaponBaseVData::SetDamage(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->Damage(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_nDamage", false, value);
}
float GCCSWeaponBaseVData::GetHeadshotMultiplier() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->HeadshotMultiplier(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flHeadshotMultiplier");
}
void GCCSWeaponBaseVData::SetHeadshotMultiplier(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->HeadshotMultiplier(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flHeadshotMultiplier", false, value);
}
float GCCSWeaponBaseVData::GetArmorRatio() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->ArmorRatio(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flArmorRatio");
}
void GCCSWeaponBaseVData::SetArmorRatio(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->ArmorRatio(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flArmorRatio", false, value);
}
float GCCSWeaponBaseVData::GetPenetration() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->Penetration(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flPenetration");
}
void GCCSWeaponBaseVData::SetPenetration(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->Penetration(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flPenetration", false, value);
}
float GCCSWeaponBaseVData::GetRange() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->Range(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flRange");
}
void GCCSWeaponBaseVData::SetRange(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->Range(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flRange", false, value);
}
float GCCSWeaponBaseVData::GetRangeModifier() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->RangeModifier(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flRangeModifier");
}
void GCCSWeaponBaseVData::SetRangeModifier(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->RangeModifier(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flRangeModifier", false, value);
}
float GCCSWeaponBaseVData::GetFlinchVelocityModifierLarge() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->FlinchVelocityModifierLarge(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flFlinchVelocityModifierLarge");
}
void GCCSWeaponBaseVData::SetFlinchVelocityModifierLarge(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->FlinchVelocityModifierLarge(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flFlinchVelocityModifierLarge", false, value);
}
float GCCSWeaponBaseVData::GetFlinchVelocityModifierSmall() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->FlinchVelocityModifierSmall(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flFlinchVelocityModifierSmall");
}
void GCCSWeaponBaseVData::SetFlinchVelocityModifierSmall(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->FlinchVelocityModifierSmall(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flFlinchVelocityModifierSmall", false, value);
}
float GCCSWeaponBaseVData::GetRecoveryTimeCrouch() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->RecoveryTimeCrouch(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flRecoveryTimeCrouch");
}
void GCCSWeaponBaseVData::SetRecoveryTimeCrouch(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->RecoveryTimeCrouch(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flRecoveryTimeCrouch", false, value);
}
float GCCSWeaponBaseVData::GetRecoveryTimeStand() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->RecoveryTimeStand(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flRecoveryTimeStand");
}
void GCCSWeaponBaseVData::SetRecoveryTimeStand(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->RecoveryTimeStand(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flRecoveryTimeStand", false, value);
}
float GCCSWeaponBaseVData::GetRecoveryTimeCrouchFinal() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->RecoveryTimeCrouchFinal(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flRecoveryTimeCrouchFinal");
}
void GCCSWeaponBaseVData::SetRecoveryTimeCrouchFinal(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->RecoveryTimeCrouchFinal(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flRecoveryTimeCrouchFinal", false, value);
}
float GCCSWeaponBaseVData::GetRecoveryTimeStandFinal() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->RecoveryTimeStandFinal(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flRecoveryTimeStandFinal");
}
void GCCSWeaponBaseVData::SetRecoveryTimeStandFinal(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->RecoveryTimeStandFinal(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flRecoveryTimeStandFinal", false, value);
}
int32_t GCCSWeaponBaseVData::GetRecoveryTransitionStartBullet() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->RecoveryTransitionStartBullet(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBaseVData", "m_nRecoveryTransitionStartBullet");
}
void GCCSWeaponBaseVData::SetRecoveryTransitionStartBullet(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->RecoveryTransitionStartBullet(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_nRecoveryTransitionStartBullet", false, value);
}
int32_t GCCSWeaponBaseVData::GetRecoveryTransitionEndBullet() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->RecoveryTransitionEndBullet(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CCSWeaponBaseVData", "m_nRecoveryTransitionEndBullet");
}
void GCCSWeaponBaseVData::SetRecoveryTransitionEndBullet(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->RecoveryTransitionEndBullet(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_nRecoveryTransitionEndBullet", false, value);
}
float GCCSWeaponBaseVData::GetThrowVelocity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->ThrowVelocity(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCSWeaponBaseVData", "m_flThrowVelocity");
}
void GCCSWeaponBaseVData::SetThrowVelocity(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->ThrowVelocity(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_flThrowVelocity", false, value);
}
Vector GCCSWeaponBaseVData::GetSmokeColor() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCSWeaponBaseVData->SmokeColor(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CCSWeaponBaseVData", "m_vSmokeColor");
}
void GCCSWeaponBaseVData::SetSmokeColor(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCSWeaponBaseVData->SmokeColor(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCSWeaponBaseVData", "m_vSmokeColor", false, value);
}
void* GCCSWeaponBaseVData::GetPtr() {
    return m_ptr;
}
std::string GCCSWeaponBaseVData::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCCSWeaponBaseVData::IsValid() {
    return (m_ptr != nullptr);
}
GCBasePlayerWeaponVData GCCSWeaponBaseVData::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSWeaponBaseVData::GetParent(ptr=%p)", m_ptr));
    GCBasePlayerWeaponVData value(m_ptr);
    return value;
}
void GCCSWeaponBaseVData::SetParent(GCBasePlayerWeaponVData value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CCSWeaponBaseVData::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCCSWeaponBaseVData(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCCSWeaponBaseVData>("CCSWeaponBaseVData")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("WeaponType", &GCCSWeaponBaseVData::GetWeaponType, &GCCSWeaponBaseVData::SetWeaponType)
        .addProperty("WeaponCategory", &GCCSWeaponBaseVData::GetWeaponCategory, &GCCSWeaponBaseVData::SetWeaponCategory)
        .addProperty("GearSlot", &GCCSWeaponBaseVData::GetGearSlot, &GCCSWeaponBaseVData::SetGearSlot)
        .addProperty("GearSlotPosition", &GCCSWeaponBaseVData::GetGearSlotPosition, &GCCSWeaponBaseVData::SetGearSlotPosition)
        .addProperty("DefaultLoadoutSlot", &GCCSWeaponBaseVData::GetDefaultLoadoutSlot, &GCCSWeaponBaseVData::SetDefaultLoadoutSlot)
        .addProperty("WrongTeamMsg", &GCCSWeaponBaseVData::GetWrongTeamMsg, &GCCSWeaponBaseVData::SetWrongTeamMsg)
        .addProperty("Price", &GCCSWeaponBaseVData::GetPrice, &GCCSWeaponBaseVData::SetPrice)
        .addProperty("KillAward", &GCCSWeaponBaseVData::GetKillAward, &GCCSWeaponBaseVData::SetKillAward)
        .addProperty("PrimaryReserveAmmoMax", &GCCSWeaponBaseVData::GetPrimaryReserveAmmoMax, &GCCSWeaponBaseVData::SetPrimaryReserveAmmoMax)
        .addProperty("SecondaryReserveAmmoMax", &GCCSWeaponBaseVData::GetSecondaryReserveAmmoMax, &GCCSWeaponBaseVData::SetSecondaryReserveAmmoMax)
        .addProperty("MeleeWeapon", &GCCSWeaponBaseVData::GetMeleeWeapon, &GCCSWeaponBaseVData::SetMeleeWeapon)
        .addProperty("HasBurstMode", &GCCSWeaponBaseVData::GetHasBurstMode, &GCCSWeaponBaseVData::SetHasBurstMode)
        .addProperty("IsRevolver", &GCCSWeaponBaseVData::GetIsRevolver, &GCCSWeaponBaseVData::SetIsRevolver)
        .addProperty("CannotShootUnderwater", &GCCSWeaponBaseVData::GetCannotShootUnderwater, &GCCSWeaponBaseVData::SetCannotShootUnderwater)
        .addProperty("AnimExtension", &GCCSWeaponBaseVData::GetAnimExtension, &GCCSWeaponBaseVData::SetAnimExtension)
        .addProperty("SilencerType", &GCCSWeaponBaseVData::GetSilencerType, &GCCSWeaponBaseVData::SetSilencerType)
        .addProperty("CrosshairMinDistance", &GCCSWeaponBaseVData::GetCrosshairMinDistance, &GCCSWeaponBaseVData::SetCrosshairMinDistance)
        .addProperty("CrosshairDeltaDistance", &GCCSWeaponBaseVData::GetCrosshairDeltaDistance, &GCCSWeaponBaseVData::SetCrosshairDeltaDistance)
        .addProperty("IsFullAuto", &GCCSWeaponBaseVData::GetIsFullAuto, &GCCSWeaponBaseVData::SetIsFullAuto)
        .addProperty("NumBullets", &GCCSWeaponBaseVData::GetNumBullets, &GCCSWeaponBaseVData::SetNumBullets)
        .addProperty("CycleTime", &GCCSWeaponBaseVData::GetCycleTime, &GCCSWeaponBaseVData::SetCycleTime)
        .addProperty("MaxSpeed", &GCCSWeaponBaseVData::GetMaxSpeed, &GCCSWeaponBaseVData::SetMaxSpeed)
        .addProperty("Spread", &GCCSWeaponBaseVData::GetSpread, &GCCSWeaponBaseVData::SetSpread)
        .addProperty("InaccuracyCrouch", &GCCSWeaponBaseVData::GetInaccuracyCrouch, &GCCSWeaponBaseVData::SetInaccuracyCrouch)
        .addProperty("InaccuracyStand", &GCCSWeaponBaseVData::GetInaccuracyStand, &GCCSWeaponBaseVData::SetInaccuracyStand)
        .addProperty("InaccuracyJump", &GCCSWeaponBaseVData::GetInaccuracyJump, &GCCSWeaponBaseVData::SetInaccuracyJump)
        .addProperty("InaccuracyLand", &GCCSWeaponBaseVData::GetInaccuracyLand, &GCCSWeaponBaseVData::SetInaccuracyLand)
        .addProperty("InaccuracyLadder", &GCCSWeaponBaseVData::GetInaccuracyLadder, &GCCSWeaponBaseVData::SetInaccuracyLadder)
        .addProperty("InaccuracyFire", &GCCSWeaponBaseVData::GetInaccuracyFire, &GCCSWeaponBaseVData::SetInaccuracyFire)
        .addProperty("InaccuracyMove", &GCCSWeaponBaseVData::GetInaccuracyMove, &GCCSWeaponBaseVData::SetInaccuracyMove)
        .addProperty("RecoilAngle", &GCCSWeaponBaseVData::GetRecoilAngle, &GCCSWeaponBaseVData::SetRecoilAngle)
        .addProperty("RecoilAngleVariance", &GCCSWeaponBaseVData::GetRecoilAngleVariance, &GCCSWeaponBaseVData::SetRecoilAngleVariance)
        .addProperty("RecoilMagnitude", &GCCSWeaponBaseVData::GetRecoilMagnitude, &GCCSWeaponBaseVData::SetRecoilMagnitude)
        .addProperty("RecoilMagnitudeVariance", &GCCSWeaponBaseVData::GetRecoilMagnitudeVariance, &GCCSWeaponBaseVData::SetRecoilMagnitudeVariance)
        .addProperty("TracerFrequency", &GCCSWeaponBaseVData::GetTracerFrequency, &GCCSWeaponBaseVData::SetTracerFrequency)
        .addProperty("InaccuracyJumpInitial", &GCCSWeaponBaseVData::GetInaccuracyJumpInitial, &GCCSWeaponBaseVData::SetInaccuracyJumpInitial)
        .addProperty("InaccuracyJumpApex", &GCCSWeaponBaseVData::GetInaccuracyJumpApex, &GCCSWeaponBaseVData::SetInaccuracyJumpApex)
        .addProperty("InaccuracyReload", &GCCSWeaponBaseVData::GetInaccuracyReload, &GCCSWeaponBaseVData::SetInaccuracyReload)
        .addProperty("RecoilSeed", &GCCSWeaponBaseVData::GetRecoilSeed, &GCCSWeaponBaseVData::SetRecoilSeed)
        .addProperty("SpreadSeed", &GCCSWeaponBaseVData::GetSpreadSeed, &GCCSWeaponBaseVData::SetSpreadSeed)
        .addProperty("TimeToIdleAfterFire", &GCCSWeaponBaseVData::GetTimeToIdleAfterFire, &GCCSWeaponBaseVData::SetTimeToIdleAfterFire)
        .addProperty("IdleInterval", &GCCSWeaponBaseVData::GetIdleInterval, &GCCSWeaponBaseVData::SetIdleInterval)
        .addProperty("AttackMovespeedFactor", &GCCSWeaponBaseVData::GetAttackMovespeedFactor, &GCCSWeaponBaseVData::SetAttackMovespeedFactor)
        .addProperty("HeatPerShot", &GCCSWeaponBaseVData::GetHeatPerShot, &GCCSWeaponBaseVData::SetHeatPerShot)
        .addProperty("InaccuracyPitchShift", &GCCSWeaponBaseVData::GetInaccuracyPitchShift, &GCCSWeaponBaseVData::SetInaccuracyPitchShift)
        .addProperty("InaccuracyAltSoundThreshold", &GCCSWeaponBaseVData::GetInaccuracyAltSoundThreshold, &GCCSWeaponBaseVData::SetInaccuracyAltSoundThreshold)
        .addProperty("BotAudibleRange", &GCCSWeaponBaseVData::GetBotAudibleRange, &GCCSWeaponBaseVData::SetBotAudibleRange)
        .addProperty("UseRadioSubtitle", &GCCSWeaponBaseVData::GetUseRadioSubtitle, &GCCSWeaponBaseVData::SetUseRadioSubtitle)
        .addProperty("UnzoomsAfterShot", &GCCSWeaponBaseVData::GetUnzoomsAfterShot, &GCCSWeaponBaseVData::SetUnzoomsAfterShot)
        .addProperty("HideViewModelWhenZoomed", &GCCSWeaponBaseVData::GetHideViewModelWhenZoomed, &GCCSWeaponBaseVData::SetHideViewModelWhenZoomed)
        .addProperty("ZoomLevels", &GCCSWeaponBaseVData::GetZoomLevels, &GCCSWeaponBaseVData::SetZoomLevels)
        .addProperty("ZoomFOV1", &GCCSWeaponBaseVData::GetZoomFOV1, &GCCSWeaponBaseVData::SetZoomFOV1)
        .addProperty("ZoomFOV2", &GCCSWeaponBaseVData::GetZoomFOV2, &GCCSWeaponBaseVData::SetZoomFOV2)
        .addProperty("ZoomTime0", &GCCSWeaponBaseVData::GetZoomTime0, &GCCSWeaponBaseVData::SetZoomTime0)
        .addProperty("ZoomTime1", &GCCSWeaponBaseVData::GetZoomTime1, &GCCSWeaponBaseVData::SetZoomTime1)
        .addProperty("ZoomTime2", &GCCSWeaponBaseVData::GetZoomTime2, &GCCSWeaponBaseVData::SetZoomTime2)
        .addProperty("IronSightPullUpSpeed", &GCCSWeaponBaseVData::GetIronSightPullUpSpeed, &GCCSWeaponBaseVData::SetIronSightPullUpSpeed)
        .addProperty("IronSightPutDownSpeed", &GCCSWeaponBaseVData::GetIronSightPutDownSpeed, &GCCSWeaponBaseVData::SetIronSightPutDownSpeed)
        .addProperty("IronSightFOV", &GCCSWeaponBaseVData::GetIronSightFOV, &GCCSWeaponBaseVData::SetIronSightFOV)
        .addProperty("IronSightPivotForward", &GCCSWeaponBaseVData::GetIronSightPivotForward, &GCCSWeaponBaseVData::SetIronSightPivotForward)
        .addProperty("IronSightLooseness", &GCCSWeaponBaseVData::GetIronSightLooseness, &GCCSWeaponBaseVData::SetIronSightLooseness)
        .addProperty("PivotAngle", &GCCSWeaponBaseVData::GetPivotAngle, &GCCSWeaponBaseVData::SetPivotAngle)
        .addProperty("IronSightEyePos", &GCCSWeaponBaseVData::GetIronSightEyePos, &GCCSWeaponBaseVData::SetIronSightEyePos)
        .addProperty("Damage", &GCCSWeaponBaseVData::GetDamage, &GCCSWeaponBaseVData::SetDamage)
        .addProperty("HeadshotMultiplier", &GCCSWeaponBaseVData::GetHeadshotMultiplier, &GCCSWeaponBaseVData::SetHeadshotMultiplier)
        .addProperty("ArmorRatio", &GCCSWeaponBaseVData::GetArmorRatio, &GCCSWeaponBaseVData::SetArmorRatio)
        .addProperty("Penetration", &GCCSWeaponBaseVData::GetPenetration, &GCCSWeaponBaseVData::SetPenetration)
        .addProperty("Range", &GCCSWeaponBaseVData::GetRange, &GCCSWeaponBaseVData::SetRange)
        .addProperty("RangeModifier", &GCCSWeaponBaseVData::GetRangeModifier, &GCCSWeaponBaseVData::SetRangeModifier)
        .addProperty("FlinchVelocityModifierLarge", &GCCSWeaponBaseVData::GetFlinchVelocityModifierLarge, &GCCSWeaponBaseVData::SetFlinchVelocityModifierLarge)
        .addProperty("FlinchVelocityModifierSmall", &GCCSWeaponBaseVData::GetFlinchVelocityModifierSmall, &GCCSWeaponBaseVData::SetFlinchVelocityModifierSmall)
        .addProperty("RecoveryTimeCrouch", &GCCSWeaponBaseVData::GetRecoveryTimeCrouch, &GCCSWeaponBaseVData::SetRecoveryTimeCrouch)
        .addProperty("RecoveryTimeStand", &GCCSWeaponBaseVData::GetRecoveryTimeStand, &GCCSWeaponBaseVData::SetRecoveryTimeStand)
        .addProperty("RecoveryTimeCrouchFinal", &GCCSWeaponBaseVData::GetRecoveryTimeCrouchFinal, &GCCSWeaponBaseVData::SetRecoveryTimeCrouchFinal)
        .addProperty("RecoveryTimeStandFinal", &GCCSWeaponBaseVData::GetRecoveryTimeStandFinal, &GCCSWeaponBaseVData::SetRecoveryTimeStandFinal)
        .addProperty("RecoveryTransitionStartBullet", &GCCSWeaponBaseVData::GetRecoveryTransitionStartBullet, &GCCSWeaponBaseVData::SetRecoveryTransitionStartBullet)
        .addProperty("RecoveryTransitionEndBullet", &GCCSWeaponBaseVData::GetRecoveryTransitionEndBullet, &GCCSWeaponBaseVData::SetRecoveryTransitionEndBullet)
        .addProperty("ThrowVelocity", &GCCSWeaponBaseVData::GetThrowVelocity, &GCCSWeaponBaseVData::SetThrowVelocity)
        .addProperty("SmokeColor", &GCCSWeaponBaseVData::GetSmokeColor, &GCCSWeaponBaseVData::SetSmokeColor)
        .addProperty("Parent", &GCCSWeaponBaseVData::GetParent, &GCCSWeaponBaseVData::SetParent)
        .addFunction("ToPtr", &GCCSWeaponBaseVData::ToPtr)
        .addFunction("IsValid", &GCCSWeaponBaseVData::IsValid)
        .endClass();
}
GCBtNodeConditionInactive::GCBtNodeConditionInactive(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCBtNodeConditionInactive::GCBtNodeConditionInactive(void *ptr) {
    m_ptr = ptr;
}
float GCBtNodeConditionInactive::GetRoundStartThresholdSeconds() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBtNodeConditionInactive->RoundStartThresholdSeconds(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CBtNodeConditionInactive", "m_flRoundStartThresholdSeconds");
}
void GCBtNodeConditionInactive::SetRoundStartThresholdSeconds(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBtNodeConditionInactive->RoundStartThresholdSeconds(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBtNodeConditionInactive", "m_flRoundStartThresholdSeconds", false, value);
}
float GCBtNodeConditionInactive::GetSensorInactivityThresholdSeconds() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBtNodeConditionInactive->SensorInactivityThresholdSeconds(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CBtNodeConditionInactive", "m_flSensorInactivityThresholdSeconds");
}
void GCBtNodeConditionInactive::SetSensorInactivityThresholdSeconds(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBtNodeConditionInactive->SensorInactivityThresholdSeconds(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBtNodeConditionInactive", "m_flSensorInactivityThresholdSeconds", false, value);
}
GCountdownTimer GCBtNodeConditionInactive::GetSensorInactivityTimer() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBtNodeConditionInactive->SensorInactivityTimer(ptr=%p)", m_ptr));
    GCountdownTimer value(GetSchemaPtr(m_ptr, "CBtNodeConditionInactive", "m_SensorInactivityTimer"));
    return value;
}
void GCBtNodeConditionInactive::SetSensorInactivityTimer(GCountdownTimer value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBtNodeConditionInactive->SensorInactivityTimer(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'SensorInactivityTimer' is not possible.\n");
}
void* GCBtNodeConditionInactive::GetPtr() {
    return m_ptr;
}
std::string GCBtNodeConditionInactive::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCBtNodeConditionInactive::IsValid() {
    return (m_ptr != nullptr);
}
GCBtNodeCondition GCBtNodeConditionInactive::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CBtNodeConditionInactive::GetParent(ptr=%p)", m_ptr));
    GCBtNodeCondition value(m_ptr);
    return value;
}
void GCBtNodeConditionInactive::SetParent(GCBtNodeCondition value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CBtNodeConditionInactive::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCBtNodeConditionInactive(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCBtNodeConditionInactive>("CBtNodeConditionInactive")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("RoundStartThresholdSeconds", &GCBtNodeConditionInactive::GetRoundStartThresholdSeconds, &GCBtNodeConditionInactive::SetRoundStartThresholdSeconds)
        .addProperty("SensorInactivityThresholdSeconds", &GCBtNodeConditionInactive::GetSensorInactivityThresholdSeconds, &GCBtNodeConditionInactive::SetSensorInactivityThresholdSeconds)
        .addProperty("SensorInactivityTimer", &GCBtNodeConditionInactive::GetSensorInactivityTimer, &GCBtNodeConditionInactive::SetSensorInactivityTimer)
        .addProperty("Parent", &GCBtNodeConditionInactive::GetParent, &GCBtNodeConditionInactive::SetParent)
        .addFunction("ToPtr", &GCBtNodeConditionInactive::ToPtr)
        .addFunction("IsValid", &GCBtNodeConditionInactive::IsValid)
        .endClass();
}
GCSAdditionalPerRoundStats_t::GCSAdditionalPerRoundStats_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCSAdditionalPerRoundStats_t::GCSAdditionalPerRoundStats_t(void *ptr) {
    m_ptr = ptr;
}
int32_t GCSAdditionalPerRoundStats_t::GetNumChickensKilled() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSAdditionalPerRoundStats_t->NumChickensKilled(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CSAdditionalPerRoundStats_t", "m_numChickensKilled");
}
void GCSAdditionalPerRoundStats_t::SetNumChickensKilled(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSAdditionalPerRoundStats_t->NumChickensKilled(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSAdditionalPerRoundStats_t", "m_numChickensKilled", true, value);
}
int32_t GCSAdditionalPerRoundStats_t::GetKillsWhileBlind() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSAdditionalPerRoundStats_t->KillsWhileBlind(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CSAdditionalPerRoundStats_t", "m_killsWhileBlind");
}
void GCSAdditionalPerRoundStats_t::SetKillsWhileBlind(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSAdditionalPerRoundStats_t->KillsWhileBlind(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSAdditionalPerRoundStats_t", "m_killsWhileBlind", true, value);
}
int32_t GCSAdditionalPerRoundStats_t::GetBombCarrierkills() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSAdditionalPerRoundStats_t->BombCarrierkills(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CSAdditionalPerRoundStats_t", "m_bombCarrierkills");
}
void GCSAdditionalPerRoundStats_t::SetBombCarrierkills(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSAdditionalPerRoundStats_t->BombCarrierkills(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSAdditionalPerRoundStats_t", "m_bombCarrierkills", true, value);
}
int32_t GCSAdditionalPerRoundStats_t::GetBurnDamageInflicted() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSAdditionalPerRoundStats_t->BurnDamageInflicted(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CSAdditionalPerRoundStats_t", "m_iBurnDamageInflicted");
}
void GCSAdditionalPerRoundStats_t::SetBurnDamageInflicted(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSAdditionalPerRoundStats_t->BurnDamageInflicted(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSAdditionalPerRoundStats_t", "m_iBurnDamageInflicted", true, value);
}
int32_t GCSAdditionalPerRoundStats_t::GetBlastDamageInflicted() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSAdditionalPerRoundStats_t->BlastDamageInflicted(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CSAdditionalPerRoundStats_t", "m_iBlastDamageInflicted");
}
void GCSAdditionalPerRoundStats_t::SetBlastDamageInflicted(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSAdditionalPerRoundStats_t->BlastDamageInflicted(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSAdditionalPerRoundStats_t", "m_iBlastDamageInflicted", true, value);
}
int32_t GCSAdditionalPerRoundStats_t::GetDinks() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSAdditionalPerRoundStats_t->Dinks(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CSAdditionalPerRoundStats_t", "m_iDinks");
}
void GCSAdditionalPerRoundStats_t::SetDinks(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSAdditionalPerRoundStats_t->Dinks(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSAdditionalPerRoundStats_t", "m_iDinks", true, value);
}
void* GCSAdditionalPerRoundStats_t::GetPtr() {
    return m_ptr;
}
std::string GCSAdditionalPerRoundStats_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCSAdditionalPerRoundStats_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCSAdditionalPerRoundStats_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCSAdditionalPerRoundStats_t>("CSAdditionalPerRoundStats_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("NumChickensKilled", &GCSAdditionalPerRoundStats_t::GetNumChickensKilled, &GCSAdditionalPerRoundStats_t::SetNumChickensKilled)
        .addProperty("KillsWhileBlind", &GCSAdditionalPerRoundStats_t::GetKillsWhileBlind, &GCSAdditionalPerRoundStats_t::SetKillsWhileBlind)
        .addProperty("BombCarrierkills", &GCSAdditionalPerRoundStats_t::GetBombCarrierkills, &GCSAdditionalPerRoundStats_t::SetBombCarrierkills)
        .addProperty("BurnDamageInflicted", &GCSAdditionalPerRoundStats_t::GetBurnDamageInflicted, &GCSAdditionalPerRoundStats_t::SetBurnDamageInflicted)
        .addProperty("BlastDamageInflicted", &GCSAdditionalPerRoundStats_t::GetBlastDamageInflicted, &GCSAdditionalPerRoundStats_t::SetBlastDamageInflicted)
        .addProperty("Dinks", &GCSAdditionalPerRoundStats_t::GetDinks, &GCSAdditionalPerRoundStats_t::SetDinks)
        .addFunction("ToPtr", &GCSAdditionalPerRoundStats_t::ToPtr)
        .addFunction("IsValid", &GCSAdditionalPerRoundStats_t::IsValid)
        .endClass();
}
GActiveModelConfig_t::GActiveModelConfig_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GActiveModelConfig_t::GActiveModelConfig_t(void *ptr) {
    m_ptr = ptr;
}
GModelConfigHandle_t GActiveModelConfig_t::GetHandle() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ActiveModelConfig_t->Handle(ptr=%p)", m_ptr));
    GModelConfigHandle_t value(GetSchemaPtr(m_ptr, "ActiveModelConfig_t", "m_Handle"));
    return value;
}
void GActiveModelConfig_t::SetHandle(GModelConfigHandle_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ActiveModelConfig_t->Handle(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Handle' is not possible.\n");
}
std::string GActiveModelConfig_t::GetName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ActiveModelConfig_t->Name(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "ActiveModelConfig_t", "m_Name").String();
}
void GActiveModelConfig_t::SetName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ActiveModelConfig_t->Name(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "ActiveModelConfig_t", "m_Name", true, CUtlSymbolLarge(value.c_str()));
}
std::vector<GCBaseModelEntity> GActiveModelConfig_t::GetAssociatedEntities() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ActiveModelConfig_t->AssociatedEntities(ptr=%p)", m_ptr));
    CUtlVector<CHandle<CEntityInstance>>* vec = GetSchemaValue<CUtlVector<CHandle<CEntityInstance>>*>(m_ptr, "ActiveModelConfig_t", "m_AssociatedEntities"); 
    std::vector<GCBaseModelEntity> outVec; 
    for(int i = 0; i < vec->Count(); i++) { 
        outVec.push_back(GCBaseModelEntity((void*)(vec->Element(i).Get()))); 
    } 
    return outVec;
}
void GActiveModelConfig_t::SetAssociatedEntities(std::vector<GCBaseModelEntity> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ActiveModelConfig_t->AssociatedEntities(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'AssociatedEntities' is not possible.\n");
}
std::vector<CUtlSymbolLarge> GActiveModelConfig_t::GetAssociatedEntityNames() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ActiveModelConfig_t->AssociatedEntityNames(ptr=%p)", m_ptr));
    CUtlVector<CUtlSymbolLarge>* vec = GetSchemaValue<CUtlVector<CUtlSymbolLarge>*>(m_ptr, "ActiveModelConfig_t", "m_AssociatedEntityNames"); std::vector<CUtlSymbolLarge> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GActiveModelConfig_t::SetAssociatedEntityNames(std::vector<CUtlSymbolLarge> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ActiveModelConfig_t->AssociatedEntityNames(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<CUtlSymbolLarge>(m_ptr, "ActiveModelConfig_t", "m_AssociatedEntityNames", true, value);
}
void* GActiveModelConfig_t::GetPtr() {
    return m_ptr;
}
std::string GActiveModelConfig_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GActiveModelConfig_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassActiveModelConfig_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GActiveModelConfig_t>("ActiveModelConfig_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Handle", &GActiveModelConfig_t::GetHandle, &GActiveModelConfig_t::SetHandle)
        .addProperty("Name", &GActiveModelConfig_t::GetName, &GActiveModelConfig_t::SetName)
        .addProperty("AssociatedEntities", &GActiveModelConfig_t::GetAssociatedEntities, &GActiveModelConfig_t::SetAssociatedEntities)
        .addProperty("AssociatedEntityNames", &GActiveModelConfig_t::GetAssociatedEntityNames, &GActiveModelConfig_t::SetAssociatedEntityNames)
        .addFunction("ToPtr", &GActiveModelConfig_t::ToPtr)
        .addFunction("IsValid", &GActiveModelConfig_t::IsValid)
        .endClass();
}
GCPrecipitationVData::GCPrecipitationVData(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPrecipitationVData::GCPrecipitationVData(void *ptr) {
    m_ptr = ptr;
}
float GCPrecipitationVData::GetInnerDistance() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPrecipitationVData->InnerDistance(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CPrecipitationVData", "m_flInnerDistance");
}
void GCPrecipitationVData::SetInnerDistance(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPrecipitationVData->InnerDistance(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPrecipitationVData", "m_flInnerDistance", false, value);
}
uint64_t GCPrecipitationVData::GetAttachType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPrecipitationVData->AttachType(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CPrecipitationVData", "m_nAttachType");
}
void GCPrecipitationVData::SetAttachType(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPrecipitationVData->AttachType(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPrecipitationVData", "m_nAttachType", false, value);
}
bool GCPrecipitationVData::GetBatchSameVolumeType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPrecipitationVData->BatchSameVolumeType(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CPrecipitationVData", "m_bBatchSameVolumeType");
}
void GCPrecipitationVData::SetBatchSameVolumeType(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPrecipitationVData->BatchSameVolumeType(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPrecipitationVData", "m_bBatchSameVolumeType", false, value);
}
int32_t GCPrecipitationVData::GetRTEnvCP() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPrecipitationVData->RTEnvCP(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CPrecipitationVData", "m_nRTEnvCP");
}
void GCPrecipitationVData::SetRTEnvCP(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPrecipitationVData->RTEnvCP(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPrecipitationVData", "m_nRTEnvCP", false, value);
}
int32_t GCPrecipitationVData::GetRTEnvCPComponent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPrecipitationVData->RTEnvCPComponent(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CPrecipitationVData", "m_nRTEnvCPComponent");
}
void GCPrecipitationVData::SetRTEnvCPComponent(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPrecipitationVData->RTEnvCPComponent(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPrecipitationVData", "m_nRTEnvCPComponent", false, value);
}
std::string GCPrecipitationVData::GetModifier() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPrecipitationVData->Modifier(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlString>(m_ptr, "CPrecipitationVData", "m_szModifier").Get();
}
void GCPrecipitationVData::SetModifier(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPrecipitationVData->Modifier(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPrecipitationVData", "m_szModifier", false, CUtlString(value.c_str()));
}
void* GCPrecipitationVData::GetPtr() {
    return m_ptr;
}
std::string GCPrecipitationVData::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPrecipitationVData::IsValid() {
    return (m_ptr != nullptr);
}
GCEntitySubclassVDataBase GCPrecipitationVData::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPrecipitationVData::GetParent(ptr=%p)", m_ptr));
    GCEntitySubclassVDataBase value(m_ptr);
    return value;
}
void GCPrecipitationVData::SetParent(GCEntitySubclassVDataBase value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPrecipitationVData::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCPrecipitationVData(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPrecipitationVData>("CPrecipitationVData")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("InnerDistance", &GCPrecipitationVData::GetInnerDistance, &GCPrecipitationVData::SetInnerDistance)
        .addProperty("AttachType", &GCPrecipitationVData::GetAttachType, &GCPrecipitationVData::SetAttachType)
        .addProperty("BatchSameVolumeType", &GCPrecipitationVData::GetBatchSameVolumeType, &GCPrecipitationVData::SetBatchSameVolumeType)
        .addProperty("RTEnvCP", &GCPrecipitationVData::GetRTEnvCP, &GCPrecipitationVData::SetRTEnvCP)
        .addProperty("RTEnvCPComponent", &GCPrecipitationVData::GetRTEnvCPComponent, &GCPrecipitationVData::SetRTEnvCPComponent)
        .addProperty("Modifier", &GCPrecipitationVData::GetModifier, &GCPrecipitationVData::SetModifier)
        .addProperty("Parent", &GCPrecipitationVData::GetParent, &GCPrecipitationVData::SetParent)
        .addFunction("ToPtr", &GCPrecipitationVData::ToPtr)
        .addFunction("IsValid", &GCPrecipitationVData::IsValid)
        .endClass();
}
GCBreakableStageHelper::GCBreakableStageHelper(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCBreakableStageHelper::GCBreakableStageHelper(void *ptr) {
    m_ptr = ptr;
}
int32_t GCBreakableStageHelper::GetCurrentStage() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBreakableStageHelper->CurrentStage(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CBreakableStageHelper", "m_nCurrentStage");
}
void GCBreakableStageHelper::SetCurrentStage(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBreakableStageHelper->CurrentStage(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBreakableStageHelper", "m_nCurrentStage", false, value);
}
int32_t GCBreakableStageHelper::GetStageCount() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CBreakableStageHelper->StageCount(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CBreakableStageHelper", "m_nStageCount");
}
void GCBreakableStageHelper::SetStageCount(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CBreakableStageHelper->StageCount(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CBreakableStageHelper", "m_nStageCount", false, value);
}
void* GCBreakableStageHelper::GetPtr() {
    return m_ptr;
}
std::string GCBreakableStageHelper::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCBreakableStageHelper::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCBreakableStageHelper(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCBreakableStageHelper>("CBreakableStageHelper")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("CurrentStage", &GCBreakableStageHelper::GetCurrentStage, &GCBreakableStageHelper::SetCurrentStage)
        .addProperty("StageCount", &GCBreakableStageHelper::GetStageCount, &GCBreakableStageHelper::SetStageCount)
        .addFunction("ToPtr", &GCBreakableStageHelper::ToPtr)
        .addFunction("IsValid", &GCBreakableStageHelper::IsValid)
        .endClass();
}
GCNavVolumeBreadthFirstSearch::GCNavVolumeBreadthFirstSearch(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCNavVolumeBreadthFirstSearch::GCNavVolumeBreadthFirstSearch(void *ptr) {
    m_ptr = ptr;
}
Vector GCNavVolumeBreadthFirstSearch::GetStartPos() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNavVolumeBreadthFirstSearch->StartPos(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CNavVolumeBreadthFirstSearch", "m_vStartPos");
}
void GCNavVolumeBreadthFirstSearch::SetStartPos(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNavVolumeBreadthFirstSearch->StartPos(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNavVolumeBreadthFirstSearch", "m_vStartPos", false, value);
}
float GCNavVolumeBreadthFirstSearch::GetSearchDist() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNavVolumeBreadthFirstSearch->SearchDist(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CNavVolumeBreadthFirstSearch", "m_flSearchDist");
}
void GCNavVolumeBreadthFirstSearch::SetSearchDist(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNavVolumeBreadthFirstSearch->SearchDist(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNavVolumeBreadthFirstSearch", "m_flSearchDist", false, value);
}
void* GCNavVolumeBreadthFirstSearch::GetPtr() {
    return m_ptr;
}
std::string GCNavVolumeBreadthFirstSearch::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCNavVolumeBreadthFirstSearch::IsValid() {
    return (m_ptr != nullptr);
}
GCNavVolumeCalculatedVector GCNavVolumeBreadthFirstSearch::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CNavVolumeBreadthFirstSearch::GetParent(ptr=%p)", m_ptr));
    GCNavVolumeCalculatedVector value(m_ptr);
    return value;
}
void GCNavVolumeBreadthFirstSearch::SetParent(GCNavVolumeCalculatedVector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CNavVolumeBreadthFirstSearch::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCNavVolumeBreadthFirstSearch(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCNavVolumeBreadthFirstSearch>("CNavVolumeBreadthFirstSearch")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("StartPos", &GCNavVolumeBreadthFirstSearch::GetStartPos, &GCNavVolumeBreadthFirstSearch::SetStartPos)
        .addProperty("SearchDist", &GCNavVolumeBreadthFirstSearch::GetSearchDist, &GCNavVolumeBreadthFirstSearch::SetSearchDist)
        .addProperty("Parent", &GCNavVolumeBreadthFirstSearch::GetParent, &GCNavVolumeBreadthFirstSearch::SetParent)
        .addFunction("ToPtr", &GCNavVolumeBreadthFirstSearch::ToPtr)
        .addFunction("IsValid", &GCNavVolumeBreadthFirstSearch::IsValid)
        .endClass();
}
GCAmbientGeneric::GCAmbientGeneric(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCAmbientGeneric::GCAmbientGeneric(void *ptr) {
    m_ptr = ptr;
}
float GCAmbientGeneric::GetRadius() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAmbientGeneric->Radius(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CAmbientGeneric", "m_radius");
}
void GCAmbientGeneric::SetRadius(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAmbientGeneric->Radius(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CAmbientGeneric", "m_radius", false, value);
}
float GCAmbientGeneric::GetMaxRadius() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAmbientGeneric->MaxRadius(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CAmbientGeneric", "m_flMaxRadius");
}
void GCAmbientGeneric::SetMaxRadius(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAmbientGeneric->MaxRadius(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CAmbientGeneric", "m_flMaxRadius", false, value);
}
uint64_t GCAmbientGeneric::GetSoundLevel() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAmbientGeneric->SoundLevel(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CAmbientGeneric", "m_iSoundLevel");
}
void GCAmbientGeneric::SetSoundLevel(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAmbientGeneric->SoundLevel(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CAmbientGeneric", "m_iSoundLevel", false, value);
}
Gdynpitchvol_t GCAmbientGeneric::GetDpv() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAmbientGeneric->Dpv(ptr=%p)", m_ptr));
    Gdynpitchvol_t value(GetSchemaPtr(m_ptr, "CAmbientGeneric", "m_dpv"));
    return value;
}
void GCAmbientGeneric::SetDpv(Gdynpitchvol_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAmbientGeneric->Dpv(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Dpv' is not possible.\n");
}
bool GCAmbientGeneric::GetActive() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAmbientGeneric->Active(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CAmbientGeneric", "m_fActive");
}
void GCAmbientGeneric::SetActive(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAmbientGeneric->Active(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CAmbientGeneric", "m_fActive", false, value);
}
bool GCAmbientGeneric::GetLooping() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAmbientGeneric->Looping(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CAmbientGeneric", "m_fLooping");
}
void GCAmbientGeneric::SetLooping(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAmbientGeneric->Looping(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CAmbientGeneric", "m_fLooping", false, value);
}
std::string GCAmbientGeneric::GetSound() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAmbientGeneric->Sound(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CAmbientGeneric", "m_iszSound").String();
}
void GCAmbientGeneric::SetSound(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAmbientGeneric->Sound(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CAmbientGeneric", "m_iszSound", false, CUtlSymbolLarge(value.c_str()));
}
std::string GCAmbientGeneric::GetSourceEntName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAmbientGeneric->SourceEntName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CAmbientGeneric", "m_sSourceEntName").String();
}
void GCAmbientGeneric::SetSourceEntName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAmbientGeneric->SourceEntName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CAmbientGeneric", "m_sSourceEntName", false, CUtlSymbolLarge(value.c_str()));
}
GCBaseEntity GCAmbientGeneric::GetSoundSource() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAmbientGeneric->SoundSource(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "CAmbientGeneric", "m_hSoundSource").Get()));
    return value;
}
void GCAmbientGeneric::SetSoundSource(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAmbientGeneric->SoundSource(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'SoundSource' is not possible.\n");
}
int GCAmbientGeneric::GetSoundSourceEntIndex() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAmbientGeneric->SoundSourceEntIndex(ptr=%p)", m_ptr));
    return GetSchemaValue<CEntityIndex>(m_ptr, "CAmbientGeneric", "m_nSoundSourceEntIndex").Get();
}
void GCAmbientGeneric::SetSoundSourceEntIndex(int value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAmbientGeneric->SoundSourceEntIndex(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CAmbientGeneric", "m_nSoundSourceEntIndex", false, CEntityIndex(value));
}
void* GCAmbientGeneric::GetPtr() {
    return m_ptr;
}
std::string GCAmbientGeneric::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCAmbientGeneric::IsValid() {
    return (m_ptr != nullptr);
}
GCPointEntity GCAmbientGeneric::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CAmbientGeneric::GetParent(ptr=%p)", m_ptr));
    GCPointEntity value(m_ptr);
    return value;
}
void GCAmbientGeneric::SetParent(GCPointEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CAmbientGeneric::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCAmbientGeneric(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCAmbientGeneric>("CAmbientGeneric")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Radius", &GCAmbientGeneric::GetRadius, &GCAmbientGeneric::SetRadius)
        .addProperty("MaxRadius", &GCAmbientGeneric::GetMaxRadius, &GCAmbientGeneric::SetMaxRadius)
        .addProperty("SoundLevel", &GCAmbientGeneric::GetSoundLevel, &GCAmbientGeneric::SetSoundLevel)
        .addProperty("Dpv", &GCAmbientGeneric::GetDpv, &GCAmbientGeneric::SetDpv)
        .addProperty("Active", &GCAmbientGeneric::GetActive, &GCAmbientGeneric::SetActive)
        .addProperty("Looping", &GCAmbientGeneric::GetLooping, &GCAmbientGeneric::SetLooping)
        .addProperty("Sound", &GCAmbientGeneric::GetSound, &GCAmbientGeneric::SetSound)
        .addProperty("SourceEntName", &GCAmbientGeneric::GetSourceEntName, &GCAmbientGeneric::SetSourceEntName)
        .addProperty("SoundSource", &GCAmbientGeneric::GetSoundSource, &GCAmbientGeneric::SetSoundSource)
        .addProperty("SoundSourceEntIndex", &GCAmbientGeneric::GetSoundSourceEntIndex, &GCAmbientGeneric::SetSoundSourceEntIndex)
        .addProperty("Parent", &GCAmbientGeneric::GetParent, &GCAmbientGeneric::SetParent)
        .addFunction("ToPtr", &GCAmbientGeneric::ToPtr)
        .addFunction("IsValid", &GCAmbientGeneric::IsValid)
        .endClass();
}
GCSAdditionalMatchStats_t::GCSAdditionalMatchStats_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCSAdditionalMatchStats_t::GCSAdditionalMatchStats_t(void *ptr) {
    m_ptr = ptr;
}
int32_t GCSAdditionalMatchStats_t::GetNumRoundsSurvived() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSAdditionalMatchStats_t->NumRoundsSurvived(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CSAdditionalMatchStats_t", "m_numRoundsSurvived");
}
void GCSAdditionalMatchStats_t::SetNumRoundsSurvived(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSAdditionalMatchStats_t->NumRoundsSurvived(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSAdditionalMatchStats_t", "m_numRoundsSurvived", true, value);
}
int32_t GCSAdditionalMatchStats_t::GetMaxNumRoundsSurvived() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSAdditionalMatchStats_t->MaxNumRoundsSurvived(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CSAdditionalMatchStats_t", "m_maxNumRoundsSurvived");
}
void GCSAdditionalMatchStats_t::SetMaxNumRoundsSurvived(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSAdditionalMatchStats_t->MaxNumRoundsSurvived(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSAdditionalMatchStats_t", "m_maxNumRoundsSurvived", true, value);
}
int32_t GCSAdditionalMatchStats_t::GetNumRoundsSurvivedTotal() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSAdditionalMatchStats_t->NumRoundsSurvivedTotal(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CSAdditionalMatchStats_t", "m_numRoundsSurvivedTotal");
}
void GCSAdditionalMatchStats_t::SetNumRoundsSurvivedTotal(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSAdditionalMatchStats_t->NumRoundsSurvivedTotal(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSAdditionalMatchStats_t", "m_numRoundsSurvivedTotal", true, value);
}
int32_t GCSAdditionalMatchStats_t::GetRoundsWonWithoutPurchase() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSAdditionalMatchStats_t->RoundsWonWithoutPurchase(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CSAdditionalMatchStats_t", "m_iRoundsWonWithoutPurchase");
}
void GCSAdditionalMatchStats_t::SetRoundsWonWithoutPurchase(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSAdditionalMatchStats_t->RoundsWonWithoutPurchase(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSAdditionalMatchStats_t", "m_iRoundsWonWithoutPurchase", true, value);
}
int32_t GCSAdditionalMatchStats_t::GetRoundsWonWithoutPurchaseTotal() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSAdditionalMatchStats_t->RoundsWonWithoutPurchaseTotal(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CSAdditionalMatchStats_t", "m_iRoundsWonWithoutPurchaseTotal");
}
void GCSAdditionalMatchStats_t::SetRoundsWonWithoutPurchaseTotal(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSAdditionalMatchStats_t->RoundsWonWithoutPurchaseTotal(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSAdditionalMatchStats_t", "m_iRoundsWonWithoutPurchaseTotal", true, value);
}
int32_t GCSAdditionalMatchStats_t::GetNumFirstKills() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSAdditionalMatchStats_t->NumFirstKills(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CSAdditionalMatchStats_t", "m_numFirstKills");
}
void GCSAdditionalMatchStats_t::SetNumFirstKills(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSAdditionalMatchStats_t->NumFirstKills(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSAdditionalMatchStats_t", "m_numFirstKills", true, value);
}
int32_t GCSAdditionalMatchStats_t::GetNumClutchKills() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSAdditionalMatchStats_t->NumClutchKills(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CSAdditionalMatchStats_t", "m_numClutchKills");
}
void GCSAdditionalMatchStats_t::SetNumClutchKills(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSAdditionalMatchStats_t->NumClutchKills(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSAdditionalMatchStats_t", "m_numClutchKills", true, value);
}
int32_t GCSAdditionalMatchStats_t::GetNumPistolKills() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSAdditionalMatchStats_t->NumPistolKills(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CSAdditionalMatchStats_t", "m_numPistolKills");
}
void GCSAdditionalMatchStats_t::SetNumPistolKills(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSAdditionalMatchStats_t->NumPistolKills(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSAdditionalMatchStats_t", "m_numPistolKills", true, value);
}
int32_t GCSAdditionalMatchStats_t::GetNumSniperKills() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSAdditionalMatchStats_t->NumSniperKills(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CSAdditionalMatchStats_t", "m_numSniperKills");
}
void GCSAdditionalMatchStats_t::SetNumSniperKills(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSAdditionalMatchStats_t->NumSniperKills(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSAdditionalMatchStats_t", "m_numSniperKills", true, value);
}
int32_t GCSAdditionalMatchStats_t::GetNumSuicides() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSAdditionalMatchStats_t->NumSuicides(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CSAdditionalMatchStats_t", "m_iNumSuicides");
}
void GCSAdditionalMatchStats_t::SetNumSuicides(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSAdditionalMatchStats_t->NumSuicides(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSAdditionalMatchStats_t", "m_iNumSuicides", true, value);
}
int32_t GCSAdditionalMatchStats_t::GetNumTeamKills() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSAdditionalMatchStats_t->NumTeamKills(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CSAdditionalMatchStats_t", "m_iNumTeamKills");
}
void GCSAdditionalMatchStats_t::SetNumTeamKills(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSAdditionalMatchStats_t->NumTeamKills(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSAdditionalMatchStats_t", "m_iNumTeamKills", true, value);
}
int32_t GCSAdditionalMatchStats_t::GetTeamDamage() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSAdditionalMatchStats_t->TeamDamage(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CSAdditionalMatchStats_t", "m_iTeamDamage");
}
void GCSAdditionalMatchStats_t::SetTeamDamage(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSAdditionalMatchStats_t->TeamDamage(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSAdditionalMatchStats_t", "m_iTeamDamage", true, value);
}
void* GCSAdditionalMatchStats_t::GetPtr() {
    return m_ptr;
}
std::string GCSAdditionalMatchStats_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCSAdditionalMatchStats_t::IsValid() {
    return (m_ptr != nullptr);
}
GCSAdditionalPerRoundStats_t GCSAdditionalMatchStats_t::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSAdditionalMatchStats_t::GetParent(ptr=%p)", m_ptr));
    GCSAdditionalPerRoundStats_t value(m_ptr);
    return value;
}
void GCSAdditionalMatchStats_t::SetParent(GCSAdditionalPerRoundStats_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CSAdditionalMatchStats_t::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCSAdditionalMatchStats_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCSAdditionalMatchStats_t>("CSAdditionalMatchStats_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("NumRoundsSurvived", &GCSAdditionalMatchStats_t::GetNumRoundsSurvived, &GCSAdditionalMatchStats_t::SetNumRoundsSurvived)
        .addProperty("MaxNumRoundsSurvived", &GCSAdditionalMatchStats_t::GetMaxNumRoundsSurvived, &GCSAdditionalMatchStats_t::SetMaxNumRoundsSurvived)
        .addProperty("NumRoundsSurvivedTotal", &GCSAdditionalMatchStats_t::GetNumRoundsSurvivedTotal, &GCSAdditionalMatchStats_t::SetNumRoundsSurvivedTotal)
        .addProperty("RoundsWonWithoutPurchase", &GCSAdditionalMatchStats_t::GetRoundsWonWithoutPurchase, &GCSAdditionalMatchStats_t::SetRoundsWonWithoutPurchase)
        .addProperty("RoundsWonWithoutPurchaseTotal", &GCSAdditionalMatchStats_t::GetRoundsWonWithoutPurchaseTotal, &GCSAdditionalMatchStats_t::SetRoundsWonWithoutPurchaseTotal)
        .addProperty("NumFirstKills", &GCSAdditionalMatchStats_t::GetNumFirstKills, &GCSAdditionalMatchStats_t::SetNumFirstKills)
        .addProperty("NumClutchKills", &GCSAdditionalMatchStats_t::GetNumClutchKills, &GCSAdditionalMatchStats_t::SetNumClutchKills)
        .addProperty("NumPistolKills", &GCSAdditionalMatchStats_t::GetNumPistolKills, &GCSAdditionalMatchStats_t::SetNumPistolKills)
        .addProperty("NumSniperKills", &GCSAdditionalMatchStats_t::GetNumSniperKills, &GCSAdditionalMatchStats_t::SetNumSniperKills)
        .addProperty("NumSuicides", &GCSAdditionalMatchStats_t::GetNumSuicides, &GCSAdditionalMatchStats_t::SetNumSuicides)
        .addProperty("NumTeamKills", &GCSAdditionalMatchStats_t::GetNumTeamKills, &GCSAdditionalMatchStats_t::SetNumTeamKills)
        .addProperty("TeamDamage", &GCSAdditionalMatchStats_t::GetTeamDamage, &GCSAdditionalMatchStats_t::SetTeamDamage)
        .addProperty("Parent", &GCSAdditionalMatchStats_t::GetParent, &GCSAdditionalMatchStats_t::SetParent)
        .addFunction("ToPtr", &GCSAdditionalMatchStats_t::ToPtr)
        .addFunction("IsValid", &GCSAdditionalMatchStats_t::IsValid)
        .endClass();
}
GIRagdoll::GIRagdoll(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GIRagdoll::GIRagdoll(void *ptr) {
    m_ptr = ptr;
}
void* GIRagdoll::GetPtr() {
    return m_ptr;
}
std::string GIRagdoll::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GIRagdoll::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassIRagdoll(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GIRagdoll>("IRagdoll")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addFunction("ToPtr", &GIRagdoll::ToPtr)
        .addFunction("IsValid", &GIRagdoll::IsValid)
        .endClass();
}
GCGameText::GCGameText(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCGameText::GCGameText(void *ptr) {
    m_ptr = ptr;
}
std::string GCGameText::GetMessage() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CGameText->Message(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlSymbolLarge>(m_ptr, "CGameText", "m_iszMessage").String();
}
void GCGameText::SetMessage(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CGameText->Message(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CGameText", "m_iszMessage", false, CUtlSymbolLarge(value.c_str()));
}
Ghudtextparms_t GCGameText::GetTextParms() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CGameText->TextParms(ptr=%p)", m_ptr));
    Ghudtextparms_t value(GetSchemaPtr(m_ptr, "CGameText", "m_textParms"));
    return value;
}
void GCGameText::SetTextParms(Ghudtextparms_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CGameText->TextParms(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'TextParms' is not possible.\n");
}
void* GCGameText::GetPtr() {
    return m_ptr;
}
std::string GCGameText::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCGameText::IsValid() {
    return (m_ptr != nullptr);
}
GCRulePointEntity GCGameText::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CGameText::GetParent(ptr=%p)", m_ptr));
    GCRulePointEntity value(m_ptr);
    return value;
}
void GCGameText::SetParent(GCRulePointEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CGameText::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCGameText(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCGameText>("CGameText")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Message", &GCGameText::GetMessage, &GCGameText::SetMessage)
        .addProperty("TextParms", &GCGameText::GetTextParms, &GCGameText::SetTextParms)
        .addProperty("Parent", &GCGameText::GetParent, &GCGameText::SetParent)
        .addFunction("ToPtr", &GCGameText::ToPtr)
        .addFunction("IsValid", &GCGameText::IsValid)
        .endClass();
}
GCInfoInstructorHintBombTargetB::GCInfoInstructorHintBombTargetB(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCInfoInstructorHintBombTargetB::GCInfoInstructorHintBombTargetB(void *ptr) {
    m_ptr = ptr;
}
void* GCInfoInstructorHintBombTargetB::GetPtr() {
    return m_ptr;
}
std::string GCInfoInstructorHintBombTargetB::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCInfoInstructorHintBombTargetB::IsValid() {
    return (m_ptr != nullptr);
}
GCPointEntity GCInfoInstructorHintBombTargetB::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CInfoInstructorHintBombTargetB::GetParent(ptr=%p)", m_ptr));
    GCPointEntity value(m_ptr);
    return value;
}
void GCInfoInstructorHintBombTargetB::SetParent(GCPointEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CInfoInstructorHintBombTargetB::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCInfoInstructorHintBombTargetB(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCInfoInstructorHintBombTargetB>("CInfoInstructorHintBombTargetB")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCInfoInstructorHintBombTargetB::GetParent, &GCInfoInstructorHintBombTargetB::SetParent)
        .addFunction("ToPtr", &GCInfoInstructorHintBombTargetB::ToPtr)
        .addFunction("IsValid", &GCInfoInstructorHintBombTargetB::IsValid)
        .endClass();
}
GCNavVolumeAll::GCNavVolumeAll(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCNavVolumeAll::GCNavVolumeAll(void *ptr) {
    m_ptr = ptr;
}
void* GCNavVolumeAll::GetPtr() {
    return m_ptr;
}
std::string GCNavVolumeAll::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCNavVolumeAll::IsValid() {
    return (m_ptr != nullptr);
}
GCNavVolumeVector GCNavVolumeAll::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CNavVolumeAll::GetParent(ptr=%p)", m_ptr));
    GCNavVolumeVector value(m_ptr);
    return value;
}
void GCNavVolumeAll::SetParent(GCNavVolumeVector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CNavVolumeAll::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCNavVolumeAll(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCNavVolumeAll>("CNavVolumeAll")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCNavVolumeAll::GetParent, &GCNavVolumeAll::SetParent)
        .addFunction("ToPtr", &GCNavVolumeAll::ToPtr)
        .addFunction("IsValid", &GCNavVolumeAll::IsValid)
        .endClass();
}
GCNavVolumeSphericalShell::GCNavVolumeSphericalShell(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCNavVolumeSphericalShell::GCNavVolumeSphericalShell(void *ptr) {
    m_ptr = ptr;
}
float GCNavVolumeSphericalShell::GetRadiusInner() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNavVolumeSphericalShell->RadiusInner(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CNavVolumeSphericalShell", "m_flRadiusInner");
}
void GCNavVolumeSphericalShell::SetRadiusInner(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNavVolumeSphericalShell->RadiusInner(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNavVolumeSphericalShell", "m_flRadiusInner", false, value);
}
void* GCNavVolumeSphericalShell::GetPtr() {
    return m_ptr;
}
std::string GCNavVolumeSphericalShell::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCNavVolumeSphericalShell::IsValid() {
    return (m_ptr != nullptr);
}
GCNavVolumeSphere GCNavVolumeSphericalShell::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CNavVolumeSphericalShell::GetParent(ptr=%p)", m_ptr));
    GCNavVolumeSphere value(m_ptr);
    return value;
}
void GCNavVolumeSphericalShell::SetParent(GCNavVolumeSphere value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CNavVolumeSphericalShell::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCNavVolumeSphericalShell(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCNavVolumeSphericalShell>("CNavVolumeSphericalShell")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("RadiusInner", &GCNavVolumeSphericalShell::GetRadiusInner, &GCNavVolumeSphericalShell::SetRadiusInner)
        .addProperty("Parent", &GCNavVolumeSphericalShell::GetParent, &GCNavVolumeSphericalShell::SetParent)
        .addFunction("ToPtr", &GCNavVolumeSphericalShell::ToPtr)
        .addFunction("IsValid", &GCNavVolumeSphericalShell::IsValid)
        .endClass();
}
GRelationshipOverride_t::GRelationshipOverride_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GRelationshipOverride_t::GRelationshipOverride_t(void *ptr) {
    m_ptr = ptr;
}
GCBaseEntity GRelationshipOverride_t::GetEntity() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: RelationshipOverride_t->Entity(ptr=%p)", m_ptr));
    GCBaseEntity value((void*)(GetSchemaValue<CHandle<CEntityInstance>>(m_ptr, "RelationshipOverride_t", "entity").Get()));
    return value;
}
void GRelationshipOverride_t::SetEntity(GCBaseEntity value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: RelationshipOverride_t->Entity(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Entity' is not possible.\n");
}
uint64_t GRelationshipOverride_t::GetClassType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: RelationshipOverride_t->ClassType(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "RelationshipOverride_t", "classType");
}
void GRelationshipOverride_t::SetClassType(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: RelationshipOverride_t->ClassType(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "RelationshipOverride_t", "classType", true, value);
}
void* GRelationshipOverride_t::GetPtr() {
    return m_ptr;
}
std::string GRelationshipOverride_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GRelationshipOverride_t::IsValid() {
    return (m_ptr != nullptr);
}
GRelationship_t GRelationshipOverride_t::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("RelationshipOverride_t::GetParent(ptr=%p)", m_ptr));
    GRelationship_t value(m_ptr);
    return value;
}
void GRelationshipOverride_t::SetParent(GRelationship_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("RelationshipOverride_t::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassRelationshipOverride_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GRelationshipOverride_t>("RelationshipOverride_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Entity", &GRelationshipOverride_t::GetEntity, &GRelationshipOverride_t::SetEntity)
        .addProperty("ClassType", &GRelationshipOverride_t::GetClassType, &GRelationshipOverride_t::SetClassType)
        .addProperty("Parent", &GRelationshipOverride_t::GetParent, &GRelationshipOverride_t::SetParent)
        .addFunction("ToPtr", &GRelationshipOverride_t::ToPtr)
        .addFunction("IsValid", &GRelationshipOverride_t::IsValid)
        .endClass();
}
GParticleAttributeIndex_t::GParticleAttributeIndex_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GParticleAttributeIndex_t::GParticleAttributeIndex_t(void *ptr) {
    m_ptr = ptr;
}
int32_t GParticleAttributeIndex_t::GetValue() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ParticleAttributeIndex_t->Value(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "ParticleAttributeIndex_t", "m_Value");
}
void GParticleAttributeIndex_t::SetValue(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ParticleAttributeIndex_t->Value(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "ParticleAttributeIndex_t", "m_Value", true, value);
}
void* GParticleAttributeIndex_t::GetPtr() {
    return m_ptr;
}
std::string GParticleAttributeIndex_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GParticleAttributeIndex_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassParticleAttributeIndex_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GParticleAttributeIndex_t>("ParticleAttributeIndex_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Value", &GParticleAttributeIndex_t::GetValue, &GParticleAttributeIndex_t::SetValue)
        .addFunction("ToPtr", &GParticleAttributeIndex_t::ToPtr)
        .addFunction("IsValid", &GParticleAttributeIndex_t::IsValid)
        .endClass();
}
GCParticleInput::GCParticleInput(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCParticleInput::GCParticleInput(void *ptr) {
    m_ptr = ptr;
}
void* GCParticleInput::GetPtr() {
    return m_ptr;
}
std::string GCParticleInput::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCParticleInput::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCParticleInput(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCParticleInput>("CParticleInput")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addFunction("ToPtr", &GCParticleInput::ToPtr)
        .addFunction("IsValid", &GCParticleInput::IsValid)
        .endClass();
}
GCParticleFloatInput::GCParticleFloatInput(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCParticleFloatInput::GCParticleFloatInput(void *ptr) {
    m_ptr = ptr;
}
uint64_t GCParticleFloatInput::GetType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->Type(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CParticleFloatInput", "m_nType");
}
void GCParticleFloatInput::SetType(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->Type(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_nType", false, value);
}
uint64_t GCParticleFloatInput::GetMapType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->MapType(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CParticleFloatInput", "m_nMapType");
}
void GCParticleFloatInput::SetMapType(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->MapType(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_nMapType", false, value);
}
float GCParticleFloatInput::GetLiteralValue() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->LiteralValue(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flLiteralValue");
}
void GCParticleFloatInput::SetLiteralValue(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->LiteralValue(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flLiteralValue", false, value);
}
int32_t GCParticleFloatInput::GetControlPoint() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->ControlPoint(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CParticleFloatInput", "m_nControlPoint");
}
void GCParticleFloatInput::SetControlPoint(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->ControlPoint(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_nControlPoint", false, value);
}
GParticleAttributeIndex_t GCParticleFloatInput::GetScalarAttribute() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->ScalarAttribute(ptr=%p)", m_ptr));
    GParticleAttributeIndex_t value(GetSchemaPtr(m_ptr, "CParticleFloatInput", "m_nScalarAttribute"));
    return value;
}
void GCParticleFloatInput::SetScalarAttribute(GParticleAttributeIndex_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->ScalarAttribute(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ScalarAttribute' is not possible.\n");
}
GParticleAttributeIndex_t GCParticleFloatInput::GetVectorAttribute() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->VectorAttribute(ptr=%p)", m_ptr));
    GParticleAttributeIndex_t value(GetSchemaPtr(m_ptr, "CParticleFloatInput", "m_nVectorAttribute"));
    return value;
}
void GCParticleFloatInput::SetVectorAttribute(GParticleAttributeIndex_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->VectorAttribute(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'VectorAttribute' is not possible.\n");
}
int32_t GCParticleFloatInput::GetVectorComponent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->VectorComponent(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CParticleFloatInput", "m_nVectorComponent");
}
void GCParticleFloatInput::SetVectorComponent(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->VectorComponent(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_nVectorComponent", false, value);
}
float GCParticleFloatInput::GetRandomMin() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->RandomMin(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flRandomMin");
}
void GCParticleFloatInput::SetRandomMin(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->RandomMin(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flRandomMin", false, value);
}
float GCParticleFloatInput::GetRandomMax() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->RandomMax(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flRandomMax");
}
void GCParticleFloatInput::SetRandomMax(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->RandomMax(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flRandomMax", false, value);
}
bool GCParticleFloatInput::GetHasRandomSignFlip() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->HasRandomSignFlip(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CParticleFloatInput", "m_bHasRandomSignFlip");
}
void GCParticleFloatInput::SetHasRandomSignFlip(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->HasRandomSignFlip(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_bHasRandomSignFlip", false, value);
}
int32_t GCParticleFloatInput::GetRandomSeed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->RandomSeed(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CParticleFloatInput", "m_nRandomSeed");
}
void GCParticleFloatInput::SetRandomSeed(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->RandomSeed(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_nRandomSeed", false, value);
}
uint64_t GCParticleFloatInput::GetRandomMode() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->RandomMode(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CParticleFloatInput", "m_nRandomMode");
}
void GCParticleFloatInput::SetRandomMode(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->RandomMode(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_nRandomMode", false, value);
}
float GCParticleFloatInput::GetLOD0() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->LOD0(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flLOD0");
}
void GCParticleFloatInput::SetLOD0(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->LOD0(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flLOD0", false, value);
}
float GCParticleFloatInput::GetLOD1() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->LOD1(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flLOD1");
}
void GCParticleFloatInput::SetLOD1(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->LOD1(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flLOD1", false, value);
}
float GCParticleFloatInput::GetLOD2() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->LOD2(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flLOD2");
}
void GCParticleFloatInput::SetLOD2(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->LOD2(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flLOD2", false, value);
}
float GCParticleFloatInput::GetLOD3() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->LOD3(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flLOD3");
}
void GCParticleFloatInput::SetLOD3(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->LOD3(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flLOD3", false, value);
}
GParticleAttributeIndex_t GCParticleFloatInput::GetNoiseInputVectorAttribute() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->NoiseInputVectorAttribute(ptr=%p)", m_ptr));
    GParticleAttributeIndex_t value(GetSchemaPtr(m_ptr, "CParticleFloatInput", "m_nNoiseInputVectorAttribute"));
    return value;
}
void GCParticleFloatInput::SetNoiseInputVectorAttribute(GParticleAttributeIndex_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->NoiseInputVectorAttribute(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'NoiseInputVectorAttribute' is not possible.\n");
}
float GCParticleFloatInput::GetNoiseOutputMin() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->NoiseOutputMin(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flNoiseOutputMin");
}
void GCParticleFloatInput::SetNoiseOutputMin(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->NoiseOutputMin(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flNoiseOutputMin", false, value);
}
float GCParticleFloatInput::GetNoiseOutputMax() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->NoiseOutputMax(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flNoiseOutputMax");
}
void GCParticleFloatInput::SetNoiseOutputMax(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->NoiseOutputMax(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flNoiseOutputMax", false, value);
}
float GCParticleFloatInput::GetNoiseScale() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->NoiseScale(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flNoiseScale");
}
void GCParticleFloatInput::SetNoiseScale(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->NoiseScale(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flNoiseScale", false, value);
}
Vector GCParticleFloatInput::GetNoiseOffsetRate() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->NoiseOffsetRate(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CParticleFloatInput", "m_vecNoiseOffsetRate");
}
void GCParticleFloatInput::SetNoiseOffsetRate(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->NoiseOffsetRate(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_vecNoiseOffsetRate", false, value);
}
float GCParticleFloatInput::GetNoiseOffset() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->NoiseOffset(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flNoiseOffset");
}
void GCParticleFloatInput::SetNoiseOffset(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->NoiseOffset(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flNoiseOffset", false, value);
}
int32_t GCParticleFloatInput::GetNoiseOctaves() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->NoiseOctaves(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CParticleFloatInput", "m_nNoiseOctaves");
}
void GCParticleFloatInput::SetNoiseOctaves(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->NoiseOctaves(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_nNoiseOctaves", false, value);
}
uint64_t GCParticleFloatInput::GetNoiseTurbulence() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->NoiseTurbulence(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CParticleFloatInput", "m_nNoiseTurbulence");
}
void GCParticleFloatInput::SetNoiseTurbulence(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->NoiseTurbulence(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_nNoiseTurbulence", false, value);
}
uint64_t GCParticleFloatInput::GetNoiseType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->NoiseType(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CParticleFloatInput", "m_nNoiseType");
}
void GCParticleFloatInput::SetNoiseType(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->NoiseType(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_nNoiseType", false, value);
}
uint64_t GCParticleFloatInput::GetNoiseModifier() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->NoiseModifier(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CParticleFloatInput", "m_nNoiseModifier");
}
void GCParticleFloatInput::SetNoiseModifier(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->NoiseModifier(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_nNoiseModifier", false, value);
}
float GCParticleFloatInput::GetNoiseTurbulenceScale() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->NoiseTurbulenceScale(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flNoiseTurbulenceScale");
}
void GCParticleFloatInput::SetNoiseTurbulenceScale(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->NoiseTurbulenceScale(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flNoiseTurbulenceScale", false, value);
}
float GCParticleFloatInput::GetNoiseTurbulenceMix() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->NoiseTurbulenceMix(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flNoiseTurbulenceMix");
}
void GCParticleFloatInput::SetNoiseTurbulenceMix(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->NoiseTurbulenceMix(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flNoiseTurbulenceMix", false, value);
}
float GCParticleFloatInput::GetNoiseImgPreviewScale() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->NoiseImgPreviewScale(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flNoiseImgPreviewScale");
}
void GCParticleFloatInput::SetNoiseImgPreviewScale(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->NoiseImgPreviewScale(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flNoiseImgPreviewScale", false, value);
}
bool GCParticleFloatInput::GetNoiseImgPreviewLive() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->NoiseImgPreviewLive(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CParticleFloatInput", "m_bNoiseImgPreviewLive");
}
void GCParticleFloatInput::SetNoiseImgPreviewLive(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->NoiseImgPreviewLive(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_bNoiseImgPreviewLive", false, value);
}
float GCParticleFloatInput::GetNoCameraFallback() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->NoCameraFallback(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flNoCameraFallback");
}
void GCParticleFloatInput::SetNoCameraFallback(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->NoCameraFallback(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flNoCameraFallback", false, value);
}
bool GCParticleFloatInput::GetUseBoundsCenter() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->UseBoundsCenter(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CParticleFloatInput", "m_bUseBoundsCenter");
}
void GCParticleFloatInput::SetUseBoundsCenter(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->UseBoundsCenter(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_bUseBoundsCenter", false, value);
}
uint64_t GCParticleFloatInput::GetInputMode() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->InputMode(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CParticleFloatInput", "m_nInputMode");
}
void GCParticleFloatInput::SetInputMode(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->InputMode(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_nInputMode", false, value);
}
float GCParticleFloatInput::GetMultFactor() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->MultFactor(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flMultFactor");
}
void GCParticleFloatInput::SetMultFactor(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->MultFactor(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flMultFactor", false, value);
}
float GCParticleFloatInput::GetInput0() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->Input0(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flInput0");
}
void GCParticleFloatInput::SetInput0(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->Input0(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flInput0", false, value);
}
float GCParticleFloatInput::GetInput1() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->Input1(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flInput1");
}
void GCParticleFloatInput::SetInput1(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->Input1(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flInput1", false, value);
}
float GCParticleFloatInput::GetOutput0() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->Output0(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flOutput0");
}
void GCParticleFloatInput::SetOutput0(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->Output0(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flOutput0", false, value);
}
float GCParticleFloatInput::GetOutput1() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->Output1(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flOutput1");
}
void GCParticleFloatInput::SetOutput1(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->Output1(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flOutput1", false, value);
}
float GCParticleFloatInput::GetNotchedRangeMin() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->NotchedRangeMin(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flNotchedRangeMin");
}
void GCParticleFloatInput::SetNotchedRangeMin(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->NotchedRangeMin(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flNotchedRangeMin", false, value);
}
float GCParticleFloatInput::GetNotchedRangeMax() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->NotchedRangeMax(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flNotchedRangeMax");
}
void GCParticleFloatInput::SetNotchedRangeMax(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->NotchedRangeMax(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flNotchedRangeMax", false, value);
}
float GCParticleFloatInput::GetNotchedOutputOutside() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->NotchedOutputOutside(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flNotchedOutputOutside");
}
void GCParticleFloatInput::SetNotchedOutputOutside(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->NotchedOutputOutside(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flNotchedOutputOutside", false, value);
}
float GCParticleFloatInput::GetNotchedOutputInside() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->NotchedOutputInside(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flNotchedOutputInside");
}
void GCParticleFloatInput::SetNotchedOutputInside(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->NotchedOutputInside(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flNotchedOutputInside", false, value);
}
uint64_t GCParticleFloatInput::GetBiasType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->BiasType(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CParticleFloatInput", "m_nBiasType");
}
void GCParticleFloatInput::SetBiasType(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->BiasType(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_nBiasType", false, value);
}
float GCParticleFloatInput::GetBiasParameter() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFloatInput->BiasParameter(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CParticleFloatInput", "m_flBiasParameter");
}
void GCParticleFloatInput::SetBiasParameter(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFloatInput->BiasParameter(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFloatInput", "m_flBiasParameter", false, value);
}
void* GCParticleFloatInput::GetPtr() {
    return m_ptr;
}
std::string GCParticleFloatInput::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCParticleFloatInput::IsValid() {
    return (m_ptr != nullptr);
}
GCParticleInput GCParticleFloatInput::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CParticleFloatInput::GetParent(ptr=%p)", m_ptr));
    GCParticleInput value(m_ptr);
    return value;
}
void GCParticleFloatInput::SetParent(GCParticleInput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CParticleFloatInput::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCParticleFloatInput(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCParticleFloatInput>("CParticleFloatInput")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Type", &GCParticleFloatInput::GetType, &GCParticleFloatInput::SetType)
        .addProperty("MapType", &GCParticleFloatInput::GetMapType, &GCParticleFloatInput::SetMapType)
        .addProperty("LiteralValue", &GCParticleFloatInput::GetLiteralValue, &GCParticleFloatInput::SetLiteralValue)
        .addProperty("ControlPoint", &GCParticleFloatInput::GetControlPoint, &GCParticleFloatInput::SetControlPoint)
        .addProperty("ScalarAttribute", &GCParticleFloatInput::GetScalarAttribute, &GCParticleFloatInput::SetScalarAttribute)
        .addProperty("VectorAttribute", &GCParticleFloatInput::GetVectorAttribute, &GCParticleFloatInput::SetVectorAttribute)
        .addProperty("VectorComponent", &GCParticleFloatInput::GetVectorComponent, &GCParticleFloatInput::SetVectorComponent)
        .addProperty("RandomMin", &GCParticleFloatInput::GetRandomMin, &GCParticleFloatInput::SetRandomMin)
        .addProperty("RandomMax", &GCParticleFloatInput::GetRandomMax, &GCParticleFloatInput::SetRandomMax)
        .addProperty("HasRandomSignFlip", &GCParticleFloatInput::GetHasRandomSignFlip, &GCParticleFloatInput::SetHasRandomSignFlip)
        .addProperty("RandomSeed", &GCParticleFloatInput::GetRandomSeed, &GCParticleFloatInput::SetRandomSeed)
        .addProperty("RandomMode", &GCParticleFloatInput::GetRandomMode, &GCParticleFloatInput::SetRandomMode)
        .addProperty("LOD0", &GCParticleFloatInput::GetLOD0, &GCParticleFloatInput::SetLOD0)
        .addProperty("LOD1", &GCParticleFloatInput::GetLOD1, &GCParticleFloatInput::SetLOD1)
        .addProperty("LOD2", &GCParticleFloatInput::GetLOD2, &GCParticleFloatInput::SetLOD2)
        .addProperty("LOD3", &GCParticleFloatInput::GetLOD3, &GCParticleFloatInput::SetLOD3)
        .addProperty("NoiseInputVectorAttribute", &GCParticleFloatInput::GetNoiseInputVectorAttribute, &GCParticleFloatInput::SetNoiseInputVectorAttribute)
        .addProperty("NoiseOutputMin", &GCParticleFloatInput::GetNoiseOutputMin, &GCParticleFloatInput::SetNoiseOutputMin)
        .addProperty("NoiseOutputMax", &GCParticleFloatInput::GetNoiseOutputMax, &GCParticleFloatInput::SetNoiseOutputMax)
        .addProperty("NoiseScale", &GCParticleFloatInput::GetNoiseScale, &GCParticleFloatInput::SetNoiseScale)
        .addProperty("NoiseOffsetRate", &GCParticleFloatInput::GetNoiseOffsetRate, &GCParticleFloatInput::SetNoiseOffsetRate)
        .addProperty("NoiseOffset", &GCParticleFloatInput::GetNoiseOffset, &GCParticleFloatInput::SetNoiseOffset)
        .addProperty("NoiseOctaves", &GCParticleFloatInput::GetNoiseOctaves, &GCParticleFloatInput::SetNoiseOctaves)
        .addProperty("NoiseTurbulence", &GCParticleFloatInput::GetNoiseTurbulence, &GCParticleFloatInput::SetNoiseTurbulence)
        .addProperty("NoiseType", &GCParticleFloatInput::GetNoiseType, &GCParticleFloatInput::SetNoiseType)
        .addProperty("NoiseModifier", &GCParticleFloatInput::GetNoiseModifier, &GCParticleFloatInput::SetNoiseModifier)
        .addProperty("NoiseTurbulenceScale", &GCParticleFloatInput::GetNoiseTurbulenceScale, &GCParticleFloatInput::SetNoiseTurbulenceScale)
        .addProperty("NoiseTurbulenceMix", &GCParticleFloatInput::GetNoiseTurbulenceMix, &GCParticleFloatInput::SetNoiseTurbulenceMix)
        .addProperty("NoiseImgPreviewScale", &GCParticleFloatInput::GetNoiseImgPreviewScale, &GCParticleFloatInput::SetNoiseImgPreviewScale)
        .addProperty("NoiseImgPreviewLive", &GCParticleFloatInput::GetNoiseImgPreviewLive, &GCParticleFloatInput::SetNoiseImgPreviewLive)
        .addProperty("NoCameraFallback", &GCParticleFloatInput::GetNoCameraFallback, &GCParticleFloatInput::SetNoCameraFallback)
        .addProperty("UseBoundsCenter", &GCParticleFloatInput::GetUseBoundsCenter, &GCParticleFloatInput::SetUseBoundsCenter)
        .addProperty("InputMode", &GCParticleFloatInput::GetInputMode, &GCParticleFloatInput::SetInputMode)
        .addProperty("MultFactor", &GCParticleFloatInput::GetMultFactor, &GCParticleFloatInput::SetMultFactor)
        .addProperty("Input0", &GCParticleFloatInput::GetInput0, &GCParticleFloatInput::SetInput0)
        .addProperty("Input1", &GCParticleFloatInput::GetInput1, &GCParticleFloatInput::SetInput1)
        .addProperty("Output0", &GCParticleFloatInput::GetOutput0, &GCParticleFloatInput::SetOutput0)
        .addProperty("Output1", &GCParticleFloatInput::GetOutput1, &GCParticleFloatInput::SetOutput1)
        .addProperty("NotchedRangeMin", &GCParticleFloatInput::GetNotchedRangeMin, &GCParticleFloatInput::SetNotchedRangeMin)
        .addProperty("NotchedRangeMax", &GCParticleFloatInput::GetNotchedRangeMax, &GCParticleFloatInput::SetNotchedRangeMax)
        .addProperty("NotchedOutputOutside", &GCParticleFloatInput::GetNotchedOutputOutside, &GCParticleFloatInput::SetNotchedOutputOutside)
        .addProperty("NotchedOutputInside", &GCParticleFloatInput::GetNotchedOutputInside, &GCParticleFloatInput::SetNotchedOutputInside)
        .addProperty("BiasType", &GCParticleFloatInput::GetBiasType, &GCParticleFloatInput::SetBiasType)
        .addProperty("BiasParameter", &GCParticleFloatInput::GetBiasParameter, &GCParticleFloatInput::SetBiasParameter)
        .addProperty("Parent", &GCParticleFloatInput::GetParent, &GCParticleFloatInput::SetParent)
        .addFunction("ToPtr", &GCParticleFloatInput::ToPtr)
        .addFunction("IsValid", &GCParticleFloatInput::IsValid)
        .endClass();
}
GVoxelVisBlockOffset_t::GVoxelVisBlockOffset_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GVoxelVisBlockOffset_t::GVoxelVisBlockOffset_t(void *ptr) {
    m_ptr = ptr;
}
uint32_t GVoxelVisBlockOffset_t::GetOffset() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: VoxelVisBlockOffset_t->Offset(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "VoxelVisBlockOffset_t", "m_nOffset");
}
void GVoxelVisBlockOffset_t::SetOffset(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: VoxelVisBlockOffset_t->Offset(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "VoxelVisBlockOffset_t", "m_nOffset", true, value);
}
uint32_t GVoxelVisBlockOffset_t::GetElementCount() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: VoxelVisBlockOffset_t->ElementCount(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "VoxelVisBlockOffset_t", "m_nElementCount");
}
void GVoxelVisBlockOffset_t::SetElementCount(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: VoxelVisBlockOffset_t->ElementCount(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "VoxelVisBlockOffset_t", "m_nElementCount", true, value);
}
void* GVoxelVisBlockOffset_t::GetPtr() {
    return m_ptr;
}
std::string GVoxelVisBlockOffset_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GVoxelVisBlockOffset_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassVoxelVisBlockOffset_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GVoxelVisBlockOffset_t>("VoxelVisBlockOffset_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Offset", &GVoxelVisBlockOffset_t::GetOffset, &GVoxelVisBlockOffset_t::SetOffset)
        .addProperty("ElementCount", &GVoxelVisBlockOffset_t::GetElementCount, &GVoxelVisBlockOffset_t::SetElementCount)
        .addFunction("ToPtr", &GVoxelVisBlockOffset_t::ToPtr)
        .addFunction("IsValid", &GVoxelVisBlockOffset_t::IsValid)
        .endClass();
}
GAggregateLODSetup_t::GAggregateLODSetup_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GAggregateLODSetup_t::GAggregateLODSetup_t(void *ptr) {
    m_ptr = ptr;
}
Vector GAggregateLODSetup_t::GetLODOrigin() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: AggregateLODSetup_t->LODOrigin(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "AggregateLODSetup_t", "m_vLODOrigin");
}
void GAggregateLODSetup_t::SetLODOrigin(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: AggregateLODSetup_t->LODOrigin(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "AggregateLODSetup_t", "m_vLODOrigin", true, value);
}
float GAggregateLODSetup_t::GetMaxObjectScale() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: AggregateLODSetup_t->MaxObjectScale(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "AggregateLODSetup_t", "m_fMaxObjectScale");
}
void GAggregateLODSetup_t::SetMaxObjectScale(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: AggregateLODSetup_t->MaxObjectScale(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "AggregateLODSetup_t", "m_fMaxObjectScale", true, value);
}
std::vector<float32> GAggregateLODSetup_t::GetSwitchDistances() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: AggregateLODSetup_t->SwitchDistances(ptr=%p)", m_ptr));
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "AggregateLODSetup_t", "m_fSwitchDistances"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GAggregateLODSetup_t::SetSwitchDistances(std::vector<float32> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: AggregateLODSetup_t->SwitchDistances(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<float32>(m_ptr, "AggregateLODSetup_t", "m_fSwitchDistances", true, value);
}
void* GAggregateLODSetup_t::GetPtr() {
    return m_ptr;
}
std::string GAggregateLODSetup_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GAggregateLODSetup_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassAggregateLODSetup_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GAggregateLODSetup_t>("AggregateLODSetup_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("LODOrigin", &GAggregateLODSetup_t::GetLODOrigin, &GAggregateLODSetup_t::SetLODOrigin)
        .addProperty("MaxObjectScale", &GAggregateLODSetup_t::GetMaxObjectScale, &GAggregateLODSetup_t::SetMaxObjectScale)
        .addProperty("SwitchDistances", &GAggregateLODSetup_t::GetSwitchDistances, &GAggregateLODSetup_t::SetSwitchDistances)
        .addFunction("ToPtr", &GAggregateLODSetup_t::ToPtr)
        .addFunction("IsValid", &GAggregateLODSetup_t::IsValid)
        .endClass();
}
GCProductQuantizer::GCProductQuantizer(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCProductQuantizer::GCProductQuantizer(void *ptr) {
    m_ptr = ptr;
}
std::vector<GCVectorQuantizer> GCProductQuantizer::GetSubQuantizers() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CProductQuantizer->SubQuantizers(ptr=%p)", m_ptr));
    CUtlVector<GCVectorQuantizer>* vec = GetSchemaValue<CUtlVector<GCVectorQuantizer>*>(m_ptr, "CProductQuantizer", "m_subQuantizers"); std::vector<GCVectorQuantizer> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCProductQuantizer::SetSubQuantizers(std::vector<GCVectorQuantizer> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CProductQuantizer->SubQuantizers(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GCVectorQuantizer>(m_ptr, "CProductQuantizer", "m_subQuantizers", false, value);
}
int32_t GCProductQuantizer::GetDimensions() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CProductQuantizer->Dimensions(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CProductQuantizer", "m_nDimensions");
}
void GCProductQuantizer::SetDimensions(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CProductQuantizer->Dimensions(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CProductQuantizer", "m_nDimensions", false, value);
}
void* GCProductQuantizer::GetPtr() {
    return m_ptr;
}
std::string GCProductQuantizer::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCProductQuantizer::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCProductQuantizer(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCProductQuantizer>("CProductQuantizer")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("SubQuantizers", &GCProductQuantizer::GetSubQuantizers, &GCProductQuantizer::SetSubQuantizers)
        .addProperty("Dimensions", &GCProductQuantizer::GetDimensions, &GCProductQuantizer::SetDimensions)
        .addFunction("ToPtr", &GCProductQuantizer::ToPtr)
        .addFunction("IsValid", &GCProductQuantizer::IsValid)
        .endClass();
}
GCAnimUpdateNodeRef::GCAnimUpdateNodeRef(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCAnimUpdateNodeRef::GCAnimUpdateNodeRef(void *ptr) {
    m_ptr = ptr;
}
int32_t GCAnimUpdateNodeRef::GetNodeIndex() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAnimUpdateNodeRef->NodeIndex(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CAnimUpdateNodeRef", "m_nodeIndex");
}
void GCAnimUpdateNodeRef::SetNodeIndex(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAnimUpdateNodeRef->NodeIndex(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CAnimUpdateNodeRef", "m_nodeIndex", false, value);
}
void* GCAnimUpdateNodeRef::GetPtr() {
    return m_ptr;
}
std::string GCAnimUpdateNodeRef::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCAnimUpdateNodeRef::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCAnimUpdateNodeRef(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCAnimUpdateNodeRef>("CAnimUpdateNodeRef")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("NodeIndex", &GCAnimUpdateNodeRef::GetNodeIndex, &GCAnimUpdateNodeRef::SetNodeIndex)
        .addFunction("ToPtr", &GCAnimUpdateNodeRef::ToPtr)
        .addFunction("IsValid", &GCAnimUpdateNodeRef::IsValid)
        .endClass();
}
GCNmGraphNode::GCNmGraphNode(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCNmGraphNode::GCNmGraphNode(void *ptr) {
    m_ptr = ptr;
}
int16_t GCNmGraphNode::GetNodeIdx() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNmGraphNode->NodeIdx(ptr=%p)", m_ptr));
    return GetSchemaValue<int16_t>(m_ptr, "CNmGraphNode", "m_nNodeIdx");
}
void GCNmGraphNode::SetNodeIdx(int16_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNmGraphNode->NodeIdx(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNmGraphNode", "m_nNodeIdx", false, value);
}
void* GCNmGraphNode::GetPtr() {
    return m_ptr;
}
std::string GCNmGraphNode::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCNmGraphNode::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCNmGraphNode(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCNmGraphNode>("CNmGraphNode")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("NodeIdx", &GCNmGraphNode::GetNodeIdx, &GCNmGraphNode::SetNodeIdx)
        .addFunction("ToPtr", &GCNmGraphNode::ToPtr)
        .addFunction("IsValid", &GCNmGraphNode::IsValid)
        .endClass();
}
GCParticleCollectionFloatInput::GCParticleCollectionFloatInput(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCParticleCollectionFloatInput::GCParticleCollectionFloatInput(void *ptr) {
    m_ptr = ptr;
}
void* GCParticleCollectionFloatInput::GetPtr() {
    return m_ptr;
}
std::string GCParticleCollectionFloatInput::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCParticleCollectionFloatInput::IsValid() {
    return (m_ptr != nullptr);
}
GCParticleFloatInput GCParticleCollectionFloatInput::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CParticleCollectionFloatInput::GetParent(ptr=%p)", m_ptr));
    GCParticleFloatInput value(m_ptr);
    return value;
}
void GCParticleCollectionFloatInput::SetParent(GCParticleFloatInput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CParticleCollectionFloatInput::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCParticleCollectionFloatInput(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCParticleCollectionFloatInput>("CParticleCollectionFloatInput")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCParticleCollectionFloatInput::GetParent, &GCParticleCollectionFloatInput::SetParent)
        .addFunction("ToPtr", &GCParticleCollectionFloatInput::ToPtr)
        .addFunction("IsValid", &GCParticleCollectionFloatInput::IsValid)
        .endClass();
}
GCParticleFunction::GCParticleFunction(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCParticleFunction::GCParticleFunction(void *ptr) {
    m_ptr = ptr;
}
GCParticleCollectionFloatInput GCParticleFunction::GetOpStrength() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFunction->OpStrength(ptr=%p)", m_ptr));
    GCParticleCollectionFloatInput value(GetSchemaPtr(m_ptr, "CParticleFunction", "m_flOpStrength"));
    return value;
}
void GCParticleFunction::SetOpStrength(GCParticleCollectionFloatInput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFunction->OpStrength(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'OpStrength' is not possible.\n");
}
uint64_t GCParticleFunction::GetOpEndCapState() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFunction->OpEndCapState(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CParticleFunction", "m_nOpEndCapState");
}
void GCParticleFunction::SetOpEndCapState(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFunction->OpEndCapState(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFunction", "m_nOpEndCapState", false, value);
}
float GCParticleFunction::GetOpStartFadeInTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFunction->OpStartFadeInTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CParticleFunction", "m_flOpStartFadeInTime");
}
void GCParticleFunction::SetOpStartFadeInTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFunction->OpStartFadeInTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFunction", "m_flOpStartFadeInTime", false, value);
}
float GCParticleFunction::GetOpEndFadeInTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFunction->OpEndFadeInTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CParticleFunction", "m_flOpEndFadeInTime");
}
void GCParticleFunction::SetOpEndFadeInTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFunction->OpEndFadeInTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFunction", "m_flOpEndFadeInTime", false, value);
}
float GCParticleFunction::GetOpStartFadeOutTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFunction->OpStartFadeOutTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CParticleFunction", "m_flOpStartFadeOutTime");
}
void GCParticleFunction::SetOpStartFadeOutTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFunction->OpStartFadeOutTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFunction", "m_flOpStartFadeOutTime", false, value);
}
float GCParticleFunction::GetOpEndFadeOutTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFunction->OpEndFadeOutTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CParticleFunction", "m_flOpEndFadeOutTime");
}
void GCParticleFunction::SetOpEndFadeOutTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFunction->OpEndFadeOutTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFunction", "m_flOpEndFadeOutTime", false, value);
}
float GCParticleFunction::GetOpFadeOscillatePeriod() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFunction->OpFadeOscillatePeriod(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CParticleFunction", "m_flOpFadeOscillatePeriod");
}
void GCParticleFunction::SetOpFadeOscillatePeriod(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFunction->OpFadeOscillatePeriod(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFunction", "m_flOpFadeOscillatePeriod", false, value);
}
bool GCParticleFunction::GetNormalizeToStopTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFunction->NormalizeToStopTime(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CParticleFunction", "m_bNormalizeToStopTime");
}
void GCParticleFunction::SetNormalizeToStopTime(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFunction->NormalizeToStopTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFunction", "m_bNormalizeToStopTime", false, value);
}
float GCParticleFunction::GetOpTimeOffsetMin() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFunction->OpTimeOffsetMin(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CParticleFunction", "m_flOpTimeOffsetMin");
}
void GCParticleFunction::SetOpTimeOffsetMin(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFunction->OpTimeOffsetMin(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFunction", "m_flOpTimeOffsetMin", false, value);
}
float GCParticleFunction::GetOpTimeOffsetMax() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFunction->OpTimeOffsetMax(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CParticleFunction", "m_flOpTimeOffsetMax");
}
void GCParticleFunction::SetOpTimeOffsetMax(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFunction->OpTimeOffsetMax(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFunction", "m_flOpTimeOffsetMax", false, value);
}
int32_t GCParticleFunction::GetOpTimeOffsetSeed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFunction->OpTimeOffsetSeed(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CParticleFunction", "m_nOpTimeOffsetSeed");
}
void GCParticleFunction::SetOpTimeOffsetSeed(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFunction->OpTimeOffsetSeed(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFunction", "m_nOpTimeOffsetSeed", false, value);
}
int32_t GCParticleFunction::GetOpTimeScaleSeed() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFunction->OpTimeScaleSeed(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CParticleFunction", "m_nOpTimeScaleSeed");
}
void GCParticleFunction::SetOpTimeScaleSeed(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFunction->OpTimeScaleSeed(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFunction", "m_nOpTimeScaleSeed", false, value);
}
float GCParticleFunction::GetOpTimeScaleMin() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFunction->OpTimeScaleMin(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CParticleFunction", "m_flOpTimeScaleMin");
}
void GCParticleFunction::SetOpTimeScaleMin(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFunction->OpTimeScaleMin(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFunction", "m_flOpTimeScaleMin", false, value);
}
float GCParticleFunction::GetOpTimeScaleMax() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFunction->OpTimeScaleMax(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CParticleFunction", "m_flOpTimeScaleMax");
}
void GCParticleFunction::SetOpTimeScaleMax(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFunction->OpTimeScaleMax(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFunction", "m_flOpTimeScaleMax", false, value);
}
bool GCParticleFunction::GetDisableOperator() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFunction->DisableOperator(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CParticleFunction", "m_bDisableOperator");
}
void GCParticleFunction::SetDisableOperator(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFunction->DisableOperator(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFunction", "m_bDisableOperator", false, value);
}
std::string GCParticleFunction::GetNotes() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFunction->Notes(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlString>(m_ptr, "CParticleFunction", "m_Notes").Get();
}
void GCParticleFunction::SetNotes(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFunction->Notes(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFunction", "m_Notes", false, CUtlString(value.c_str()));
}
void* GCParticleFunction::GetPtr() {
    return m_ptr;
}
std::string GCParticleFunction::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCParticleFunction::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCParticleFunction(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCParticleFunction>("CParticleFunction")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("OpStrength", &GCParticleFunction::GetOpStrength, &GCParticleFunction::SetOpStrength)
        .addProperty("OpEndCapState", &GCParticleFunction::GetOpEndCapState, &GCParticleFunction::SetOpEndCapState)
        .addProperty("OpStartFadeInTime", &GCParticleFunction::GetOpStartFadeInTime, &GCParticleFunction::SetOpStartFadeInTime)
        .addProperty("OpEndFadeInTime", &GCParticleFunction::GetOpEndFadeInTime, &GCParticleFunction::SetOpEndFadeInTime)
        .addProperty("OpStartFadeOutTime", &GCParticleFunction::GetOpStartFadeOutTime, &GCParticleFunction::SetOpStartFadeOutTime)
        .addProperty("OpEndFadeOutTime", &GCParticleFunction::GetOpEndFadeOutTime, &GCParticleFunction::SetOpEndFadeOutTime)
        .addProperty("OpFadeOscillatePeriod", &GCParticleFunction::GetOpFadeOscillatePeriod, &GCParticleFunction::SetOpFadeOscillatePeriod)
        .addProperty("NormalizeToStopTime", &GCParticleFunction::GetNormalizeToStopTime, &GCParticleFunction::SetNormalizeToStopTime)
        .addProperty("OpTimeOffsetMin", &GCParticleFunction::GetOpTimeOffsetMin, &GCParticleFunction::SetOpTimeOffsetMin)
        .addProperty("OpTimeOffsetMax", &GCParticleFunction::GetOpTimeOffsetMax, &GCParticleFunction::SetOpTimeOffsetMax)
        .addProperty("OpTimeOffsetSeed", &GCParticleFunction::GetOpTimeOffsetSeed, &GCParticleFunction::SetOpTimeOffsetSeed)
        .addProperty("OpTimeScaleSeed", &GCParticleFunction::GetOpTimeScaleSeed, &GCParticleFunction::SetOpTimeScaleSeed)
        .addProperty("OpTimeScaleMin", &GCParticleFunction::GetOpTimeScaleMin, &GCParticleFunction::SetOpTimeScaleMin)
        .addProperty("OpTimeScaleMax", &GCParticleFunction::GetOpTimeScaleMax, &GCParticleFunction::SetOpTimeScaleMax)
        .addProperty("DisableOperator", &GCParticleFunction::GetDisableOperator, &GCParticleFunction::SetDisableOperator)
        .addProperty("Notes", &GCParticleFunction::GetNotes, &GCParticleFunction::SetNotes)
        .addFunction("ToPtr", &GCParticleFunction::ToPtr)
        .addFunction("IsValid", &GCParticleFunction::IsValid)
        .endClass();
}
GCParticleFunctionOperator::GCParticleFunctionOperator(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCParticleFunctionOperator::GCParticleFunctionOperator(void *ptr) {
    m_ptr = ptr;
}
void* GCParticleFunctionOperator::GetPtr() {
    return m_ptr;
}
std::string GCParticleFunctionOperator::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCParticleFunctionOperator::IsValid() {
    return (m_ptr != nullptr);
}
GCParticleFunction GCParticleFunctionOperator::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CParticleFunctionOperator::GetParent(ptr=%p)", m_ptr));
    GCParticleFunction value(m_ptr);
    return value;
}
void GCParticleFunctionOperator::SetParent(GCParticleFunction value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CParticleFunctionOperator::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCParticleFunctionOperator(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCParticleFunctionOperator>("CParticleFunctionOperator")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCParticleFunctionOperator::GetParent, &GCParticleFunctionOperator::SetParent)
        .addFunction("ToPtr", &GCParticleFunctionOperator::ToPtr)
        .addFunction("IsValid", &GCParticleFunctionOperator::IsValid)
        .endClass();
}
GPARTICLE_WORLD_HANDLE__::GPARTICLE_WORLD_HANDLE__(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GPARTICLE_WORLD_HANDLE__::GPARTICLE_WORLD_HANDLE__(void *ptr) {
    m_ptr = ptr;
}
int32_t GPARTICLE_WORLD_HANDLE__::GetUnused() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PARTICLE_WORLD_HANDLE__->Unused(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "PARTICLE_WORLD_HANDLE__", "unused");
}
void GPARTICLE_WORLD_HANDLE__::SetUnused(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PARTICLE_WORLD_HANDLE__->Unused(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PARTICLE_WORLD_HANDLE__", "unused", false, value);
}
void* GPARTICLE_WORLD_HANDLE__::GetPtr() {
    return m_ptr;
}
std::string GPARTICLE_WORLD_HANDLE__::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GPARTICLE_WORLD_HANDLE__::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassPARTICLE_WORLD_HANDLE__(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GPARTICLE_WORLD_HANDLE__>("PARTICLE_WORLD_HANDLE__")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Unused", &GPARTICLE_WORLD_HANDLE__::GetUnused, &GPARTICLE_WORLD_HANDLE__::SetUnused)
        .addFunction("ToPtr", &GPARTICLE_WORLD_HANDLE__::ToPtr)
        .addFunction("IsValid", &GPARTICLE_WORLD_HANDLE__::IsValid)
        .endClass();
}
GVMixDynamicsCompressorDesc_t::GVMixDynamicsCompressorDesc_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GVMixDynamicsCompressorDesc_t::GVMixDynamicsCompressorDesc_t(void *ptr) {
    m_ptr = ptr;
}
float GVMixDynamicsCompressorDesc_t::GetFldbOutputGain() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: VMixDynamicsCompressorDesc_t->FldbOutputGain(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsCompressorDesc_t", "m_fldbOutputGain");
}
void GVMixDynamicsCompressorDesc_t::SetFldbOutputGain(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: VMixDynamicsCompressorDesc_t->FldbOutputGain(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "VMixDynamicsCompressorDesc_t", "m_fldbOutputGain", true, value);
}
float GVMixDynamicsCompressorDesc_t::GetFldbCompressionThreshold() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: VMixDynamicsCompressorDesc_t->FldbCompressionThreshold(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsCompressorDesc_t", "m_fldbCompressionThreshold");
}
void GVMixDynamicsCompressorDesc_t::SetFldbCompressionThreshold(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: VMixDynamicsCompressorDesc_t->FldbCompressionThreshold(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "VMixDynamicsCompressorDesc_t", "m_fldbCompressionThreshold", true, value);
}
float GVMixDynamicsCompressorDesc_t::GetFldbKneeWidth() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: VMixDynamicsCompressorDesc_t->FldbKneeWidth(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsCompressorDesc_t", "m_fldbKneeWidth");
}
void GVMixDynamicsCompressorDesc_t::SetFldbKneeWidth(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: VMixDynamicsCompressorDesc_t->FldbKneeWidth(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "VMixDynamicsCompressorDesc_t", "m_fldbKneeWidth", true, value);
}
float GVMixDynamicsCompressorDesc_t::GetCompressionRatio() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: VMixDynamicsCompressorDesc_t->CompressionRatio(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsCompressorDesc_t", "m_flCompressionRatio");
}
void GVMixDynamicsCompressorDesc_t::SetCompressionRatio(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: VMixDynamicsCompressorDesc_t->CompressionRatio(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "VMixDynamicsCompressorDesc_t", "m_flCompressionRatio", true, value);
}
float GVMixDynamicsCompressorDesc_t::GetAttackTimeMS() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: VMixDynamicsCompressorDesc_t->AttackTimeMS(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsCompressorDesc_t", "m_flAttackTimeMS");
}
void GVMixDynamicsCompressorDesc_t::SetAttackTimeMS(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: VMixDynamicsCompressorDesc_t->AttackTimeMS(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "VMixDynamicsCompressorDesc_t", "m_flAttackTimeMS", true, value);
}
float GVMixDynamicsCompressorDesc_t::GetReleaseTimeMS() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: VMixDynamicsCompressorDesc_t->ReleaseTimeMS(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsCompressorDesc_t", "m_flReleaseTimeMS");
}
void GVMixDynamicsCompressorDesc_t::SetReleaseTimeMS(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: VMixDynamicsCompressorDesc_t->ReleaseTimeMS(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "VMixDynamicsCompressorDesc_t", "m_flReleaseTimeMS", true, value);
}
float GVMixDynamicsCompressorDesc_t::GetRMSTimeMS() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: VMixDynamicsCompressorDesc_t->RMSTimeMS(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsCompressorDesc_t", "m_flRMSTimeMS");
}
void GVMixDynamicsCompressorDesc_t::SetRMSTimeMS(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: VMixDynamicsCompressorDesc_t->RMSTimeMS(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "VMixDynamicsCompressorDesc_t", "m_flRMSTimeMS", true, value);
}
float GVMixDynamicsCompressorDesc_t::GetWetMix() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: VMixDynamicsCompressorDesc_t->WetMix(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsCompressorDesc_t", "m_flWetMix");
}
void GVMixDynamicsCompressorDesc_t::SetWetMix(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: VMixDynamicsCompressorDesc_t->WetMix(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "VMixDynamicsCompressorDesc_t", "m_flWetMix", true, value);
}
bool GVMixDynamicsCompressorDesc_t::GetPeakMode() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: VMixDynamicsCompressorDesc_t->PeakMode(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "VMixDynamicsCompressorDesc_t", "m_bPeakMode");
}
void GVMixDynamicsCompressorDesc_t::SetPeakMode(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: VMixDynamicsCompressorDesc_t->PeakMode(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "VMixDynamicsCompressorDesc_t", "m_bPeakMode", true, value);
}
void* GVMixDynamicsCompressorDesc_t::GetPtr() {
    return m_ptr;
}
std::string GVMixDynamicsCompressorDesc_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GVMixDynamicsCompressorDesc_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassVMixDynamicsCompressorDesc_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GVMixDynamicsCompressorDesc_t>("VMixDynamicsCompressorDesc_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("FldbOutputGain", &GVMixDynamicsCompressorDesc_t::GetFldbOutputGain, &GVMixDynamicsCompressorDesc_t::SetFldbOutputGain)
        .addProperty("FldbCompressionThreshold", &GVMixDynamicsCompressorDesc_t::GetFldbCompressionThreshold, &GVMixDynamicsCompressorDesc_t::SetFldbCompressionThreshold)
        .addProperty("FldbKneeWidth", &GVMixDynamicsCompressorDesc_t::GetFldbKneeWidth, &GVMixDynamicsCompressorDesc_t::SetFldbKneeWidth)
        .addProperty("CompressionRatio", &GVMixDynamicsCompressorDesc_t::GetCompressionRatio, &GVMixDynamicsCompressorDesc_t::SetCompressionRatio)
        .addProperty("AttackTimeMS", &GVMixDynamicsCompressorDesc_t::GetAttackTimeMS, &GVMixDynamicsCompressorDesc_t::SetAttackTimeMS)
        .addProperty("ReleaseTimeMS", &GVMixDynamicsCompressorDesc_t::GetReleaseTimeMS, &GVMixDynamicsCompressorDesc_t::SetReleaseTimeMS)
        .addProperty("RMSTimeMS", &GVMixDynamicsCompressorDesc_t::GetRMSTimeMS, &GVMixDynamicsCompressorDesc_t::SetRMSTimeMS)
        .addProperty("WetMix", &GVMixDynamicsCompressorDesc_t::GetWetMix, &GVMixDynamicsCompressorDesc_t::SetWetMix)
        .addProperty("PeakMode", &GVMixDynamicsCompressorDesc_t::GetPeakMode, &GVMixDynamicsCompressorDesc_t::SetPeakMode)
        .addFunction("ToPtr", &GVMixDynamicsCompressorDesc_t::ToPtr)
        .addFunction("IsValid", &GVMixDynamicsCompressorDesc_t::IsValid)
        .endClass();
}
GFootStepTrigger::GFootStepTrigger(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GFootStepTrigger::GFootStepTrigger(void *ptr) {
    m_ptr = ptr;
}
std::vector<int32> GFootStepTrigger::GetTags() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: FootStepTrigger->Tags(ptr=%p)", m_ptr));
    CUtlVector<int32>* vec = GetSchemaValue<CUtlVector<int32>*>(m_ptr, "FootStepTrigger", "m_tags"); std::vector<int32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GFootStepTrigger::SetTags(std::vector<int32> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: FootStepTrigger->Tags(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<int32>(m_ptr, "FootStepTrigger", "m_tags", false, value);
}
int32_t GFootStepTrigger::GetFootIndex() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: FootStepTrigger->FootIndex(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "FootStepTrigger", "m_nFootIndex");
}
void GFootStepTrigger::SetFootIndex(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: FootStepTrigger->FootIndex(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "FootStepTrigger", "m_nFootIndex", false, value);
}
uint64_t GFootStepTrigger::GetTriggerPhase() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: FootStepTrigger->TriggerPhase(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "FootStepTrigger", "m_triggerPhase");
}
void GFootStepTrigger::SetTriggerPhase(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: FootStepTrigger->TriggerPhase(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "FootStepTrigger", "m_triggerPhase", false, value);
}
void* GFootStepTrigger::GetPtr() {
    return m_ptr;
}
std::string GFootStepTrigger::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GFootStepTrigger::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassFootStepTrigger(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GFootStepTrigger>("FootStepTrigger")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Tags", &GFootStepTrigger::GetTags, &GFootStepTrigger::SetTags)
        .addProperty("FootIndex", &GFootStepTrigger::GetFootIndex, &GFootStepTrigger::SetFootIndex)
        .addProperty("TriggerPhase", &GFootStepTrigger::GetTriggerPhase, &GFootStepTrigger::SetTriggerPhase)
        .addFunction("ToPtr", &GFootStepTrigger::ToPtr)
        .addFunction("IsValid", &GFootStepTrigger::IsValid)
        .endClass();
}
GParticleControlPointDriver_t::GParticleControlPointDriver_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GParticleControlPointDriver_t::GParticleControlPointDriver_t(void *ptr) {
    m_ptr = ptr;
}
int32_t GParticleControlPointDriver_t::GetControlPoint() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ParticleControlPointDriver_t->ControlPoint(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "ParticleControlPointDriver_t", "m_iControlPoint");
}
void GParticleControlPointDriver_t::SetControlPoint(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ParticleControlPointDriver_t->ControlPoint(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "ParticleControlPointDriver_t", "m_iControlPoint", true, value);
}
uint64_t GParticleControlPointDriver_t::GetAttachType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ParticleControlPointDriver_t->AttachType(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "ParticleControlPointDriver_t", "m_iAttachType");
}
void GParticleControlPointDriver_t::SetAttachType(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ParticleControlPointDriver_t->AttachType(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "ParticleControlPointDriver_t", "m_iAttachType", true, value);
}
std::string GParticleControlPointDriver_t::GetAttachmentName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ParticleControlPointDriver_t->AttachmentName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlString>(m_ptr, "ParticleControlPointDriver_t", "m_attachmentName").Get();
}
void GParticleControlPointDriver_t::SetAttachmentName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ParticleControlPointDriver_t->AttachmentName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "ParticleControlPointDriver_t", "m_attachmentName", true, CUtlString(value.c_str()));
}
Vector GParticleControlPointDriver_t::GetOffset() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ParticleControlPointDriver_t->Offset(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "ParticleControlPointDriver_t", "m_vecOffset");
}
void GParticleControlPointDriver_t::SetOffset(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ParticleControlPointDriver_t->Offset(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "ParticleControlPointDriver_t", "m_vecOffset", true, value);
}
QAngle GParticleControlPointDriver_t::GetOffset1() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ParticleControlPointDriver_t->Offset1(ptr=%p)", m_ptr));
    return GetSchemaValue<QAngle>(m_ptr, "ParticleControlPointDriver_t", "m_angOffset");
}
void GParticleControlPointDriver_t::SetOffset1(QAngle value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ParticleControlPointDriver_t->Offset1(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "ParticleControlPointDriver_t", "m_angOffset", true, value);
}
std::string GParticleControlPointDriver_t::GetEntityName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: ParticleControlPointDriver_t->EntityName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlString>(m_ptr, "ParticleControlPointDriver_t", "m_entityName").Get();
}
void GParticleControlPointDriver_t::SetEntityName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: ParticleControlPointDriver_t->EntityName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "ParticleControlPointDriver_t", "m_entityName", true, CUtlString(value.c_str()));
}
void* GParticleControlPointDriver_t::GetPtr() {
    return m_ptr;
}
std::string GParticleControlPointDriver_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GParticleControlPointDriver_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassParticleControlPointDriver_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GParticleControlPointDriver_t>("ParticleControlPointDriver_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("ControlPoint", &GParticleControlPointDriver_t::GetControlPoint, &GParticleControlPointDriver_t::SetControlPoint)
        .addProperty("AttachType", &GParticleControlPointDriver_t::GetAttachType, &GParticleControlPointDriver_t::SetAttachType)
        .addProperty("AttachmentName", &GParticleControlPointDriver_t::GetAttachmentName, &GParticleControlPointDriver_t::SetAttachmentName)
        .addProperty("Offset", &GParticleControlPointDriver_t::GetOffset, &GParticleControlPointDriver_t::SetOffset)
        .addProperty("Offset1", &GParticleControlPointDriver_t::GetOffset1, &GParticleControlPointDriver_t::SetOffset1)
        .addProperty("EntityName", &GParticleControlPointDriver_t::GetEntityName, &GParticleControlPointDriver_t::SetEntityName)
        .addFunction("ToPtr", &GParticleControlPointDriver_t::ToPtr)
        .addFunction("IsValid", &GParticleControlPointDriver_t::IsValid)
        .endClass();
}
GFeSphereRigid_t::GFeSphereRigid_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GFeSphereRigid_t::GFeSphereRigid_t(void *ptr) {
    m_ptr = ptr;
}
float GFeSphereRigid_t::GetSphere() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: FeSphereRigid_t->Sphere(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "FeSphereRigid_t", "vSphere");
}
void GFeSphereRigid_t::SetSphere(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: FeSphereRigid_t->Sphere(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "FeSphereRigid_t", "vSphere", true, value);
}
uint16_t GFeSphereRigid_t::GetNode() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: FeSphereRigid_t->Node(ptr=%p)", m_ptr));
    return GetSchemaValue<uint16_t>(m_ptr, "FeSphereRigid_t", "nNode");
}
void GFeSphereRigid_t::SetNode(uint16_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: FeSphereRigid_t->Node(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "FeSphereRigid_t", "nNode", true, value);
}
uint16_t GFeSphereRigid_t::GetCollisionMask() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: FeSphereRigid_t->CollisionMask(ptr=%p)", m_ptr));
    return GetSchemaValue<uint16_t>(m_ptr, "FeSphereRigid_t", "nCollisionMask");
}
void GFeSphereRigid_t::SetCollisionMask(uint16_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: FeSphereRigid_t->CollisionMask(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "FeSphereRigid_t", "nCollisionMask", true, value);
}
uint16_t GFeSphereRigid_t::GetVertexMapIndex() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: FeSphereRigid_t->VertexMapIndex(ptr=%p)", m_ptr));
    return GetSchemaValue<uint16_t>(m_ptr, "FeSphereRigid_t", "nVertexMapIndex");
}
void GFeSphereRigid_t::SetVertexMapIndex(uint16_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: FeSphereRigid_t->VertexMapIndex(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "FeSphereRigid_t", "nVertexMapIndex", true, value);
}
uint16_t GFeSphereRigid_t::GetFlags() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: FeSphereRigid_t->Flags(ptr=%p)", m_ptr));
    return GetSchemaValue<uint16_t>(m_ptr, "FeSphereRigid_t", "nFlags");
}
void GFeSphereRigid_t::SetFlags(uint16_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: FeSphereRigid_t->Flags(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "FeSphereRigid_t", "nFlags", true, value);
}
void* GFeSphereRigid_t::GetPtr() {
    return m_ptr;
}
std::string GFeSphereRigid_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GFeSphereRigid_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassFeSphereRigid_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GFeSphereRigid_t>("FeSphereRigid_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Sphere", &GFeSphereRigid_t::GetSphere, &GFeSphereRigid_t::SetSphere)
        .addProperty("Node", &GFeSphereRigid_t::GetNode, &GFeSphereRigid_t::SetNode)
        .addProperty("CollisionMask", &GFeSphereRigid_t::GetCollisionMask, &GFeSphereRigid_t::SetCollisionMask)
        .addProperty("VertexMapIndex", &GFeSphereRigid_t::GetVertexMapIndex, &GFeSphereRigid_t::SetVertexMapIndex)
        .addProperty("Flags", &GFeSphereRigid_t::GetFlags, &GFeSphereRigid_t::SetFlags)
        .addFunction("ToPtr", &GFeSphereRigid_t::ToPtr)
        .addFunction("IsValid", &GFeSphereRigid_t::IsValid)
        .endClass();
}
GCMotionMetricEvaluator::GCMotionMetricEvaluator(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCMotionMetricEvaluator::GCMotionMetricEvaluator(void *ptr) {
    m_ptr = ptr;
}
std::vector<float32> GCMotionMetricEvaluator::GetMeans() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMotionMetricEvaluator->Means(ptr=%p)", m_ptr));
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "CMotionMetricEvaluator", "m_means"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCMotionMetricEvaluator::SetMeans(std::vector<float32> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMotionMetricEvaluator->Means(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<float32>(m_ptr, "CMotionMetricEvaluator", "m_means", false, value);
}
std::vector<float32> GCMotionMetricEvaluator::GetStandardDeviations() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMotionMetricEvaluator->StandardDeviations(ptr=%p)", m_ptr));
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "CMotionMetricEvaluator", "m_standardDeviations"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCMotionMetricEvaluator::SetStandardDeviations(std::vector<float32> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMotionMetricEvaluator->StandardDeviations(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<float32>(m_ptr, "CMotionMetricEvaluator", "m_standardDeviations", false, value);
}
float GCMotionMetricEvaluator::GetWeight() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMotionMetricEvaluator->Weight(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CMotionMetricEvaluator", "m_flWeight");
}
void GCMotionMetricEvaluator::SetWeight(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMotionMetricEvaluator->Weight(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMotionMetricEvaluator", "m_flWeight", false, value);
}
int32_t GCMotionMetricEvaluator::GetDimensionStartIndex() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CMotionMetricEvaluator->DimensionStartIndex(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CMotionMetricEvaluator", "m_nDimensionStartIndex");
}
void GCMotionMetricEvaluator::SetDimensionStartIndex(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CMotionMetricEvaluator->DimensionStartIndex(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CMotionMetricEvaluator", "m_nDimensionStartIndex", false, value);
}
void* GCMotionMetricEvaluator::GetPtr() {
    return m_ptr;
}
std::string GCMotionMetricEvaluator::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCMotionMetricEvaluator::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCMotionMetricEvaluator(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCMotionMetricEvaluator>("CMotionMetricEvaluator")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Means", &GCMotionMetricEvaluator::GetMeans, &GCMotionMetricEvaluator::SetMeans)
        .addProperty("StandardDeviations", &GCMotionMetricEvaluator::GetStandardDeviations, &GCMotionMetricEvaluator::SetStandardDeviations)
        .addProperty("Weight", &GCMotionMetricEvaluator::GetWeight, &GCMotionMetricEvaluator::SetWeight)
        .addProperty("DimensionStartIndex", &GCMotionMetricEvaluator::GetDimensionStartIndex, &GCMotionMetricEvaluator::SetDimensionStartIndex)
        .addFunction("ToPtr", &GCMotionMetricEvaluator::ToPtr)
        .addFunction("IsValid", &GCMotionMetricEvaluator::IsValid)
        .endClass();
}
GCDrawCullingData::GCDrawCullingData(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCDrawCullingData::GCDrawCullingData(void *ptr) {
    m_ptr = ptr;
}
Vector GCDrawCullingData::GetConeApex() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CDrawCullingData->ConeApex(ptr=%p)", m_ptr));
    return GetSchemaValue<Vector>(m_ptr, "CDrawCullingData", "m_vConeApex");
}
void GCDrawCullingData::SetConeApex(Vector value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CDrawCullingData->ConeApex(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CDrawCullingData", "m_vConeApex", false, value);
}
std::vector<int32_t> GCDrawCullingData::GetConeAxis() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CDrawCullingData->ConeAxis(ptr=%p,size=3)", m_ptr));
    int32_t* outValue = (int32_t*)GetSchemaPtr(m_ptr, "CDrawCullingData", "m_ConeAxis"); std::vector<int32_t> ret; for(int i = 0; i < 3; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCDrawCullingData::SetConeAxis(std::vector<int32_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CDrawCullingData->ConeAxis(ptr=%p,size=3)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'ConeAxis' is not possible.\n");
}
int32_t GCDrawCullingData::GetConeCutoff() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CDrawCullingData->ConeCutoff(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CDrawCullingData", "m_ConeCutoff");
}
void GCDrawCullingData::SetConeCutoff(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CDrawCullingData->ConeCutoff(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CDrawCullingData", "m_ConeCutoff", false, value);
}
void* GCDrawCullingData::GetPtr() {
    return m_ptr;
}
std::string GCDrawCullingData::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCDrawCullingData::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCDrawCullingData(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCDrawCullingData>("CDrawCullingData")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("ConeApex", &GCDrawCullingData::GetConeApex, &GCDrawCullingData::SetConeApex)
        .addProperty("ConeAxis", &GCDrawCullingData::GetConeAxis, &GCDrawCullingData::SetConeAxis)
        .addProperty("ConeCutoff", &GCDrawCullingData::GetConeCutoff, &GCDrawCullingData::SetConeCutoff)
        .addFunction("ToPtr", &GCDrawCullingData::ToPtr)
        .addFunction("IsValid", &GCDrawCullingData::IsValid)
        .endClass();
}
GCAnimUserDifference::GCAnimUserDifference(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCAnimUserDifference::GCAnimUserDifference(void *ptr) {
    m_ptr = ptr;
}
int32_t GCAnimUserDifference::GetType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAnimUserDifference->Type(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CAnimUserDifference", "m_nType");
}
void GCAnimUserDifference::SetType(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAnimUserDifference->Type(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CAnimUserDifference", "m_nType", false, value);
}
void* GCAnimUserDifference::GetPtr() {
    return m_ptr;
}
std::string GCAnimUserDifference::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCAnimUserDifference::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCAnimUserDifference(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCAnimUserDifference>("CAnimUserDifference")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Type", &GCAnimUserDifference::GetType, &GCAnimUserDifference::SetType)
        .addFunction("ToPtr", &GCAnimUserDifference::ToPtr)
        .addFunction("IsValid", &GCAnimUserDifference::IsValid)
        .endClass();
}
GCSeqMultiFetchFlag::GCSeqMultiFetchFlag(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCSeqMultiFetchFlag::GCSeqMultiFetchFlag(void *ptr) {
    m_ptr = ptr;
}
bool GCSeqMultiFetchFlag::GetRealtime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSeqMultiFetchFlag->Realtime(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CSeqMultiFetchFlag", "m_bRealtime");
}
void GCSeqMultiFetchFlag::SetRealtime(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSeqMultiFetchFlag->Realtime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSeqMultiFetchFlag", "m_bRealtime", false, value);
}
bool GCSeqMultiFetchFlag::GetCylepose() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSeqMultiFetchFlag->Cylepose(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CSeqMultiFetchFlag", "m_bCylepose");
}
void GCSeqMultiFetchFlag::SetCylepose(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSeqMultiFetchFlag->Cylepose(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSeqMultiFetchFlag", "m_bCylepose", false, value);
}
bool GCSeqMultiFetchFlag::Get0D() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSeqMultiFetchFlag->0D(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CSeqMultiFetchFlag", "m_b0D");
}
void GCSeqMultiFetchFlag::Set0D(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSeqMultiFetchFlag->0D(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSeqMultiFetchFlag", "m_b0D", false, value);
}
bool GCSeqMultiFetchFlag::Get1D() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSeqMultiFetchFlag->1D(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CSeqMultiFetchFlag", "m_b1D");
}
void GCSeqMultiFetchFlag::Set1D(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSeqMultiFetchFlag->1D(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSeqMultiFetchFlag", "m_b1D", false, value);
}
bool GCSeqMultiFetchFlag::Get2D() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSeqMultiFetchFlag->2D(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CSeqMultiFetchFlag", "m_b2D");
}
void GCSeqMultiFetchFlag::Set2D(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSeqMultiFetchFlag->2D(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSeqMultiFetchFlag", "m_b2D", false, value);
}
bool GCSeqMultiFetchFlag::Get2D_TRI() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSeqMultiFetchFlag->2D_TRI(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CSeqMultiFetchFlag", "m_b2D_TRI");
}
void GCSeqMultiFetchFlag::Set2D_TRI(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSeqMultiFetchFlag->2D_TRI(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSeqMultiFetchFlag", "m_b2D_TRI", false, value);
}
void* GCSeqMultiFetchFlag::GetPtr() {
    return m_ptr;
}
std::string GCSeqMultiFetchFlag::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCSeqMultiFetchFlag::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCSeqMultiFetchFlag(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCSeqMultiFetchFlag>("CSeqMultiFetchFlag")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Realtime", &GCSeqMultiFetchFlag::GetRealtime, &GCSeqMultiFetchFlag::SetRealtime)
        .addProperty("Cylepose", &GCSeqMultiFetchFlag::GetCylepose, &GCSeqMultiFetchFlag::SetCylepose)
        .addProperty("0D", &GCSeqMultiFetchFlag::Get0D, &GCSeqMultiFetchFlag::Set0D)
        .addProperty("1D", &GCSeqMultiFetchFlag::Get1D, &GCSeqMultiFetchFlag::Set1D)
        .addProperty("2D", &GCSeqMultiFetchFlag::Get2D, &GCSeqMultiFetchFlag::Set2D)
        .addProperty("2D_TRI", &GCSeqMultiFetchFlag::Get2D_TRI, &GCSeqMultiFetchFlag::Set2D_TRI)
        .addFunction("ToPtr", &GCSeqMultiFetchFlag::ToPtr)
        .addFunction("IsValid", &GCSeqMultiFetchFlag::IsValid)
        .endClass();
}
GCNmEvent::GCNmEvent(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCNmEvent::GCNmEvent(void *ptr) {
    m_ptr = ptr;
}
float GCNmEvent::GetStartTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNmEvent->StartTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CNmEvent", "m_flStartTime");
}
void GCNmEvent::SetStartTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNmEvent->StartTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNmEvent", "m_flStartTime", false, value);
}
float GCNmEvent::GetDuration() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CNmEvent->Duration(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CNmEvent", "m_flDuration");
}
void GCNmEvent::SetDuration(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CNmEvent->Duration(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CNmEvent", "m_flDuration", false, value);
}
void* GCNmEvent::GetPtr() {
    return m_ptr;
}
std::string GCNmEvent::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCNmEvent::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCNmEvent(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCNmEvent>("CNmEvent")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("StartTime", &GCNmEvent::GetStartTime, &GCNmEvent::SetStartTime)
        .addProperty("Duration", &GCNmEvent::GetDuration, &GCNmEvent::SetDuration)
        .addFunction("ToPtr", &GCNmEvent::ToPtr)
        .addFunction("IsValid", &GCNmEvent::IsValid)
        .endClass();
}
GCAnimParamHandle::GCAnimParamHandle(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCAnimParamHandle::GCAnimParamHandle(void *ptr) {
    m_ptr = ptr;
}
uint64_t GCAnimParamHandle::GetType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAnimParamHandle->Type(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CAnimParamHandle", "m_type");
}
void GCAnimParamHandle::SetType(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAnimParamHandle->Type(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CAnimParamHandle", "m_type", false, value);
}
uint32_t GCAnimParamHandle::GetIndex() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAnimParamHandle->Index(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "CAnimParamHandle", "m_index");
}
void GCAnimParamHandle::SetIndex(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAnimParamHandle->Index(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CAnimParamHandle", "m_index", false, value);
}
void* GCAnimParamHandle::GetPtr() {
    return m_ptr;
}
std::string GCAnimParamHandle::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCAnimParamHandle::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCAnimParamHandle(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCAnimParamHandle>("CAnimParamHandle")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Type", &GCAnimParamHandle::GetType, &GCAnimParamHandle::SetType)
        .addProperty("Index", &GCAnimParamHandle::GetIndex, &GCAnimParamHandle::SetIndex)
        .addFunction("ToPtr", &GCAnimParamHandle::ToPtr)
        .addFunction("IsValid", &GCAnimParamHandle::IsValid)
        .endClass();
}
GCFuseSymbolTable::GCFuseSymbolTable(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCFuseSymbolTable::GCFuseSymbolTable(void *ptr) {
    m_ptr = ptr;
}
std::vector<GConstantInfo_t> GCFuseSymbolTable::GetConstants() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuseSymbolTable->Constants(ptr=%p)", m_ptr));
    CUtlVector<GConstantInfo_t>* vec = GetSchemaValue<CUtlVector<GConstantInfo_t>*>(m_ptr, "CFuseSymbolTable", "m_constants"); std::vector<GConstantInfo_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCFuseSymbolTable::SetConstants(std::vector<GConstantInfo_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuseSymbolTable->Constants(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GConstantInfo_t>(m_ptr, "CFuseSymbolTable", "m_constants", false, value);
}
std::vector<GVariableInfo_t> GCFuseSymbolTable::GetVariables() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuseSymbolTable->Variables(ptr=%p)", m_ptr));
    CUtlVector<GVariableInfo_t>* vec = GetSchemaValue<CUtlVector<GVariableInfo_t>*>(m_ptr, "CFuseSymbolTable", "m_variables"); std::vector<GVariableInfo_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCFuseSymbolTable::SetVariables(std::vector<GVariableInfo_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuseSymbolTable->Variables(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GVariableInfo_t>(m_ptr, "CFuseSymbolTable", "m_variables", false, value);
}
std::vector<GFunctionInfo_t> GCFuseSymbolTable::GetFunctions() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFuseSymbolTable->Functions(ptr=%p)", m_ptr));
    CUtlVector<GFunctionInfo_t>* vec = GetSchemaValue<CUtlVector<GFunctionInfo_t>*>(m_ptr, "CFuseSymbolTable", "m_functions"); std::vector<GFunctionInfo_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCFuseSymbolTable::SetFunctions(std::vector<GFunctionInfo_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFuseSymbolTable->Functions(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFunctionInfo_t>(m_ptr, "CFuseSymbolTable", "m_functions", false, value);
}
void* GCFuseSymbolTable::GetPtr() {
    return m_ptr;
}
std::string GCFuseSymbolTable::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCFuseSymbolTable::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCFuseSymbolTable(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCFuseSymbolTable>("CFuseSymbolTable")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Constants", &GCFuseSymbolTable::GetConstants, &GCFuseSymbolTable::SetConstants)
        .addProperty("Variables", &GCFuseSymbolTable::GetVariables, &GCFuseSymbolTable::SetVariables)
        .addProperty("Functions", &GCFuseSymbolTable::GetFunctions, &GCFuseSymbolTable::SetFunctions)
        .addFunction("ToPtr", &GCFuseSymbolTable::ToPtr)
        .addFunction("IsValid", &GCFuseSymbolTable::IsValid)
        .endClass();
}
GGeneratedTextureHandle_t::GGeneratedTextureHandle_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GGeneratedTextureHandle_t::GGeneratedTextureHandle_t(void *ptr) {
    m_ptr = ptr;
}
std::string GGeneratedTextureHandle_t::GetStrBitmapName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: GeneratedTextureHandle_t->StrBitmapName(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlString>(m_ptr, "GeneratedTextureHandle_t", "m_strBitmapName").Get();
}
void GGeneratedTextureHandle_t::SetStrBitmapName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: GeneratedTextureHandle_t->StrBitmapName(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "GeneratedTextureHandle_t", "m_strBitmapName", true, CUtlString(value.c_str()));
}
void* GGeneratedTextureHandle_t::GetPtr() {
    return m_ptr;
}
std::string GGeneratedTextureHandle_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GGeneratedTextureHandle_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassGeneratedTextureHandle_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GGeneratedTextureHandle_t>("GeneratedTextureHandle_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("StrBitmapName", &GGeneratedTextureHandle_t::GetStrBitmapName, &GGeneratedTextureHandle_t::SetStrBitmapName)
        .addFunction("ToPtr", &GGeneratedTextureHandle_t::ToPtr)
        .addFunction("IsValid", &GGeneratedTextureHandle_t::IsValid)
        .endClass();
}
GSceneViewId_t::GSceneViewId_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GSceneViewId_t::GSceneViewId_t(void *ptr) {
    m_ptr = ptr;
}
uint64_t GSceneViewId_t::GetViewId() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: SceneViewId_t->ViewId(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "SceneViewId_t", "m_nViewId");
}
void GSceneViewId_t::SetViewId(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: SceneViewId_t->ViewId(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "SceneViewId_t", "m_nViewId", true, value);
}
uint64_t GSceneViewId_t::GetFrameCount() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: SceneViewId_t->FrameCount(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "SceneViewId_t", "m_nFrameCount");
}
void GSceneViewId_t::SetFrameCount(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: SceneViewId_t->FrameCount(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "SceneViewId_t", "m_nFrameCount", true, value);
}
void* GSceneViewId_t::GetPtr() {
    return m_ptr;
}
std::string GSceneViewId_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GSceneViewId_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassSceneViewId_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GSceneViewId_t>("SceneViewId_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("ViewId", &GSceneViewId_t::GetViewId, &GSceneViewId_t::SetViewId)
        .addProperty("FrameCount", &GSceneViewId_t::GetFrameCount, &GSceneViewId_t::SetFrameCount)
        .addFunction("ToPtr", &GSceneViewId_t::ToPtr)
        .addFunction("IsValid", &GSceneViewId_t::IsValid)
        .endClass();
}
GPhysFeModelDesc_t::GPhysFeModelDesc_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GPhysFeModelDesc_t::GPhysFeModelDesc_t(void *ptr) {
    m_ptr = ptr;
}
std::vector<uint32> GPhysFeModelDesc_t::GetCtrlHash() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->CtrlHash(ptr=%p)", m_ptr));
    CUtlVector<uint32>* vec = GetSchemaValue<CUtlVector<uint32>*>(m_ptr, "PhysFeModelDesc_t", "m_CtrlHash"); std::vector<uint32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetCtrlHash(std::vector<uint32> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->CtrlHash(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<uint32>(m_ptr, "PhysFeModelDesc_t", "m_CtrlHash", true, value);
}
std::vector<CUtlString> GPhysFeModelDesc_t::GetCtrlName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->CtrlName(ptr=%p)", m_ptr));
    CUtlVector<CUtlString>* vec = GetSchemaValue<CUtlVector<CUtlString>*>(m_ptr, "PhysFeModelDesc_t", "m_CtrlName"); std::vector<CUtlString> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetCtrlName(std::vector<CUtlString> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->CtrlName(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<CUtlString>(m_ptr, "PhysFeModelDesc_t", "m_CtrlName", true, value);
}
uint32_t GPhysFeModelDesc_t::GetStaticNodeFlags() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->StaticNodeFlags(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "PhysFeModelDesc_t", "m_nStaticNodeFlags");
}
void GPhysFeModelDesc_t::SetStaticNodeFlags(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->StaticNodeFlags(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nStaticNodeFlags", true, value);
}
uint32_t GPhysFeModelDesc_t::GetDynamicNodeFlags() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->DynamicNodeFlags(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "PhysFeModelDesc_t", "m_nDynamicNodeFlags");
}
void GPhysFeModelDesc_t::SetDynamicNodeFlags(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->DynamicNodeFlags(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nDynamicNodeFlags", true, value);
}
float GPhysFeModelDesc_t::GetLocalForce() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->LocalForce(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "PhysFeModelDesc_t", "m_flLocalForce");
}
void GPhysFeModelDesc_t::SetLocalForce(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->LocalForce(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_flLocalForce", true, value);
}
float GPhysFeModelDesc_t::GetLocalRotation() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->LocalRotation(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "PhysFeModelDesc_t", "m_flLocalRotation");
}
void GPhysFeModelDesc_t::SetLocalRotation(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->LocalRotation(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_flLocalRotation", true, value);
}
uint16_t GPhysFeModelDesc_t::GetNodeCount() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->NodeCount(ptr=%p)", m_ptr));
    return GetSchemaValue<uint16_t>(m_ptr, "PhysFeModelDesc_t", "m_nNodeCount");
}
void GPhysFeModelDesc_t::SetNodeCount(uint16_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->NodeCount(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nNodeCount", true, value);
}
uint16_t GPhysFeModelDesc_t::GetStaticNodes() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->StaticNodes(ptr=%p)", m_ptr));
    return GetSchemaValue<uint16_t>(m_ptr, "PhysFeModelDesc_t", "m_nStaticNodes");
}
void GPhysFeModelDesc_t::SetStaticNodes(uint16_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->StaticNodes(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nStaticNodes", true, value);
}
uint16_t GPhysFeModelDesc_t::GetRotLockStaticNodes() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->RotLockStaticNodes(ptr=%p)", m_ptr));
    return GetSchemaValue<uint16_t>(m_ptr, "PhysFeModelDesc_t", "m_nRotLockStaticNodes");
}
void GPhysFeModelDesc_t::SetRotLockStaticNodes(uint16_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->RotLockStaticNodes(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nRotLockStaticNodes", true, value);
}
uint16_t GPhysFeModelDesc_t::GetFirstPositionDrivenNode() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->FirstPositionDrivenNode(ptr=%p)", m_ptr));
    return GetSchemaValue<uint16_t>(m_ptr, "PhysFeModelDesc_t", "m_nFirstPositionDrivenNode");
}
void GPhysFeModelDesc_t::SetFirstPositionDrivenNode(uint16_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->FirstPositionDrivenNode(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nFirstPositionDrivenNode", true, value);
}
uint16_t GPhysFeModelDesc_t::GetSimdTriCount1() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->SimdTriCount1(ptr=%p)", m_ptr));
    return GetSchemaValue<uint16_t>(m_ptr, "PhysFeModelDesc_t", "m_nSimdTriCount1");
}
void GPhysFeModelDesc_t::SetSimdTriCount1(uint16_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->SimdTriCount1(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nSimdTriCount1", true, value);
}
uint16_t GPhysFeModelDesc_t::GetSimdTriCount2() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->SimdTriCount2(ptr=%p)", m_ptr));
    return GetSchemaValue<uint16_t>(m_ptr, "PhysFeModelDesc_t", "m_nSimdTriCount2");
}
void GPhysFeModelDesc_t::SetSimdTriCount2(uint16_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->SimdTriCount2(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nSimdTriCount2", true, value);
}
uint16_t GPhysFeModelDesc_t::GetSimdQuadCount1() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->SimdQuadCount1(ptr=%p)", m_ptr));
    return GetSchemaValue<uint16_t>(m_ptr, "PhysFeModelDesc_t", "m_nSimdQuadCount1");
}
void GPhysFeModelDesc_t::SetSimdQuadCount1(uint16_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->SimdQuadCount1(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nSimdQuadCount1", true, value);
}
uint16_t GPhysFeModelDesc_t::GetSimdQuadCount2() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->SimdQuadCount2(ptr=%p)", m_ptr));
    return GetSchemaValue<uint16_t>(m_ptr, "PhysFeModelDesc_t", "m_nSimdQuadCount2");
}
void GPhysFeModelDesc_t::SetSimdQuadCount2(uint16_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->SimdQuadCount2(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nSimdQuadCount2", true, value);
}
uint16_t GPhysFeModelDesc_t::GetQuadCount1() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->QuadCount1(ptr=%p)", m_ptr));
    return GetSchemaValue<uint16_t>(m_ptr, "PhysFeModelDesc_t", "m_nQuadCount1");
}
void GPhysFeModelDesc_t::SetQuadCount1(uint16_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->QuadCount1(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nQuadCount1", true, value);
}
uint16_t GPhysFeModelDesc_t::GetQuadCount2() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->QuadCount2(ptr=%p)", m_ptr));
    return GetSchemaValue<uint16_t>(m_ptr, "PhysFeModelDesc_t", "m_nQuadCount2");
}
void GPhysFeModelDesc_t::SetQuadCount2(uint16_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->QuadCount2(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nQuadCount2", true, value);
}
uint16_t GPhysFeModelDesc_t::GetTreeDepth() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->TreeDepth(ptr=%p)", m_ptr));
    return GetSchemaValue<uint16_t>(m_ptr, "PhysFeModelDesc_t", "m_nTreeDepth");
}
void GPhysFeModelDesc_t::SetTreeDepth(uint16_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->TreeDepth(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nTreeDepth", true, value);
}
uint16_t GPhysFeModelDesc_t::GetNodeBaseJiggleboneDependsCount() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->NodeBaseJiggleboneDependsCount(ptr=%p)", m_ptr));
    return GetSchemaValue<uint16_t>(m_ptr, "PhysFeModelDesc_t", "m_nNodeBaseJiggleboneDependsCount");
}
void GPhysFeModelDesc_t::SetNodeBaseJiggleboneDependsCount(uint16_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->NodeBaseJiggleboneDependsCount(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nNodeBaseJiggleboneDependsCount", true, value);
}
uint16_t GPhysFeModelDesc_t::GetRopeCount() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->RopeCount(ptr=%p)", m_ptr));
    return GetSchemaValue<uint16_t>(m_ptr, "PhysFeModelDesc_t", "m_nRopeCount");
}
void GPhysFeModelDesc_t::SetRopeCount(uint16_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->RopeCount(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nRopeCount", true, value);
}
std::vector<uint16> GPhysFeModelDesc_t::GetRopes() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->Ropes(ptr=%p)", m_ptr));
    CUtlVector<uint16>* vec = GetSchemaValue<CUtlVector<uint16>*>(m_ptr, "PhysFeModelDesc_t", "m_Ropes"); std::vector<uint16> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetRopes(std::vector<uint16> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->Ropes(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<uint16>(m_ptr, "PhysFeModelDesc_t", "m_Ropes", true, value);
}
std::vector<GFeNodeBase_t> GPhysFeModelDesc_t::GetNodeBases() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->NodeBases(ptr=%p)", m_ptr));
    CUtlVector<GFeNodeBase_t>* vec = GetSchemaValue<CUtlVector<GFeNodeBase_t>*>(m_ptr, "PhysFeModelDesc_t", "m_NodeBases"); std::vector<GFeNodeBase_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetNodeBases(std::vector<GFeNodeBase_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->NodeBases(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFeNodeBase_t>(m_ptr, "PhysFeModelDesc_t", "m_NodeBases", true, value);
}
std::vector<GFeSimdNodeBase_t> GPhysFeModelDesc_t::GetSimdNodeBases() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->SimdNodeBases(ptr=%p)", m_ptr));
    CUtlVector<GFeSimdNodeBase_t>* vec = GetSchemaValue<CUtlVector<GFeSimdNodeBase_t>*>(m_ptr, "PhysFeModelDesc_t", "m_SimdNodeBases"); std::vector<GFeSimdNodeBase_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetSimdNodeBases(std::vector<GFeSimdNodeBase_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->SimdNodeBases(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFeSimdNodeBase_t>(m_ptr, "PhysFeModelDesc_t", "m_SimdNodeBases", true, value);
}
std::vector<GFeQuad_t> GPhysFeModelDesc_t::GetQuads() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->Quads(ptr=%p)", m_ptr));
    CUtlVector<GFeQuad_t>* vec = GetSchemaValue<CUtlVector<GFeQuad_t>*>(m_ptr, "PhysFeModelDesc_t", "m_Quads"); std::vector<GFeQuad_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetQuads(std::vector<GFeQuad_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->Quads(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFeQuad_t>(m_ptr, "PhysFeModelDesc_t", "m_Quads", true, value);
}
std::vector<GFeSimdQuad_t> GPhysFeModelDesc_t::GetSimdQuads() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->SimdQuads(ptr=%p)", m_ptr));
    CUtlVector<GFeSimdQuad_t>* vec = GetSchemaValue<CUtlVector<GFeSimdQuad_t>*>(m_ptr, "PhysFeModelDesc_t", "m_SimdQuads"); std::vector<GFeSimdQuad_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetSimdQuads(std::vector<GFeSimdQuad_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->SimdQuads(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFeSimdQuad_t>(m_ptr, "PhysFeModelDesc_t", "m_SimdQuads", true, value);
}
std::vector<GFeSimdTri_t> GPhysFeModelDesc_t::GetSimdTris() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->SimdTris(ptr=%p)", m_ptr));
    CUtlVector<GFeSimdTri_t>* vec = GetSchemaValue<CUtlVector<GFeSimdTri_t>*>(m_ptr, "PhysFeModelDesc_t", "m_SimdTris"); std::vector<GFeSimdTri_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetSimdTris(std::vector<GFeSimdTri_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->SimdTris(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFeSimdTri_t>(m_ptr, "PhysFeModelDesc_t", "m_SimdTris", true, value);
}
std::vector<GFeSimdRodConstraint_t> GPhysFeModelDesc_t::GetSimdRods() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->SimdRods(ptr=%p)", m_ptr));
    CUtlVector<GFeSimdRodConstraint_t>* vec = GetSchemaValue<CUtlVector<GFeSimdRodConstraint_t>*>(m_ptr, "PhysFeModelDesc_t", "m_SimdRods"); std::vector<GFeSimdRodConstraint_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetSimdRods(std::vector<GFeSimdRodConstraint_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->SimdRods(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFeSimdRodConstraint_t>(m_ptr, "PhysFeModelDesc_t", "m_SimdRods", true, value);
}
std::vector<GFeSimdRodConstraintAnim_t> GPhysFeModelDesc_t::GetSimdRodsAnim() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->SimdRodsAnim(ptr=%p)", m_ptr));
    CUtlVector<GFeSimdRodConstraintAnim_t>* vec = GetSchemaValue<CUtlVector<GFeSimdRodConstraintAnim_t>*>(m_ptr, "PhysFeModelDesc_t", "m_SimdRodsAnim"); std::vector<GFeSimdRodConstraintAnim_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetSimdRodsAnim(std::vector<GFeSimdRodConstraintAnim_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->SimdRodsAnim(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFeSimdRodConstraintAnim_t>(m_ptr, "PhysFeModelDesc_t", "m_SimdRodsAnim", true, value);
}
std::vector<GFeRodConstraint_t> GPhysFeModelDesc_t::GetRods() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->Rods(ptr=%p)", m_ptr));
    CUtlVector<GFeRodConstraint_t>* vec = GetSchemaValue<CUtlVector<GFeRodConstraint_t>*>(m_ptr, "PhysFeModelDesc_t", "m_Rods"); std::vector<GFeRodConstraint_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetRods(std::vector<GFeRodConstraint_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->Rods(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFeRodConstraint_t>(m_ptr, "PhysFeModelDesc_t", "m_Rods", true, value);
}
std::vector<GFeTwistConstraint_t> GPhysFeModelDesc_t::GetTwists() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->Twists(ptr=%p)", m_ptr));
    CUtlVector<GFeTwistConstraint_t>* vec = GetSchemaValue<CUtlVector<GFeTwistConstraint_t>*>(m_ptr, "PhysFeModelDesc_t", "m_Twists"); std::vector<GFeTwistConstraint_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetTwists(std::vector<GFeTwistConstraint_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->Twists(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFeTwistConstraint_t>(m_ptr, "PhysFeModelDesc_t", "m_Twists", true, value);
}
std::vector<GFeAxialEdgeBend_t> GPhysFeModelDesc_t::GetAxialEdges() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->AxialEdges(ptr=%p)", m_ptr));
    CUtlVector<GFeAxialEdgeBend_t>* vec = GetSchemaValue<CUtlVector<GFeAxialEdgeBend_t>*>(m_ptr, "PhysFeModelDesc_t", "m_AxialEdges"); std::vector<GFeAxialEdgeBend_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetAxialEdges(std::vector<GFeAxialEdgeBend_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->AxialEdges(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFeAxialEdgeBend_t>(m_ptr, "PhysFeModelDesc_t", "m_AxialEdges", true, value);
}
std::vector<float32> GPhysFeModelDesc_t::GetNodeInvMasses() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->NodeInvMasses(ptr=%p)", m_ptr));
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "PhysFeModelDesc_t", "m_NodeInvMasses"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetNodeInvMasses(std::vector<float32> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->NodeInvMasses(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<float32>(m_ptr, "PhysFeModelDesc_t", "m_NodeInvMasses", true, value);
}
std::vector<GFeCtrlOffset_t> GPhysFeModelDesc_t::GetCtrlOffsets() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->CtrlOffsets(ptr=%p)", m_ptr));
    CUtlVector<GFeCtrlOffset_t>* vec = GetSchemaValue<CUtlVector<GFeCtrlOffset_t>*>(m_ptr, "PhysFeModelDesc_t", "m_CtrlOffsets"); std::vector<GFeCtrlOffset_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetCtrlOffsets(std::vector<GFeCtrlOffset_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->CtrlOffsets(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFeCtrlOffset_t>(m_ptr, "PhysFeModelDesc_t", "m_CtrlOffsets", true, value);
}
std::vector<GFeCtrlOsOffset_t> GPhysFeModelDesc_t::GetCtrlOsOffsets() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->CtrlOsOffsets(ptr=%p)", m_ptr));
    CUtlVector<GFeCtrlOsOffset_t>* vec = GetSchemaValue<CUtlVector<GFeCtrlOsOffset_t>*>(m_ptr, "PhysFeModelDesc_t", "m_CtrlOsOffsets"); std::vector<GFeCtrlOsOffset_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetCtrlOsOffsets(std::vector<GFeCtrlOsOffset_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->CtrlOsOffsets(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFeCtrlOsOffset_t>(m_ptr, "PhysFeModelDesc_t", "m_CtrlOsOffsets", true, value);
}
std::vector<GFeFollowNode_t> GPhysFeModelDesc_t::GetFollowNodes() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->FollowNodes(ptr=%p)", m_ptr));
    CUtlVector<GFeFollowNode_t>* vec = GetSchemaValue<CUtlVector<GFeFollowNode_t>*>(m_ptr, "PhysFeModelDesc_t", "m_FollowNodes"); std::vector<GFeFollowNode_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetFollowNodes(std::vector<GFeFollowNode_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->FollowNodes(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFeFollowNode_t>(m_ptr, "PhysFeModelDesc_t", "m_FollowNodes", true, value);
}
std::vector<GFeCollisionPlane_t> GPhysFeModelDesc_t::GetCollisionPlanes() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->CollisionPlanes(ptr=%p)", m_ptr));
    CUtlVector<GFeCollisionPlane_t>* vec = GetSchemaValue<CUtlVector<GFeCollisionPlane_t>*>(m_ptr, "PhysFeModelDesc_t", "m_CollisionPlanes"); std::vector<GFeCollisionPlane_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetCollisionPlanes(std::vector<GFeCollisionPlane_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->CollisionPlanes(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFeCollisionPlane_t>(m_ptr, "PhysFeModelDesc_t", "m_CollisionPlanes", true, value);
}
std::vector<GFeNodeIntegrator_t> GPhysFeModelDesc_t::GetNodeIntegrator() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->NodeIntegrator(ptr=%p)", m_ptr));
    CUtlVector<GFeNodeIntegrator_t>* vec = GetSchemaValue<CUtlVector<GFeNodeIntegrator_t>*>(m_ptr, "PhysFeModelDesc_t", "m_NodeIntegrator"); std::vector<GFeNodeIntegrator_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetNodeIntegrator(std::vector<GFeNodeIntegrator_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->NodeIntegrator(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFeNodeIntegrator_t>(m_ptr, "PhysFeModelDesc_t", "m_NodeIntegrator", true, value);
}
std::vector<GFeSpringIntegrator_t> GPhysFeModelDesc_t::GetSpringIntegrator() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->SpringIntegrator(ptr=%p)", m_ptr));
    CUtlVector<GFeSpringIntegrator_t>* vec = GetSchemaValue<CUtlVector<GFeSpringIntegrator_t>*>(m_ptr, "PhysFeModelDesc_t", "m_SpringIntegrator"); std::vector<GFeSpringIntegrator_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetSpringIntegrator(std::vector<GFeSpringIntegrator_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->SpringIntegrator(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFeSpringIntegrator_t>(m_ptr, "PhysFeModelDesc_t", "m_SpringIntegrator", true, value);
}
std::vector<GFeSimdSpringIntegrator_t> GPhysFeModelDesc_t::GetSimdSpringIntegrator() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->SimdSpringIntegrator(ptr=%p)", m_ptr));
    CUtlVector<GFeSimdSpringIntegrator_t>* vec = GetSchemaValue<CUtlVector<GFeSimdSpringIntegrator_t>*>(m_ptr, "PhysFeModelDesc_t", "m_SimdSpringIntegrator"); std::vector<GFeSimdSpringIntegrator_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetSimdSpringIntegrator(std::vector<GFeSimdSpringIntegrator_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->SimdSpringIntegrator(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFeSimdSpringIntegrator_t>(m_ptr, "PhysFeModelDesc_t", "m_SimdSpringIntegrator", true, value);
}
std::vector<GFeWorldCollisionParams_t> GPhysFeModelDesc_t::GetWorldCollisionParams() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->WorldCollisionParams(ptr=%p)", m_ptr));
    CUtlVector<GFeWorldCollisionParams_t>* vec = GetSchemaValue<CUtlVector<GFeWorldCollisionParams_t>*>(m_ptr, "PhysFeModelDesc_t", "m_WorldCollisionParams"); std::vector<GFeWorldCollisionParams_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetWorldCollisionParams(std::vector<GFeWorldCollisionParams_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->WorldCollisionParams(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFeWorldCollisionParams_t>(m_ptr, "PhysFeModelDesc_t", "m_WorldCollisionParams", true, value);
}
std::vector<float32> GPhysFeModelDesc_t::GetLegacyStretchForce() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->LegacyStretchForce(ptr=%p)", m_ptr));
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "PhysFeModelDesc_t", "m_LegacyStretchForce"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetLegacyStretchForce(std::vector<float32> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->LegacyStretchForce(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<float32>(m_ptr, "PhysFeModelDesc_t", "m_LegacyStretchForce", true, value);
}
std::vector<float32> GPhysFeModelDesc_t::GetNodeCollisionRadii() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->NodeCollisionRadii(ptr=%p)", m_ptr));
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "PhysFeModelDesc_t", "m_NodeCollisionRadii"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetNodeCollisionRadii(std::vector<float32> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->NodeCollisionRadii(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<float32>(m_ptr, "PhysFeModelDesc_t", "m_NodeCollisionRadii", true, value);
}
std::vector<float32> GPhysFeModelDesc_t::GetDynNodeFriction() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->DynNodeFriction(ptr=%p)", m_ptr));
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "PhysFeModelDesc_t", "m_DynNodeFriction"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetDynNodeFriction(std::vector<float32> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->DynNodeFriction(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<float32>(m_ptr, "PhysFeModelDesc_t", "m_DynNodeFriction", true, value);
}
std::vector<float32> GPhysFeModelDesc_t::GetLocalRotation1() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->LocalRotation1(ptr=%p)", m_ptr));
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "PhysFeModelDesc_t", "m_LocalRotation"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetLocalRotation1(std::vector<float32> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->LocalRotation1(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<float32>(m_ptr, "PhysFeModelDesc_t", "m_LocalRotation", true, value);
}
std::vector<float32> GPhysFeModelDesc_t::GetLocalForce1() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->LocalForce1(ptr=%p)", m_ptr));
    CUtlVector<float32>* vec = GetSchemaValue<CUtlVector<float32>*>(m_ptr, "PhysFeModelDesc_t", "m_LocalForce"); std::vector<float32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetLocalForce1(std::vector<float32> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->LocalForce1(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<float32>(m_ptr, "PhysFeModelDesc_t", "m_LocalForce", true, value);
}
std::vector<GFeTaperedCapsuleStretch_t> GPhysFeModelDesc_t::GetTaperedCapsuleStretches() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->TaperedCapsuleStretches(ptr=%p)", m_ptr));
    CUtlVector<GFeTaperedCapsuleStretch_t>* vec = GetSchemaValue<CUtlVector<GFeTaperedCapsuleStretch_t>*>(m_ptr, "PhysFeModelDesc_t", "m_TaperedCapsuleStretches"); std::vector<GFeTaperedCapsuleStretch_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetTaperedCapsuleStretches(std::vector<GFeTaperedCapsuleStretch_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->TaperedCapsuleStretches(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFeTaperedCapsuleStretch_t>(m_ptr, "PhysFeModelDesc_t", "m_TaperedCapsuleStretches", true, value);
}
std::vector<GFeTaperedCapsuleRigid_t> GPhysFeModelDesc_t::GetTaperedCapsuleRigids() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->TaperedCapsuleRigids(ptr=%p)", m_ptr));
    CUtlVector<GFeTaperedCapsuleRigid_t>* vec = GetSchemaValue<CUtlVector<GFeTaperedCapsuleRigid_t>*>(m_ptr, "PhysFeModelDesc_t", "m_TaperedCapsuleRigids"); std::vector<GFeTaperedCapsuleRigid_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetTaperedCapsuleRigids(std::vector<GFeTaperedCapsuleRigid_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->TaperedCapsuleRigids(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFeTaperedCapsuleRigid_t>(m_ptr, "PhysFeModelDesc_t", "m_TaperedCapsuleRigids", true, value);
}
std::vector<GFeSphereRigid_t> GPhysFeModelDesc_t::GetSphereRigids() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->SphereRigids(ptr=%p)", m_ptr));
    CUtlVector<GFeSphereRigid_t>* vec = GetSchemaValue<CUtlVector<GFeSphereRigid_t>*>(m_ptr, "PhysFeModelDesc_t", "m_SphereRigids"); std::vector<GFeSphereRigid_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetSphereRigids(std::vector<GFeSphereRigid_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->SphereRigids(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFeSphereRigid_t>(m_ptr, "PhysFeModelDesc_t", "m_SphereRigids", true, value);
}
std::vector<uint16> GPhysFeModelDesc_t::GetWorldCollisionNodes() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->WorldCollisionNodes(ptr=%p)", m_ptr));
    CUtlVector<uint16>* vec = GetSchemaValue<CUtlVector<uint16>*>(m_ptr, "PhysFeModelDesc_t", "m_WorldCollisionNodes"); std::vector<uint16> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetWorldCollisionNodes(std::vector<uint16> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->WorldCollisionNodes(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<uint16>(m_ptr, "PhysFeModelDesc_t", "m_WorldCollisionNodes", true, value);
}
std::vector<uint16> GPhysFeModelDesc_t::GetTreeParents() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->TreeParents(ptr=%p)", m_ptr));
    CUtlVector<uint16>* vec = GetSchemaValue<CUtlVector<uint16>*>(m_ptr, "PhysFeModelDesc_t", "m_TreeParents"); std::vector<uint16> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetTreeParents(std::vector<uint16> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->TreeParents(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<uint16>(m_ptr, "PhysFeModelDesc_t", "m_TreeParents", true, value);
}
std::vector<uint16> GPhysFeModelDesc_t::GetTreeCollisionMasks() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->TreeCollisionMasks(ptr=%p)", m_ptr));
    CUtlVector<uint16>* vec = GetSchemaValue<CUtlVector<uint16>*>(m_ptr, "PhysFeModelDesc_t", "m_TreeCollisionMasks"); std::vector<uint16> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetTreeCollisionMasks(std::vector<uint16> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->TreeCollisionMasks(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<uint16>(m_ptr, "PhysFeModelDesc_t", "m_TreeCollisionMasks", true, value);
}
std::vector<GFeTreeChildren_t> GPhysFeModelDesc_t::GetTreeChildren() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->TreeChildren(ptr=%p)", m_ptr));
    CUtlVector<GFeTreeChildren_t>* vec = GetSchemaValue<CUtlVector<GFeTreeChildren_t>*>(m_ptr, "PhysFeModelDesc_t", "m_TreeChildren"); std::vector<GFeTreeChildren_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetTreeChildren(std::vector<GFeTreeChildren_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->TreeChildren(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFeTreeChildren_t>(m_ptr, "PhysFeModelDesc_t", "m_TreeChildren", true, value);
}
std::vector<uint16> GPhysFeModelDesc_t::GetFreeNodes() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->FreeNodes(ptr=%p)", m_ptr));
    CUtlVector<uint16>* vec = GetSchemaValue<CUtlVector<uint16>*>(m_ptr, "PhysFeModelDesc_t", "m_FreeNodes"); std::vector<uint16> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetFreeNodes(std::vector<uint16> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->FreeNodes(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<uint16>(m_ptr, "PhysFeModelDesc_t", "m_FreeNodes", true, value);
}
std::vector<GFeFitMatrix_t> GPhysFeModelDesc_t::GetFitMatrices() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->FitMatrices(ptr=%p)", m_ptr));
    CUtlVector<GFeFitMatrix_t>* vec = GetSchemaValue<CUtlVector<GFeFitMatrix_t>*>(m_ptr, "PhysFeModelDesc_t", "m_FitMatrices"); std::vector<GFeFitMatrix_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetFitMatrices(std::vector<GFeFitMatrix_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->FitMatrices(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFeFitMatrix_t>(m_ptr, "PhysFeModelDesc_t", "m_FitMatrices", true, value);
}
std::vector<GFeFitWeight_t> GPhysFeModelDesc_t::GetFitWeights() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->FitWeights(ptr=%p)", m_ptr));
    CUtlVector<GFeFitWeight_t>* vec = GetSchemaValue<CUtlVector<GFeFitWeight_t>*>(m_ptr, "PhysFeModelDesc_t", "m_FitWeights"); std::vector<GFeFitWeight_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetFitWeights(std::vector<GFeFitWeight_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->FitWeights(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFeFitWeight_t>(m_ptr, "PhysFeModelDesc_t", "m_FitWeights", true, value);
}
std::vector<GFeNodeReverseOffset_t> GPhysFeModelDesc_t::GetReverseOffsets() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->ReverseOffsets(ptr=%p)", m_ptr));
    CUtlVector<GFeNodeReverseOffset_t>* vec = GetSchemaValue<CUtlVector<GFeNodeReverseOffset_t>*>(m_ptr, "PhysFeModelDesc_t", "m_ReverseOffsets"); std::vector<GFeNodeReverseOffset_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetReverseOffsets(std::vector<GFeNodeReverseOffset_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->ReverseOffsets(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFeNodeReverseOffset_t>(m_ptr, "PhysFeModelDesc_t", "m_ReverseOffsets", true, value);
}
std::vector<GFeAnimStrayRadius_t> GPhysFeModelDesc_t::GetAnimStrayRadii() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->AnimStrayRadii(ptr=%p)", m_ptr));
    CUtlVector<GFeAnimStrayRadius_t>* vec = GetSchemaValue<CUtlVector<GFeAnimStrayRadius_t>*>(m_ptr, "PhysFeModelDesc_t", "m_AnimStrayRadii"); std::vector<GFeAnimStrayRadius_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetAnimStrayRadii(std::vector<GFeAnimStrayRadius_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->AnimStrayRadii(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFeAnimStrayRadius_t>(m_ptr, "PhysFeModelDesc_t", "m_AnimStrayRadii", true, value);
}
std::vector<GFeSimdAnimStrayRadius_t> GPhysFeModelDesc_t::GetSimdAnimStrayRadii() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->SimdAnimStrayRadii(ptr=%p)", m_ptr));
    CUtlVector<GFeSimdAnimStrayRadius_t>* vec = GetSchemaValue<CUtlVector<GFeSimdAnimStrayRadius_t>*>(m_ptr, "PhysFeModelDesc_t", "m_SimdAnimStrayRadii"); std::vector<GFeSimdAnimStrayRadius_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetSimdAnimStrayRadii(std::vector<GFeSimdAnimStrayRadius_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->SimdAnimStrayRadii(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFeSimdAnimStrayRadius_t>(m_ptr, "PhysFeModelDesc_t", "m_SimdAnimStrayRadii", true, value);
}
std::vector<GFeKelagerBend2_t> GPhysFeModelDesc_t::GetKelagerBends() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->KelagerBends(ptr=%p)", m_ptr));
    CUtlVector<GFeKelagerBend2_t>* vec = GetSchemaValue<CUtlVector<GFeKelagerBend2_t>*>(m_ptr, "PhysFeModelDesc_t", "m_KelagerBends"); std::vector<GFeKelagerBend2_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetKelagerBends(std::vector<GFeKelagerBend2_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->KelagerBends(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFeKelagerBend2_t>(m_ptr, "PhysFeModelDesc_t", "m_KelagerBends", true, value);
}
std::vector<GFeCtrlSoftOffset_t> GPhysFeModelDesc_t::GetCtrlSoftOffsets() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->CtrlSoftOffsets(ptr=%p)", m_ptr));
    CUtlVector<GFeCtrlSoftOffset_t>* vec = GetSchemaValue<CUtlVector<GFeCtrlSoftOffset_t>*>(m_ptr, "PhysFeModelDesc_t", "m_CtrlSoftOffsets"); std::vector<GFeCtrlSoftOffset_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetCtrlSoftOffsets(std::vector<GFeCtrlSoftOffset_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->CtrlSoftOffsets(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFeCtrlSoftOffset_t>(m_ptr, "PhysFeModelDesc_t", "m_CtrlSoftOffsets", true, value);
}
std::vector<GCFeIndexedJiggleBone> GPhysFeModelDesc_t::GetJiggleBones() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->JiggleBones(ptr=%p)", m_ptr));
    CUtlVector<GCFeIndexedJiggleBone>* vec = GetSchemaValue<CUtlVector<GCFeIndexedJiggleBone>*>(m_ptr, "PhysFeModelDesc_t", "m_JiggleBones"); std::vector<GCFeIndexedJiggleBone> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetJiggleBones(std::vector<GCFeIndexedJiggleBone> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->JiggleBones(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GCFeIndexedJiggleBone>(m_ptr, "PhysFeModelDesc_t", "m_JiggleBones", true, value);
}
std::vector<uint16> GPhysFeModelDesc_t::GetSourceElems() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->SourceElems(ptr=%p)", m_ptr));
    CUtlVector<uint16>* vec = GetSchemaValue<CUtlVector<uint16>*>(m_ptr, "PhysFeModelDesc_t", "m_SourceElems"); std::vector<uint16> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetSourceElems(std::vector<uint16> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->SourceElems(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<uint16>(m_ptr, "PhysFeModelDesc_t", "m_SourceElems", true, value);
}
std::vector<uint32> GPhysFeModelDesc_t::GetGoalDampedSpringIntegrators() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->GoalDampedSpringIntegrators(ptr=%p)", m_ptr));
    CUtlVector<uint32>* vec = GetSchemaValue<CUtlVector<uint32>*>(m_ptr, "PhysFeModelDesc_t", "m_GoalDampedSpringIntegrators"); std::vector<uint32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetGoalDampedSpringIntegrators(std::vector<uint32> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->GoalDampedSpringIntegrators(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<uint32>(m_ptr, "PhysFeModelDesc_t", "m_GoalDampedSpringIntegrators", true, value);
}
std::vector<GFeTri_t> GPhysFeModelDesc_t::GetTris() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->Tris(ptr=%p)", m_ptr));
    CUtlVector<GFeTri_t>* vec = GetSchemaValue<CUtlVector<GFeTri_t>*>(m_ptr, "PhysFeModelDesc_t", "m_Tris"); std::vector<GFeTri_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetTris(std::vector<GFeTri_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->Tris(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFeTri_t>(m_ptr, "PhysFeModelDesc_t", "m_Tris", true, value);
}
uint16_t GPhysFeModelDesc_t::GetTriCount1() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->TriCount1(ptr=%p)", m_ptr));
    return GetSchemaValue<uint16_t>(m_ptr, "PhysFeModelDesc_t", "m_nTriCount1");
}
void GPhysFeModelDesc_t::SetTriCount1(uint16_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->TriCount1(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nTriCount1", true, value);
}
uint16_t GPhysFeModelDesc_t::GetTriCount2() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->TriCount2(ptr=%p)", m_ptr));
    return GetSchemaValue<uint16_t>(m_ptr, "PhysFeModelDesc_t", "m_nTriCount2");
}
void GPhysFeModelDesc_t::SetTriCount2(uint16_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->TriCount2(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nTriCount2", true, value);
}
uint32_t GPhysFeModelDesc_t::GetReservedUint8() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->ReservedUint8(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "PhysFeModelDesc_t", "m_nReservedUint8");
}
void GPhysFeModelDesc_t::SetReservedUint8(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->ReservedUint8(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nReservedUint8", true, value);
}
uint32_t GPhysFeModelDesc_t::GetExtraPressureIterations() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->ExtraPressureIterations(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "PhysFeModelDesc_t", "m_nExtraPressureIterations");
}
void GPhysFeModelDesc_t::SetExtraPressureIterations(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->ExtraPressureIterations(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nExtraPressureIterations", true, value);
}
uint32_t GPhysFeModelDesc_t::GetExtraGoalIterations() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->ExtraGoalIterations(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "PhysFeModelDesc_t", "m_nExtraGoalIterations");
}
void GPhysFeModelDesc_t::SetExtraGoalIterations(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->ExtraGoalIterations(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nExtraGoalIterations", true, value);
}
uint32_t GPhysFeModelDesc_t::GetExtraIterations() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->ExtraIterations(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "PhysFeModelDesc_t", "m_nExtraIterations");
}
void GPhysFeModelDesc_t::SetExtraIterations(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->ExtraIterations(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nExtraIterations", true, value);
}
std::vector<GFeBoxRigid_t> GPhysFeModelDesc_t::GetBoxRigids() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->BoxRigids(ptr=%p)", m_ptr));
    CUtlVector<GFeBoxRigid_t>* vec = GetSchemaValue<CUtlVector<GFeBoxRigid_t>*>(m_ptr, "PhysFeModelDesc_t", "m_BoxRigids"); std::vector<GFeBoxRigid_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetBoxRigids(std::vector<GFeBoxRigid_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->BoxRigids(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFeBoxRigid_t>(m_ptr, "PhysFeModelDesc_t", "m_BoxRigids", true, value);
}
std::vector<uint8> GPhysFeModelDesc_t::GetDynNodeVertexSet() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->DynNodeVertexSet(ptr=%p)", m_ptr));
    CUtlVector<uint8>* vec = GetSchemaValue<CUtlVector<uint8>*>(m_ptr, "PhysFeModelDesc_t", "m_DynNodeVertexSet"); std::vector<uint8> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetDynNodeVertexSet(std::vector<uint8> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->DynNodeVertexSet(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<uint8>(m_ptr, "PhysFeModelDesc_t", "m_DynNodeVertexSet", true, value);
}
std::vector<uint32> GPhysFeModelDesc_t::GetVertexSetNames() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->VertexSetNames(ptr=%p)", m_ptr));
    CUtlVector<uint32>* vec = GetSchemaValue<CUtlVector<uint32>*>(m_ptr, "PhysFeModelDesc_t", "m_VertexSetNames"); std::vector<uint32> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetVertexSetNames(std::vector<uint32> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->VertexSetNames(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<uint32>(m_ptr, "PhysFeModelDesc_t", "m_VertexSetNames", true, value);
}
std::vector<GFeRigidColliderIndices_t> GPhysFeModelDesc_t::GetRigidColliderPriorities() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->RigidColliderPriorities(ptr=%p)", m_ptr));
    CUtlVector<GFeRigidColliderIndices_t>* vec = GetSchemaValue<CUtlVector<GFeRigidColliderIndices_t>*>(m_ptr, "PhysFeModelDesc_t", "m_RigidColliderPriorities"); std::vector<GFeRigidColliderIndices_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetRigidColliderPriorities(std::vector<GFeRigidColliderIndices_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->RigidColliderPriorities(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFeRigidColliderIndices_t>(m_ptr, "PhysFeModelDesc_t", "m_RigidColliderPriorities", true, value);
}
std::vector<GFeMorphLayerDepr_t> GPhysFeModelDesc_t::GetMorphLayers() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->MorphLayers(ptr=%p)", m_ptr));
    CUtlVector<GFeMorphLayerDepr_t>* vec = GetSchemaValue<CUtlVector<GFeMorphLayerDepr_t>*>(m_ptr, "PhysFeModelDesc_t", "m_MorphLayers"); std::vector<GFeMorphLayerDepr_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetMorphLayers(std::vector<GFeMorphLayerDepr_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->MorphLayers(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFeMorphLayerDepr_t>(m_ptr, "PhysFeModelDesc_t", "m_MorphLayers", true, value);
}
std::vector<uint8> GPhysFeModelDesc_t::GetMorphSetData() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->MorphSetData(ptr=%p)", m_ptr));
    CUtlVector<uint8>* vec = GetSchemaValue<CUtlVector<uint8>*>(m_ptr, "PhysFeModelDesc_t", "m_MorphSetData"); std::vector<uint8> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetMorphSetData(std::vector<uint8> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->MorphSetData(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<uint8>(m_ptr, "PhysFeModelDesc_t", "m_MorphSetData", true, value);
}
std::vector<GFeVertexMapDesc_t> GPhysFeModelDesc_t::GetVertexMaps() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->VertexMaps(ptr=%p)", m_ptr));
    CUtlVector<GFeVertexMapDesc_t>* vec = GetSchemaValue<CUtlVector<GFeVertexMapDesc_t>*>(m_ptr, "PhysFeModelDesc_t", "m_VertexMaps"); std::vector<GFeVertexMapDesc_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetVertexMaps(std::vector<GFeVertexMapDesc_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->VertexMaps(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFeVertexMapDesc_t>(m_ptr, "PhysFeModelDesc_t", "m_VertexMaps", true, value);
}
std::vector<uint8> GPhysFeModelDesc_t::GetVertexMapValues() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->VertexMapValues(ptr=%p)", m_ptr));
    CUtlVector<uint8>* vec = GetSchemaValue<CUtlVector<uint8>*>(m_ptr, "PhysFeModelDesc_t", "m_VertexMapValues"); std::vector<uint8> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetVertexMapValues(std::vector<uint8> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->VertexMapValues(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<uint8>(m_ptr, "PhysFeModelDesc_t", "m_VertexMapValues", true, value);
}
std::vector<GFeEffectDesc_t> GPhysFeModelDesc_t::GetEffects() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->Effects(ptr=%p)", m_ptr));
    CUtlVector<GFeEffectDesc_t>* vec = GetSchemaValue<CUtlVector<GFeEffectDesc_t>*>(m_ptr, "PhysFeModelDesc_t", "m_Effects"); std::vector<GFeEffectDesc_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetEffects(std::vector<GFeEffectDesc_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->Effects(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFeEffectDesc_t>(m_ptr, "PhysFeModelDesc_t", "m_Effects", true, value);
}
std::vector<GFeCtrlOffset_t> GPhysFeModelDesc_t::GetLockToParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->LockToParent(ptr=%p)", m_ptr));
    CUtlVector<GFeCtrlOffset_t>* vec = GetSchemaValue<CUtlVector<GFeCtrlOffset_t>*>(m_ptr, "PhysFeModelDesc_t", "m_LockToParent"); std::vector<GFeCtrlOffset_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetLockToParent(std::vector<GFeCtrlOffset_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->LockToParent(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFeCtrlOffset_t>(m_ptr, "PhysFeModelDesc_t", "m_LockToParent", true, value);
}
std::vector<uint16> GPhysFeModelDesc_t::GetLockToGoal() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->LockToGoal(ptr=%p)", m_ptr));
    CUtlVector<uint16>* vec = GetSchemaValue<CUtlVector<uint16>*>(m_ptr, "PhysFeModelDesc_t", "m_LockToGoal"); std::vector<uint16> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetLockToGoal(std::vector<uint16> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->LockToGoal(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<uint16>(m_ptr, "PhysFeModelDesc_t", "m_LockToGoal", true, value);
}
std::vector<int16> GPhysFeModelDesc_t::GetSkelParents() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->SkelParents(ptr=%p)", m_ptr));
    CUtlVector<int16>* vec = GetSchemaValue<CUtlVector<int16>*>(m_ptr, "PhysFeModelDesc_t", "m_SkelParents"); std::vector<int16> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetSkelParents(std::vector<int16> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->SkelParents(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<int16>(m_ptr, "PhysFeModelDesc_t", "m_SkelParents", true, value);
}
std::vector<GFeNodeWindBase_t> GPhysFeModelDesc_t::GetDynNodeWindBases() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->DynNodeWindBases(ptr=%p)", m_ptr));
    CUtlVector<GFeNodeWindBase_t>* vec = GetSchemaValue<CUtlVector<GFeNodeWindBase_t>*>(m_ptr, "PhysFeModelDesc_t", "m_DynNodeWindBases"); std::vector<GFeNodeWindBase_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GPhysFeModelDesc_t::SetDynNodeWindBases(std::vector<GFeNodeWindBase_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->DynNodeWindBases(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GFeNodeWindBase_t>(m_ptr, "PhysFeModelDesc_t", "m_DynNodeWindBases", true, value);
}
float GPhysFeModelDesc_t::GetInternalPressure() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->InternalPressure(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "PhysFeModelDesc_t", "m_flInternalPressure");
}
void GPhysFeModelDesc_t::SetInternalPressure(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->InternalPressure(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_flInternalPressure", true, value);
}
float GPhysFeModelDesc_t::GetDefaultTimeDilation() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->DefaultTimeDilation(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "PhysFeModelDesc_t", "m_flDefaultTimeDilation");
}
void GPhysFeModelDesc_t::SetDefaultTimeDilation(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->DefaultTimeDilation(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_flDefaultTimeDilation", true, value);
}
float GPhysFeModelDesc_t::GetWindage() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->Windage(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "PhysFeModelDesc_t", "m_flWindage");
}
void GPhysFeModelDesc_t::SetWindage(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->Windage(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_flWindage", true, value);
}
float GPhysFeModelDesc_t::GetWindDrag() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->WindDrag(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "PhysFeModelDesc_t", "m_flWindDrag");
}
void GPhysFeModelDesc_t::SetWindDrag(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->WindDrag(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_flWindDrag", true, value);
}
float GPhysFeModelDesc_t::GetDefaultSurfaceStretch() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->DefaultSurfaceStretch(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "PhysFeModelDesc_t", "m_flDefaultSurfaceStretch");
}
void GPhysFeModelDesc_t::SetDefaultSurfaceStretch(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->DefaultSurfaceStretch(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_flDefaultSurfaceStretch", true, value);
}
float GPhysFeModelDesc_t::GetDefaultThreadStretch() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->DefaultThreadStretch(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "PhysFeModelDesc_t", "m_flDefaultThreadStretch");
}
void GPhysFeModelDesc_t::SetDefaultThreadStretch(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->DefaultThreadStretch(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_flDefaultThreadStretch", true, value);
}
float GPhysFeModelDesc_t::GetDefaultGravityScale() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->DefaultGravityScale(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "PhysFeModelDesc_t", "m_flDefaultGravityScale");
}
void GPhysFeModelDesc_t::SetDefaultGravityScale(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->DefaultGravityScale(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_flDefaultGravityScale", true, value);
}
float GPhysFeModelDesc_t::GetDefaultVelAirDrag() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->DefaultVelAirDrag(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "PhysFeModelDesc_t", "m_flDefaultVelAirDrag");
}
void GPhysFeModelDesc_t::SetDefaultVelAirDrag(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->DefaultVelAirDrag(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_flDefaultVelAirDrag", true, value);
}
float GPhysFeModelDesc_t::GetDefaultExpAirDrag() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->DefaultExpAirDrag(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "PhysFeModelDesc_t", "m_flDefaultExpAirDrag");
}
void GPhysFeModelDesc_t::SetDefaultExpAirDrag(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->DefaultExpAirDrag(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_flDefaultExpAirDrag", true, value);
}
float GPhysFeModelDesc_t::GetDefaultVelQuadAirDrag() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->DefaultVelQuadAirDrag(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "PhysFeModelDesc_t", "m_flDefaultVelQuadAirDrag");
}
void GPhysFeModelDesc_t::SetDefaultVelQuadAirDrag(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->DefaultVelQuadAirDrag(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_flDefaultVelQuadAirDrag", true, value);
}
float GPhysFeModelDesc_t::GetDefaultExpQuadAirDrag() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->DefaultExpQuadAirDrag(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "PhysFeModelDesc_t", "m_flDefaultExpQuadAirDrag");
}
void GPhysFeModelDesc_t::SetDefaultExpQuadAirDrag(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->DefaultExpQuadAirDrag(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_flDefaultExpQuadAirDrag", true, value);
}
float GPhysFeModelDesc_t::GetRodVelocitySmoothRate() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->RodVelocitySmoothRate(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "PhysFeModelDesc_t", "m_flRodVelocitySmoothRate");
}
void GPhysFeModelDesc_t::SetRodVelocitySmoothRate(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->RodVelocitySmoothRate(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_flRodVelocitySmoothRate", true, value);
}
float GPhysFeModelDesc_t::GetQuadVelocitySmoothRate() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->QuadVelocitySmoothRate(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "PhysFeModelDesc_t", "m_flQuadVelocitySmoothRate");
}
void GPhysFeModelDesc_t::SetQuadVelocitySmoothRate(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->QuadVelocitySmoothRate(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_flQuadVelocitySmoothRate", true, value);
}
float GPhysFeModelDesc_t::GetAddWorldCollisionRadius() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->AddWorldCollisionRadius(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "PhysFeModelDesc_t", "m_flAddWorldCollisionRadius");
}
void GPhysFeModelDesc_t::SetAddWorldCollisionRadius(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->AddWorldCollisionRadius(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_flAddWorldCollisionRadius", true, value);
}
float GPhysFeModelDesc_t::GetDefaultVolumetricSolveAmount() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->DefaultVolumetricSolveAmount(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "PhysFeModelDesc_t", "m_flDefaultVolumetricSolveAmount");
}
void GPhysFeModelDesc_t::SetDefaultVolumetricSolveAmount(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->DefaultVolumetricSolveAmount(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_flDefaultVolumetricSolveAmount", true, value);
}
float GPhysFeModelDesc_t::GetMotionSmoothCDT() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->MotionSmoothCDT(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "PhysFeModelDesc_t", "m_flMotionSmoothCDT");
}
void GPhysFeModelDesc_t::SetMotionSmoothCDT(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->MotionSmoothCDT(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_flMotionSmoothCDT", true, value);
}
uint16_t GPhysFeModelDesc_t::GetRodVelocitySmoothIterations() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->RodVelocitySmoothIterations(ptr=%p)", m_ptr));
    return GetSchemaValue<uint16_t>(m_ptr, "PhysFeModelDesc_t", "m_nRodVelocitySmoothIterations");
}
void GPhysFeModelDesc_t::SetRodVelocitySmoothIterations(uint16_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->RodVelocitySmoothIterations(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nRodVelocitySmoothIterations", true, value);
}
uint16_t GPhysFeModelDesc_t::GetQuadVelocitySmoothIterations() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: PhysFeModelDesc_t->QuadVelocitySmoothIterations(ptr=%p)", m_ptr));
    return GetSchemaValue<uint16_t>(m_ptr, "PhysFeModelDesc_t", "m_nQuadVelocitySmoothIterations");
}
void GPhysFeModelDesc_t::SetQuadVelocitySmoothIterations(uint16_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: PhysFeModelDesc_t->QuadVelocitySmoothIterations(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "PhysFeModelDesc_t", "m_nQuadVelocitySmoothIterations", true, value);
}
void* GPhysFeModelDesc_t::GetPtr() {
    return m_ptr;
}
std::string GPhysFeModelDesc_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GPhysFeModelDesc_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassPhysFeModelDesc_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GPhysFeModelDesc_t>("PhysFeModelDesc_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("CtrlHash", &GPhysFeModelDesc_t::GetCtrlHash, &GPhysFeModelDesc_t::SetCtrlHash)
        .addProperty("CtrlName", &GPhysFeModelDesc_t::GetCtrlName, &GPhysFeModelDesc_t::SetCtrlName)
        .addProperty("StaticNodeFlags", &GPhysFeModelDesc_t::GetStaticNodeFlags, &GPhysFeModelDesc_t::SetStaticNodeFlags)
        .addProperty("DynamicNodeFlags", &GPhysFeModelDesc_t::GetDynamicNodeFlags, &GPhysFeModelDesc_t::SetDynamicNodeFlags)
        .addProperty("LocalForce", &GPhysFeModelDesc_t::GetLocalForce, &GPhysFeModelDesc_t::SetLocalForce)
        .addProperty("LocalRotation", &GPhysFeModelDesc_t::GetLocalRotation, &GPhysFeModelDesc_t::SetLocalRotation)
        .addProperty("NodeCount", &GPhysFeModelDesc_t::GetNodeCount, &GPhysFeModelDesc_t::SetNodeCount)
        .addProperty("StaticNodes", &GPhysFeModelDesc_t::GetStaticNodes, &GPhysFeModelDesc_t::SetStaticNodes)
        .addProperty("RotLockStaticNodes", &GPhysFeModelDesc_t::GetRotLockStaticNodes, &GPhysFeModelDesc_t::SetRotLockStaticNodes)
        .addProperty("FirstPositionDrivenNode", &GPhysFeModelDesc_t::GetFirstPositionDrivenNode, &GPhysFeModelDesc_t::SetFirstPositionDrivenNode)
        .addProperty("SimdTriCount1", &GPhysFeModelDesc_t::GetSimdTriCount1, &GPhysFeModelDesc_t::SetSimdTriCount1)
        .addProperty("SimdTriCount2", &GPhysFeModelDesc_t::GetSimdTriCount2, &GPhysFeModelDesc_t::SetSimdTriCount2)
        .addProperty("SimdQuadCount1", &GPhysFeModelDesc_t::GetSimdQuadCount1, &GPhysFeModelDesc_t::SetSimdQuadCount1)
        .addProperty("SimdQuadCount2", &GPhysFeModelDesc_t::GetSimdQuadCount2, &GPhysFeModelDesc_t::SetSimdQuadCount2)
        .addProperty("QuadCount1", &GPhysFeModelDesc_t::GetQuadCount1, &GPhysFeModelDesc_t::SetQuadCount1)
        .addProperty("QuadCount2", &GPhysFeModelDesc_t::GetQuadCount2, &GPhysFeModelDesc_t::SetQuadCount2)
        .addProperty("TreeDepth", &GPhysFeModelDesc_t::GetTreeDepth, &GPhysFeModelDesc_t::SetTreeDepth)
        .addProperty("NodeBaseJiggleboneDependsCount", &GPhysFeModelDesc_t::GetNodeBaseJiggleboneDependsCount, &GPhysFeModelDesc_t::SetNodeBaseJiggleboneDependsCount)
        .addProperty("RopeCount", &GPhysFeModelDesc_t::GetRopeCount, &GPhysFeModelDesc_t::SetRopeCount)
        .addProperty("Ropes", &GPhysFeModelDesc_t::GetRopes, &GPhysFeModelDesc_t::SetRopes)
        .addProperty("NodeBases", &GPhysFeModelDesc_t::GetNodeBases, &GPhysFeModelDesc_t::SetNodeBases)
        .addProperty("SimdNodeBases", &GPhysFeModelDesc_t::GetSimdNodeBases, &GPhysFeModelDesc_t::SetSimdNodeBases)
        .addProperty("Quads", &GPhysFeModelDesc_t::GetQuads, &GPhysFeModelDesc_t::SetQuads)
        .addProperty("SimdQuads", &GPhysFeModelDesc_t::GetSimdQuads, &GPhysFeModelDesc_t::SetSimdQuads)
        .addProperty("SimdTris", &GPhysFeModelDesc_t::GetSimdTris, &GPhysFeModelDesc_t::SetSimdTris)
        .addProperty("SimdRods", &GPhysFeModelDesc_t::GetSimdRods, &GPhysFeModelDesc_t::SetSimdRods)
        .addProperty("SimdRodsAnim", &GPhysFeModelDesc_t::GetSimdRodsAnim, &GPhysFeModelDesc_t::SetSimdRodsAnim)
        .addProperty("Rods", &GPhysFeModelDesc_t::GetRods, &GPhysFeModelDesc_t::SetRods)
        .addProperty("Twists", &GPhysFeModelDesc_t::GetTwists, &GPhysFeModelDesc_t::SetTwists)
        .addProperty("AxialEdges", &GPhysFeModelDesc_t::GetAxialEdges, &GPhysFeModelDesc_t::SetAxialEdges)
        .addProperty("NodeInvMasses", &GPhysFeModelDesc_t::GetNodeInvMasses, &GPhysFeModelDesc_t::SetNodeInvMasses)
        .addProperty("CtrlOffsets", &GPhysFeModelDesc_t::GetCtrlOffsets, &GPhysFeModelDesc_t::SetCtrlOffsets)
        .addProperty("CtrlOsOffsets", &GPhysFeModelDesc_t::GetCtrlOsOffsets, &GPhysFeModelDesc_t::SetCtrlOsOffsets)
        .addProperty("FollowNodes", &GPhysFeModelDesc_t::GetFollowNodes, &GPhysFeModelDesc_t::SetFollowNodes)
        .addProperty("CollisionPlanes", &GPhysFeModelDesc_t::GetCollisionPlanes, &GPhysFeModelDesc_t::SetCollisionPlanes)
        .addProperty("NodeIntegrator", &GPhysFeModelDesc_t::GetNodeIntegrator, &GPhysFeModelDesc_t::SetNodeIntegrator)
        .addProperty("SpringIntegrator", &GPhysFeModelDesc_t::GetSpringIntegrator, &GPhysFeModelDesc_t::SetSpringIntegrator)
        .addProperty("SimdSpringIntegrator", &GPhysFeModelDesc_t::GetSimdSpringIntegrator, &GPhysFeModelDesc_t::SetSimdSpringIntegrator)
        .addProperty("WorldCollisionParams", &GPhysFeModelDesc_t::GetWorldCollisionParams, &GPhysFeModelDesc_t::SetWorldCollisionParams)
        .addProperty("LegacyStretchForce", &GPhysFeModelDesc_t::GetLegacyStretchForce, &GPhysFeModelDesc_t::SetLegacyStretchForce)
        .addProperty("NodeCollisionRadii", &GPhysFeModelDesc_t::GetNodeCollisionRadii, &GPhysFeModelDesc_t::SetNodeCollisionRadii)
        .addProperty("DynNodeFriction", &GPhysFeModelDesc_t::GetDynNodeFriction, &GPhysFeModelDesc_t::SetDynNodeFriction)
        .addProperty("LocalRotation1", &GPhysFeModelDesc_t::GetLocalRotation1, &GPhysFeModelDesc_t::SetLocalRotation1)
        .addProperty("LocalForce1", &GPhysFeModelDesc_t::GetLocalForce1, &GPhysFeModelDesc_t::SetLocalForce1)
        .addProperty("TaperedCapsuleStretches", &GPhysFeModelDesc_t::GetTaperedCapsuleStretches, &GPhysFeModelDesc_t::SetTaperedCapsuleStretches)
        .addProperty("TaperedCapsuleRigids", &GPhysFeModelDesc_t::GetTaperedCapsuleRigids, &GPhysFeModelDesc_t::SetTaperedCapsuleRigids)
        .addProperty("SphereRigids", &GPhysFeModelDesc_t::GetSphereRigids, &GPhysFeModelDesc_t::SetSphereRigids)
        .addProperty("WorldCollisionNodes", &GPhysFeModelDesc_t::GetWorldCollisionNodes, &GPhysFeModelDesc_t::SetWorldCollisionNodes)
        .addProperty("TreeParents", &GPhysFeModelDesc_t::GetTreeParents, &GPhysFeModelDesc_t::SetTreeParents)
        .addProperty("TreeCollisionMasks", &GPhysFeModelDesc_t::GetTreeCollisionMasks, &GPhysFeModelDesc_t::SetTreeCollisionMasks)
        .addProperty("TreeChildren", &GPhysFeModelDesc_t::GetTreeChildren, &GPhysFeModelDesc_t::SetTreeChildren)
        .addProperty("FreeNodes", &GPhysFeModelDesc_t::GetFreeNodes, &GPhysFeModelDesc_t::SetFreeNodes)
        .addProperty("FitMatrices", &GPhysFeModelDesc_t::GetFitMatrices, &GPhysFeModelDesc_t::SetFitMatrices)
        .addProperty("FitWeights", &GPhysFeModelDesc_t::GetFitWeights, &GPhysFeModelDesc_t::SetFitWeights)
        .addProperty("ReverseOffsets", &GPhysFeModelDesc_t::GetReverseOffsets, &GPhysFeModelDesc_t::SetReverseOffsets)
        .addProperty("AnimStrayRadii", &GPhysFeModelDesc_t::GetAnimStrayRadii, &GPhysFeModelDesc_t::SetAnimStrayRadii)
        .addProperty("SimdAnimStrayRadii", &GPhysFeModelDesc_t::GetSimdAnimStrayRadii, &GPhysFeModelDesc_t::SetSimdAnimStrayRadii)
        .addProperty("KelagerBends", &GPhysFeModelDesc_t::GetKelagerBends, &GPhysFeModelDesc_t::SetKelagerBends)
        .addProperty("CtrlSoftOffsets", &GPhysFeModelDesc_t::GetCtrlSoftOffsets, &GPhysFeModelDesc_t::SetCtrlSoftOffsets)
        .addProperty("JiggleBones", &GPhysFeModelDesc_t::GetJiggleBones, &GPhysFeModelDesc_t::SetJiggleBones)
        .addProperty("SourceElems", &GPhysFeModelDesc_t::GetSourceElems, &GPhysFeModelDesc_t::SetSourceElems)
        .addProperty("GoalDampedSpringIntegrators", &GPhysFeModelDesc_t::GetGoalDampedSpringIntegrators, &GPhysFeModelDesc_t::SetGoalDampedSpringIntegrators)
        .addProperty("Tris", &GPhysFeModelDesc_t::GetTris, &GPhysFeModelDesc_t::SetTris)
        .addProperty("TriCount1", &GPhysFeModelDesc_t::GetTriCount1, &GPhysFeModelDesc_t::SetTriCount1)
        .addProperty("TriCount2", &GPhysFeModelDesc_t::GetTriCount2, &GPhysFeModelDesc_t::SetTriCount2)
        .addProperty("ReservedUint8", &GPhysFeModelDesc_t::GetReservedUint8, &GPhysFeModelDesc_t::SetReservedUint8)
        .addProperty("ExtraPressureIterations", &GPhysFeModelDesc_t::GetExtraPressureIterations, &GPhysFeModelDesc_t::SetExtraPressureIterations)
        .addProperty("ExtraGoalIterations", &GPhysFeModelDesc_t::GetExtraGoalIterations, &GPhysFeModelDesc_t::SetExtraGoalIterations)
        .addProperty("ExtraIterations", &GPhysFeModelDesc_t::GetExtraIterations, &GPhysFeModelDesc_t::SetExtraIterations)
        .addProperty("BoxRigids", &GPhysFeModelDesc_t::GetBoxRigids, &GPhysFeModelDesc_t::SetBoxRigids)
        .addProperty("DynNodeVertexSet", &GPhysFeModelDesc_t::GetDynNodeVertexSet, &GPhysFeModelDesc_t::SetDynNodeVertexSet)
        .addProperty("VertexSetNames", &GPhysFeModelDesc_t::GetVertexSetNames, &GPhysFeModelDesc_t::SetVertexSetNames)
        .addProperty("RigidColliderPriorities", &GPhysFeModelDesc_t::GetRigidColliderPriorities, &GPhysFeModelDesc_t::SetRigidColliderPriorities)
        .addProperty("MorphLayers", &GPhysFeModelDesc_t::GetMorphLayers, &GPhysFeModelDesc_t::SetMorphLayers)
        .addProperty("MorphSetData", &GPhysFeModelDesc_t::GetMorphSetData, &GPhysFeModelDesc_t::SetMorphSetData)
        .addProperty("VertexMaps", &GPhysFeModelDesc_t::GetVertexMaps, &GPhysFeModelDesc_t::SetVertexMaps)
        .addProperty("VertexMapValues", &GPhysFeModelDesc_t::GetVertexMapValues, &GPhysFeModelDesc_t::SetVertexMapValues)
        .addProperty("Effects", &GPhysFeModelDesc_t::GetEffects, &GPhysFeModelDesc_t::SetEffects)
        .addProperty("LockToParent", &GPhysFeModelDesc_t::GetLockToParent, &GPhysFeModelDesc_t::SetLockToParent)
        .addProperty("LockToGoal", &GPhysFeModelDesc_t::GetLockToGoal, &GPhysFeModelDesc_t::SetLockToGoal)
        .addProperty("SkelParents", &GPhysFeModelDesc_t::GetSkelParents, &GPhysFeModelDesc_t::SetSkelParents)
        .addProperty("DynNodeWindBases", &GPhysFeModelDesc_t::GetDynNodeWindBases, &GPhysFeModelDesc_t::SetDynNodeWindBases)
        .addProperty("InternalPressure", &GPhysFeModelDesc_t::GetInternalPressure, &GPhysFeModelDesc_t::SetInternalPressure)
        .addProperty("DefaultTimeDilation", &GPhysFeModelDesc_t::GetDefaultTimeDilation, &GPhysFeModelDesc_t::SetDefaultTimeDilation)
        .addProperty("Windage", &GPhysFeModelDesc_t::GetWindage, &GPhysFeModelDesc_t::SetWindage)
        .addProperty("WindDrag", &GPhysFeModelDesc_t::GetWindDrag, &GPhysFeModelDesc_t::SetWindDrag)
        .addProperty("DefaultSurfaceStretch", &GPhysFeModelDesc_t::GetDefaultSurfaceStretch, &GPhysFeModelDesc_t::SetDefaultSurfaceStretch)
        .addProperty("DefaultThreadStretch", &GPhysFeModelDesc_t::GetDefaultThreadStretch, &GPhysFeModelDesc_t::SetDefaultThreadStretch)
        .addProperty("DefaultGravityScale", &GPhysFeModelDesc_t::GetDefaultGravityScale, &GPhysFeModelDesc_t::SetDefaultGravityScale)
        .addProperty("DefaultVelAirDrag", &GPhysFeModelDesc_t::GetDefaultVelAirDrag, &GPhysFeModelDesc_t::SetDefaultVelAirDrag)
        .addProperty("DefaultExpAirDrag", &GPhysFeModelDesc_t::GetDefaultExpAirDrag, &GPhysFeModelDesc_t::SetDefaultExpAirDrag)
        .addProperty("DefaultVelQuadAirDrag", &GPhysFeModelDesc_t::GetDefaultVelQuadAirDrag, &GPhysFeModelDesc_t::SetDefaultVelQuadAirDrag)
        .addProperty("DefaultExpQuadAirDrag", &GPhysFeModelDesc_t::GetDefaultExpQuadAirDrag, &GPhysFeModelDesc_t::SetDefaultExpQuadAirDrag)
        .addProperty("RodVelocitySmoothRate", &GPhysFeModelDesc_t::GetRodVelocitySmoothRate, &GPhysFeModelDesc_t::SetRodVelocitySmoothRate)
        .addProperty("QuadVelocitySmoothRate", &GPhysFeModelDesc_t::GetQuadVelocitySmoothRate, &GPhysFeModelDesc_t::SetQuadVelocitySmoothRate)
        .addProperty("AddWorldCollisionRadius", &GPhysFeModelDesc_t::GetAddWorldCollisionRadius, &GPhysFeModelDesc_t::SetAddWorldCollisionRadius)
        .addProperty("DefaultVolumetricSolveAmount", &GPhysFeModelDesc_t::GetDefaultVolumetricSolveAmount, &GPhysFeModelDesc_t::SetDefaultVolumetricSolveAmount)
        .addProperty("MotionSmoothCDT", &GPhysFeModelDesc_t::GetMotionSmoothCDT, &GPhysFeModelDesc_t::SetMotionSmoothCDT)
        .addProperty("RodVelocitySmoothIterations", &GPhysFeModelDesc_t::GetRodVelocitySmoothIterations, &GPhysFeModelDesc_t::SetRodVelocitySmoothIterations)
        .addProperty("QuadVelocitySmoothIterations", &GPhysFeModelDesc_t::GetQuadVelocitySmoothIterations, &GPhysFeModelDesc_t::SetQuadVelocitySmoothIterations)
        .addFunction("ToPtr", &GPhysFeModelDesc_t::ToPtr)
        .addFunction("IsValid", &GPhysFeModelDesc_t::IsValid)
        .endClass();
}
GCCycleBase::GCCycleBase(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCCycleBase::GCCycleBase(void *ptr) {
    m_ptr = ptr;
}
float GCCycleBase::GetCycle() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CCycleBase->Cycle(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CCycleBase", "m_flCycle");
}
void GCCycleBase::SetCycle(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CCycleBase->Cycle(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CCycleBase", "m_flCycle", false, value);
}
void* GCCycleBase::GetPtr() {
    return m_ptr;
}
std::string GCCycleBase::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCCycleBase::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCCycleBase(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCCycleBase>("CCycleBase")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Cycle", &GCCycleBase::GetCycle, &GCCycleBase::SetCycle)
        .addFunction("ToPtr", &GCCycleBase::ToPtr)
        .addFunction("IsValid", &GCCycleBase::IsValid)
        .endClass();
}
GCPhysSurfacePropertiesSoundNames::GCPhysSurfacePropertiesSoundNames(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPhysSurfacePropertiesSoundNames::GCPhysSurfacePropertiesSoundNames(void *ptr) {
    m_ptr = ptr;
}
std::string GCPhysSurfacePropertiesSoundNames::GetImpactSoft() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysSurfacePropertiesSoundNames->ImpactSoft(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlString>(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_impactSoft").Get();
}
void GCPhysSurfacePropertiesSoundNames::SetImpactSoft(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysSurfacePropertiesSoundNames->ImpactSoft(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_impactSoft", false, CUtlString(value.c_str()));
}
std::string GCPhysSurfacePropertiesSoundNames::GetImpactHard() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysSurfacePropertiesSoundNames->ImpactHard(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlString>(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_impactHard").Get();
}
void GCPhysSurfacePropertiesSoundNames::SetImpactHard(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysSurfacePropertiesSoundNames->ImpactHard(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_impactHard", false, CUtlString(value.c_str()));
}
std::string GCPhysSurfacePropertiesSoundNames::GetScrapeSmooth() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysSurfacePropertiesSoundNames->ScrapeSmooth(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlString>(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_scrapeSmooth").Get();
}
void GCPhysSurfacePropertiesSoundNames::SetScrapeSmooth(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysSurfacePropertiesSoundNames->ScrapeSmooth(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_scrapeSmooth", false, CUtlString(value.c_str()));
}
std::string GCPhysSurfacePropertiesSoundNames::GetScrapeRough() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysSurfacePropertiesSoundNames->ScrapeRough(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlString>(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_scrapeRough").Get();
}
void GCPhysSurfacePropertiesSoundNames::SetScrapeRough(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysSurfacePropertiesSoundNames->ScrapeRough(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_scrapeRough", false, CUtlString(value.c_str()));
}
std::string GCPhysSurfacePropertiesSoundNames::GetBulletImpact() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysSurfacePropertiesSoundNames->BulletImpact(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlString>(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_bulletImpact").Get();
}
void GCPhysSurfacePropertiesSoundNames::SetBulletImpact(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysSurfacePropertiesSoundNames->BulletImpact(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_bulletImpact", false, CUtlString(value.c_str()));
}
std::string GCPhysSurfacePropertiesSoundNames::GetRolling() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysSurfacePropertiesSoundNames->Rolling(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlString>(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_rolling").Get();
}
void GCPhysSurfacePropertiesSoundNames::SetRolling(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysSurfacePropertiesSoundNames->Rolling(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_rolling", false, CUtlString(value.c_str()));
}
std::string GCPhysSurfacePropertiesSoundNames::GetBreak() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysSurfacePropertiesSoundNames->Break(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlString>(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_break").Get();
}
void GCPhysSurfacePropertiesSoundNames::SetBreak(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysSurfacePropertiesSoundNames->Break(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_break", false, CUtlString(value.c_str()));
}
std::string GCPhysSurfacePropertiesSoundNames::GetStrain() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysSurfacePropertiesSoundNames->Strain(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlString>(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_strain").Get();
}
void GCPhysSurfacePropertiesSoundNames::SetStrain(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysSurfacePropertiesSoundNames->Strain(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_strain", false, CUtlString(value.c_str()));
}
std::string GCPhysSurfacePropertiesSoundNames::GetMeleeImpact() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysSurfacePropertiesSoundNames->MeleeImpact(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlString>(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_meleeImpact").Get();
}
void GCPhysSurfacePropertiesSoundNames::SetMeleeImpact(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysSurfacePropertiesSoundNames->MeleeImpact(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_meleeImpact", false, CUtlString(value.c_str()));
}
std::string GCPhysSurfacePropertiesSoundNames::GetPushOff() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysSurfacePropertiesSoundNames->PushOff(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlString>(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_pushOff").Get();
}
void GCPhysSurfacePropertiesSoundNames::SetPushOff(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysSurfacePropertiesSoundNames->PushOff(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_pushOff", false, CUtlString(value.c_str()));
}
std::string GCPhysSurfacePropertiesSoundNames::GetSkidStop() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CPhysSurfacePropertiesSoundNames->SkidStop(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlString>(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_skidStop").Get();
}
void GCPhysSurfacePropertiesSoundNames::SetSkidStop(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CPhysSurfacePropertiesSoundNames->SkidStop(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CPhysSurfacePropertiesSoundNames", "m_skidStop", false, CUtlString(value.c_str()));
}
void* GCPhysSurfacePropertiesSoundNames::GetPtr() {
    return m_ptr;
}
std::string GCPhysSurfacePropertiesSoundNames::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPhysSurfacePropertiesSoundNames::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCPhysSurfacePropertiesSoundNames(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPhysSurfacePropertiesSoundNames>("CPhysSurfacePropertiesSoundNames")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("ImpactSoft", &GCPhysSurfacePropertiesSoundNames::GetImpactSoft, &GCPhysSurfacePropertiesSoundNames::SetImpactSoft)
        .addProperty("ImpactHard", &GCPhysSurfacePropertiesSoundNames::GetImpactHard, &GCPhysSurfacePropertiesSoundNames::SetImpactHard)
        .addProperty("ScrapeSmooth", &GCPhysSurfacePropertiesSoundNames::GetScrapeSmooth, &GCPhysSurfacePropertiesSoundNames::SetScrapeSmooth)
        .addProperty("ScrapeRough", &GCPhysSurfacePropertiesSoundNames::GetScrapeRough, &GCPhysSurfacePropertiesSoundNames::SetScrapeRough)
        .addProperty("BulletImpact", &GCPhysSurfacePropertiesSoundNames::GetBulletImpact, &GCPhysSurfacePropertiesSoundNames::SetBulletImpact)
        .addProperty("Rolling", &GCPhysSurfacePropertiesSoundNames::GetRolling, &GCPhysSurfacePropertiesSoundNames::SetRolling)
        .addProperty("Break", &GCPhysSurfacePropertiesSoundNames::GetBreak, &GCPhysSurfacePropertiesSoundNames::SetBreak)
        .addProperty("Strain", &GCPhysSurfacePropertiesSoundNames::GetStrain, &GCPhysSurfacePropertiesSoundNames::SetStrain)
        .addProperty("MeleeImpact", &GCPhysSurfacePropertiesSoundNames::GetMeleeImpact, &GCPhysSurfacePropertiesSoundNames::SetMeleeImpact)
        .addProperty("PushOff", &GCPhysSurfacePropertiesSoundNames::GetPushOff, &GCPhysSurfacePropertiesSoundNames::SetPushOff)
        .addProperty("SkidStop", &GCPhysSurfacePropertiesSoundNames::GetSkidStop, &GCPhysSurfacePropertiesSoundNames::SetSkidStop)
        .addFunction("ToPtr", &GCPhysSurfacePropertiesSoundNames::ToPtr)
        .addFunction("IsValid", &GCPhysSurfacePropertiesSoundNames::IsValid)
        .endClass();
}
GDynamicMeshDeformParams_t::GDynamicMeshDeformParams_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GDynamicMeshDeformParams_t::GDynamicMeshDeformParams_t(void *ptr) {
    m_ptr = ptr;
}
float GDynamicMeshDeformParams_t::GetTensionCompressScale() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: DynamicMeshDeformParams_t->TensionCompressScale(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "DynamicMeshDeformParams_t", "m_flTensionCompressScale");
}
void GDynamicMeshDeformParams_t::SetTensionCompressScale(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: DynamicMeshDeformParams_t->TensionCompressScale(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "DynamicMeshDeformParams_t", "m_flTensionCompressScale", true, value);
}
float GDynamicMeshDeformParams_t::GetTensionStretchScale() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: DynamicMeshDeformParams_t->TensionStretchScale(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "DynamicMeshDeformParams_t", "m_flTensionStretchScale");
}
void GDynamicMeshDeformParams_t::SetTensionStretchScale(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: DynamicMeshDeformParams_t->TensionStretchScale(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "DynamicMeshDeformParams_t", "m_flTensionStretchScale", true, value);
}
bool GDynamicMeshDeformParams_t::GetRecomputeSmoothNormalsAfterAnimation() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: DynamicMeshDeformParams_t->RecomputeSmoothNormalsAfterAnimation(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "DynamicMeshDeformParams_t", "m_bRecomputeSmoothNormalsAfterAnimation");
}
void GDynamicMeshDeformParams_t::SetRecomputeSmoothNormalsAfterAnimation(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: DynamicMeshDeformParams_t->RecomputeSmoothNormalsAfterAnimation(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "DynamicMeshDeformParams_t", "m_bRecomputeSmoothNormalsAfterAnimation", true, value);
}
bool GDynamicMeshDeformParams_t::GetComputeDynamicMeshTensionAfterAnimation() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: DynamicMeshDeformParams_t->ComputeDynamicMeshTensionAfterAnimation(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "DynamicMeshDeformParams_t", "m_bComputeDynamicMeshTensionAfterAnimation");
}
void GDynamicMeshDeformParams_t::SetComputeDynamicMeshTensionAfterAnimation(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: DynamicMeshDeformParams_t->ComputeDynamicMeshTensionAfterAnimation(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "DynamicMeshDeformParams_t", "m_bComputeDynamicMeshTensionAfterAnimation", true, value);
}
void* GDynamicMeshDeformParams_t::GetPtr() {
    return m_ptr;
}
std::string GDynamicMeshDeformParams_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GDynamicMeshDeformParams_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassDynamicMeshDeformParams_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GDynamicMeshDeformParams_t>("DynamicMeshDeformParams_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("TensionCompressScale", &GDynamicMeshDeformParams_t::GetTensionCompressScale, &GDynamicMeshDeformParams_t::SetTensionCompressScale)
        .addProperty("TensionStretchScale", &GDynamicMeshDeformParams_t::GetTensionStretchScale, &GDynamicMeshDeformParams_t::SetTensionStretchScale)
        .addProperty("RecomputeSmoothNormalsAfterAnimation", &GDynamicMeshDeformParams_t::GetRecomputeSmoothNormalsAfterAnimation, &GDynamicMeshDeformParams_t::SetRecomputeSmoothNormalsAfterAnimation)
        .addProperty("ComputeDynamicMeshTensionAfterAnimation", &GDynamicMeshDeformParams_t::GetComputeDynamicMeshTensionAfterAnimation, &GDynamicMeshDeformParams_t::SetComputeDynamicMeshTensionAfterAnimation)
        .addFunction("ToPtr", &GDynamicMeshDeformParams_t::ToPtr)
        .addFunction("IsValid", &GDynamicMeshDeformParams_t::IsValid)
        .endClass();
}
GCDistanceRemainingMetricEvaluator::GCDistanceRemainingMetricEvaluator(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCDistanceRemainingMetricEvaluator::GCDistanceRemainingMetricEvaluator(void *ptr) {
    m_ptr = ptr;
}
float GCDistanceRemainingMetricEvaluator::GetMaxDistance() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CDistanceRemainingMetricEvaluator->MaxDistance(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CDistanceRemainingMetricEvaluator", "m_flMaxDistance");
}
void GCDistanceRemainingMetricEvaluator::SetMaxDistance(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CDistanceRemainingMetricEvaluator->MaxDistance(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CDistanceRemainingMetricEvaluator", "m_flMaxDistance", false, value);
}
float GCDistanceRemainingMetricEvaluator::GetMinDistance() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CDistanceRemainingMetricEvaluator->MinDistance(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CDistanceRemainingMetricEvaluator", "m_flMinDistance");
}
void GCDistanceRemainingMetricEvaluator::SetMinDistance(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CDistanceRemainingMetricEvaluator->MinDistance(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CDistanceRemainingMetricEvaluator", "m_flMinDistance", false, value);
}
float GCDistanceRemainingMetricEvaluator::GetStartGoalFilterDistance() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CDistanceRemainingMetricEvaluator->StartGoalFilterDistance(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CDistanceRemainingMetricEvaluator", "m_flStartGoalFilterDistance");
}
void GCDistanceRemainingMetricEvaluator::SetStartGoalFilterDistance(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CDistanceRemainingMetricEvaluator->StartGoalFilterDistance(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CDistanceRemainingMetricEvaluator", "m_flStartGoalFilterDistance", false, value);
}
float GCDistanceRemainingMetricEvaluator::GetMaxGoalOvershootScale() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CDistanceRemainingMetricEvaluator->MaxGoalOvershootScale(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CDistanceRemainingMetricEvaluator", "m_flMaxGoalOvershootScale");
}
void GCDistanceRemainingMetricEvaluator::SetMaxGoalOvershootScale(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CDistanceRemainingMetricEvaluator->MaxGoalOvershootScale(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CDistanceRemainingMetricEvaluator", "m_flMaxGoalOvershootScale", false, value);
}
bool GCDistanceRemainingMetricEvaluator::GetFilterFixedMinDistance() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CDistanceRemainingMetricEvaluator->FilterFixedMinDistance(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CDistanceRemainingMetricEvaluator", "m_bFilterFixedMinDistance");
}
void GCDistanceRemainingMetricEvaluator::SetFilterFixedMinDistance(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CDistanceRemainingMetricEvaluator->FilterFixedMinDistance(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CDistanceRemainingMetricEvaluator", "m_bFilterFixedMinDistance", false, value);
}
bool GCDistanceRemainingMetricEvaluator::GetFilterGoalDistance() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CDistanceRemainingMetricEvaluator->FilterGoalDistance(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CDistanceRemainingMetricEvaluator", "m_bFilterGoalDistance");
}
void GCDistanceRemainingMetricEvaluator::SetFilterGoalDistance(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CDistanceRemainingMetricEvaluator->FilterGoalDistance(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CDistanceRemainingMetricEvaluator", "m_bFilterGoalDistance", false, value);
}
bool GCDistanceRemainingMetricEvaluator::GetFilterGoalOvershoot() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CDistanceRemainingMetricEvaluator->FilterGoalOvershoot(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CDistanceRemainingMetricEvaluator", "m_bFilterGoalOvershoot");
}
void GCDistanceRemainingMetricEvaluator::SetFilterGoalOvershoot(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CDistanceRemainingMetricEvaluator->FilterGoalOvershoot(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CDistanceRemainingMetricEvaluator", "m_bFilterGoalOvershoot", false, value);
}
void* GCDistanceRemainingMetricEvaluator::GetPtr() {
    return m_ptr;
}
std::string GCDistanceRemainingMetricEvaluator::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCDistanceRemainingMetricEvaluator::IsValid() {
    return (m_ptr != nullptr);
}
GCMotionMetricEvaluator GCDistanceRemainingMetricEvaluator::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CDistanceRemainingMetricEvaluator::GetParent(ptr=%p)", m_ptr));
    GCMotionMetricEvaluator value(m_ptr);
    return value;
}
void GCDistanceRemainingMetricEvaluator::SetParent(GCMotionMetricEvaluator value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CDistanceRemainingMetricEvaluator::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCDistanceRemainingMetricEvaluator(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCDistanceRemainingMetricEvaluator>("CDistanceRemainingMetricEvaluator")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("MaxDistance", &GCDistanceRemainingMetricEvaluator::GetMaxDistance, &GCDistanceRemainingMetricEvaluator::SetMaxDistance)
        .addProperty("MinDistance", &GCDistanceRemainingMetricEvaluator::GetMinDistance, &GCDistanceRemainingMetricEvaluator::SetMinDistance)
        .addProperty("StartGoalFilterDistance", &GCDistanceRemainingMetricEvaluator::GetStartGoalFilterDistance, &GCDistanceRemainingMetricEvaluator::SetStartGoalFilterDistance)
        .addProperty("MaxGoalOvershootScale", &GCDistanceRemainingMetricEvaluator::GetMaxGoalOvershootScale, &GCDistanceRemainingMetricEvaluator::SetMaxGoalOvershootScale)
        .addProperty("FilterFixedMinDistance", &GCDistanceRemainingMetricEvaluator::GetFilterFixedMinDistance, &GCDistanceRemainingMetricEvaluator::SetFilterFixedMinDistance)
        .addProperty("FilterGoalDistance", &GCDistanceRemainingMetricEvaluator::GetFilterGoalDistance, &GCDistanceRemainingMetricEvaluator::SetFilterGoalDistance)
        .addProperty("FilterGoalOvershoot", &GCDistanceRemainingMetricEvaluator::GetFilterGoalOvershoot, &GCDistanceRemainingMetricEvaluator::SetFilterGoalOvershoot)
        .addProperty("Parent", &GCDistanceRemainingMetricEvaluator::GetParent, &GCDistanceRemainingMetricEvaluator::SetParent)
        .addFunction("ToPtr", &GCDistanceRemainingMetricEvaluator::ToPtr)
        .addFunction("IsValid", &GCDistanceRemainingMetricEvaluator::IsValid)
        .endClass();
}
GVMixDynamicsBand_t::GVMixDynamicsBand_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GVMixDynamicsBand_t::GVMixDynamicsBand_t(void *ptr) {
    m_ptr = ptr;
}
float GVMixDynamicsBand_t::GetFldbGainInput() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: VMixDynamicsBand_t->FldbGainInput(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsBand_t", "m_fldbGainInput");
}
void GVMixDynamicsBand_t::SetFldbGainInput(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: VMixDynamicsBand_t->FldbGainInput(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "VMixDynamicsBand_t", "m_fldbGainInput", true, value);
}
float GVMixDynamicsBand_t::GetFldbGainOutput() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: VMixDynamicsBand_t->FldbGainOutput(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsBand_t", "m_fldbGainOutput");
}
void GVMixDynamicsBand_t::SetFldbGainOutput(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: VMixDynamicsBand_t->FldbGainOutput(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "VMixDynamicsBand_t", "m_fldbGainOutput", true, value);
}
float GVMixDynamicsBand_t::GetFldbThresholdBelow() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: VMixDynamicsBand_t->FldbThresholdBelow(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsBand_t", "m_fldbThresholdBelow");
}
void GVMixDynamicsBand_t::SetFldbThresholdBelow(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: VMixDynamicsBand_t->FldbThresholdBelow(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "VMixDynamicsBand_t", "m_fldbThresholdBelow", true, value);
}
float GVMixDynamicsBand_t::GetFldbThresholdAbove() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: VMixDynamicsBand_t->FldbThresholdAbove(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsBand_t", "m_fldbThresholdAbove");
}
void GVMixDynamicsBand_t::SetFldbThresholdAbove(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: VMixDynamicsBand_t->FldbThresholdAbove(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "VMixDynamicsBand_t", "m_fldbThresholdAbove", true, value);
}
float GVMixDynamicsBand_t::GetRatioBelow() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: VMixDynamicsBand_t->RatioBelow(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsBand_t", "m_flRatioBelow");
}
void GVMixDynamicsBand_t::SetRatioBelow(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: VMixDynamicsBand_t->RatioBelow(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "VMixDynamicsBand_t", "m_flRatioBelow", true, value);
}
float GVMixDynamicsBand_t::GetRatioAbove() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: VMixDynamicsBand_t->RatioAbove(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsBand_t", "m_flRatioAbove");
}
void GVMixDynamicsBand_t::SetRatioAbove(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: VMixDynamicsBand_t->RatioAbove(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "VMixDynamicsBand_t", "m_flRatioAbove", true, value);
}
float GVMixDynamicsBand_t::GetAttackTimeMS() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: VMixDynamicsBand_t->AttackTimeMS(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsBand_t", "m_flAttackTimeMS");
}
void GVMixDynamicsBand_t::SetAttackTimeMS(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: VMixDynamicsBand_t->AttackTimeMS(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "VMixDynamicsBand_t", "m_flAttackTimeMS", true, value);
}
float GVMixDynamicsBand_t::GetReleaseTimeMS() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: VMixDynamicsBand_t->ReleaseTimeMS(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "VMixDynamicsBand_t", "m_flReleaseTimeMS");
}
void GVMixDynamicsBand_t::SetReleaseTimeMS(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: VMixDynamicsBand_t->ReleaseTimeMS(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "VMixDynamicsBand_t", "m_flReleaseTimeMS", true, value);
}
bool GVMixDynamicsBand_t::GetEnable() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: VMixDynamicsBand_t->Enable(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "VMixDynamicsBand_t", "m_bEnable");
}
void GVMixDynamicsBand_t::SetEnable(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: VMixDynamicsBand_t->Enable(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "VMixDynamicsBand_t", "m_bEnable", true, value);
}
bool GVMixDynamicsBand_t::GetSolo() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: VMixDynamicsBand_t->Solo(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "VMixDynamicsBand_t", "m_bSolo");
}
void GVMixDynamicsBand_t::SetSolo(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: VMixDynamicsBand_t->Solo(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "VMixDynamicsBand_t", "m_bSolo", true, value);
}
void* GVMixDynamicsBand_t::GetPtr() {
    return m_ptr;
}
std::string GVMixDynamicsBand_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GVMixDynamicsBand_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassVMixDynamicsBand_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GVMixDynamicsBand_t>("VMixDynamicsBand_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("FldbGainInput", &GVMixDynamicsBand_t::GetFldbGainInput, &GVMixDynamicsBand_t::SetFldbGainInput)
        .addProperty("FldbGainOutput", &GVMixDynamicsBand_t::GetFldbGainOutput, &GVMixDynamicsBand_t::SetFldbGainOutput)
        .addProperty("FldbThresholdBelow", &GVMixDynamicsBand_t::GetFldbThresholdBelow, &GVMixDynamicsBand_t::SetFldbThresholdBelow)
        .addProperty("FldbThresholdAbove", &GVMixDynamicsBand_t::GetFldbThresholdAbove, &GVMixDynamicsBand_t::SetFldbThresholdAbove)
        .addProperty("RatioBelow", &GVMixDynamicsBand_t::GetRatioBelow, &GVMixDynamicsBand_t::SetRatioBelow)
        .addProperty("RatioAbove", &GVMixDynamicsBand_t::GetRatioAbove, &GVMixDynamicsBand_t::SetRatioAbove)
        .addProperty("AttackTimeMS", &GVMixDynamicsBand_t::GetAttackTimeMS, &GVMixDynamicsBand_t::SetAttackTimeMS)
        .addProperty("ReleaseTimeMS", &GVMixDynamicsBand_t::GetReleaseTimeMS, &GVMixDynamicsBand_t::SetReleaseTimeMS)
        .addProperty("Enable", &GVMixDynamicsBand_t::GetEnable, &GVMixDynamicsBand_t::SetEnable)
        .addProperty("Solo", &GVMixDynamicsBand_t::GetSolo, &GVMixDynamicsBand_t::SetSolo)
        .addFunction("ToPtr", &GVMixDynamicsBand_t::ToPtr)
        .addFunction("IsValid", &GVMixDynamicsBand_t::IsValid)
        .endClass();
}
GRnCapsule_t::GRnCapsule_t(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GRnCapsule_t::GRnCapsule_t(void *ptr) {
    m_ptr = ptr;
}
std::vector<Vector> GRnCapsule_t::GetCenter() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: RnCapsule_t->Center(ptr=%p,size=2)", m_ptr));
    Vector* outValue = (Vector*)GetSchemaPtr(m_ptr, "RnCapsule_t", "m_vCenter"); std::vector<Vector> ret; for(int i = 0; i < 2; i++) { ret.push_back(outValue[i]); } return ret;
}
void GRnCapsule_t::SetCenter(std::vector<Vector> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: RnCapsule_t->Center(ptr=%p,size=2)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Center' is not possible.\n");
}
float GRnCapsule_t::GetRadius() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: RnCapsule_t->Radius(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "RnCapsule_t", "m_flRadius");
}
void GRnCapsule_t::SetRadius(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: RnCapsule_t->Radius(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "RnCapsule_t", "m_flRadius", true, value);
}
void* GRnCapsule_t::GetPtr() {
    return m_ptr;
}
std::string GRnCapsule_t::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GRnCapsule_t::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassRnCapsule_t(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GRnCapsule_t>("RnCapsule_t")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Center", &GRnCapsule_t::GetCenter, &GRnCapsule_t::SetCenter)
        .addProperty("Radius", &GRnCapsule_t::GetRadius, &GRnCapsule_t::SetRadius)
        .addFunction("ToPtr", &GRnCapsule_t::ToPtr)
        .addFunction("IsValid", &GRnCapsule_t::IsValid)
        .endClass();
}
GCAnimInputDamping::GCAnimInputDamping(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCAnimInputDamping::GCAnimInputDamping(void *ptr) {
    m_ptr = ptr;
}
uint64_t GCAnimInputDamping::GetSpeedFunction() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAnimInputDamping->SpeedFunction(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CAnimInputDamping", "m_speedFunction");
}
void GCAnimInputDamping::SetSpeedFunction(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAnimInputDamping->SpeedFunction(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CAnimInputDamping", "m_speedFunction", false, value);
}
float GCAnimInputDamping::GetSpeedScale() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAnimInputDamping->SpeedScale(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CAnimInputDamping", "m_fSpeedScale");
}
void GCAnimInputDamping::SetSpeedScale(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAnimInputDamping->SpeedScale(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CAnimInputDamping", "m_fSpeedScale", false, value);
}
void* GCAnimInputDamping::GetPtr() {
    return m_ptr;
}
std::string GCAnimInputDamping::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCAnimInputDamping::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCAnimInputDamping(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCAnimInputDamping>("CAnimInputDamping")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("SpeedFunction", &GCAnimInputDamping::GetSpeedFunction, &GCAnimInputDamping::SetSpeedFunction)
        .addProperty("SpeedScale", &GCAnimInputDamping::GetSpeedScale, &GCAnimInputDamping::SetSpeedScale)
        .addFunction("ToPtr", &GCAnimInputDamping::ToPtr)
        .addFunction("IsValid", &GCAnimInputDamping::IsValid)
        .endClass();
}
GAnimTagID::GAnimTagID(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GAnimTagID::GAnimTagID(void *ptr) {
    m_ptr = ptr;
}
uint32_t GAnimTagID::GetId() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: AnimTagID->Id(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "AnimTagID", "m_id");
}
void GAnimTagID::SetId(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: AnimTagID->Id(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "AnimTagID", "m_id", false, value);
}
void* GAnimTagID::GetPtr() {
    return m_ptr;
}
std::string GAnimTagID::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GAnimTagID::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassAnimTagID(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GAnimTagID>("AnimTagID")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Id", &GAnimTagID::GetId, &GAnimTagID::SetId)
        .addFunction("ToPtr", &GAnimTagID::ToPtr)
        .addFunction("IsValid", &GAnimTagID::IsValid)
        .endClass();
}
GCParticleFunctionPreEmission::GCParticleFunctionPreEmission(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCParticleFunctionPreEmission::GCParticleFunctionPreEmission(void *ptr) {
    m_ptr = ptr;
}
bool GCParticleFunctionPreEmission::GetRunOnce() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFunctionPreEmission->RunOnce(ptr=%p)", m_ptr));
    return GetSchemaValue<bool>(m_ptr, "CParticleFunctionPreEmission", "m_bRunOnce");
}
void GCParticleFunctionPreEmission::SetRunOnce(bool value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFunctionPreEmission->RunOnce(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFunctionPreEmission", "m_bRunOnce", false, value);
}
void* GCParticleFunctionPreEmission::GetPtr() {
    return m_ptr;
}
std::string GCParticleFunctionPreEmission::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCParticleFunctionPreEmission::IsValid() {
    return (m_ptr != nullptr);
}
GCParticleFunctionOperator GCParticleFunctionPreEmission::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CParticleFunctionPreEmission::GetParent(ptr=%p)", m_ptr));
    GCParticleFunctionOperator value(m_ptr);
    return value;
}
void GCParticleFunctionPreEmission::SetParent(GCParticleFunctionOperator value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CParticleFunctionPreEmission::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCParticleFunctionPreEmission(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCParticleFunctionPreEmission>("CParticleFunctionPreEmission")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("RunOnce", &GCParticleFunctionPreEmission::GetRunOnce, &GCParticleFunctionPreEmission::SetRunOnce)
        .addProperty("Parent", &GCParticleFunctionPreEmission::GetParent, &GCParticleFunctionPreEmission::SetParent)
        .addFunction("ToPtr", &GCParticleFunctionPreEmission::ToPtr)
        .addFunction("IsValid", &GCParticleFunctionPreEmission::IsValid)
        .endClass();
}
GCPerParticleFloatInput::GCPerParticleFloatInput(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCPerParticleFloatInput::GCPerParticleFloatInput(void *ptr) {
    m_ptr = ptr;
}
void* GCPerParticleFloatInput::GetPtr() {
    return m_ptr;
}
std::string GCPerParticleFloatInput::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCPerParticleFloatInput::IsValid() {
    return (m_ptr != nullptr);
}
GCParticleFloatInput GCPerParticleFloatInput::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPerParticleFloatInput::GetParent(ptr=%p)", m_ptr));
    GCParticleFloatInput value(m_ptr);
    return value;
}
void GCPerParticleFloatInput::SetParent(GCParticleFloatInput value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CPerParticleFloatInput::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCPerParticleFloatInput(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCPerParticleFloatInput>("CPerParticleFloatInput")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Parent", &GCPerParticleFloatInput::GetParent, &GCPerParticleFloatInput::SetParent)
        .addFunction("ToPtr", &GCPerParticleFloatInput::ToPtr)
        .addFunction("IsValid", &GCPerParticleFloatInput::IsValid)
        .endClass();
}
GCSosGroupActionSchema::GCSosGroupActionSchema(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCSosGroupActionSchema::GCSosGroupActionSchema(void *ptr) {
    m_ptr = ptr;
}
std::string GCSosGroupActionSchema::GetName() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSosGroupActionSchema->Name(ptr=%p)", m_ptr));
    return GetSchemaValue<CUtlString>(m_ptr, "CSosGroupActionSchema", "m_name").Get();
}
void GCSosGroupActionSchema::SetName(std::string value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSosGroupActionSchema->Name(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSosGroupActionSchema", "m_name", false, CUtlString(value.c_str()));
}
uint64_t GCSosGroupActionSchema::GetActionType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSosGroupActionSchema->ActionType(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CSosGroupActionSchema", "m_actionType");
}
void GCSosGroupActionSchema::SetActionType(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSosGroupActionSchema->ActionType(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSosGroupActionSchema", "m_actionType", false, value);
}
uint64_t GCSosGroupActionSchema::GetActionInstanceType() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSosGroupActionSchema->ActionInstanceType(ptr=%p)", m_ptr));
    return GetSchemaValue<uint64_t>(m_ptr, "CSosGroupActionSchema", "m_actionInstanceType");
}
void GCSosGroupActionSchema::SetActionInstanceType(uint64_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSosGroupActionSchema->ActionInstanceType(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSosGroupActionSchema", "m_actionInstanceType", false, value);
}
void* GCSosGroupActionSchema::GetPtr() {
    return m_ptr;
}
std::string GCSosGroupActionSchema::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCSosGroupActionSchema::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCSosGroupActionSchema(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCSosGroupActionSchema>("CSosGroupActionSchema")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Name", &GCSosGroupActionSchema::GetName, &GCSosGroupActionSchema::SetName)
        .addProperty("ActionType", &GCSosGroupActionSchema::GetActionType, &GCSosGroupActionSchema::SetActionType)
        .addProperty("ActionInstanceType", &GCSosGroupActionSchema::GetActionInstanceType, &GCSosGroupActionSchema::SetActionInstanceType)
        .addFunction("ToPtr", &GCSosGroupActionSchema::ToPtr)
        .addFunction("IsValid", &GCSosGroupActionSchema::IsValid)
        .endClass();
}
GCFutureFacingMetricEvaluator::GCFutureFacingMetricEvaluator(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCFutureFacingMetricEvaluator::GCFutureFacingMetricEvaluator(void *ptr) {
    m_ptr = ptr;
}
float GCFutureFacingMetricEvaluator::GetDistance() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFutureFacingMetricEvaluator->Distance(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CFutureFacingMetricEvaluator", "m_flDistance");
}
void GCFutureFacingMetricEvaluator::SetDistance(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFutureFacingMetricEvaluator->Distance(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFutureFacingMetricEvaluator", "m_flDistance", false, value);
}
float GCFutureFacingMetricEvaluator::GetTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CFutureFacingMetricEvaluator->Time(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CFutureFacingMetricEvaluator", "m_flTime");
}
void GCFutureFacingMetricEvaluator::SetTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CFutureFacingMetricEvaluator->Time(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CFutureFacingMetricEvaluator", "m_flTime", false, value);
}
void* GCFutureFacingMetricEvaluator::GetPtr() {
    return m_ptr;
}
std::string GCFutureFacingMetricEvaluator::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCFutureFacingMetricEvaluator::IsValid() {
    return (m_ptr != nullptr);
}
GCMotionMetricEvaluator GCFutureFacingMetricEvaluator::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFutureFacingMetricEvaluator::GetParent(ptr=%p)", m_ptr));
    GCMotionMetricEvaluator value(m_ptr);
    return value;
}
void GCFutureFacingMetricEvaluator::SetParent(GCMotionMetricEvaluator value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CFutureFacingMetricEvaluator::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCFutureFacingMetricEvaluator(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCFutureFacingMetricEvaluator>("CFutureFacingMetricEvaluator")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Distance", &GCFutureFacingMetricEvaluator::GetDistance, &GCFutureFacingMetricEvaluator::SetDistance)
        .addProperty("Time", &GCFutureFacingMetricEvaluator::GetTime, &GCFutureFacingMetricEvaluator::SetTime)
        .addProperty("Parent", &GCFutureFacingMetricEvaluator::GetParent, &GCFutureFacingMetricEvaluator::SetParent)
        .addFunction("ToPtr", &GCFutureFacingMetricEvaluator::ToPtr)
        .addFunction("IsValid", &GCFutureFacingMetricEvaluator::IsValid)
        .endClass();
}
GCSeqTransition::GCSeqTransition(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCSeqTransition::GCSeqTransition(void *ptr) {
    m_ptr = ptr;
}
float GCSeqTransition::GetFadeInTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSeqTransition->FadeInTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CSeqTransition", "m_flFadeInTime");
}
void GCSeqTransition::SetFadeInTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSeqTransition->FadeInTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSeqTransition", "m_flFadeInTime", false, value);
}
float GCSeqTransition::GetFadeOutTime() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CSeqTransition->FadeOutTime(ptr=%p)", m_ptr));
    return GetSchemaValue<float>(m_ptr, "CSeqTransition", "m_flFadeOutTime");
}
void GCSeqTransition::SetFadeOutTime(float value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CSeqTransition->FadeOutTime(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CSeqTransition", "m_flFadeOutTime", false, value);
}
void* GCSeqTransition::GetPtr() {
    return m_ptr;
}
std::string GCSeqTransition::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCSeqTransition::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCSeqTransition(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCSeqTransition>("CSeqTransition")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("FadeInTime", &GCSeqTransition::GetFadeInTime, &GCSeqTransition::SetFadeInTime)
        .addProperty("FadeOutTime", &GCSeqTransition::GetFadeOutTime, &GCSeqTransition::SetFadeOutTime)
        .addFunction("ToPtr", &GCSeqTransition::ToPtr)
        .addFunction("IsValid", &GCSeqTransition::IsValid)
        .endClass();
}
GCAnimNodePath::GCAnimNodePath(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCAnimNodePath::GCAnimNodePath(void *ptr) {
    m_ptr = ptr;
}
std::vector<GAnimNodeID> GCAnimNodePath::GetPath() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAnimNodePath->Path(ptr=%p,size=11)", m_ptr));
    GAnimNodeID* outValue = (GAnimNodeID*)GetSchemaPtr(m_ptr, "CAnimNodePath", "m_path"); std::vector<GAnimNodeID> ret; for(int i = 0; i < 11; i++) { ret.push_back(outValue[i]); } return ret;
}
void GCAnimNodePath::SetPath(std::vector<GAnimNodeID> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAnimNodePath->Path(ptr=%p,size=11)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Path' is not possible.\n");
}
int32_t GCAnimNodePath::GetCount() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CAnimNodePath->Count(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CAnimNodePath", "m_nCount");
}
void GCAnimNodePath::SetCount(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CAnimNodePath->Count(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CAnimNodePath", "m_nCount", false, value);
}
void* GCAnimNodePath::GetPtr() {
    return m_ptr;
}
std::string GCAnimNodePath::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCAnimNodePath::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCAnimNodePath(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCAnimNodePath>("CAnimNodePath")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Path", &GCAnimNodePath::GetPath, &GCAnimNodePath::SetPath)
        .addProperty("Count", &GCAnimNodePath::GetCount, &GCAnimNodePath::SetCount)
        .addFunction("ToPtr", &GCAnimNodePath::ToPtr)
        .addFunction("IsValid", &GCAnimNodePath::IsValid)
        .endClass();
}
GCParamSpanUpdater::GCParamSpanUpdater(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCParamSpanUpdater::GCParamSpanUpdater(void *ptr) {
    m_ptr = ptr;
}
std::vector<GParamSpan_t> GCParamSpanUpdater::GetSpans() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParamSpanUpdater->Spans(ptr=%p)", m_ptr));
    CUtlVector<GParamSpan_t>* vec = GetSchemaValue<CUtlVector<GParamSpan_t>*>(m_ptr, "CParamSpanUpdater", "m_spans"); std::vector<GParamSpan_t> outVec; for(int i = 0; i < vec->Count(); i++) { outVec.push_back(vec->Element(i)); } return outVec;
}
void GCParamSpanUpdater::SetSpans(std::vector<GParamSpan_t> value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParamSpanUpdater->Spans(ptr=%p)", m_ptr));
    SetSchemaValueCUtlVector<GParamSpan_t>(m_ptr, "CParamSpanUpdater", "m_spans", false, value);
}
void* GCParamSpanUpdater::GetPtr() {
    return m_ptr;
}
std::string GCParamSpanUpdater::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCParamSpanUpdater::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassCParamSpanUpdater(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCParamSpanUpdater>("CParamSpanUpdater")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Spans", &GCParamSpanUpdater::GetSpans, &GCParamSpanUpdater::SetSpans)
        .addFunction("ToPtr", &GCParamSpanUpdater::ToPtr)
        .addFunction("IsValid", &GCParamSpanUpdater::IsValid)
        .endClass();
}
GAnimNodeID::GAnimNodeID(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GAnimNodeID::GAnimNodeID(void *ptr) {
    m_ptr = ptr;
}
uint32_t GAnimNodeID::GetId() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: AnimNodeID->Id(ptr=%p)", m_ptr));
    return GetSchemaValue<uint32_t>(m_ptr, "AnimNodeID", "m_id");
}
void GAnimNodeID::SetId(uint32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: AnimNodeID->Id(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "AnimNodeID", "m_id", false, value);
}
void* GAnimNodeID::GetPtr() {
    return m_ptr;
}
std::string GAnimNodeID::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GAnimNodeID::IsValid() {
    return (m_ptr != nullptr);
}
void SetupLuaClassAnimNodeID(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GAnimNodeID>("AnimNodeID")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("Id", &GAnimNodeID::GetId, &GAnimNodeID::SetId)
        .addFunction("ToPtr", &GAnimNodeID::ToPtr)
        .addFunction("IsValid", &GAnimNodeID::IsValid)
        .endClass();
}
GCParticleFunctionInitializer::GCParticleFunctionInitializer(std::string ptr, lua_State* state) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
    plugin_name = FetchPluginName(state);
}
GCParticleFunctionInitializer::GCParticleFunctionInitializer(void *ptr) {
    m_ptr = ptr;
}
int32_t GCParticleFunctionInitializer::GetAssociatedEmitterIndex() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Get: CParticleFunctionInitializer->AssociatedEmitterIndex(ptr=%p)", m_ptr));
    return GetSchemaValue<int32_t>(m_ptr, "CParticleFunctionInitializer", "m_nAssociatedEmitterIndex");
}
void GCParticleFunctionInitializer::SetAssociatedEmitterIndex(int32_t value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("SDK Set: CParticleFunctionInitializer->AssociatedEmitterIndex(ptr=%p)", m_ptr));
    SetSchemaValue(m_ptr, "CParticleFunctionInitializer", "m_nAssociatedEmitterIndex", false, value);
}
void* GCParticleFunctionInitializer::GetPtr() {
    return m_ptr;
}
std::string GCParticleFunctionInitializer::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCParticleFunctionInitializer::IsValid() {
    return (m_ptr != nullptr);
}
GCParticleFunction GCParticleFunctionInitializer::GetParent() const {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CParticleFunctionInitializer::GetParent(ptr=%p)", m_ptr));
    GCParticleFunction value(m_ptr);
    return value;
}
void GCParticleFunctionInitializer::SetParent(GCParticleFunction value) {
    REGISTER_CALLSTACK(this->plugin_name, string_format("CParticleFunctionInitializer::SetParent(ptr=%p)", m_ptr));
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCParticleFunctionInitializer(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCParticleFunctionInitializer>("CParticleFunctionInitializer")
        .addConstructor<void (*)(std::string, lua_State*)>()
        .addProperty("AssociatedEmitterIndex", &GCParticleFunctionInitializer::GetAssociatedEmitterIndex, &GCParticleFunctionInitializer::SetAssociatedEmitterIndex)
        .addProperty("Parent", &GCParticleFunctionInitializer::GetParent, &GCParticleFunctionInitializer::SetParent)
        .addFunction("ToPtr", &GCParticleFunctionInitializer::ToPtr)
        .addFunction("IsValid", &GCParticleFunctionInitializer::IsValid)
        .endClass();
}