#include "classes.h"

#include "../../../../sdk/entity/CBaseEntity.h"
#include "../../../../sdk/entity/CBaseModelEntity.h"

GCMapInfo::GCMapInfo(std::string ptr) {
    m_ptr = (void*)(strtol(ptr.c_str(), nullptr, 16));
}
GCMapInfo::GCMapInfo(void *ptr) {
    m_ptr = ptr;
}
int32_t GCMapInfo::GetBuyingStatus() const {
    return GetSchemaValue<int32_t>(m_ptr, "CMapInfo", "m_iBuyingStatus");
}
void GCMapInfo::SetBuyingStatus(int32_t value) {
    SetSchemaValue(m_ptr, "CMapInfo", "m_iBuyingStatus", false, value);
}
float GCMapInfo::GetBombRadius() const {
    return GetSchemaValue<float>(m_ptr, "CMapInfo", "m_flBombRadius");
}
void GCMapInfo::SetBombRadius(float value) {
    SetSchemaValue(m_ptr, "CMapInfo", "m_flBombRadius", false, value);
}
int32_t GCMapInfo::GetPetPopulation() const {
    return GetSchemaValue<int32_t>(m_ptr, "CMapInfo", "m_iPetPopulation");
}
void GCMapInfo::SetPetPopulation(int32_t value) {
    SetSchemaValue(m_ptr, "CMapInfo", "m_iPetPopulation", false, value);
}
bool GCMapInfo::GetUseNormalSpawnsForDM() const {
    return GetSchemaValue<bool>(m_ptr, "CMapInfo", "m_bUseNormalSpawnsForDM");
}
void GCMapInfo::SetUseNormalSpawnsForDM(bool value) {
    SetSchemaValue(m_ptr, "CMapInfo", "m_bUseNormalSpawnsForDM", false, value);
}
bool GCMapInfo::GetDisableAutoGeneratedDMSpawns() const {
    return GetSchemaValue<bool>(m_ptr, "CMapInfo", "m_bDisableAutoGeneratedDMSpawns");
}
void GCMapInfo::SetDisableAutoGeneratedDMSpawns(bool value) {
    SetSchemaValue(m_ptr, "CMapInfo", "m_bDisableAutoGeneratedDMSpawns", false, value);
}
float GCMapInfo::GetBotMaxVisionDistance() const {
    return GetSchemaValue<float>(m_ptr, "CMapInfo", "m_flBotMaxVisionDistance");
}
void GCMapInfo::SetBotMaxVisionDistance(float value) {
    SetSchemaValue(m_ptr, "CMapInfo", "m_flBotMaxVisionDistance", false, value);
}
int32_t GCMapInfo::GetHostageCount() const {
    return GetSchemaValue<int32_t>(m_ptr, "CMapInfo", "m_iHostageCount");
}
void GCMapInfo::SetHostageCount(int32_t value) {
    SetSchemaValue(m_ptr, "CMapInfo", "m_iHostageCount", false, value);
}
bool GCMapInfo::GetFadePlayerVisibilityFarZ() const {
    return GetSchemaValue<bool>(m_ptr, "CMapInfo", "m_bFadePlayerVisibilityFarZ");
}
void GCMapInfo::SetFadePlayerVisibilityFarZ(bool value) {
    SetSchemaValue(m_ptr, "CMapInfo", "m_bFadePlayerVisibilityFarZ", false, value);
}
std::string GCMapInfo::ToPtr() {
    return string_format("%p", m_ptr);
}
bool GCMapInfo::IsValid() {
    return (m_ptr != nullptr);
}
GCPointEntity GCMapInfo::GetParent() const {
    GCPointEntity value(m_ptr);
    return value;
}
void GCMapInfo::SetParent(GCPointEntity value) {
    PLUGIN_PRINT("Schema SDK", "Setting a value for 'Parent' is not possible.\n");
}
void SetupLuaClassCMapInfo(LuaPlugin *plugin, lua_State *state)
{
    luabridge::getGlobalNamespace(state)
        .beginClass<GCMapInfo>("CMapInfo")
        .addConstructor<void (*)(std::string)>()
        .addProperty("BuyingStatus", &GCMapInfo::GetBuyingStatus, &GCMapInfo::SetBuyingStatus)
        .addProperty("BombRadius", &GCMapInfo::GetBombRadius, &GCMapInfo::SetBombRadius)
        .addProperty("PetPopulation", &GCMapInfo::GetPetPopulation, &GCMapInfo::SetPetPopulation)
        .addProperty("UseNormalSpawnsForDM", &GCMapInfo::GetUseNormalSpawnsForDM, &GCMapInfo::SetUseNormalSpawnsForDM)
        .addProperty("DisableAutoGeneratedDMSpawns", &GCMapInfo::GetDisableAutoGeneratedDMSpawns, &GCMapInfo::SetDisableAutoGeneratedDMSpawns)
        .addProperty("BotMaxVisionDistance", &GCMapInfo::GetBotMaxVisionDistance, &GCMapInfo::SetBotMaxVisionDistance)
        .addProperty("HostageCount", &GCMapInfo::GetHostageCount, &GCMapInfo::SetHostageCount)
        .addProperty("FadePlayerVisibilityFarZ", &GCMapInfo::GetFadePlayerVisibilityFarZ, &GCMapInfo::SetFadePlayerVisibilityFarZ)
        .addProperty("Parent", &GCMapInfo::GetParent, &GCMapInfo::SetParent)
        .addFunction("ToPtr", &GCMapInfo::ToPtr)
        .addFunction("IsValid", &GCMapInfo::IsValid)
        .endClass();
}